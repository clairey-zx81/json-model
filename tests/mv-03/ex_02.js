#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

var check_model_map = new Map()

// check $x1 (.'$x1')
function json_model_5(val, path, rep)
{
    let res;
    // .'$x1'
    res = ((typeof val === 'string' || val instanceof String)) && val == "Susie";
    if (! res)
    {
        rep !== null && rep.push(["unexpected _Susie [.'$x1']", path])
    }
    return res;
}

// check $x2 (.'$x2')
function json_model_6(val, path, rep)
{
    let res;
    // .'$x2'
    res = ((typeof val === 'string' || val instanceof String)) && val == "Susie";
    if (! res)
    {
        rep !== null && rep.push(["unexpected _Susie [.'$x2']", path])
    }
    return res;
}

// check $x3 (.'$x3')
function json_model_7(val, path, rep)
{
    let res;
    // .'$x3'
    res = ((typeof val === 'string' || val instanceof String)) && val == "Susie";
    if (! res)
    {
        rep !== null && rep.push(["unexpected _Susie [.'$x3']", path])
    }
    return res;
}

// check $__external_0 (.'$__external_0')
function json_model_8(val, path, rep)
{
    let res;
    // .'$__external_0'
    res = ((typeof val === 'string' || val instanceof String)) && val == "Susie";
    if (! res)
    {
        rep !== null && rep.push(["unexpected _Susie [.'$__external_0']", path])
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = Array.isArray(val) && val.length == 4;
    if (res)
    {
        let lpath_0 = path ? path.concat([0]) : null;
        // .0
        res = ((typeof val[0] === 'string' || val[0] instanceof String)) && val[0] == "Susie";
        if (! res)
        {
            rep !== null && rep.push(["unexpected _Susie [.0]", (path ? lpath_0 : null)])
        }
        if (res)
        {
            lpath_0 = path ? path.concat([1]) : null;
            // .1
            res = ((typeof val[1] === 'string' || val[1] instanceof String)) && val[1] == "Susie";
            if (! res)
            {
                rep !== null && rep.push(["unexpected _Susie [.1]", (path ? lpath_0 : null)])
            }
            if (res)
            {
                lpath_0 = path ? path.concat([2]) : null;
                // .2
                res = ((typeof val[2] === 'string' || val[2] instanceof String)) && val[2] == "Susie";
                if (! res)
                {
                    rep !== null && rep.push(["unexpected _Susie [.2]", (path ? lpath_0 : null)])
                }
                if (res)
                {
                    lpath_0 = path ? path.concat([3]) : null;
                    // .3
                    res = ((typeof val[3] === 'string' || val[3] instanceof String)) && val[3] == "Susie";
                    if (! res)
                    {
                        rep !== null && rep.push(["unexpected _Susie [.3]", (path ? lpath_0 : null)])
                    }
                }
            }
        }
    }
    if (! res)
    {
        rep !== null && rep.push(["not array or unexpected array [.]", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_1)
        check_model_map.set("x1", json_model_5)
        check_model_map.set("x2", json_model_6)
        check_model_map.set("x3", json_model_7)
        check_model_map.set("__external_0", json_model_8)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
