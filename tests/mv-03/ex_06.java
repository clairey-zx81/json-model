//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class ex_06 extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> ex_06_map_pmap;

    // check $ex5 (.'$ex5')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$ex5'
        // .'$ex5'.'|'.0
        res = json_model_5(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $Ex05a [.'$ex5'.'|'.0]", path);
        }
        if (! res)
        {
            // .'$ex5'.'|'.1
            res = json_model_6(val, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Ex05b [.'$ex5'.'|'.1]", path);
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'$ex5'.'|']", path);
        }
        return res;
    }
    
    // check $Ex06 (.'$Ex06')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Ex06'
        res = json.isBoolean(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not a bool [.'$Ex06']", path);
        }
        return res;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = json.isArray(val) && json.arrayLength(val) == 3;
        if (res)
        {
            Path lpath_0 = new Path(0, path);
            // .0
            res = json_model_5(json.arrayItem(val, 0), (path != null ? lpath_0 : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $ex5#Ex05a [.0]", (path != null ? lpath_0 : null));
            }
            if (res)
            {
                lpath_0 = new Path(1, path);
                // .1
                res = json_model_6(json.arrayItem(val, 1), (path != null ? lpath_0 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $ex5#Ex05b [.1]", (path != null ? lpath_0 : null));
                }
                if (res)
                {
                    lpath_0 = new Path(2, path);
                    // .2
                    res = json_model_3(json.arrayItem(val, 2), (path != null ? lpath_0 : null), rep);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("unexpected $Ex06 [.2]", (path != null ? lpath_0 : null));
                    }
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.]", path);
        }
        return res;
    }
    
    // check $ex5#Ex05a (.'$ex5#Ex05a')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$ex5#Ex05a'
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$ex5#Ex05a']", path);
        }
        return res;
    }
    
    // check $ex5#Ex05b (.'$ex5#Ex05b')
    public boolean json_model_6(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$ex5#Ex05b'
        res = json.isString(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.'$ex5#Ex05b']", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            ex_06_map_pmap = new HashMap<String, Checker>();
            ex_06_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            ex_06_map_pmap.put("ex5", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            ex_06_map_pmap.put("Ex06", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            ex_06_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return ex_06_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return ex_06_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new ex_06();
        Main.main("ex_06", checker, VERSION, args);
    }
}
