#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $x1 (.'$x1')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$x1'
    res = isinstance(val, str) and val == "Susie"
    if not res:
        rep is None or rep.append(("unexpected _Susie [.'$x1']", path))
    return res

# check $x2 (.'$x2')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$x2'
    res = isinstance(val, str) and val == "Susie"
    if not res:
        rep is None or rep.append(("unexpected _Susie [.'$x2']", path))
    return res

# object .
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "a":
            # handle must a property
            must_count += 1
            # .a
            res = isinstance(pval, str) and pval == "Susie"
            if not res:
                rep is None or rep.append(("unexpected _Susie [.a]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory property value [..a]", lpath_0 if path is not None else None))
                return False
        elif prop == "b":
            # handle must b property
            must_count += 1
            # .b
            res = isinstance(pval, str) and pval == "Susie"
            if not res:
                rep is None or rep.append(("unexpected _Susie [.b]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory property value [..b]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [.]", lpath_0 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "a" in val:
                rep is None or rep.append(("missing mandatory prop <a> [.]", path))
            if not "b" in val:
                rep is None or rep.append(("missing mandatory prop <b> [.]", path))
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "x1": json_model_4,
            "x2": json_model_5,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
