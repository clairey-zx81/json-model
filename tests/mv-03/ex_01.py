#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $x1 (.'$x1')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$x1'
    res: bool = isinstance(val, str) and val == "Susie"
    if not res:
        rep is None or rep.append(("unexpected _Susie [.'$x1']", path))
    return res

# check $x2 (.'$x2')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$x2'
    res: bool = isinstance(val, str) and val == "Susie"
    if not res:
        rep is None or rep.append(("unexpected _Susie [.'$x2']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("a", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <a> [.]", path))
        return False
    lpath = (path + [ "a" ]) if path is not None else None
    # .a
    res = isinstance(pval, str) and pval == "Susie"
    if not res:
        rep is None or rep.append(("unexpected _Susie [.a]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <a> [.]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("b", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <b> [.]", path))
        return False
    lpath = (path + [ "b" ]) if path is not None else None
    # .b
    res = isinstance(pval, str) and pval == "Susie"
    if not res:
        rep is None or rep.append(("unexpected _Susie [.b]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <b> [.]", lpath if path is not None else None))
        return False
    return True


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "x1": json_model_4,
            "x2": json_model_5,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
