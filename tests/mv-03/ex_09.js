#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

var check_model_map = new Map()

// check $ex08 (.'$ex08')
function json_model_5(val, path, rep)
{
    let res;
    // .'$ex08'
    res = json_model_9(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected $Ex08 [.'$ex08']", path])
    }
    return res;
}

// check $Ex08 (.'$Ex08')
function json_model_3(val, path, rep)
{
    let res;
    // .'$Ex08'
    res = json_model_9(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected $ex08#Ex08 [.'$Ex08']", path])
    }
    return res;
}

// object .'$Ex09'
function _jm_obj_0(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'$Ex09']", path])
        return false;
    }
    let res;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_0 = path ? path.concat([prop]) : null;
        if (prop == "#")
        {
            // handle may # property
            // .'$Ex09'.'#'
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'$Ex09'.'#']", (path ? lpath_0 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid optional prop value [.'$Ex09'.'#']", (path ? lpath_0 : null)])
                return false;
            }
        }
        else if (runtime.jm_is_valid_url(prop))
        {
            // handle 1 key props
            // .'$Ex09'.'$URL'
            res = json_model_6(pval, (path ? lpath_0 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $ex08#Val [.'$Ex09'.'$URL']", (path ? lpath_0 : null)])
            }
            if (! res)
            {
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.'$Ex09']", (path ? lpath_0 : null)])
            return false;
        }
    }
    return true;
}

// check $Ex09 (.'$Ex09')
function json_model_4(val, path, rep)
{
    let res;
    // .'$Ex09'
    res = _jm_obj_0(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected element [.'$Ex09']", path])
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = json_model_4(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected $Ex09 [.]", path])
    }
    return res;
}

// check $ex08#Val (.'$ex08#Val')
function json_model_6(val, path, rep)
{
    let res;
    // .'$ex08#Val'
    res = (typeof val === 'boolean' || val instanceof Boolean);
    if (! res)
    {
        rep !== null && rep.push(["not a bool [.'$ex08#Val']", path])
    }
    return res;
}

// check $ex08#Ex08 (.'$ex08#Ex08')
function json_model_9(val, path, rep)
{
    let res;
    // .'$ex08#Ex08'
    // .'$ex08#Ex08'.'|'.0
    res = json_model_8(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected $map [.'$ex08#Ex08'.'|'.0]", path])
    }
    if (! res)
    {
        // .'$ex08#Ex08'.'|'.1
        res = runtime.jm_is_valid_url(val);
        if (! res)
        {
            rep !== null && rep.push(["unexpected $URL [.'$ex08#Ex08'.'|'.1]", path])
        }
        if (! res)
        {
            // .'$ex08#Ex08'.'|'.2
            res = json_model_6(val, path, rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $Val [.'$ex08#Ex08'.'|'.2]", path])
            }
        }
    }
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["no model matched [.'$ex08#Ex08'.'|']", path])
    }
    return res;
}

// object .'$ex08#map'
function _jm_obj_1(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'$ex08#map']", path])
        return false;
    }
    let res;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_1 = path ? path.concat([prop]) : null;
        if (runtime.jm_is_valid_url(prop))
        {
            // handle 1 key props
            // .'$ex08#map'.'$URL'
            res = json_model_6(pval, (path ? lpath_1 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $Val [.'$ex08#map'.'$URL']", (path ? lpath_1 : null)])
            }
            if (! res)
            {
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.'$ex08#map']", (path ? lpath_1 : null)])
            return false;
        }
    }
    return true;
}

// check $ex08#map (.'$ex08#map')
function json_model_8(val, path, rep)
{
    let res;
    // .'$ex08#map'
    res = _jm_obj_1(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected element [.'$ex08#map']", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_4)
        check_model_map.set("ex08", json_model_3)
        check_model_map.set("Ex08", json_model_3)
        check_model_map.set("Ex09", json_model_4)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
