#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $x1 (.'$x1')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$x1'
    res = isinstance(val, str) and val == "Susie"
    if not res:
        rep is None or rep.append(("unexpected _Susie [.'$x1']", path))
    return res

# check $x2 (.'$x2')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$x2'
    res = isinstance(val, str) and val == "Susie"
    if not res:
        rep is None or rep.append(("unexpected _Susie [.'$x2']", path))
    return res

# check $x3 (.'$x3')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$x3'
    res = isinstance(val, str) and val == "Susie"
    if not res:
        rep is None or rep.append(("unexpected _Susie [.'$x3']", path))
    return res

# check $__external_0 (.'$__external_0')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$__external_0'
    res = isinstance(val, str) and val == "Susie"
    if not res:
        rep is None or rep.append(("unexpected _Susie [.'$__external_0']", path))
    return res

# check $ ()
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    #
    res = isinstance(val, list) and len(val) == 4
    if res:
        lpath_0: Path = (path + [ 0 ]) if path is not None else None
        # .0
        res = isinstance(val[0], str) and val[0] == "Susie"
        if not res:
            rep is None or rep.append(("unexpected _Susie [.0]", lpath_0 if path is not None else None))
        if res:
            lpath_0: Path = (path + [ 1 ]) if path is not None else None
            # .1
            res = isinstance(val[1], str) and val[1] == "Susie"
            if not res:
                rep is None or rep.append(("unexpected _Susie [.1]", lpath_0 if path is not None else None))
            if res:
                lpath_0: Path = (path + [ 2 ]) if path is not None else None
                # .2
                res = isinstance(val[2], str) and val[2] == "Susie"
                if not res:
                    rep is None or rep.append(("unexpected _Susie [.2]", lpath_0 if path is not None else None))
                if res:
                    lpath_0: Path = (path + [ 3 ]) if path is not None else None
                    # .3
                    res = isinstance(val[3], str) and val[3] == "Susie"
                    if not res:
                        rep is None or rep.append(("unexpected _Susie [.3]", lpath_0 if path is not None else None))
    if not res:
        rep is None or rep.append(("not array or unexpected array []", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "x1": json_model_5,
            "x2": json_model_6,
            "x3": json_model_7,
            "__external_0": json_model_8,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
