#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_5($$$);
sub json_model_3($$$);
sub _jm_obj_0($$$);
sub json_model_4($$$);
sub json_model_1($$$);
sub json_model_6($$$);
sub json_model_9($$$);
sub _jm_obj_1($$$);
sub json_model_8($$$);
my %check_model_map;

# check $ex08 (.'$ex08')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ex08'
    $res = json_model_9($val, $path, $rep);
    return $res;
}

# check $Ex08 (.'$Ex08')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ex08'
    $res = json_model_9($val, $path, $rep);
    return $res;
}

# object .'$Ex09'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Ex09'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Ex09'.'$URL'
            $res = json_model_6($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Ex09 (.'$Ex09')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ex09'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# check $ex08#Val (.'$ex08#Val')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ex08#Val'
    $res = jm_is_boolean($val);
    return $res;
}

# check $ex08#Ex08 (.'$ex08#Ex08')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ex08#Ex08'
    # .'$ex08#Ex08'.'|'.0
    $res = _jm_obj_1($val, $path, $rep);
    if (! $res)
    {
        # .'$ex08#Ex08'.'|'.1
        $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
        if (! $res)
        {
            # .'$ex08#Ex08'.'|'.2
            $res = json_model_6($val, $path, $rep);
        }
    }
    return $res;
}

# object .'$ex08#map'
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$ex08#map'.'$URL'
            $res = json_model_6($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $ex08#map (.'$ex08#map')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ex08#map'
    $res = _jm_obj_1($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&_jm_obj_0,
            'ex08' => \&json_model_9,
            'Ex08' => \&json_model_9,
            'Ex09' => \&_jm_obj_0,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
