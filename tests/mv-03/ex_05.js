#! /usr/bin/env node
//
// Generated by JSON Model Compiler version 2.0a0
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
import main from "json_model_runtime/main.js"
const JSON_MODEL_VERSION = "2.0a0";

var check_model_map = new Map()

// check $EX05a (.'$EX05a')
function json_model_2(val, path, rep)
{
    let res;
    // .'$EX05a'
    res = ((typeof val === 'number' || val instanceof Number) && Number.isInteger(val)) && val >= 0;
    if (! res)
    {
        rep !== null && rep.push(["not a 0 strict int [.'$EX05a']", path])
    }
    return res;
}

// check $EX05b (.'$EX05b')
function json_model_3(val, path, rep)
{
    let res;
    // .'$EX05b'
    res = (typeof val === 'string' || val instanceof String);
    if (! res)
    {
        rep !== null && rep.push(["unexpected string [.'$EX05b']", path])
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    // .'|'.0
    res = json_model_2(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected $EX05a [.'|'.0]", path])
    }
    if (! res)
    {
        // .'|'.1
        res = json_model_3(val, path, rep);
        if (! res)
        {
            rep !== null && rep.push(["unexpected $EX05b [.'|'.1]", path])
        }
    }
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["no model matched [.'|']", path])
    }
    return res;
}


var initialized = false

// differed module initializations
function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        check_model_map[""] = json_model_1
        check_model_map["EX05a"] = json_model_2
        check_model_map["EX05b"] = json_model_3
    }
}

// differed module cleanup
function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    check_model_init()

    let checker = check_model_map[name]
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
if (import.meta.url.endsWith(process.argv[1]))
    main(check_model)
