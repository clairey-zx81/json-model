#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_5($$$);
sub json_model_6($$$);
sub json_model_7($$$);
sub json_model_8($$$);
sub json_model_1($$$);
my %check_model_map;

# check $x1 (.'$x1')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$x1'
    $res = jm_is_string($val) && $val eq 'Susie';
    return $res;
}

# check $x2 (.'$x2')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$x2'
    $res = jm_is_string($val) && $val eq 'Susie';
    return $res;
}

# check $x3 (.'$x3')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$x3'
    $res = jm_is_string($val) && $val eq 'Susie';
    return $res;
}

# check $__external_0 (.'$__external_0')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$__external_0'
    $res = jm_is_string($val) && $val eq 'Susie';
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = jm_is_array($val) && scalar @$val == 4;
    if ($res)
    {
        # .0
        $res = jm_is_string($$val[0]) && $$val[0] eq 'Susie';
        if ($res)
        {
            # .1
            $res = jm_is_string($$val[1]) && $$val[1] eq 'Susie';
            if ($res)
            {
                # .2
                $res = jm_is_string($$val[2]) && $$val[2] eq 'Susie';
                if ($res)
                {
                    # .3
                    $res = jm_is_string($$val[3]) && $$val[3] eq 'Susie';
                }
            }
        }
    }
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&json_model_1,
            'x1' => \&json_model_5,
            'x2' => \&json_model_6,
            'x3' => \&json_model_7,
            '__external_0' => \&json_model_8,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
