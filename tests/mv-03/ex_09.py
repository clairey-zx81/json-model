#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $ex08 (.'$ex08')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ex08'
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Ex08 [.'$ex08']", path))
    return res

# check $Ex08 (.'$Ex08')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Ex08'
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ex08#Ex08 [.'$Ex08']", path))
    return res

# object .'$Ex09'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Ex09']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Ex09'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Ex09'.'#']", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Ex09'.'#']", lpath_0 if path is not None else None))
                return False
        elif is_valid_url(prop, lpath_0 if path is not None else None, rep):
            # handle 1 key props
            # .'$Ex09'.'$URL'
            res = json_model_6(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $ex08#Val [.'$Ex09'.'$URL']", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Ex09']", lpath_0 if path is not None else None))
            return False
    return True

# check $Ex09 (.'$Ex09')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Ex09'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Ex09']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Ex09 [.]", path))
    return res

# check $ex08#Val (.'$ex08#Val')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ex08#Val'
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$ex08#Val']", path))
    return res

# check $ex08#Ex08 (.'$ex08#Ex08')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ex08#Ex08'
    # .'$ex08#Ex08'.'|'.0
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $map [.'$ex08#Ex08'.'|'.0]", path))
    if not res:
        # .'$ex08#Ex08'.'|'.1
        res = is_valid_url(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $URL [.'$ex08#Ex08'.'|'.1]", path))
        if not res:
            # .'$ex08#Ex08'.'|'.2
            res = json_model_6(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Val [.'$ex08#Ex08'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$ex08#Ex08'.'|']", path))
    return res

# object .'$ex08#map'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ex08#map']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if is_valid_url(prop, lpath_1 if path is not None else None, rep):
            # handle 1 key props
            # .'$ex08#map'.'$URL'
            res = json_model_6(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Val [.'$ex08#map'.'$URL']", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$ex08#map']", lpath_1 if path is not None else None))
            return False
    return True

# check $ex08#map (.'$ex08#map')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ex08#map'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$ex08#map']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": _jm_obj_0,
            "ex08": json_model_9,
            "Ex08": json_model_9,
            "Ex09": _jm_obj_0,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
