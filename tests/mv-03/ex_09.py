#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $ex08 ($.'$ex08')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$ex08'
    res = json_model_9(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $EX08 [$.'$ex08']", path))
    return res

# check $EX08 ($.'$EX08')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$EX08'
    res = json_model_9(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ex08#EX08 [$.'$EX08']", path))
    return res

# object $.'$EX09'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$EX09']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # $.'$EX09'.'#'
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$EX09'.'#']", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$EX09'.#]", lpath_0 if path is not None else None))
                return False
        elif is_valid_url(prop, lpath_0 if path is not None else None, rep):
            # handle 1 key props
            # $.'$EX09'.'$URL'
            res = json_model_6(pval, lpath_0 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ex08#VAL [$.'$EX09'.'$URL']", lpath_0 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$EX09']", lpath_0 if path is not None else None))
            return False
    return True

# check $EX09 ($.'$EX09')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$EX09'
    res = _jm_obj_0(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$EX09']", path))
    return res

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = json_model_4(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $EX09 [$]", path))
    return res

# check $ex08#VAL ($.'$ex08#VAL')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$ex08#VAL'
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$ex08#VAL']", path))
    return res

# check $ex08#EX08 ($.'$ex08#EX08')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$ex08#EX08'
    # $.'$ex08#EX08'.'|'.0
    res = json_model_8(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $map [$.'$ex08#EX08'.'|'.0]", path))
    if not res:
        # $.'$ex08#EX08'.'|'.1
        res = is_valid_url(val, path, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $URL [$.'$ex08#EX08'.'|'.1]", path))
        if not res:
            # $.'$ex08#EX08'.'|'.2
            res = json_model_6(val, path, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $VAL [$.'$ex08#EX08'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [$.'$ex08#EX08'.'|']", path))
    return res

# object $.'$ex08#map'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$ex08#map']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if is_valid_url(prop, lpath_1 if path is not None else None, rep):
            # handle 1 key props
            # $.'$ex08#map'.'$URL'
            res = json_model_6(pval, lpath_1 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $VAL [$.'$ex08#map'.'$URL']", lpath_1 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$ex08#map']", lpath_1 if path is not None else None))
            return False
    return True

# check $ex08#map ($.'$ex08#map')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$ex08#map'
    res = _jm_obj_1(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$ex08#map']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "ex08": json_model_5,
            "EX08": json_model_3,
            "EX09": json_model_4,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
