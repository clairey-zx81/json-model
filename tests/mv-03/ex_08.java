//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class ex_08 extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> ex_08_map_pmap;

    // check $VAL (.'$VAL')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$VAL'
        res = json.isBoolean(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not a bool [.'$VAL']", path);
        }
        return res;
    }
    
    // check $KEY (.'$KEY')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$KEY'
        res = json.isString(val) && rt.is_valid_url(json.asString(val));
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $URL [.'$KEY']", path);
        }
        return res;
    }
    
    // object .'$map'
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$map']", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (rt.is_valid_url(prop))
            {
                // handle 1 key props
                // .'$map'.'$URL'
                res = json_model_2(pval, (path != null ? lpath_0 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $VAL [.'$map'.'$URL']", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$map']", (path != null ? lpath_0 : null));
                return false;
            }
        }
        return true;
    }
    
    // check $map (.'$map')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$map'
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$map']", path);
        }
        return res;
    }
    
    // check $EX08 (.'$EX08')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$EX08'
        // .'$EX08'.'|'.0
        res = json_model_4(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $map [.'$EX08'.'|'.0]", path);
        }
        if (! res)
        {
            // .'$EX08'.'|'.1
            res = json.isString(val) && rt.is_valid_url(json.asString(val));
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $URL [.'$EX08'.'|'.1]", path);
            }
            if (! res)
            {
                // .'$EX08'.'|'.2
                res = json_model_2(val, path, rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $VAL [.'$EX08'.'|'.2]", path);
                }
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'$EX08'.'|']", path);
        }
        return res;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = json_model_5(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $EX08 [.]", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            ex_08_map_pmap = new HashMap<String, Checker>();
            ex_08_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            ex_08_map_pmap.put("VAL", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            ex_08_map_pmap.put("KEY", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            ex_08_map_pmap.put("map", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            ex_08_map_pmap.put("EX08", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            ex_08_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return ex_08_map_pmap.get(name);
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new ex_08();
        Main.main("ex_08", checker, VERSION, args);
    }
}
