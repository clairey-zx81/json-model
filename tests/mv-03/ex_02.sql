--
-- Generated by JSON Model Compiler version 2.0b0
-- see https://github.com/clairey-zx81/json-model
--
-- JSON_MODEL_VERSION is 2.0b0
CREATE EXTENSION IF NOT EXISTS json_model;

-- check $x1 (.'$x1')
CREATE OR REPLACE FUNCTION json_model_5(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$x1'
  res := JSONB_TYPEOF(val) = 'string' AND JSON_VALUE(val, '$' RETURNING TEXT) = 'Susie';
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $x2 (.'$x2')
CREATE OR REPLACE FUNCTION json_model_6(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$x2'
  res := JSONB_TYPEOF(val) = 'string' AND JSON_VALUE(val, '$' RETURNING TEXT) = 'Susie';
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $x3 (.'$x3')
CREATE OR REPLACE FUNCTION json_model_7(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$x3'
  res := JSONB_TYPEOF(val) = 'string' AND JSON_VALUE(val, '$' RETURNING TEXT) = 'Susie';
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $__external_0 (.'$__external_0')
CREATE OR REPLACE FUNCTION json_model_8(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$__external_0'
  res := JSONB_TYPEOF(val) = 'string' AND JSON_VALUE(val, '$' RETURNING TEXT) = 'Susie';
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $ (.)
CREATE OR REPLACE FUNCTION json_model_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .
  res := JSONB_TYPEOF(val) = 'array' AND JSONB_ARRAY_LENGTH(val) = 4;
  IF res THEN
    -- .0
    res := JSONB_TYPEOF(val -> 0) = 'string' AND JSON_VALUE(val -> 0, '$' RETURNING TEXT) = 'Susie';
    IF res THEN
      -- .1
      res := JSONB_TYPEOF(val -> 1) = 'string' AND JSON_VALUE(val -> 1, '$' RETURNING TEXT) = 'Susie';
      IF res THEN
        -- .2
        res := JSONB_TYPEOF(val -> 2) = 'string' AND JSON_VALUE(val -> 2, '$' RETURNING TEXT) = 'Susie';
        IF res THEN
          -- .3
          res := JSONB_TYPEOF(val -> 3) = 'string' AND JSON_VALUE(val -> 3, '$' RETURNING TEXT) = 'Susie';
        END IF;
      END IF;
    END IF;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION check_model_map(name TEXT)
RETURNS TEXT STRICT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  map JSONB := JSONB '{"":"json_model_1","x1":"json_model_5","x2":"json_model_6","x3":"json_model_7","__external_0":"json_model_8"}';
BEGIN
  RETURN map->>name;
END;
$$ LANGUAGE plpgsql;

--
-- constant maps initialization
--
TRUNCATE jm_constant_maps;


--
-- JSON Model checking entry point
--
-- TODO INOUT rep?
CREATE OR REPLACE FUNCTION check_model(val JSONB, name TEXT, rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  fun TEXT;
BEGIN
  fun := check_model_map(name);
  IF fun IS NULL THEN
    RAISE EXCEPTION 'model for % not found', name;
  END IF;
  RETURN jm_call(fun, val, NULL, rep);
END;
$$ LANGUAGE plpgsql;
