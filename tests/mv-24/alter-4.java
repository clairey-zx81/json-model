//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class alter_4 extends ModelChecker
{
    static public final String VERSION = "2";

    Set<Object> _jm_cst_0_set;
    Map<Object, Checker> _jm_map_0_cmap;
    public Map<String, Checker> alter_4_map_pmap;

    // object .'$alternative'.'|'.0
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            if (prop.compareTo("t") == 0)
            {
                // handle must t property
                must_count += 1;
                // .'$alternative'.'|'.0.t
                res = json.isString(pval) && json.asString(pval).compareTo("a") == 0;
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("a") == 0)
            {
                // handle must a property
                must_count += 1;
                // .'$alternative'.'|'.0.a
                res = json.isString(pval);
                if (! res)
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        if (must_count != 2)
        {
            return false;
        }
        return true;
    }


    // object .'$alternative'.'|'.1
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            if (prop.compareTo("t") == 0)
            {
                // handle must t property
                must_count += 1;
                // .'$alternative'.'|'.1.t
                res = json.isScalar(pval) && _jm_cst_0_set.contains(pval);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("bc") == 0)
            {
                // handle must bc property
                must_count += 1;
                // .'$alternative'.'|'.1.bc
                res = json.isString(pval);
                if (! res)
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        if (must_count != 2)
        {
            return false;
        }
        return true;
    }


    // check $alternative (.'$alternative')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // expecting xor-to-or and tag detection
        // .'$alternative'
        boolean iso_0 = json.isObject(val);
        res = iso_0;
        if (res)
        {
            if (json.objectHasProp(val, "t"))
            {
                Object tag_0 = json.objectValue(val, "t");
                Checker fun_0 = _jm_map_0_cmap.get(tag_0);
                if (fun_0 != null)
                {
                    res = fun_0.call(val, path, rep);
                }
                else
                {
                    res = false;
                }
            }
            else
            {
                res = false;
            }
        }
        if (! res)
        {
            // .'$alternative'.'|'.2
            res = json.isInteger(val) && json.asLong(val) >= 0;
            if (! res)
            {
                // .'$alternative'.'|'.3
                res = json.isBoolean(val);
            }
        }
        return res;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = json_model_2(val, path, rep);
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_cst_0_set = new HashSet<Object>();
            _jm_cst_0_set.add(json.safeJSON("\"b\""));
            _jm_cst_0_set.add(json.safeJSON("\"c\""));
            _jm_map_0_cmap = new HashMap<Object, Checker>();
            _jm_map_0_cmap.put(json.safeJSON("\"a\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_0(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"b\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_1(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"c\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_1(o, p, r);} });
            alter_4_map_pmap = new HashMap<String, Checker>();
            alter_4_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            alter_4_map_pmap.put("alternative", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_cst_0_set = null;
            _jm_map_0_cmap = null;
            alter_4_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return alter_4_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return alter_4_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new alter_4();
        Main.main("alter_4", checker, VERSION, args);
    }
}
