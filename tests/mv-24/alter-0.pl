#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_2($$$);
my %_jm_cst_0;
sub json_model_3($$$);
my %_jm_cst_1;
my %_jm_map_0;
sub json_model_4($$$);
sub json_model_1($$$);
my %check_model_map;

# object .'$d'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 't')
        {
            # handle must t property
            $must_count++;
            # .'$d'.t
            $res = jm_is_string($pval) && $pval eq 'd';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'd')
        {
            # handle must d property
            $must_count++;
            # .'$d'.d
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# check $d (.'$d')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$d'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}


# object .'$ef'
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 't')
        {
            # handle must t property
            $must_count++;
            # .'$ef'.t
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_0{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'ef')
        {
            # handle must ef property
            $must_count++;
            # .'$ef'.ef
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# check $ef (.'$ef')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ef'
    $res = _jm_obj_1($val, $path, $rep);
    return $res;
}

# object .'$alternative'.'|'.0
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 't')
        {
            # handle must t property
            $must_count++;
            # .'$alternative'.'|'.0.t
            $res = jm_is_string($pval) && $pval eq 'a';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'a')
        {
            # handle must a property
            $must_count++;
            # .'$alternative'.'|'.0.a
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}


# object .'$alternative'.'|'.1
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 't')
        {
            # handle must t property
            $must_count++;
            # .'$alternative'.'|'.1.t
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_1{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'bc')
        {
            # handle must bc property
            $must_count++;
            # .'$alternative'.'|'.1.bc
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}


# check $alternative (.'$alternative')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # expecting xor-to-or and tag detection
    # .'$alternative'
    my $iso_0 = jm_is_object($val);
    $res = $iso_0;
    if ($res)
    {
        if (exists $$val{'t'})
        {
            my $tag_0 = $$val{'t'};
            my $fun_0 = $_jm_map_0{$tag_0};
            if (defined($fun_0))
            {
                $res = &$fun_0($val, $path, $rep);
            }
            else
            {
                $res = 0;
            }
        }
        else
        {
            $res = 0;
        }
    }
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_4($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            'e' => 1,
            'f' => 1,
        );
        %_jm_cst_1 = (
            'b' => 1,
            'c' => 1,
        );
        %_jm_map_0 = (
            'a' => \&_jm_obj_2,
            'b' => \&_jm_obj_3,
            'c' => \&_jm_obj_3,
            'd' => \&_jm_obj_0,
            'e' => \&_jm_obj_1,
            'f' => \&_jm_obj_1,
        );
        %check_model_map = (
            '' => \&json_model_4,
            'd' => \&_jm_obj_0,
            'ef' => \&_jm_obj_1,
            'alternative' => \&json_model_4,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %_jm_cst_1 = ();
        %_jm_map_0 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
