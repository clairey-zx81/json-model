#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
_jm_cst_1: set[str]
_jm_map_0: dict[str, str]
_jm_map_1: dict[str, str]
check_model_map: PropMap

# object .'$d'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        return False
    if len(val) != 2:
        return False
    pval: Jsonable
    res: bool
    if not ((pval := val.get("u", UNDEFINED)) != UNDEFINED):
        return False
    # .'$d'.u
    res = isinstance(pval, str) and pval == "d"
    if not res:
        return False
    if not ((pval := val.get("d", UNDEFINED)) != UNDEFINED):
        return False
    # .'$d'.d
    res = isinstance(pval, str)
    if not res:
        return False
    return True

# check $d (.'$d')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$d'
    res = _jm_obj_0(val, path, rep)
    return res


# object .'$efg'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        return False
    if len(val) != 2:
        return False
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        return False
    # .'$efg'.t
    res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_0
    if not res:
        return False
    if not ((pval := val.get("efg", UNDEFINED)) != UNDEFINED):
        return False
    # .'$efg'.efg
    res = isinstance(pval, str)
    if not res:
        return False
    return True

# check $efg (.'$efg')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$efg'
    res = _jm_obj_1(val, path, rep)
    return res

# object .'$alternative'.'|'.0
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        return False
    if len(val) != 2:
        return False
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        return False
    # .'$alternative'.'|'.0.t
    res = isinstance(pval, str) and pval == "a"
    if not res:
        return False
    if not ((pval := val.get("a", UNDEFINED)) != UNDEFINED):
        return False
    # .'$alternative'.'|'.0.a
    res = isinstance(pval, str)
    if not res:
        return False
    return True


# object .'$alternative'.'|'.1
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        return False
    if len(val) != 2:
        return False
    pval: Jsonable
    res: bool
    if not ((pval := val.get("u", UNDEFINED)) != UNDEFINED):
        return False
    # .'$alternative'.'|'.1.u
    res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_1
    if not res:
        return False
    if not ((pval := val.get("bc", UNDEFINED)) != UNDEFINED):
        return False
    # .'$alternative'.'|'.1.bc
    res = isinstance(pval, str)
    if not res:
        return False
    return True



# check $alternative (.'$alternative')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # expecting xor-to-or and tag detection
    # .'$alternative'
    iso_0: bool = isinstance(val, dict)
    res = iso_0
    if res:
        if "t" in val:
            tag_0: Jsonable = val.get("t", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
        else:
            res = False
    if not res:
        res = iso_0
        if res:
            if "u" in val:
                tag_1: Jsonable = val.get("u", UNDEFINED)
                fun_1: CheckFun = _jm_map_1.get(tag_1, UNDEFINED)
                if fun_1 != UNDEFINED:
                    res = fun_1(val, path, rep)
                else:
                    res = False
            else:
                res = False
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_4(val, path, rep)
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'e', 'f', 'g'}
        global _jm_cst_1
        _jm_cst_1 = {'b', 'c'}
        global _jm_map_0
        _jm_map_0 = {
            "a": _jm_obj_2,
            "e": _jm_obj_1,
            "f": _jm_obj_1,
            "g": _jm_obj_1,
        }
        global _jm_map_1
        _jm_map_1 = {
            "b": _jm_obj_3,
            "c": _jm_obj_3,
            "d": _jm_obj_0,
        }
        global check_model_map
        check_model_map = {
            "": json_model_4,
            "d": _jm_obj_0,
            "efg": _jm_obj_1,
            "alternative": json_model_4,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
