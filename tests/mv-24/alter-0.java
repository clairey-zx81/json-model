//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class alter_0 extends ModelChecker
{
    static public final String VERSION = "2";

    Set<Object> _jm_cst_0_set;
    Set<Object> _jm_cst_1_set;
    Map<Object, Checker> _jm_map_0_cmap;
    public Map<String, Checker> alter_0_map_pmap;

    // check $d (.'$d')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        // .'$d'
        // check close must only props
        if (! json.isObject(val))
        {
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            return false;
        }
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            return false;
        }
        // .'$d'.t
        res = json.isString(pval) && json.asString(pval).compareTo("d") == 0;
        if (! res)
        {
            return false;
        }
        if (! ((pval = json.objectValue(val, "d")) != null))
        {
            return false;
        }
        // .'$d'.d
        return json.isString(pval);
    }


    // check $ef (.'$ef')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        // .'$ef'
        // check close must only props
        if (! json.isObject(val))
        {
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            return false;
        }
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            return false;
        }
        // .'$ef'.t
        res = json.isScalar(pval) && _jm_cst_0_set.contains(pval);
        if (! res)
        {
            return false;
        }
        if (! ((pval = json.objectValue(val, "ef")) != null))
        {
            return false;
        }
        // .'$ef'.ef
        return json.isString(pval);
    }

    // object .'$alternative'.'|'.0
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            return false;
        }
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            return false;
        }
        // .'$alternative'.'|'.0.t
        res = json.isString(pval) && json.asString(pval).compareTo("a") == 0;
        if (! res)
        {
            return false;
        }
        if (! ((pval = json.objectValue(val, "a")) != null))
        {
            return false;
        }
        // .'$alternative'.'|'.0.a
        return json.isString(pval);
    }


    // object .'$alternative'.'|'.1
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            return false;
        }
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            return false;
        }
        // .'$alternative'.'|'.1.t
        res = json.isScalar(pval) && _jm_cst_1_set.contains(pval);
        if (! res)
        {
            return false;
        }
        if (! ((pval = json.objectValue(val, "bc")) != null))
        {
            return false;
        }
        // .'$alternative'.'|'.1.bc
        return json.isString(pval);
    }


    // check $alternative (.'$alternative')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // expecting xor-to-or and tag detection
        // .'$alternative'
        boolean iso_0 = json.isObject(val);
        res = iso_0;
        if (res)
        {
            if (json.objectHasProp(val, "t"))
            {
                Object tag_0 = json.objectValue(val, "t");
                Checker fun_0 = _jm_map_0_cmap.get(tag_0);
                res = fun_0 != null && fun_0.call(val, null, null);
            }
            else
            {
                res = false;
            }
        }
        return res;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // .
        return json_model_4(val, null, null);
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_cst_0_set = new HashSet<Object>();
            _jm_cst_0_set.add(json.safeJSON("\"e\""));
            _jm_cst_0_set.add(json.safeJSON("\"f\""));
            _jm_cst_1_set = new HashSet<Object>();
            _jm_cst_1_set.add(json.safeJSON("\"b\""));
            _jm_cst_1_set.add(json.safeJSON("\"c\""));
            _jm_map_0_cmap = new HashMap<Object, Checker>();
            _jm_map_0_cmap.put(json.safeJSON("\"a\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_0(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"b\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_1(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"c\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_1(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"d\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"e\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"f\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            alter_0_map_pmap = new HashMap<String, Checker>();
            alter_0_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            alter_0_map_pmap.put("d", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            alter_0_map_pmap.put("ef", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            alter_0_map_pmap.put("alternative", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_cst_0_set = null;
            _jm_cst_1_set = null;
            _jm_map_0_cmap = null;
            alter_0_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return alter_0_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return alter_0_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new alter_0();
        Main.main("alter_0", checker, VERSION, args);
    }
}
