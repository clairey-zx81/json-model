#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

let _jm_cst_0 = new Set()
let _jm_map_0 = new Map()
var check_model_map = new Map()

// check $d (.'$d')
function json_model_2(val, path, rep)
{
    // .'$d'
    // check close must only props
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    if (Object.keys(val).length != 2)
    {
        return false;
    }
    let pval;
    let res;
    if (! val.hasOwnProperty("t"))
    {
        return false;
    }
    pval = val["t"];
    // .'$d'.t
    res = ((typeof pval === 'string' || pval instanceof String)) && pval == "d";
    if (! res)
    {
        return false;
    }
    if (! val.hasOwnProperty("d"))
    {
        return false;
    }
    pval = val["d"];
    // .'$d'.d
    return (typeof pval === 'string' || pval instanceof String);
}

// object .'$alternative'.'|'.0
function _jm_obj_0(val, path, rep)
{
    // check close must only props
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    if (Object.keys(val).length != 2)
    {
        return false;
    }
    let pval;
    let res;
    if (! val.hasOwnProperty("u"))
    {
        return false;
    }
    pval = val["u"];
    // .'$alternative'.'|'.0.u
    res = ((typeof pval === 'string' || pval instanceof String)) && pval == "a";
    if (! res)
    {
        return false;
    }
    if (! val.hasOwnProperty("a"))
    {
        return false;
    }
    pval = val["a"];
    // .'$alternative'.'|'.0.a
    return (typeof pval === 'string' || pval instanceof String);
}


// object .'$alternative'.'|'.1
function _jm_obj_1(val, path, rep)
{
    // check close must only props
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    if (Object.keys(val).length != 2)
    {
        return false;
    }
    let pval;
    let res;
    if (! val.hasOwnProperty("t"))
    {
        return false;
    }
    pval = val["t"];
    // .'$alternative'.'|'.1.t
    res = ((pval === null || (typeof pval === 'number' || pval instanceof Number) || (typeof pval === 'boolean' || pval instanceof Boolean) || (typeof pval === 'string' || pval instanceof String))) && _jm_cst_0.has(pval);
    if (! res)
    {
        return false;
    }
    if (! val.hasOwnProperty("bc"))
    {
        return false;
    }
    pval = val["bc"];
    // .'$alternative'.'|'.1.bc
    return (typeof pval === 'string' || pval instanceof String);
}


// check $alternative (.'$alternative')
function json_model_3(val, path, rep)
{
    let res;
    // expecting xor-to-or and tag detection, but not for u
    // .'$alternative'
    let iso_0 = Object.prototype.toString.call(val) === '[object Object]';
    res = iso_0;
    if (res)
    {
        if (val.hasOwnProperty("t"))
        {
            let tag_0 = val["t"];
            let fun_0 = _jm_map_0.get(tag_0);
            res = fun_0 !== undefined && fun_0(val, path, rep);
        }
        else
        {
            res = false;
        }
    }
    if (! res)
    {
        // .'$alternative'.'|'.0
        res = _jm_obj_0(val, path, rep);
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    // .
    return json_model_3(val, path, rep);
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        _jm_cst_0.add("b")
        _jm_cst_0.add("c")
        _jm_map_0.set("b", _jm_obj_1)
        _jm_map_0.set("c", _jm_obj_1)
        _jm_map_0.set("d", json_model_2)
        check_model_map.set("", json_model_3)
        check_model_map.set("d", json_model_2)
        check_model_map.set("alternative", json_model_3)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
