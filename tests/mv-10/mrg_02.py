#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_obj_0_mup: PropMap
_jm_obj_2_mup: PropMap
check_model_map: PropMap

# check $T ($.'$T')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$T'
    res = isinstance(val, str) and val == "cst_02"
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected _cst_02 [$.'$T']", path))
    return res

# check _jm_obj_0_mup_a ($.'$R'.a)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$R'.a
    res = isinstance(val, str) and val == "cst_01"
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected _cst_01 [$.'$R'.a]", path))
    return res

# check _jm_obj_0_mup_b ($.'$R'.b)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$R'.b
    res = isinstance(val, str) and val == "cst_01"
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected _cst_01 [$.'$R'.b]", path))
    return res

# check _jm_obj_0_mup_c ($.'$R'.c)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$R'.c
    res = isinstance(val, str) and val == "cst_01"
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected _cst_01 [$.'$R'.c]", path))
    return res

# check _jm_obj_0_mup_d ($.'$R'.d)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$R'.d
    res = isinstance(val, str) and val == "cst_01"
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected _cst_01 [$.'$R'.d]", path))
    return res


# object $.'$R'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$R']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_mup.get(prop):
            # handle 4 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_0 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$R']", lpath_0 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$R']", lpath_0 if path is not None else None))
            return False
    if must_count != 4:
        rep is None or rep.append(("missing must prop [$.'$R']", path))
        return False
    return True

# check $R ($.'$R')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$R'
    res = _jm_obj_0(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$R']", path))
    return res

# object $.'$Z'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Z']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "e":
            # handle must e property
            must_count += 1
            # $.'$Z'.e
            res = isinstance(pval, str) and pval == "cst_02"
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected _cst_02 [$.'$Z'.e]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Z'.e]", lpath_1 if path is not None else None))
                return False
        elif prop == "f":
            # handle must f property
            must_count += 1
            # $.'$Z'.f
            res = isinstance(pval, str) and pval == "cst_02"
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected _cst_02 [$.'$Z'.f]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Z'.f]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Z']", lpath_1 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'$Z']", path))
        return False
    return True

# check $Z ($.'$Z')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Z'
    res = _jm_obj_1(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Z']", path))
    return res

# check _jm_obj_2_mup_a ($.a)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.a
    res = isinstance(val, str) and val == "cst_01"
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected _cst_01 [$.a]", path))
    return res

# check _jm_obj_2_mup_b ($.b)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.b
    res = isinstance(val, str) and val == "cst_01"
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected _cst_01 [$.b]", path))
    return res

# check _jm_obj_2_mup_c ($.c)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.c
    res = isinstance(val, str) and val == "cst_01"
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected _cst_01 [$.c]", path))
    return res

# check _jm_obj_2_mup_d ($.d)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.d
    res = isinstance(val, str) and val == "cst_01"
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected _cst_01 [$.d]", path))
    return res

# check _jm_obj_2_mup_e ($.e)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.e
    res = isinstance(val, str) and val == "cst_02"
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected _cst_02 [$.e]", path))
    return res

# check _jm_obj_2_mup_f ($.f)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.f
    res = isinstance(val, str) and val == "cst_02"
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected _cst_02 [$.f]", path))
    return res


# object $
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_2_mup.get(prop):
            # handle 6 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_2 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$]", lpath_2 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$]", lpath_2 if path is not None else None))
            return False
    if must_count != 6:
        rep is None or rep.append(("missing must prop [$]", path))
        return False
    return True

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = _jm_obj_2(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_obj_0_mup
        _jm_obj_0_mup = {
            "a": _jm_f_0,
            "b": _jm_f_1,
            "c": _jm_f_2,
            "d": _jm_f_3,
        }
        global _jm_obj_2_mup
        _jm_obj_2_mup = {
            "a": _jm_f_4,
            "b": _jm_f_5,
            "c": _jm_f_6,
            "d": _jm_f_7,
            "e": _jm_f_8,
            "f": _jm_f_9,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "T": json_model_2,
            "R": json_model_5,
            "Z": json_model_4,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
