//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class mrg_01 extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> mrg_01_map_pmap;

    // check $t (.'$t')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        // .'$t'
        boolean res = json.isString(val) && json.asString(val).compareTo("cst_01") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_01 [.'$t']", path);
        }
        return res;
    }

    // check $x (.'$x')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        // .'$x'
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$x']", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'$x']", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "a")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.'$x']", path);
            return false;
        }
        lpath = new Path("a", path);
        // .'$x'.a
        res = json.isString(pval) && json.asString(pval).compareTo("cst_01") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_01 [.'$x'.a]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.'$x']", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "b")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <b> [.'$x']", path);
            return false;
        }
        lpath = new Path("b", path);
        // .'$x'.b
        res = json.isString(pval) && json.asString(pval).compareTo("cst_01") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_01 [.'$x'.b]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <b> [.'$x']", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check $y (.'$y')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        // .'$y'
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$y']", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'$y']", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "c")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <c> [.'$y']", path);
            return false;
        }
        lpath = new Path("c", path);
        // .'$y'.c
        res = json.isString(pval) && json.asString(pval).compareTo("cst_01") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_01 [.'$y'.c]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <c> [.'$y']", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "d")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <d> [.'$y']", path);
            return false;
        }
        lpath = new Path("d", path);
        // .'$y'.d
        res = json.isString(pval) && json.asString(pval).compareTo("cst_01") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_01 [.'$y'.d]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <d> [.'$y']", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // .
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.]", path);
            return false;
        }
        if (json.objectSize(val) != 4)
        {
            if (rep != null) rep.addEntry("bad property count [.]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "a")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.]", path);
            return false;
        }
        lpath = new Path("a", path);
        // .a
        res = json.isString(pval) && json.asString(pval).compareTo("cst_01") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_01 [.a]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "b")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <b> [.]", path);
            return false;
        }
        lpath = new Path("b", path);
        // .b
        res = json.isString(pval) && json.asString(pval).compareTo("cst_01") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_01 [.b]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <b> [.]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "c")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <c> [.]", path);
            return false;
        }
        lpath = new Path("c", path);
        // .c
        res = json.isString(pval) && json.asString(pval).compareTo("cst_01") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_01 [.c]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <c> [.]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "d")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <d> [.]", path);
            return false;
        }
        lpath = new Path("d", path);
        // .d
        res = json.isString(pval) && json.asString(pval).compareTo("cst_01") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_01 [.d]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <d> [.]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            mrg_01_map_pmap = new HashMap<String, Checker>();
            mrg_01_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            mrg_01_map_pmap.put("t", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            mrg_01_map_pmap.put("x", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            mrg_01_map_pmap.put("y", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            mrg_01_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return mrg_01_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return mrg_01_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new mrg_01();
        Main.main("mrg_01", checker, VERSION, args);
    }
}
