#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $t (.'$t')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$t'
    res = isinstance(val, str) and val == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.'$t']", path))
    return res

# object .'$x'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$x']", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'$x']", path))
        return False
    pval: Jsonable
    res: bool
    if not "a" in val:
        rep is None or rep.append(("missing mandatory prop <a> [.'$x']", path))
        return False
    pval = val.get("a", UNDEFINED)
    # .'$x'.a
    res = isinstance(pval, str) and pval == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.'$x'.a]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <a> [.'$x']", path))
        return False
    if not "b" in val:
        rep is None or rep.append(("missing mandatory prop <b> [.'$x']", path))
        return False
    pval = val.get("b", UNDEFINED)
    # .'$x'.b
    res = isinstance(pval, str) and pval == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.'$x'.b]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <b> [.'$x']", path))
        return False
    return True

# check $x (.'$x')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$x'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$x']", path))
    return res

# object .'$y'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$y']", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'$y']", path))
        return False
    pval: Jsonable
    res: bool
    if not "c" in val:
        rep is None or rep.append(("missing mandatory prop <c> [.'$y']", path))
        return False
    pval = val.get("c", UNDEFINED)
    # .'$y'.c
    res = isinstance(pval, str) and pval == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.'$y'.c]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <c> [.'$y']", path))
        return False
    if not "d" in val:
        rep is None or rep.append(("missing mandatory prop <d> [.'$y']", path))
        return False
    pval = val.get("d", UNDEFINED)
    # .'$y'.d
    res = isinstance(pval, str) and pval == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.'$y'.d]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <d> [.'$y']", path))
        return False
    return True

# check $y (.'$y')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$y'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$y']", path))
    return res

# object .
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    if len(val) != 4:
        rep is None or rep.append(("bad property count [.]", path))
        return False
    pval: Jsonable
    res: bool
    if not "a" in val:
        rep is None or rep.append(("missing mandatory prop <a> [.]", path))
        return False
    pval = val.get("a", UNDEFINED)
    # .a
    res = isinstance(pval, str) and pval == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.a]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <a> [.]", path))
        return False
    if not "b" in val:
        rep is None or rep.append(("missing mandatory prop <b> [.]", path))
        return False
    pval = val.get("b", UNDEFINED)
    # .b
    res = isinstance(pval, str) and pval == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.b]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <b> [.]", path))
        return False
    if not "c" in val:
        rep is None or rep.append(("missing mandatory prop <c> [.]", path))
        return False
    pval = val.get("c", UNDEFINED)
    # .c
    res = isinstance(pval, str) and pval == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.c]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <c> [.]", path))
        return False
    if not "d" in val:
        rep is None or rep.append(("missing mandatory prop <d> [.]", path))
        return False
    pval = val.get("d", UNDEFINED)
    # .d
    res = isinstance(pval, str) and pval == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.d]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <d> [.]", path))
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": _jm_obj_2,
            "t": json_model_2,
            "x": _jm_obj_0,
            "y": _jm_obj_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
