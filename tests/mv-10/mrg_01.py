#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_obj_2_mup: PropMap
check_model_map: PropMap

# check $T (.'$T')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$T'
    res = isinstance(val, str) and val == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.'$T']", path))
    return res

# object .'$X'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$X']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "a":
            # handle must a property
            must_count += 1
            # .'$X'.a
            res = isinstance(pval, str) and pval == "cst_01"
            if not res:
                rep is None or rep.append(("unexpected _cst_01 [.'$X'.a]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$X'.a]", lpath_0 if path is not None else None))
                return False
        elif prop == "b":
            # handle must b property
            must_count += 1
            # .'$X'.b
            res = isinstance(pval, str) and pval == "cst_01"
            if not res:
                rep is None or rep.append(("unexpected _cst_01 [.'$X'.b]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$X'.b]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$X']", lpath_0 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "a" in val:
                rep is None or rep.append(("missing mandatory prop <a> [.'$X']", path))
            if not "b" in val:
                rep is None or rep.append(("missing mandatory prop <b> [.'$X']", path))
        return False
    return True

# check $X (.'$X')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$X'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object [.'$X']", path))
    return res

# object .'$Y'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Y']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "c":
            # handle must c property
            must_count += 1
            # .'$Y'.c
            res = isinstance(pval, str) and pval == "cst_01"
            if not res:
                rep is None or rep.append(("unexpected _cst_01 [.'$Y'.c]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Y'.c]", lpath_1 if path is not None else None))
                return False
        elif prop == "d":
            # handle must d property
            must_count += 1
            # .'$Y'.d
            res = isinstance(pval, str) and pval == "cst_01"
            if not res:
                rep is None or rep.append(("unexpected _cst_01 [.'$Y'.d]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Y'.d]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Y']", lpath_1 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "c" in val:
                rep is None or rep.append(("missing mandatory prop <c> [.'$Y']", path))
            if not "d" in val:
                rep is None or rep.append(("missing mandatory prop <d> [.'$Y']", path))
        return False
    return True

# check $Y (.'$Y')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Y'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object [.'$Y']", path))
    return res

# check _jm_obj_2_mup_a (.a)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .a
    res = isinstance(val, str) and val == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.a]", path))
    return res

# check _jm_obj_2_mup_b (.b)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .b
    res = isinstance(val, str) and val == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.b]", path))
    return res

# check _jm_obj_2_mup_c (.c)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .c
    res = isinstance(val, str) and val == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.c]", path))
    return res

# check _jm_obj_2_mup_d (.d)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .d
    res = isinstance(val, str) and val == "cst_01"
    if not res:
        rep is None or rep.append(("unexpected _cst_01 [.d]", path))
    return res


# object .
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_2_mup.get(prop):
            # handle 4 mandatory props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_2 if path is not None else None, rep):
                    rep is None or rep.append(("invalid mandatory prop value [.]", lpath_2 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("unexpected prop [.]", lpath_2 if path is not None else None))
            return False
    if must_count != 4:
        if rep is not None:
            if not "a" in val:
                rep is None or rep.append(("missing mandatory prop <a> [.]", path))
            if not "b" in val:
                rep is None or rep.append(("missing mandatory prop <b> [.]", path))
            if not "c" in val:
                rep is None or rep.append(("missing mandatory prop <c> [.]", path))
            if not "d" in val:
                rep is None or rep.append(("missing mandatory prop <d> [.]", path))
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_obj_2_mup
        _jm_obj_2_mup = {
            "a": _jm_f_0,
            "b": _jm_f_1,
            "c": _jm_f_2,
            "d": _jm_f_3,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "T": json_model_2,
            "X": json_model_3,
            "Y": json_model_4,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
