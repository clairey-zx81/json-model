#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


my %_jm_obj_2_mup;
my %check_model_map;

# check $T (.'$T')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$T'
    $res = jm_is_string($val) && $val eq 'cst_02';
    return $res;
}

# object .'$R'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'a')
        {
            # handle must a property
            $must_count++;
            # .'$R'.a
            $res = jm_is_string($pval) && $pval eq 'cst_01';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'b')
        {
            # handle must b property
            $must_count++;
            # .'$R'.b
            $res = jm_is_string($pval) && $pval eq 'cst_01';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'c')
        {
            # handle must c property
            $must_count++;
            # .'$R'.c
            $res = jm_is_string($pval) && $pval eq 'cst_01';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'd')
        {
            # handle must d property
            $must_count++;
            # .'$R'.d
            $res = jm_is_string($pval) && $pval eq 'cst_01';
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 4)
    {
        return 0;
    }
    return 1;
}

# check $R (.'$R')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$R'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# object .'$Z'
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'e')
        {
            # handle must e property
            $must_count++;
            # .'$Z'.e
            $res = jm_is_string($pval) && $pval eq 'cst_02';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'f')
        {
            # handle must f property
            $must_count++;
            # .'$Z'.f
            $res = jm_is_string($pval) && $pval eq 'cst_02';
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# check $Z (.'$Z')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Z'
    $res = _jm_obj_1($val, $path, $rep);
    return $res;
}

# check _jm_obj_2_mup_a (.a)
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .a
    $res = jm_is_string($val) && $val eq 'cst_01';
    return $res;
}

# check _jm_obj_2_mup_b (.b)
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .b
    $res = jm_is_string($val) && $val eq 'cst_01';
    return $res;
}

# check _jm_obj_2_mup_c (.c)
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .c
    $res = jm_is_string($val) && $val eq 'cst_01';
    return $res;
}

# check _jm_obj_2_mup_d (.d)
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .d
    $res = jm_is_string($val) && $val eq 'cst_01';
    return $res;
}

# check _jm_obj_2_mup_e (.e)
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .e
    $res = jm_is_string($val) && $val eq 'cst_02';
    return $res;
}

# check _jm_obj_2_mup_f (.f)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .f
    $res = jm_is_string($val) && $val eq 'cst_02';
    return $res;
}


# object .
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_2_mup{$prop}))
        {
            # handle 6 mandatory props
            if (defined($pfun))
            {
                $must_count++;
                if (! &$pfun($pval, undef, $rep))
                {
                    return 0;
                }
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 6)
    {
        return 0;
    }
    return 1;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = _jm_obj_2($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_obj_2_mup = (
            'a' => \&_jm_f_0,
            'b' => \&_jm_f_1,
            'c' => \&_jm_f_2,
            'd' => \&_jm_f_3,
            'e' => \&_jm_f_4,
            'f' => \&_jm_f_5,
        );
        %check_model_map = (
            '' => \&json_model_1,
            'T' => \&json_model_2,
            'R' => \&json_model_5,
            'Z' => \&json_model_4,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_obj_2_mup = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
