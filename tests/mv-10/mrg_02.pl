#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_2($$$);
sub json_model_5($$$);
sub json_model_4($$$);
sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
my %json_model_1_mup;
sub json_model_1($$$);
my %check_model_map;

# check $t (.'$t')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$t'
    return jm_is_string($val) && $val eq 'cst_02';
}

# check $r (.'$r')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$r'
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 4)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'a'})
    {
        return 0;
    }
    $pval = $$val{'a'};
    # .'$r'.a
    $res = jm_is_string($pval) && $pval eq 'cst_01';
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'b'})
    {
        return 0;
    }
    $pval = $$val{'b'};
    # .'$r'.b
    $res = jm_is_string($pval) && $pval eq 'cst_01';
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'c'})
    {
        return 0;
    }
    $pval = $$val{'c'};
    # .'$r'.c
    $res = jm_is_string($pval) && $pval eq 'cst_01';
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'d'})
    {
        return 0;
    }
    $pval = $$val{'d'};
    # .'$r'.d
    return jm_is_string($pval) && $pval eq 'cst_01';
}

# check $z (.'$z')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$z'
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 2)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'e'})
    {
        return 0;
    }
    $pval = $$val{'e'};
    # .'$z'.e
    $res = jm_is_string($pval) && $pval eq 'cst_02';
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'f'})
    {
        return 0;
    }
    $pval = $$val{'f'};
    # .'$z'.f
    return jm_is_string($pval) && $pval eq 'cst_02';
}

# check json_model_1_mup_a (.a)
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    # .a
    return jm_is_string($val) && $val eq 'cst_01';
}

# check json_model_1_mup_b (.b)
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .b
    return jm_is_string($val) && $val eq 'cst_01';
}

# check json_model_1_mup_c (.c)
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    # .c
    return jm_is_string($val) && $val eq 'cst_01';
}

# check json_model_1_mup_d (.d)
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .d
    return jm_is_string($val) && $val eq 'cst_01';
}

# check json_model_1_mup_e (.e)
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .e
    return jm_is_string($val) && $val eq 'cst_02';
}

# check json_model_1_mup_f (.f)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    # .f
    return jm_is_string($val) && $val eq 'cst_02';
}


# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_1_mup{$prop}))
        {
            # handle 6 mandatory props
            if (defined($pfun))
            {
                $must_count++;
                if (! &$pfun($pval, undef, undef))
                {
                    return 0;
                }
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 6;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %json_model_1_mup = (
            'a' => \&_jm_f_0,
            'b' => \&_jm_f_1,
            'c' => \&_jm_f_2,
            'd' => \&_jm_f_3,
            'e' => \&_jm_f_4,
            'f' => \&_jm_f_5,
        );
        %check_model_map = (
            '' => \&json_model_1,
            't' => \&json_model_2,
            'r' => \&json_model_5,
            'z' => \&json_model_4,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %json_model_1_mup = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
