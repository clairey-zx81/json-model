//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//
import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class mrg_02 extends ModelChecker
{
    static public final String VERSION = "2.0b1";

    Map<String, Checker> _jm_obj_2_mup_pmap;
    public Map<String, Checker> mrg_02_map_pmap;

    // check $T (.'$T')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$T'
        res = json.isString(val) && json.asString(val).compareTo("cst_02") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_02 [.'$T']", path);
        }
        return res;
    }
    
    // object .'$R'
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$R']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (prop.compareTo("a") == 0)
            {
                // handle must a property
                must_count += 1;
                // .'$R'.a
                res = json.isString(pval) && json.asString(pval).compareTo("cst_01") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected _cst_01 [.'$R'.a]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$R'.a]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("b") == 0)
            {
                // handle must b property
                must_count += 1;
                // .'$R'.b
                res = json.isString(pval) && json.asString(pval).compareTo("cst_01") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected _cst_01 [.'$R'.b]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$R'.b]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("c") == 0)
            {
                // handle must c property
                must_count += 1;
                // .'$R'.c
                res = json.isString(pval) && json.asString(pval).compareTo("cst_01") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected _cst_01 [.'$R'.c]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$R'.c]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("d") == 0)
            {
                // handle must d property
                must_count += 1;
                // .'$R'.d
                res = json.isString(pval) && json.asString(pval).compareTo("cst_01") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected _cst_01 [.'$R'.d]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$R'.d]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$R']", (path != null ? lpath_0 : null));
                return false;
            }
        }
        if (must_count != 4)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "a"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <a> [.'$R']", path);
                }
                if (! json.objectHasProp(val, "b"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <b> [.'$R']", path);
                }
                if (! json.objectHasProp(val, "c"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <c> [.'$R']", path);
                }
                if (! json.objectHasProp(val, "d"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <d> [.'$R']", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $R (.'$R')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$R'
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$R']", path);
        }
        return res;
    }
    
    // object .'$Z'
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Z']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            if (prop.compareTo("e") == 0)
            {
                // handle must e property
                must_count += 1;
                // .'$Z'.e
                res = json.isString(pval) && json.asString(pval).compareTo("cst_02") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected _cst_02 [.'$Z'.e]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Z'.e]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("f") == 0)
            {
                // handle must f property
                must_count += 1;
                // .'$Z'.f
                res = json.isString(pval) && json.asString(pval).compareTo("cst_02") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected _cst_02 [.'$Z'.f]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Z'.f]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$Z']", (path != null ? lpath_1 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "e"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <e> [.'$Z']", path);
                }
                if (! json.objectHasProp(val, "f"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <f> [.'$Z']", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $Z (.'$Z')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Z'
        res = _jm_obj_1(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$Z']", path);
        }
        return res;
    }
    
    // check _jm_obj_2_mup_a (.a)
    public boolean _jm_f_0(Object val, Path path, Report rep)
    {
        boolean res;
        // .a
        res = json.isString(val) && json.asString(val).compareTo("cst_01") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_01 [.a]", path);
        }
        return res;
    }
    
    // check _jm_obj_2_mup_b (.b)
    public boolean _jm_f_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .b
        res = json.isString(val) && json.asString(val).compareTo("cst_01") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_01 [.b]", path);
        }
        return res;
    }
    
    // check _jm_obj_2_mup_c (.c)
    public boolean _jm_f_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .c
        res = json.isString(val) && json.asString(val).compareTo("cst_01") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_01 [.c]", path);
        }
        return res;
    }
    
    // check _jm_obj_2_mup_d (.d)
    public boolean _jm_f_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .d
        res = json.isString(val) && json.asString(val).compareTo("cst_01") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_01 [.d]", path);
        }
        return res;
    }
    
    // check _jm_obj_2_mup_e (.e)
    public boolean _jm_f_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .e
        res = json.isString(val) && json.asString(val).compareTo("cst_02") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_02 [.e]", path);
        }
        return res;
    }
    
    // check _jm_obj_2_mup_f (.f)
    public boolean _jm_f_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .f
        res = json.isString(val) && json.asString(val).compareTo("cst_02") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _cst_02 [.f]", path);
        }
        return res;
    }
    
    
    // object .
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.]", path);
            return false;
        }
        Checker pfun;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_2 = new Path(prop, path);
            if ((pfun = _jm_obj_2_mup_pmap.get(prop)) != null)
            {
                // handle 6 mandatory props
                if (pfun != null)
                {
                    must_count += 1;
                    if (! (pfun.call(pval, (path != null ? lpath_2 : null), rep)))
                    {
                        if (rep != null) rep.addEntry("invalid mandatory prop value [.]", (path != null ? lpath_2 : null));
                        return false;
                    }
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.]", (path != null ? lpath_2 : null));
                return false;
            }
        }
        if (must_count != 6)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "a"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <a> [.]", path);
                }
                if (! json.objectHasProp(val, "b"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <b> [.]", path);
                }
                if (! json.objectHasProp(val, "c"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <c> [.]", path);
                }
                if (! json.objectHasProp(val, "d"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <d> [.]", path);
                }
                if (! json.objectHasProp(val, "e"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <e> [.]", path);
                }
                if (! json.objectHasProp(val, "f"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <f> [.]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = _jm_obj_2(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.]", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_obj_2_mup_pmap = new HashMap<String, Checker>();
            _jm_obj_2_mup_pmap.put("a", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_0(o, p, r);} });
            _jm_obj_2_mup_pmap.put("b", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_1(o, p, r);} });
            _jm_obj_2_mup_pmap.put("c", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_2(o, p, r);} });
            _jm_obj_2_mup_pmap.put("d", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_3(o, p, r);} });
            _jm_obj_2_mup_pmap.put("e", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_4(o, p, r);} });
            _jm_obj_2_mup_pmap.put("f", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_5(o, p, r);} });
            mrg_02_map_pmap = new HashMap<String, Checker>();
            mrg_02_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            mrg_02_map_pmap.put("T", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            mrg_02_map_pmap.put("R", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
            mrg_02_map_pmap.put("Z", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_obj_2_mup_pmap = null;
            mrg_02_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return mrg_02_map_pmap.get(name);
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new mrg_02();
        Main.main("mrg_02", checker, VERSION, args);
    }
}
