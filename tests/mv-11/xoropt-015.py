#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0b0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0b0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $V (.'$V')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$V'
    # .'$V'.'|'.0
    res = isinstance(val, int) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1 strict int [.'$V'.'|'.0]", path))
    if not res:
        # .'$V'.'|'.1
        res = isinstance(val, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$V'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$V'.'|']", path))
    return res

# object .'$X'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$X']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "X":
            # handle must X property
            must_count += 1
            # .'$X'.X
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$X'.X]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$X'.X]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$X']", lpath_0 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "X" in val:
                rep is None or rep.append(("missing mandatory prop <X> [.'$X']", path))
        return False
    return True

# check $X (.'$X')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$X'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected object [.'$X']", path))
    return res

# object .'$Y'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Y']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "Y":
            # handle must Y property
            must_count += 1
            # .'$Y'.Y
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Y'.Y]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Y'.Y]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Y']", lpath_1 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "Y" in val:
                rep is None or rep.append(("missing mandatory prop <Y> [.'$Y']", path))
        return False
    return True

# check $Y (.'$Y')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Y'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected object [.'$Y']", path))
    return res

# object .'$E'.'|'.1
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$E'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "Y":
            # handle must Y property
            must_count += 1
            # .'$E'.'|'.1.Y
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$E'.'|'.1.Y]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$E'.'|'.1.Y]", lpath_2 if path is not None else None))
                return False
        elif prop == "Z":
            # handle may Z property
            # .'$E'.'|'.1.Z
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$E'.'|'.1.Z]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$E'.'|'.1.Z]", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$E'.'|'.1]", lpath_2 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "Y" in val:
                rep is None or rep.append(("missing mandatory prop <Y> [.'$E'.'|'.1]", path))
        return False
    return True

# object .'$E'.'|'.0
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$E'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "X":
            # handle must X property
            must_count += 1
            # .'$E'.'|'.0.X
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$E'.'|'.0.X]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$E'.'|'.0.X]", lpath_3 if path is not None else None))
                return False
        elif prop == "Z":
            # handle may Z property
            # .'$E'.'|'.0.Z
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$E'.'|'.0.Z]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$E'.'|'.0.Z]", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$E'.'|'.0]", lpath_3 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "X" in val:
                rep is None or rep.append(("missing mandatory prop <X> [.'$E'.'|'.0]", path))
        return False
    return True

# check $E (.'$E')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$E'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$E'.'|']", path))
    if res:
        # .'$E'.'|'.0
        res = _jm_obj_3(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected object [.'$E'.'|'.0]", path))
        if not res:
            # .'$E'.'|'.1
            res = _jm_obj_2(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected object [.'$E'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$E'.'|']", path))
    return res

# check $M (.'$M')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$M'
    # generic xor list
    xc_0: int = 0
    xr_0: bool
    # .'$M'.'^'.0
    xr_0 = json_model_2(val, path, rep)
    if not xr_0:
        rep is None or rep.append(("unexpected $V [.'$M'.'^'.0]", path))
    if xr_0:
        xc_0 += 1
    # .'$M'.'^'.1
    xr_0 = json_model_5(val, path, rep)
    if not xr_0:
        rep is None or rep.append(("unexpected $E [.'$M'.'^'.1]", path))
    if xr_0:
        xc_0 += 1
    res = xc_0 == 1
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not one model match [.'$M'.'^']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $M [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "V": json_model_2,
            "X": json_model_3,
            "Y": json_model_4,
            "E": json_model_5,
            "M": json_model_6,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
