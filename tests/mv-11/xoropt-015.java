//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class xoropt_015 extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> xoropt_015_map_pmap;

    // check $V (.'$V')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$V'
        // .'$V'.'|'.0
        res = json.isInteger(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not a -1 strict int [.'$V'.'|'.0]", path);
        }
        if (! res)
        {
            // .'$V'.'|'.1
            res = json.isString(val);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$V'.'|'.1]", path);
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'$V'.'|']", path);
        }
        return res;
    }
    
    // object .'$X'
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$X']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (prop.compareTo("X") == 0)
            {
                // handle must X property
                must_count += 1;
                // .'$X'.X
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$X'.X]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$X'.X]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$X']", (path != null ? lpath_0 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "X"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <X> [.'$X']", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $X (.'$X')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$X'
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$X']", path);
        }
        return res;
    }
    
    // object .'$Y'
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Y']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            if (prop.compareTo("Y") == 0)
            {
                // handle must Y property
                must_count += 1;
                // .'$Y'.Y
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$Y'.Y]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Y'.Y]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$Y']", (path != null ? lpath_1 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "Y"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <Y> [.'$Y']", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $Y (.'$Y')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Y'
        res = _jm_obj_1(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$Y']", path);
        }
        return res;
    }
    
    // object .'$E'.'|'.1
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$E'.'|'.1]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_2 = new Path(prop, path);
            if (prop.compareTo("Y") == 0)
            {
                // handle must Y property
                must_count += 1;
                // .'$E'.'|'.1.Y
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$E'.'|'.1.Y]", (path != null ? lpath_2 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$E'.'|'.1.Y]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("Z") == 0)
            {
                // handle may Z property
                // .'$E'.'|'.1.Z
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$E'.'|'.1.Z]", (path != null ? lpath_2 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$E'.'|'.1.Z]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$E'.'|'.1]", (path != null ? lpath_2 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "Y"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <Y> [.'$E'.'|'.1]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // object .'$E'.'|'.0
    public boolean _jm_obj_3(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$E'.'|'.0]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_3 = new Path(prop, path);
            if (prop.compareTo("X") == 0)
            {
                // handle must X property
                must_count += 1;
                // .'$E'.'|'.0.X
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$E'.'|'.0.X]", (path != null ? lpath_3 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$E'.'|'.0.X]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else if (prop.compareTo("Z") == 0)
            {
                // handle may Z property
                // .'$E'.'|'.0.Z
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$E'.'|'.0.Z]", (path != null ? lpath_3 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$E'.'|'.0.Z]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$E'.'|'.0]", (path != null ? lpath_3 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "X"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <X> [.'$E'.'|'.0]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $E (.'$E')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$E'
        res = json.isObject(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected type [.'$E'.'|']", path);
        }
        if (res)
        {
            // .'$E'.'|'.0
            res = _jm_obj_3(val, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected element [.'$E'.'|'.0]", path);
            }
            if (! res)
            {
                // .'$E'.'|'.1
                res = _jm_obj_2(val, path, rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected element [.'$E'.'|'.1]", path);
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$E'.'|']", path);
            }
        }
        return res;
    }
    
    // check $M (.'$M')
    public boolean json_model_6(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$M'
        // generic xor list
        long xc_0 = 0;
        boolean xr_0;
        // .'$M'.'^'.0
        xr_0 = json_model_2(val, path, rep);
        if (! xr_0)
        {
            if (rep != null) rep.addEntry("unexpected $V [.'$M'.'^'.0]", path);
        }
        if (xr_0)
        {
            xc_0 += 1;
        }
        // .'$M'.'^'.1
        xr_0 = json_model_5(val, path, rep);
        if (! xr_0)
        {
            if (rep != null) rep.addEntry("unexpected $E [.'$M'.'^'.1]", path);
        }
        if (xr_0)
        {
            xc_0 += 1;
        }
        res = xc_0 == 1;
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("not one model match [.'$M'.'^']", path);
        }
        return res;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = json_model_6(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $M [.]", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            xoropt_015_map_pmap = new HashMap<String, Checker>();
            xoropt_015_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            xoropt_015_map_pmap.put("V", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            xoropt_015_map_pmap.put("X", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            xoropt_015_map_pmap.put("Y", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            xoropt_015_map_pmap.put("E", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
            xoropt_015_map_pmap.put("M", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_6(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            xoropt_015_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return xoropt_015_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return xoropt_015_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new xoropt_015();
        Main.main("xoropt_015", checker, VERSION, args);
    }
}
