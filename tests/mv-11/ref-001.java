//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class ref_001 extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> ref_001_map_pmap;

    // object .'$a'
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$a']", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'$a']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "a"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.'$a']", path);
            return false;
        }
        pval = json.objectValue(val, "a");
        // .'$a'.a
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$a'.a]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.'$a']", path);
            return false;
        }
        if (! json.objectHasProp(val, "b"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <b> [.'$a']", path);
            return false;
        }
        pval = json.objectValue(val, "b");
        // .'$a'.b
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$a'.b]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <b> [.'$a']", path);
            return false;
        }
        return true;
    }

    // check $a (.'$a')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$a'
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$a']", path);
        }
        return res;
    }

    // object .'$b'
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$b']", path);
            return false;
        }
        if (json.objectSize(val) != 3)
        {
            if (rep != null) rep.addEntry("bad property count [.'$b']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "a"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.'$b']", path);
            return false;
        }
        pval = json.objectValue(val, "a");
        // .'$b'.a
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$b'.a]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.'$b']", path);
            return false;
        }
        if (! json.objectHasProp(val, "b"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <b> [.'$b']", path);
            return false;
        }
        pval = json.objectValue(val, "b");
        // .'$b'.b
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$b'.b]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <b> [.'$b']", path);
            return false;
        }
        if (! json.objectHasProp(val, "c"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <c> [.'$b']", path);
            return false;
        }
        pval = json.objectValue(val, "c");
        // .'$b'.c
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$b'.c]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <c> [.'$b']", path);
            return false;
        }
        return true;
    }

    // check $b (.'$b')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$b'
        res = _jm_obj_1(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$b']", path);
        }
        return res;
    }

    // object .
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.]", path);
            return false;
        }
        if (json.objectSize(val) == 0)
        {
            return true;
        }
        else
        {
            if (rep != null) rep.addEntry("expecting empty object [.]", path);
            return false;
        }
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = _jm_obj_2(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.]", path);
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            ref_001_map_pmap = new HashMap<String, Checker>();
            ref_001_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_2(o, p, r);} });
            ref_001_map_pmap.put("a", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_0(o, p, r);} });
            ref_001_map_pmap.put("b", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_1(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            ref_001_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return ref_001_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return ref_001_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new ref_001();
        Main.main("ref_001", checker, VERSION, args);
    }
}
