//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//
import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class xorxor_000 extends ModelChecker
{
    static public final String VERSION = "2.0b1";

    public Map<String, Checker> xorxor_000_map_pmap;

    // check $X (.'$X')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$X'
        // .'$X'.'|'.0
        res = json.isNull(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not null [.'$X'.'|'.0]", path);
        }
        if (! res)
        {
            // .'$X'.'|'.1
            res = json.isBoolean(val);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a bool [.'$X'.'|'.1]", path);
            }
            if (! res)
            {
                // .'$X'.'|'.2
                res = json.isInteger(val) && json.asLong(val) >= 1;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 1 strict int [.'$X'.'|'.2]", path);
                }
                if (! res)
                {
                    // .'$X'.'|'.3
                    res = json.isDouble(val) && json.asDouble(val) > 0.0;
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a 1.0 strict float [.'$X'.'|'.3]", path);
                    }
                }
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'$X'.'|']", path);
        }
        return res;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        // generic xor list
        long xc_0 = 0;
        boolean xr_0;
        // .'^'.0
        xr_0 = json_model_2(val, path, rep);
        if (! xr_0)
        {
            if (rep != null) rep.addEntry("unexpected $X [.'^'.0]", path);
        }
        if (xr_0)
        {
            xc_0 += 1;
        }
        // .'^'.1
        xr_0 = json.isArray(val);
        if (xr_0)
        {
            int arr_0_idx = -1;
            Iterator<Object> arr_0_item_loop = json.arrayIterator(val);
            while (arr_0_item_loop.hasNext())
            {
                arr_0_idx++;
                Object arr_0_item = arr_0_item_loop.next();
                Path arr_0_lpath = new Path(arr_0_idx, path);
                // .'^'.1.0
                xr_0 = json_model_2(arr_0_item, (path != null ? arr_0_lpath : null), rep);
                if (! xr_0)
                {
                    if (rep != null) rep.addEntry("unexpected $X [.'^'.1.0]", (path != null ? arr_0_lpath : null));
                }
                if (! xr_0)
                {
                    break;
                }
            }
        }
        if (! xr_0)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'^'.1]", path);
        }
        if (xr_0)
        {
            xc_0 += 1;
        }
        res = xc_0 == 1;
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("not one model match [.'^']", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            xorxor_000_map_pmap = new HashMap<String, Checker>();
            xorxor_000_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            xorxor_000_map_pmap.put("X", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            xorxor_000_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return xorxor_000_map_pmap.get(name);
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new xorxor_000();
        Main.main("xorxor_000", checker, VERSION, args);
    }
}
