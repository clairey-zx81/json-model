//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//
import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class xoropt_014 extends ModelChecker
{
    static public final String VERSION = "2.0b1";

    Map<Object, Checker> _jm_map_0_cmap;
    public Map<String, Checker> xoropt_014_map_pmap;

    // object .movie.'|'.0
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.movie.'|'.0]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            if (prop.compareTo("t") == 0)
            {
                // handle must t property
                must_count += 1;
                // .movie.'|'.0.t
                res = json.isString(pval) && json.asString(pval).compareTo("fr") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected fr [.movie.'|'.0.t]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.movie.'|'.0.t]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("titre") == 0)
            {
                // handle must titre property
                must_count += 1;
                // .movie.'|'.0.titre
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.movie.'|'.0.titre]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.movie.'|'.0.titre]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.movie.'|'.0]", (path != null ? lpath_1 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "t"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <t> [.movie.'|'.0]", path);
                }
                if (! json.objectHasProp(val, "titre"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <titre> [.movie.'|'.0]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // object .movie.'|'.1
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.movie.'|'.1]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_2 = new Path(prop, path);
            if (prop.compareTo("t") == 0)
            {
                // handle must t property
                must_count += 1;
                // .movie.'|'.1.t
                res = json.isString(pval) && json.asString(pval).compareTo("en") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected en [.movie.'|'.1.t]", (path != null ? lpath_2 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.movie.'|'.1.t]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("title") == 0)
            {
                // handle must title property
                must_count += 1;
                // .movie.'|'.1.title
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.movie.'|'.1.title]", (path != null ? lpath_2 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.movie.'|'.1.title]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.movie.'|'.1]", (path != null ? lpath_2 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "t"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <t> [.movie.'|'.1]", path);
                }
                if (! json.objectHasProp(val, "title"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <title> [.movie.'|'.1]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // object .movie.'|'.2
    public boolean _jm_obj_3(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.movie.'|'.2]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_3 = new Path(prop, path);
            if (prop.compareTo("t") == 0)
            {
                // handle must t property
                must_count += 1;
                // .movie.'|'.2.t
                res = json.isString(pval) && json.asString(pval).compareTo("de") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected de [.movie.'|'.2.t]", (path != null ? lpath_3 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.movie.'|'.2.t]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else if (prop.compareTo("Title") == 0)
            {
                // handle must Title property
                must_count += 1;
                // .movie.'|'.2.Title
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.movie.'|'.2.Title]", (path != null ? lpath_3 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.movie.'|'.2.Title]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.movie.'|'.2]", (path != null ? lpath_3 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "Title"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <Title> [.movie.'|'.2]", path);
                }
                if (! json.objectHasProp(val, "t"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <t> [.movie.'|'.2]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // object .movie.'|'.3
    public boolean _jm_obj_4(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.movie.'|'.3]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_4 = new Path(prop, path);
            if (prop.compareTo("t") == 0)
            {
                // handle must t property
                must_count += 1;
                // .movie.'|'.3.t
                res = json.isString(pval) && json.asString(pval).compareTo("ru") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected ru [.movie.'|'.3.t]", (path != null ? lpath_4 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.movie.'|'.3.t]", (path != null ? lpath_4 : null));
                    return false;
                }
            }
            else if (prop.compareTo("suti") == 0)
            {
                // handle must suti property
                must_count += 1;
                // .movie.'|'.3.suti
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.movie.'|'.3.suti]", (path != null ? lpath_4 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.movie.'|'.3.suti]", (path != null ? lpath_4 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.movie.'|'.3]", (path != null ? lpath_4 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "suti"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <suti> [.movie.'|'.3]", path);
                }
                if (! json.objectHasProp(val, "t"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <t> [.movie.'|'.3]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    
    // object .
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (prop.compareTo("movie") == 0)
            {
                // handle must movie property
                must_count += 1;
                // .movie
                res = json.isObject(pval);
                if (res)
                {
                    Object tag_0 = json.objectValue(pval, "t");
                    if (tag_0 != null)
                    {
                        Checker fun_0 = _jm_map_0_cmap.get(tag_0);
                        if (fun_0 != null)
                        {
                            res = fun_0.call(pval, (path != null ? lpath_0 : null), rep);
                        }
                        else
                        {
                            res = false;
                            if (rep != null) rep.addEntry("tag <t> value not found [.movie.'|']", (path != null ? lpath_0 : null));
                        }
                    }
                    else
                    {
                        res = false;
                        if (rep != null) rep.addEntry("tag prop <t> is missing [.movie.'|']", (path != null ? lpath_0 : null));
                    }
                }
                else
                {
                    if (rep != null) rep.addEntry("value is not an object [.movie.'|']", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.movie]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.]", (path != null ? lpath_0 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "movie"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <movie> [.]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.]", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_map_0_cmap = new HashMap<Object, Checker>();
            _jm_map_0_cmap.put(json.safeJSON("\"fr\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_1(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"en\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_2(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"de\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_3(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"ru\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_4(o, p, r);} });
            xoropt_014_map_pmap = new HashMap<String, Checker>();
            xoropt_014_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_map_0_cmap = null;
            xoropt_014_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return xoropt_014_map_pmap.get(name);
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new xoropt_014();
        Main.main("xoropt_014", checker, VERSION, args);
    }
}
