#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_2($$$);
sub json_model_3($$$);
sub json_model_4($$$);
sub _jm_obj_0($$$);
sub _jm_obj_1($$$);
sub _jm_obj_2($$$);
sub _jm_obj_3($$$);
sub _jm_obj_4($$$);
sub json_model_1($$$);
my %check_model_map;

# check $n (.'$n')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$n'
    $res = !defined($val);
    return $res;
}

# check $x (.'$x')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$x'
    $res = jm_is_numeric($val) && $val == 10.0;
    return $res;
}

# check $f (.'$f')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$f'
    $res = jm_is_boolean($val) && $val == 0;
    return $res;
}

# object .'|'.4
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 1)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'a'})
    {
        return 0;
    }
    $pval = $$val{'a'};
    # .'|'.4.a
    $res = jm_is_boolean($pval) && $pval == 0;
    return $res;
}

# object .'|'.3
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 1)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'a'})
    {
        return 0;
    }
    $pval = $$val{'a'};
    # .'|'.3.a
    $res = jm_is_boolean($pval) && $pval == 1;
    return $res;
}

# object .'|'.2
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 1)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'a'})
    {
        return 0;
    }
    $pval = $$val{'a'};
    # .'|'.2.a
    $res = jm_is_numeric($pval) && $pval == 1.0;
    return $res;
}

# object .'|'.1
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 1)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'a'})
    {
        return 0;
    }
    $pval = $$val{'a'};
    # .'|'.1.a
    $res = jm_is_numeric($pval) && $pval == 10.0;
    return $res;
}

# object .'|'.0
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 1)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'a'})
    {
        return 0;
    }
    $pval = $$val{'a'};
    # .'|'.0.a
    $res = !defined($pval);
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # ^ to | on constants
    # .
    $res = jm_is_object($val);
    if ($res)
    {
        # .'|'.0
        $res = _jm_obj_4($val, $path, $rep);
        if (! $res)
        {
            # .'|'.1
            $res = _jm_obj_3($val, $path, $rep);
            if (! $res)
            {
                # .'|'.2
                $res = _jm_obj_2($val, $path, $rep);
                if (! $res)
                {
                    # .'|'.3
                    $res = _jm_obj_1($val, $path, $rep);
                    if (! $res)
                    {
                        # .'|'.4
                        $res = _jm_obj_0($val, $path, $rep);
                    }
                }
            }
        }
    }
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&json_model_1,
            'n' => \&json_model_2,
            'x' => \&json_model_3,
            'f' => \&json_model_4,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
