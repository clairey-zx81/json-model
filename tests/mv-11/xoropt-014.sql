--
-- Generated by JSON Model Compiler version 2
-- see https://github.com/clairey-zx81/json-model
--
-- JSON_MODEL_VERSION is 2
CREATE EXTENSION IF NOT EXISTS json_model;

-- object .movie.'|'.0
CREATE OR REPLACE FUNCTION _jm_obj_0(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 2 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 't' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 't';
  -- .movie.'|'.0.t
  res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 'fr';
  IF NOT res THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'titre' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'titre';
  -- .movie.'|'.0.titre
  RETURN JSONB_TYPEOF(pval) = 'string';
END;
$$ LANGUAGE PLpgSQL;

-- object .movie.'|'.1
CREATE OR REPLACE FUNCTION _jm_obj_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 2 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 't' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 't';
  -- .movie.'|'.1.t
  res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 'en';
  IF NOT res THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'title' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'title';
  -- .movie.'|'.1.title
  RETURN JSONB_TYPEOF(pval) = 'string';
END;
$$ LANGUAGE PLpgSQL;

-- object .movie.'|'.2
CREATE OR REPLACE FUNCTION _jm_obj_2(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 2 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 't' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 't';
  -- .movie.'|'.2.t
  res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 'de';
  IF NOT res THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'Title' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'Title';
  -- .movie.'|'.2.Title
  RETURN JSONB_TYPEOF(pval) = 'string';
END;
$$ LANGUAGE PLpgSQL;

-- object .movie.'|'.3
CREATE OR REPLACE FUNCTION _jm_obj_3(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 2 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 't' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 't';
  -- .movie.'|'.3.t
  res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 'ru';
  IF NOT res THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'suti' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'suti';
  -- .movie.'|'.3.suti
  RETURN JSONB_TYPEOF(pval) = 'string';
END;
$$ LANGUAGE PLpgSQL;


-- check $ (.)
CREATE OR REPLACE FUNCTION json_model_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
  iso_0 bool;
  tag_0 JSONB;
  fun_0 TEXT;
BEGIN
  -- .
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 1 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'movie' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'movie';
  -- .movie
  iso_0 := JSONB_TYPEOF(pval) = 'object';
  res := iso_0;
  IF res THEN
    IF pval ? 't' THEN
      tag_0 := pval -> 't';
      fun_0 := jm_cmap_get('_jm_map_0', tag_0);
      IF fun_0 IS NOT NULL THEN
        res := jm_call(fun_0, pval, NULL, rep);
      ELSE
        res := FALSE;
      END IF;
    ELSE
      res := FALSE;
    END IF;
  ELSE
    NULL;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION check_model_map(name TEXT)
RETURNS TEXT STRICT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  map JSONB := JSONB '{"":"json_model_1"}';
BEGIN
  RETURN map->>name;
END;
$$ LANGUAGE plpgsql;

--
-- constant maps initialization
--
TRUNCATE jm_constant_maps;
INSERT INTO jm_constant_maps(mapname, tagval, value) VALUES
  ('_jm_map_0', JSONB '"fr"', '_jm_obj_0'),
  ('_jm_map_0', JSONB '"en"', '_jm_obj_1'),
  ('_jm_map_0', JSONB '"de"', '_jm_obj_2'),
  ('_jm_map_0', JSONB '"ru"', '_jm_obj_3')
;

--
-- JSON Model checking entry point
--
-- TODO INOUT rep?
CREATE OR REPLACE FUNCTION check_model(val JSONB, name TEXT, rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  fun TEXT;
BEGIN
  fun := check_model_map(name);
  IF fun IS NULL THEN
    RAISE EXCEPTION 'model for % not found', name;
  END IF;
  RETURN jm_call(fun, val, NULL, rep);
END;
$$ LANGUAGE plpgsql;
