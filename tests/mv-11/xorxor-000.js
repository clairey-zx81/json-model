#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

var check_model_map = new Map()

// check $X (.'$X')
function json_model_2(val, path, rep)
{
    let res;
    // .'$X'
    // .'$X'.'|'.0
    res = val === null;
    if (! res)
    {
        rep !== null && rep.push(["not null [.'$X'.'|'.0]", path])
    }
    if (! res)
    {
        // .'$X'.'|'.1
        res = (typeof val === 'boolean' || val instanceof Boolean);
        if (! res)
        {
            rep !== null && rep.push(["not a bool [.'$X'.'|'.1]", path])
        }
        if (! res)
        {
            // .'$X'.'|'.2
            res = ((typeof val === 'number' || val instanceof Number) && Number.isInteger(val)) && val >= 1;
            if (! res)
            {
                rep !== null && rep.push(["not a 1 strict int [.'$X'.'|'.2]", path])
            }
            if (! res)
            {
                // .'$X'.'|'.3
                res = ((typeof val === 'number' || val instanceof Number)) && val > 0.0;
                if (! res)
                {
                    rep !== null && rep.push(["not a 1.0 strict float [.'$X'.'|'.3]", path])
                }
            }
        }
    }
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["no model matched [.'$X'.'|']", path])
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    // .'|'.0
    res = val === null;
    if (! res)
    {
        rep !== null && rep.push(["not null [.'|'.0]", path])
    }
    if (! res)
    {
        // .'|'.1
        res = (typeof val === 'boolean' || val instanceof Boolean);
        if (! res)
        {
            rep !== null && rep.push(["not a bool [.'|'.1]", path])
        }
        if (! res)
        {
            // .'|'.2
            res = ((typeof val === 'number' || val instanceof Number) && Number.isInteger(val)) && val >= 1;
            if (! res)
            {
                rep !== null && rep.push(["not a 1 strict int [.'|'.2]", path])
            }
            if (! res)
            {
                // .'|'.3
                res = ((typeof val === 'number' || val instanceof Number)) && val > 0.0;
                if (! res)
                {
                    rep !== null && rep.push(["not a 1.0 strict float [.'|'.3]", path])
                }
                if (! res)
                {
                    // .'|'.4
                    res = Array.isArray(val);
                    if (res)
                    {
                        for (let arr_0_idx = 0; arr_0_idx < val.length; arr_0_idx++)
                        {
                            let arr_0_item = val[arr_0_idx]
                            let arr_0_lpath = path ? path.concat([arr_0_idx]) : null;
                            // .'|'.4.0
                            res = json_model_2(arr_0_item, (path ? arr_0_lpath : null), rep);
                            if (! res)
                            {
                                rep !== null && rep.push(["unexpected $X [.'|'.4.0]", (path ? arr_0_lpath : null)])
                            }
                            if (! res)
                            {
                                break;
                            }
                        }
                    }
                    if (! res)
                    {
                        rep !== null && rep.push(["not array or unexpected array [.'|'.4]", path])
                    }
                }
            }
        }
    }
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["no model matched [.'|']", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_1)
        check_model_map.set("X", json_model_2)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
