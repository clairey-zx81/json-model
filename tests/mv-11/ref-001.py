#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# object .'$a'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$a']", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'$a']", path))
        return False
    pval: Jsonable
    res: bool
    if not "a" in val:
        rep is None or rep.append(("missing mandatory prop <a> [.'$a']", path))
        return False
    pval = val.get("a", UNDEFINED)
    # .'$a'.a
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$a'.a]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <a> [.'$a']", path))
        return False
    if not "b" in val:
        rep is None or rep.append(("missing mandatory prop <b> [.'$a']", path))
        return False
    pval = val.get("b", UNDEFINED)
    # .'$a'.b
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$a'.b]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <b> [.'$a']", path))
        return False
    return True

# check $a (.'$a')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$a'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$a']", path))
    return res

# object .'$b'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$b']", path))
        return False
    if len(val) != 3:
        rep is None or rep.append(("bad property count [.'$b']", path))
        return False
    pval: Jsonable
    res: bool
    if not "a" in val:
        rep is None or rep.append(("missing mandatory prop <a> [.'$b']", path))
        return False
    pval = val.get("a", UNDEFINED)
    # .'$b'.a
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$b'.a]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <a> [.'$b']", path))
        return False
    if not "b" in val:
        rep is None or rep.append(("missing mandatory prop <b> [.'$b']", path))
        return False
    pval = val.get("b", UNDEFINED)
    # .'$b'.b
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$b'.b]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <b> [.'$b']", path))
        return False
    if not "c" in val:
        rep is None or rep.append(("missing mandatory prop <c> [.'$b']", path))
        return False
    pval = val.get("c", UNDEFINED)
    # .'$b'.c
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$b'.c]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <c> [.'$b']", path))
        return False
    return True

# check $b (.'$b')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$b'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$b']", path))
    return res

# object .
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    if len(val) == 0:
        return True
    else:
        rep is None or rep.append(("expecting empty object [.]", path))
        return False

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": _jm_obj_2,
            "a": _jm_obj_0,
            "b": _jm_obj_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
