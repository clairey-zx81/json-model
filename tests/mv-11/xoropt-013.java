//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class xoropt_013 extends ModelChecker
{
    static public final String VERSION = "2";

    public Pattern _jm_re_0_pat = null;
    public Map<String, Checker> xoropt_013_map_pmap;

    public boolean _jm_re_0(String val, Path path, Report rep)
    {
        return _jm_re_0_pat.matcher(val).find();
    }
    
    // object .'^'.0
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'^'.0]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (prop.compareTo("a") == 0)
            {
                // handle must a property
                must_count += 1;
                // .'^'.0.a
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'^'.0.a]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'^'.0.a]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else
            {
                // handle other props
                // .'^'.0.''
                // "/.../"
                res = json.isString(pval) && _jm_re_0(json.asString(pval), (path != null ? lpath_0 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected /.../ [.'^'.0.'']", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    return false;
                }
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "a"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <a> [.'^'.0.'']", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // object .'^'.1
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'^'.1]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            if (prop.compareTo("b") == 0)
            {
                // handle must b property
                must_count += 1;
                // .'^'.1.b
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'^'.1.b]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'^'.1.b]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else
            {
                // handle other props
                // .'^'.1.''
                // "/.../"
                res = json.isString(pval) && _jm_re_0(json.asString(pval), (path != null ? lpath_1 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected /.../ [.'^'.1.'']", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    return false;
                }
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "b"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <b> [.'^'.1.'']", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // NOT ^ to |
        // .
        // generic xor list
        long xc_0 = 0;
        boolean xr_0;
        // .'^'.0
        xr_0 = _jm_obj_0(val, path, rep);
        if (! xr_0)
        {
            if (rep != null) rep.addEntry("unexpected element [.'^'.0]", path);
        }
        if (xr_0)
        {
            xc_0 += 1;
        }
        // .'^'.1
        xr_0 = _jm_obj_1(val, path, rep);
        if (! xr_0)
        {
            if (rep != null) rep.addEntry("unexpected element [.'^'.1]", path);
        }
        if (xr_0)
        {
            xc_0 += 1;
        }
        res = xc_0 == 1;
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("not one model match [.'^']", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_re_0_pat = Pattern.compile("...");
            xoropt_013_map_pmap = new HashMap<String, Checker>();
            xoropt_013_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_re_0_pat = null;
            xoropt_013_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return xoropt_013_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return xoropt_013_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new xoropt_013();
        Main.main("xoropt_013", checker, VERSION, args);
    }
}
