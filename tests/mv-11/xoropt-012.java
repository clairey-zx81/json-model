//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//
import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class xoropt_012 extends ModelChecker
{
    static public final String VERSION = "2.0b1";

    public Map<String, Checker> xoropt_012_map_pmap;

    // check $n (.'$n')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$n'
        res = json.isNull(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =null [.'$n']", path);
        }
        return res;
    }
    
    // check $x (.'$x')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$x'
        res = json.isDouble(val) && json.asDouble(val) == 10.0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =10.0 [.'$x']", path);
        }
        return res;
    }
    
    // check $f (.'$f')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$f'
        res = json.isBoolean(val) && json.asBoolean(val) == false;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =false [.'$f']", path);
        }
        return res;
    }
    
    // object .'|'.4
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.4]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (prop.compareTo("a") == 0)
            {
                // handle must a property
                must_count += 1;
                // .'|'.4.a
                res = json.isBoolean(pval) && json.asBoolean(pval) == false;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected =false [.'|'.4.a]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'|'.4.a]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'|'.4]", (path != null ? lpath_0 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "a"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <a> [.'|'.4]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // object .'|'.3
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.3]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            if (prop.compareTo("a") == 0)
            {
                // handle must a property
                must_count += 1;
                // .'|'.3.a
                res = json.isBoolean(pval) && json.asBoolean(pval) == true;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected =true [.'|'.3.a]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'|'.3.a]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'|'.3]", (path != null ? lpath_1 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "a"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <a> [.'|'.3]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // object .'|'.2
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.2]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_2 = new Path(prop, path);
            if (prop.compareTo("a") == 0)
            {
                // handle must a property
                must_count += 1;
                // .'|'.2.a
                res = json.isDouble(pval) && json.asDouble(pval) == 1.0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected =1.0 [.'|'.2.a]", (path != null ? lpath_2 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'|'.2.a]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'|'.2]", (path != null ? lpath_2 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "a"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <a> [.'|'.2]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // object .'|'.1
    public boolean _jm_obj_3(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.1]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_3 = new Path(prop, path);
            if (prop.compareTo("a") == 0)
            {
                // handle must a property
                must_count += 1;
                // .'|'.1.a
                res = json.isDouble(pval) && json.asDouble(pval) == 10.0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected =10.0 [.'|'.1.a]", (path != null ? lpath_3 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'|'.1.a]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'|'.1]", (path != null ? lpath_3 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "a"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <a> [.'|'.1]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // object .'|'.0
    public boolean _jm_obj_4(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.0]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_4 = new Path(prop, path);
            if (prop.compareTo("a") == 0)
            {
                // handle must a property
                must_count += 1;
                // .'|'.0.a
                res = json.isNull(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected =null [.'|'.0.a]", (path != null ? lpath_4 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'|'.0.a]", (path != null ? lpath_4 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'|'.0]", (path != null ? lpath_4 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "a"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <a> [.'|'.0]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // ^ to | on constants
        // .
        res = json.isObject(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected type [.'|']", path);
        }
        if (res)
        {
            // .'|'.0
            res = _jm_obj_4(val, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected element [.'|'.0]", path);
            }
            if (! res)
            {
                // .'|'.1
                res = _jm_obj_3(val, path, rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected element [.'|'.1]", path);
                }
                if (! res)
                {
                    // .'|'.2
                    res = _jm_obj_2(val, path, rep);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("unexpected element [.'|'.2]", path);
                    }
                    if (! res)
                    {
                        // .'|'.3
                        res = _jm_obj_1(val, path, rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected element [.'|'.3]", path);
                        }
                        if (! res)
                        {
                            // .'|'.4
                            res = _jm_obj_0(val, path, rep);
                            if (! res)
                            {
                                if (rep != null) rep.addEntry("unexpected element [.'|'.4]", path);
                            }
                        }
                    }
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'|']", path);
            }
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            xoropt_012_map_pmap = new HashMap<String, Checker>();
            xoropt_012_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            xoropt_012_map_pmap.put("n", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            xoropt_012_map_pmap.put("x", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            xoropt_012_map_pmap.put("f", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            xoropt_012_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return xoropt_012_map_pmap.get(name);
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new xoropt_012();
        Main.main("xoropt_012", checker, VERSION, args);
    }
}
