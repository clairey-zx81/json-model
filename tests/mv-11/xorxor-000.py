#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $X (.'$X')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$X'
    # .'$X'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$X'.'|'.0]", path))
    if not res:
        # .'$X'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$X'.'|'.1]", path))
        if not res:
            # .'$X'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool) and val >= 1
            if not res:
                rep is None or rep.append(("not a 1 strict int [.'$X'.'|'.2]", path))
            if not res:
                # .'$X'.'|'.3
                res = isinstance(val, float) and val > 0.0
                if not res:
                    rep is None or rep.append(("not a 1.0 strict float [.'$X'.'|'.3]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$X'.'|']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    # generic xor list
    xc_0: int = 0
    xr_0: bool
    # .'^'.0
    xr_0 = json_model_2(val, path, rep)
    if not xr_0:
        rep is None or rep.append(("unexpected $X [.'^'.0]", path))
    if xr_0:
        xc_0 += 1
    # .'^'.1
    xr_0 = isinstance(val, list)
    if xr_0:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'^'.1.0
            xr_0 = json_model_2(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not xr_0:
                rep is None or rep.append(("unexpected $X [.'^'.1.0]", arr_0_lpath if path is not None else None))
            if not xr_0:
                break
    if not xr_0:
        rep is None or rep.append(("not array or unexpected array [.'^'.1]", path))
    if xr_0:
        xc_0 += 1
    res = xc_0 == 1
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not one model match [.'^']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "X": json_model_2,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
