#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# object .'|'.1.a
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.1.a]", path))
        return False
    if len(val) == 0:
        return True
    else:
        rep is None or rep.append(("expecting empty object [.'|'.1.a]", path))
        return False

# object .'|'.1
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "b":
            # handle must b property
            must_count += 1
            # .'|'.1.b
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.'|'.1.b]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'|'.1.b]", lpath_0 if path is not None else None))
                return False
        elif prop == "a":
            # handle may a property
            # .'|'.1.a
            res = _jm_obj_1(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'|'.1.a]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'|'.1.a]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.1]", lpath_0 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "b" in val:
                rep is None or rep.append(("missing mandatory prop <b> [.'|'.1]", path))
        return False
    return True

# object .'|'.0
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.0]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'|'.0]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("b", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <b> [.'|'.0]", path))
        return False
    lpath = (path + [ "b" ]) if path is not None else None
    # .'|'.0.b
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'|'.0.b]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <b> [.'|'.0]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("a", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <a> [.'|'.0]", path))
        return False
    lpath = (path + [ "a" ]) if path is not None else None
    # .'|'.0.a
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'|'.0.a]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <a> [.'|'.0]", lpath if path is not None else None))
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # ^ to |
    # .
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'|']", path))
    if res:
        # .'|'.0
        res = _jm_obj_2(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'|'.0]", path))
        if not res:
            # .'|'.1
            res = _jm_obj_0(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
