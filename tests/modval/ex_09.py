#! /bin/env python
#
# Model: ./ex_09.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

json_model_4_may: PropMap

def is_valid_url(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except Exception as e:
            rep is None or re.append(f"invalid url at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for url at {path}: {_tname(value)}")
    return False

# define "json_model_4_may_#" ($.'$EX09'.'#')
def jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$EX09'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$EX09'.'#']")
    return result


# define "$ex08" ($.'$ex08')
def json_model_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ex08'
    result = json_model_9(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $EX08 at {path} [$.'$ex08']")
    return result

# define "$EX08" ($.'$EX08')
def json_model_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$EX08'
    result = json_model_9(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $ex08#EX08 at {path} [$.'$EX08']")
    return result


# object $.'$EX09'
def json_model_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$EX09']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_4_may:  # may
            if not json_model_4_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$EX09'.{prop}]")
                return False
        elif is_valid_url(prop, path, rep) or _rep(f"invalid $URL at {path}", rep) or _rep(f"prop {prop} does not match $URL at {path}", rep):  # $URL
            # $.'$EX09'.'$URL'
            result = json_model_6(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $ex08#VAL at {lpath} [$.'$EX09'.'$URL']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$EX09']")
            return False
    return True



# define "$ex08#VAL" ($.'$ex08#VAL')
def json_model_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ex08#VAL'
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$ex08#VAL']")
    return result

# define "$ex08#EX08" ($.'$ex08#EX08')
def json_model_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ex08#EX08'
    # $.'$ex08#EX08'.'|'.0
    result = json_model_8(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $map at {path} [$.'$ex08#EX08'.'|'.0]")
    if not result:
        # $.'$ex08#EX08'.'|'.1
        result = is_valid_url(value, path, rep) or _rep(f"invalid $URL at {path}", rep)
        if not result:
            rep is None or rep.append(f"not an expected $URL at {path} [$.'$ex08#EX08'.'|'.1]")
        if not result:
            # $.'$ex08#EX08'.'|'.2
            result = json_model_6(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $VAL at {path} [$.'$ex08#EX08'.'|'.2]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$ex08#EX08'.'|']")
    return result


# object $.'$ex08#map'
def json_model_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$ex08#map']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if is_valid_url(prop, path, rep) or _rep(f"invalid $URL at {path}", rep) or _rep(f"prop {prop} does not match $URL at {path}", rep):  # $URL
            # $.'$ex08#map'.'$URL'
            result = json_model_6(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $VAL at {lpath} [$.'$ex08#map'.'$URL']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$ex08#map']")
            return False
    return True



# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = json_model_4(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $EX09 at {path} [$]")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
json_model_4_may = {
    "#": jm_f_0,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

