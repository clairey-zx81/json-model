# Generated for model: ./opt_00.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False


# define "$" ($)
def json_model_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = isinstance(value, int) and not isinstance(value, bool)
    if result:
        # $.'|'.0
        result = isinstance(value, int) and not isinstance(value, bool) and value == 1
        if not result:
            rep is None or rep.append(f"not an expected =1 at {path} [$.'|'.0]")
        if not result:
            # $.'|'.1
            xc_0 = 0
            if xc_0 <= 1:
                # $.'|'.1.'^'.0
                xr_0 = isinstance(value, int) and not isinstance(value, bool) and value == 2
                if not xr_0:
                    rep is None or rep.append(f"not an expected =2 at {path} [$.'|'.1.'^'.0]")
                if xr_0: xc_0 += 1
            if xc_0 <= 1:
                # $.'|'.1.'^'.1
                xr_0 = isinstance(value, int) and not isinstance(value, bool) and value == 3
                if not xr_0:
                    rep is None or rep.append(f"not an expected =3 at {path} [$.'|'.1.'^'.1]")
                if xr_0: xc_0 += 1
            result = xc_0 == 1
            if not result:
                rep is None or rep.append(f"not one model match at {path} [$.'|'.1.'^']")
        if not result:
            rep is None or rep.append(f"not any model match at {path} [$.'|']")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_0(value, path, rep)


