#! /bin/env python
#
# Model: ./or01.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

# regex "/[0-9]/"
_jm_re_0 = re.compile("[0-9]").search

# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = not isinstance(value, (list, dict)) and value in {'Calvin', 'Susie'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'|']")
    if not result:
        result = isinstance(value, str)
        if result:
            # $.'|'.0
            # "/[0-9]/"
            result = _jm_re_0(value) is not None or _rep(f"does not match FESC at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {path} [$.'|'.0]")
            if not result:
                rep is None or rep.append(f"not any model match at {path} [$.'|']")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

