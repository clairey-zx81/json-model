# Generated for model: ./tag02.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

jm_obj_0_must: PropMap
jm_obj_1_must: PropMap
jm_map_0: TagMap

# define "jm_obj_0_must_t" ($.'|'.0.t)
def jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.0.t
    result = isinstance(value, int) and not isinstance(value, bool) and value == 1
    if not result:
        rep is None or rep.append(f"not an expected =1 at {path} [$.'|'.0.t]")
    return result

# define "jm_obj_0_must_a" ($.'|'.0.a)
def jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.0.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'|'.0.a]")
    return result

# define "jm_obj_1_must_t" ($.'|'.1.t)
def jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.1.t
    result = isinstance(value, int) and not isinstance(value, bool) and value == 2
    if not result:
        rep is None or rep.append(f"not an expected =2 at {path} [$.'|'.1.t]")
    return result

# define "jm_obj_1_must_b" ($.'|'.1.b)
def jm_f_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.1.b
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'|'.1.b]")
    return result



# object $.'|'.0
def jm_obj_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.0]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in jm_obj_0_must:  # must
            must_count += 1
            if not jm_obj_0_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.0.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.0]")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.0]")
    return result


# object $.'|'.1
def jm_obj_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.1]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in jm_obj_1_must:  # must
            must_count += 1
            if not jm_obj_1_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.1.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.1]")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.1]")
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = isinstance(value, dict)
    if result:
        result = "t" in value
        if result:
            tag_0 = value["t"]
            if tag_0 in jm_map_0:
                result = jm_map_0[tag_0](value, path)
            else:
                rep is None or rep.append(f"tag t value not found at {path} [$.'|'.'|']")
                result = False
        else:
            rep is None or rep.append(f"missing tag prop t at {path} [$.'|'.'|']")
    else:  # not a dict
        rep is None or rep.append(f"not an object at {path} [$.'|'.'|']")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_0(value, path, rep)


# object properties maps
jm_obj_0_must = {
    "t": jm_f_0,
    "a": jm_f_1,
}
jm_obj_1_must = {
    "t": jm_f_2,
    "b": jm_f_3,
}
jm_map_0 = {
    1: jm_obj_0,
    2: jm_obj_1,
}


