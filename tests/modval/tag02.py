# Generated for model: tag02.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_date(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            datetime.date.fromisoformat(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False

jm_obj_0_must: PropMap
jm_obj_1_must: PropMap
jm_map_0: TagMap

# define "jm_obj_0_must_t" ($.'|'.0.t)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.'|'.0.t
    result = isinstance(value, int) and not isinstance(value, bool) and value == 1
    return result

# define "jm_obj_0_must_a" ($.'|'.0.a)
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.'|'.0.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "jm_obj_1_must_t" ($.'|'.1.t)
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.'|'.1.t
    result = isinstance(value, int) and not isinstance(value, bool) and value == 2
    return result

# define "jm_obj_1_must_b" ($.'|'.1.b)
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.'|'.1.b
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result



# object $.'|'.0
def jm_obj_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_0_must:  # must
            must_count += 1
            if not jm_obj_0_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2


# object $.'|'.1
def jm_obj_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_1_must:  # must
            must_count += 1
            if not jm_obj_1_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = isinstance(value, dict)
    if result:
        result = "t" in value
        if result:
            tag_0 = value["t"]
            if tag_0 in jm_map_0:
                result = jm_map_0[tag_0](value, path)
            else:
                result = False
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
jm_obj_0_must = {
    "t": jm_f_0,
    "a": jm_f_1,
}
jm_obj_1_must = {
    "t": jm_f_2,
    "b": jm_f_3,
}
jm_map_0 = {
    1: jm_obj_0,
    2: jm_obj_1,
}


