# Generated for model: ./or05.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# regex "/[0-9]/"
jm_re_0 = re.compile("[0-9]").search
# regex "/[a-z]/"
jm_re_1 = re.compile("[a-z]").search
# regex "/[A-Z]/"
jm_re_2 = re.compile("[A-Z]").search

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = isinstance(value, str)
    if result:
        # $.'|'.0
        # "/[0-9]/"
        result = jm_re_0(value) is not None
        if not result:
            # $.'|'.1
            # "/[a-z]/"
            result = jm_re_1(value) is not None
            if not result:
                # $.'|'.2
                # "/[A-Z]/"
                result = jm_re_2(value) is not None
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


