# Generated for model: ./xorob00.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

jm_obj_0_must: PropMap
jm_obj_1_must: PropMap
jm_obj_2_must: PropMap
jm_obj_3_must: PropMap
jm_obj_4_must: PropMap
jm_obj_5_must: PropMap
jm_obj_6_must: PropMap
jm_obj_7_must: PropMap

# define "jm_obj_0_must_a" ($.A.'|'.0.a)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.A.'|'.0.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "jm_obj_1_must_b" ($.A.'|'.1.b)
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.A.'|'.1.b
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "jm_obj_2_must_c" ($.B.'|'.0.c)
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.B.'|'.0.c
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "jm_obj_3_must_d" ($.B.'|'.1.d)
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.B.'|'.1.d
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "jm_obj_4_must_a" ($.'|'.0.a)
def jm_f_4(value: Jsonable, path: str) -> bool:
    # $.'|'.0.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "jm_obj_4_must_c" ($.'|'.0.c)
def jm_f_5(value: Jsonable, path: str) -> bool:
    # $.'|'.0.c
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "jm_obj_5_must_a" ($.'|'.1.a)
def jm_f_6(value: Jsonable, path: str) -> bool:
    # $.'|'.1.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "jm_obj_5_must_d" ($.'|'.1.d)
def jm_f_7(value: Jsonable, path: str) -> bool:
    # $.'|'.1.d
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "jm_obj_6_must_b" ($.'|'.2.b)
def jm_f_8(value: Jsonable, path: str) -> bool:
    # $.'|'.2.b
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "jm_obj_6_must_c" ($.'|'.2.c)
def jm_f_9(value: Jsonable, path: str) -> bool:
    # $.'|'.2.c
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "jm_obj_7_must_b" ($.'|'.3.b)
def jm_f_10(value: Jsonable, path: str) -> bool:
    # $.'|'.3.b
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "jm_obj_7_must_d" ($.'|'.3.d)
def jm_f_11(value: Jsonable, path: str) -> bool:
    # $.'|'.3.d
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result



# object $.A.'|'.0
def jm_obj_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_0_must:  # must
            must_count += 1
            if not jm_obj_0_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.A.'|'.1
def jm_obj_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_1_must:  # must
            must_count += 1
            if not jm_obj_1_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1

# define "$A" ($.A)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.A
    result = isinstance(value, dict)
    if result:
        # $.A.'|'.0
        result = jm_obj_0(value, path)
        if not result:
            # $.A.'|'.1
            result = jm_obj_1(value, path)
    return result


# object $.B.'|'.0
def jm_obj_2(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_2_must:  # must
            must_count += 1
            if not jm_obj_2_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.B.'|'.1
def jm_obj_3(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_3_must:  # must
            must_count += 1
            if not jm_obj_3_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1

# define "$B" ($.B)
def json_model_2(value: Jsonable, path: str) -> bool:
    # $.B
    result = isinstance(value, dict)
    if result:
        # $.B.'|'.0
        result = jm_obj_2(value, path)
        if not result:
            # $.B.'|'.1
            result = jm_obj_3(value, path)
    return result


# object $.'|'.0
def jm_obj_4(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_4_must:  # must
            must_count += 1
            if not jm_obj_4_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2


# object $.'|'.1
def jm_obj_5(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_5_must:  # must
            must_count += 1
            if not jm_obj_5_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2


# object $.'|'.2
def jm_obj_6(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_6_must:  # must
            must_count += 1
            if not jm_obj_6_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2


# object $.'|'.3
def jm_obj_7(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_7_must:  # must
            must_count += 1
            if not jm_obj_7_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = isinstance(value, dict)
    if result:
        # $.'|'.0
        result = jm_obj_4(value, path)
        if not result:
            # $.'|'.1
            result = jm_obj_5(value, path)
            if not result:
                # $.'|'.2
                result = jm_obj_6(value, path)
                if not result:
                    # $.'|'.3
                    result = jm_obj_7(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
jm_obj_0_must = {
    "a": jm_f_0,
}
jm_obj_1_must = {
    "b": jm_f_1,
}
jm_obj_2_must = {
    "c": jm_f_2,
}
jm_obj_3_must = {
    "d": jm_f_3,
}
jm_obj_4_must = {
    "a": jm_f_4,
    "c": jm_f_5,
}
jm_obj_5_must = {
    "a": jm_f_6,
    "d": jm_f_7,
}
jm_obj_6_must = {
    "b": jm_f_8,
    "c": jm_f_9,
}
jm_obj_7_must = {
    "b": jm_f_10,
    "d": jm_f_11,
}


