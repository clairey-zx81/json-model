#! /bin/env python
#
# Model: ./date.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False


def is_valid_date(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            datetime.date.fromisoformat(value)
            return True
        except Exception as e:
            rep is None or rep.append(f"invalid date at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for date at {path}: {_tname(value)}")
    return False

# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = is_valid_date(value, path, rep) or _rep(f"invalid $DATE at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $DATE at {path} [$]")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

