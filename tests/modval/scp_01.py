#! /bin/env python
#
# Model: ./scp_01.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

json_model_5_must: PropMap
json_model_1_must: PropMap

# define "json_model_5_must_a" ($.'$R'.a)
def jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$R'.a
    result = json_model_7(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $A at {path} [$.'$R'.a]")
    return result

# define "json_model_1_must_RA" ($.RA)
def jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.RA
    result = json_model_5(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $R at {path} [$.RA]")
    return result

# define "json_model_1_must_b" ($.b)
def jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.b
    result = json_model_3(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $B at {path} [$.b]")
    return result

# define "json_model_1_must_a" ($.a)
def jm_f_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.a
    result = json_model_7(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $R#A at {path} [$.a]")
    return result


# define "$b" ($.'$b')
def json_model_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$b'
    result = isinstance(value, str) and value == "b"
    if not result:
        rep is None or rep.append(f"not an expected _b at {path} [$.'$b']")
    return result

# define "$B" ($.'$B')
def json_model_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$B'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$B']")
    return result


# object $.'$R'
def json_model_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$R']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_5_must:  # must
            must_count += 1
            if not json_model_5_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$R'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$R']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$R']")
    return result




# object $
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_1_must:  # must
            must_count += 1
            if not json_model_1_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$]")
            return False
    result = must_count == 3
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$]")
    return result

# define "$R#A" ($.'$R#A')
def json_model_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$R#A'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$R#A']")
    return result



# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
json_model_5_must = {
    "a": jm_f_0,
}
json_model_1_must = {
    "RA": jm_f_1,
    "b": jm_f_2,
    "a": jm_f_3,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

