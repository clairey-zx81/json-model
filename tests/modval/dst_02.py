#! /bin/env python
#
# Model: ./dst_02.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

_jm_obj_0_must: PropMap
_jm_obj_1_must: PropMap
_jm_obj_2_must: PropMap
_jm_obj_3_must: PropMap
_jm_obj_4_must: PropMap
_jm_obj_5_must: PropMap

# define "_jm_obj_0_must_b" ($.'|'.0.b)
def _jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.0.b
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'|'.0.b]")
    return result

# define "_jm_obj_0_must_a" ($.'|'.0.a)
def _jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.0.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 1
    if not result:
        rep is None or rep.append(f"not a 1 int at {path} [$.'|'.0.a]")
    return result

# define "_jm_obj_0_must_d" ($.'|'.0.d)
def _jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.0.d
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'|'.0.d]")
    return result

# define "_jm_obj_1_must_b" ($.'|'.1.b)
def _jm_f_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.1.b
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'|'.1.b]")
    return result

# define "_jm_obj_1_must_a" ($.'|'.1.a)
def _jm_f_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.1.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 1
    if not result:
        rep is None or rep.append(f"not a 1 int at {path} [$.'|'.1.a]")
    return result

# define "_jm_obj_1_must_e" ($.'|'.1.e)
def _jm_f_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.1.e
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'|'.1.e]")
    return result

# define "_jm_obj_2_must_b" ($.'|'.2.b)
def _jm_f_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.2.b
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'|'.2.b]")
    return result

# define "_jm_obj_2_must_a" ($.'|'.2.a)
def _jm_f_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.2.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 1
    if not result:
        rep is None or rep.append(f"not a 1 int at {path} [$.'|'.2.a]")
    return result

# define "_jm_obj_2_must_f" ($.'|'.2.f)
def _jm_f_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.2.f
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'|'.2.f]")
    return result

# define "_jm_obj_3_must_c" ($.'|'.3.c)
def _jm_f_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.3.c
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'|'.3.c]")
    return result

# define "_jm_obj_3_must_a" ($.'|'.3.a)
def _jm_f_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.3.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 1
    if not result:
        rep is None or rep.append(f"not a 1 int at {path} [$.'|'.3.a]")
    return result

# define "_jm_obj_3_must_d" ($.'|'.3.d)
def _jm_f_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.3.d
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'|'.3.d]")
    return result

# define "_jm_obj_4_must_c" ($.'|'.4.c)
def _jm_f_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.4.c
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'|'.4.c]")
    return result

# define "_jm_obj_4_must_a" ($.'|'.4.a)
def _jm_f_13(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.4.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 1
    if not result:
        rep is None or rep.append(f"not a 1 int at {path} [$.'|'.4.a]")
    return result

# define "_jm_obj_4_must_e" ($.'|'.4.e)
def _jm_f_14(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.4.e
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'|'.4.e]")
    return result

# define "_jm_obj_5_must_c" ($.'|'.5.c)
def _jm_f_15(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.5.c
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'|'.5.c]")
    return result

# define "_jm_obj_5_must_a" ($.'|'.5.a)
def _jm_f_16(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.5.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 1
    if not result:
        rep is None or rep.append(f"not a 1 int at {path} [$.'|'.5.a]")
    return result

# define "_jm_obj_5_must_f" ($.'|'.5.f)
def _jm_f_17(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.5.f
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'|'.5.f]")
    return result



# object $.'|'.0
def _jm_obj_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.0]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_0_must:  # must
            must_count += 1
            if not _jm_obj_0_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.0.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.0]")
            return False
    result = must_count == 3
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.0]")
    return result


# object $.'|'.1
def _jm_obj_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.1]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_1_must:  # must
            must_count += 1
            if not _jm_obj_1_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.1.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.1]")
            return False
    result = must_count == 3
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.1]")
    return result


# object $.'|'.2
def _jm_obj_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.2]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_2_must:  # must
            must_count += 1
            if not _jm_obj_2_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.2.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.2]")
            return False
    result = must_count == 3
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.2]")
    return result


# object $.'|'.3
def _jm_obj_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.3]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_3_must:  # must
            must_count += 1
            if not _jm_obj_3_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.3.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.3]")
            return False
    result = must_count == 3
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.3]")
    return result


# object $.'|'.4
def _jm_obj_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.4]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_4_must:  # must
            must_count += 1
            if not _jm_obj_4_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.4.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.4]")
            return False
    result = must_count == 3
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.4]")
    return result


# object $.'|'.5
def _jm_obj_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.5]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_5_must:  # must
            must_count += 1
            if not _jm_obj_5_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.5.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.5]")
            return False
    result = must_count == 3
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.5]")
    return result

# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = isinstance(value, dict)
    if result:
        # $.'|'.0
        result = _jm_obj_0(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'|'.0]")
        if not result:
            # $.'|'.1
            result = _jm_obj_1(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected object at {path} [$.'|'.1]")
            if not result:
                # $.'|'.2
                result = _jm_obj_2(value, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected object at {path} [$.'|'.2]")
                if not result:
                    # $.'|'.3
                    result = _jm_obj_3(value, path, rep)
                    if not result:
                        rep is None or rep.append(f"not an expected object at {path} [$.'|'.3]")
                    if not result:
                        # $.'|'.4
                        result = _jm_obj_4(value, path, rep)
                        if not result:
                            rep is None or rep.append(f"not an expected object at {path} [$.'|'.4]")
                        if not result:
                            # $.'|'.5
                            result = _jm_obj_5(value, path, rep)
                            if not result:
                                rep is None or rep.append(f"not an expected object at {path} [$.'|'.5]")
        if not result:
            rep is None or rep.append(f"not any model match at {path} [$.'|']")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
_jm_obj_0_must = {
    "b": _jm_f_0,
    "a": _jm_f_1,
    "d": _jm_f_2,
}
_jm_obj_1_must = {
    "b": _jm_f_3,
    "a": _jm_f_4,
    "e": _jm_f_5,
}
_jm_obj_2_must = {
    "b": _jm_f_6,
    "a": _jm_f_7,
    "f": _jm_f_8,
}
_jm_obj_3_must = {
    "c": _jm_f_9,
    "a": _jm_f_10,
    "d": _jm_f_11,
}
_jm_obj_4_must = {
    "c": _jm_f_12,
    "a": _jm_f_13,
    "e": _jm_f_14,
}
_jm_obj_5_must = {
    "c": _jm_f_15,
    "a": _jm_f_16,
    "f": _jm_f_17,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

