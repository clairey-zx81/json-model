#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_obj_0_must: PropMap
_jm_obj_1_must: PropMap
_jm_obj_2_must: PropMap
_jm_obj_3_must: PropMap
_jm_obj_4_must: PropMap
_jm_obj_5_must: PropMap
check_model_map: PropMap

# check _jm_obj_0_must_a ($.'|'.5.a)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.5.a
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [$.'|'.5.a]", path))
    return res

# check _jm_obj_0_must_c ($.'|'.5.c)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.5.c
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'|'.5.c]", path))
    return res

# check _jm_obj_0_must_f ($.'|'.5.f)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.5.f
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'|'.5.f]", path))
    return res


# object $.'|'.5
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.5]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_must.get(prop):
            # handle 3 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_0 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'|'.5]", lpath_0 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.5]", lpath_0 if path is not None else None))
            return False
    if must_count != 3:
        rep is None or rep.append(("missing must prop [$.'|'.5]", path))
        return False
    return True

# check _jm_obj_1_must_a ($.'|'.4.a)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.4.a
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [$.'|'.4.a]", path))
    return res

# check _jm_obj_1_must_c ($.'|'.4.c)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.4.c
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'|'.4.c]", path))
    return res

# check _jm_obj_1_must_e ($.'|'.4.e)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.4.e
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'|'.4.e]", path))
    return res


# object $.'|'.4
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.4]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_1_must.get(prop):
            # handle 3 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_1 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'|'.4]", lpath_1 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.4]", lpath_1 if path is not None else None))
            return False
    if must_count != 3:
        rep is None or rep.append(("missing must prop [$.'|'.4]", path))
        return False
    return True

# check _jm_obj_2_must_a ($.'|'.3.a)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.3.a
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [$.'|'.3.a]", path))
    return res

# check _jm_obj_2_must_c ($.'|'.3.c)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.3.c
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'|'.3.c]", path))
    return res

# check _jm_obj_2_must_d ($.'|'.3.d)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.3.d
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'|'.3.d]", path))
    return res


# object $.'|'.3
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.3]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_2_must.get(prop):
            # handle 3 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_2 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'|'.3]", lpath_2 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.3]", lpath_2 if path is not None else None))
            return False
    if must_count != 3:
        rep is None or rep.append(("missing must prop [$.'|'.3]", path))
        return False
    return True

# check _jm_obj_3_must_a ($.'|'.2.a)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.2.a
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [$.'|'.2.a]", path))
    return res

# check _jm_obj_3_must_b ($.'|'.2.b)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.2.b
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'|'.2.b]", path))
    return res

# check _jm_obj_3_must_f ($.'|'.2.f)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.2.f
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'|'.2.f]", path))
    return res


# object $.'|'.2
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.2]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_3_must.get(prop):
            # handle 3 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_3 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'|'.2]", lpath_3 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.2]", lpath_3 if path is not None else None))
            return False
    if must_count != 3:
        rep is None or rep.append(("missing must prop [$.'|'.2]", path))
        return False
    return True

# check _jm_obj_4_must_a ($.'|'.1.a)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.1.a
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [$.'|'.1.a]", path))
    return res

# check _jm_obj_4_must_b ($.'|'.1.b)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.1.b
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'|'.1.b]", path))
    return res

# check _jm_obj_4_must_e ($.'|'.1.e)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.1.e
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'|'.1.e]", path))
    return res


# object $.'|'.1
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.1]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_4_must.get(prop):
            # handle 3 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_4 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'|'.1]", lpath_4 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.1]", lpath_4 if path is not None else None))
            return False
    if must_count != 3:
        rep is None or rep.append(("missing must prop [$.'|'.1]", path))
        return False
    return True

# check _jm_obj_5_must_a ($.'|'.0.a)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.0.a
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [$.'|'.0.a]", path))
    return res

# check _jm_obj_5_must_b ($.'|'.0.b)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.0.b
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'|'.0.b]", path))
    return res

# check _jm_obj_5_must_d ($.'|'.0.d)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.0.d
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'|'.0.d]", path))
    return res


# object $.'|'.0
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.0]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_5_must.get(prop):
            # handle 3 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_5 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'|'.0]", lpath_5 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.0]", lpath_5 if path is not None else None))
            return False
    if must_count != 3:
        rep is None or rep.append(("missing must prop [$.'|'.0]", path))
        return False
    return True

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'|']", path))
    if res:
        # $.'|'.0
        res = _jm_obj_5(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'|'.0]", path))
        if not res:
            # $.'|'.1
            res = _jm_obj_4(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'|'.1]", path))
            if not res:
                # $.'|'.2
                res = _jm_obj_3(val, path, rep)
                if not res:
                    rep is None or rep.append(("not an expected object at [$.'|'.2]", path))
                if not res:
                    # $.'|'.3
                    res = _jm_obj_2(val, path, rep)
                    if not res:
                        rep is None or rep.append(("not an expected object at [$.'|'.3]", path))
                    if not res:
                        # $.'|'.4
                        res = _jm_obj_1(val, path, rep)
                        if not res:
                            rep is None or rep.append(("not an expected object at [$.'|'.4]", path))
                        if not res:
                            # $.'|'.5
                            res = _jm_obj_0(val, path, rep)
                            if not res:
                                rep is None or rep.append(("not an expected object at [$.'|'.5]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_obj_0_must
        _jm_obj_0_must = {
            "a": _jm_f_0,
            "c": _jm_f_1,
            "f": _jm_f_2,
        }
        global _jm_obj_1_must
        _jm_obj_1_must = {
            "a": _jm_f_3,
            "c": _jm_f_4,
            "e": _jm_f_5,
        }
        global _jm_obj_2_must
        _jm_obj_2_must = {
            "a": _jm_f_6,
            "c": _jm_f_7,
            "d": _jm_f_8,
        }
        global _jm_obj_3_must
        _jm_obj_3_must = {
            "a": _jm_f_9,
            "b": _jm_f_10,
            "f": _jm_f_11,
        }
        global _jm_obj_4_must
        _jm_obj_4_must = {
            "a": _jm_f_12,
            "b": _jm_f_13,
            "e": _jm_f_14,
        }
        global _jm_obj_5_must
        _jm_obj_5_must = {
            "a": _jm_f_15,
            "b": _jm_f_16,
            "d": _jm_f_17,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
