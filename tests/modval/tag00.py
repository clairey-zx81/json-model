# Generated for model: ./tag00.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

json_model_1_must: PropMap
json_model_2_must: PropMap
jm_map_0: TagMap

# define "json_model_1_must_t" ($.A.t)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.A.t
    result = isinstance(value, int) and not isinstance(value, bool) and value == 1
    return result

# define "json_model_1_must_a" ($.A.a)
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.A.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_2_must_t" ($.B.t)
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.B.t
    result = isinstance(value, int) and not isinstance(value, bool) and value == 2
    return result

# define "json_model_2_must_b" ($.B.b)
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.B.b
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result



# object $.A
def json_model_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_1_must:  # must
            must_count += 1
            if not json_model_1_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2




# object $.B
def json_model_2(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_2_must:  # must
            must_count += 1
            if not json_model_2_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2



# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = isinstance(value, dict)
    if result:
        result = "t" in value
        if result:
            tag_0 = value["t"]
            if tag_0 in jm_map_0:
                result = jm_map_0[tag_0](value, path)
            else:
                result = False
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_1_must = {
    "t": jm_f_0,
    "a": jm_f_1,
}
json_model_2_must = {
    "t": jm_f_2,
    "b": jm_f_3,
}
jm_map_0 = {
    1: json_model_1,
    2: json_model_2,
}


