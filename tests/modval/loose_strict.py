#! /bin/env python
#
# Model: ./loose_strict.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

json_model_5_must: PropMap
json_model_6_must: PropMap
json_model_4_must: PropMap

# define "json_model_5_must_li" ($.'$loose'.li)
def _jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$loose'.li
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$loose'.li]")
    return result

# define "json_model_6_must_si" ($.'$strict'.si)
def _jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$strict'.si
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$strict'.si]")
    return result

# define "json_model_4_must_li" ($.'$combined'.li)
def _jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$combined'.li
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$combined'.li]")
    return result

# define "json_model_4_must_si" ($.'$combined'.si)
def _jm_f_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$combined'.si
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$combined'.si]")
    return result



# object $.'$loose'
def json_model_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$loose']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_5_must:  # must
            must_count += 1
            if not json_model_5_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$loose'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$loose']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$loose']")
    return result




# object $.'$strict'
def json_model_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$strict']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_6_must:  # must
            must_count += 1
            if not json_model_6_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$strict'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$strict']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$strict']")
    return result




# object $.'$combined'
def json_model_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$combined']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_4_must:  # must
            must_count += 1
            if not json_model_4_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$combined'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$combined']")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$combined']")
    return result



# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = json_model_4(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $combined at {path} [$]")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
json_model_5_must = {
    "li": _jm_f_0,
}
json_model_6_must = {
    "si": _jm_f_1,
}
json_model_4_must = {
    "li": _jm_f_2,
    "si": _jm_f_3,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

