# Generated for model: ./or10.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

jm_obj_1_must: PropMap

# define "jm_obj_1_must_name" ($.'|'.1.name)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.'|'.1.name
    result = isinstance(value, str)
    return result



# object $.'|'.0
def jm_obj_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # no catch all
        return False
    return True


# object $.'|'.1
def jm_obj_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_1_must:  # must
            must_count += 1
            if not jm_obj_1_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = isinstance(value, dict)
    if result:
        # $.'|'.0
        result = jm_obj_0(value, path)
        if not result:
            # $.'|'.1
            result = jm_obj_1(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
jm_obj_1_must = {
    "name": jm_f_0,
}


