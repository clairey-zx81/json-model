# Generated for model: ./hello2.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_date(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            datetime.date.fromisoformat(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False

json_model_1_must: PropMap

# define "json_model_1_must_hello" ($.'$https://github.com/clairey-zx81/json-model/raw/refs/heads/main/tests/modval/hello.model.json'.hello)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.'$https://github.com/clairey-zx81/json-model/raw/refs/heads/main/tests/modval/hello.model.json'.hello
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_1_must_world" ($.'$https://github.com/clairey-zx81/json-model/raw/refs/heads/main/tests/modval/hello.model.json'.world)
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.'$https://github.com/clairey-zx81/json-model/raw/refs/heads/main/tests/modval/hello.model.json'.world
    result = isinstance(value, bool)
    return result



# object $.'$https://github.com/clairey-zx81/json-model/raw/refs/heads/main/tests/modval/hello.model.json'
def json_model_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_1_must:  # must
            must_count += 1
            if not json_model_1_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2



# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = json_model_1(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_1_must = {
    "hello": jm_f_0,
    "world": jm_f_1,
}


