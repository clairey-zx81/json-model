# Generated for model: ./jsound.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_date(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            datetime.date.fromisoformat(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False

json_model_1_must: PropMap
json_model_1_may: PropMap
jm_f_1_may: PropMap
json_model_5_must: PropMap
json_model_5_may: PropMap
json_model_6_must: PropMap
json_model_6_may: PropMap
json_model_7_must: PropMap
json_model_7_may: PropMap
json_model_8_must: PropMap
json_model_8_may: PropMap
json_model_9_must: PropMap
json_model_9_may: PropMap

# define "json_model_1_must_types" ($.Schema.types)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.Schema.types
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_0_idx, array_0_item in enumerate(value):
            # $.Schema.types.0
            result = json_model_2(array_0_item, path)
            if not result: break
    return result

# define "jm_f_1_may_name" ($.Schema.metadata.name)
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.Schema.metadata.name
    result = isinstance(value, str)
    return result

# define "jm_f_1_may_previous" ($.Schema.metadata.previous)
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.Schema.metadata.previous
    result = isinstance(value, str)
    return result

# define "jm_f_1_may_date" ($.Schema.metadata.date)
def jm_f_4(value: Jsonable, path: str) -> bool:
    # $.Schema.metadata.date
    result = isinstance(value, str)
    return result

# define "jm_f_1_may_authors" ($.Schema.metadata.authors)
def jm_f_5(value: Jsonable, path: str) -> bool:
    # $.Schema.metadata.authors
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_1_idx, array_1_item in enumerate(value):
            # $.Schema.metadata.authors.0
            result = isinstance(array_1_item, str)
            if not result: break
    return result



# define "json_model_5_must_kind" ($.Atomic.kind)
def jm_f_6(value: Jsonable, path: str) -> bool:
    # $.Atomic.kind
    result = isinstance(value, str) and value == "atomic"
    return result

# define "json_model_5_must_baseType" ($.Atomic.baseType)
def jm_f_7(value: Jsonable, path: str) -> bool:
    # $.Atomic.baseType
    result = json_model_3(value, path)
    return result

# define "json_model_5_may_name" ($.Atomic.name)
def jm_f_8(value: Jsonable, path: str) -> bool:
    # $.Atomic.name
    result = isinstance(value, str)
    return result

# define "json_model_5_may_pattern" ($.Atomic.pattern)
def jm_f_9(value: Jsonable, path: str) -> bool:
    # $.Atomic.pattern
    result = isinstance(value, str)
    return result

# define "json_model_5_may_length" ($.Atomic.length)
def jm_f_10(value: Jsonable, path: str) -> bool:
    # $.Atomic.length
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_5_may_minLength" ($.Atomic.minLength)
def jm_f_11(value: Jsonable, path: str) -> bool:
    # $.Atomic.minLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_5_may_maxLength" ($.Atomic.maxLength)
def jm_f_12(value: Jsonable, path: str) -> bool:
    # $.Atomic.maxLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_5_may_totalDigits" ($.Atomic.totalDigits)
def jm_f_13(value: Jsonable, path: str) -> bool:
    # $.Atomic.totalDigits
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_5_may_fractionDigits" ($.Atomic.fractionDigits)
def jm_f_14(value: Jsonable, path: str) -> bool:
    # $.Atomic.fractionDigits
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_5_may_maxInclusive" ($.Atomic.maxInclusive)
def jm_f_15(value: Jsonable, path: str) -> bool:
    # $.Atomic.maxInclusive
    result = json_model_4(value, path)
    return result

# define "json_model_5_may_maxExclusive" ($.Atomic.maxExclusive)
def jm_f_16(value: Jsonable, path: str) -> bool:
    # $.Atomic.maxExclusive
    result = json_model_4(value, path)
    return result

# define "json_model_5_may_minInclusive" ($.Atomic.minInclusive)
def jm_f_17(value: Jsonable, path: str) -> bool:
    # $.Atomic.minInclusive
    result = json_model_4(value, path)
    return result

# define "json_model_5_may_minExclusive" ($.Atomic.minExclusive)
def jm_f_18(value: Jsonable, path: str) -> bool:
    # $.Atomic.minExclusive
    result = json_model_4(value, path)
    return result

# define "json_model_5_may_enumeration" ($.Atomic.enumeration)
def jm_f_19(value: Jsonable, path: str) -> bool:
    # $.Atomic.enumeration
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_2_idx, array_2_item in enumerate(value):
            # $.Atomic.enumeration.0
            result = json_model_4(array_2_item, path)
            if not result: break
    return result

# define "json_model_5_may_explicitTypeZone" ($.Atomic.explicitTypeZone)
def jm_f_20(value: Jsonable, path: str) -> bool:
    # $.Atomic.explicitTypeZone
    result = not isinstance(value, (list, dict)) and value in {'optional', 'prohibited', 'required'}
    return result

# define "json_model_6_must_kind" ($.Object.kind)
def jm_f_21(value: Jsonable, path: str) -> bool:
    # $.Object.kind
    result = isinstance(value, str) and value == "object"
    return result

# define "json_model_6_may_name" ($.Object.name)
def jm_f_22(value: Jsonable, path: str) -> bool:
    # $.Object.name
    result = isinstance(value, str)
    return result

# define "json_model_6_may_baseType" ($.Object.baseType)
def jm_f_23(value: Jsonable, path: str) -> bool:
    # $.Object.baseType
    result = isinstance(value, str)
    return result

# define "json_model_6_may_content" ($.Object.content)
def jm_f_24(value: Jsonable, path: str) -> bool:
    # $.Object.content
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_3_idx, array_3_item in enumerate(value):
            # $.Object.content.0
            result = json_model_7(array_3_item, path)
            if not result: break
    return result

# define "json_model_6_may_closed" ($.Object.closed)
def jm_f_25(value: Jsonable, path: str) -> bool:
    # $.Object.closed
    result = isinstance(value, bool)
    return result

# define "json_model_7_must_name" ($.Fields.name)
def jm_f_26(value: Jsonable, path: str) -> bool:
    # $.Fields.name
    result = isinstance(value, str)
    return result

# define "json_model_7_must_type" ($.Fields.type)
def jm_f_27(value: Jsonable, path: str) -> bool:
    # $.Fields.type
    result = json_model_10(value, path)
    return result

# define "json_model_7_may_required" ($.Fields.required)
def jm_f_28(value: Jsonable, path: str) -> bool:
    # $.Fields.required
    result = isinstance(value, bool)
    return result

# define "json_model_7_may_default" ($.Fields.default)
def jm_f_29(value: Jsonable, path: str) -> bool:
    # $.Fields.default
    result = True
    return result

# define "json_model_7_may_unique" ($.Fields.unique)
def jm_f_30(value: Jsonable, path: str) -> bool:
    # $.Fields.unique
    result = isinstance(value, bool)
    return result

# define "json_model_8_must_kind" ($.Array.kind)
def jm_f_31(value: Jsonable, path: str) -> bool:
    # $.Array.kind
    result = isinstance(value, str) and value == "array"
    return result

# define "json_model_8_may_name" ($.Array.name)
def jm_f_32(value: Jsonable, path: str) -> bool:
    # $.Array.name
    result = isinstance(value, str)
    return result

# define "json_model_8_may_baseType" ($.Array.baseType)
def jm_f_33(value: Jsonable, path: str) -> bool:
    # $.Array.baseType
    result = isinstance(value, str)
    return result

# define "json_model_8_may_content" ($.Array.content)
def jm_f_34(value: Jsonable, path: str) -> bool:
    # $.Array.content
    result = json_model_10(value, path)
    return result

# define "json_model_8_may_minLength" ($.Array.minLength)
def jm_f_35(value: Jsonable, path: str) -> bool:
    # $.Array.minLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_8_may_maxLength" ($.Array.maxLength)
def jm_f_36(value: Jsonable, path: str) -> bool:
    # $.Array.maxLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_9_must_name" ($.Union.name)
def jm_f_37(value: Jsonable, path: str) -> bool:
    # $.Union.name
    result = isinstance(value, str)
    return result

# define "json_model_9_must_kind" ($.Union.kind)
def jm_f_38(value: Jsonable, path: str) -> bool:
    # $.Union.kind
    result = isinstance(value, str) and value == "union"
    return result

# define "json_model_9_must_content" ($.Union.content)
def jm_f_39(value: Jsonable, path: str) -> bool:
    # $.Union.content
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_4_idx, array_4_item in enumerate(value):
            # $.Union.content.0
            result = json_model_10(array_4_item, path)
            if not result: break
    return result

# define "json_model_9_may_baseType" ($.Union.baseType)
def jm_f_40(value: Jsonable, path: str) -> bool:
    # $.Union.baseType
    result = isinstance(value, str)
    return result



# object $.Schema.metadata
def jm_f_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_1_may:  # may
            if not jm_f_1_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True


# object $.Schema
def json_model_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_1_must:  # must
            must_count += 1
            if not json_model_1_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_1_may:  # may
            if not json_model_1_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1



# define "$Type" ($.Type)
def json_model_2(value: Jsonable, path: str) -> bool:
    # $.Type
    # $.Type.'|'.0
    result = json_model_5(value, path)
    if not result:
        # $.Type.'|'.1
        result = json_model_6(value, path)
        if not result:
            # $.Type.'|'.2
            result = json_model_8(value, path)
            if not result:
                # $.Type.'|'.3
                result = json_model_9(value, path)
    return result

# define "$atomic-types" ($.'atomic-types')
def json_model_3(value: Jsonable, path: str) -> bool:
    # $.'atomic-types'
    result = not isinstance(value, (list, dict)) and value in {'anyURI', 'base64Binary', 'boolean', 'date', 'dateTime', 'dateTimeStamp', 'decimal', 'double', 'duration', 'hexBinary', 'integer', 'null', 'string', 'time'}
    return result

# define "$atomic" ($.atomic)
def json_model_4(value: Jsonable, path: str) -> bool:
    # $.atomic
    # $.atomic.'|'.0
    result = value is None
    if not result:
        # $.atomic.'|'.1
        result = isinstance(value, bool)
        if not result:
            # $.atomic.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool)
            if not result:
                # $.atomic.'|'.3
                result = isinstance(value, float)
                if not result:
                    # $.atomic.'|'.4
                    result = isinstance(value, str)
    return result


# object $.Atomic
def json_model_5(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_5_must:  # must
            must_count += 1
            if not json_model_5_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_5_may:  # may
            if not json_model_5_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2




# object $.Object
def json_model_6(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_6_must:  # must
            must_count += 1
            if not json_model_6_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_6_may:  # may
            if not json_model_6_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Fields
def json_model_7(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_7_must:  # must
            must_count += 1
            if not json_model_7_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_7_may:  # may
            if not json_model_7_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2




# object $.Array
def json_model_8(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_8_must:  # must
            must_count += 1
            if not json_model_8_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_8_may:  # may
            if not json_model_8_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Union
def json_model_9(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_9_must:  # must
            must_count += 1
            if not json_model_9_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_9_may:  # may
            if not json_model_9_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 3



# define "$type-or-ref" ($.'type-or-ref')
def json_model_10(value: Jsonable, path: str) -> bool:
    # $.'type-or-ref'
    # $.'type-or-ref'.'|'.0
    result = isinstance(value, str)
    if not result:
        # $.'type-or-ref'.'|'.1
        result = json_model_2(value, path)
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = json_model_1(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_1_must = {
    "types": jm_f_0,
}
json_model_1_may = {
    "metadata": jm_f_1,
}
jm_f_1_may = {
    "name": jm_f_2,
    "previous": jm_f_3,
    "date": jm_f_4,
    "authors": jm_f_5,
}
json_model_5_must = {
    "kind": jm_f_6,
    "baseType": jm_f_7,
}
json_model_5_may = {
    "name": jm_f_8,
    "pattern": jm_f_9,
    "length": jm_f_10,
    "minLength": jm_f_11,
    "maxLength": jm_f_12,
    "totalDigits": jm_f_13,
    "fractionDigits": jm_f_14,
    "maxInclusive": jm_f_15,
    "maxExclusive": jm_f_16,
    "minInclusive": jm_f_17,
    "minExclusive": jm_f_18,
    "enumeration": jm_f_19,
    "explicitTypeZone": jm_f_20,
}
json_model_6_must = {
    "kind": jm_f_21,
}
json_model_6_may = {
    "name": jm_f_22,
    "baseType": jm_f_23,
    "content": jm_f_24,
    "closed": jm_f_25,
}
json_model_7_must = {
    "name": jm_f_26,
    "type": jm_f_27,
}
json_model_7_may = {
    "required": jm_f_28,
    "default": jm_f_29,
    "unique": jm_f_30,
}
json_model_8_must = {
    "kind": jm_f_31,
}
json_model_8_may = {
    "name": jm_f_32,
    "baseType": jm_f_33,
    "content": jm_f_34,
    "minLength": jm_f_35,
    "maxLength": jm_f_36,
}
json_model_9_must = {
    "name": jm_f_37,
    "kind": jm_f_38,
    "content": jm_f_39,
}
json_model_9_may = {
    "baseType": jm_f_40,
}


