#! /bin/env python
#
# Model: ./ex_05.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False


# define "$EX05a" ($.'$EX05a')
def json_model_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$EX05a'
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$EX05a']")
    return result

# define "$EX05b" ($.'$EX05b')
def json_model_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$EX05b'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$EX05b']")
    return result

# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    # $.'|'.0
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $EX05a at {path} [$.'|'.0]")
    if not result:
        # $.'|'.1
        result = json_model_3(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $EX05b at {path} [$.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'|']")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

