#! /bin/env python
#
# Model: ./dis_04.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

_jm_obj_0_must: PropMap
_jm_obj_1_must: PropMap
_jm_obj_2_must: PropMap
_jm_obj_3_must: PropMap
_jm_obj_4_must: PropMap
_jm_obj_5_must: PropMap
# regex "/./s"
_jm_re_0 = lambda s: len(s) > 0 or None

# define "_jm_obj_0_must_t" ($.'|'.0.t)
def _jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.0.t
    result = value is None
    if not result:
        rep is None or rep.append(f"not an expected =null at {path} [$.'|'.0.t]")
    return result

# define "_jm_obj_0_must_v" ($.'|'.0.v)
def _jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.0.v
    result = value is None
    if not result:
        rep is None or rep.append(f"not null at {path} [$.'|'.0.v]")
    return result

# define "_jm_obj_1_must_t" ($.'|'.1.t)
def _jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.1.t
    result = isinstance(value, bool) and value == True
    if not result:
        rep is None or rep.append(f"not an expected =true at {path} [$.'|'.1.t]")
    return result

# define "_jm_obj_1_must_v" ($.'|'.1.v)
def _jm_f_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.1.v
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'|'.1.v]")
    return result

# define "_jm_obj_2_must_t" ($.'|'.2.t)
def _jm_f_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.2.t
    result = isinstance(value, int) and not isinstance(value, bool) and value == 0
    if not result:
        rep is None or rep.append(f"not an expected =0 at {path} [$.'|'.2.t]")
    return result

# define "_jm_obj_2_must_v" ($.'|'.2.v)
def _jm_f_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.2.v
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'|'.2.v]")
    return result

# define "_jm_obj_3_must_t" ($.'|'.3.t)
def _jm_f_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.3.t
    result = isinstance(value, float) and value == 0.0
    if not result:
        rep is None or rep.append(f"not an expected =0.0 at {path} [$.'|'.3.t]")
    return result

# define "_jm_obj_3_must_v" ($.'|'.3.v)
def _jm_f_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.3.v
    result = isinstance(value, float) and value >= 0.0
    if not result:
        rep is None or rep.append(f"not a 0.0 float at {path} [$.'|'.3.v]")
    return result

# define "_jm_obj_4_must_t" ($.'|'.4.t)
def _jm_f_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.4.t
    result = isinstance(value, str) and value == "s"
    if not result:
        rep is None or rep.append(f"not an expected s at {path} [$.'|'.4.t]")
    return result

# define "_jm_obj_4_must_v" ($.'|'.4.v)
def _jm_f_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.4.v
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'|'.4.v]")
    return result

# define "_jm_obj_5_must_t" ($.'|'.5.t)
def _jm_f_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.5.t
    result = isinstance(value, str) and value == "t"
    if not result:
        rep is None or rep.append(f"not an expected t at {path} [$.'|'.5.t]")
    return result

# define "_jm_obj_5_must_v" ($.'|'.5.v)
def _jm_f_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'|'.5.v
    # "/./s"
    result = isinstance(value, str) and _jm_re_0(value) is not None or _rep(f"does not match FESC at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected REGEX at {path} [$.'|'.5.v]")
    return result



# object $.'|'.0
def _jm_obj_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.0]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_0_must:  # must
            must_count += 1
            if not _jm_obj_0_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.0.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.0]")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.0]")
    return result


# object $.'|'.1
def _jm_obj_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.1]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_1_must:  # must
            must_count += 1
            if not _jm_obj_1_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.1.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.1]")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.1]")
    return result


# object $.'|'.2
def _jm_obj_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.2]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_2_must:  # must
            must_count += 1
            if not _jm_obj_2_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.2.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.2]")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.2]")
    return result


# object $.'|'.3
def _jm_obj_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.3]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_3_must:  # must
            must_count += 1
            if not _jm_obj_3_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.3.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.3]")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.3]")
    return result


# object $.'|'.4
def _jm_obj_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.4]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_4_must:  # must
            must_count += 1
            if not _jm_obj_4_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.4.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.4]")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.4]")
    return result


# object $.'|'.5
def _jm_obj_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'|'.5]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_5_must:  # must
            must_count += 1
            if not _jm_obj_5_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'|'.5.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'|'.5]")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'|'.5]")
    return result

# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = isinstance(value, dict)
    if result:
        # $.'|'.0
        result = _jm_obj_0(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'|'.0]")
        if not result:
            # $.'|'.1
            result = _jm_obj_1(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected object at {path} [$.'|'.1]")
            if not result:
                # $.'|'.2
                result = _jm_obj_2(value, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected object at {path} [$.'|'.2]")
                if not result:
                    # $.'|'.3
                    result = _jm_obj_3(value, path, rep)
                    if not result:
                        rep is None or rep.append(f"not an expected object at {path} [$.'|'.3]")
                    if not result:
                        # $.'|'.4
                        result = _jm_obj_4(value, path, rep)
                        if not result:
                            rep is None or rep.append(f"not an expected object at {path} [$.'|'.4]")
                        if not result:
                            # $.'|'.5
                            result = _jm_obj_5(value, path, rep)
                            if not result:
                                rep is None or rep.append(f"not an expected object at {path} [$.'|'.5]")
        if not result:
            rep is None or rep.append(f"not any model match at {path} [$.'|']")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
_jm_obj_0_must = {
    "t": _jm_f_0,
    "v": _jm_f_1,
}
_jm_obj_1_must = {
    "t": _jm_f_2,
    "v": _jm_f_3,
}
_jm_obj_2_must = {
    "t": _jm_f_4,
    "v": _jm_f_5,
}
_jm_obj_3_must = {
    "t": _jm_f_6,
    "v": _jm_f_7,
}
_jm_obj_4_must = {
    "t": _jm_f_8,
    "v": _jm_f_9,
}
_jm_obj_5_must = {
    "t": _jm_f_10,
    "v": _jm_f_11,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

