# Generated for model: ./enum02.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_date(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            datetime.date.fromisoformat(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False


# define "$p1" ($.p1)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.p1
    result = not isinstance(value, (list, dict)) and value in {'Calvin', 'Hobbes', 'Moe', 'Susie'}
    return result

# define "$p2" ($.p2)
def json_model_2(value: Jsonable, path: str) -> bool:
    # $.p2
    result = not isinstance(value, (list, dict)) and value in {'Castafiore', 'Haddock', 'Milou', 'Tintin'}
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    xc_0 = 0
    if xc_0 <= 1:
        # $.'^'.0
        xr_0 = json_model_1(value, path)
        if xr_0: xc_0 += 1
    if xc_0 <= 1:
        # $.'^'.1
        xr_0 = json_model_2(value, path)
        if xr_0: xc_0 += 1
    result = xc_0 == 1
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


