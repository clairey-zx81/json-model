#! /bin/env python
#
# Model: ./enum02.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False


# define "$p1" ($.'$p1')
def json_model_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$p1'
    result = not isinstance(value, (list, dict)) and value in {'Calvin', 'Hobbes', 'Moe', 'Susie'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$p1'.'|']")
    return result

# define "$p2" ($.'$p2')
def json_model_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$p2'
    result = not isinstance(value, (list, dict)) and value in {'Castafiore', 'Haddock', 'Milou', 'Tintin'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$p2'.'|']")
    return result

# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    xc_0 = 0
    if xc_0 <= 1:
        # $.'^'.0
        xr_0 = json_model_2(value, path, rep)
        if not xr_0:
            rep is None or rep.append(f"not an expected $p1 at {path} [$.'^'.0]")
        if xr_0: xc_0 += 1
    if xc_0 <= 1:
        # $.'^'.1
        xr_0 = json_model_3(value, path, rep)
        if not xr_0:
            rep is None or rep.append(f"not an expected $p2 at {path} [$.'^'.1]")
        if xr_0: xc_0 += 1
    result = xc_0 == 1
    if not result:
        rep is None or rep.append(f"not one model match at {path} [$.'^']")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

