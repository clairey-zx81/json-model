#! /bin/env python
#
# Model: ./re_3.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

json_model_1_may: PropMap
# regex "/.*/"
jm_re_0 = lambda _s: True
# regex "/./s"
jm_re_1 = lambda s: len(s) > 0 or None
# regex "/./"
jm_re_2 = re.compile(".").search

# define "json_model_1_may_all" ($.all)
def jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.all
    # "/.*/"
    result = isinstance(value, str) and jm_re_0(value) is not None or _rep(f"does not match FESC at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected REGEX at {path} [$.all]")
    return result

# define "json_model_1_may_nz" ($.nz)
def jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.nz
    # "/./s"
    result = isinstance(value, str) and jm_re_1(value) is not None or _rep(f"does not match FESC at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected REGEX at {path} [$.nz]")
    return result

# define "json_model_1_may_some" ($.some)
def jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.some
    # "/./"
    result = isinstance(value, str) and jm_re_2(value) is not None or _rep(f"does not match FESC at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected REGEX at {path} [$.some]")
    return result



# object $
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_1_may:  # may
            if not json_model_1_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$]")
            return False
    return True



# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
json_model_1_may = {
    "all": jm_f_0,
    "nz": jm_f_1,
    "some": jm_f_2,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

