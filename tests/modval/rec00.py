# Generated for model: ./rec00.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]



# object $.obj
def json_model_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.obj.''
        result = json_model_2(model, path)
        if not result: return False
    return True



# define "$rec" ($.rec)
def json_model_2(value: Jsonable, path: str) -> bool:
    # $.rec
    # $.rec.'|'.0
    result = isinstance(value, bool)
    if not result:
        # $.rec.'|'.1
        result = json_model_1(value, path)
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = json_model_2(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


