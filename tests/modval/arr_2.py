# Generated for model: ./arr_2.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False


# define "$" ($)
def json_model_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = isinstance(value, list) and len(value) == 2
    if result:
        # $.0
        result = isinstance(value[0], bool)
        if not result:
            rep is None or rep.append(f"not a bool at {path[0]} [$.0]")
        if result:
            # $.1
            result = isinstance(value[1], int) and not isinstance(value[1], bool) and value[1] >= 0
            if not result:
                rep is None or rep.append(f"not a 0 int at {path[1]} [$.1]")
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$]")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_0(value, path, rep)


