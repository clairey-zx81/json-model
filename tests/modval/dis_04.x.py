#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
__version__ = "2.0a0"
#
# type declarations for python jm runtime
#
type JsonScalar = None|bool|int|float|str
type Jsonable = JsonScalar|list[Jsonable]|dict[str, Jsonable]

type Path = list[int|str]|None
type Report = list[tuple[str, Path]]|None

type CheckFun = Callable[[Jsonable, Path, Report], bool]
type RegexFun = Callable[[str], bool]
type PropMap = dict[str, CheckFun]

type EntryCheckFun = Callable[[Jsonable, str, Report], bool]
from typing import Callable
import datetime
import urllib.parse

# call initialize only once
initialized: bool = False

# special undefined value
UNDEFINED: object = object()

# map model names to check functions
_check_model_map_size: int
_check_model_map: PropMap

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

# generate path for display
# TODO add appropriate escapingâ€¦
def _path(path: Path) -> str:
    return ".".join(str(i) for i in path)

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return _check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in _check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = _check_model_map[name]
    return checker(val, [], rep)

# types: JsonScalar

from collections.abc import MutableMapping, MutableSet

class Const:
    """A constant holder suitable for set/dict, with a stricly typed comparison.

    The point is to avoid 1 == 1.0 == True, 0 == 0.0 == False, n == n.0
    """

    def __init__(self, val: JsonScalar):
        self._val = val

    def __hash__(self):
        return hash(self._val)

    def __eq__(self, val):
        return (
            isinstance(val, Const) and
            type(self._val) is type(val._val) and
            self._val == val._val
        )


class ConstSet(MutableSet[JsonScalar]):
    """A set of constants, with strictly typed comparisons."""

    def __init__(self, init: list[JsonScalar]|str|None = None):
        self._set: set[Const] = set()
        if init:
            for item in init:
                self.add(item)

    def __len__(self):
        return len(self._set)

    def __iter__(self):
        return [ item._val for item in self._set ]

    def __contains__(self, item):
        return Const(item) in self._set

    def add(self, item):
        self._set.add(Const(item))

    def discard(self, item):
        self._set.discard(Const(item))


class ConstMap(MutableMapping[JsonScalar, CheckFun]):
    """A mapping of constants to check functions."""

    def __init__(self):
        self._map: dict[Const, CheckFun] = {}

    def __setitem__(self, key, val):
        self._map[Const(key)] = val

    def __getitem__(self, key):
        if isinstance(key, (list, dict)):
            return UNDEFINED
        else:
            return self._map[Const(key)]

    def __delitem__(self, key):
        del self._map[Const(key)]

    def __iter__(self):
        return [ (k._val, v) for k, v in self._map.items() ]

    def __len__(self):
        return self._map.__len__()

_jm_obj_0_must: PropMap
_jm_obj_1_must: PropMap
_jm_obj_2_must: PropMap
_jm_obj_3_must: PropMap
_jm_obj_4_must: PropMap
_jm_obj_5_must: PropMap
_check_model_map: PropMap

# check _jm_obj_0_must_t ($.'|'.5.t)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.5.t
    res = isinstance(val, str) and val == "t"
    if not res:
        rep is None or rep.append(("unexpected t [$.'|'.5.t]", path))
    return res

# check _jm_obj_0_must_v ($.'|'.5.v)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.5.v
    # "/./s"
    res = isinstance(val, str) and len(val) > 0
    if not res:
        rep is None or rep.append(("unexpected REGEX [$.'|'.5.v]", path))
    return res


# object $.'|'.5
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.5]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_0 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'|'.5]", lpath_0 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.5]", lpath_0 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'|'.5]", path))
        return False
    return True

# check _jm_obj_1_must_t ($.'|'.4.t)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.4.t
    res = isinstance(val, str) and val == "s"
    if not res:
        rep is None or rep.append(("unexpected s [$.'|'.4.t]", path))
    return res

# check _jm_obj_1_must_v ($.'|'.4.v)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.4.v
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'|'.4.v]", path))
    return res


# object $.'|'.4
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.4]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_1_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_1 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'|'.4]", lpath_1 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.4]", lpath_1 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'|'.4]", path))
        return False
    return True

# check _jm_obj_2_must_t ($.'|'.3.t)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.3.t
    res = isinstance(val, float) and val == 0.0
    if not res:
        rep is None or rep.append(("unexpected =0.0 [$.'|'.3.t]", path))
    return res

# check _jm_obj_2_must_v ($.'|'.3.v)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.3.v
    res = isinstance(val, float) and val >= 0.0
    if not res:
        rep is None or rep.append(("not a 0.0 float [$.'|'.3.v]", path))
    return res


# object $.'|'.3
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.3]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_2_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_2 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'|'.3]", lpath_2 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.3]", lpath_2 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'|'.3]", path))
        return False
    return True

# check _jm_obj_3_must_t ($.'|'.2.t)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.2.t
    res = isinstance(val, int) and not isinstance(val, bool) and val == 0
    if not res:
        rep is None or rep.append(("unexpected =0 [$.'|'.2.t]", path))
    return res

# check _jm_obj_3_must_v ($.'|'.2.v)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.2.v
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 int [$.'|'.2.v]", path))
    return res


# object $.'|'.2
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.2]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_3_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_3 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'|'.2]", lpath_3 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.2]", lpath_3 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'|'.2]", path))
        return False
    return True

# check _jm_obj_4_must_t ($.'|'.1.t)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.1.t
    res = isinstance(val, bool) and val == True
    if not res:
        rep is None or rep.append(("unexpected =true [$.'|'.1.t]", path))
    return res

# check _jm_obj_4_must_v ($.'|'.1.v)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.1.v
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'|'.1.v]", path))
    return res


# object $.'|'.1
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.1]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_4_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_4 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'|'.1]", lpath_4 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.1]", lpath_4 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'|'.1]", path))
        return False
    return True

# check _jm_obj_5_must_t ($.'|'.0.t)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.0.t
    res = val is None
    if not res:
        rep is None or rep.append(("unexpected =null [$.'|'.0.t]", path))
    return res

# check _jm_obj_5_must_v ($.'|'.0.v)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'|'.0.v
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.'|'.0.v]", path))
    return res


# object $.'|'.0
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.0]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_5_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_5 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'|'.0]", lpath_5 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.0]", lpath_5 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'|'.0]", path))
        return False
    return True

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'|']", path))
    if res:
        # $.'|'.0
        res = _jm_obj_5(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'|'.0]", path))
        if not res:
            # $.'|'.1
            res = _jm_obj_4(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'|'.1]", path))
            if not res:
                # $.'|'.2
                res = _jm_obj_3(val, path, rep)
                if not res:
                    rep is None or rep.append(("not an expected object at [$.'|'.2]", path))
                if not res:
                    # $.'|'.3
                    res = _jm_obj_2(val, path, rep)
                    if not res:
                        rep is None or rep.append(("not an expected object at [$.'|'.3]", path))
                    if not res:
                        # $.'|'.4
                        res = _jm_obj_1(val, path, rep)
                        if not res:
                            rep is None or rep.append(("not an expected object at [$.'|'.4]", path))
                        if not res:
                            # $.'|'.5
                            res = _jm_obj_0(val, path, rep)
                            if not res:
                                rep is None or rep.append(("not an expected object at [$.'|'.5]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'|']", path))
    return res


# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_obj_0_must
        _jm_obj_0_must = {
            "t": _jm_f_0,
            "v": _jm_f_1,
        }
        global _jm_obj_1_must
        _jm_obj_1_must = {
            "t": _jm_f_2,
            "v": _jm_f_3,
        }
        global _jm_obj_2_must
        _jm_obj_2_must = {
            "t": _jm_f_4,
            "v": _jm_f_5,
        }
        global _jm_obj_3_must
        _jm_obj_3_must = {
            "t": _jm_f_6,
            "v": _jm_f_7,
        }
        global _jm_obj_4_must
        _jm_obj_4_must = {
            "t": _jm_f_8,
            "v": _jm_f_9,
        }
        global _jm_obj_5_must
        _jm_obj_5_must = {
            "t": _jm_f_10,
            "v": _jm_f_11,
        }
        global _check_model_map
        _check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    import argparse
    import logging

    logging.basicConfig()
    log = logging.getLogger("checker")

    ap = argparse.ArgumentParser()
    ap.add_argument("--debug", "-d", action="store_true", help="set verbose mode")
    ap.add_argument("--name", "-n", default="", help="select model by name")
    ap.add_argument("--list", "-l", action="store_true", help="show available model names and exit")
    ap.add_argument("--version", "-v", action="store_true", help="show JSON Model compiler version")
    ap.add_argument("--report", "-r", action="store_true", help="show error locations on failure")
    ap.add_argument("values", nargs="*", help="JSON files")
    args = ap.parse_args()

    log.setLevel(logging.DEBUG if args.debug else logging.INFO)

    check_model_init()

    if args.list:
        print(f"JSON Models (empty for root):{' '.join(sorted(_json_model_map.keys()))}")
        sys.exit(0)
    if args.version:
        print(f"Python from JSON Model compiler version {__version__}")
        sys.exit(0)

    try:
        checker: CheckFun = check_model_fun(args.name)
    except Exception as e:
        log.debug(e, exc_info=args.debug)
        log.error(f"error on model for {args.name}: {e}")
        sys.exit(1)

    for fn in args.values:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = [] if args.report else None
            path = [] if args.report else None
            if checker(value, path, reasons):
                print(f"{fn}: PASS")
            elif reasons:
                print(f"{fn}: FAIL {reasons}")
            else:
                print(f"{fn}: FAIL")
        except Exception as e:
            log.debug(e, exc_info=args.debug)
            print(f"{fn}: ERROR ({e})")

    check_model_free()
