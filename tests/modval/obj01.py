#! /bin/env python
#
# Model: ./obj01.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

json_model_1_must: PropMap
json_model_1_may: PropMap
# regex "/^\\d+$/"
_jm_re_0 = re.compile("^\\d+$").search

def _is_valid_date(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            datetime.date.fromisoformat(value)
            return True
        except Exception as e:
            rep is None or rep.append(f"invalid date at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for date at {path}: {_tname(value)}")
    return False

# define "json_model_1_must_foo" ($.foo)
def _jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.foo
    result = _is_valid_date(value, path, rep) or _rep(f"invalid $DATE at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $DATE at {path} [$.foo]")
    return result

# define "json_model_1_may_bla" ($.bla)
def _jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.bla
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.bla]")
    return result


# define "$XXX" ($.'$XXX')
def json_model_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$XXX'
    result = not isinstance(value, (list, dict)) and value in {'X', 'XX', 'XXX'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$XXX'.'|']")
    return result


# object $
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_1_must:  # must
            must_count += 1
            if not json_model_1_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.{prop}]")
                return False
        elif prop in json_model_1_may:  # may
            if not json_model_1_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.{prop}]")
                return False
        elif json_model_2(prop, path, rep) or _rep(f"prop {prop} does not match $XXX at {path}", rep):  # $XXX
            # $.'$XXX'
            result = isinstance(val, float) and val >= 0.0
            if not result:
                rep is None or rep.append(f"not a 0.0 float at {lpath} [$.'$XXX']")
            if not result:
                return False
        elif _jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\d+$/
            # $.'/^\\d+$/'
            result = isinstance(val, int) and not isinstance(val, bool) and val >= 0
            if not result:
                rep is None or rep.append(f"not a 0 int at {lpath} [$.'/^\\d+$/']")
            if not result:
                return False
        else:  # catch all
            # $.''
            result = val is None
            if not result:
                rep is None or rep.append(f"not null at {lpath} [$.'']")
            if not result:
                rep is None or rep.append(f"unexpected other value at {lpath} [$.'']")
                return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$]")
    return result



# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
json_model_1_must = {
    "foo": _jm_f_0,
}
json_model_1_may = {
    "bla": _jm_f_1,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

