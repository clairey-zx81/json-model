# Generated for model: ./geo.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_date(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            datetime.date.fromisoformat(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False

json_model_4_must: PropMap
json_model_4_may: PropMap
json_model_5_must: PropMap
json_model_5_may: PropMap
json_model_6_must: PropMap
json_model_6_may: PropMap
json_model_7_must: PropMap
json_model_7_may: PropMap
json_model_8_must: PropMap
json_model_8_may: PropMap
json_model_9_must: PropMap
json_model_9_may: PropMap
jm_map_0: TagMap
json_model_11_must: PropMap
json_model_11_may: PropMap
json_model_12_must: PropMap
json_model_12_may: PropMap
json_model_13_must: PropMap
json_model_13_may: PropMap

# define "json_model_4_must_type" ($.Point.type)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.Point.type
    result = isinstance(value, str) and value == "Point"
    return result

# define "json_model_4_must_coordinates" ($.Point.coordinates)
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.Point.coordinates
    result = json_model_1(value, path)
    return result

# define "json_model_4_may_bbox" ($.Point.bbox)
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.Point.bbox
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_3_idx, array_3_item in enumerate(value):
            # $.Point.bbox.0
            result = isinstance(array_3_item, float)
            if not result: break
    return result

# define "json_model_5_must_type" ($.MultiPoint.type)
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.MultiPoint.type
    result = isinstance(value, str) and value == "MultiPoint"
    return result

# define "json_model_5_must_coordinates" ($.MultiPoint.coordinates)
def jm_f_4(value: Jsonable, path: str) -> bool:
    # $.MultiPoint.coordinates
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_4_idx, array_4_item in enumerate(value):
            # $.MultiPoint.coordinates.0
            result = json_model_1(array_4_item, path)
            if not result: break
    return result

# define "json_model_5_may_bbox" ($.MultiPoint.bbox)
def jm_f_5(value: Jsonable, path: str) -> bool:
    # $.MultiPoint.bbox
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_5_idx, array_5_item in enumerate(value):
            # $.MultiPoint.bbox.0
            result = isinstance(array_5_item, float)
            if not result: break
    return result

# define "json_model_6_must_type" ($.LineString.type)
def jm_f_6(value: Jsonable, path: str) -> bool:
    # $.LineString.type
    result = isinstance(value, str) and value == "LineString"
    return result

# define "json_model_6_must_coordinates" ($.LineString.coordinates)
def jm_f_7(value: Jsonable, path: str) -> bool:
    # $.LineString.coordinates
    result = json_model_2(value, path)
    return result

# define "json_model_6_may_bbox" ($.LineString.bbox)
def jm_f_8(value: Jsonable, path: str) -> bool:
    # $.LineString.bbox
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_6_idx, array_6_item in enumerate(value):
            # $.LineString.bbox.0
            result = isinstance(array_6_item, float)
            if not result: break
    return result

# define "json_model_7_must_type" ($.MultiLineString.type)
def jm_f_9(value: Jsonable, path: str) -> bool:
    # $.MultiLineString.type
    result = isinstance(value, str) and value == "MultiLineString"
    return result

# define "json_model_7_must_coordinates" ($.MultiLineString.coordinates)
def jm_f_10(value: Jsonable, path: str) -> bool:
    # $.MultiLineString.coordinates
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_7_idx, array_7_item in enumerate(value):
            # $.MultiLineString.coordinates.0
            result = json_model_2(array_7_item, path)
            if not result: break
    return result

# define "json_model_7_may_bbox" ($.MultiLineString.bbox)
def jm_f_11(value: Jsonable, path: str) -> bool:
    # $.MultiLineString.bbox
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_8_idx, array_8_item in enumerate(value):
            # $.MultiLineString.bbox.0
            result = isinstance(array_8_item, float)
            if not result: break
    return result

# define "json_model_8_must_type" ($.Polygon.type)
def jm_f_12(value: Jsonable, path: str) -> bool:
    # $.Polygon.type
    result = isinstance(value, str) and value == "Polygon"
    return result

# define "json_model_8_must_coordinates" ($.Polygon.coordinates)
def jm_f_13(value: Jsonable, path: str) -> bool:
    # $.Polygon.coordinates
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_9_idx, array_9_item in enumerate(value):
            # $.Polygon.coordinates.0
            result = json_model_3(array_9_item, path)
            if not result: break
    return result

# define "json_model_8_may_bbox" ($.Polygon.bbox)
def jm_f_14(value: Jsonable, path: str) -> bool:
    # $.Polygon.bbox
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_10_idx, array_10_item in enumerate(value):
            # $.Polygon.bbox.0
            result = isinstance(array_10_item, float)
            if not result: break
    return result

# define "json_model_9_must_type" ($.MultiPolygon.type)
def jm_f_15(value: Jsonable, path: str) -> bool:
    # $.MultiPolygon.type
    result = isinstance(value, str) and value == "MultiPolygon"
    return result

# define "json_model_9_must_coordinates" ($.MultiPolygon.coordinates)
def jm_f_16(value: Jsonable, path: str) -> bool:
    # $.MultiPolygon.coordinates
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_11_idx, array_11_item in enumerate(value):
            # $.MultiPolygon.coordinates.0
            result = isinstance(array_11_item, list)
            if result:
                assert isinstance(array_11_item, list)  # pyright helper
                for array_12_idx, array_12_item in enumerate(array_11_item):
                    # $.MultiPolygon.coordinates.0.0
                    result = json_model_3(array_12_item, path)
                    if not result: break
            if not result: break
    return result

# define "json_model_9_may_bbox" ($.MultiPolygon.bbox)
def jm_f_17(value: Jsonable, path: str) -> bool:
    # $.MultiPolygon.bbox
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_13_idx, array_13_item in enumerate(value):
            # $.MultiPolygon.bbox.0
            result = isinstance(array_13_item, float)
            if not result: break
    return result

# define "json_model_11_must_type" ($.GeometryCollection.type)
def jm_f_18(value: Jsonable, path: str) -> bool:
    # $.GeometryCollection.type
    result = isinstance(value, str) and value == "GeometryCollection"
    return result

# define "json_model_11_must_geometries" ($.GeometryCollection.geometries)
def jm_f_19(value: Jsonable, path: str) -> bool:
    # $.GeometryCollection.geometries
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_14_idx, array_14_item in enumerate(value):
            # $.GeometryCollection.geometries.0
            result = json_model_10(array_14_item, path)
            if not result: break
    return result

# define "json_model_11_may_bbox" ($.GeometryCollection.bbox)
def jm_f_20(value: Jsonable, path: str) -> bool:
    # $.GeometryCollection.bbox
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_15_idx, array_15_item in enumerate(value):
            # $.GeometryCollection.bbox.0
            result = isinstance(array_15_item, float)
            if not result: break
    return result

# define "json_model_12_must_type" ($.Feature.type)
def jm_f_21(value: Jsonable, path: str) -> bool:
    # $.Feature.type
    result = isinstance(value, str) and value == "Feature"
    return result

# define "json_model_12_must_geometry" ($.Feature.geometry)
def jm_f_22(value: Jsonable, path: str) -> bool:
    # $.Feature.geometry
    # $.Feature.geometry.'|'.0
    result = value is None
    if not result:
        # $.Feature.geometry.'|'.1
        result = json_model_10(value, path)
        if not result:
            # $.Feature.geometry.'|'.2
            result = json_model_11(value, path)
    return result

# define "json_model_12_must_properties" ($.Feature.properties)
def jm_f_23(value: Jsonable, path: str) -> bool:
    # $.Feature.properties
    # $.Feature.properties.'|'.0
    result = value is None
    if not result:
        # $.Feature.properties.'|'.1
        result = jm_obj_0(value, path)
    return result

# define "json_model_12_may_id" ($.Feature.id)
def jm_f_24(value: Jsonable, path: str) -> bool:
    # $.Feature.id
    # $.Feature.id.'|'.0
    result = isinstance(value, str)
    if not result:
        # $.Feature.id.'|'.1
        result = isinstance(value, float)
    return result

# define "json_model_12_may_bbox" ($.Feature.bbox)
def jm_f_25(value: Jsonable, path: str) -> bool:
    # $.Feature.bbox
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_16_idx, array_16_item in enumerate(value):
            # $.Feature.bbox.0
            result = isinstance(array_16_item, float)
            if not result: break
    return result

# define "json_model_13_must_type" ($.FeatureCollection.type)
def jm_f_26(value: Jsonable, path: str) -> bool:
    # $.FeatureCollection.type
    result = isinstance(value, str) and value == "FeatureCollection"
    return result

# define "json_model_13_must_features" ($.FeatureCollection.features)
def jm_f_27(value: Jsonable, path: str) -> bool:
    # $.FeatureCollection.features
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_17_idx, array_17_item in enumerate(value):
            # $.FeatureCollection.features.0
            result = json_model_12(array_17_item, path)
            if not result: break
    return result

# define "json_model_13_may_bbox" ($.FeatureCollection.bbox)
def jm_f_28(value: Jsonable, path: str) -> bool:
    # $.FeatureCollection.bbox
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_18_idx, array_18_item in enumerate(value):
            # $.FeatureCollection.bbox.0
            result = isinstance(array_18_item, float)
            if not result: break
    return result


# define "$position" ($.position)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.position
    # $.position.'@'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_0_idx, array_0_item in enumerate(value):
            # $.position.'@'.0
            result = isinstance(array_0_item, float)
            if not result: break
    result &= len(value) <= 3 and len(value) >= 2
    return result

# define "$coord_array" ($.coord_array)
def json_model_2(value: Jsonable, path: str) -> bool:
    # $.coord_array
    # $.coord_array.'@'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_1_idx, array_1_item in enumerate(value):
            # $.coord_array.'@'.0
            result = json_model_1(array_1_item, path)
            if not result: break
    result &= len(value) >= 2
    return result

# define "$linear_ring" ($.linear_ring)
def json_model_3(value: Jsonable, path: str) -> bool:
    # $.linear_ring
    # $.linear_ring.'@'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_2_idx, array_2_item in enumerate(value):
            # $.linear_ring.'@'.0
            result = json_model_1(array_2_item, path)
            if not result: break
    result &= len(value) >= 4
    return result


# object $.Point
def json_model_4(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_4_must:  # must
            must_count += 1
            if not json_model_4_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_4_may:  # may
            if not json_model_4_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2




# object $.MultiPoint
def json_model_5(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_5_must:  # must
            must_count += 1
            if not json_model_5_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_5_may:  # may
            if not json_model_5_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2




# object $.LineString
def json_model_6(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_6_must:  # must
            must_count += 1
            if not json_model_6_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_6_may:  # may
            if not json_model_6_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2




# object $.MultiLineString
def json_model_7(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_7_must:  # must
            must_count += 1
            if not json_model_7_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_7_may:  # may
            if not json_model_7_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2




# object $.Polygon
def json_model_8(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_8_must:  # must
            must_count += 1
            if not json_model_8_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_8_may:  # may
            if not json_model_8_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2




# object $.MultiPolygon
def json_model_9(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_9_must:  # must
            must_count += 1
            if not json_model_9_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_9_may:  # may
            if not json_model_9_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2



# define "$geometry" ($.geometry)
def json_model_10(value: Jsonable, path: str) -> bool:
    # $.geometry
    result = isinstance(value, dict)
    if result:
        result = "type" in value
        if result:
            tag_0 = value["type"]
            if tag_0 in jm_map_0:
                result = jm_map_0[tag_0](value, path)
            else:
                result = False
    return result


# object $.GeometryCollection
def json_model_11(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_11_must:  # must
            must_count += 1
            if not json_model_11_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_11_may:  # may
            if not json_model_11_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2




# object $.Feature.properties.'|'.1
def jm_obj_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Feature.properties.'|'.1.''
        result = True
        if not result: return False
    return True


# object $.Feature
def json_model_12(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_12_must:  # must
            must_count += 1
            if not json_model_12_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_12_may:  # may
            if not json_model_12_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 3




# object $.FeatureCollection
def json_model_13(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_13_must:  # must
            must_count += 1
            if not json_model_13_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_13_may:  # may
            if not json_model_13_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2



# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    xc_0 = 0
    if xc_0 <= 1:
        # $.'^'.0
        xr_0 = json_model_10(value, path)
        if xr_0: xc_0 += 1
    if xc_0 <= 1:
        # $.'^'.1
        xr_0 = json_model_11(value, path)
        if xr_0: xc_0 += 1
    if xc_0 <= 1:
        # $.'^'.2
        xr_0 = json_model_12(value, path)
        if xr_0: xc_0 += 1
    if xc_0 <= 1:
        # $.'^'.3
        xr_0 = json_model_13(value, path)
        if xr_0: xc_0 += 1
    result = xc_0 == 1
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_4_must = {
    "type": jm_f_0,
    "coordinates": jm_f_1,
}
json_model_4_may = {
    "bbox": jm_f_2,
}
json_model_5_must = {
    "type": jm_f_3,
    "coordinates": jm_f_4,
}
json_model_5_may = {
    "bbox": jm_f_5,
}
json_model_6_must = {
    "type": jm_f_6,
    "coordinates": jm_f_7,
}
json_model_6_may = {
    "bbox": jm_f_8,
}
json_model_7_must = {
    "type": jm_f_9,
    "coordinates": jm_f_10,
}
json_model_7_may = {
    "bbox": jm_f_11,
}
json_model_8_must = {
    "type": jm_f_12,
    "coordinates": jm_f_13,
}
json_model_8_may = {
    "bbox": jm_f_14,
}
json_model_9_must = {
    "type": jm_f_15,
    "coordinates": jm_f_16,
}
json_model_9_may = {
    "bbox": jm_f_17,
}
jm_map_0 = {
    "Point": json_model_4,
    "MultiPoint": json_model_5,
    "LineString": json_model_6,
    "MultiLineString": json_model_7,
    "Polygon": json_model_8,
    "MultiPolygon": json_model_9,
}
json_model_11_must = {
    "type": jm_f_18,
    "geometries": jm_f_19,
}
json_model_11_may = {
    "bbox": jm_f_20,
}
json_model_12_must = {
    "type": jm_f_21,
    "geometry": jm_f_22,
    "properties": jm_f_23,
}
json_model_12_may = {
    "id": jm_f_24,
    "bbox": jm_f_25,
}
json_model_13_must = {
    "type": jm_f_26,
    "features": jm_f_27,
}
json_model_13_may = {
    "bbox": jm_f_28,
}


