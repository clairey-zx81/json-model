# Generated for model: ./mrg_01.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

json_model_2_must: PropMap
json_model_3_must: PropMap
json_model_0_must: PropMap

# define "json_model_2_must_a" ($.X.a)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.X.a
    result = isinstance(value, str) and value == "cst_01"
    return result

# define "json_model_2_must_b" ($.X.b)
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.X.b
    result = isinstance(value, str) and value == "cst_01"
    return result

# define "json_model_3_must_c" ($.Y.c)
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.Y.c
    result = isinstance(value, str) and value == "cst_01"
    return result

# define "json_model_3_must_d" ($.Y.d)
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.Y.d
    result = isinstance(value, str) and value == "cst_01"
    return result

# define "json_model_0_must_a" ($.a)
def jm_f_4(value: Jsonable, path: str) -> bool:
    # $.a
    result = isinstance(value, str) and value == "cst_01"
    return result

# define "json_model_0_must_b" ($.b)
def jm_f_5(value: Jsonable, path: str) -> bool:
    # $.b
    result = isinstance(value, str) and value == "cst_01"
    return result

# define "json_model_0_must_c" ($.c)
def jm_f_6(value: Jsonable, path: str) -> bool:
    # $.c
    result = isinstance(value, str) and value == "cst_01"
    return result

# define "json_model_0_must_d" ($.d)
def jm_f_7(value: Jsonable, path: str) -> bool:
    # $.d
    result = isinstance(value, str) and value == "cst_01"
    return result


# define "$T" ($.T)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.T
    result = isinstance(value, str) and value == "cst_01"
    return result


# object $.X
def json_model_2(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_2_must:  # must
            must_count += 1
            if not json_model_2_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2




# object $.Y
def json_model_3(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_3_must:  # must
            must_count += 1
            if not json_model_3_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 2




# object $
def json_model_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_0_must:  # must
            must_count += 1
            if not json_model_0_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 4



# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_2_must = {
    "a": jm_f_0,
    "b": jm_f_1,
}
json_model_3_must = {
    "c": jm_f_2,
    "d": jm_f_3,
}
json_model_0_must = {
    "a": jm_f_4,
    "b": jm_f_5,
    "c": jm_f_6,
    "d": jm_f_7,
}


