--
-- Generated by JSON Model Compiler version 2
-- see https://github.com/clairey-zx81/json-model
--
-- JSON_MODEL_VERSION is 2
CREATE EXTENSION IF NOT EXISTS json_model;

-- check $schema (.'$schema')
CREATE OR REPLACE FUNCTION json_model_3(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- JSON Model for JSON Schema 2019-09 (aka 08) [JSON_MODEL_LOOSE_NUMBER]
  -- .'$schema'
  -- .'$schema'.'@'
  res := json_model_18(val, path, rep);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $ (.)
CREATE OR REPLACE FUNCTION json_model_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .
  res := json_model_3(val, path, rep);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $schema#Schema (.'$schema#Schema')
CREATE OR REPLACE FUNCTION json_model_18(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$schema#Schema'
  -- .'$schema#Schema'.'|'.0
  res := JSONB_TYPEOF(val) = 'boolean';
  IF NOT res THEN
    -- .'$schema#Schema'.'|'.1
    res := _jm_obj_0(val, path, rep);
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$schema#ObjectSchema'.'$vocabulary'
CREATE OR REPLACE FUNCTION _jm_obj_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF jm_is_valid_url(prop, NULL, rep) THEN
      -- handle 1 key props
      -- .'$schema#ObjectSchema'.'$vocabulary'.'$URI'
      res := JSONB_TYPEOF(pval) = 'boolean';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$schema#ObjectSchema'.'$defs'
CREATE OR REPLACE FUNCTION _jm_obj_2(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    -- handle other props
    -- .'$schema#ObjectSchema'.'$defs'.''
    res := json_model_18(pval, NULL, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$schema#ObjectSchema'.properties
CREATE OR REPLACE FUNCTION _jm_obj_3(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    -- handle other props
    -- .'$schema#ObjectSchema'.properties.''
    res := json_model_18(pval, NULL, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$schema#ObjectSchema'.patternProperties
CREATE OR REPLACE FUNCTION _jm_obj_4(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    -- handle other props
    -- .'$schema#ObjectSchema'.patternProperties.''
    res := json_model_18(pval, NULL, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$schema#ObjectSchema'.dependentSchemas
CREATE OR REPLACE FUNCTION _jm_obj_5(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    -- handle other props
    -- .'$schema#ObjectSchema'.dependentSchemas.''
    res := json_model_18(pval, NULL, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$schema#ObjectSchema'.dependentRequired
CREATE OR REPLACE FUNCTION _jm_obj_6(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    -- handle other props
    -- .'$schema#ObjectSchema'.dependentRequired.''
    res := json_model_12(pval, NULL, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$schema#ObjectSchema'.definitions
CREATE OR REPLACE FUNCTION _jm_obj_7(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    -- handle other props
    -- .'$schema#ObjectSchema'.definitions.''
    res := json_model_18(pval, NULL, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$schema#ObjectSchema'.dependencies
CREATE OR REPLACE FUNCTION _jm_obj_8(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    -- handle other props
    -- .'$schema#ObjectSchema'.dependencies.''
    -- .'$schema#ObjectSchema'.dependencies.''.'|'.0
    res := json_model_18(pval, NULL, rep);
    IF NOT res THEN
      -- .'$schema#ObjectSchema'.dependencies.''.'|'.1
      res := json_model_12(pval, NULL, rep);
    END IF;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$schema#ObjectSchema'
CREATE OR REPLACE FUNCTION _jm_obj_0(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- check open must/may only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF val ? '$id' THEN
    pval := val -> '$id';
    -- .'$schema#ObjectSchema'.'$id'
    res := json_model_4(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? '$schema' THEN
    pval := val -> '$schema';
    -- .'$schema#ObjectSchema'.'$schema'
    res := JSONB_TYPEOF(pval) = 'string' AND jm_is_valid_url(JSON_VALUE(pval, '$' RETURNING TEXT), path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? '$ref' THEN
    pval := val -> '$ref';
    -- .'$schema#ObjectSchema'.'$ref'
    res := json_model_4(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? '$anchor' THEN
    pval := val -> '$anchor';
    -- .'$schema#ObjectSchema'.'$anchor'
    res := json_model_4(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? '$recursiveRef' THEN
    pval := val -> '$recursiveRef';
    -- .'$schema#ObjectSchema'.'$recursiveRef'
    res := json_model_4(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? '$recursiveAnchor' THEN
    pval := val -> '$recursiveAnchor';
    -- .'$schema#ObjectSchema'.'$recursiveAnchor'
    res := JSONB_TYPEOF(pval) = 'boolean';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? '$vocabulary' THEN
    pval := val -> '$vocabulary';
    -- .'$schema#ObjectSchema'.'$vocabulary'
    res := _jm_obj_1(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? '$comment' THEN
    pval := val -> '$comment';
    -- .'$schema#ObjectSchema'.'$comment'
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? '$defs' THEN
    pval := val -> '$defs';
    -- .'$schema#ObjectSchema'.'$defs'
    res := _jm_obj_2(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'items' THEN
    pval := val -> 'items';
    -- .'$schema#ObjectSchema'.items
    -- .'$schema#ObjectSchema'.items.'|'.0
    res := json_model_18(pval, path, rep);
    IF NOT res THEN
      -- .'$schema#ObjectSchema'.items.'|'.1
      res := json_model_15(pval, path, rep);
    END IF;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'contains' THEN
    pval := val -> 'contains';
    -- .'$schema#ObjectSchema'.contains
    res := json_model_18(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'additionalItems' THEN
    pval := val -> 'additionalItems';
    -- .'$schema#ObjectSchema'.additionalItems
    res := json_model_18(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'additionalProperties' THEN
    pval := val -> 'additionalProperties';
    -- .'$schema#ObjectSchema'.additionalProperties
    res := json_model_18(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'properties' THEN
    pval := val -> 'properties';
    -- .'$schema#ObjectSchema'.properties
    res := _jm_obj_3(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'patternProperties' THEN
    pval := val -> 'patternProperties';
    -- .'$schema#ObjectSchema'.patternProperties
    res := _jm_obj_4(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'dependentSchemas' THEN
    pval := val -> 'dependentSchemas';
    -- .'$schema#ObjectSchema'.dependentSchemas
    res := _jm_obj_5(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'propertyNames' THEN
    pval := val -> 'propertyNames';
    -- .'$schema#ObjectSchema'.propertyNames
    res := json_model_18(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'unevaluatedItems' THEN
    pval := val -> 'unevaluatedItems';
    -- .'$schema#ObjectSchema'.unevaluatedItems
    res := json_model_18(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'unevaluatedProperties' THEN
    pval := val -> 'unevaluatedProperties';
    -- .'$schema#ObjectSchema'.unevaluatedProperties
    res := json_model_18(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'if' THEN
    pval := val -> 'if';
    -- .'$schema#ObjectSchema'.if
    res := json_model_18(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'then' THEN
    pval := val -> 'then';
    -- .'$schema#ObjectSchema'.then
    res := json_model_18(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'else' THEN
    pval := val -> 'else';
    -- .'$schema#ObjectSchema'.else
    res := json_model_18(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'not' THEN
    pval := val -> 'not';
    -- .'$schema#ObjectSchema'.not
    res := json_model_18(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'allOf' THEN
    pval := val -> 'allOf';
    -- .'$schema#ObjectSchema'.allOf
    res := json_model_15(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'anyOf' THEN
    pval := val -> 'anyOf';
    -- .'$schema#ObjectSchema'.anyOf
    res := json_model_15(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'oneOf' THEN
    pval := val -> 'oneOf';
    -- .'$schema#ObjectSchema'.oneOf
    res := json_model_15(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'type' THEN
    pval := val -> 'type';
    -- .'$schema#ObjectSchema'.type
    -- .'$schema#ObjectSchema'.type.'|'.0
    res := json_model_10(pval, path, rep);
    IF NOT res THEN
      -- .'$schema#ObjectSchema'.type.'|'.1
      res := json_model_11(pval, path, rep);
    END IF;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'enum' THEN
    pval := val -> 'enum';
    -- .'$schema#ObjectSchema'.enum
    res := JSONB_TYPEOF(pval) = 'array';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'multipleOf' THEN
    pval := val -> 'multipleOf';
    -- .'$schema#ObjectSchema'.multipleOf
    res := JSONB_TYPEOF(pval) = 'number' AND (pval)::FLOAT8 > 0.0;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'maximum' THEN
    pval := val -> 'maximum';
    -- .'$schema#ObjectSchema'.maximum
    res := JSONB_TYPEOF(pval) = 'number';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'exclusiveMaximum' THEN
    pval := val -> 'exclusiveMaximum';
    -- .'$schema#ObjectSchema'.exclusiveMaximum
    res := JSONB_TYPEOF(pval) = 'number';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'minimum' THEN
    pval := val -> 'minimum';
    -- .'$schema#ObjectSchema'.minimum
    res := JSONB_TYPEOF(pval) = 'number';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'exclusiveMinimum' THEN
    pval := val -> 'exclusiveMinimum';
    -- .'$schema#ObjectSchema'.exclusiveMinimum
    res := JSONB_TYPEOF(pval) = 'number';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'maxLength' THEN
    pval := val -> 'maxLength';
    -- .'$schema#ObjectSchema'.maxLength
    res := json_model_13(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'minLength' THEN
    pval := val -> 'minLength';
    -- .'$schema#ObjectSchema'.minLength
    res := json_model_13(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'pattern' THEN
    pval := val -> 'pattern';
    -- .'$schema#ObjectSchema'.pattern
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'maxItems' THEN
    pval := val -> 'maxItems';
    -- .'$schema#ObjectSchema'.maxItems
    res := json_model_13(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'minItems' THEN
    pval := val -> 'minItems';
    -- .'$schema#ObjectSchema'.minItems
    res := json_model_13(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'uniqueItems' THEN
    pval := val -> 'uniqueItems';
    -- .'$schema#ObjectSchema'.uniqueItems
    res := JSONB_TYPEOF(pval) = 'boolean';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'maxContains' THEN
    pval := val -> 'maxContains';
    -- .'$schema#ObjectSchema'.maxContains
    res := json_model_13(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'minContains' THEN
    pval := val -> 'minContains';
    -- .'$schema#ObjectSchema'.minContains
    res := json_model_13(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'maxProperties' THEN
    pval := val -> 'maxProperties';
    -- .'$schema#ObjectSchema'.maxProperties
    res := json_model_13(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'minProperties' THEN
    pval := val -> 'minProperties';
    -- .'$schema#ObjectSchema'.minProperties
    res := json_model_13(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'required' THEN
    pval := val -> 'required';
    -- .'$schema#ObjectSchema'.required
    res := json_model_12(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'dependentRequired' THEN
    pval := val -> 'dependentRequired';
    -- .'$schema#ObjectSchema'.dependentRequired
    res := _jm_obj_6(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'title' THEN
    pval := val -> 'title';
    -- .'$schema#ObjectSchema'.title
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'description' THEN
    pval := val -> 'description';
    -- .'$schema#ObjectSchema'.description
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'deprecated' THEN
    pval := val -> 'deprecated';
    -- .'$schema#ObjectSchema'.deprecated
    res := JSONB_TYPEOF(pval) = 'boolean';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'readOnly' THEN
    pval := val -> 'readOnly';
    -- .'$schema#ObjectSchema'.readOnly
    res := JSONB_TYPEOF(pval) = 'boolean';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'writeOnly' THEN
    pval := val -> 'writeOnly';
    -- .'$schema#ObjectSchema'.writeOnly
    res := JSONB_TYPEOF(pval) = 'boolean';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'examples' THEN
    pval := val -> 'examples';
    -- .'$schema#ObjectSchema'.examples
    res := JSONB_TYPEOF(pval) = 'array';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'format' THEN
    pval := val -> 'format';
    -- .'$schema#ObjectSchema'.format
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'contentEncoding' THEN
    pval := val -> 'contentEncoding';
    -- .'$schema#ObjectSchema'.contentEncoding
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'contentMediaType' THEN
    pval := val -> 'contentMediaType';
    -- .'$schema#ObjectSchema'.contentMediaType
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'contentSchema' THEN
    pval := val -> 'contentSchema';
    -- .'$schema#ObjectSchema'.contentSchema
    res := json_model_18(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'definitions' THEN
    pval := val -> 'definitions';
    -- .'$schema#ObjectSchema'.definitions
    res := _jm_obj_7(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'dependencies' THEN
    pval := val -> 'dependencies';
    -- .'$schema#ObjectSchema'.dependencies
    res := _jm_obj_8(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- check $schema#ObjectSchema (.'$schema#ObjectSchema')
CREATE OR REPLACE FUNCTION json_model_17(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$schema#ObjectSchema'
  res := _jm_obj_0(val, path, rep);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $schema#URI-REFERENCE (.'$schema#URI-REFERENCE')
CREATE OR REPLACE FUNCTION json_model_4(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$schema#URI-REFERENCE'
  res := JSONB_TYPEOF(val) = 'string';
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $schema#id (.'$schema#id')
CREATE OR REPLACE FUNCTION json_model_5(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$schema#id'
  res := json_model_4(val, path, rep);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION _jm_cst_0(value JSONB)
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  constants JSONB = JSONB '["array","boolean","integer","null","number","object","string"]';
BEGIN
  RETURN constants @> value;
END;
$$ LANGUAGE plpgsql;

-- check $schema#simpleTypes (.'$schema#simpleTypes')
CREATE OR REPLACE FUNCTION json_model_10(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$schema#simpleTypes'
  res := JSONB_TYPEOF(val) IN ('null', 'boolean', 'number', 'string') AND _jm_cst_0(val);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $schema#simpleTypesArray (.'$schema#simpleTypesArray')
CREATE OR REPLACE FUNCTION json_model_11(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  arr_0_idx INT8;
  arr_0_item JSONB;
  ival_0 int;
BEGIN
  -- .'$schema#simpleTypesArray'
  -- .'$schema#simpleTypesArray'.'@'
  res := JSONB_TYPEOF(val) = 'array';
  IF res THEN
    FOR arr_0_idx IN 0 .. JSONB_ARRAY_LENGTH(val) - 1 LOOP
      arr_0_item := val -> arr_0_idx;
      -- .'$schema#simpleTypesArray'.'@'.0
      res := json_model_10(arr_0_item, NULL, rep);
      IF NOT res THEN
        EXIT;
      END IF;
    END LOOP;
  END IF;
  IF res THEN
    ival_0 := JSONB_ARRAY_LENGTH(val);
    res := jm_array_is_unique(val, path, rep) AND ival_0 >= 1;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $schema#stringArray (.'$schema#stringArray')
CREATE OR REPLACE FUNCTION json_model_12(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  arr_1_idx INT8;
  arr_1_item JSONB;
BEGIN
  -- .'$schema#stringArray'
  -- .'$schema#stringArray'.'@'
  res := JSONB_TYPEOF(val) = 'array';
  IF res THEN
    FOR arr_1_idx IN 0 .. JSONB_ARRAY_LENGTH(val) - 1 LOOP
      arr_1_item := val -> arr_1_idx;
      -- .'$schema#stringArray'.'@'.0
      res := JSONB_TYPEOF(arr_1_item) = 'string';
      IF NOT res THEN
        EXIT;
      END IF;
    END LOOP;
  END IF;
  IF res THEN
    res := jm_array_is_unique(val, path, rep);
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $schema#nonNegativeInteger (.'$schema#nonNegativeInteger')
CREATE OR REPLACE FUNCTION json_model_13(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$schema#nonNegativeInteger'
  res := JSONB_TYPEOF(val) = 'number' AND (val)::INT8 = (val)::FLOAT8 AND (val)::FLOAT8 >= 0;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $schema#schemaArray (.'$schema#schemaArray')
CREATE OR REPLACE FUNCTION json_model_15(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  arr_2_idx INT8;
  arr_2_item JSONB;
  ival_1 int;
BEGIN
  -- .'$schema#schemaArray'
  -- .'$schema#schemaArray'.'@'
  res := JSONB_TYPEOF(val) = 'array';
  IF res THEN
    FOR arr_2_idx IN 0 .. JSONB_ARRAY_LENGTH(val) - 1 LOOP
      arr_2_item := val -> arr_2_idx;
      -- .'$schema#schemaArray'.'@'.0
      res := json_model_18(arr_2_item, NULL, rep);
      IF NOT res THEN
        EXIT;
      END IF;
    END LOOP;
  END IF;
  IF res THEN
    ival_1 := JSONB_ARRAY_LENGTH(val);
    res := ival_1 >= 1;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION check_model_map(name TEXT)
RETURNS TEXT STRICT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  map JSONB := JSONB '{"":"json_model_3","schema":"json_model_3"}';
BEGIN
  RETURN map->>name;
END;
$$ LANGUAGE plpgsql;

--
-- constant maps initialization
--
TRUNCATE jm_constant_maps;

--
-- JSON Model checking entry point
--
-- TODO INOUT rep?
CREATE OR REPLACE FUNCTION check_model(val JSONB, name TEXT, rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  fun TEXT;
BEGIN
  fun := check_model_map(name);
  IF fun IS NULL THEN
    RAISE EXCEPTION 'model for % not found', name;
  END IF;
  RETURN jm_call(fun, val, NULL, rep);
END;
$$ LANGUAGE plpgsql;
