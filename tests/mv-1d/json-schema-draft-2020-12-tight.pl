#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_2($$$);
sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
sub _jm_f_6($$$);
sub _jm_f_7($$$);
sub _jm_f_8($$$);
my %_jm_obj_0_map;
sub json_model_3($$$);
sub _jm_f_9($$$);
sub _jm_f_10($$$);
sub _jm_f_11($$$);
sub _jm_f_12($$$);
sub _jm_f_13($$$);
sub _jm_f_14($$$);
sub _jm_f_15($$$);
my %_jm_obj_3_map;
sub json_model_4($$$);
sub json_model_5($$$);
sub json_model_6($$$);
sub json_model_7($$$);
sub json_model_8($$$);
sub _jm_f_16($$$);
sub _jm_f_17($$$);
sub _jm_f_18($$$);
sub _jm_f_19($$$);
sub _jm_f_20($$$);
sub _jm_f_21($$$);
sub _jm_f_22($$$);
my %_jm_obj_8_map;
sub json_model_9($$$);
sub json_model_10($$$);
sub json_model_11($$$);
sub _jm_f_23($$$);
sub _jm_f_24($$$);
sub _jm_f_25($$$);
sub _jm_f_26($$$);
sub _jm_f_27($$$);
sub _jm_f_28($$$);
sub _jm_f_29($$$);
sub _jm_f_30($$$);
sub _jm_f_31($$$);
my %_jm_obj_9_map;
sub json_model_12($$$);
sub _jm_f_32($$$);
sub _jm_f_33($$$);
sub _jm_f_34($$$);
sub _jm_f_35($$$);
sub _jm_f_36($$$);
sub _jm_f_37($$$);
sub _jm_f_38($$$);
sub _jm_f_39($$$);
sub _jm_f_40($$$);
sub _jm_f_41($$$);
my %_jm_obj_10_map;
sub json_model_13($$$);
sub _jm_f_42($$$);
sub _jm_f_43($$$);
sub _jm_f_44($$$);
sub _jm_f_45($$$);
sub _jm_f_46($$$);
sub _jm_f_47($$$);
sub _jm_f_48($$$);
sub _jm_f_49($$$);
sub _jm_f_50($$$);
my %_jm_obj_15_map;
sub json_model_14($$$);
sub _jm_f_51($$$);
sub _jm_f_52($$$);
sub _jm_f_53($$$);
sub _jm_f_54($$$);
sub _jm_f_55($$$);
sub _jm_f_56($$$);
sub _jm_f_57($$$);
sub _jm_f_58($$$);
sub _jm_f_59($$$);
sub _jm_f_60($$$);
sub _jm_f_61($$$);
sub _jm_f_62($$$);
sub _jm_f_63($$$);
sub _jm_f_64($$$);
sub _jm_f_65($$$);
sub _jm_f_66($$$);
sub _jm_f_67($$$);
sub _jm_f_68($$$);
sub _jm_f_69($$$);
sub _jm_f_70($$$);
sub _jm_f_71($$$);
sub _jm_f_72($$$);
sub _jm_f_73($$$);
sub _jm_f_74($$$);
sub _jm_f_75($$$);
my %_jm_obj_16_map;
sub _jm_f_76($$$);
sub _jm_f_77($$$);
sub _jm_f_78($$$);
sub _jm_f_79($$$);
sub _jm_f_80($$$);
sub _jm_f_81($$$);
sub _jm_f_82($$$);
sub _jm_f_83($$$);
sub _jm_f_84($$$);
sub _jm_f_85($$$);
sub _jm_f_86($$$);
sub _jm_f_87($$$);
sub _jm_f_88($$$);
sub _jm_f_89($$$);
sub _jm_f_90($$$);
sub _jm_f_91($$$);
sub _jm_f_92($$$);
sub _jm_f_93($$$);
sub _jm_f_94($$$);
sub _jm_f_95($$$);
sub _jm_f_96($$$);
sub _jm_f_97($$$);
sub _jm_f_98($$$);
sub _jm_f_99($$$);
sub _jm_f_100($$$);
sub _jm_f_101($$$);
my %_jm_obj_19_map;
sub _jm_f_102($$$);
sub _jm_f_103($$$);
sub _jm_f_104($$$);
sub _jm_f_105($$$);
sub _jm_f_106($$$);
sub _jm_f_107($$$);
sub _jm_f_108($$$);
sub _jm_f_109($$$);
sub _jm_f_110($$$);
sub _jm_f_111($$$);
sub _jm_f_112($$$);
sub _jm_f_113($$$);
sub _jm_f_114($$$);
sub _jm_f_115($$$);
sub _jm_f_116($$$);
sub _jm_f_117($$$);
sub _jm_f_118($$$);
sub _jm_f_119($$$);
sub _jm_f_120($$$);
sub _jm_f_121($$$);
sub _jm_f_122($$$);
sub _jm_f_123($$$);
sub _jm_f_124($$$);
sub _jm_f_125($$$);
sub _jm_f_126($$$);
my %_jm_obj_26_map;
sub _jm_f_127($$$);
sub _jm_f_128($$$);
sub _jm_f_129($$$);
sub _jm_f_130($$$);
sub _jm_f_131($$$);
sub _jm_f_132($$$);
sub _jm_f_133($$$);
sub _jm_f_134($$$);
sub _jm_f_135($$$);
sub _jm_f_136($$$);
sub _jm_f_137($$$);
sub _jm_f_138($$$);
sub _jm_f_139($$$);
sub _jm_f_140($$$);
sub _jm_f_141($$$);
sub _jm_f_142($$$);
sub _jm_f_143($$$);
sub _jm_f_144($$$);
sub _jm_f_145($$$);
sub _jm_f_146($$$);
sub _jm_f_147($$$);
sub _jm_f_148($$$);
sub _jm_f_149($$$);
my %_jm_obj_29_map;
sub _jm_f_150($$$);
sub _jm_f_151($$$);
sub _jm_f_152($$$);
sub _jm_f_153($$$);
sub _jm_f_154($$$);
sub _jm_f_155($$$);
sub _jm_f_156($$$);
sub _jm_f_157($$$);
sub _jm_f_158($$$);
sub _jm_f_159($$$);
sub _jm_f_160($$$);
sub _jm_f_161($$$);
sub _jm_f_162($$$);
sub _jm_f_163($$$);
sub _jm_f_164($$$);
sub _jm_f_165($$$);
sub _jm_f_166($$$);
sub _jm_f_167($$$);
sub _jm_f_168($$$);
sub _jm_f_169($$$);
sub _jm_f_170($$$);
my %_jm_obj_32_map;
sub _jm_f_171($$$);
sub _jm_f_172($$$);
sub _jm_f_173($$$);
sub _jm_f_174($$$);
sub _jm_f_175($$$);
sub _jm_f_176($$$);
sub _jm_f_177($$$);
sub _jm_f_178($$$);
sub _jm_f_179($$$);
sub _jm_f_180($$$);
sub _jm_f_181($$$);
sub _jm_f_182($$$);
sub _jm_f_183($$$);
sub _jm_f_184($$$);
sub _jm_f_185($$$);
sub _jm_f_186($$$);
sub _jm_f_187($$$);
sub _jm_f_188($$$);
sub _jm_f_189($$$);
sub _jm_f_190($$$);
sub _jm_f_191($$$);
my %_jm_obj_35_map;
sub _jm_f_192($$$);
sub _jm_f_193($$$);
sub _jm_f_194($$$);
sub _jm_f_195($$$);
sub _jm_f_196($$$);
sub _jm_f_197($$$);
sub _jm_f_198($$$);
sub _jm_f_199($$$);
sub _jm_f_200($$$);
sub _jm_f_201($$$);
sub _jm_f_202($$$);
sub _jm_f_203($$$);
sub _jm_f_204($$$);
sub _jm_f_205($$$);
sub _jm_f_206($$$);
sub _jm_f_207($$$);
my %_jm_obj_38_map;
sub _jm_f_208($$$);
sub _jm_f_209($$$);
sub _jm_f_210($$$);
sub _jm_f_211($$$);
sub _jm_f_212($$$);
sub _jm_f_213($$$);
sub _jm_f_214($$$);
sub _jm_f_215($$$);
sub _jm_f_216($$$);
sub _jm_f_217($$$);
sub _jm_f_218($$$);
sub _jm_f_219($$$);
sub _jm_f_220($$$);
sub _jm_f_221($$$);
sub _jm_f_222($$$);
sub _jm_f_223($$$);
my %_jm_obj_41_map;
sub json_model_15($$$);
sub _jm_f_224($$$);
sub _jm_f_225($$$);
sub _jm_f_226($$$);
sub _jm_f_227($$$);
sub _jm_f_228($$$);
sub _jm_f_229($$$);
sub _jm_f_230($$$);
sub _jm_f_231($$$);
sub _jm_f_232($$$);
sub _jm_f_233($$$);
sub _jm_f_234($$$);
sub _jm_f_235($$$);
sub _jm_f_236($$$);
sub _jm_f_237($$$);
sub _jm_f_238($$$);
sub _jm_f_239($$$);
sub _jm_f_240($$$);
sub _jm_f_241($$$);
sub _jm_f_242($$$);
sub _jm_f_243($$$);
sub _jm_f_244($$$);
sub _jm_f_245($$$);
sub _jm_f_246($$$);
sub _jm_f_247($$$);
sub _jm_f_248($$$);
my %_jm_obj_44_map;
sub _jm_f_249($$$);
sub _jm_f_250($$$);
sub _jm_f_251($$$);
sub _jm_f_252($$$);
sub _jm_f_253($$$);
sub _jm_f_254($$$);
sub _jm_f_255($$$);
sub _jm_f_256($$$);
sub _jm_f_257($$$);
sub _jm_f_258($$$);
sub _jm_f_259($$$);
sub _jm_f_260($$$);
sub _jm_f_261($$$);
sub _jm_f_262($$$);
sub _jm_f_263($$$);
sub _jm_f_264($$$);
sub _jm_f_265($$$);
sub _jm_f_266($$$);
sub _jm_f_267($$$);
sub _jm_f_268($$$);
sub _jm_f_269($$$);
sub _jm_f_270($$$);
sub _jm_f_271($$$);
sub _jm_f_272($$$);
sub _jm_f_273($$$);
sub _jm_f_274($$$);
my %_jm_obj_47_map;
sub _jm_f_275($$$);
sub _jm_f_276($$$);
sub _jm_f_277($$$);
sub _jm_f_278($$$);
sub _jm_f_279($$$);
sub _jm_f_280($$$);
sub _jm_f_281($$$);
sub _jm_f_282($$$);
sub _jm_f_283($$$);
sub _jm_f_284($$$);
sub _jm_f_285($$$);
sub _jm_f_286($$$);
sub _jm_f_287($$$);
sub _jm_f_288($$$);
sub _jm_f_289($$$);
sub _jm_f_290($$$);
sub _jm_f_291($$$);
sub _jm_f_292($$$);
sub _jm_f_293($$$);
sub _jm_f_294($$$);
sub _jm_f_295($$$);
sub _jm_f_296($$$);
sub _jm_f_297($$$);
sub _jm_f_298($$$);
sub _jm_f_299($$$);
my %_jm_obj_54_map;
sub _jm_f_300($$$);
sub _jm_f_301($$$);
sub _jm_f_302($$$);
sub _jm_f_303($$$);
sub _jm_f_304($$$);
sub _jm_f_305($$$);
sub _jm_f_306($$$);
sub _jm_f_307($$$);
sub _jm_f_308($$$);
sub _jm_f_309($$$);
sub _jm_f_310($$$);
sub _jm_f_311($$$);
sub _jm_f_312($$$);
sub _jm_f_313($$$);
sub _jm_f_314($$$);
sub _jm_f_315($$$);
sub _jm_f_316($$$);
sub _jm_f_317($$$);
sub _jm_f_318($$$);
sub _jm_f_319($$$);
sub _jm_f_320($$$);
sub _jm_f_321($$$);
sub _jm_f_322($$$);
my %_jm_obj_57_map;
sub _jm_f_323($$$);
sub _jm_f_324($$$);
sub _jm_f_325($$$);
sub _jm_f_326($$$);
sub _jm_f_327($$$);
sub _jm_f_328($$$);
sub _jm_f_329($$$);
sub _jm_f_330($$$);
sub _jm_f_331($$$);
sub _jm_f_332($$$);
sub _jm_f_333($$$);
sub _jm_f_334($$$);
sub _jm_f_335($$$);
sub _jm_f_336($$$);
sub _jm_f_337($$$);
sub _jm_f_338($$$);
sub _jm_f_339($$$);
sub _jm_f_340($$$);
sub _jm_f_341($$$);
sub _jm_f_342($$$);
sub _jm_f_343($$$);
my %_jm_obj_60_map;
sub _jm_f_344($$$);
sub _jm_f_345($$$);
sub _jm_f_346($$$);
sub _jm_f_347($$$);
sub _jm_f_348($$$);
sub _jm_f_349($$$);
sub _jm_f_350($$$);
sub _jm_f_351($$$);
sub _jm_f_352($$$);
sub _jm_f_353($$$);
sub _jm_f_354($$$);
sub _jm_f_355($$$);
sub _jm_f_356($$$);
sub _jm_f_357($$$);
sub _jm_f_358($$$);
sub _jm_f_359($$$);
sub _jm_f_360($$$);
sub _jm_f_361($$$);
sub _jm_f_362($$$);
sub _jm_f_363($$$);
sub _jm_f_364($$$);
my %_jm_obj_63_map;
sub _jm_f_365($$$);
sub _jm_f_366($$$);
sub _jm_f_367($$$);
sub _jm_f_368($$$);
sub _jm_f_369($$$);
sub _jm_f_370($$$);
sub _jm_f_371($$$);
sub _jm_f_372($$$);
sub _jm_f_373($$$);
sub _jm_f_374($$$);
sub _jm_f_375($$$);
sub _jm_f_376($$$);
sub _jm_f_377($$$);
sub _jm_f_378($$$);
sub _jm_f_379($$$);
sub _jm_f_380($$$);
my %_jm_obj_66_map;
sub _jm_f_381($$$);
sub _jm_f_382($$$);
sub _jm_f_383($$$);
sub _jm_f_384($$$);
sub _jm_f_385($$$);
sub _jm_f_386($$$);
sub _jm_f_387($$$);
sub _jm_f_388($$$);
sub _jm_f_389($$$);
sub _jm_f_390($$$);
sub _jm_f_391($$$);
sub _jm_f_392($$$);
sub _jm_f_393($$$);
sub _jm_f_394($$$);
sub _jm_f_395($$$);
sub _jm_f_396($$$);
my %_jm_obj_69_map;
sub json_model_16($$$);
sub json_model_1($$$);
my %check_model_map;

# check $URI-REFERENCE (.'$URI-REFERENCE')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$URI-REFERENCE'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_0_map_$anchor (.'$core'.'$anchor')
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_$comment (.'$core'.'$comment')
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$core'.'$defs'
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$core'.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_0_map_$defs (.'$core'.'$defs')
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$defs'
    $res = _jm_obj_1($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_$dynamicAnchor (.'$core'.'$dynamicAnchor')
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_$dynamicRef (.'$core'.'$dynamicRef')
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_$id (.'$core'.'$id')
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_$ref (.'$core'.'$ref')
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_$schema (.'$core'.'$schema')
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$core'.'$vocabulary'
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$core'.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_0_map_$vocabulary (.'$core'.'$vocabulary')
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$vocabulary'
    $res = _jm_obj_2($val, $path, $rep);
    return $res;
}


# object .'$core'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_0_map{$prop}))
        {
            # handle 9 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $core (.'$core')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# check _jm_obj_3_map_default (.'$meta'.default)
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.default
    $res = 1;
    return $res;
}

# check _jm_obj_3_map_deprecated (.'$meta'.deprecated)
sub _jm_f_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_3_map_description (.'$meta'.description)
sub _jm_f_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_3_map_examples (.'$meta'.examples)
sub _jm_f_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_3_map_readOnly (.'$meta'.readOnly)
sub _jm_f_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_3_map_title (.'$meta'.title)
sub _jm_f_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_3_map_writeOnly (.'$meta'.writeOnly)
sub _jm_f_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$meta'
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_3_map{$prop}))
        {
            # handle 7 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $meta (.'$meta')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'
    $res = _jm_obj_3($val, $path, $rep);
    return $res;
}

# object .'$Null'
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Null'.type
            $res = jm_is_string($pval) && $pval eq 'null';
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Null (.'$Null')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Null'
    $res = _jm_obj_4($val, $path, $rep);
    return $res;
}

# object .'$Boolean'
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Boolean'.type
            $res = jm_is_string($pval) && $pval eq 'boolean';
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Boolean (.'$Boolean')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Boolean'
    $res = _jm_obj_5($val, $path, $rep);
    return $res;
}

# object .'$Number'
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Number'.type
            $res = jm_is_string($pval) && $pval eq 'number';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'multipleOf')
        {
            # handle may multipleOf property
            # .'$Number'.multipleOf
            # .'$Number'.multipleOf.'|'.0
            $res = jm_is_integer($pval) && $pval >= 1;
            if (! $res)
            {
                # .'$Number'.multipleOf.'|'.1
                $res = jm_is_numeric($pval) && $pval > 0.0;
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'maximum')
        {
            # handle may maximum property
            # .'$Number'.maximum
            # .'$Number'.maximum.'|'.0
            $res = jm_is_integer($pval);
            if (! $res)
            {
                # .'$Number'.maximum.'|'.1
                $res = jm_is_numeric($pval);
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'exclusiveMaximum')
        {
            # handle may exclusiveMaximum property
            # .'$Number'.exclusiveMaximum
            # .'$Number'.exclusiveMaximum.'|'.0
            $res = jm_is_integer($pval);
            if (! $res)
            {
                # .'$Number'.exclusiveMaximum.'|'.1
                $res = jm_is_numeric($pval);
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'minimum')
        {
            # handle may minimum property
            # .'$Number'.minimum
            # .'$Number'.minimum.'|'.0
            $res = jm_is_integer($pval);
            if (! $res)
            {
                # .'$Number'.minimum.'|'.1
                $res = jm_is_numeric($pval);
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'exclusiveMinimum')
        {
            # handle may exclusiveMinimum property
            # .'$Number'.exclusiveMinimum
            # .'$Number'.exclusiveMinimum.'|'.0
            $res = jm_is_integer($pval);
            if (! $res)
            {
                # .'$Number'.exclusiveMinimum.'|'.1
                $res = jm_is_numeric($pval);
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Number (.'$Number')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'
    $res = _jm_obj_6($val, $path, $rep);
    return $res;
}

# object .'$Integer'
sub _jm_obj_7($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Integer'.type
            $res = jm_is_string($pval) && $pval eq 'integer';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'multipleOf')
        {
            # handle may multipleOf property
            # .'$Integer'.multipleOf
            $res = jm_is_integer($pval) && $pval >= 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'maximum')
        {
            # handle may maximum property
            # .'$Integer'.maximum
            $res = jm_is_integer($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'exclusiveMaximum')
        {
            # handle may exclusiveMaximum property
            # .'$Integer'.exclusiveMaximum
            $res = jm_is_integer($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'minimum')
        {
            # handle may minimum property
            # .'$Integer'.minimum
            $res = jm_is_integer($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'exclusiveMinimum')
        {
            # handle may exclusiveMinimum property
            # .'$Integer'.exclusiveMinimum
            $res = jm_is_integer($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Integer (.'$Integer')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'
    $res = _jm_obj_7($val, $path, $rep);
    return $res;
}

# check _jm_obj_8_map_contentEncoding (.'$String'.contentEncoding)
sub _jm_f_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.contentEncoding
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_8_map_contentMediaType (.'$String'.contentMediaType)
sub _jm_f_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.contentMediaType
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_8_map_contentSchema (.'$String'.contentSchema)
sub _jm_f_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.contentSchema
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_8_map_format (.'$String'.format)
sub _jm_f_19($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.format
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_8_map_maxLength (.'$String'.maxLength)
sub _jm_f_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.maxLength
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_8_map_minLength (.'$String'.minLength)
sub _jm_f_21($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.minLength
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_8_map_pattern (.'$String'.pattern)
sub _jm_f_22($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.pattern
    $res = jm_is_string($val) && jm_is_valid_regex($val, $path, $rep);
    return $res;
}


# object .'$String'
sub _jm_obj_8($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$String'.type
            $res = jm_is_string($pval) && $pval eq 'string';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_8_map{$prop}))
        {
            # handle 7 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $String (.'$String')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'
    $res = _jm_obj_8($val, $path, $rep);
    return $res;
}

# check $stringArray (.'$stringArray')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$stringArray'
    # .'$stringArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$stringArray'.'@'.0
            $res = jm_is_string($arr_0_item);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_0 = scalar @$val;
        $res = $ival_0 >= 1;
    }
    return $res;
}

# check $schemaArray (.'$schemaArray')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schemaArray'
    # .'$schemaArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_1_idx (0 .. $#$val)
        {
            my $arr_1_item = $$val[$arr_1_idx];
            # .'$schemaArray'.'@'.0
            $res = json_model_16($arr_1_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_1 = scalar @$val;
        $res = $ival_1 >= 1;
    }
    return $res;
}

# check _jm_obj_9_map_contains (.'$Array'.contains)
sub _jm_f_23($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.contains
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_items (.'$Array'.items)
sub _jm_f_24($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.items
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_maxContains (.'$Array'.maxContains)
sub _jm_f_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.maxContains
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_9_map_maxItems (.'$Array'.maxItems)
sub _jm_f_26($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.maxItems
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_9_map_minContains (.'$Array'.minContains)
sub _jm_f_27($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.minContains
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_9_map_minItems (.'$Array'.minItems)
sub _jm_f_28($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.minItems
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_9_map_prefixItems (.'$Array'.prefixItems)
sub _jm_f_29($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.prefixItems
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_unevaluatedItems (.'$Array'.unevaluatedItems)
sub _jm_f_30($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.unevaluatedItems
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_uniqueItems (.'$Array'.uniqueItems)
sub _jm_f_31($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.uniqueItems
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$Array'
sub _jm_obj_9($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Array'.type
            $res = jm_is_string($pval) && $pval eq 'array';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_9_map{$prop}))
        {
            # handle 9 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Array (.'$Array')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'
    $res = _jm_obj_9($val, $path, $rep);
    return $res;
}

# check _jm_obj_10_map_additionalProperties (.'$Object'.additionalProperties)
sub _jm_f_32($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.additionalProperties
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# object .'$Object'.dependentRequired
sub _jm_obj_11($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Object'.dependentRequired.''
        $res = json_model_10($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_10_map_dependentRequired (.'$Object'.dependentRequired)
sub _jm_f_33($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.dependentRequired
    $res = _jm_obj_11($val, $path, $rep);
    return $res;
}

# object .'$Object'.dependentSchemas
sub _jm_obj_12($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Object'.dependentSchemas.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_10_map_dependentSchemas (.'$Object'.dependentSchemas)
sub _jm_f_34($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.dependentSchemas
    $res = _jm_obj_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_10_map_maxProperties (.'$Object'.maxProperties)
sub _jm_f_35($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.maxProperties
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_10_map_minProperties (.'$Object'.minProperties)
sub _jm_f_36($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.minProperties
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# object .'$Object'.patternProperties
sub _jm_obj_13($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_regex($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Object'.patternProperties.'$REGEX'
            $res = json_model_16($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_10_map_patternProperties (.'$Object'.patternProperties)
sub _jm_f_37($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.patternProperties
    $res = _jm_obj_13($val, $path, $rep);
    return $res;
}

# object .'$Object'.properties
sub _jm_obj_14($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Object'.properties.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_10_map_properties (.'$Object'.properties)
sub _jm_f_38($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.properties
    $res = _jm_obj_14($val, $path, $rep);
    return $res;
}

# check _jm_obj_10_map_propertyNames (.'$Object'.propertyNames)
sub _jm_f_39($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.propertyNames
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_10_map_required (.'$Object'.required)
sub _jm_f_40($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.required
    $res = json_model_10($val, $path, $rep);
    return $res;
}

# check _jm_obj_10_map_unevaluatedProperties (.'$Object'.unevaluatedProperties)
sub _jm_f_41($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.unevaluatedProperties
    $res = json_model_16($val, $path, $rep);
    return $res;
}


# object .'$Object'
sub _jm_obj_10($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Object'.type
            $res = jm_is_string($pval) && $pval eq 'object';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_10_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Object (.'$Object')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'
    $res = _jm_obj_10($val, $path, $rep);
    return $res;
}

# check _jm_obj_15_map_allOf (.'$Misc'.allOf)
sub _jm_f_42($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Misc'.allOf
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_15_map_anyOf (.'$Misc'.anyOf)
sub _jm_f_43($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Misc'.anyOf
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_15_map_const (.'$Misc'.const)
sub _jm_f_44($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Misc'.const
    $res = 1;
    return $res;
}

# check _jm_obj_15_map_else (.'$Misc'.else)
sub _jm_f_45($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Misc'.else
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_15_map_enum (.'$Misc'.enum)
sub _jm_f_46($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Misc'.enum
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_15_map_if (.'$Misc'.if)
sub _jm_f_47($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Misc'.if
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_15_map_not (.'$Misc'.not)
sub _jm_f_48($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Misc'.not
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_15_map_oneOf (.'$Misc'.oneOf)
sub _jm_f_49($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Misc'.oneOf
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_15_map_then (.'$Misc'.then)
sub _jm_f_50($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Misc'.then
    $res = json_model_16($val, $path, $rep);
    return $res;
}


# object .'$Misc'
sub _jm_obj_15($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_15_map{$prop}))
        {
            # handle 9 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Misc (.'$Misc')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Misc'
    $res = _jm_obj_15($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_$anchor (.'$TightSchema'.'|'.7.'$anchor')
sub _jm_f_51($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_$comment (.'$TightSchema'.'|'.7.'$comment')
sub _jm_f_52($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$TightSchema'.'|'.7.'$defs'
sub _jm_obj_17($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$TightSchema'.'|'.7.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_16_map_$defs (.'$TightSchema'.'|'.7.'$defs')
sub _jm_f_53($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.'$defs'
    $res = _jm_obj_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_$dynamicAnchor (.'$TightSchema'.'|'.7.'$dynamicAnchor')
sub _jm_f_54($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_$dynamicRef (.'$TightSchema'.'|'.7.'$dynamicRef')
sub _jm_f_55($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_$id (.'$TightSchema'.'|'.7.'$id')
sub _jm_f_56($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_$ref (.'$TightSchema'.'|'.7.'$ref')
sub _jm_f_57($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_$schema (.'$TightSchema'.'|'.7.'$schema')
sub _jm_f_58($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$TightSchema'.'|'.7.'$vocabulary'
sub _jm_obj_18($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$TightSchema'.'|'.7.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_16_map_$vocabulary (.'$TightSchema'.'|'.7.'$vocabulary')
sub _jm_f_59($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.'$vocabulary'
    $res = _jm_obj_18($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_allOf (.'$TightSchema'.'|'.7.allOf)
sub _jm_f_60($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.allOf
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_anyOf (.'$TightSchema'.'|'.7.anyOf)
sub _jm_f_61($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.anyOf
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_const (.'$TightSchema'.'|'.7.const)
sub _jm_f_62($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.const
    $res = 1;
    return $res;
}

# check _jm_obj_16_map_default (.'$TightSchema'.'|'.7.default)
sub _jm_f_63($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.default
    $res = 1;
    return $res;
}

# check _jm_obj_16_map_deprecated (.'$TightSchema'.'|'.7.deprecated)
sub _jm_f_64($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_16_map_description (.'$TightSchema'.'|'.7.description)
sub _jm_f_65($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_16_map_else (.'$TightSchema'.'|'.7.else)
sub _jm_f_66($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.else
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_enum (.'$TightSchema'.'|'.7.enum)
sub _jm_f_67($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.enum
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_16_map_examples (.'$TightSchema'.'|'.7.examples)
sub _jm_f_68($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_16_map_if (.'$TightSchema'.'|'.7.if)
sub _jm_f_69($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.if
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_not (.'$TightSchema'.'|'.7.not)
sub _jm_f_70($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.not
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_oneOf (.'$TightSchema'.'|'.7.oneOf)
sub _jm_f_71($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.oneOf
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_readOnly (.'$TightSchema'.'|'.7.readOnly)
sub _jm_f_72($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_16_map_then (.'$TightSchema'.'|'.7.then)
sub _jm_f_73($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.then
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_16_map_title (.'$TightSchema'.'|'.7.title)
sub _jm_f_74($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_16_map_writeOnly (.'$TightSchema'.'|'.7.writeOnly)
sub _jm_f_75($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.7.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$TightSchema'.'|'.7
sub _jm_obj_16($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_16_map{$prop}))
        {
            # handle 25 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_19_map_$anchor (.'$TightSchema'.'|'.6.'$anchor')
sub _jm_f_76($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_19_map_$comment (.'$TightSchema'.'|'.6.'$comment')
sub _jm_f_77($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$TightSchema'.'|'.6.'$defs'
sub _jm_obj_20($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$TightSchema'.'|'.6.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_19_map_$defs (.'$TightSchema'.'|'.6.'$defs')
sub _jm_f_78($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.'$defs'
    $res = _jm_obj_20($val, $path, $rep);
    return $res;
}

# check _jm_obj_19_map_$dynamicAnchor (.'$TightSchema'.'|'.6.'$dynamicAnchor')
sub _jm_f_79($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_19_map_$dynamicRef (.'$TightSchema'.'|'.6.'$dynamicRef')
sub _jm_f_80($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_19_map_$id (.'$TightSchema'.'|'.6.'$id')
sub _jm_f_81($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_19_map_$ref (.'$TightSchema'.'|'.6.'$ref')
sub _jm_f_82($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_19_map_$schema (.'$TightSchema'.'|'.6.'$schema')
sub _jm_f_83($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$TightSchema'.'|'.6.'$vocabulary'
sub _jm_obj_21($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$TightSchema'.'|'.6.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_19_map_$vocabulary (.'$TightSchema'.'|'.6.'$vocabulary')
sub _jm_f_84($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.'$vocabulary'
    $res = _jm_obj_21($val, $path, $rep);
    return $res;
}

# check _jm_obj_19_map_additionalProperties (.'$TightSchema'.'|'.6.additionalProperties)
sub _jm_f_85($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.additionalProperties
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_19_map_default (.'$TightSchema'.'|'.6.default)
sub _jm_f_86($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.default
    $res = 1;
    return $res;
}

# object .'$TightSchema'.'|'.6.dependentRequired
sub _jm_obj_22($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$TightSchema'.'|'.6.dependentRequired.''
        $res = json_model_10($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_19_map_dependentRequired (.'$TightSchema'.'|'.6.dependentRequired)
sub _jm_f_87($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.dependentRequired
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}

# object .'$TightSchema'.'|'.6.dependentSchemas
sub _jm_obj_23($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$TightSchema'.'|'.6.dependentSchemas.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_19_map_dependentSchemas (.'$TightSchema'.'|'.6.dependentSchemas)
sub _jm_f_88($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.dependentSchemas
    $res = _jm_obj_23($val, $path, $rep);
    return $res;
}

# check _jm_obj_19_map_deprecated (.'$TightSchema'.'|'.6.deprecated)
sub _jm_f_89($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_19_map_description (.'$TightSchema'.'|'.6.description)
sub _jm_f_90($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_19_map_examples (.'$TightSchema'.'|'.6.examples)
sub _jm_f_91($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_19_map_maxProperties (.'$TightSchema'.'|'.6.maxProperties)
sub _jm_f_92($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.maxProperties
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_19_map_minProperties (.'$TightSchema'.'|'.6.minProperties)
sub _jm_f_93($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.minProperties
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# object .'$TightSchema'.'|'.6.patternProperties
sub _jm_obj_24($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_regex($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$TightSchema'.'|'.6.patternProperties.'$REGEX'
            $res = json_model_16($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_19_map_patternProperties (.'$TightSchema'.'|'.6.patternProperties)
sub _jm_f_94($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.patternProperties
    $res = _jm_obj_24($val, $path, $rep);
    return $res;
}

# object .'$TightSchema'.'|'.6.properties
sub _jm_obj_25($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$TightSchema'.'|'.6.properties.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_19_map_properties (.'$TightSchema'.'|'.6.properties)
sub _jm_f_95($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.properties
    $res = _jm_obj_25($val, $path, $rep);
    return $res;
}

# check _jm_obj_19_map_propertyNames (.'$TightSchema'.'|'.6.propertyNames)
sub _jm_f_96($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.propertyNames
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_19_map_readOnly (.'$TightSchema'.'|'.6.readOnly)
sub _jm_f_97($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_19_map_required (.'$TightSchema'.'|'.6.required)
sub _jm_f_98($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.required
    $res = json_model_10($val, $path, $rep);
    return $res;
}

# check _jm_obj_19_map_title (.'$TightSchema'.'|'.6.title)
sub _jm_f_99($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_19_map_unevaluatedProperties (.'$TightSchema'.'|'.6.unevaluatedProperties)
sub _jm_f_100($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.unevaluatedProperties
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_19_map_writeOnly (.'$TightSchema'.'|'.6.writeOnly)
sub _jm_f_101($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.6.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$TightSchema'.'|'.6
sub _jm_obj_19($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$TightSchema'.'|'.6.type
            $res = jm_is_string($pval) && $pval eq 'object';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_19_map{$prop}))
        {
            # handle 26 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_26_map_$anchor (.'$TightSchema'.'|'.5.'$anchor')
sub _jm_f_102($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_$comment (.'$TightSchema'.'|'.5.'$comment')
sub _jm_f_103($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$TightSchema'.'|'.5.'$defs'
sub _jm_obj_27($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$TightSchema'.'|'.5.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_26_map_$defs (.'$TightSchema'.'|'.5.'$defs')
sub _jm_f_104($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.'$defs'
    $res = _jm_obj_27($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_$dynamicAnchor (.'$TightSchema'.'|'.5.'$dynamicAnchor')
sub _jm_f_105($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_$dynamicRef (.'$TightSchema'.'|'.5.'$dynamicRef')
sub _jm_f_106($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_$id (.'$TightSchema'.'|'.5.'$id')
sub _jm_f_107($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_$ref (.'$TightSchema'.'|'.5.'$ref')
sub _jm_f_108($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_$schema (.'$TightSchema'.'|'.5.'$schema')
sub _jm_f_109($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$TightSchema'.'|'.5.'$vocabulary'
sub _jm_obj_28($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$TightSchema'.'|'.5.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_26_map_$vocabulary (.'$TightSchema'.'|'.5.'$vocabulary')
sub _jm_f_110($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.'$vocabulary'
    $res = _jm_obj_28($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_contains (.'$TightSchema'.'|'.5.contains)
sub _jm_f_111($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.contains
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_default (.'$TightSchema'.'|'.5.default)
sub _jm_f_112($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.default
    $res = 1;
    return $res;
}

# check _jm_obj_26_map_deprecated (.'$TightSchema'.'|'.5.deprecated)
sub _jm_f_113($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_26_map_description (.'$TightSchema'.'|'.5.description)
sub _jm_f_114($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_26_map_examples (.'$TightSchema'.'|'.5.examples)
sub _jm_f_115($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_26_map_items (.'$TightSchema'.'|'.5.items)
sub _jm_f_116($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.items
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_maxContains (.'$TightSchema'.'|'.5.maxContains)
sub _jm_f_117($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.maxContains
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_26_map_maxItems (.'$TightSchema'.'|'.5.maxItems)
sub _jm_f_118($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.maxItems
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_26_map_minContains (.'$TightSchema'.'|'.5.minContains)
sub _jm_f_119($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.minContains
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_26_map_minItems (.'$TightSchema'.'|'.5.minItems)
sub _jm_f_120($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.minItems
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_26_map_prefixItems (.'$TightSchema'.'|'.5.prefixItems)
sub _jm_f_121($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.prefixItems
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_readOnly (.'$TightSchema'.'|'.5.readOnly)
sub _jm_f_122($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_26_map_title (.'$TightSchema'.'|'.5.title)
sub _jm_f_123($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_26_map_unevaluatedItems (.'$TightSchema'.'|'.5.unevaluatedItems)
sub _jm_f_124($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.unevaluatedItems
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_uniqueItems (.'$TightSchema'.'|'.5.uniqueItems)
sub _jm_f_125($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.uniqueItems
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_26_map_writeOnly (.'$TightSchema'.'|'.5.writeOnly)
sub _jm_f_126($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.5.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$TightSchema'.'|'.5
sub _jm_obj_26($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$TightSchema'.'|'.5.type
            $res = jm_is_string($pval) && $pval eq 'array';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_26_map{$prop}))
        {
            # handle 25 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_29_map_$anchor (.'$TightSchema'.'|'.4.'$anchor')
sub _jm_f_127($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_29_map_$comment (.'$TightSchema'.'|'.4.'$comment')
sub _jm_f_128($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$TightSchema'.'|'.4.'$defs'
sub _jm_obj_30($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$TightSchema'.'|'.4.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_29_map_$defs (.'$TightSchema'.'|'.4.'$defs')
sub _jm_f_129($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.'$defs'
    $res = _jm_obj_30($val, $path, $rep);
    return $res;
}

# check _jm_obj_29_map_$dynamicAnchor (.'$TightSchema'.'|'.4.'$dynamicAnchor')
sub _jm_f_130($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_29_map_$dynamicRef (.'$TightSchema'.'|'.4.'$dynamicRef')
sub _jm_f_131($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_29_map_$id (.'$TightSchema'.'|'.4.'$id')
sub _jm_f_132($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_29_map_$ref (.'$TightSchema'.'|'.4.'$ref')
sub _jm_f_133($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_29_map_$schema (.'$TightSchema'.'|'.4.'$schema')
sub _jm_f_134($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$TightSchema'.'|'.4.'$vocabulary'
sub _jm_obj_31($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$TightSchema'.'|'.4.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_29_map_$vocabulary (.'$TightSchema'.'|'.4.'$vocabulary')
sub _jm_f_135($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.'$vocabulary'
    $res = _jm_obj_31($val, $path, $rep);
    return $res;
}

# check _jm_obj_29_map_contentEncoding (.'$TightSchema'.'|'.4.contentEncoding)
sub _jm_f_136($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.contentEncoding
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_29_map_contentMediaType (.'$TightSchema'.'|'.4.contentMediaType)
sub _jm_f_137($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.contentMediaType
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_29_map_contentSchema (.'$TightSchema'.'|'.4.contentSchema)
sub _jm_f_138($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.contentSchema
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_29_map_default (.'$TightSchema'.'|'.4.default)
sub _jm_f_139($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.default
    $res = 1;
    return $res;
}

# check _jm_obj_29_map_deprecated (.'$TightSchema'.'|'.4.deprecated)
sub _jm_f_140($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_29_map_description (.'$TightSchema'.'|'.4.description)
sub _jm_f_141($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_29_map_examples (.'$TightSchema'.'|'.4.examples)
sub _jm_f_142($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_29_map_format (.'$TightSchema'.'|'.4.format)
sub _jm_f_143($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.format
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_29_map_maxLength (.'$TightSchema'.'|'.4.maxLength)
sub _jm_f_144($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.maxLength
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_29_map_minLength (.'$TightSchema'.'|'.4.minLength)
sub _jm_f_145($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.minLength
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_29_map_pattern (.'$TightSchema'.'|'.4.pattern)
sub _jm_f_146($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.pattern
    $res = jm_is_string($val) && jm_is_valid_regex($val, $path, $rep);
    return $res;
}

# check _jm_obj_29_map_readOnly (.'$TightSchema'.'|'.4.readOnly)
sub _jm_f_147($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_29_map_title (.'$TightSchema'.'|'.4.title)
sub _jm_f_148($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_29_map_writeOnly (.'$TightSchema'.'|'.4.writeOnly)
sub _jm_f_149($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.4.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$TightSchema'.'|'.4
sub _jm_obj_29($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$TightSchema'.'|'.4.type
            $res = jm_is_string($pval) && $pval eq 'string';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_29_map{$prop}))
        {
            # handle 23 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_32_map_$anchor (.'$TightSchema'.'|'.3.'$anchor')
sub _jm_f_150($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_32_map_$comment (.'$TightSchema'.'|'.3.'$comment')
sub _jm_f_151($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$TightSchema'.'|'.3.'$defs'
sub _jm_obj_33($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$TightSchema'.'|'.3.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_32_map_$defs (.'$TightSchema'.'|'.3.'$defs')
sub _jm_f_152($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.'$defs'
    $res = _jm_obj_33($val, $path, $rep);
    return $res;
}

# check _jm_obj_32_map_$dynamicAnchor (.'$TightSchema'.'|'.3.'$dynamicAnchor')
sub _jm_f_153($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_32_map_$dynamicRef (.'$TightSchema'.'|'.3.'$dynamicRef')
sub _jm_f_154($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_32_map_$id (.'$TightSchema'.'|'.3.'$id')
sub _jm_f_155($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_32_map_$ref (.'$TightSchema'.'|'.3.'$ref')
sub _jm_f_156($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_32_map_$schema (.'$TightSchema'.'|'.3.'$schema')
sub _jm_f_157($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$TightSchema'.'|'.3.'$vocabulary'
sub _jm_obj_34($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$TightSchema'.'|'.3.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_32_map_$vocabulary (.'$TightSchema'.'|'.3.'$vocabulary')
sub _jm_f_158($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.'$vocabulary'
    $res = _jm_obj_34($val, $path, $rep);
    return $res;
}

# check _jm_obj_32_map_default (.'$TightSchema'.'|'.3.default)
sub _jm_f_159($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.default
    $res = 1;
    return $res;
}

# check _jm_obj_32_map_deprecated (.'$TightSchema'.'|'.3.deprecated)
sub _jm_f_160($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_32_map_description (.'$TightSchema'.'|'.3.description)
sub _jm_f_161($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_32_map_examples (.'$TightSchema'.'|'.3.examples)
sub _jm_f_162($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_32_map_exclusiveMaximum (.'$TightSchema'.'|'.3.exclusiveMaximum)
sub _jm_f_163($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.exclusiveMaximum
    $res = jm_is_integer($val);
    return $res;
}

# check _jm_obj_32_map_exclusiveMinimum (.'$TightSchema'.'|'.3.exclusiveMinimum)
sub _jm_f_164($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.exclusiveMinimum
    $res = jm_is_integer($val);
    return $res;
}

# check _jm_obj_32_map_maximum (.'$TightSchema'.'|'.3.maximum)
sub _jm_f_165($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.maximum
    $res = jm_is_integer($val);
    return $res;
}

# check _jm_obj_32_map_minimum (.'$TightSchema'.'|'.3.minimum)
sub _jm_f_166($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.minimum
    $res = jm_is_integer($val);
    return $res;
}

# check _jm_obj_32_map_multipleOf (.'$TightSchema'.'|'.3.multipleOf)
sub _jm_f_167($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.multipleOf
    $res = jm_is_integer($val) && $val >= 1;
    return $res;
}

# check _jm_obj_32_map_readOnly (.'$TightSchema'.'|'.3.readOnly)
sub _jm_f_168($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_32_map_title (.'$TightSchema'.'|'.3.title)
sub _jm_f_169($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_32_map_writeOnly (.'$TightSchema'.'|'.3.writeOnly)
sub _jm_f_170($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.3.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$TightSchema'.'|'.3
sub _jm_obj_32($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$TightSchema'.'|'.3.type
            $res = jm_is_string($pval) && $pval eq 'integer';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_32_map{$prop}))
        {
            # handle 21 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_35_map_$anchor (.'$TightSchema'.'|'.2.'$anchor')
sub _jm_f_171($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_35_map_$comment (.'$TightSchema'.'|'.2.'$comment')
sub _jm_f_172($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$TightSchema'.'|'.2.'$defs'
sub _jm_obj_36($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$TightSchema'.'|'.2.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_35_map_$defs (.'$TightSchema'.'|'.2.'$defs')
sub _jm_f_173($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.'$defs'
    $res = _jm_obj_36($val, $path, $rep);
    return $res;
}

# check _jm_obj_35_map_$dynamicAnchor (.'$TightSchema'.'|'.2.'$dynamicAnchor')
sub _jm_f_174($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_35_map_$dynamicRef (.'$TightSchema'.'|'.2.'$dynamicRef')
sub _jm_f_175($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_35_map_$id (.'$TightSchema'.'|'.2.'$id')
sub _jm_f_176($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_35_map_$ref (.'$TightSchema'.'|'.2.'$ref')
sub _jm_f_177($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_35_map_$schema (.'$TightSchema'.'|'.2.'$schema')
sub _jm_f_178($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$TightSchema'.'|'.2.'$vocabulary'
sub _jm_obj_37($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$TightSchema'.'|'.2.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_35_map_$vocabulary (.'$TightSchema'.'|'.2.'$vocabulary')
sub _jm_f_179($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.'$vocabulary'
    $res = _jm_obj_37($val, $path, $rep);
    return $res;
}

# check _jm_obj_35_map_default (.'$TightSchema'.'|'.2.default)
sub _jm_f_180($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.default
    $res = 1;
    return $res;
}

# check _jm_obj_35_map_deprecated (.'$TightSchema'.'|'.2.deprecated)
sub _jm_f_181($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_35_map_description (.'$TightSchema'.'|'.2.description)
sub _jm_f_182($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_35_map_examples (.'$TightSchema'.'|'.2.examples)
sub _jm_f_183($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_35_map_exclusiveMaximum (.'$TightSchema'.'|'.2.exclusiveMaximum)
sub _jm_f_184($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.exclusiveMaximum
    # .'$TightSchema'.'|'.2.exclusiveMaximum.'|'.0
    $res = jm_is_integer($val);
    if (! $res)
    {
        # .'$TightSchema'.'|'.2.exclusiveMaximum.'|'.1
        $res = jm_is_numeric($val);
    }
    return $res;
}

# check _jm_obj_35_map_exclusiveMinimum (.'$TightSchema'.'|'.2.exclusiveMinimum)
sub _jm_f_185($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.exclusiveMinimum
    # .'$TightSchema'.'|'.2.exclusiveMinimum.'|'.0
    $res = jm_is_integer($val);
    if (! $res)
    {
        # .'$TightSchema'.'|'.2.exclusiveMinimum.'|'.1
        $res = jm_is_numeric($val);
    }
    return $res;
}

# check _jm_obj_35_map_maximum (.'$TightSchema'.'|'.2.maximum)
sub _jm_f_186($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.maximum
    # .'$TightSchema'.'|'.2.maximum.'|'.0
    $res = jm_is_integer($val);
    if (! $res)
    {
        # .'$TightSchema'.'|'.2.maximum.'|'.1
        $res = jm_is_numeric($val);
    }
    return $res;
}

# check _jm_obj_35_map_minimum (.'$TightSchema'.'|'.2.minimum)
sub _jm_f_187($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.minimum
    # .'$TightSchema'.'|'.2.minimum.'|'.0
    $res = jm_is_integer($val);
    if (! $res)
    {
        # .'$TightSchema'.'|'.2.minimum.'|'.1
        $res = jm_is_numeric($val);
    }
    return $res;
}

# check _jm_obj_35_map_multipleOf (.'$TightSchema'.'|'.2.multipleOf)
sub _jm_f_188($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.multipleOf
    # .'$TightSchema'.'|'.2.multipleOf.'|'.0
    $res = jm_is_integer($val) && $val >= 1;
    if (! $res)
    {
        # .'$TightSchema'.'|'.2.multipleOf.'|'.1
        $res = jm_is_numeric($val) && $val > 0.0;
    }
    return $res;
}

# check _jm_obj_35_map_readOnly (.'$TightSchema'.'|'.2.readOnly)
sub _jm_f_189($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_35_map_title (.'$TightSchema'.'|'.2.title)
sub _jm_f_190($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_35_map_writeOnly (.'$TightSchema'.'|'.2.writeOnly)
sub _jm_f_191($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.2.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$TightSchema'.'|'.2
sub _jm_obj_35($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$TightSchema'.'|'.2.type
            $res = jm_is_string($pval) && $pval eq 'number';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_35_map{$prop}))
        {
            # handle 21 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_38_map_$anchor (.'$TightSchema'.'|'.1.'$anchor')
sub _jm_f_192($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_38_map_$comment (.'$TightSchema'.'|'.1.'$comment')
sub _jm_f_193($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$TightSchema'.'|'.1.'$defs'
sub _jm_obj_39($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$TightSchema'.'|'.1.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_38_map_$defs (.'$TightSchema'.'|'.1.'$defs')
sub _jm_f_194($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.'$defs'
    $res = _jm_obj_39($val, $path, $rep);
    return $res;
}

# check _jm_obj_38_map_$dynamicAnchor (.'$TightSchema'.'|'.1.'$dynamicAnchor')
sub _jm_f_195($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_38_map_$dynamicRef (.'$TightSchema'.'|'.1.'$dynamicRef')
sub _jm_f_196($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_38_map_$id (.'$TightSchema'.'|'.1.'$id')
sub _jm_f_197($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_38_map_$ref (.'$TightSchema'.'|'.1.'$ref')
sub _jm_f_198($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_38_map_$schema (.'$TightSchema'.'|'.1.'$schema')
sub _jm_f_199($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$TightSchema'.'|'.1.'$vocabulary'
sub _jm_obj_40($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$TightSchema'.'|'.1.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_38_map_$vocabulary (.'$TightSchema'.'|'.1.'$vocabulary')
sub _jm_f_200($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.'$vocabulary'
    $res = _jm_obj_40($val, $path, $rep);
    return $res;
}

# check _jm_obj_38_map_default (.'$TightSchema'.'|'.1.default)
sub _jm_f_201($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.default
    $res = 1;
    return $res;
}

# check _jm_obj_38_map_deprecated (.'$TightSchema'.'|'.1.deprecated)
sub _jm_f_202($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_38_map_description (.'$TightSchema'.'|'.1.description)
sub _jm_f_203($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_38_map_examples (.'$TightSchema'.'|'.1.examples)
sub _jm_f_204($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_38_map_readOnly (.'$TightSchema'.'|'.1.readOnly)
sub _jm_f_205($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_38_map_title (.'$TightSchema'.'|'.1.title)
sub _jm_f_206($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_38_map_writeOnly (.'$TightSchema'.'|'.1.writeOnly)
sub _jm_f_207($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.1.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$TightSchema'.'|'.1
sub _jm_obj_38($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$TightSchema'.'|'.1.type
            $res = jm_is_string($pval) && $pval eq 'boolean';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_38_map{$prop}))
        {
            # handle 16 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_41_map_$anchor (.'$TightSchema'.'|'.0.'$anchor')
sub _jm_f_208($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_41_map_$comment (.'$TightSchema'.'|'.0.'$comment')
sub _jm_f_209($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$TightSchema'.'|'.0.'$defs'
sub _jm_obj_42($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$TightSchema'.'|'.0.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_41_map_$defs (.'$TightSchema'.'|'.0.'$defs')
sub _jm_f_210($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.'$defs'
    $res = _jm_obj_42($val, $path, $rep);
    return $res;
}

# check _jm_obj_41_map_$dynamicAnchor (.'$TightSchema'.'|'.0.'$dynamicAnchor')
sub _jm_f_211($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_41_map_$dynamicRef (.'$TightSchema'.'|'.0.'$dynamicRef')
sub _jm_f_212($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_41_map_$id (.'$TightSchema'.'|'.0.'$id')
sub _jm_f_213($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_41_map_$ref (.'$TightSchema'.'|'.0.'$ref')
sub _jm_f_214($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_41_map_$schema (.'$TightSchema'.'|'.0.'$schema')
sub _jm_f_215($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$TightSchema'.'|'.0.'$vocabulary'
sub _jm_obj_43($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$TightSchema'.'|'.0.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_41_map_$vocabulary (.'$TightSchema'.'|'.0.'$vocabulary')
sub _jm_f_216($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.'$vocabulary'
    $res = _jm_obj_43($val, $path, $rep);
    return $res;
}

# check _jm_obj_41_map_default (.'$TightSchema'.'|'.0.default)
sub _jm_f_217($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.default
    $res = 1;
    return $res;
}

# check _jm_obj_41_map_deprecated (.'$TightSchema'.'|'.0.deprecated)
sub _jm_f_218($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_41_map_description (.'$TightSchema'.'|'.0.description)
sub _jm_f_219($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_41_map_examples (.'$TightSchema'.'|'.0.examples)
sub _jm_f_220($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_41_map_readOnly (.'$TightSchema'.'|'.0.readOnly)
sub _jm_f_221($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_41_map_title (.'$TightSchema'.'|'.0.title)
sub _jm_f_222($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_41_map_writeOnly (.'$TightSchema'.'|'.0.writeOnly)
sub _jm_f_223($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'.'|'.0.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$TightSchema'.'|'.0
sub _jm_obj_41($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$TightSchema'.'|'.0.type
            $res = jm_is_string($pval) && $pval eq 'null';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_41_map{$prop}))
        {
            # handle 16 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $TightSchema (.'$TightSchema')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TightSchema'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$TightSchema'.'|'.0
        $res = _jm_obj_41($val, $path, $rep);
        if (! $res)
        {
            # .'$TightSchema'.'|'.1
            $res = _jm_obj_38($val, $path, $rep);
            if (! $res)
            {
                # .'$TightSchema'.'|'.2
                $res = _jm_obj_35($val, $path, $rep);
                if (! $res)
                {
                    # .'$TightSchema'.'|'.3
                    $res = _jm_obj_32($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$TightSchema'.'|'.4
                        $res = _jm_obj_29($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$TightSchema'.'|'.5
                            $res = _jm_obj_26($val, $path, $rep);
                            if (! $res)
                            {
                                # .'$TightSchema'.'|'.6
                                $res = _jm_obj_19($val, $path, $rep);
                                if (! $res)
                                {
                                    # .'$TightSchema'.'|'.7
                                    $res = _jm_obj_16($val, $path, $rep);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# check _jm_obj_44_map_$anchor (.'$Schema'.'|'.7.'$anchor')
sub _jm_f_224($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_$comment (.'$Schema'.'|'.7.'$comment')
sub _jm_f_225($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Schema'.'|'.7.'$defs'
sub _jm_obj_45($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.'|'.7.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_44_map_$defs (.'$Schema'.'|'.7.'$defs')
sub _jm_f_226($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.'$defs'
    $res = _jm_obj_45($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_$dynamicAnchor (.'$Schema'.'|'.7.'$dynamicAnchor')
sub _jm_f_227($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_$dynamicRef (.'$Schema'.'|'.7.'$dynamicRef')
sub _jm_f_228($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_$id (.'$Schema'.'|'.7.'$id')
sub _jm_f_229($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_$ref (.'$Schema'.'|'.7.'$ref')
sub _jm_f_230($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_$schema (.'$Schema'.'|'.7.'$schema')
sub _jm_f_231($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$Schema'.'|'.7.'$vocabulary'
sub _jm_obj_46($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Schema'.'|'.7.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_44_map_$vocabulary (.'$Schema'.'|'.7.'$vocabulary')
sub _jm_f_232($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.'$vocabulary'
    $res = _jm_obj_46($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_allOf (.'$Schema'.'|'.7.allOf)
sub _jm_f_233($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.allOf
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_anyOf (.'$Schema'.'|'.7.anyOf)
sub _jm_f_234($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.anyOf
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_const (.'$Schema'.'|'.7.const)
sub _jm_f_235($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.const
    $res = 1;
    return $res;
}

# check _jm_obj_44_map_default (.'$Schema'.'|'.7.default)
sub _jm_f_236($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.default
    $res = 1;
    return $res;
}

# check _jm_obj_44_map_deprecated (.'$Schema'.'|'.7.deprecated)
sub _jm_f_237($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_44_map_description (.'$Schema'.'|'.7.description)
sub _jm_f_238($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_44_map_else (.'$Schema'.'|'.7.else)
sub _jm_f_239($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.else
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_enum (.'$Schema'.'|'.7.enum)
sub _jm_f_240($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.enum
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_44_map_examples (.'$Schema'.'|'.7.examples)
sub _jm_f_241($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_44_map_if (.'$Schema'.'|'.7.if)
sub _jm_f_242($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.if
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_not (.'$Schema'.'|'.7.not)
sub _jm_f_243($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.not
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_oneOf (.'$Schema'.'|'.7.oneOf)
sub _jm_f_244($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.oneOf
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_readOnly (.'$Schema'.'|'.7.readOnly)
sub _jm_f_245($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_44_map_then (.'$Schema'.'|'.7.then)
sub _jm_f_246($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.then
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_title (.'$Schema'.'|'.7.title)
sub _jm_f_247($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_44_map_writeOnly (.'$Schema'.'|'.7.writeOnly)
sub _jm_f_248($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.7.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$Schema'.'|'.7
sub _jm_obj_44($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_44_map{$prop}))
        {
            # handle 25 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_47_map_$anchor (.'$Schema'.'|'.6.'$anchor')
sub _jm_f_249($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_$comment (.'$Schema'.'|'.6.'$comment')
sub _jm_f_250($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Schema'.'|'.6.'$defs'
sub _jm_obj_48($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.'|'.6.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_47_map_$defs (.'$Schema'.'|'.6.'$defs')
sub _jm_f_251($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.'$defs'
    $res = _jm_obj_48($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_$dynamicAnchor (.'$Schema'.'|'.6.'$dynamicAnchor')
sub _jm_f_252($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_$dynamicRef (.'$Schema'.'|'.6.'$dynamicRef')
sub _jm_f_253($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_$id (.'$Schema'.'|'.6.'$id')
sub _jm_f_254($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_$ref (.'$Schema'.'|'.6.'$ref')
sub _jm_f_255($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_$schema (.'$Schema'.'|'.6.'$schema')
sub _jm_f_256($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$Schema'.'|'.6.'$vocabulary'
sub _jm_obj_49($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Schema'.'|'.6.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_47_map_$vocabulary (.'$Schema'.'|'.6.'$vocabulary')
sub _jm_f_257($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.'$vocabulary'
    $res = _jm_obj_49($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_additionalProperties (.'$Schema'.'|'.6.additionalProperties)
sub _jm_f_258($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.additionalProperties
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_default (.'$Schema'.'|'.6.default)
sub _jm_f_259($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.default
    $res = 1;
    return $res;
}

# object .'$Schema'.'|'.6.dependentRequired
sub _jm_obj_50($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.'|'.6.dependentRequired.''
        $res = json_model_10($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_47_map_dependentRequired (.'$Schema'.'|'.6.dependentRequired)
sub _jm_f_260($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.dependentRequired
    $res = _jm_obj_50($val, $path, $rep);
    return $res;
}

# object .'$Schema'.'|'.6.dependentSchemas
sub _jm_obj_51($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.'|'.6.dependentSchemas.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_47_map_dependentSchemas (.'$Schema'.'|'.6.dependentSchemas)
sub _jm_f_261($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.dependentSchemas
    $res = _jm_obj_51($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_deprecated (.'$Schema'.'|'.6.deprecated)
sub _jm_f_262($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_47_map_description (.'$Schema'.'|'.6.description)
sub _jm_f_263($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_47_map_examples (.'$Schema'.'|'.6.examples)
sub _jm_f_264($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_47_map_maxProperties (.'$Schema'.'|'.6.maxProperties)
sub _jm_f_265($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.maxProperties
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_47_map_minProperties (.'$Schema'.'|'.6.minProperties)
sub _jm_f_266($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.minProperties
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# object .'$Schema'.'|'.6.patternProperties
sub _jm_obj_52($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_regex($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Schema'.'|'.6.patternProperties.'$REGEX'
            $res = json_model_16($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_47_map_patternProperties (.'$Schema'.'|'.6.patternProperties)
sub _jm_f_267($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.patternProperties
    $res = _jm_obj_52($val, $path, $rep);
    return $res;
}

# object .'$Schema'.'|'.6.properties
sub _jm_obj_53($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.'|'.6.properties.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_47_map_properties (.'$Schema'.'|'.6.properties)
sub _jm_f_268($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.properties
    $res = _jm_obj_53($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_propertyNames (.'$Schema'.'|'.6.propertyNames)
sub _jm_f_269($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.propertyNames
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_readOnly (.'$Schema'.'|'.6.readOnly)
sub _jm_f_270($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_47_map_required (.'$Schema'.'|'.6.required)
sub _jm_f_271($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.required
    $res = json_model_10($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_title (.'$Schema'.'|'.6.title)
sub _jm_f_272($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_47_map_unevaluatedProperties (.'$Schema'.'|'.6.unevaluatedProperties)
sub _jm_f_273($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.unevaluatedProperties
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_writeOnly (.'$Schema'.'|'.6.writeOnly)
sub _jm_f_274($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.6.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$Schema'.'|'.6
sub _jm_obj_47($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Schema'.'|'.6.type
            $res = jm_is_string($pval) && $pval eq 'object';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_47_map{$prop}))
        {
            # handle 26 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_54_map_$anchor (.'$Schema'.'|'.5.'$anchor')
sub _jm_f_275($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_54_map_$comment (.'$Schema'.'|'.5.'$comment')
sub _jm_f_276($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Schema'.'|'.5.'$defs'
sub _jm_obj_55($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.'|'.5.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_54_map_$defs (.'$Schema'.'|'.5.'$defs')
sub _jm_f_277($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.'$defs'
    $res = _jm_obj_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_54_map_$dynamicAnchor (.'$Schema'.'|'.5.'$dynamicAnchor')
sub _jm_f_278($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_54_map_$dynamicRef (.'$Schema'.'|'.5.'$dynamicRef')
sub _jm_f_279($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_54_map_$id (.'$Schema'.'|'.5.'$id')
sub _jm_f_280($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_54_map_$ref (.'$Schema'.'|'.5.'$ref')
sub _jm_f_281($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_54_map_$schema (.'$Schema'.'|'.5.'$schema')
sub _jm_f_282($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$Schema'.'|'.5.'$vocabulary'
sub _jm_obj_56($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Schema'.'|'.5.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_54_map_$vocabulary (.'$Schema'.'|'.5.'$vocabulary')
sub _jm_f_283($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.'$vocabulary'
    $res = _jm_obj_56($val, $path, $rep);
    return $res;
}

# check _jm_obj_54_map_contains (.'$Schema'.'|'.5.contains)
sub _jm_f_284($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.contains
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_54_map_default (.'$Schema'.'|'.5.default)
sub _jm_f_285($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.default
    $res = 1;
    return $res;
}

# check _jm_obj_54_map_deprecated (.'$Schema'.'|'.5.deprecated)
sub _jm_f_286($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_54_map_description (.'$Schema'.'|'.5.description)
sub _jm_f_287($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_54_map_examples (.'$Schema'.'|'.5.examples)
sub _jm_f_288($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_54_map_items (.'$Schema'.'|'.5.items)
sub _jm_f_289($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.items
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_54_map_maxContains (.'$Schema'.'|'.5.maxContains)
sub _jm_f_290($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.maxContains
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_54_map_maxItems (.'$Schema'.'|'.5.maxItems)
sub _jm_f_291($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.maxItems
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_54_map_minContains (.'$Schema'.'|'.5.minContains)
sub _jm_f_292($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.minContains
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_54_map_minItems (.'$Schema'.'|'.5.minItems)
sub _jm_f_293($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.minItems
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_54_map_prefixItems (.'$Schema'.'|'.5.prefixItems)
sub _jm_f_294($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.prefixItems
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_54_map_readOnly (.'$Schema'.'|'.5.readOnly)
sub _jm_f_295($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_54_map_title (.'$Schema'.'|'.5.title)
sub _jm_f_296($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_54_map_unevaluatedItems (.'$Schema'.'|'.5.unevaluatedItems)
sub _jm_f_297($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.unevaluatedItems
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_54_map_uniqueItems (.'$Schema'.'|'.5.uniqueItems)
sub _jm_f_298($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.uniqueItems
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_54_map_writeOnly (.'$Schema'.'|'.5.writeOnly)
sub _jm_f_299($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.5.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$Schema'.'|'.5
sub _jm_obj_54($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Schema'.'|'.5.type
            $res = jm_is_string($pval) && $pval eq 'array';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_54_map{$prop}))
        {
            # handle 25 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_57_map_$anchor (.'$Schema'.'|'.4.'$anchor')
sub _jm_f_300($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_57_map_$comment (.'$Schema'.'|'.4.'$comment')
sub _jm_f_301($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Schema'.'|'.4.'$defs'
sub _jm_obj_58($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.'|'.4.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_57_map_$defs (.'$Schema'.'|'.4.'$defs')
sub _jm_f_302($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.'$defs'
    $res = _jm_obj_58($val, $path, $rep);
    return $res;
}

# check _jm_obj_57_map_$dynamicAnchor (.'$Schema'.'|'.4.'$dynamicAnchor')
sub _jm_f_303($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_57_map_$dynamicRef (.'$Schema'.'|'.4.'$dynamicRef')
sub _jm_f_304($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_57_map_$id (.'$Schema'.'|'.4.'$id')
sub _jm_f_305($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_57_map_$ref (.'$Schema'.'|'.4.'$ref')
sub _jm_f_306($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_57_map_$schema (.'$Schema'.'|'.4.'$schema')
sub _jm_f_307($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$Schema'.'|'.4.'$vocabulary'
sub _jm_obj_59($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Schema'.'|'.4.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_57_map_$vocabulary (.'$Schema'.'|'.4.'$vocabulary')
sub _jm_f_308($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.'$vocabulary'
    $res = _jm_obj_59($val, $path, $rep);
    return $res;
}

# check _jm_obj_57_map_contentEncoding (.'$Schema'.'|'.4.contentEncoding)
sub _jm_f_309($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.contentEncoding
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_57_map_contentMediaType (.'$Schema'.'|'.4.contentMediaType)
sub _jm_f_310($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.contentMediaType
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_57_map_contentSchema (.'$Schema'.'|'.4.contentSchema)
sub _jm_f_311($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.contentSchema
    $res = json_model_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_57_map_default (.'$Schema'.'|'.4.default)
sub _jm_f_312($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.default
    $res = 1;
    return $res;
}

# check _jm_obj_57_map_deprecated (.'$Schema'.'|'.4.deprecated)
sub _jm_f_313($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_57_map_description (.'$Schema'.'|'.4.description)
sub _jm_f_314($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_57_map_examples (.'$Schema'.'|'.4.examples)
sub _jm_f_315($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_57_map_format (.'$Schema'.'|'.4.format)
sub _jm_f_316($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.format
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_57_map_maxLength (.'$Schema'.'|'.4.maxLength)
sub _jm_f_317($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.maxLength
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_57_map_minLength (.'$Schema'.'|'.4.minLength)
sub _jm_f_318($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.minLength
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_57_map_pattern (.'$Schema'.'|'.4.pattern)
sub _jm_f_319($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.pattern
    $res = jm_is_string($val) && jm_is_valid_regex($val, $path, $rep);
    return $res;
}

# check _jm_obj_57_map_readOnly (.'$Schema'.'|'.4.readOnly)
sub _jm_f_320($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_57_map_title (.'$Schema'.'|'.4.title)
sub _jm_f_321($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_57_map_writeOnly (.'$Schema'.'|'.4.writeOnly)
sub _jm_f_322($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.4.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$Schema'.'|'.4
sub _jm_obj_57($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Schema'.'|'.4.type
            $res = jm_is_string($pval) && $pval eq 'string';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_57_map{$prop}))
        {
            # handle 23 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_60_map_$anchor (.'$Schema'.'|'.3.'$anchor')
sub _jm_f_323($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_60_map_$comment (.'$Schema'.'|'.3.'$comment')
sub _jm_f_324($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Schema'.'|'.3.'$defs'
sub _jm_obj_61($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.'|'.3.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_60_map_$defs (.'$Schema'.'|'.3.'$defs')
sub _jm_f_325($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.'$defs'
    $res = _jm_obj_61($val, $path, $rep);
    return $res;
}

# check _jm_obj_60_map_$dynamicAnchor (.'$Schema'.'|'.3.'$dynamicAnchor')
sub _jm_f_326($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_60_map_$dynamicRef (.'$Schema'.'|'.3.'$dynamicRef')
sub _jm_f_327($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_60_map_$id (.'$Schema'.'|'.3.'$id')
sub _jm_f_328($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_60_map_$ref (.'$Schema'.'|'.3.'$ref')
sub _jm_f_329($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_60_map_$schema (.'$Schema'.'|'.3.'$schema')
sub _jm_f_330($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$Schema'.'|'.3.'$vocabulary'
sub _jm_obj_62($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Schema'.'|'.3.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_60_map_$vocabulary (.'$Schema'.'|'.3.'$vocabulary')
sub _jm_f_331($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.'$vocabulary'
    $res = _jm_obj_62($val, $path, $rep);
    return $res;
}

# check _jm_obj_60_map_default (.'$Schema'.'|'.3.default)
sub _jm_f_332($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.default
    $res = 1;
    return $res;
}

# check _jm_obj_60_map_deprecated (.'$Schema'.'|'.3.deprecated)
sub _jm_f_333($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_60_map_description (.'$Schema'.'|'.3.description)
sub _jm_f_334($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_60_map_examples (.'$Schema'.'|'.3.examples)
sub _jm_f_335($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_60_map_exclusiveMaximum (.'$Schema'.'|'.3.exclusiveMaximum)
sub _jm_f_336($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.exclusiveMaximum
    $res = jm_is_integer($val);
    return $res;
}

# check _jm_obj_60_map_exclusiveMinimum (.'$Schema'.'|'.3.exclusiveMinimum)
sub _jm_f_337($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.exclusiveMinimum
    $res = jm_is_integer($val);
    return $res;
}

# check _jm_obj_60_map_maximum (.'$Schema'.'|'.3.maximum)
sub _jm_f_338($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.maximum
    $res = jm_is_integer($val);
    return $res;
}

# check _jm_obj_60_map_minimum (.'$Schema'.'|'.3.minimum)
sub _jm_f_339($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.minimum
    $res = jm_is_integer($val);
    return $res;
}

# check _jm_obj_60_map_multipleOf (.'$Schema'.'|'.3.multipleOf)
sub _jm_f_340($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.multipleOf
    $res = jm_is_integer($val) && $val >= 1;
    return $res;
}

# check _jm_obj_60_map_readOnly (.'$Schema'.'|'.3.readOnly)
sub _jm_f_341($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_60_map_title (.'$Schema'.'|'.3.title)
sub _jm_f_342($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_60_map_writeOnly (.'$Schema'.'|'.3.writeOnly)
sub _jm_f_343($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.3.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$Schema'.'|'.3
sub _jm_obj_60($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Schema'.'|'.3.type
            $res = jm_is_string($pval) && $pval eq 'integer';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_60_map{$prop}))
        {
            # handle 21 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_63_map_$anchor (.'$Schema'.'|'.2.'$anchor')
sub _jm_f_344($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_63_map_$comment (.'$Schema'.'|'.2.'$comment')
sub _jm_f_345($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Schema'.'|'.2.'$defs'
sub _jm_obj_64($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.'|'.2.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_63_map_$defs (.'$Schema'.'|'.2.'$defs')
sub _jm_f_346($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.'$defs'
    $res = _jm_obj_64($val, $path, $rep);
    return $res;
}

# check _jm_obj_63_map_$dynamicAnchor (.'$Schema'.'|'.2.'$dynamicAnchor')
sub _jm_f_347($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_63_map_$dynamicRef (.'$Schema'.'|'.2.'$dynamicRef')
sub _jm_f_348($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_63_map_$id (.'$Schema'.'|'.2.'$id')
sub _jm_f_349($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_63_map_$ref (.'$Schema'.'|'.2.'$ref')
sub _jm_f_350($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_63_map_$schema (.'$Schema'.'|'.2.'$schema')
sub _jm_f_351($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$Schema'.'|'.2.'$vocabulary'
sub _jm_obj_65($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Schema'.'|'.2.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_63_map_$vocabulary (.'$Schema'.'|'.2.'$vocabulary')
sub _jm_f_352($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.'$vocabulary'
    $res = _jm_obj_65($val, $path, $rep);
    return $res;
}

# check _jm_obj_63_map_default (.'$Schema'.'|'.2.default)
sub _jm_f_353($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.default
    $res = 1;
    return $res;
}

# check _jm_obj_63_map_deprecated (.'$Schema'.'|'.2.deprecated)
sub _jm_f_354($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_63_map_description (.'$Schema'.'|'.2.description)
sub _jm_f_355($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_63_map_examples (.'$Schema'.'|'.2.examples)
sub _jm_f_356($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_63_map_exclusiveMaximum (.'$Schema'.'|'.2.exclusiveMaximum)
sub _jm_f_357($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.exclusiveMaximum
    # .'$Schema'.'|'.2.exclusiveMaximum.'|'.0
    $res = jm_is_integer($val);
    if (! $res)
    {
        # .'$Schema'.'|'.2.exclusiveMaximum.'|'.1
        $res = jm_is_numeric($val);
    }
    return $res;
}

# check _jm_obj_63_map_exclusiveMinimum (.'$Schema'.'|'.2.exclusiveMinimum)
sub _jm_f_358($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.exclusiveMinimum
    # .'$Schema'.'|'.2.exclusiveMinimum.'|'.0
    $res = jm_is_integer($val);
    if (! $res)
    {
        # .'$Schema'.'|'.2.exclusiveMinimum.'|'.1
        $res = jm_is_numeric($val);
    }
    return $res;
}

# check _jm_obj_63_map_maximum (.'$Schema'.'|'.2.maximum)
sub _jm_f_359($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.maximum
    # .'$Schema'.'|'.2.maximum.'|'.0
    $res = jm_is_integer($val);
    if (! $res)
    {
        # .'$Schema'.'|'.2.maximum.'|'.1
        $res = jm_is_numeric($val);
    }
    return $res;
}

# check _jm_obj_63_map_minimum (.'$Schema'.'|'.2.minimum)
sub _jm_f_360($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.minimum
    # .'$Schema'.'|'.2.minimum.'|'.0
    $res = jm_is_integer($val);
    if (! $res)
    {
        # .'$Schema'.'|'.2.minimum.'|'.1
        $res = jm_is_numeric($val);
    }
    return $res;
}

# check _jm_obj_63_map_multipleOf (.'$Schema'.'|'.2.multipleOf)
sub _jm_f_361($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.multipleOf
    # .'$Schema'.'|'.2.multipleOf.'|'.0
    $res = jm_is_integer($val) && $val >= 1;
    if (! $res)
    {
        # .'$Schema'.'|'.2.multipleOf.'|'.1
        $res = jm_is_numeric($val) && $val > 0.0;
    }
    return $res;
}

# check _jm_obj_63_map_readOnly (.'$Schema'.'|'.2.readOnly)
sub _jm_f_362($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_63_map_title (.'$Schema'.'|'.2.title)
sub _jm_f_363($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_63_map_writeOnly (.'$Schema'.'|'.2.writeOnly)
sub _jm_f_364($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.2.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$Schema'.'|'.2
sub _jm_obj_63($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Schema'.'|'.2.type
            $res = jm_is_string($pval) && $pval eq 'number';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_63_map{$prop}))
        {
            # handle 21 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_66_map_$anchor (.'$Schema'.'|'.1.'$anchor')
sub _jm_f_365($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_66_map_$comment (.'$Schema'.'|'.1.'$comment')
sub _jm_f_366($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Schema'.'|'.1.'$defs'
sub _jm_obj_67($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.'|'.1.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_66_map_$defs (.'$Schema'.'|'.1.'$defs')
sub _jm_f_367($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.'$defs'
    $res = _jm_obj_67($val, $path, $rep);
    return $res;
}

# check _jm_obj_66_map_$dynamicAnchor (.'$Schema'.'|'.1.'$dynamicAnchor')
sub _jm_f_368($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_66_map_$dynamicRef (.'$Schema'.'|'.1.'$dynamicRef')
sub _jm_f_369($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_66_map_$id (.'$Schema'.'|'.1.'$id')
sub _jm_f_370($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_66_map_$ref (.'$Schema'.'|'.1.'$ref')
sub _jm_f_371($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_66_map_$schema (.'$Schema'.'|'.1.'$schema')
sub _jm_f_372($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$Schema'.'|'.1.'$vocabulary'
sub _jm_obj_68($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Schema'.'|'.1.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_66_map_$vocabulary (.'$Schema'.'|'.1.'$vocabulary')
sub _jm_f_373($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.'$vocabulary'
    $res = _jm_obj_68($val, $path, $rep);
    return $res;
}

# check _jm_obj_66_map_default (.'$Schema'.'|'.1.default)
sub _jm_f_374($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.default
    $res = 1;
    return $res;
}

# check _jm_obj_66_map_deprecated (.'$Schema'.'|'.1.deprecated)
sub _jm_f_375($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_66_map_description (.'$Schema'.'|'.1.description)
sub _jm_f_376($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_66_map_examples (.'$Schema'.'|'.1.examples)
sub _jm_f_377($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_66_map_readOnly (.'$Schema'.'|'.1.readOnly)
sub _jm_f_378($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_66_map_title (.'$Schema'.'|'.1.title)
sub _jm_f_379($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_66_map_writeOnly (.'$Schema'.'|'.1.writeOnly)
sub _jm_f_380($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.1.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$Schema'.'|'.1
sub _jm_obj_66($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Schema'.'|'.1.type
            $res = jm_is_string($pval) && $pval eq 'boolean';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_66_map{$prop}))
        {
            # handle 16 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_69_map_$anchor (.'$Schema'.'|'.0.'$anchor')
sub _jm_f_381($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.'$anchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_69_map_$comment (.'$Schema'.'|'.0.'$comment')
sub _jm_f_382($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Schema'.'|'.0.'$defs'
sub _jm_obj_70($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.'|'.0.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_69_map_$defs (.'$Schema'.'|'.0.'$defs')
sub _jm_f_383($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.'$defs'
    $res = _jm_obj_70($val, $path, $rep);
    return $res;
}

# check _jm_obj_69_map_$dynamicAnchor (.'$Schema'.'|'.0.'$dynamicAnchor')
sub _jm_f_384($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.'$dynamicAnchor'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_69_map_$dynamicRef (.'$Schema'.'|'.0.'$dynamicRef')
sub _jm_f_385($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.'$dynamicRef'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_69_map_$id (.'$Schema'.'|'.0.'$id')
sub _jm_f_386($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.'$id'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_69_map_$ref (.'$Schema'.'|'.0.'$ref')
sub _jm_f_387($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.'$ref'
    $res = json_model_2($val, $path, $rep);
    return $res;
}

# check _jm_obj_69_map_$schema (.'$Schema'.'|'.0.'$schema')
sub _jm_f_388($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$Schema'.'|'.0.'$vocabulary'
sub _jm_obj_71($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Schema'.'|'.0.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_69_map_$vocabulary (.'$Schema'.'|'.0.'$vocabulary')
sub _jm_f_389($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.'$vocabulary'
    $res = _jm_obj_71($val, $path, $rep);
    return $res;
}

# check _jm_obj_69_map_default (.'$Schema'.'|'.0.default)
sub _jm_f_390($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.default
    $res = 1;
    return $res;
}

# check _jm_obj_69_map_deprecated (.'$Schema'.'|'.0.deprecated)
sub _jm_f_391($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_69_map_description (.'$Schema'.'|'.0.description)
sub _jm_f_392($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_69_map_examples (.'$Schema'.'|'.0.examples)
sub _jm_f_393($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.examples
    $res = jm_is_array($val);
    if ($res)
    {
        # accept any array
        ;
    }
    return $res;
}

# check _jm_obj_69_map_readOnly (.'$Schema'.'|'.0.readOnly)
sub _jm_f_394($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_69_map_title (.'$Schema'.'|'.0.title)
sub _jm_f_395($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_69_map_writeOnly (.'$Schema'.'|'.0.writeOnly)
sub _jm_f_396($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'|'.0.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$Schema'.'|'.0
sub _jm_obj_69($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Schema'.'|'.0.type
            $res = jm_is_string($pval) && $pval eq 'null';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_69_map{$prop}))
        {
            # handle 16 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Schema (.'$Schema')
sub json_model_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Schema'.'|'.0
        $res = _jm_obj_69($val, $path, $rep);
        if (! $res)
        {
            # .'$Schema'.'|'.1
            $res = _jm_obj_66($val, $path, $rep);
            if (! $res)
            {
                # .'$Schema'.'|'.2
                $res = _jm_obj_63($val, $path, $rep);
                if (! $res)
                {
                    # .'$Schema'.'|'.3
                    $res = _jm_obj_60($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Schema'.'|'.4
                        $res = _jm_obj_57($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$Schema'.'|'.5
                            $res = _jm_obj_54($val, $path, $rep);
                            if (! $res)
                            {
                                # .'$Schema'.'|'.6
                                $res = _jm_obj_47($val, $path, $rep);
                                if (! $res)
                                {
                                    # .'$Schema'.'|'.7
                                    $res = _jm_obj_44($val, $path, $rep);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (! $res)
    {
        # .'$Schema'.'|'
        $res = jm_is_boolean($val);
    }
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_16($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_obj_0_map = (
            '$anchor' => \&_jm_f_0,
            '$comment' => \&_jm_f_1,
            '$defs' => \&_jm_f_2,
            '$dynamicAnchor' => \&_jm_f_3,
            '$dynamicRef' => \&_jm_f_4,
            '$id' => \&_jm_f_5,
            '$ref' => \&_jm_f_6,
            '$schema' => \&_jm_f_7,
            '$vocabulary' => \&_jm_f_8,
        );
        %_jm_obj_3_map = (
            'default' => \&_jm_f_9,
            'deprecated' => \&_jm_f_10,
            'description' => \&_jm_f_11,
            'examples' => \&_jm_f_12,
            'readOnly' => \&_jm_f_13,
            'title' => \&_jm_f_14,
            'writeOnly' => \&_jm_f_15,
        );
        %_jm_obj_8_map = (
            'contentEncoding' => \&_jm_f_16,
            'contentMediaType' => \&_jm_f_17,
            'contentSchema' => \&_jm_f_18,
            'format' => \&_jm_f_19,
            'maxLength' => \&_jm_f_20,
            'minLength' => \&_jm_f_21,
            'pattern' => \&_jm_f_22,
        );
        %_jm_obj_9_map = (
            'contains' => \&_jm_f_23,
            'items' => \&_jm_f_24,
            'maxContains' => \&_jm_f_25,
            'maxItems' => \&_jm_f_26,
            'minContains' => \&_jm_f_27,
            'minItems' => \&_jm_f_28,
            'prefixItems' => \&_jm_f_29,
            'unevaluatedItems' => \&_jm_f_30,
            'uniqueItems' => \&_jm_f_31,
        );
        %_jm_obj_10_map = (
            'additionalProperties' => \&_jm_f_32,
            'dependentRequired' => \&_jm_f_33,
            'dependentSchemas' => \&_jm_f_34,
            'maxProperties' => \&_jm_f_35,
            'minProperties' => \&_jm_f_36,
            'patternProperties' => \&_jm_f_37,
            'properties' => \&_jm_f_38,
            'propertyNames' => \&_jm_f_39,
            'required' => \&_jm_f_40,
            'unevaluatedProperties' => \&_jm_f_41,
        );
        %_jm_obj_15_map = (
            'allOf' => \&_jm_f_42,
            'anyOf' => \&_jm_f_43,
            'const' => \&_jm_f_44,
            'else' => \&_jm_f_45,
            'enum' => \&_jm_f_46,
            'if' => \&_jm_f_47,
            'not' => \&_jm_f_48,
            'oneOf' => \&_jm_f_49,
            'then' => \&_jm_f_50,
        );
        %_jm_obj_16_map = (
            '$anchor' => \&_jm_f_51,
            '$comment' => \&_jm_f_52,
            '$defs' => \&_jm_f_53,
            '$dynamicAnchor' => \&_jm_f_54,
            '$dynamicRef' => \&_jm_f_55,
            '$id' => \&_jm_f_56,
            '$ref' => \&_jm_f_57,
            '$schema' => \&_jm_f_58,
            '$vocabulary' => \&_jm_f_59,
            'allOf' => \&_jm_f_60,
            'anyOf' => \&_jm_f_61,
            'const' => \&_jm_f_62,
            'default' => \&_jm_f_63,
            'deprecated' => \&_jm_f_64,
            'description' => \&_jm_f_65,
            'else' => \&_jm_f_66,
            'enum' => \&_jm_f_67,
            'examples' => \&_jm_f_68,
            'if' => \&_jm_f_69,
            'not' => \&_jm_f_70,
            'oneOf' => \&_jm_f_71,
            'readOnly' => \&_jm_f_72,
            'then' => \&_jm_f_73,
            'title' => \&_jm_f_74,
            'writeOnly' => \&_jm_f_75,
        );
        %_jm_obj_19_map = (
            '$anchor' => \&_jm_f_76,
            '$comment' => \&_jm_f_77,
            '$defs' => \&_jm_f_78,
            '$dynamicAnchor' => \&_jm_f_79,
            '$dynamicRef' => \&_jm_f_80,
            '$id' => \&_jm_f_81,
            '$ref' => \&_jm_f_82,
            '$schema' => \&_jm_f_83,
            '$vocabulary' => \&_jm_f_84,
            'additionalProperties' => \&_jm_f_85,
            'default' => \&_jm_f_86,
            'dependentRequired' => \&_jm_f_87,
            'dependentSchemas' => \&_jm_f_88,
            'deprecated' => \&_jm_f_89,
            'description' => \&_jm_f_90,
            'examples' => \&_jm_f_91,
            'maxProperties' => \&_jm_f_92,
            'minProperties' => \&_jm_f_93,
            'patternProperties' => \&_jm_f_94,
            'properties' => \&_jm_f_95,
            'propertyNames' => \&_jm_f_96,
            'readOnly' => \&_jm_f_97,
            'required' => \&_jm_f_98,
            'title' => \&_jm_f_99,
            'unevaluatedProperties' => \&_jm_f_100,
            'writeOnly' => \&_jm_f_101,
        );
        %_jm_obj_26_map = (
            '$anchor' => \&_jm_f_102,
            '$comment' => \&_jm_f_103,
            '$defs' => \&_jm_f_104,
            '$dynamicAnchor' => \&_jm_f_105,
            '$dynamicRef' => \&_jm_f_106,
            '$id' => \&_jm_f_107,
            '$ref' => \&_jm_f_108,
            '$schema' => \&_jm_f_109,
            '$vocabulary' => \&_jm_f_110,
            'contains' => \&_jm_f_111,
            'default' => \&_jm_f_112,
            'deprecated' => \&_jm_f_113,
            'description' => \&_jm_f_114,
            'examples' => \&_jm_f_115,
            'items' => \&_jm_f_116,
            'maxContains' => \&_jm_f_117,
            'maxItems' => \&_jm_f_118,
            'minContains' => \&_jm_f_119,
            'minItems' => \&_jm_f_120,
            'prefixItems' => \&_jm_f_121,
            'readOnly' => \&_jm_f_122,
            'title' => \&_jm_f_123,
            'unevaluatedItems' => \&_jm_f_124,
            'uniqueItems' => \&_jm_f_125,
            'writeOnly' => \&_jm_f_126,
        );
        %_jm_obj_29_map = (
            '$anchor' => \&_jm_f_127,
            '$comment' => \&_jm_f_128,
            '$defs' => \&_jm_f_129,
            '$dynamicAnchor' => \&_jm_f_130,
            '$dynamicRef' => \&_jm_f_131,
            '$id' => \&_jm_f_132,
            '$ref' => \&_jm_f_133,
            '$schema' => \&_jm_f_134,
            '$vocabulary' => \&_jm_f_135,
            'contentEncoding' => \&_jm_f_136,
            'contentMediaType' => \&_jm_f_137,
            'contentSchema' => \&_jm_f_138,
            'default' => \&_jm_f_139,
            'deprecated' => \&_jm_f_140,
            'description' => \&_jm_f_141,
            'examples' => \&_jm_f_142,
            'format' => \&_jm_f_143,
            'maxLength' => \&_jm_f_144,
            'minLength' => \&_jm_f_145,
            'pattern' => \&_jm_f_146,
            'readOnly' => \&_jm_f_147,
            'title' => \&_jm_f_148,
            'writeOnly' => \&_jm_f_149,
        );
        %_jm_obj_32_map = (
            '$anchor' => \&_jm_f_150,
            '$comment' => \&_jm_f_151,
            '$defs' => \&_jm_f_152,
            '$dynamicAnchor' => \&_jm_f_153,
            '$dynamicRef' => \&_jm_f_154,
            '$id' => \&_jm_f_155,
            '$ref' => \&_jm_f_156,
            '$schema' => \&_jm_f_157,
            '$vocabulary' => \&_jm_f_158,
            'default' => \&_jm_f_159,
            'deprecated' => \&_jm_f_160,
            'description' => \&_jm_f_161,
            'examples' => \&_jm_f_162,
            'exclusiveMaximum' => \&_jm_f_163,
            'exclusiveMinimum' => \&_jm_f_164,
            'maximum' => \&_jm_f_165,
            'minimum' => \&_jm_f_166,
            'multipleOf' => \&_jm_f_167,
            'readOnly' => \&_jm_f_168,
            'title' => \&_jm_f_169,
            'writeOnly' => \&_jm_f_170,
        );
        %_jm_obj_35_map = (
            '$anchor' => \&_jm_f_171,
            '$comment' => \&_jm_f_172,
            '$defs' => \&_jm_f_173,
            '$dynamicAnchor' => \&_jm_f_174,
            '$dynamicRef' => \&_jm_f_175,
            '$id' => \&_jm_f_176,
            '$ref' => \&_jm_f_177,
            '$schema' => \&_jm_f_178,
            '$vocabulary' => \&_jm_f_179,
            'default' => \&_jm_f_180,
            'deprecated' => \&_jm_f_181,
            'description' => \&_jm_f_182,
            'examples' => \&_jm_f_183,
            'exclusiveMaximum' => \&_jm_f_184,
            'exclusiveMinimum' => \&_jm_f_185,
            'maximum' => \&_jm_f_186,
            'minimum' => \&_jm_f_187,
            'multipleOf' => \&_jm_f_188,
            'readOnly' => \&_jm_f_189,
            'title' => \&_jm_f_190,
            'writeOnly' => \&_jm_f_191,
        );
        %_jm_obj_38_map = (
            '$anchor' => \&_jm_f_192,
            '$comment' => \&_jm_f_193,
            '$defs' => \&_jm_f_194,
            '$dynamicAnchor' => \&_jm_f_195,
            '$dynamicRef' => \&_jm_f_196,
            '$id' => \&_jm_f_197,
            '$ref' => \&_jm_f_198,
            '$schema' => \&_jm_f_199,
            '$vocabulary' => \&_jm_f_200,
            'default' => \&_jm_f_201,
            'deprecated' => \&_jm_f_202,
            'description' => \&_jm_f_203,
            'examples' => \&_jm_f_204,
            'readOnly' => \&_jm_f_205,
            'title' => \&_jm_f_206,
            'writeOnly' => \&_jm_f_207,
        );
        %_jm_obj_41_map = (
            '$anchor' => \&_jm_f_208,
            '$comment' => \&_jm_f_209,
            '$defs' => \&_jm_f_210,
            '$dynamicAnchor' => \&_jm_f_211,
            '$dynamicRef' => \&_jm_f_212,
            '$id' => \&_jm_f_213,
            '$ref' => \&_jm_f_214,
            '$schema' => \&_jm_f_215,
            '$vocabulary' => \&_jm_f_216,
            'default' => \&_jm_f_217,
            'deprecated' => \&_jm_f_218,
            'description' => \&_jm_f_219,
            'examples' => \&_jm_f_220,
            'readOnly' => \&_jm_f_221,
            'title' => \&_jm_f_222,
            'writeOnly' => \&_jm_f_223,
        );
        %_jm_obj_44_map = (
            '$anchor' => \&_jm_f_224,
            '$comment' => \&_jm_f_225,
            '$defs' => \&_jm_f_226,
            '$dynamicAnchor' => \&_jm_f_227,
            '$dynamicRef' => \&_jm_f_228,
            '$id' => \&_jm_f_229,
            '$ref' => \&_jm_f_230,
            '$schema' => \&_jm_f_231,
            '$vocabulary' => \&_jm_f_232,
            'allOf' => \&_jm_f_233,
            'anyOf' => \&_jm_f_234,
            'const' => \&_jm_f_235,
            'default' => \&_jm_f_236,
            'deprecated' => \&_jm_f_237,
            'description' => \&_jm_f_238,
            'else' => \&_jm_f_239,
            'enum' => \&_jm_f_240,
            'examples' => \&_jm_f_241,
            'if' => \&_jm_f_242,
            'not' => \&_jm_f_243,
            'oneOf' => \&_jm_f_244,
            'readOnly' => \&_jm_f_245,
            'then' => \&_jm_f_246,
            'title' => \&_jm_f_247,
            'writeOnly' => \&_jm_f_248,
        );
        %_jm_obj_47_map = (
            '$anchor' => \&_jm_f_249,
            '$comment' => \&_jm_f_250,
            '$defs' => \&_jm_f_251,
            '$dynamicAnchor' => \&_jm_f_252,
            '$dynamicRef' => \&_jm_f_253,
            '$id' => \&_jm_f_254,
            '$ref' => \&_jm_f_255,
            '$schema' => \&_jm_f_256,
            '$vocabulary' => \&_jm_f_257,
            'additionalProperties' => \&_jm_f_258,
            'default' => \&_jm_f_259,
            'dependentRequired' => \&_jm_f_260,
            'dependentSchemas' => \&_jm_f_261,
            'deprecated' => \&_jm_f_262,
            'description' => \&_jm_f_263,
            'examples' => \&_jm_f_264,
            'maxProperties' => \&_jm_f_265,
            'minProperties' => \&_jm_f_266,
            'patternProperties' => \&_jm_f_267,
            'properties' => \&_jm_f_268,
            'propertyNames' => \&_jm_f_269,
            'readOnly' => \&_jm_f_270,
            'required' => \&_jm_f_271,
            'title' => \&_jm_f_272,
            'unevaluatedProperties' => \&_jm_f_273,
            'writeOnly' => \&_jm_f_274,
        );
        %_jm_obj_54_map = (
            '$anchor' => \&_jm_f_275,
            '$comment' => \&_jm_f_276,
            '$defs' => \&_jm_f_277,
            '$dynamicAnchor' => \&_jm_f_278,
            '$dynamicRef' => \&_jm_f_279,
            '$id' => \&_jm_f_280,
            '$ref' => \&_jm_f_281,
            '$schema' => \&_jm_f_282,
            '$vocabulary' => \&_jm_f_283,
            'contains' => \&_jm_f_284,
            'default' => \&_jm_f_285,
            'deprecated' => \&_jm_f_286,
            'description' => \&_jm_f_287,
            'examples' => \&_jm_f_288,
            'items' => \&_jm_f_289,
            'maxContains' => \&_jm_f_290,
            'maxItems' => \&_jm_f_291,
            'minContains' => \&_jm_f_292,
            'minItems' => \&_jm_f_293,
            'prefixItems' => \&_jm_f_294,
            'readOnly' => \&_jm_f_295,
            'title' => \&_jm_f_296,
            'unevaluatedItems' => \&_jm_f_297,
            'uniqueItems' => \&_jm_f_298,
            'writeOnly' => \&_jm_f_299,
        );
        %_jm_obj_57_map = (
            '$anchor' => \&_jm_f_300,
            '$comment' => \&_jm_f_301,
            '$defs' => \&_jm_f_302,
            '$dynamicAnchor' => \&_jm_f_303,
            '$dynamicRef' => \&_jm_f_304,
            '$id' => \&_jm_f_305,
            '$ref' => \&_jm_f_306,
            '$schema' => \&_jm_f_307,
            '$vocabulary' => \&_jm_f_308,
            'contentEncoding' => \&_jm_f_309,
            'contentMediaType' => \&_jm_f_310,
            'contentSchema' => \&_jm_f_311,
            'default' => \&_jm_f_312,
            'deprecated' => \&_jm_f_313,
            'description' => \&_jm_f_314,
            'examples' => \&_jm_f_315,
            'format' => \&_jm_f_316,
            'maxLength' => \&_jm_f_317,
            'minLength' => \&_jm_f_318,
            'pattern' => \&_jm_f_319,
            'readOnly' => \&_jm_f_320,
            'title' => \&_jm_f_321,
            'writeOnly' => \&_jm_f_322,
        );
        %_jm_obj_60_map = (
            '$anchor' => \&_jm_f_323,
            '$comment' => \&_jm_f_324,
            '$defs' => \&_jm_f_325,
            '$dynamicAnchor' => \&_jm_f_326,
            '$dynamicRef' => \&_jm_f_327,
            '$id' => \&_jm_f_328,
            '$ref' => \&_jm_f_329,
            '$schema' => \&_jm_f_330,
            '$vocabulary' => \&_jm_f_331,
            'default' => \&_jm_f_332,
            'deprecated' => \&_jm_f_333,
            'description' => \&_jm_f_334,
            'examples' => \&_jm_f_335,
            'exclusiveMaximum' => \&_jm_f_336,
            'exclusiveMinimum' => \&_jm_f_337,
            'maximum' => \&_jm_f_338,
            'minimum' => \&_jm_f_339,
            'multipleOf' => \&_jm_f_340,
            'readOnly' => \&_jm_f_341,
            'title' => \&_jm_f_342,
            'writeOnly' => \&_jm_f_343,
        );
        %_jm_obj_63_map = (
            '$anchor' => \&_jm_f_344,
            '$comment' => \&_jm_f_345,
            '$defs' => \&_jm_f_346,
            '$dynamicAnchor' => \&_jm_f_347,
            '$dynamicRef' => \&_jm_f_348,
            '$id' => \&_jm_f_349,
            '$ref' => \&_jm_f_350,
            '$schema' => \&_jm_f_351,
            '$vocabulary' => \&_jm_f_352,
            'default' => \&_jm_f_353,
            'deprecated' => \&_jm_f_354,
            'description' => \&_jm_f_355,
            'examples' => \&_jm_f_356,
            'exclusiveMaximum' => \&_jm_f_357,
            'exclusiveMinimum' => \&_jm_f_358,
            'maximum' => \&_jm_f_359,
            'minimum' => \&_jm_f_360,
            'multipleOf' => \&_jm_f_361,
            'readOnly' => \&_jm_f_362,
            'title' => \&_jm_f_363,
            'writeOnly' => \&_jm_f_364,
        );
        %_jm_obj_66_map = (
            '$anchor' => \&_jm_f_365,
            '$comment' => \&_jm_f_366,
            '$defs' => \&_jm_f_367,
            '$dynamicAnchor' => \&_jm_f_368,
            '$dynamicRef' => \&_jm_f_369,
            '$id' => \&_jm_f_370,
            '$ref' => \&_jm_f_371,
            '$schema' => \&_jm_f_372,
            '$vocabulary' => \&_jm_f_373,
            'default' => \&_jm_f_374,
            'deprecated' => \&_jm_f_375,
            'description' => \&_jm_f_376,
            'examples' => \&_jm_f_377,
            'readOnly' => \&_jm_f_378,
            'title' => \&_jm_f_379,
            'writeOnly' => \&_jm_f_380,
        );
        %_jm_obj_69_map = (
            '$anchor' => \&_jm_f_381,
            '$comment' => \&_jm_f_382,
            '$defs' => \&_jm_f_383,
            '$dynamicAnchor' => \&_jm_f_384,
            '$dynamicRef' => \&_jm_f_385,
            '$id' => \&_jm_f_386,
            '$ref' => \&_jm_f_387,
            '$schema' => \&_jm_f_388,
            '$vocabulary' => \&_jm_f_389,
            'default' => \&_jm_f_390,
            'deprecated' => \&_jm_f_391,
            'description' => \&_jm_f_392,
            'examples' => \&_jm_f_393,
            'readOnly' => \&_jm_f_394,
            'title' => \&_jm_f_395,
            'writeOnly' => \&_jm_f_396,
        );
        %check_model_map = (
            '' => \&json_model_16,
            'URI-REFERENCE' => \&json_model_2,
            'core' => \&json_model_3,
            'meta' => \&json_model_4,
            'Null' => \&json_model_5,
            'Boolean' => \&json_model_6,
            'Number' => \&json_model_7,
            'Integer' => \&json_model_8,
            'String' => \&json_model_9,
            'stringArray' => \&json_model_10,
            'schemaArray' => \&json_model_11,
            'Array' => \&json_model_12,
            'Object' => \&json_model_13,
            'Misc' => \&json_model_14,
            'TightSchema' => \&json_model_15,
            'Schema' => \&json_model_16,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_obj_0_map = ();
        %_jm_obj_3_map = ();
        %_jm_obj_8_map = ();
        %_jm_obj_9_map = ();
        %_jm_obj_10_map = ();
        %_jm_obj_15_map = ();
        %_jm_obj_16_map = ();
        %_jm_obj_19_map = ();
        %_jm_obj_26_map = ();
        %_jm_obj_29_map = ();
        %_jm_obj_32_map = ();
        %_jm_obj_35_map = ();
        %_jm_obj_38_map = ();
        %_jm_obj_41_map = ();
        %_jm_obj_44_map = ();
        %_jm_obj_47_map = ();
        %_jm_obj_54_map = ();
        %_jm_obj_57_map = ();
        %_jm_obj_60_map = ();
        %_jm_obj_63_map = ();
        %_jm_obj_66_map = ();
        %_jm_obj_69_map = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
