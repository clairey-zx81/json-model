#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_2($$$);
sub json_model_3($$$);
sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
my %json_model_4_map;
sub json_model_4($$$);
sub _jm_f_5($$$);
sub _jm_f_6($$$);
sub _jm_f_7($$$);
sub _jm_f_8($$$);
sub _jm_f_9($$$);
sub _jm_f_10($$$);
sub _jm_f_11($$$);
my %json_model_5_map;
sub json_model_5($$$);
sub json_model_6($$$);
sub json_model_7($$$);
my %_jm_cst_0;
sub json_model_8($$$);
sub json_model_9($$$);
sub json_model_10($$$);
sub json_model_11($$$);
sub _jm_f_12($$$);
sub _jm_f_13($$$);
sub _jm_f_14($$$);
sub _jm_f_15($$$);
sub _jm_f_16($$$);
sub _jm_f_17($$$);
sub _jm_f_18($$$);
sub _jm_f_19($$$);
sub _jm_f_20($$$);
sub _jm_f_21($$$);
sub _jm_f_22($$$);
my %json_model_12_map;
sub json_model_12($$$);
sub json_model_13($$$);
sub _jm_f_23($$$);
sub _jm_f_24($$$);
sub _jm_f_25($$$);
sub _jm_f_26($$$);
my %json_model_14_map;
sub json_model_14($$$);
sub _jm_f_27($$$);
sub _jm_f_28($$$);
sub _jm_f_29($$$);
sub _jm_f_30($$$);
sub _jm_f_31($$$);
sub _jm_f_32($$$);
sub _jm_f_33($$$);
sub _jm_f_34($$$);
sub _jm_f_35($$$);
sub _jm_f_36($$$);
sub _jm_f_37($$$);
sub _jm_f_38($$$);
sub _jm_f_39($$$);
sub _jm_f_40($$$);
sub _jm_f_41($$$);
sub _jm_f_42($$$);
sub _jm_f_43($$$);
sub _jm_f_44($$$);
sub _jm_f_45($$$);
sub _jm_f_46($$$);
sub _jm_f_47($$$);
sub _jm_f_48($$$);
sub _jm_f_49($$$);
sub _jm_f_50($$$);
sub _jm_f_51($$$);
sub _jm_f_52($$$);
sub _jm_f_53($$$);
sub _jm_f_54($$$);
sub _jm_f_55($$$);
sub _jm_f_56($$$);
my %json_model_15_map;
sub json_model_15($$$);
sub json_model_16($$$);
sub json_model_1($$$);
my %check_model_map;

# check $URI-REFERENCE (.'$URI-REFERENCE')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$URI-REFERENCE'
    return jm_is_string($val);
}

# check $id (.'$id')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$id'
    return json_model_2($val, $path, $rep);
}

# check json_model_4_map_$comment (.'$core'.'$comment')
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$core'.'$comment'
    return jm_is_string($val);
}

# check json_model_4_map_$defs (.'$core'.'$defs')
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$core'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$core'.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_4_map_$recursiveAnchor (.'$core'.'$recursiveAnchor')
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$core'.'$recursiveAnchor'
    return jm_is_boolean($val);
}

# check json_model_4_map_$schema (.'$core'.'$schema')
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$core'.'$schema'
    return jm_is_string($val) && $val eq 'https://json-schema.org/draft/2019-09/schema';
}

# check json_model_4_map_$vocabulary (.'$core'.'$vocabulary')
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$core'.'$vocabulary'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$core'.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}


# check $core (.'$core')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$core'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_4_map{$prop}))
        {
            # handle 9 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_5_map_default (.'$meta'.default)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$meta'.default
    return 1;
}

# check json_model_5_map_deprecated (.'$meta'.deprecated)
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$meta'.deprecated
    return jm_is_boolean($val);
}

# check json_model_5_map_description (.'$meta'.description)
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$meta'.description
    return jm_is_string($val);
}

# check json_model_5_map_examples (.'$meta'.examples)
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$meta'.examples
    return jm_is_array($val);
}

# check json_model_5_map_readOnly (.'$meta'.readOnly)
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$meta'.readOnly
    return jm_is_boolean($val);
}

# check json_model_5_map_title (.'$meta'.title)
sub _jm_f_10($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$meta'.title
    return jm_is_string($val);
}

# check json_model_5_map_writeOnly (.'$meta'.writeOnly)
sub _jm_f_11($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$meta'.writeOnly
    return jm_is_boolean($val);
}


# check $meta (.'$meta')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$meta'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_5_map{$prop}))
        {
            # handle 7 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $content (.'$content')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$content'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'contentEncoding')
        {
            # handle may contentEncoding property
            # .'$content'.contentEncoding
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'contentMediaType')
        {
            # handle may contentMediaType property
            # .'$content'.contentMediaType
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'contentSchema')
        {
            # handle may contentSchema property
            # .'$content'.contentSchema
            $res = json_model_16($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $format (.'$format')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$format'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'format')
        {
            # handle may format property
            # .'$format'.format
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}


# check $simpleTypes (.'$simpleTypes')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$simpleTypes'
    return jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_0{$val};
}

# check $simpleTypesArray (.'$simpleTypesArray')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$simpleTypesArray'
    # .'$simpleTypesArray'.'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$simpleTypesArray'.'@'.0
            $res = json_model_8($arr_0_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_0 = scalar @$val;
        $res = jm_is_unique_array($val, $path, $rep) && $ival_0 >= 1;
    }
    return $res;
}

# check $stringArray (.'$stringArray')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$stringArray'
    # .'$stringArray'.'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_1_idx (0 .. $#$val)
        {
            my $arr_1_item = $$val[$arr_1_idx];
            # .'$stringArray'.'@'.0
            $res = jm_is_string($arr_1_item);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        $res = jm_is_unique_array($val, $path, $rep);
    }
    return $res;
}

# check $nonNegativeInteger (.'$nonNegativeInteger')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$nonNegativeInteger'
    return jm_is_integer($val) && $val >= 0;
}

# check json_model_12_map_const (.'$validation'.const)
sub _jm_f_12($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.const
    return 1;
}

# check json_model_12_map_dependentRequired (.'$validation'.dependentRequired)
sub _jm_f_13($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.dependentRequired
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$validation'.dependentRequired.''
        $res = json_model_10($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_12_map_enum (.'$validation'.enum)
sub _jm_f_14($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.enum
    return jm_is_array($val);
}

# check json_model_12_map_exclusiveMaximum (.'$validation'.exclusiveMaximum)
sub _jm_f_15($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.exclusiveMaximum
    return jm_is_numeric($val);
}

# check json_model_12_map_exclusiveMinimum (.'$validation'.exclusiveMinimum)
sub _jm_f_16($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.exclusiveMinimum
    return jm_is_numeric($val);
}

# check json_model_12_map_maximum (.'$validation'.maximum)
sub _jm_f_17($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.maximum
    return jm_is_numeric($val);
}

# check json_model_12_map_minimum (.'$validation'.minimum)
sub _jm_f_18($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.minimum
    return jm_is_numeric($val);
}

# check json_model_12_map_multipleOf (.'$validation'.multipleOf)
sub _jm_f_19($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.multipleOf
    return jm_is_numeric($val) && $val > 0.0;
}

# check json_model_12_map_pattern (.'$validation'.pattern)
sub _jm_f_20($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.pattern
    return jm_is_string($val) && jm_is_valid_regex($val, $path, $rep);
}

# check json_model_12_map_type (.'$validation'.type)
sub _jm_f_21($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.type
    # .'$validation'.type.'|'.0
    # .'$validation'.type.'|'.1
    return json_model_8($val, $path, $rep) || json_model_9($val, $path, $rep);
}

# check json_model_12_map_uniqueItems (.'$validation'.uniqueItems)
sub _jm_f_22($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.uniqueItems
    return jm_is_boolean($val);
}


# check $validation (.'$validation')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_12_map{$prop}))
        {
            # handle 20 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $schemaArray (.'$schemaArray')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schemaArray'
    # .'$schemaArray'.'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_2_idx (0 .. $#$val)
        {
            my $arr_2_item = $$val[$arr_2_idx];
            # .'$schemaArray'.'@'.0
            $res = json_model_16($arr_2_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_1 = scalar @$val;
        $res = $ival_1 >= 1;
    }
    return $res;
}

# check json_model_14_map_dependentSchemas (.'$applicator'.dependentSchemas)
sub _jm_f_23($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$applicator'.dependentSchemas
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$applicator'.dependentSchemas.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_14_map_items (.'$applicator'.items)
sub _jm_f_24($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$applicator'.items
    # .'$applicator'.items.'|'.0
    # .'$applicator'.items.'|'.1
    return json_model_16($val, $path, $rep) || json_model_13($val, $path, $rep);
}

# check json_model_14_map_patternProperties (.'$applicator'.patternProperties)
sub _jm_f_25($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$applicator'.patternProperties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_regex($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$applicator'.patternProperties.'$REGEX'
            $res = json_model_16($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_14_map_properties (.'$applicator'.properties)
sub _jm_f_26($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$applicator'.properties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$applicator'.properties.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# check $applicator (.'$applicator')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$applicator'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_14_map{$prop}))
        {
            # handle 17 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_15_map_$comment (.'$ObjectSchema'.'$comment')
sub _jm_f_27($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.'$comment'
    return jm_is_string($val);
}

# check json_model_15_map_$defs (.'$ObjectSchema'.'$defs')
sub _jm_f_28($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.'$defs'.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_15_map_$recursiveAnchor (.'$ObjectSchema'.'$recursiveAnchor')
sub _jm_f_29($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.'$recursiveAnchor'
    return jm_is_boolean($val);
}

# check json_model_15_map_$schema (.'$ObjectSchema'.'$schema')
sub _jm_f_30($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.'$schema'
    return jm_is_string($val) && $val eq 'https://json-schema.org/draft/2019-09/schema';
}

# check json_model_15_map_$vocabulary (.'$ObjectSchema'.'$vocabulary')
sub _jm_f_31($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.'$vocabulary'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$ObjectSchema'.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_15_map_const (.'$ObjectSchema'.const)
sub _jm_f_32($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.const
    return 1;
}

# check json_model_15_map_contentEncoding (.'$ObjectSchema'.contentEncoding)
sub _jm_f_33($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.contentEncoding
    return jm_is_string($val);
}

# check json_model_15_map_contentMediaType (.'$ObjectSchema'.contentMediaType)
sub _jm_f_34($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.contentMediaType
    return jm_is_string($val);
}

# check json_model_15_map_default (.'$ObjectSchema'.default)
sub _jm_f_35($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.default
    return 1;
}

# check json_model_15_map_dependentRequired (.'$ObjectSchema'.dependentRequired)
sub _jm_f_36($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.dependentRequired
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.dependentRequired.''
        $res = json_model_10($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_15_map_dependentSchemas (.'$ObjectSchema'.dependentSchemas)
sub _jm_f_37($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.dependentSchemas
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.dependentSchemas.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_15_map_deprecated (.'$ObjectSchema'.deprecated)
sub _jm_f_38($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.deprecated
    return jm_is_boolean($val);
}

# check json_model_15_map_description (.'$ObjectSchema'.description)
sub _jm_f_39($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.description
    return jm_is_string($val);
}

# check json_model_15_map_enum (.'$ObjectSchema'.enum)
sub _jm_f_40($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.enum
    return jm_is_array($val);
}

# check json_model_15_map_examples (.'$ObjectSchema'.examples)
sub _jm_f_41($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.examples
    return jm_is_array($val);
}

# check json_model_15_map_exclusiveMaximum (.'$ObjectSchema'.exclusiveMaximum)
sub _jm_f_42($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.exclusiveMaximum
    return jm_is_numeric($val);
}

# check json_model_15_map_exclusiveMinimum (.'$ObjectSchema'.exclusiveMinimum)
sub _jm_f_43($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.exclusiveMinimum
    return jm_is_numeric($val);
}

# check json_model_15_map_format (.'$ObjectSchema'.format)
sub _jm_f_44($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.format
    return jm_is_string($val);
}

# check json_model_15_map_items (.'$ObjectSchema'.items)
sub _jm_f_45($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.items
    # .'$ObjectSchema'.items.'|'.0
    # .'$ObjectSchema'.items.'|'.1
    return json_model_16($val, $path, $rep) || json_model_13($val, $path, $rep);
}

# check json_model_15_map_maximum (.'$ObjectSchema'.maximum)
sub _jm_f_46($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.maximum
    return jm_is_numeric($val);
}

# check json_model_15_map_minimum (.'$ObjectSchema'.minimum)
sub _jm_f_47($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.minimum
    return jm_is_numeric($val);
}

# check json_model_15_map_multipleOf (.'$ObjectSchema'.multipleOf)
sub _jm_f_48($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.multipleOf
    return jm_is_numeric($val) && $val > 0.0;
}

# check json_model_15_map_pattern (.'$ObjectSchema'.pattern)
sub _jm_f_49($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.pattern
    return jm_is_string($val) && jm_is_valid_regex($val, $path, $rep);
}

# check json_model_15_map_patternProperties (.'$ObjectSchema'.patternProperties)
sub _jm_f_50($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.patternProperties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_regex($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$ObjectSchema'.patternProperties.'$REGEX'
            $res = json_model_16($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_15_map_properties (.'$ObjectSchema'.properties)
sub _jm_f_51($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.properties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.properties.''
        $res = json_model_16($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_15_map_readOnly (.'$ObjectSchema'.readOnly)
sub _jm_f_52($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.readOnly
    return jm_is_boolean($val);
}

# check json_model_15_map_title (.'$ObjectSchema'.title)
sub _jm_f_53($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.title
    return jm_is_string($val);
}

# check json_model_15_map_type (.'$ObjectSchema'.type)
sub _jm_f_54($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.type
    # .'$ObjectSchema'.type.'|'.0
    # .'$ObjectSchema'.type.'|'.1
    return json_model_8($val, $path, $rep) || json_model_9($val, $path, $rep);
}

# check json_model_15_map_uniqueItems (.'$ObjectSchema'.uniqueItems)
sub _jm_f_55($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.uniqueItems
    return jm_is_boolean($val);
}

# check json_model_15_map_writeOnly (.'$ObjectSchema'.writeOnly)
sub _jm_f_56($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'.writeOnly
    return jm_is_boolean($val);
}


# check $ObjectSchema (.'$ObjectSchema')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_15_map{$prop}))
        {
            # handle 57 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Schema (.'$Schema')
sub json_model_16($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Schema'
    # .'$Schema'.'|'.0
    # .'$Schema'.'|'.1
    return jm_is_boolean($val) || json_model_15($val, $path, $rep);
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    # JSON Model for JSON Schema 2019-09 (aka 08) [JSON_MODEL_LOOSE_NUMBER]
    # .
    # .'@'
    return json_model_16($val, $path, $rep);
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %json_model_4_map = (
            '$anchor' => \&json_model_2,
            '$comment' => \&_jm_f_0,
            '$defs' => \&_jm_f_1,
            '$id' => \&json_model_2,
            '$recursiveAnchor' => \&_jm_f_2,
            '$recursiveRef' => \&json_model_2,
            '$ref' => \&json_model_2,
            '$schema' => \&_jm_f_3,
            '$vocabulary' => \&_jm_f_4,
        );
        %json_model_5_map = (
            'default' => \&_jm_f_5,
            'deprecated' => \&_jm_f_6,
            'description' => \&_jm_f_7,
            'examples' => \&_jm_f_8,
            'readOnly' => \&_jm_f_9,
            'title' => \&_jm_f_10,
            'writeOnly' => \&_jm_f_11,
        );
        %_jm_cst_0 = (
            'array' => 1,
            'boolean' => 1,
            'integer' => 1,
            'null' => 1,
            'number' => 1,
            'object' => 1,
            'string' => 1,
        );
        %json_model_12_map = (
            'const' => \&_jm_f_12,
            'dependentRequired' => \&_jm_f_13,
            'enum' => \&_jm_f_14,
            'exclusiveMaximum' => \&_jm_f_15,
            'exclusiveMinimum' => \&_jm_f_16,
            'maxContains' => \&json_model_11,
            'maxItems' => \&json_model_11,
            'maxLength' => \&json_model_11,
            'maxProperties' => \&json_model_11,
            'maximum' => \&_jm_f_17,
            'minContains' => \&json_model_11,
            'minItems' => \&json_model_11,
            'minLength' => \&json_model_11,
            'minProperties' => \&json_model_11,
            'minimum' => \&_jm_f_18,
            'multipleOf' => \&_jm_f_19,
            'pattern' => \&_jm_f_20,
            'required' => \&json_model_10,
            'type' => \&_jm_f_21,
            'uniqueItems' => \&_jm_f_22,
        );
        %json_model_14_map = (
            'additionalItems' => \&json_model_16,
            'additionalProperties' => \&json_model_16,
            'allOf' => \&json_model_13,
            'anyOf' => \&json_model_13,
            'contains' => \&json_model_16,
            'dependentSchemas' => \&_jm_f_23,
            'else' => \&json_model_16,
            'if' => \&json_model_16,
            'items' => \&_jm_f_24,
            'not' => \&json_model_16,
            'oneOf' => \&json_model_13,
            'patternProperties' => \&_jm_f_25,
            'properties' => \&_jm_f_26,
            'propertyNames' => \&json_model_16,
            'then' => \&json_model_16,
            'unevaluatedItems' => \&json_model_16,
            'unevaluatedProperties' => \&json_model_16,
        );
        %json_model_15_map = (
            '$anchor' => \&json_model_2,
            '$comment' => \&_jm_f_27,
            '$defs' => \&_jm_f_28,
            '$id' => \&json_model_2,
            '$recursiveAnchor' => \&_jm_f_29,
            '$recursiveRef' => \&json_model_2,
            '$ref' => \&json_model_2,
            '$schema' => \&_jm_f_30,
            '$vocabulary' => \&_jm_f_31,
            'additionalItems' => \&json_model_16,
            'additionalProperties' => \&json_model_16,
            'allOf' => \&json_model_13,
            'anyOf' => \&json_model_13,
            'const' => \&_jm_f_32,
            'contains' => \&json_model_16,
            'contentEncoding' => \&_jm_f_33,
            'contentMediaType' => \&_jm_f_34,
            'contentSchema' => \&json_model_16,
            'default' => \&_jm_f_35,
            'dependentRequired' => \&_jm_f_36,
            'dependentSchemas' => \&_jm_f_37,
            'deprecated' => \&_jm_f_38,
            'description' => \&_jm_f_39,
            'else' => \&json_model_16,
            'enum' => \&_jm_f_40,
            'examples' => \&_jm_f_41,
            'exclusiveMaximum' => \&_jm_f_42,
            'exclusiveMinimum' => \&_jm_f_43,
            'format' => \&_jm_f_44,
            'if' => \&json_model_16,
            'items' => \&_jm_f_45,
            'maxContains' => \&json_model_11,
            'maxItems' => \&json_model_11,
            'maxLength' => \&json_model_11,
            'maxProperties' => \&json_model_11,
            'maximum' => \&_jm_f_46,
            'minContains' => \&json_model_11,
            'minItems' => \&json_model_11,
            'minLength' => \&json_model_11,
            'minProperties' => \&json_model_11,
            'minimum' => \&_jm_f_47,
            'multipleOf' => \&_jm_f_48,
            'not' => \&json_model_16,
            'oneOf' => \&json_model_13,
            'pattern' => \&_jm_f_49,
            'patternProperties' => \&_jm_f_50,
            'properties' => \&_jm_f_51,
            'propertyNames' => \&json_model_16,
            'readOnly' => \&_jm_f_52,
            'required' => \&json_model_10,
            'then' => \&json_model_16,
            'title' => \&_jm_f_53,
            'type' => \&_jm_f_54,
            'unevaluatedItems' => \&json_model_16,
            'unevaluatedProperties' => \&json_model_16,
            'uniqueItems' => \&_jm_f_55,
            'writeOnly' => \&_jm_f_56,
        );
        %check_model_map = (
            '' => \&json_model_1,
            'URI-REFERENCE' => \&json_model_2,
            'id' => \&json_model_2,
            'core' => \&json_model_4,
            'meta' => \&json_model_5,
            'content' => \&json_model_6,
            'format' => \&json_model_7,
            'simpleTypes' => \&json_model_8,
            'simpleTypesArray' => \&json_model_9,
            'stringArray' => \&json_model_10,
            'nonNegativeInteger' => \&json_model_11,
            'validation' => \&json_model_12,
            'schemaArray' => \&json_model_13,
            'applicator' => \&json_model_14,
            'ObjectSchema' => \&json_model_15,
            'Schema' => \&json_model_16,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %json_model_4_map = ();
        %json_model_5_map = ();
        %_jm_cst_0 = ();
        %json_model_12_map = ();
        %json_model_14_map = ();
        %json_model_15_map = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
