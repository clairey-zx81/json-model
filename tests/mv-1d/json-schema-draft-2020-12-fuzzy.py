#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

json_model_4_map: PropMap
json_model_5_map: PropMap
_jm_cst_0: set[str]
json_model_13_map: PropMap
json_model_15_map: PropMap
json_model_16_map: PropMap
check_model_map: PropMap

# check $URI-REFERENCE (.'$URI-REFERENCE')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$URI-REFERENCE'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$URI-REFERENCE']", path))
    return res

# check json_model_4_map_$comment (.'$core'.'$comment')
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$core'.'$comment'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$core'.'$comment']", path))
    return res

# check json_model_4_map_$defs (.'$core'.'$defs')
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$core'.'$defs'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$core'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$core'.'$defs'.''
        res = json_model_17(pval, lpath_1 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$core'.'$defs'.'']", lpath_1 if path is not None else None))
            return False
    return True

# check json_model_4_map_$schema (.'$core'.'$schema')
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$core'.'$schema'
    res: bool = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URL [.'$core'.'$schema']", path))
    return res

# check json_model_4_map_$vocabulary (.'$core'.'$vocabulary')
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$core'.'$vocabulary'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$core'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if is_valid_url(prop, lpath_2 if path is not None else None, rep):
            # handle 1 key props
            # .'$core'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$core'.'$vocabulary'.'$URI']", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$core'.'$vocabulary']", lpath_2 if path is not None else None))
            return False
    return True


# check $core (.'$core')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$core'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$core']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := json_model_4_map.get(prop):
            # handle 9 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$core']", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$core']", lpath_0 if path is not None else None))
            return False
    return True

# check json_model_5_map_default (.'$meta'.default)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$meta'.default
    return True

# check json_model_5_map_deprecated (.'$meta'.deprecated)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$meta'.deprecated
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$meta'.deprecated]", path))
    return res

# check json_model_5_map_description (.'$meta'.description)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$meta'.description
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$meta'.description]", path))
    return res

# check json_model_5_map_examples (.'$meta'.examples)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$meta'.examples
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$meta'.examples]", path))
    return res

# check json_model_5_map_readOnly (.'$meta'.readOnly)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$meta'.readOnly
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$meta'.readOnly]", path))
    return res

# check json_model_5_map_title (.'$meta'.title)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$meta'.title
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$meta'.title]", path))
    return res

# check json_model_5_map_writeOnly (.'$meta'.writeOnly)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$meta'.writeOnly
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$meta'.writeOnly]", path))
    return res


# check $meta (.'$meta')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$meta'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$meta']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if pfun := json_model_5_map.get(prop):
            # handle 7 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_3 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$meta']", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$meta']", lpath_3 if path is not None else None))
            return False
    return True

# check $content (.'$content')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$content'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$content']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "contentEncoding":
            # handle may contentEncoding property
            # .'$content'.contentEncoding
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$content'.contentEncoding]", lpath_4 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$content'.contentEncoding]", lpath_4 if path is not None else None))
                return False
        elif prop == "contentMediaType":
            # handle may contentMediaType property
            # .'$content'.contentMediaType
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$content'.contentMediaType]", lpath_4 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$content'.contentMediaType]", lpath_4 if path is not None else None))
                return False
        elif prop == "contentSchema":
            # handle may contentSchema property
            # .'$content'.contentSchema
            res = json_model_17(pval, lpath_4 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$content'.contentSchema]", lpath_4 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$content'.contentSchema]", lpath_4 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$content']", lpath_4 if path is not None else None))
            return False
    return True

# check $unevaluated (.'$unevaluated')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$unevaluated'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$unevaluated']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "unevaluatedItems":
            # handle may unevaluatedItems property
            # .'$unevaluated'.unevaluatedItems
            res = json_model_17(pval, lpath_5 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$unevaluated'.unevaluatedItems]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$unevaluated'.unevaluatedItems]", lpath_5 if path is not None else None))
                return False
        elif prop == "unevaluatedProperties":
            # handle may unevaluatedProperties property
            # .'$unevaluated'.unevaluatedProperties
            res = json_model_17(pval, lpath_5 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$unevaluated'.unevaluatedProperties]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$unevaluated'.unevaluatedProperties]", lpath_5 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$unevaluated']", lpath_5 if path is not None else None))
            return False
    return True

# check $format (.'$format')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$format'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$format']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "format":
            # handle may format property
            # .'$format'.format
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$format'.format]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$format'.format]", lpath_6 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$format']", lpath_6 if path is not None else None))
            return False
    return True


# check $simpleTypes (.'$simpleTypes')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$simpleTypes'
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$simpleTypes'.'|']", path))
    return res

# check $simpleTypesArray (.'$simpleTypesArray')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$simpleTypesArray'
    # .'$simpleTypesArray'.'@'
    res: bool = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$simpleTypesArray'.'@'.0
            res = json_model_9(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $simpleTypes [.'$simpleTypesArray'.'@'.0]", arr_0_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$simpleTypesArray'.'@']", path))
    if res:
        ival_0: int = len(val)
        res = is_unique_array(val, path, rep) and ival_0 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$simpleTypesArray']", path))
    return res

# check $stringArray (.'$stringArray')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$stringArray'
    # .'$stringArray'.'@'
    res: bool = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$stringArray'.'@'.0
            res = isinstance(arr_1_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$stringArray'.'@'.0]", arr_1_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$stringArray'.'@']", path))
    if res:
        res = is_unique_array(val, path, rep)
        if not res:
            rep is None or rep.append(("constraints failed [.'$stringArray']", path))
    return res

# check $nonNegativeInteger (.'$nonNegativeInteger')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$nonNegativeInteger'
    res: bool = ((isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val))) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$nonNegativeInteger']", path))
    return res

# check json_model_13_map_const (.'$validation'.const)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$validation'.const
    return True

# check json_model_13_map_dependentRequired (.'$validation'.dependentRequired)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$validation'.dependentRequired
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$validation'.dependentRequired]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$validation'.dependentRequired.''
        res = json_model_11(pval, lpath_8 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $stringArray [.'$validation'.dependentRequired.'']", lpath_8 if path is not None else None))
            return False
    return True

# check json_model_13_map_enum (.'$validation'.enum)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$validation'.enum
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$validation'.enum]", path))
    return res

# check json_model_13_map_exclusiveMaximum (.'$validation'.exclusiveMaximum)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$validation'.exclusiveMaximum
    res: bool = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$validation'.exclusiveMaximum]", path))
    return res

# check json_model_13_map_exclusiveMinimum (.'$validation'.exclusiveMinimum)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$validation'.exclusiveMinimum
    res: bool = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$validation'.exclusiveMinimum]", path))
    return res

# check json_model_13_map_maximum (.'$validation'.maximum)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$validation'.maximum
    res: bool = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$validation'.maximum]", path))
    return res

# check json_model_13_map_minimum (.'$validation'.minimum)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$validation'.minimum
    res: bool = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$validation'.minimum]", path))
    return res

# check json_model_13_map_multipleOf (.'$validation'.multipleOf)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$validation'.multipleOf
    res: bool = isinstance(val, (int, float)) and not isinstance(val, bool) and val > 0.0
    if not res:
        rep is None or rep.append(("not a 1.0 loose float [.'$validation'.multipleOf]", path))
    return res

# check json_model_13_map_pattern (.'$validation'.pattern)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$validation'.pattern
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$validation'.pattern]", path))
    return res

# check json_model_13_map_type (.'$validation'.type)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$validation'.type
    # .'$validation'.type.'|'.0
    res: bool = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $simpleTypes [.'$validation'.type.'|'.0]", path))
    if not res:
        # .'$validation'.type.'|'.1
        res = json_model_10(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $simpleTypesArray [.'$validation'.type.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$validation'.type.'|']", path))
    return res

# check json_model_13_map_uniqueItems (.'$validation'.uniqueItems)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$validation'.uniqueItems
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$validation'.uniqueItems]", path))
    return res


# check $validation (.'$validation')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$validation'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$validation']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        if pfun := json_model_13_map.get(prop):
            # handle 20 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_7 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$validation']", lpath_7 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$validation']", lpath_7 if path is not None else None))
            return False
    return True

# check $schemaArray (.'$schemaArray')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schemaArray'
    # .'$schemaArray'.'@'
    res: bool = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # .'$schemaArray'.'@'.0
            res = json_model_17(arr_2_item, arr_2_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schemaArray'.'@'.0]", arr_2_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schemaArray'.'@']", path))
    if res:
        ival_1: int = len(val)
        res = ival_1 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schemaArray']", path))
    return res

# check json_model_15_map_dependentSchemas (.'$applicator'.dependentSchemas)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$applicator'.dependentSchemas
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$applicator'.dependentSchemas]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$applicator'.dependentSchemas.''
        res = json_model_17(pval, lpath_10 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$applicator'.dependentSchemas.'']", lpath_10 if path is not None else None))
            return False
    return True

# check json_model_15_map_patternProperties (.'$applicator'.patternProperties)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$applicator'.patternProperties
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$applicator'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$applicator'.patternProperties.''
        res = json_model_17(pval, lpath_11 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$applicator'.patternProperties.'']", lpath_11 if path is not None else None))
            return False
    return True

# check json_model_15_map_properties (.'$applicator'.properties)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$applicator'.properties
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$applicator'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$applicator'.properties.''
        res = json_model_17(pval, lpath_12 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$applicator'.properties.'']", lpath_12 if path is not None else None))
            return False
    return True


# check $applicator (.'$applicator')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$applicator'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$applicator']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if pfun := json_model_15_map.get(prop):
            # handle 15 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_9 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$applicator']", lpath_9 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$applicator']", lpath_9 if path is not None else None))
            return False
    return True

# check json_model_16_map_$comment (.'$ObjectSchema'.'$comment')
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.'$comment'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$ObjectSchema'.'$comment']", path))
    return res

# check json_model_16_map_$defs (.'$ObjectSchema'.'$defs')
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.'$defs'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$ObjectSchema'.'$defs'.''
        res = json_model_17(pval, lpath_14 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.'$defs'.'']", lpath_14 if path is not None else None))
            return False
    return True

# check json_model_16_map_$recursiveAnchor (.'$ObjectSchema'.'$recursiveAnchor')
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.'$recursiveAnchor'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$ObjectSchema'.'$recursiveAnchor']", path))
    return res

# check json_model_16_map_$recursiveRef (.'$ObjectSchema'.'$recursiveRef')
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.'$recursiveRef'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$ObjectSchema'.'$recursiveRef']", path))
    return res

# check json_model_16_map_$schema (.'$ObjectSchema'.'$schema')
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.'$schema'
    res: bool = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URL [.'$ObjectSchema'.'$schema']", path))
    return res

# check json_model_16_map_$vocabulary (.'$ObjectSchema'.'$vocabulary')
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.'$vocabulary'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        if is_valid_url(prop, lpath_15 if path is not None else None, rep):
            # handle 1 key props
            # .'$ObjectSchema'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$ObjectSchema'.'$vocabulary'.'$URI']", lpath_15 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$ObjectSchema'.'$vocabulary']", lpath_15 if path is not None else None))
            return False
    return True

# check json_model_16_map_const (.'$ObjectSchema'.const)
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.const
    return True

# check json_model_16_map_contentEncoding (.'$ObjectSchema'.contentEncoding)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.contentEncoding
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$ObjectSchema'.contentEncoding]", path))
    return res

# check json_model_16_map_contentMediaType (.'$ObjectSchema'.contentMediaType)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.contentMediaType
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$ObjectSchema'.contentMediaType]", path))
    return res

# check json_model_16_map_default (.'$ObjectSchema'.default)
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.default
    return True

# check json_model_16_map_definitions (.'$ObjectSchema'.definitions)
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.definitions
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$ObjectSchema'.definitions.''
        res = json_model_17(pval, lpath_16 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.definitions.'']", lpath_16 if path is not None else None))
            return False
    return True

# check json_model_16_map_dependencies (.'$ObjectSchema'.dependencies)
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.dependencies
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema'.dependencies]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$ObjectSchema'.dependencies.''
        # .'$ObjectSchema'.dependencies.''.'|'.0
        res = json_model_17(pval, lpath_17 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.dependencies.''.'|'.0]", lpath_17 if path is not None else None))
        if not res:
            # .'$ObjectSchema'.dependencies.''.'|'.1
            res = json_model_11(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $stringArray [.'$ObjectSchema'.dependencies.''.'|'.1]", lpath_17 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$ObjectSchema'.dependencies.''.'|']", lpath_17 if path is not None else None))
            return False
    return True

# check json_model_16_map_dependentRequired (.'$ObjectSchema'.dependentRequired)
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.dependentRequired
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema'.dependentRequired]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$ObjectSchema'.dependentRequired.''
        res = json_model_11(pval, lpath_18 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $stringArray [.'$ObjectSchema'.dependentRequired.'']", lpath_18 if path is not None else None))
            return False
    return True

# check json_model_16_map_dependentSchemas (.'$ObjectSchema'.dependentSchemas)
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.dependentSchemas
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema'.dependentSchemas]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$ObjectSchema'.dependentSchemas.''
        res = json_model_17(pval, lpath_19 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.dependentSchemas.'']", lpath_19 if path is not None else None))
            return False
    return True

# check json_model_16_map_deprecated (.'$ObjectSchema'.deprecated)
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.deprecated
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$ObjectSchema'.deprecated]", path))
    return res

# check json_model_16_map_description (.'$ObjectSchema'.description)
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.description
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$ObjectSchema'.description]", path))
    return res

# check json_model_16_map_enum (.'$ObjectSchema'.enum)
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.enum
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$ObjectSchema'.enum]", path))
    return res

# check json_model_16_map_examples (.'$ObjectSchema'.examples)
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.examples
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$ObjectSchema'.examples]", path))
    return res

# check json_model_16_map_exclusiveMaximum (.'$ObjectSchema'.exclusiveMaximum)
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.exclusiveMaximum
    res: bool = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$ObjectSchema'.exclusiveMaximum]", path))
    return res

# check json_model_16_map_exclusiveMinimum (.'$ObjectSchema'.exclusiveMinimum)
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.exclusiveMinimum
    res: bool = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$ObjectSchema'.exclusiveMinimum]", path))
    return res

# check json_model_16_map_format (.'$ObjectSchema'.format)
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.format
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$ObjectSchema'.format]", path))
    return res

# check json_model_16_map_maximum (.'$ObjectSchema'.maximum)
def _jm_f_46(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.maximum
    res: bool = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$ObjectSchema'.maximum]", path))
    return res

# check json_model_16_map_minimum (.'$ObjectSchema'.minimum)
def _jm_f_47(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.minimum
    res: bool = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$ObjectSchema'.minimum]", path))
    return res

# check json_model_16_map_multipleOf (.'$ObjectSchema'.multipleOf)
def _jm_f_48(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.multipleOf
    res: bool = isinstance(val, (int, float)) and not isinstance(val, bool) and val > 0.0
    if not res:
        rep is None or rep.append(("not a 1.0 loose float [.'$ObjectSchema'.multipleOf]", path))
    return res

# check json_model_16_map_pattern (.'$ObjectSchema'.pattern)
def _jm_f_49(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.pattern
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$ObjectSchema'.pattern]", path))
    return res

# check json_model_16_map_patternProperties (.'$ObjectSchema'.patternProperties)
def _jm_f_50(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.patternProperties
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$ObjectSchema'.patternProperties.''
        res = json_model_17(pval, lpath_20 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.patternProperties.'']", lpath_20 if path is not None else None))
            return False
    return True

# check json_model_16_map_properties (.'$ObjectSchema'.properties)
def _jm_f_51(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.properties
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$ObjectSchema'.properties.''
        res = json_model_17(pval, lpath_21 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.properties.'']", lpath_21 if path is not None else None))
            return False
    return True

# check json_model_16_map_readOnly (.'$ObjectSchema'.readOnly)
def _jm_f_52(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.readOnly
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$ObjectSchema'.readOnly]", path))
    return res

# check json_model_16_map_title (.'$ObjectSchema'.title)
def _jm_f_53(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.title
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$ObjectSchema'.title]", path))
    return res

# check json_model_16_map_type (.'$ObjectSchema'.type)
def _jm_f_54(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.type
    # .'$ObjectSchema'.type.'|'.0
    res: bool = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $simpleTypes [.'$ObjectSchema'.type.'|'.0]", path))
    if not res:
        # .'$ObjectSchema'.type.'|'.1
        res = json_model_10(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $simpleTypesArray [.'$ObjectSchema'.type.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$ObjectSchema'.type.'|']", path))
    return res

# check json_model_16_map_uniqueItems (.'$ObjectSchema'.uniqueItems)
def _jm_f_55(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.uniqueItems
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$ObjectSchema'.uniqueItems]", path))
    return res

# check json_model_16_map_writeOnly (.'$ObjectSchema'.writeOnly)
def _jm_f_56(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'.writeOnly
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$ObjectSchema'.writeOnly]", path))
    return res


# check $ObjectSchema (.'$ObjectSchema')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectSchema'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        if pfun := json_model_16_map.get(prop):
            # handle 61 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_13 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$ObjectSchema']", lpath_13 if path is not None else None))
                return False
        else:
            # accept any other props
            pass
    return True

# check $Schema (.'$Schema')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Schema'
    # .'$Schema'.'|'.0
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Schema'.'|'.0]", path))
    if not res:
        # .'$Schema'.'|'.1
        res = json_model_16(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ObjectSchema [.'$Schema'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Schema'.'|']", path))
    return res

# object .'$deprecated'.definitions
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$deprecated'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$deprecated'.definitions.''
        res = json_model_17(pval, lpath_23 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$deprecated'.definitions.'']", lpath_23 if path is not None else None))
            return False
    return True

# object .'$deprecated'.dependencies
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$deprecated'.dependencies]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$deprecated'.dependencies.''
        # .'$deprecated'.dependencies.''.'|'.0
        res = json_model_17(pval, lpath_24 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$deprecated'.dependencies.''.'|'.0]", lpath_24 if path is not None else None))
        if not res:
            # .'$deprecated'.dependencies.''.'|'.1
            res = json_model_11(pval, lpath_24 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $stringArray [.'$deprecated'.dependencies.''.'|'.1]", lpath_24 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$deprecated'.dependencies.''.'|']", lpath_24 if path is not None else None))
            return False
    return True

# check $deprecated (.'$deprecated')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$deprecated'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$deprecated']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        if prop == "definitions":
            # handle may definitions property
            # .'$deprecated'.definitions
            res = _jm_obj_0(pval, lpath_22 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$deprecated'.definitions]", lpath_22 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$deprecated'.definitions]", lpath_22 if path is not None else None))
                return False
        elif prop == "dependencies":
            # handle may dependencies property
            # .'$deprecated'.dependencies
            res = _jm_obj_1(pval, lpath_22 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$deprecated'.dependencies]", lpath_22 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$deprecated'.dependencies]", lpath_22 if path is not None else None))
                return False
        elif prop == "$recursiveAnchor":
            # handle may $recursiveAnchor property
            # .'$deprecated'.'$recursiveAnchor'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$deprecated'.'$recursiveAnchor']", lpath_22 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$deprecated'.'$recursiveAnchor']", lpath_22 if path is not None else None))
                return False
        elif prop == "$recursiveRef":
            # handle may $recursiveRef property
            # .'$deprecated'.'$recursiveRef'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$deprecated'.'$recursiveRef']", lpath_22 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$deprecated'.'$recursiveRef']", lpath_22 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$deprecated']", lpath_22 if path is not None else None))
            return False
    return True

# check $fuzzy (.'$fuzzy')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$fuzzy'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$fuzzy']", path))
        return False
    # accept any object
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .
    res: bool = json_model_17(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global json_model_4_map
        json_model_4_map = {
            "$anchor": json_model_3,
            "$comment": _jm_f_0,
            "$defs": _jm_f_1,
            "$dynamicAnchor": json_model_3,
            "$dynamicRef": json_model_3,
            "$id": json_model_3,
            "$ref": json_model_3,
            "$schema": _jm_f_2,
            "$vocabulary": _jm_f_3,
        }
        global json_model_5_map
        json_model_5_map = {
            "default": _jm_f_4,
            "deprecated": _jm_f_5,
            "description": _jm_f_6,
            "examples": _jm_f_7,
            "readOnly": _jm_f_8,
            "title": _jm_f_9,
            "writeOnly": _jm_f_10,
        }
        global _jm_cst_0
        _jm_cst_0 = {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global json_model_13_map
        json_model_13_map = {
            "const": _jm_f_11,
            "dependentRequired": _jm_f_12,
            "enum": _jm_f_13,
            "exclusiveMaximum": _jm_f_14,
            "exclusiveMinimum": _jm_f_15,
            "maxContains": json_model_12,
            "maxItems": json_model_12,
            "maxLength": json_model_12,
            "maxProperties": json_model_12,
            "maximum": _jm_f_16,
            "minContains": json_model_12,
            "minItems": json_model_12,
            "minLength": json_model_12,
            "minProperties": json_model_12,
            "minimum": _jm_f_17,
            "multipleOf": _jm_f_18,
            "pattern": _jm_f_19,
            "required": json_model_11,
            "type": _jm_f_20,
            "uniqueItems": _jm_f_21,
        }
        global json_model_15_map
        json_model_15_map = {
            "additionalProperties": json_model_17,
            "allOf": json_model_14,
            "anyOf": json_model_14,
            "contains": json_model_17,
            "dependentSchemas": _jm_f_22,
            "else": json_model_17,
            "if": json_model_17,
            "items": json_model_17,
            "not": json_model_17,
            "oneOf": json_model_14,
            "patternProperties": _jm_f_23,
            "prefixItems": json_model_14,
            "properties": _jm_f_24,
            "propertyNames": json_model_17,
            "then": json_model_17,
        }
        global json_model_16_map
        json_model_16_map = {
            "$anchor": json_model_3,
            "$comment": _jm_f_25,
            "$defs": _jm_f_26,
            "$dynamicAnchor": json_model_3,
            "$dynamicRef": json_model_3,
            "$id": json_model_3,
            "$recursiveAnchor": _jm_f_27,
            "$recursiveRef": _jm_f_28,
            "$ref": json_model_3,
            "$schema": _jm_f_29,
            "$vocabulary": _jm_f_30,
            "additionalProperties": json_model_17,
            "allOf": json_model_14,
            "anyOf": json_model_14,
            "const": _jm_f_31,
            "contains": json_model_17,
            "contentEncoding": _jm_f_32,
            "contentMediaType": _jm_f_33,
            "contentSchema": json_model_17,
            "default": _jm_f_34,
            "definitions": _jm_f_35,
            "dependencies": _jm_f_36,
            "dependentRequired": _jm_f_37,
            "dependentSchemas": _jm_f_38,
            "deprecated": _jm_f_39,
            "description": _jm_f_40,
            "else": json_model_17,
            "enum": _jm_f_41,
            "examples": _jm_f_42,
            "exclusiveMaximum": _jm_f_43,
            "exclusiveMinimum": _jm_f_44,
            "format": _jm_f_45,
            "if": json_model_17,
            "items": json_model_17,
            "maxContains": json_model_12,
            "maxItems": json_model_12,
            "maxLength": json_model_12,
            "maxProperties": json_model_12,
            "maximum": _jm_f_46,
            "minContains": json_model_12,
            "minItems": json_model_12,
            "minLength": json_model_12,
            "minProperties": json_model_12,
            "minimum": _jm_f_47,
            "multipleOf": _jm_f_48,
            "not": json_model_17,
            "oneOf": json_model_14,
            "pattern": _jm_f_49,
            "patternProperties": _jm_f_50,
            "prefixItems": json_model_14,
            "properties": _jm_f_51,
            "propertyNames": json_model_17,
            "readOnly": _jm_f_52,
            "required": json_model_11,
            "then": json_model_17,
            "title": _jm_f_53,
            "type": _jm_f_54,
            "unevaluatedItems": json_model_17,
            "unevaluatedProperties": json_model_17,
            "uniqueItems": _jm_f_55,
            "writeOnly": _jm_f_56,
        }
        global check_model_map
        check_model_map = {
            "": json_model_17,
            "URI-REFERENCE": json_model_3,
            "core": json_model_4,
            "meta": json_model_5,
            "content": json_model_6,
            "unevaluated": json_model_7,
            "format": json_model_8,
            "simpleTypes": json_model_9,
            "simpleTypesArray": json_model_10,
            "stringArray": json_model_11,
            "nonNegativeInteger": json_model_12,
            "validation": json_model_13,
            "schemaArray": json_model_14,
            "applicator": json_model_15,
            "ObjectSchema": json_model_16,
            "Schema": json_model_17,
            "deprecated": json_model_18,
            "fuzzy": json_model_19,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
