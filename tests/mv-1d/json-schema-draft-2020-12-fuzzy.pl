#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_3($$$);
sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_obj_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
sub _jm_f_6($$$);
sub _jm_f_7($$$);
sub _jm_obj_2($$$);
sub _jm_f_8($$$);
my %_jm_obj_0_map;
sub _jm_obj_0($$$);
sub json_model_4($$$);
sub _jm_f_9($$$);
sub _jm_f_10($$$);
sub _jm_f_11($$$);
sub _jm_f_12($$$);
sub _jm_f_13($$$);
sub _jm_f_14($$$);
sub _jm_f_15($$$);
my %_jm_obj_3_map;
sub _jm_obj_3($$$);
sub json_model_5($$$);
sub _jm_obj_4($$$);
sub json_model_6($$$);
sub _jm_obj_5($$$);
sub json_model_7($$$);
sub _jm_obj_6($$$);
sub json_model_8($$$);
my %_jm_cst_0;
sub json_model_9($$$);
sub json_model_10($$$);
sub json_model_11($$$);
sub json_model_12($$$);
sub _jm_f_16($$$);
sub _jm_obj_8($$$);
sub _jm_f_17($$$);
sub _jm_f_18($$$);
sub _jm_f_19($$$);
sub _jm_f_20($$$);
sub _jm_f_21($$$);
sub _jm_f_22($$$);
sub _jm_f_23($$$);
sub _jm_f_24($$$);
sub _jm_f_25($$$);
sub _jm_f_26($$$);
sub _jm_f_27($$$);
sub _jm_f_28($$$);
sub _jm_f_29($$$);
sub _jm_f_30($$$);
sub _jm_f_31($$$);
sub _jm_f_32($$$);
sub _jm_f_33($$$);
sub _jm_f_34($$$);
sub _jm_f_35($$$);
my %_jm_obj_7_map;
sub _jm_obj_7($$$);
sub json_model_13($$$);
sub json_model_14($$$);
sub _jm_f_36($$$);
sub _jm_f_37($$$);
sub _jm_f_38($$$);
sub _jm_f_39($$$);
sub _jm_obj_10($$$);
sub _jm_f_40($$$);
sub _jm_f_41($$$);
sub _jm_f_42($$$);
sub _jm_f_43($$$);
sub _jm_f_44($$$);
sub _jm_f_45($$$);
sub _jm_obj_11($$$);
sub _jm_f_46($$$);
sub _jm_f_47($$$);
sub _jm_obj_12($$$);
sub _jm_f_48($$$);
sub _jm_f_49($$$);
sub _jm_f_50($$$);
my %_jm_obj_9_map;
sub _jm_obj_9($$$);
sub json_model_15($$$);
sub _jm_f_51($$$);
sub _jm_f_52($$$);
sub _jm_obj_14($$$);
sub _jm_f_53($$$);
sub _jm_f_54($$$);
sub _jm_f_55($$$);
sub _jm_f_56($$$);
sub _jm_f_57($$$);
sub _jm_f_58($$$);
sub _jm_f_59($$$);
sub _jm_f_60($$$);
sub _jm_obj_15($$$);
sub _jm_f_61($$$);
sub _jm_f_62($$$);
sub _jm_f_63($$$);
sub _jm_f_64($$$);
sub _jm_f_65($$$);
sub _jm_f_66($$$);
sub _jm_f_67($$$);
sub _jm_f_68($$$);
sub _jm_f_69($$$);
sub _jm_f_70($$$);
sub _jm_obj_16($$$);
sub _jm_f_71($$$);
sub _jm_obj_17($$$);
sub _jm_f_72($$$);
sub _jm_obj_18($$$);
sub _jm_f_73($$$);
sub _jm_obj_19($$$);
sub _jm_f_74($$$);
sub _jm_f_75($$$);
sub _jm_f_76($$$);
sub _jm_f_77($$$);
sub _jm_f_78($$$);
sub _jm_f_79($$$);
sub _jm_f_80($$$);
sub _jm_f_81($$$);
sub _jm_f_82($$$);
sub _jm_f_83($$$);
sub _jm_f_84($$$);
sub _jm_f_85($$$);
sub _jm_f_86($$$);
sub _jm_f_87($$$);
sub _jm_f_88($$$);
sub _jm_f_89($$$);
sub _jm_f_90($$$);
sub _jm_f_91($$$);
sub _jm_f_92($$$);
sub _jm_f_93($$$);
sub _jm_f_94($$$);
sub _jm_f_95($$$);
sub _jm_f_96($$$);
sub _jm_f_97($$$);
sub _jm_f_98($$$);
sub _jm_obj_20($$$);
sub _jm_f_99($$$);
sub _jm_f_100($$$);
sub _jm_obj_21($$$);
sub _jm_f_101($$$);
sub _jm_f_102($$$);
sub _jm_f_103($$$);
sub _jm_f_104($$$);
sub _jm_f_105($$$);
sub _jm_f_106($$$);
sub _jm_f_107($$$);
sub _jm_f_108($$$);
sub _jm_f_109($$$);
sub _jm_f_110($$$);
sub _jm_f_111($$$);
my %_jm_obj_13_map;
sub _jm_obj_13($$$);
sub json_model_16($$$);
sub json_model_17($$$);
sub _jm_obj_23($$$);
sub _jm_obj_24($$$);
sub _jm_obj_22($$$);
sub json_model_18($$$);
sub _jm_obj_25($$$);
sub json_model_19($$$);
sub json_model_1($$$);
my %check_model_map;

# check $URI-REFERENCE (.'$URI-REFERENCE')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$URI-REFERENCE'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_0_map_$anchor (.'$core'.'$anchor')
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$anchor'
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_$comment (.'$core'.'$comment')
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$core'.'$defs'
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$core'.'$defs'.''
        $res = json_model_17($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_0_map_$defs (.'$core'.'$defs')
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$defs'
    $res = _jm_obj_1($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_$dynamicAnchor (.'$core'.'$dynamicAnchor')
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$dynamicAnchor'
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_$dynamicRef (.'$core'.'$dynamicRef')
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$dynamicRef'
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_$id (.'$core'.'$id')
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$id'
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_$ref (.'$core'.'$ref')
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$ref'
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_$schema (.'$core'.'$schema')
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$core'.'$vocabulary'
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$core'.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_0_map_$vocabulary (.'$core'.'$vocabulary')
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'.'$vocabulary'
    $res = _jm_obj_2($val, $path, $rep);
    return $res;
}


# object .'$core'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_0_map{$prop}))
        {
            # handle 9 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $core (.'$core')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$core'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# check _jm_obj_3_map_default (.'$meta'.default)
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.default
    $res = 1;
    return $res;
}

# check _jm_obj_3_map_deprecated (.'$meta'.deprecated)
sub _jm_f_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_3_map_description (.'$meta'.description)
sub _jm_f_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_3_map_examples (.'$meta'.examples)
sub _jm_f_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_3_map_readOnly (.'$meta'.readOnly)
sub _jm_f_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_3_map_title (.'$meta'.title)
sub _jm_f_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_3_map_writeOnly (.'$meta'.writeOnly)
sub _jm_f_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$meta'
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_3_map{$prop}))
        {
            # handle 7 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $meta (.'$meta')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$meta'
    $res = _jm_obj_3($val, $path, $rep);
    return $res;
}

# object .'$content'
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'contentEncoding')
        {
            # handle may contentEncoding property
            # .'$content'.contentEncoding
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'contentMediaType')
        {
            # handle may contentMediaType property
            # .'$content'.contentMediaType
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'contentSchema')
        {
            # handle may contentSchema property
            # .'$content'.contentSchema
            $res = json_model_17($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $content (.'$content')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$content'
    $res = _jm_obj_4($val, $path, $rep);
    return $res;
}

# object .'$unevaluated'
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'unevaluatedItems')
        {
            # handle may unevaluatedItems property
            # .'$unevaluated'.unevaluatedItems
            $res = json_model_17($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'unevaluatedProperties')
        {
            # handle may unevaluatedProperties property
            # .'$unevaluated'.unevaluatedProperties
            $res = json_model_17($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $unevaluated (.'$unevaluated')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$unevaluated'
    $res = _jm_obj_5($val, $path, $rep);
    return $res;
}

# object .'$format'
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'format')
        {
            # handle may format property
            # .'$format'.format
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $format (.'$format')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$format'
    $res = _jm_obj_6($val, $path, $rep);
    return $res;
}


# check $simpleTypes (.'$simpleTypes')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$simpleTypes'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_0{$val};
    return $res;
}

# check $simpleTypesArray (.'$simpleTypesArray')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$simpleTypesArray'
    # .'$simpleTypesArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$simpleTypesArray'.'@'.0
            $res = json_model_9($arr_0_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_0 = scalar @$val;
        $res = jm_is_unique_array($val, $path, $rep) && $ival_0 >= 1;
    }
    return $res;
}

# check $stringArray (.'$stringArray')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$stringArray'
    # .'$stringArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_1_idx (0 .. $#$val)
        {
            my $arr_1_item = $$val[$arr_1_idx];
            # .'$stringArray'.'@'.0
            $res = jm_is_string($arr_1_item);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        $res = jm_is_unique_array($val, $path, $rep);
    }
    return $res;
}

# check $nonNegativeInteger (.'$nonNegativeInteger')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$nonNegativeInteger'
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_7_map_const (.'$validation'.const)
sub _jm_f_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.const
    $res = 1;
    return $res;
}

# object .'$validation'.dependentRequired
sub _jm_obj_8($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$validation'.dependentRequired.''
        $res = json_model_11($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_7_map_dependentRequired (.'$validation'.dependentRequired)
sub _jm_f_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.dependentRequired
    $res = _jm_obj_8($val, $path, $rep);
    return $res;
}

# check _jm_obj_7_map_enum (.'$validation'.enum)
sub _jm_f_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.enum
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_7_map_exclusiveMaximum (.'$validation'.exclusiveMaximum)
sub _jm_f_19($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.exclusiveMaximum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_7_map_exclusiveMinimum (.'$validation'.exclusiveMinimum)
sub _jm_f_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.exclusiveMinimum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_7_map_maxContains (.'$validation'.maxContains)
sub _jm_f_21($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.maxContains
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_7_map_maxItems (.'$validation'.maxItems)
sub _jm_f_22($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.maxItems
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_7_map_maxLength (.'$validation'.maxLength)
sub _jm_f_23($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.maxLength
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_7_map_maxProperties (.'$validation'.maxProperties)
sub _jm_f_24($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.maxProperties
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_7_map_maximum (.'$validation'.maximum)
sub _jm_f_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.maximum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_7_map_minContains (.'$validation'.minContains)
sub _jm_f_26($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.minContains
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_7_map_minItems (.'$validation'.minItems)
sub _jm_f_27($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.minItems
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_7_map_minLength (.'$validation'.minLength)
sub _jm_f_28($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.minLength
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_7_map_minProperties (.'$validation'.minProperties)
sub _jm_f_29($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.minProperties
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_7_map_minimum (.'$validation'.minimum)
sub _jm_f_30($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.minimum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_7_map_multipleOf (.'$validation'.multipleOf)
sub _jm_f_31($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.multipleOf
    $res = jm_is_numeric($val) && $val > 0.0;
    return $res;
}

# check _jm_obj_7_map_pattern (.'$validation'.pattern)
sub _jm_f_32($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.pattern
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_7_map_required (.'$validation'.required)
sub _jm_f_33($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.required
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_7_map_type (.'$validation'.type)
sub _jm_f_34($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.type
    # .'$validation'.type.'|'.0
    $res = json_model_9($val, $path, $rep);
    if (! $res)
    {
        # .'$validation'.type.'|'.1
        $res = json_model_10($val, $path, $rep);
    }
    return $res;
}

# check _jm_obj_7_map_uniqueItems (.'$validation'.uniqueItems)
sub _jm_f_35($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'.uniqueItems
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$validation'
sub _jm_obj_7($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_7_map{$prop}))
        {
            # handle 20 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $validation (.'$validation')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$validation'
    $res = _jm_obj_7($val, $path, $rep);
    return $res;
}

# check $schemaArray (.'$schemaArray')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schemaArray'
    # .'$schemaArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_2_idx (0 .. $#$val)
        {
            my $arr_2_item = $$val[$arr_2_idx];
            # .'$schemaArray'.'@'.0
            $res = json_model_17($arr_2_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_1 = scalar @$val;
        $res = $ival_1 >= 1;
    }
    return $res;
}

# check _jm_obj_9_map_additionalProperties (.'$applicator'.additionalProperties)
sub _jm_f_36($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.additionalProperties
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_allOf (.'$applicator'.allOf)
sub _jm_f_37($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.allOf
    $res = json_model_14($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_anyOf (.'$applicator'.anyOf)
sub _jm_f_38($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.anyOf
    $res = json_model_14($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_contains (.'$applicator'.contains)
sub _jm_f_39($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.contains
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# object .'$applicator'.dependentSchemas
sub _jm_obj_10($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$applicator'.dependentSchemas.''
        $res = json_model_17($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_dependentSchemas (.'$applicator'.dependentSchemas)
sub _jm_f_40($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.dependentSchemas
    $res = _jm_obj_10($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_else (.'$applicator'.else)
sub _jm_f_41($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.else
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_if (.'$applicator'.if)
sub _jm_f_42($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.if
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_items (.'$applicator'.items)
sub _jm_f_43($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.items
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_not (.'$applicator'.not)
sub _jm_f_44($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.not
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_oneOf (.'$applicator'.oneOf)
sub _jm_f_45($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.oneOf
    $res = json_model_14($val, $path, $rep);
    return $res;
}

# object .'$applicator'.patternProperties
sub _jm_obj_11($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$applicator'.patternProperties.''
        $res = json_model_17($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_patternProperties (.'$applicator'.patternProperties)
sub _jm_f_46($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.patternProperties
    $res = _jm_obj_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_prefixItems (.'$applicator'.prefixItems)
sub _jm_f_47($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.prefixItems
    $res = json_model_14($val, $path, $rep);
    return $res;
}

# object .'$applicator'.properties
sub _jm_obj_12($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$applicator'.properties.''
        $res = json_model_17($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_properties (.'$applicator'.properties)
sub _jm_f_48($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.properties
    $res = _jm_obj_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_propertyNames (.'$applicator'.propertyNames)
sub _jm_f_49($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.propertyNames
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_then (.'$applicator'.then)
sub _jm_f_50($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'.then
    $res = json_model_17($val, $path, $rep);
    return $res;
}


# object .'$applicator'
sub _jm_obj_9($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_9_map{$prop}))
        {
            # handle 15 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $applicator (.'$applicator')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$applicator'
    $res = _jm_obj_9($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_$anchor (.'$ObjectSchema'.'$anchor')
sub _jm_f_51($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.'$anchor'
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_$comment (.'$ObjectSchema'.'$comment')
sub _jm_f_52($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$ObjectSchema'.'$defs'
sub _jm_obj_14($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.'$defs'.''
        $res = json_model_17($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_13_map_$defs (.'$ObjectSchema'.'$defs')
sub _jm_f_53($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.'$defs'
    $res = _jm_obj_14($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_$dynamicAnchor (.'$ObjectSchema'.'$dynamicAnchor')
sub _jm_f_54($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.'$dynamicAnchor'
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_$dynamicRef (.'$ObjectSchema'.'$dynamicRef')
sub _jm_f_55($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.'$dynamicRef'
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_$id (.'$ObjectSchema'.'$id')
sub _jm_f_56($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.'$id'
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_$recursiveAnchor (.'$ObjectSchema'.'$recursiveAnchor')
sub _jm_f_57($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.'$recursiveAnchor'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_13_map_$recursiveRef (.'$ObjectSchema'.'$recursiveRef')
sub _jm_f_58($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.'$recursiveRef'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_13_map_$ref (.'$ObjectSchema'.'$ref')
sub _jm_f_59($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.'$ref'
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_$schema (.'$ObjectSchema'.'$schema')
sub _jm_f_60($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# object .'$ObjectSchema'.'$vocabulary'
sub _jm_obj_15($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$ObjectSchema'.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_13_map_$vocabulary (.'$ObjectSchema'.'$vocabulary')
sub _jm_f_61($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.'$vocabulary'
    $res = _jm_obj_15($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_additionalProperties (.'$ObjectSchema'.additionalProperties)
sub _jm_f_62($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.additionalProperties
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_allOf (.'$ObjectSchema'.allOf)
sub _jm_f_63($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.allOf
    $res = json_model_14($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_anyOf (.'$ObjectSchema'.anyOf)
sub _jm_f_64($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.anyOf
    $res = json_model_14($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_const (.'$ObjectSchema'.const)
sub _jm_f_65($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.const
    $res = 1;
    return $res;
}

# check _jm_obj_13_map_contains (.'$ObjectSchema'.contains)
sub _jm_f_66($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.contains
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_contentEncoding (.'$ObjectSchema'.contentEncoding)
sub _jm_f_67($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.contentEncoding
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_13_map_contentMediaType (.'$ObjectSchema'.contentMediaType)
sub _jm_f_68($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.contentMediaType
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_13_map_contentSchema (.'$ObjectSchema'.contentSchema)
sub _jm_f_69($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.contentSchema
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_default (.'$ObjectSchema'.default)
sub _jm_f_70($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.default
    $res = 1;
    return $res;
}

# object .'$ObjectSchema'.definitions
sub _jm_obj_16($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.definitions.''
        $res = json_model_17($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_13_map_definitions (.'$ObjectSchema'.definitions)
sub _jm_f_71($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.definitions
    $res = _jm_obj_16($val, $path, $rep);
    return $res;
}

# object .'$ObjectSchema'.dependencies
sub _jm_obj_17($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.dependencies.''
        # .'$ObjectSchema'.dependencies.''.'|'.0
        $res = json_model_17($pval, undef, $rep);
        if (! $res)
        {
            # .'$ObjectSchema'.dependencies.''.'|'.1
            $res = json_model_11($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_13_map_dependencies (.'$ObjectSchema'.dependencies)
sub _jm_f_72($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.dependencies
    $res = _jm_obj_17($val, $path, $rep);
    return $res;
}

# object .'$ObjectSchema'.dependentRequired
sub _jm_obj_18($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.dependentRequired.''
        $res = json_model_11($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_13_map_dependentRequired (.'$ObjectSchema'.dependentRequired)
sub _jm_f_73($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.dependentRequired
    $res = _jm_obj_18($val, $path, $rep);
    return $res;
}

# object .'$ObjectSchema'.dependentSchemas
sub _jm_obj_19($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.dependentSchemas.''
        $res = json_model_17($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_13_map_dependentSchemas (.'$ObjectSchema'.dependentSchemas)
sub _jm_f_74($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.dependentSchemas
    $res = _jm_obj_19($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_deprecated (.'$ObjectSchema'.deprecated)
sub _jm_f_75($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_13_map_description (.'$ObjectSchema'.description)
sub _jm_f_76($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_13_map_else (.'$ObjectSchema'.else)
sub _jm_f_77($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.else
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_enum (.'$ObjectSchema'.enum)
sub _jm_f_78($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.enum
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_13_map_examples (.'$ObjectSchema'.examples)
sub _jm_f_79($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_13_map_exclusiveMaximum (.'$ObjectSchema'.exclusiveMaximum)
sub _jm_f_80($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.exclusiveMaximum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_13_map_exclusiveMinimum (.'$ObjectSchema'.exclusiveMinimum)
sub _jm_f_81($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.exclusiveMinimum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_13_map_format (.'$ObjectSchema'.format)
sub _jm_f_82($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.format
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_13_map_if (.'$ObjectSchema'.if)
sub _jm_f_83($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.if
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_items (.'$ObjectSchema'.items)
sub _jm_f_84($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.items
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_maxContains (.'$ObjectSchema'.maxContains)
sub _jm_f_85($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.maxContains
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_maxItems (.'$ObjectSchema'.maxItems)
sub _jm_f_86($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.maxItems
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_maxLength (.'$ObjectSchema'.maxLength)
sub _jm_f_87($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.maxLength
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_maxProperties (.'$ObjectSchema'.maxProperties)
sub _jm_f_88($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.maxProperties
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_maximum (.'$ObjectSchema'.maximum)
sub _jm_f_89($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.maximum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_13_map_minContains (.'$ObjectSchema'.minContains)
sub _jm_f_90($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.minContains
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_minItems (.'$ObjectSchema'.minItems)
sub _jm_f_91($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.minItems
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_minLength (.'$ObjectSchema'.minLength)
sub _jm_f_92($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.minLength
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_minProperties (.'$ObjectSchema'.minProperties)
sub _jm_f_93($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.minProperties
    $res = json_model_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_minimum (.'$ObjectSchema'.minimum)
sub _jm_f_94($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.minimum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_13_map_multipleOf (.'$ObjectSchema'.multipleOf)
sub _jm_f_95($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.multipleOf
    $res = jm_is_numeric($val) && $val > 0.0;
    return $res;
}

# check _jm_obj_13_map_not (.'$ObjectSchema'.not)
sub _jm_f_96($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.not
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_oneOf (.'$ObjectSchema'.oneOf)
sub _jm_f_97($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.oneOf
    $res = json_model_14($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_pattern (.'$ObjectSchema'.pattern)
sub _jm_f_98($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.pattern
    $res = jm_is_string($val);
    return $res;
}

# object .'$ObjectSchema'.patternProperties
sub _jm_obj_20($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.patternProperties.''
        $res = json_model_17($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_13_map_patternProperties (.'$ObjectSchema'.patternProperties)
sub _jm_f_99($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.patternProperties
    $res = _jm_obj_20($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_prefixItems (.'$ObjectSchema'.prefixItems)
sub _jm_f_100($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.prefixItems
    $res = json_model_14($val, $path, $rep);
    return $res;
}

# object .'$ObjectSchema'.properties
sub _jm_obj_21($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.properties.''
        $res = json_model_17($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_13_map_properties (.'$ObjectSchema'.properties)
sub _jm_f_101($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.properties
    $res = _jm_obj_21($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_propertyNames (.'$ObjectSchema'.propertyNames)
sub _jm_f_102($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.propertyNames
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_readOnly (.'$ObjectSchema'.readOnly)
sub _jm_f_103($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_13_map_required (.'$ObjectSchema'.required)
sub _jm_f_104($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.required
    $res = json_model_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_then (.'$ObjectSchema'.then)
sub _jm_f_105($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.then
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_title (.'$ObjectSchema'.title)
sub _jm_f_106($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_13_map_type (.'$ObjectSchema'.type)
sub _jm_f_107($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.type
    # .'$ObjectSchema'.type.'|'.0
    $res = json_model_9($val, $path, $rep);
    if (! $res)
    {
        # .'$ObjectSchema'.type.'|'.1
        $res = json_model_10($val, $path, $rep);
    }
    return $res;
}

# check _jm_obj_13_map_unevaluatedItems (.'$ObjectSchema'.unevaluatedItems)
sub _jm_f_108($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.unevaluatedItems
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_unevaluatedProperties (.'$ObjectSchema'.unevaluatedProperties)
sub _jm_f_109($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.unevaluatedProperties
    $res = json_model_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_13_map_uniqueItems (.'$ObjectSchema'.uniqueItems)
sub _jm_f_110($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.uniqueItems
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_13_map_writeOnly (.'$ObjectSchema'.writeOnly)
sub _jm_f_111($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$ObjectSchema'
sub _jm_obj_13($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_13_map{$prop}))
        {
            # handle 61 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            # accept any other props
            ;
        }
    }
    return 1;
}

# check $ObjectSchema (.'$ObjectSchema')
sub json_model_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectSchema'
    $res = _jm_obj_13($val, $path, $rep);
    return $res;
}

# check $Schema (.'$Schema')
sub json_model_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'
    # .'$Schema'.'|'.0
    $res = jm_is_boolean($val);
    if (! $res)
    {
        # .'$Schema'.'|'.1
        $res = _jm_obj_13($val, $path, $rep);
    }
    return $res;
}

# object .'$deprecated'.definitions
sub _jm_obj_23($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$deprecated'.definitions.''
        $res = json_model_17($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$deprecated'.dependencies
sub _jm_obj_24($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$deprecated'.dependencies.''
        # .'$deprecated'.dependencies.''.'|'.0
        $res = json_model_17($pval, undef, $rep);
        if (! $res)
        {
            # .'$deprecated'.dependencies.''.'|'.1
            $res = json_model_11($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$deprecated'
sub _jm_obj_22($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'definitions')
        {
            # handle may definitions property
            # .'$deprecated'.definitions
            $res = _jm_obj_23($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'dependencies')
        {
            # handle may dependencies property
            # .'$deprecated'.dependencies
            $res = _jm_obj_24($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$recursiveAnchor')
        {
            # handle may $recursiveAnchor property
            # .'$deprecated'.'$recursiveAnchor'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$recursiveRef')
        {
            # handle may $recursiveRef property
            # .'$deprecated'.'$recursiveRef'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $deprecated (.'$deprecated')
sub json_model_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$deprecated'
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}

# object .'$fuzzy'
sub _jm_obj_25($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# check $fuzzy (.'$fuzzy')
sub json_model_19($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$fuzzy'
    $res = _jm_obj_25($val, $path, $rep);
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_17($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_obj_0_map = (
            '$anchor' => \&_jm_f_0,
            '$comment' => \&_jm_f_1,
            '$defs' => \&_jm_f_2,
            '$dynamicAnchor' => \&_jm_f_3,
            '$dynamicRef' => \&_jm_f_4,
            '$id' => \&_jm_f_5,
            '$ref' => \&_jm_f_6,
            '$schema' => \&_jm_f_7,
            '$vocabulary' => \&_jm_f_8,
        );
        %_jm_obj_3_map = (
            'default' => \&_jm_f_9,
            'deprecated' => \&_jm_f_10,
            'description' => \&_jm_f_11,
            'examples' => \&_jm_f_12,
            'readOnly' => \&_jm_f_13,
            'title' => \&_jm_f_14,
            'writeOnly' => \&_jm_f_15,
        );
        %_jm_cst_0 = (
            'array' => 1,
            'boolean' => 1,
            'integer' => 1,
            'null' => 1,
            'number' => 1,
            'object' => 1,
            'string' => 1,
        );
        %_jm_obj_7_map = (
            'const' => \&_jm_f_16,
            'dependentRequired' => \&_jm_f_17,
            'enum' => \&_jm_f_18,
            'exclusiveMaximum' => \&_jm_f_19,
            'exclusiveMinimum' => \&_jm_f_20,
            'maxContains' => \&_jm_f_21,
            'maxItems' => \&_jm_f_22,
            'maxLength' => \&_jm_f_23,
            'maxProperties' => \&_jm_f_24,
            'maximum' => \&_jm_f_25,
            'minContains' => \&_jm_f_26,
            'minItems' => \&_jm_f_27,
            'minLength' => \&_jm_f_28,
            'minProperties' => \&_jm_f_29,
            'minimum' => \&_jm_f_30,
            'multipleOf' => \&_jm_f_31,
            'pattern' => \&_jm_f_32,
            'required' => \&_jm_f_33,
            'type' => \&_jm_f_34,
            'uniqueItems' => \&_jm_f_35,
        );
        %_jm_obj_9_map = (
            'additionalProperties' => \&_jm_f_36,
            'allOf' => \&_jm_f_37,
            'anyOf' => \&_jm_f_38,
            'contains' => \&_jm_f_39,
            'dependentSchemas' => \&_jm_f_40,
            'else' => \&_jm_f_41,
            'if' => \&_jm_f_42,
            'items' => \&_jm_f_43,
            'not' => \&_jm_f_44,
            'oneOf' => \&_jm_f_45,
            'patternProperties' => \&_jm_f_46,
            'prefixItems' => \&_jm_f_47,
            'properties' => \&_jm_f_48,
            'propertyNames' => \&_jm_f_49,
            'then' => \&_jm_f_50,
        );
        %_jm_obj_13_map = (
            '$anchor' => \&_jm_f_51,
            '$comment' => \&_jm_f_52,
            '$defs' => \&_jm_f_53,
            '$dynamicAnchor' => \&_jm_f_54,
            '$dynamicRef' => \&_jm_f_55,
            '$id' => \&_jm_f_56,
            '$recursiveAnchor' => \&_jm_f_57,
            '$recursiveRef' => \&_jm_f_58,
            '$ref' => \&_jm_f_59,
            '$schema' => \&_jm_f_60,
            '$vocabulary' => \&_jm_f_61,
            'additionalProperties' => \&_jm_f_62,
            'allOf' => \&_jm_f_63,
            'anyOf' => \&_jm_f_64,
            'const' => \&_jm_f_65,
            'contains' => \&_jm_f_66,
            'contentEncoding' => \&_jm_f_67,
            'contentMediaType' => \&_jm_f_68,
            'contentSchema' => \&_jm_f_69,
            'default' => \&_jm_f_70,
            'definitions' => \&_jm_f_71,
            'dependencies' => \&_jm_f_72,
            'dependentRequired' => \&_jm_f_73,
            'dependentSchemas' => \&_jm_f_74,
            'deprecated' => \&_jm_f_75,
            'description' => \&_jm_f_76,
            'else' => \&_jm_f_77,
            'enum' => \&_jm_f_78,
            'examples' => \&_jm_f_79,
            'exclusiveMaximum' => \&_jm_f_80,
            'exclusiveMinimum' => \&_jm_f_81,
            'format' => \&_jm_f_82,
            'if' => \&_jm_f_83,
            'items' => \&_jm_f_84,
            'maxContains' => \&_jm_f_85,
            'maxItems' => \&_jm_f_86,
            'maxLength' => \&_jm_f_87,
            'maxProperties' => \&_jm_f_88,
            'maximum' => \&_jm_f_89,
            'minContains' => \&_jm_f_90,
            'minItems' => \&_jm_f_91,
            'minLength' => \&_jm_f_92,
            'minProperties' => \&_jm_f_93,
            'minimum' => \&_jm_f_94,
            'multipleOf' => \&_jm_f_95,
            'not' => \&_jm_f_96,
            'oneOf' => \&_jm_f_97,
            'pattern' => \&_jm_f_98,
            'patternProperties' => \&_jm_f_99,
            'prefixItems' => \&_jm_f_100,
            'properties' => \&_jm_f_101,
            'propertyNames' => \&_jm_f_102,
            'readOnly' => \&_jm_f_103,
            'required' => \&_jm_f_104,
            'then' => \&_jm_f_105,
            'title' => \&_jm_f_106,
            'type' => \&_jm_f_107,
            'unevaluatedItems' => \&_jm_f_108,
            'unevaluatedProperties' => \&_jm_f_109,
            'uniqueItems' => \&_jm_f_110,
            'writeOnly' => \&_jm_f_111,
        );
        %check_model_map = (
            '' => \&json_model_17,
            'URI-REFERENCE' => \&json_model_3,
            'core' => \&_jm_obj_0,
            'meta' => \&_jm_obj_3,
            'content' => \&_jm_obj_4,
            'unevaluated' => \&_jm_obj_5,
            'format' => \&_jm_obj_6,
            'simpleTypes' => \&json_model_9,
            'simpleTypesArray' => \&json_model_10,
            'stringArray' => \&json_model_11,
            'nonNegativeInteger' => \&json_model_12,
            'validation' => \&_jm_obj_7,
            'schemaArray' => \&json_model_14,
            'applicator' => \&_jm_obj_9,
            'ObjectSchema' => \&_jm_obj_13,
            'Schema' => \&json_model_17,
            'deprecated' => \&_jm_obj_22,
            'fuzzy' => \&_jm_obj_25,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_obj_0_map = ();
        %_jm_obj_3_map = ();
        %_jm_cst_0 = ();
        %_jm_obj_7_map = ();
        %_jm_obj_9_map = ();
        %_jm_obj_13_map = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
