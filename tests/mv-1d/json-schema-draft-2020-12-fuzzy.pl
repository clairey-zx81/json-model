#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_3($$$);
sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
my %json_model_4_map;
sub json_model_4($$$);
sub json_model_5($$$);
sub json_model_6($$$);
sub json_model_7($$$);
sub json_model_8($$$);
my %_jm_cst_0;
sub json_model_9($$$);
sub json_model_10($$$);
sub json_model_11($$$);
sub json_model_12($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
sub _jm_f_6($$$);
sub _jm_f_7($$$);
sub _jm_f_8($$$);
sub _jm_f_9($$$);
sub _jm_f_10($$$);
sub _jm_f_11($$$);
sub _jm_f_12($$$);
sub _jm_f_13($$$);
sub _jm_f_14($$$);
my %json_model_13_map;
sub json_model_13($$$);
sub json_model_14($$$);
sub _jm_f_15($$$);
sub _jm_f_16($$$);
sub _jm_f_17($$$);
my %json_model_15_map;
sub json_model_15($$$);
sub _jm_obj_0($$$);
sub _jm_obj_1($$$);
sub _jm_obj_2($$$);
sub _jm_obj_3($$$);
sub _jm_obj_4($$$);
sub _jm_obj_5($$$);
sub _jm_obj_6($$$);
sub _jm_obj_7($$$);
sub json_model_16($$$);
sub json_model_17($$$);
sub _jm_obj_8($$$);
sub _jm_obj_9($$$);
sub json_model_18($$$);
sub json_model_19($$$);
sub json_model_1($$$);
my %check_model_map;

# check $URI-REFERENCE (.'$URI-REFERENCE')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$URI-REFERENCE'
    return jm_is_string($val);
}

# check json_model_4_map_$comment (.'$core'.'$comment')
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$core'.'$comment'
    return jm_is_string($val);
}

# check json_model_4_map_$defs (.'$core'.'$defs')
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$core'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$core'.'$defs'.''
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_4_map_$schema (.'$core'.'$schema')
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$core'.'$schema'
    return jm_is_string($val) && jm_is_valid_url($val, undef, undef);
}

# check json_model_4_map_$vocabulary (.'$core'.'$vocabulary')
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$core'.'$vocabulary'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, undef))
        {
            # handle 1 key props
            # .'$core'.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}


# check $core (.'$core')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$core'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_4_map{$prop}))
        {
            # handle 9 may props
            if (defined($pfun) && ! &$pfun($pval, undef, undef))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $meta (.'$meta')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$meta'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'title')
        {
            # handle may title property
            # .'$meta'.title
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'default')
        {
            # handle may default property
            # .'$meta'.default
            $res = 1;
        }
        elsif ($prop eq 'examples')
        {
            # handle may examples property
            # .'$meta'.examples
            $res = jm_is_array($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'readOnly')
        {
            # handle may readOnly property
            # .'$meta'.readOnly
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'writeOnly')
        {
            # handle may writeOnly property
            # .'$meta'.writeOnly
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'deprecated')
        {
            # handle may deprecated property
            # .'$meta'.deprecated
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$meta'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $content (.'$content')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$content'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'contentSchema')
        {
            # handle may contentSchema property
            # .'$content'.contentSchema
            $res = json_model_17($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'contentEncoding')
        {
            # handle may contentEncoding property
            # .'$content'.contentEncoding
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'contentMediaType')
        {
            # handle may contentMediaType property
            # .'$content'.contentMediaType
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $unevaluated (.'$unevaluated')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$unevaluated'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'unevaluatedItems')
        {
            # handle may unevaluatedItems property
            # .'$unevaluated'.unevaluatedItems
            $res = json_model_17($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'unevaluatedProperties')
        {
            # handle may unevaluatedProperties property
            # .'$unevaluated'.unevaluatedProperties
            $res = json_model_17($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $format (.'$format')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$format'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'format')
        {
            # handle may format property
            # .'$format'.format
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}


# check $simpleTypes (.'$simpleTypes')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$simpleTypes'
    return jm_is_string($val) && exists $_jm_cst_0{$val};
}

# check $simpleTypesArray (.'$simpleTypesArray')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$simpleTypesArray'
    # .'$simpleTypesArray'.'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$simpleTypesArray'.'@'.0
            $res = json_model_9($arr_0_item, undef, undef);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_0 = scalar @$val;
        $res = jm_is_unique_array($val, undef, undef) && $ival_0 >= 1;
    }
    return $res;
}

# check $stringArray (.'$stringArray')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$stringArray'
    # .'$stringArray'.'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_1_idx (0 .. $#$val)
        {
            my $arr_1_item = $$val[$arr_1_idx];
            # .'$stringArray'.'@'.0
            $res = jm_is_string($arr_1_item);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        $res = jm_is_unique_array($val, undef, undef);
    }
    return $res;
}

# check $nonNegativeInteger (.'$nonNegativeInteger')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$nonNegativeInteger'
    return jm_is_integer($val) && $val >= 0;
}

# check json_model_13_map_const (.'$validation'.const)
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.const
    return 1;
}

# check json_model_13_map_dependentRequired (.'$validation'.dependentRequired)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.dependentRequired
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$validation'.dependentRequired.''
        $res = json_model_11($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_13_map_enum (.'$validation'.enum)
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.enum
    return jm_is_array($val);
}

# check json_model_13_map_exclusiveMaximum (.'$validation'.exclusiveMaximum)
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.exclusiveMaximum
    return jm_is_numeric($val);
}

# check json_model_13_map_exclusiveMinimum (.'$validation'.exclusiveMinimum)
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.exclusiveMinimum
    return jm_is_numeric($val);
}

# check json_model_13_map_maximum (.'$validation'.maximum)
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.maximum
    return jm_is_numeric($val);
}

# check json_model_13_map_minimum (.'$validation'.minimum)
sub _jm_f_10($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.minimum
    return jm_is_numeric($val);
}

# check json_model_13_map_multipleOf (.'$validation'.multipleOf)
sub _jm_f_11($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.multipleOf
    return jm_is_numeric($val) && $val > 0.0;
}

# check json_model_13_map_pattern (.'$validation'.pattern)
sub _jm_f_12($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.pattern
    return jm_is_string($val);
}

# check json_model_13_map_type (.'$validation'.type)
sub _jm_f_13($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.type
    # .'$validation'.type.'|'.0
    # .'$validation'.type.'|'.1
    return json_model_9($val, undef, undef) || json_model_10($val, undef, undef);
}

# check json_model_13_map_uniqueItems (.'$validation'.uniqueItems)
sub _jm_f_14($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'.uniqueItems
    return jm_is_boolean($val);
}


# check $validation (.'$validation')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$validation'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_13_map{$prop}))
        {
            # handle 20 may props
            if (defined($pfun) && ! &$pfun($pval, undef, undef))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $schemaArray (.'$schemaArray')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schemaArray'
    # .'$schemaArray'.'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_2_idx (0 .. $#$val)
        {
            my $arr_2_item = $$val[$arr_2_idx];
            # .'$schemaArray'.'@'.0
            $res = json_model_17($arr_2_item, undef, undef);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_1 = scalar @$val;
        $res = $ival_1 >= 1;
    }
    return $res;
}

# check json_model_15_map_dependentSchemas (.'$applicator'.dependentSchemas)
sub _jm_f_15($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$applicator'.dependentSchemas
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$applicator'.dependentSchemas.''
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_15_map_patternProperties (.'$applicator'.patternProperties)
sub _jm_f_16($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$applicator'.patternProperties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$applicator'.patternProperties.''
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_15_map_properties (.'$applicator'.properties)
sub _jm_f_17($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$applicator'.properties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$applicator'.properties.''
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# check $applicator (.'$applicator')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$applicator'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_15_map{$prop}))
        {
            # handle 15 may props
            if (defined($pfun) && ! &$pfun($pval, undef, undef))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$ObjectSchema'.'$vocabulary'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, undef))
        {
            # handle 1 key props
            # .'$ObjectSchema'.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$ObjectSchema'.'$defs'
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.'$defs'.''
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$ObjectSchema'.properties
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.properties.''
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$ObjectSchema'.patternProperties
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.patternProperties.''
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$ObjectSchema'.dependentSchemas
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.dependentSchemas.''
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$ObjectSchema'.dependentRequired
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.dependentRequired.''
        $res = json_model_11($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$ObjectSchema'.definitions
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.definitions.''
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$ObjectSchema'.dependencies
sub _jm_obj_7($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$ObjectSchema'.dependencies.''
        # .'$ObjectSchema'.dependencies.''.'|'.0
        # .'$ObjectSchema'.dependencies.''.'|'.1
        $res = json_model_17($pval, undef, undef) || json_model_11($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $ObjectSchema (.'$ObjectSchema')
sub json_model_16($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ObjectSchema'
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'$id'})
    {
        $pval = $$val{'$id'};
        # .'$ObjectSchema'.'$id'
        $res = json_model_3($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$schema'})
    {
        $pval = $$val{'$schema'};
        # .'$ObjectSchema'.'$schema'
        $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$ref'})
    {
        $pval = $$val{'$ref'};
        # .'$ObjectSchema'.'$ref'
        $res = json_model_3($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$anchor'})
    {
        $pval = $$val{'$anchor'};
        # .'$ObjectSchema'.'$anchor'
        $res = json_model_3($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$dynamicRef'})
    {
        $pval = $$val{'$dynamicRef'};
        # .'$ObjectSchema'.'$dynamicRef'
        $res = json_model_3($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$dynamicAnchor'})
    {
        $pval = $$val{'$dynamicAnchor'};
        # .'$ObjectSchema'.'$dynamicAnchor'
        $res = json_model_3($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$vocabulary'})
    {
        $pval = $$val{'$vocabulary'};
        # .'$ObjectSchema'.'$vocabulary'
        $res = _jm_obj_0($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$comment'})
    {
        $pval = $$val{'$comment'};
        # .'$ObjectSchema'.'$comment'
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$defs'})
    {
        $pval = $$val{'$defs'};
        # .'$ObjectSchema'.'$defs'
        $res = _jm_obj_1($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'prefixItems'})
    {
        $pval = $$val{'prefixItems'};
        # .'$ObjectSchema'.prefixItems
        $res = json_model_14($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'items'})
    {
        $pval = $$val{'items'};
        # .'$ObjectSchema'.items
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'contains'})
    {
        $pval = $$val{'contains'};
        # .'$ObjectSchema'.contains
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'additionalProperties'})
    {
        $pval = $$val{'additionalProperties'};
        # .'$ObjectSchema'.additionalProperties
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'properties'})
    {
        $pval = $$val{'properties'};
        # .'$ObjectSchema'.properties
        $res = _jm_obj_2($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'patternProperties'})
    {
        $pval = $$val{'patternProperties'};
        # .'$ObjectSchema'.patternProperties
        $res = _jm_obj_3($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'dependentSchemas'})
    {
        $pval = $$val{'dependentSchemas'};
        # .'$ObjectSchema'.dependentSchemas
        $res = _jm_obj_4($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'propertyNames'})
    {
        $pval = $$val{'propertyNames'};
        # .'$ObjectSchema'.propertyNames
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'if'})
    {
        $pval = $$val{'if'};
        # .'$ObjectSchema'.if
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'then'})
    {
        $pval = $$val{'then'};
        # .'$ObjectSchema'.then
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'else'})
    {
        $pval = $$val{'else'};
        # .'$ObjectSchema'.else
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'not'})
    {
        $pval = $$val{'not'};
        # .'$ObjectSchema'.not
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'allOf'})
    {
        $pval = $$val{'allOf'};
        # .'$ObjectSchema'.allOf
        $res = json_model_14($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'anyOf'})
    {
        $pval = $$val{'anyOf'};
        # .'$ObjectSchema'.anyOf
        $res = json_model_14($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'oneOf'})
    {
        $pval = $$val{'oneOf'};
        # .'$ObjectSchema'.oneOf
        $res = json_model_14($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'unevaluatedItems'})
    {
        $pval = $$val{'unevaluatedItems'};
        # .'$ObjectSchema'.unevaluatedItems
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'unevaluatedProperties'})
    {
        $pval = $$val{'unevaluatedProperties'};
        # .'$ObjectSchema'.unevaluatedProperties
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'type'})
    {
        $pval = $$val{'type'};
        # .'$ObjectSchema'.type
        # .'$ObjectSchema'.type.'|'.0
        # .'$ObjectSchema'.type.'|'.1
        $res = json_model_9($pval, undef, undef) || json_model_10($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    # ignored .'$ObjectSchema'.const
    if (exists $$val{'enum'})
    {
        $pval = $$val{'enum'};
        # .'$ObjectSchema'.enum
        $res = jm_is_array($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'multipleOf'})
    {
        $pval = $$val{'multipleOf'};
        # .'$ObjectSchema'.multipleOf
        $res = jm_is_numeric($pval) && $pval > 0.0;
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maximum'})
    {
        $pval = $$val{'maximum'};
        # .'$ObjectSchema'.maximum
        $res = jm_is_numeric($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'exclusiveMaximum'})
    {
        $pval = $$val{'exclusiveMaximum'};
        # .'$ObjectSchema'.exclusiveMaximum
        $res = jm_is_numeric($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minimum'})
    {
        $pval = $$val{'minimum'};
        # .'$ObjectSchema'.minimum
        $res = jm_is_numeric($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'exclusiveMinimum'})
    {
        $pval = $$val{'exclusiveMinimum'};
        # .'$ObjectSchema'.exclusiveMinimum
        $res = jm_is_numeric($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maxLength'})
    {
        $pval = $$val{'maxLength'};
        # .'$ObjectSchema'.maxLength
        $res = json_model_12($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minLength'})
    {
        $pval = $$val{'minLength'};
        # .'$ObjectSchema'.minLength
        $res = json_model_12($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'pattern'})
    {
        $pval = $$val{'pattern'};
        # .'$ObjectSchema'.pattern
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maxItems'})
    {
        $pval = $$val{'maxItems'};
        # .'$ObjectSchema'.maxItems
        $res = json_model_12($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minItems'})
    {
        $pval = $$val{'minItems'};
        # .'$ObjectSchema'.minItems
        $res = json_model_12($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'uniqueItems'})
    {
        $pval = $$val{'uniqueItems'};
        # .'$ObjectSchema'.uniqueItems
        $res = jm_is_boolean($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maxContains'})
    {
        $pval = $$val{'maxContains'};
        # .'$ObjectSchema'.maxContains
        $res = json_model_12($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minContains'})
    {
        $pval = $$val{'minContains'};
        # .'$ObjectSchema'.minContains
        $res = json_model_12($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maxProperties'})
    {
        $pval = $$val{'maxProperties'};
        # .'$ObjectSchema'.maxProperties
        $res = json_model_12($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minProperties'})
    {
        $pval = $$val{'minProperties'};
        # .'$ObjectSchema'.minProperties
        $res = json_model_12($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'required'})
    {
        $pval = $$val{'required'};
        # .'$ObjectSchema'.required
        $res = json_model_11($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'dependentRequired'})
    {
        $pval = $$val{'dependentRequired'};
        # .'$ObjectSchema'.dependentRequired
        $res = _jm_obj_5($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'title'})
    {
        $pval = $$val{'title'};
        # .'$ObjectSchema'.title
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'description'})
    {
        $pval = $$val{'description'};
        # .'$ObjectSchema'.description
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    # ignored .'$ObjectSchema'.default
    if (exists $$val{'deprecated'})
    {
        $pval = $$val{'deprecated'};
        # .'$ObjectSchema'.deprecated
        $res = jm_is_boolean($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'readOnly'})
    {
        $pval = $$val{'readOnly'};
        # .'$ObjectSchema'.readOnly
        $res = jm_is_boolean($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'writeOnly'})
    {
        $pval = $$val{'writeOnly'};
        # .'$ObjectSchema'.writeOnly
        $res = jm_is_boolean($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'examples'})
    {
        $pval = $$val{'examples'};
        # .'$ObjectSchema'.examples
        $res = jm_is_array($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'format'})
    {
        $pval = $$val{'format'};
        # .'$ObjectSchema'.format
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'contentEncoding'})
    {
        $pval = $$val{'contentEncoding'};
        # .'$ObjectSchema'.contentEncoding
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'contentMediaType'})
    {
        $pval = $$val{'contentMediaType'};
        # .'$ObjectSchema'.contentMediaType
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'contentSchema'})
    {
        $pval = $$val{'contentSchema'};
        # .'$ObjectSchema'.contentSchema
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'definitions'})
    {
        $pval = $$val{'definitions'};
        # .'$ObjectSchema'.definitions
        $res = _jm_obj_6($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'dependencies'})
    {
        $pval = $$val{'dependencies'};
        # .'$ObjectSchema'.dependencies
        $res = _jm_obj_7($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$recursiveAnchor'})
    {
        $pval = $$val{'$recursiveAnchor'};
        # .'$ObjectSchema'.'$recursiveAnchor'
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$recursiveRef'})
    {
        $pval = $$val{'$recursiveRef'};
        # .'$ObjectSchema'.'$recursiveRef'
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $Schema (.'$Schema')
sub json_model_17($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Schema'
    # .'$Schema'.'|'.0
    # .'$Schema'.'|'.1
    return jm_is_boolean($val) || json_model_16($val, undef, undef);
}

# object .'$deprecated'.definitions
sub _jm_obj_8($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$deprecated'.definitions.''
        $res = json_model_17($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$deprecated'.dependencies
sub _jm_obj_9($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$deprecated'.dependencies.''
        # .'$deprecated'.dependencies.''.'|'.0
        # .'$deprecated'.dependencies.''.'|'.1
        $res = json_model_17($pval, undef, undef) || json_model_11($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $deprecated (.'$deprecated')
sub json_model_18($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$deprecated'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'definitions')
        {
            # handle may definitions property
            # .'$deprecated'.definitions
            $res = _jm_obj_8($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'dependencies')
        {
            # handle may dependencies property
            # .'$deprecated'.dependencies
            $res = _jm_obj_9($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$recursiveRef')
        {
            # handle may $recursiveRef property
            # .'$deprecated'.'$recursiveRef'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$recursiveAnchor')
        {
            # handle may $recursiveAnchor property
            # .'$deprecated'.'$recursiveAnchor'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $fuzzy (.'$fuzzy')
sub json_model_19($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$fuzzy'
    # accept any object
    return jm_is_object($val);
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .
    return json_model_17($val, undef, undef);
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %json_model_4_map = (
            '$anchor' => \&json_model_3,
            '$comment' => \&_jm_f_0,
            '$defs' => \&_jm_f_1,
            '$dynamicAnchor' => \&json_model_3,
            '$dynamicRef' => \&json_model_3,
            '$id' => \&json_model_3,
            '$ref' => \&json_model_3,
            '$schema' => \&_jm_f_2,
            '$vocabulary' => \&_jm_f_3,
        );
        %_jm_cst_0 = (
            'array' => 1,
            'boolean' => 1,
            'integer' => 1,
            'null' => 1,
            'number' => 1,
            'object' => 1,
            'string' => 1,
        );
        %json_model_13_map = (
            'const' => \&_jm_f_4,
            'dependentRequired' => \&_jm_f_5,
            'enum' => \&_jm_f_6,
            'exclusiveMaximum' => \&_jm_f_7,
            'exclusiveMinimum' => \&_jm_f_8,
            'maxContains' => \&json_model_12,
            'maxItems' => \&json_model_12,
            'maxLength' => \&json_model_12,
            'maxProperties' => \&json_model_12,
            'maximum' => \&_jm_f_9,
            'minContains' => \&json_model_12,
            'minItems' => \&json_model_12,
            'minLength' => \&json_model_12,
            'minProperties' => \&json_model_12,
            'minimum' => \&_jm_f_10,
            'multipleOf' => \&_jm_f_11,
            'pattern' => \&_jm_f_12,
            'required' => \&json_model_11,
            'type' => \&_jm_f_13,
            'uniqueItems' => \&_jm_f_14,
        );
        %json_model_15_map = (
            'additionalProperties' => \&json_model_17,
            'allOf' => \&json_model_14,
            'anyOf' => \&json_model_14,
            'contains' => \&json_model_17,
            'dependentSchemas' => \&_jm_f_15,
            'else' => \&json_model_17,
            'if' => \&json_model_17,
            'items' => \&json_model_17,
            'not' => \&json_model_17,
            'oneOf' => \&json_model_14,
            'patternProperties' => \&_jm_f_16,
            'prefixItems' => \&json_model_14,
            'properties' => \&_jm_f_17,
            'propertyNames' => \&json_model_17,
            'then' => \&json_model_17,
        );
        %check_model_map = (
            '' => \&json_model_17,
            'URI-REFERENCE' => \&json_model_3,
            'core' => \&json_model_4,
            'meta' => \&json_model_5,
            'content' => \&json_model_6,
            'unevaluated' => \&json_model_7,
            'format' => \&json_model_8,
            'simpleTypes' => \&json_model_9,
            'simpleTypesArray' => \&json_model_10,
            'stringArray' => \&json_model_11,
            'nonNegativeInteger' => \&json_model_12,
            'validation' => \&json_model_13,
            'schemaArray' => \&json_model_14,
            'applicator' => \&json_model_15,
            'ObjectSchema' => \&json_model_16,
            'Schema' => \&json_model_17,
            'deprecated' => \&json_model_18,
            'fuzzy' => \&json_model_19,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %json_model_4_map = ();
        %_jm_cst_0 = ();
        %json_model_13_map = ();
        %json_model_15_map = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
