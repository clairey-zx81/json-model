//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class opt_ss extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> opt_ss_map_pmap;

    // object .
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "i")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <i> [.]", path);
            return false;
        }
        lpath = new Path("i", path);
        // .i
        res = json.isInteger(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("not a -1 strict int [.i]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <i> [.]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "f")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <f> [.]", path);
            return false;
        }
        lpath = new Path("f", path);
        // .f
        res = json.isDouble(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("not a -1.0 strict float [.f]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <f> [.]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // JSON_MODEL_STRICT_INT, JSON_MODEL_STRICT_FLOAT
        // .
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.]", path);
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            opt_ss_map_pmap = new HashMap<String, Checker>();
            opt_ss_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_0(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            opt_ss_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return opt_ss_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return opt_ss_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new opt_ss();
        Main.main("opt_ss", checker, VERSION, args);
    }
}
