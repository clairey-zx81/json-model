#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_map_0: dict[str, str]
_jm_map_1: dict[str, str]
check_model_map: PropMap

# object .'$cs'.'|'.0
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$cs'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'$cs'.'|'.0.t
            res = isinstance(pval, str) and pval == "c"
            if not res:
                rep is None or rep.append(("unexpected c [.'$cs'.'|'.0.t]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$cs'.'|'.0.t]", lpath_0 if path is not None else None))
                return False
        elif prop == "cal":
            # handle must cal property
            must_count += 1
            # .'$cs'.'|'.0.cal
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
            if not res:
                rep is None or rep.append(("not a 1 strict int [.'$cs'.'|'.0.cal]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$cs'.'|'.0.cal]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$cs'.'|'.0]", lpath_0 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "cal" in val:
                rep is None or rep.append(("missing mandatory prop <cal> [.'$cs'.'|'.0]", path))
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'$cs'.'|'.0]", path))
        return False
    return True

# object .'$cs'.'|'.1
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$cs'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'$cs'.'|'.1.t
            res = isinstance(pval, str) and pval == "s"
            if not res:
                rep is None or rep.append(("unexpected s [.'$cs'.'|'.1.t]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$cs'.'|'.1.t]", lpath_1 if path is not None else None))
                return False
        elif prop == "sus":
            # handle must sus property
            must_count += 1
            # .'$cs'.'|'.1.sus
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
            if not res:
                rep is None or rep.append(("not a 1 strict int [.'$cs'.'|'.1.sus]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$cs'.'|'.1.sus]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$cs'.'|'.1]", lpath_1 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "sus" in val:
                rep is None or rep.append(("missing mandatory prop <sus> [.'$cs'.'|'.1]", path))
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'$cs'.'|'.1]", path))
        return False
    return True


# check $cs (.'$cs')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$cs'
    res = isinstance(val, dict)
    if res:
        if "t" in val:
            tag_0: Jsonable = val.get("t", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <t> value not found [.'$cs'.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <t> is missing [.'$cs'.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'$cs'.'|']", path))
    return res

# object .'|'.0
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.0.t
            res = isinstance(pval, str) and pval == "m"
            if not res:
                rep is None or rep.append(("unexpected m [.'|'.0.t]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.0.t]", lpath_2 if path is not None else None))
                return False
        elif prop == "moe":
            # handle must moe property
            must_count += 1
            # .'|'.0.moe
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
            if not res:
                rep is None or rep.append(("not a 1 strict int [.'|'.0.moe]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.0.moe]", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.0]", lpath_2 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "moe" in val:
                rep is None or rep.append(("missing mandatory prop <moe> [.'|'.0]", path))
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.0]", path))
        return False
    return True

# object .'|'.1
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.1.t
            res = isinstance(pval, str) and pval == "h"
            if not res:
                rep is None or rep.append(("unexpected h [.'|'.1.t]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.1.t]", lpath_3 if path is not None else None))
                return False
        elif prop == "hob":
            # handle must hob property
            must_count += 1
            # .'|'.1.hob
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
            if not res:
                rep is None or rep.append(("not a 1 strict int [.'|'.1.hob]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.1.hob]", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.1]", lpath_3 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "hob" in val:
                rep is None or rep.append(("missing mandatory prop <hob> [.'|'.1]", path))
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.1]", path))
        return False
    return True

# object .'|'.2
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.2.t
            res = isinstance(pval, str) and pval == "c"
            if not res:
                rep is None or rep.append(("unexpected c [.'|'.2.t]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.2.t]", lpath_4 if path is not None else None))
                return False
        elif prop == "cal":
            # handle must cal property
            must_count += 1
            # .'|'.2.cal
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
            if not res:
                rep is None or rep.append(("not a 1 strict int [.'|'.2.cal]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.2.cal]", lpath_4 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.2]", lpath_4 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "cal" in val:
                rep is None or rep.append(("missing mandatory prop <cal> [.'|'.2]", path))
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.2]", path))
        return False
    return True

# object .'|'.3
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.3.t
            res = isinstance(pval, str) and pval == "s"
            if not res:
                rep is None or rep.append(("unexpected s [.'|'.3.t]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.3.t]", lpath_5 if path is not None else None))
                return False
        elif prop == "sus":
            # handle must sus property
            must_count += 1
            # .'|'.3.sus
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
            if not res:
                rep is None or rep.append(("not a 1 strict int [.'|'.3.sus]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.3.sus]", lpath_5 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.3]", lpath_5 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "sus" in val:
                rep is None or rep.append(("missing mandatory prop <sus> [.'|'.3]", path))
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.3]", path))
        return False
    return True


# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = isinstance(val, dict)
    if res:
        if "t" in val:
            tag_1: Jsonable = val.get("t", UNDEFINED)
            fun_1: CheckFun = _jm_map_1.get(tag_1, UNDEFINED)
            if fun_1 != UNDEFINED:
                res = fun_1(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <t> value not found [.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <t> is missing [.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_map_0
        _jm_map_0 = {
            "c": _jm_obj_0,
            "s": _jm_obj_1,
        }
        global _jm_map_1
        _jm_map_1 = {
            "m": _jm_obj_2,
            "h": _jm_obj_3,
            "c": _jm_obj_4,
            "s": _jm_obj_5,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "cs": json_model_2,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
