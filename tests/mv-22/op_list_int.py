#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_map_0: ConstMap = ConstMap()
check_model_map: PropMap

# object .'|'.0
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.0.t
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval == 0
            if not res:
                rep is None or rep.append(("unexpected =0 [.'|'.0.t]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.0.t]", lpath_0 if path is not None else None))
                return False
        elif prop == "z":
            # handle must z property
            must_count += 1
            # .'|'.0.z
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
            if not res:
                rep is None or rep.append(("not a 1 strict int [.'|'.0.z]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.0.z]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.0]", lpath_0 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.0]", path))
            if not "z" in val:
                rep is None or rep.append(("missing mandatory prop <z> [.'|'.0]", path))
        return False
    return True

# object .'|'.1
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.1.t
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("unexpected type [.'|'.1.t.'|']", lpath_1 if path is not None else None))
            if res:
                # .'|'.1.t.'|'.0
                res = pval == 2
                if not res:
                    rep is None or rep.append(("unexpected =2 [.'|'.1.t.'|'.0]", lpath_1 if path is not None else None))
                if not res:
                    # .'|'.1.t.'|'.1
                    res = pval == 4
                    if not res:
                        rep is None or rep.append(("unexpected =4 [.'|'.1.t.'|'.1]", lpath_1 if path is not None else None))
                    if not res:
                        # .'|'.1.t.'|'.2
                        res = pval == 6
                        if not res:
                            rep is None or rep.append(("unexpected =6 [.'|'.1.t.'|'.2]", lpath_1 if path is not None else None))
                        if not res:
                            # .'|'.1.t.'|'.3
                            res = pval == 8
                            if not res:
                                rep is None or rep.append(("unexpected =8 [.'|'.1.t.'|'.3]", lpath_1 if path is not None else None))
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("no model matched [.'|'.1.t.'|']", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.1.t]", lpath_1 if path is not None else None))
                return False
        elif prop == "p":
            # handle must p property
            must_count += 1
            # .'|'.1.p
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
            if not res:
                rep is None or rep.append(("not a 1 strict int [.'|'.1.p]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.1.p]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.1]", lpath_1 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "p" in val:
                rep is None or rep.append(("missing mandatory prop <p> [.'|'.1]", path))
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.1]", path))
        return False
    return True

# object .'|'.2
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.2.t
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("unexpected type [.'|'.2.t.'|']", lpath_2 if path is not None else None))
            if res:
                # .'|'.2.t.'|'.0
                res = pval == 1
                if not res:
                    rep is None or rep.append(("unexpected =1 [.'|'.2.t.'|'.0]", lpath_2 if path is not None else None))
                if not res:
                    # .'|'.2.t.'|'.1
                    res = pval == 3
                    if not res:
                        rep is None or rep.append(("unexpected =3 [.'|'.2.t.'|'.1]", lpath_2 if path is not None else None))
                    if not res:
                        # .'|'.2.t.'|'.2
                        res = pval == 5
                        if not res:
                            rep is None or rep.append(("unexpected =5 [.'|'.2.t.'|'.2]", lpath_2 if path is not None else None))
                        if not res:
                            # .'|'.2.t.'|'.3
                            res = pval == 7
                            if not res:
                                rep is None or rep.append(("unexpected =7 [.'|'.2.t.'|'.3]", lpath_2 if path is not None else None))
                            if not res:
                                # .'|'.2.t.'|'.4
                                res = pval == 9
                                if not res:
                                    rep is None or rep.append(("unexpected =9 [.'|'.2.t.'|'.4]", lpath_2 if path is not None else None))
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("no model matched [.'|'.2.t.'|']", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.2.t]", lpath_2 if path is not None else None))
                return False
        elif prop == "i":
            # handle must i property
            must_count += 1
            # .'|'.2.i
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
            if not res:
                rep is None or rep.append(("not a 1 strict int [.'|'.2.i]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.2.i]", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.2]", lpath_2 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "i" in val:
                rep is None or rep.append(("missing mandatory prop <i> [.'|'.2]", path))
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.2]", path))
        return False
    return True

# object .'|'.3
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.3.t
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval == 10
            if not res:
                rep is None or rep.append(("unexpected =10 [.'|'.3.t]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.3.t]", lpath_3 if path is not None else None))
                return False
        elif prop == "d":
            # handle must d property
            must_count += 1
            # .'|'.3.d
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
            if not res:
                rep is None or rep.append(("not a 1 strict int [.'|'.3.d]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.3.d]", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.3]", lpath_3 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "d" in val:
                rep is None or rep.append(("missing mandatory prop <d> [.'|'.3]", path))
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.3]", path))
        return False
    return True


# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = isinstance(val, dict)
    if res:
        if "t" in val:
            tag_0: Jsonable = val.get("t", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <t> value not found [.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <t> is missing [.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_map_0
        _jm_map_0[0] = _jm_obj_0
        _jm_map_0[2] = _jm_obj_1
        _jm_map_0[4] = _jm_obj_1
        _jm_map_0[6] = _jm_obj_1
        _jm_map_0[8] = _jm_obj_1
        _jm_map_0[1] = _jm_obj_2
        _jm_map_0[3] = _jm_obj_2
        _jm_map_0[5] = _jm_obj_2
        _jm_map_0[7] = _jm_obj_2
        _jm_map_0[9] = _jm_obj_2
        _jm_map_0[10] = _jm_obj_3
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
