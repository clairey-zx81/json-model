//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class everything extends ModelChecker
{
    static public final String VERSION = "2";

    Set<Object> _jm_cst_0_set;
    Map<String, Checker> _jm_f_2_map_pmap;
    Map<String, Checker> _jm_f_9_map_pmap;
    Set<Object> _jm_cst_1_set;
    Set<Object> _jm_cst_2_set;
    Set<Object> _jm_cst_3_set;
    Set<Object> _jm_cst_4_set;
    Map<String, Checker> _jm_f_36_map_pmap;
    Map<String, Checker> _jm_f_46_map_pmap;
    Map<String, Checker> _jm_f_60_map_pmap;
    Map<String, Checker> _jm_f_69_map_pmap;
    public Pattern _jm_re_0_pat = null;
    Map<String, Checker> json_model_1_map_pmap;
    public Map<String, Checker> everything_map_pmap;

    // check $a (.'$a')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$a'
        res = json.isString(val) && json.asString(val).compareTo("A") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _A [.'$a']", path);
        }
        return res;
    }

    // check $b (.'$b')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$b'
        res = json.isString(val) && json.asString(val).compareTo("A") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _A [.'$b']", path);
        }
        return res;
    }

    // check $ab (.'$ab')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        // .'$ab'
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$ab']", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'$ab']", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "a")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.'$ab']", path);
            return false;
        }
        lpath = new Path("a", path);
        // .'$ab'.a
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$ab'.a]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.'$ab']", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "b")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <b> [.'$ab']", path);
            return false;
        }
        lpath = new Path("b", path);
        // .'$ab'.b
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$ab'.b]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <b> [.'$ab']", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check $cd (.'$cd')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        // .'$cd'
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$cd']", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'$cd']", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "c")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <c> [.'$cd']", path);
            return false;
        }
        lpath = new Path("c", path);
        // .'$cd'.c
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$cd'.c]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <c> [.'$cd']", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "d")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <d> [.'$cd']", path);
            return false;
        }
        lpath = new Path("d", path);
        // .'$cd'.d
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$cd'.d]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <d> [.'$cd']", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check json_model_1_map_and (.and)
    public boolean _jm_f_0(Object val, Path path, Report rep)
    {
        // conjunction, all must match
        // .and
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.and]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            if (prop.compareTo("a0") == 0)
            {
                // handle may a0 property
                // .and.a0
                res = true;
                if (res)
                {
                    // .and.a0.'&'.0
                    res = json.isString(pval) && rt.is_valid_date(json.asString(pval));
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("unexpected $DATE [.and.a0.'&'.0]", (path != null ? lpath_1 : null));
                    }
                    if (res)
                    {
                        // .and.a0.'&'.1
                        // "/^2020-/"
                        res = json.isString(pval) && json.asString(pval).startsWith("2020-");
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected /^2020-/ [.and.a0.'&'.1]", (path != null ? lpath_1 : null));
                        }
                    }
                }
                if (res)
                {
                    if (rep != null) rep.clearEntries();
                }
                else
                {
                    if (rep != null) rep.addEntry("not all model match [.and.a0.'&']", (path != null ? lpath_1 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.and.a0]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.and]", (path != null ? lpath_1 : null));
                return false;
            }
        }
        return true;
    }

    // check json_model_1_map_array (.array)
    public boolean _jm_f_1(Object val, Path path, Report rep)
    {
        // example arrays
        // .array
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.array]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_2 = new Path(prop, path);
            if (prop.compareTo("a0") == 0)
            {
                // handle may a0 property
                // .array.a0
                res = json.isArray(pval);
                if (res)
                {
                    int arr_0_idx = -1;
                    Iterator<Object> arr_0_item_loop = json.arrayIterator(pval);
                    while (arr_0_item_loop.hasNext())
                    {
                        arr_0_idx++;
                        Object arr_0_item = arr_0_item_loop.next();
                        Path arr_0_lpath = new Path(arr_0_idx, (path != null ? lpath_2 : null));
                        // .array.a0.0
                        res = json.isInteger(arr_0_item) && json.asLong(arr_0_item) >= 0;
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not a 0 strict int [.array.a0.0]", ((path != null ? lpath_2 : null) != null ? arr_0_lpath : null));
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.array.a0]", (path != null ? lpath_2 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.array.a0]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("a1") == 0)
            {
                // handle may a1 property
                // .array.a1
                res = json.isArray(pval);
                if (res)
                {
                    int arr_1_idx = -1;
                    Iterator<Object> arr_1_item_loop = json.arrayIterator(pval);
                    while (arr_1_item_loop.hasNext())
                    {
                        arr_1_idx++;
                        Object arr_1_item = arr_1_item_loop.next();
                        Path arr_1_lpath = new Path(arr_1_idx, (path != null ? lpath_2 : null));
                        // .array.a1.0
                        res = json.isString(arr_1_item);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected string [.array.a1.0]", ((path != null ? lpath_2 : null) != null ? arr_1_lpath : null));
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.array.a1]", (path != null ? lpath_2 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.array.a1]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("a2") == 0)
            {
                // handle may a2 property
                // .array.a2
                res = json.isArray(pval);
                if (res)
                {
                    int arr_2_idx = -1;
                    Iterator<Object> arr_2_item_loop = json.arrayIterator(pval);
                    while (arr_2_item_loop.hasNext())
                    {
                        arr_2_idx++;
                        Object arr_2_item = arr_2_item_loop.next();
                        Path arr_2_lpath = new Path(arr_2_idx, (path != null ? lpath_2 : null));
                        // .array.a2.0
                        res = json.isString(arr_2_item) && rt.is_valid_date(json.asString(arr_2_item));
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $DATE [.array.a2.0]", ((path != null ? lpath_2 : null) != null ? arr_2_lpath : null));
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.array.a2]", (path != null ? lpath_2 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.array.a2]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("a3") == 0)
            {
                // handle may a3 property
                // .array.a3
                res = json.isArray(pval);
                if (res)
                {
                    int arr_3_idx = -1;
                    Iterator<Object> arr_3_item_loop = json.arrayIterator(pval);
                    while (arr_3_item_loop.hasNext())
                    {
                        arr_3_idx++;
                        Object arr_3_item = arr_3_item_loop.next();
                        Path arr_3_lpath = new Path(arr_3_idx, (path != null ? lpath_2 : null));
                        // .array.a3.0
                        res = json.isBoolean(arr_3_item);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not a bool [.array.a3.0]", ((path != null ? lpath_2 : null) != null ? arr_3_lpath : null));
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.array.a3]", (path != null ? lpath_2 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.array.a3]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("a4") == 0)
            {
                // handle may a4 property
                // .array.a4
                res = json.isArray(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.array.a4]", (path != null ? lpath_2 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.array.a4]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.array]", (path != null ? lpath_2 : null));
                return false;
            }
        }
        return true;
    }

    // check _jm_f_2_map_b0 (.bool.b0)
    public boolean _jm_f_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .bool.b0
        res = json.isBoolean(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not a bool [.bool.b0]", path);
        }
        return res;
    }

    // check _jm_f_2_map_b1 (.bool.b1)
    public boolean _jm_f_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .bool.b1
        res = json.isBoolean(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $BOOL [.bool.b1]", path);
        }
        return res;
    }

    // check _jm_f_2_map_b2 (.bool.b2)
    public boolean _jm_f_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .bool.b2
        res = json.isBoolean(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $BOOLEAN [.bool.b2]", path);
        }
        return res;
    }

    // check _jm_f_2_map_b3 (.bool.b3)
    public boolean _jm_f_6(Object val, Path path, Report rep)
    {
        boolean res;
        // .bool.b3
        res = json.isBoolean(val) && json.asBoolean(val) == true;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =true [.bool.b3]", path);
        }
        return res;
    }

    // check _jm_f_2_map_b4 (.bool.b4)
    public boolean _jm_f_7(Object val, Path path, Report rep)
    {
        boolean res;
        // .bool.b4
        res = json.isBoolean(val) && json.asBoolean(val) == false;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =false [.bool.b4]", path);
        }
        return res;
    }


    // check _jm_f_2_map_b5 (.bool.b5)
    public boolean _jm_f_8(Object val, Path path, Report rep)
    {
        boolean res;
        // .bool.b5
        res = json.isScalar(val) && _jm_cst_0_set.contains(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("value not in enum [.bool.b5.'|']", path);
        }
        return res;
    }


    // check json_model_1_map_bool (.bool)
    public boolean _jm_f_2(Object val, Path path, Report rep)
    {
        // booleans: inference, predefs, constants, enum
        // .bool
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.bool]", path);
            return false;
        }
        Checker pfun;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_3 = new Path(prop, path);
            if ((pfun = _jm_f_2_map_pmap.get(prop)) != null)
            {
                // handle 6 may props
                if (pfun != null && ! (pfun.call(pval, (path != null ? lpath_3 : null), rep)))
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.bool]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.bool]", (path != null ? lpath_3 : null));
                return false;
            }
        }
        return true;
    }

    // check _jm_f_9_map_cia0 (.constraints.cia0)
    public boolean _jm_f_10(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cia0
        // .constraints.cia0.'@'
        res = json.isArray(val);
        if (res)
        {
            int arr_4_idx = -1;
            Iterator<Object> arr_4_item_loop = json.arrayIterator(val);
            while (arr_4_item_loop.hasNext())
            {
                arr_4_idx++;
                Object arr_4_item = arr_4_item_loop.next();
                Path arr_4_lpath = new Path(arr_4_idx, path);
                // .constraints.cia0.'@'.0
                res = json.isInteger(arr_4_item) && json.asLong(arr_4_item) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.constraints.cia0.'@'.0]", (path != null ? arr_4_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.constraints.cia0.'@']", path);
        }
        if (res)
        {
            long ival_0 = json.arrayLength(val);
            res = ival_0 == 3;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cia0]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cia1 (.constraints.cia1)
    public boolean _jm_f_11(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cia1
        // .constraints.cia1.'@'
        res = json.isArray(val);
        if (res)
        {
            int arr_5_idx = -1;
            Iterator<Object> arr_5_item_loop = json.arrayIterator(val);
            while (arr_5_item_loop.hasNext())
            {
                arr_5_idx++;
                Object arr_5_item = arr_5_item_loop.next();
                Path arr_5_lpath = new Path(arr_5_idx, path);
                // .constraints.cia1.'@'.0
                res = json.isInteger(arr_5_item) && json.asLong(arr_5_item) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.constraints.cia1.'@'.0]", (path != null ? arr_5_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.constraints.cia1.'@']", path);
        }
        if (res)
        {
            long ival_1 = json.arrayLength(val);
            res = ival_1 != 4 && ival_1 <= 5 && ival_1 >= 2;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cia1]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cia2 (.constraints.cia2)
    public boolean _jm_f_12(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cia2
        // .constraints.cia2.'@'
        res = json.isArray(val);
        if (res)
        {
            int arr_6_idx = -1;
            Iterator<Object> arr_6_item_loop = json.arrayIterator(val);
            while (arr_6_item_loop.hasNext())
            {
                arr_6_idx++;
                Object arr_6_item = arr_6_item_loop.next();
                Path arr_6_lpath = new Path(arr_6_idx, path);
                // .constraints.cia2.'@'.0
                res = json.isInteger(arr_6_item) && json.asLong(arr_6_item) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.constraints.cia2.'@'.0]", (path != null ? arr_6_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.constraints.cia2.'@']", path);
        }
        if (res)
        {
            long ival_2 = json.arrayLength(val);
            res = ival_2 <= 4 && ival_2 >= 3;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cia2]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cii0 (.constraints.cii0)
    public boolean _jm_f_13(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cii0
        res = json.isInteger(val) && json.asLong(val) == 10;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =10 [.constraints.cii0]", path);
        }
        return res;
    }

    // check _jm_f_9_map_cii1 (.constraints.cii1)
    public boolean _jm_f_14(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cii1
        // .constraints.cii1.'@'
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.constraints.cii1.'@']", path);
        }
        if (res)
        {
            long ival_3 = json.asLong(val);
            res = ival_3 != 10 && ival_3 <= 12 && ival_3 >= 8;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cii1]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cii2 (.constraints.cii2)
    public boolean _jm_f_15(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cii2
        // .constraints.cii2.'@'
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.constraints.cii2.'@']", path);
        }
        if (res)
        {
            long ival_4 = json.asLong(val);
            res = ival_4 <= 9 && ival_4 >= 8;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cii2]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cin0 (.constraints.cin0)
    public boolean _jm_f_16(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cin0
        // .constraints.cin0.'@'
        res = json.isDouble(val) && json.asDouble(val) >= 0.0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0.0 strict float [.constraints.cin0.'@']", path);
        }
        if (res)
        {
            double fval_0 = json.asDouble(val);
            res = fval_0 == 10;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cin0]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cin1 (.constraints.cin1)
    public boolean _jm_f_17(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cin1
        // .constraints.cin1.'@'
        res = json.isDouble(val) && json.asDouble(val) >= 0.0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0.0 strict float [.constraints.cin1.'@']", path);
        }
        if (res)
        {
            double fval_1 = json.asDouble(val);
            res = fval_1 != 10 && fval_1 <= 12 && fval_1 >= 8;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cin1]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cin2 (.constraints.cin2)
    public boolean _jm_f_18(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cin2
        // .constraints.cin2.'@'
        res = json.isDouble(val) && json.asDouble(val) >= 0.0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0.0 strict float [.constraints.cin2.'@']", path);
        }
        if (res)
        {
            double fval_2 = json.asDouble(val);
            res = fval_2 < 10 && fval_2 > 7;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cin2]", path);
            }
        }
        return res;
    }

    // object .constraints.cio0.'@'
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.constraints.cio0.'@']", path);
            return false;
        }
        // accept any object
        return true;
    }

    // check _jm_f_9_map_cio0 (.constraints.cio0)
    public boolean _jm_f_19(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cio0
        // .constraints.cio0.'@'
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.constraints.cio0.'@']", path);
        }
        if (res)
        {
            long ival_5 = json.objectSize(val);
            res = ival_5 == 2;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cio0]", path);
            }
        }
        return res;
    }

    // object .constraints.cio1.'@'
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.constraints.cio1.'@']", path);
            return false;
        }
        // accept any object
        return true;
    }

    // check _jm_f_9_map_cio1 (.constraints.cio1)
    public boolean _jm_f_20(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cio1
        // .constraints.cio1.'@'
        res = _jm_obj_1(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.constraints.cio1.'@']", path);
        }
        if (res)
        {
            long ival_6 = json.objectSize(val);
            res = ival_6 != 2 && ival_6 <= 3 && ival_6 >= 1;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cio1]", path);
            }
        }
        return res;
    }

    // object .constraints.cio2.'@'
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.constraints.cio2.'@']", path);
            return false;
        }
        // accept any object
        return true;
    }

    // check _jm_f_9_map_cio2 (.constraints.cio2)
    public boolean _jm_f_21(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cio2
        // .constraints.cio2.'@'
        res = _jm_obj_2(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.constraints.cio2.'@']", path);
        }
        if (res)
        {
            long ival_7 = json.objectSize(val);
            res = ival_7 <= 4 && ival_7 >= 3;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cio2]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cis0 (.constraints.cis0)
    public boolean _jm_f_22(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cis0
        // .constraints.cis0.'@'
        res = json.isString(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.constraints.cis0.'@']", path);
        }
        if (res)
        {
            long ival_8 = json.asString(val).length();
            res = ival_8 == 10;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cis0]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cis1 (.constraints.cis1)
    public boolean _jm_f_23(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cis1
        // .constraints.cis1.'@'
        res = json.isString(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.constraints.cis1.'@']", path);
        }
        if (res)
        {
            long ival_9 = json.asString(val).length();
            res = ival_9 != 10 && ival_9 <= 12 && ival_9 >= 8;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cis1]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cis2 (.constraints.cis2)
    public boolean _jm_f_24(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cis2
        // .constraints.cis2.'@'
        res = json.isString(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.constraints.cis2.'@']", path);
        }
        if (res)
        {
            long ival_10 = json.asString(val).length();
            res = ival_10 <= 9 && ival_10 >= 8;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cis2]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cni0 (.constraints.cni0)
    public boolean _jm_f_25(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cni0
        res = json.isInteger(val) && json.asLong(val) == 42;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =42 [.constraints.cni0]", path);
        }
        return res;
    }

    // check _jm_f_9_map_cni1 (.constraints.cni1)
    public boolean _jm_f_26(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cni1
        // .constraints.cni1.'@'
        res = json.isInteger(val) && json.asLong(val) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.constraints.cni1.'@']", path);
        }
        if (res)
        {
            long ival_11 = json.asLong(val);
            double fval_3 = json.asNumber(val);
            res = fval_3 != 42.0 && ival_11 <= 99;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cni1]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cni2 (.constraints.cni2)
    public boolean _jm_f_27(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cni2
        res = json.isInteger(val) && json.asLong(val) == 42;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =42 [.constraints.cni2]", path);
        }
        return res;
    }

    // check _jm_f_9_map_cnn0 (.constraints.cnn0)
    public boolean _jm_f_28(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cnn0
        // .constraints.cnn0.'@'
        res = json.isDouble(val) && json.asDouble(val) >= 0.0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0.0 strict float [.constraints.cnn0.'@']", path);
        }
        if (res)
        {
            double fval_4 = json.asDouble(val);
            res = fval_4 == 42.1;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cnn0]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cnn1 (.constraints.cnn1)
    public boolean _jm_f_29(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cnn1
        // .constraints.cnn1.'@'
        res = json.isDouble(val) && json.asDouble(val) >= 0.0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0.0 strict float [.constraints.cnn1.'@']", path);
        }
        if (res)
        {
            double fval_5 = json.asDouble(val);
            res = fval_5 != 42.5 && fval_5 <= 43.0 && fval_5 >= 42.0;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cnn1]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cnn2 (.constraints.cnn2)
    public boolean _jm_f_30(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cnn2
        // .constraints.cnn2.'@'
        res = json.isDouble(val) && json.asDouble(val) >= 0.0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0.0 strict float [.constraints.cnn2.'@']", path);
        }
        if (res)
        {
            double fval_6 = json.asDouble(val);
            res = fval_6 < 43.0 && fval_6 > 42.0;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cnn2]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_css0 (.constraints.css0)
    public boolean _jm_f_31(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.css0
        // .constraints.css0.'@'
        res = json.isString(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.constraints.css0.'@']", path);
        }
        if (res)
        {
            String sval_0 = json.asString(val);
            res = sval_0.compareTo("Susie") == 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.css0]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_css1 (.constraints.css1)
    public boolean _jm_f_32(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.css1
        // .constraints.css1.'@'
        res = json.isString(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.constraints.css1.'@']", path);
        }
        if (res)
        {
            String sval_1 = json.asString(val);
            res = sval_1.compareTo("Hobbes") != 0 && sval_1.compareTo("Z") <= 0 && sval_1.compareTo("A") >= 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.css1]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_css2 (.constraints.css2)
    public boolean _jm_f_33(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.css2
        // .constraints.css2.'@'
        res = json.isString(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.constraints.css2.'@']", path);
        }
        if (res)
        {
            String sval_2 = json.asString(val);
            res = sval_2.compareTo("Z") < 0 && sval_2.compareTo("A") > 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.css2]", path);
            }
        }
        return res;
    }

    // check _jm_f_9_map_cua0 (.constraints.cua0)
    public boolean _jm_f_34(Object val, Path path, Report rep)
    {
        boolean res;
        // .constraints.cua0
        // .constraints.cua0.'@'
        res = json.isArray(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.constraints.cua0.'@']", path);
        }
        if (res)
        {
            res = rt.array_is_unique(val, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.constraints.cua0]", path);
            }
        }
        return res;
    }


    // check json_model_1_map_constraints (.constraints)
    public boolean _jm_f_9(Object val, Path path, Report rep)
    {
        // .constraints
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.constraints]", path);
            return false;
        }
        Checker pfun;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_4 = new Path(prop, path);
            if ((pfun = _jm_f_9_map_pmap.get(prop)) != null)
            {
                // handle 25 may props
                if (pfun != null && ! (pfun.call(pval, (path != null ? lpath_4 : null), rep)))
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.constraints]", (path != null ? lpath_4 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.constraints]", (path != null ? lpath_4 : null));
                return false;
            }
        }
        return true;
    }





    // check json_model_1_map_enum (.enum)
    public boolean _jm_f_35(Object val, Path path, Report rep)
    {
        // an enumeration only contains constants
        // .enum
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.enum]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_5 = new Path(prop, path);
            if (prop.compareTo("e0") == 0)
            {
                // handle may e0 property
                // .enum.e0
                res = json.isScalar(pval) && _jm_cst_1_set.contains(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("value not in enum [.enum.e0.'|']", (path != null ? lpath_5 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.enum.e0]", (path != null ? lpath_5 : null));
                    return false;
                }
            }
            else if (prop.compareTo("e1") == 0)
            {
                // handle may e1 property
                // .enum.e1
                res = json.isScalar(pval) && _jm_cst_2_set.contains(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("value not in enum [.enum.e1.'|']", (path != null ? lpath_5 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.enum.e1]", (path != null ? lpath_5 : null));
                    return false;
                }
            }
            else if (prop.compareTo("e2") == 0)
            {
                // handle may e2 property
                // .enum.e2
                res = json.isScalar(pval) && _jm_cst_3_set.contains(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("value not in enum [.enum.e2.'|']", (path != null ? lpath_5 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.enum.e2]", (path != null ? lpath_5 : null));
                    return false;
                }
            }
            else if (prop.compareTo("e3") == 0)
            {
                // handle may e3 property
                // .enum.e3
                res = json.isScalar(pval) && _jm_cst_4_set.contains(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("value not in enum [.enum.e3.'|']", (path != null ? lpath_5 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.enum.e3]", (path != null ? lpath_5 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.enum]", (path != null ? lpath_5 : null));
                return false;
            }
        }
        return true;
    }

    // check _jm_f_36_map_f0 (.float.f0)
    public boolean _jm_f_37(Object val, Path path, Report rep)
    {
        boolean res;
        // .float.f0
        res = json.isDouble(val) && json.asDouble(val) >= 0.0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0.0 strict float [.float.f0]", path);
        }
        return res;
    }

    // check _jm_f_36_map_f1 (.float.f1)
    public boolean _jm_f_38(Object val, Path path, Report rep)
    {
        boolean res;
        // .float.f1
        res = json.isDouble(val) && json.asDouble(val) > 0.0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1.0 strict float [.float.f1]", path);
        }
        return res;
    }

    // check _jm_f_36_map_f2 (.float.f2)
    public boolean _jm_f_39(Object val, Path path, Report rep)
    {
        boolean res;
        // .float.f2
        res = json.isDouble(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not a -1.0 strict float [.float.f2]", path);
        }
        return res;
    }

    // check _jm_f_36_map_f3 (.float.f3)
    public boolean _jm_f_40(Object val, Path path, Report rep)
    {
        boolean res;
        // .float.f3
        res = json.isDouble(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $FLOAT [.float.f3]", path);
        }
        return res;
    }

    // check _jm_f_36_map_f4 (.float.f4)
    public boolean _jm_f_41(Object val, Path path, Report rep)
    {
        boolean res;
        // .float.f4
        res = json.isDouble(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $F32 [.float.f4]", path);
        }
        return res;
    }

    // check _jm_f_36_map_f5 (.float.f5)
    public boolean _jm_f_42(Object val, Path path, Report rep)
    {
        boolean res;
        // .float.f5
        res = json.isDouble(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $F64 [.float.f5]", path);
        }
        return res;
    }

    // check _jm_f_36_map_f6 (.float.f6)
    public boolean _jm_f_43(Object val, Path path, Report rep)
    {
        boolean res;
        // .float.f6
        res = json.isDouble(val) && json.asDouble(val) == 3.1415927;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =3.1415927 [.float.f6]", path);
        }
        return res;
    }

    // check _jm_f_36_map_f7 (.float.f7)
    public boolean _jm_f_44(Object val, Path path, Report rep)
    {
        boolean res;
        // .float.f7
        res = json.isDouble(val) && json.asDouble(val) == 1e+100;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =1.0E100 [.float.f7]", path);
        }
        return res;
    }

    // check _jm_f_36_map_f8 (.float.f8)
    public boolean _jm_f_45(Object val, Path path, Report rep)
    {
        boolean res;
        // .float.f8
        res = json.isDouble(val) && json.asDouble(val) == -42.1;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =-42.1 [.float.f8]", path);
        }
        return res;
    }


    // check json_model_1_map_float (.float)
    public boolean _jm_f_36(Object val, Path path, Report rep)
    {
        // floats: inference, predefs, constants
        // .float
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.float]", path);
            return false;
        }
        Checker pfun;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_6 = new Path(prop, path);
            if ((pfun = _jm_f_36_map_pmap.get(prop)) != null)
            {
                // handle 9 may props
                if (pfun != null && ! (pfun.call(pval, (path != null ? lpath_6 : null), rep)))
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.float]", (path != null ? lpath_6 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.float]", (path != null ? lpath_6 : null));
                return false;
            }
        }
        return true;
    }

    // check _jm_f_46_map_i0 (.int.i0)
    public boolean _jm_f_47(Object val, Path path, Report rep)
    {
        boolean res;
        // .int.i0
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.int.i0]", path);
        }
        return res;
    }

    // check _jm_f_46_map_i1 (.int.i1)
    public boolean _jm_f_48(Object val, Path path, Report rep)
    {
        boolean res;
        // .int.i1
        res = json.isInteger(val) && json.asLong(val) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.int.i1]", path);
        }
        return res;
    }

    // check _jm_f_46_map_i2 (.int.i2)
    public boolean _jm_f_49(Object val, Path path, Report rep)
    {
        boolean res;
        // .int.i2
        res = json.isInteger(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not a -1 strict int [.int.i2]", path);
        }
        return res;
    }

    // check _jm_f_46_map_i3 (.int.i3)
    public boolean _jm_f_50(Object val, Path path, Report rep)
    {
        boolean res;
        // .int.i3
        res = json.isInteger(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $INT [.int.i3]", path);
        }
        return res;
    }

    // check _jm_f_46_map_i4 (.int.i4)
    public boolean _jm_f_51(Object val, Path path, Report rep)
    {
        boolean res;
        // .int.i4
        res = json.isInteger(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $INTEGER [.int.i4]", path);
        }
        return res;
    }

    // check _jm_f_46_map_i5 (.int.i5)
    public boolean _jm_f_52(Object val, Path path, Report rep)
    {
        boolean res;
        // .int.i5
        res = json.isInteger(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $I32 [.int.i5]", path);
        }
        return res;
    }

    // check _jm_f_46_map_i6 (.int.i6)
    public boolean _jm_f_53(Object val, Path path, Report rep)
    {
        boolean res;
        // .int.i6
        res = json.isInteger(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $I64 [.int.i6]", path);
        }
        return res;
    }

    // check _jm_f_46_map_i7 (.int.i7)
    public boolean _jm_f_54(Object val, Path path, Report rep)
    {
        boolean res;
        // .int.i7
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $U32 [.int.i7]", path);
        }
        return res;
    }

    // check _jm_f_46_map_i8 (.int.i8)
    public boolean _jm_f_55(Object val, Path path, Report rep)
    {
        boolean res;
        // .int.i8
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $U64 [.int.i8]", path);
        }
        return res;
    }

    // check _jm_f_46_map_i9 (.int.i9)
    public boolean _jm_f_56(Object val, Path path, Report rep)
    {
        boolean res;
        // .int.i9
        res = json.isInteger(val) && json.asLong(val) == 42;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =42 [.int.i9]", path);
        }
        return res;
    }

    // check _jm_f_46_map_ia (.int.ia)
    public boolean _jm_f_57(Object val, Path path, Report rep)
    {
        boolean res;
        // .int.ia
        res = json.isInteger(val) && json.asLong(val) == -42;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =-42 [.int.ia]", path);
        }
        return res;
    }


    // check json_model_1_map_int (.int)
    public boolean _jm_f_46(Object val, Path path, Report rep)
    {
        // integers: inference, predefs, constants
        // .int
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.int]", path);
            return false;
        }
        Checker pfun;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_7 = new Path(prop, path);
            if ((pfun = _jm_f_46_map_pmap.get(prop)) != null)
            {
                // handle 11 may props
                if (pfun != null && ! (pfun.call(pval, (path != null ? lpath_7 : null), rep)))
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.int]", (path != null ? lpath_7 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.int]", (path != null ? lpath_7 : null));
                return false;
            }
        }
        return true;
    }

    // object .merge.m0
    public boolean _jm_obj_3(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.merge.m0]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_9 = new Path(prop, path);
            if (prop.compareTo("a") == 0)
            {
                // handle must a property
                must_count += 1;
                // .merge.m0.a
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.merge.m0.a]", (path != null ? lpath_9 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.merge.m0.a]", (path != null ? lpath_9 : null));
                    return false;
                }
            }
            else if (prop.compareTo("b") == 0)
            {
                // handle may b property
                // .merge.m0.b
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.merge.m0.b]", (path != null ? lpath_9 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.merge.m0.b]", (path != null ? lpath_9 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.merge.m0]", (path != null ? lpath_9 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "a"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <a> [.merge.m0]", path);
                }
            }
            return false;
        }
        return true;
    }

    // object .merge.m1.'|'.1
    public boolean _jm_obj_4(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.merge.m1.'|'.1]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.merge.m1.'|'.1]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "a")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.merge.m1.'|'.1]", path);
            return false;
        }
        lpath = new Path("a", path);
        // .merge.m1.'|'.1.a
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.merge.m1.'|'.1.a]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.merge.m1.'|'.1]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "c")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <c> [.merge.m1.'|'.1]", path);
            return false;
        }
        lpath = new Path("c", path);
        // .merge.m1.'|'.1.c
        res = json.isInteger(pval) && json.asLong(pval) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.merge.m1.'|'.1.c]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <c> [.merge.m1.'|'.1]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .merge.m1.'|'.0
    public boolean _jm_obj_5(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.merge.m1.'|'.0]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.merge.m1.'|'.0]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "a")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.merge.m1.'|'.0]", path);
            return false;
        }
        lpath = new Path("a", path);
        // .merge.m1.'|'.0.a
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.merge.m1.'|'.0.a]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.merge.m1.'|'.0]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "b")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <b> [.merge.m1.'|'.0]", path);
            return false;
        }
        lpath = new Path("b", path);
        // .merge.m1.'|'.0.b
        res = json.isInteger(pval) && json.asLong(pval) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.merge.m1.'|'.0.b]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <b> [.merge.m1.'|'.0]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .merge.m2.'|'.1
    public boolean _jm_obj_6(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.merge.m2.'|'.1]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.merge.m2.'|'.1]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "a")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.merge.m2.'|'.1]", path);
            return false;
        }
        lpath = new Path("a", path);
        // .merge.m2.'|'.1.a
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.merge.m2.'|'.1.a]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.merge.m2.'|'.1]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "c")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <c> [.merge.m2.'|'.1]", path);
            return false;
        }
        lpath = new Path("c", path);
        // .merge.m2.'|'.1.c
        res = json.isInteger(pval) && json.asLong(pval) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.merge.m2.'|'.1.c]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <c> [.merge.m2.'|'.1]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .merge.m2.'|'.0
    public boolean _jm_obj_7(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.merge.m2.'|'.0]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.merge.m2.'|'.0]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "a")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.merge.m2.'|'.0]", path);
            return false;
        }
        lpath = new Path("a", path);
        // .merge.m2.'|'.0.a
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.merge.m2.'|'.0.a]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.merge.m2.'|'.0]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "b")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <b> [.merge.m2.'|'.0]", path);
            return false;
        }
        lpath = new Path("b", path);
        // .merge.m2.'|'.0.b
        res = json.isInteger(pval) && json.asLong(pval) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.merge.m2.'|'.0.b]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <b> [.merge.m2.'|'.0]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .merge.m3.'|'.3
    public boolean _jm_obj_8(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.merge.m3.'|'.3]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.merge.m3.'|'.3]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "b")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <b> [.merge.m3.'|'.3]", path);
            return false;
        }
        lpath = new Path("b", path);
        // .merge.m3.'|'.3.b
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.merge.m3.'|'.3.b]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <b> [.merge.m3.'|'.3]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "d")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <d> [.merge.m3.'|'.3]", path);
            return false;
        }
        lpath = new Path("d", path);
        // .merge.m3.'|'.3.d
        res = json.isInteger(pval) && json.asLong(pval) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.merge.m3.'|'.3.d]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <d> [.merge.m3.'|'.3]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .merge.m3.'|'.2
    public boolean _jm_obj_9(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.merge.m3.'|'.2]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.merge.m3.'|'.2]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "b")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <b> [.merge.m3.'|'.2]", path);
            return false;
        }
        lpath = new Path("b", path);
        // .merge.m3.'|'.2.b
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.merge.m3.'|'.2.b]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <b> [.merge.m3.'|'.2]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "c")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <c> [.merge.m3.'|'.2]", path);
            return false;
        }
        lpath = new Path("c", path);
        // .merge.m3.'|'.2.c
        res = json.isInteger(pval) && json.asLong(pval) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.merge.m3.'|'.2.c]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <c> [.merge.m3.'|'.2]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .merge.m3.'|'.1
    public boolean _jm_obj_10(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.merge.m3.'|'.1]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.merge.m3.'|'.1]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "a")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.merge.m3.'|'.1]", path);
            return false;
        }
        lpath = new Path("a", path);
        // .merge.m3.'|'.1.a
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.merge.m3.'|'.1.a]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.merge.m3.'|'.1]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "d")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <d> [.merge.m3.'|'.1]", path);
            return false;
        }
        lpath = new Path("d", path);
        // .merge.m3.'|'.1.d
        res = json.isInteger(pval) && json.asLong(pval) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.merge.m3.'|'.1.d]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <d> [.merge.m3.'|'.1]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .merge.m3.'|'.0
    public boolean _jm_obj_11(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.merge.m3.'|'.0]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.merge.m3.'|'.0]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "a")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.merge.m3.'|'.0]", path);
            return false;
        }
        lpath = new Path("a", path);
        // .merge.m3.'|'.0.a
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.merge.m3.'|'.0.a]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.merge.m3.'|'.0]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "c")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <c> [.merge.m3.'|'.0]", path);
            return false;
        }
        lpath = new Path("c", path);
        // .merge.m3.'|'.0.c
        res = json.isInteger(pval) && json.asLong(pval) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.merge.m3.'|'.0.c]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <c> [.merge.m3.'|'.0]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .merge.m4
    public boolean _jm_obj_12(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.merge.m4]", path);
            return false;
        }
        if (json.objectSize(val) != 4)
        {
            if (rep != null) rep.addEntry("bad property count [.merge.m4]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "a")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.merge.m4]", path);
            return false;
        }
        lpath = new Path("a", path);
        // .merge.m4.a
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.merge.m4.a]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.merge.m4]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "b")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <b> [.merge.m4]", path);
            return false;
        }
        lpath = new Path("b", path);
        // .merge.m4.b
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.merge.m4.b]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <b> [.merge.m4]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "c")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <c> [.merge.m4]", path);
            return false;
        }
        lpath = new Path("c", path);
        // .merge.m4.c
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.merge.m4.c]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <c> [.merge.m4]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "d")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <d> [.merge.m4]", path);
            return false;
        }
        lpath = new Path("d", path);
        // .merge.m4.d
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.merge.m4.d]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <d> [.merge.m4]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check json_model_1_map_merge (.merge)
    public boolean _jm_f_58(Object val, Path path, Report rep)
    {
        // merge object properties
        // .merge
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.merge]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_8 = new Path(prop, path);
            if (prop.compareTo("m0") == 0)
            {
                // handle may m0 property
                // .merge.m0
                res = _jm_obj_3(pval, (path != null ? lpath_8 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected element [.merge.m0]", (path != null ? lpath_8 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.merge.m0]", (path != null ? lpath_8 : null));
                    return false;
                }
            }
            else if (prop.compareTo("m1") == 0)
            {
                // handle may m1 property
                // .merge.m1
                res = json.isObject(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected type [.merge.m1.'|']", (path != null ? lpath_8 : null));
                }
                if (res)
                {
                    // .merge.m1.'|'.0
                    res = _jm_obj_5(pval, (path != null ? lpath_8 : null), rep);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("unexpected element [.merge.m1.'|'.0]", (path != null ? lpath_8 : null));
                    }
                    if (! res)
                    {
                        // .merge.m1.'|'.1
                        res = _jm_obj_4(pval, (path != null ? lpath_8 : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected element [.merge.m1.'|'.1]", (path != null ? lpath_8 : null));
                        }
                    }
                    if (res)
                    {
                        if (rep != null) rep.clearEntries();
                    }
                    else
                    {
                        if (rep != null) rep.addEntry("no model matched [.merge.m1.'|']", (path != null ? lpath_8 : null));
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.merge.m1]", (path != null ? lpath_8 : null));
                    return false;
                }
            }
            else if (prop.compareTo("m2") == 0)
            {
                // handle may m2 property
                // .merge.m2
                res = json.isObject(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected type [.merge.m2.'|']", (path != null ? lpath_8 : null));
                }
                if (res)
                {
                    // .merge.m2.'|'.0
                    res = _jm_obj_7(pval, (path != null ? lpath_8 : null), rep);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("unexpected element [.merge.m2.'|'.0]", (path != null ? lpath_8 : null));
                    }
                    if (! res)
                    {
                        // .merge.m2.'|'.1
                        res = _jm_obj_6(pval, (path != null ? lpath_8 : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected element [.merge.m2.'|'.1]", (path != null ? lpath_8 : null));
                        }
                    }
                    if (res)
                    {
                        if (rep != null) rep.clearEntries();
                    }
                    else
                    {
                        if (rep != null) rep.addEntry("no model matched [.merge.m2.'|']", (path != null ? lpath_8 : null));
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.merge.m2]", (path != null ? lpath_8 : null));
                    return false;
                }
            }
            else if (prop.compareTo("m3") == 0)
            {
                // handle may m3 property
                // .merge.m3
                res = json.isObject(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected type [.merge.m3.'|']", (path != null ? lpath_8 : null));
                }
                if (res)
                {
                    // .merge.m3.'|'.0
                    res = _jm_obj_11(pval, (path != null ? lpath_8 : null), rep);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("unexpected element [.merge.m3.'|'.0]", (path != null ? lpath_8 : null));
                    }
                    if (! res)
                    {
                        // .merge.m3.'|'.1
                        res = _jm_obj_10(pval, (path != null ? lpath_8 : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected element [.merge.m3.'|'.1]", (path != null ? lpath_8 : null));
                        }
                        if (! res)
                        {
                            // .merge.m3.'|'.2
                            res = _jm_obj_9(pval, (path != null ? lpath_8 : null), rep);
                            if (! res)
                            {
                                if (rep != null) rep.addEntry("unexpected element [.merge.m3.'|'.2]", (path != null ? lpath_8 : null));
                            }
                            if (! res)
                            {
                                // .merge.m3.'|'.3
                                res = _jm_obj_8(pval, (path != null ? lpath_8 : null), rep);
                                if (! res)
                                {
                                    if (rep != null) rep.addEntry("unexpected element [.merge.m3.'|'.3]", (path != null ? lpath_8 : null));
                                }
                            }
                        }
                    }
                    if (res)
                    {
                        if (rep != null) rep.clearEntries();
                    }
                    else
                    {
                        if (rep != null) rep.addEntry("no model matched [.merge.m3.'|']", (path != null ? lpath_8 : null));
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.merge.m3]", (path != null ? lpath_8 : null));
                    return false;
                }
            }
            else if (prop.compareTo("m4") == 0)
            {
                // handle may m4 property
                // .merge.m4
                res = _jm_obj_12(pval, (path != null ? lpath_8 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected element [.merge.m4]", (path != null ? lpath_8 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.merge.m4]", (path != null ? lpath_8 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.merge]", (path != null ? lpath_8 : null));
                return false;
            }
        }
        return true;
    }

    // check json_model_1_map_null (.null)
    public boolean _jm_f_59(Object val, Path path, Report rep)
    {
        // null: inference, predefs, constants
        // .null
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.null]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_10 = new Path(prop, path);
            if (prop.compareTo("n0") == 0)
            {
                // handle may n0 property
                // .null.n0
                res = json.isNull(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not null [.null.n0]", (path != null ? lpath_10 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.null.n0]", (path != null ? lpath_10 : null));
                    return false;
                }
            }
            else if (prop.compareTo("n1") == 0)
            {
                // handle may n1 property
                // .null.n1
                res = json.isNull(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $NULL [.null.n1]", (path != null ? lpath_10 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.null.n1]", (path != null ? lpath_10 : null));
                    return false;
                }
            }
            else if (prop.compareTo("n2") == 0)
            {
                // handle may n2 property
                // .null.n2
                res = json.isNull(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected =null [.null.n2]", (path != null ? lpath_10 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.null.n2]", (path != null ? lpath_10 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.null]", (path != null ? lpath_10 : null));
                return false;
            }
        }
        return true;
    }

    // check _jm_f_60_map_o0 (.object.o0)
    public boolean _jm_f_61(Object val, Path path, Report rep)
    {
        // .object.o0
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.object.o0]", path);
            return false;
        }
        if (json.objectSize(val) == 0)
        {
            return true;
        }
        else
        {
            if (rep != null) rep.addEntry("expecting empty object [.object.o0]", path);
            return false;
        }
    }

    // check _jm_f_60_map_o1 (.object.o1)
    public boolean _jm_f_62(Object val, Path path, Report rep)
    {
        // .object.o1
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.object.o1]", path);
            return false;
        }
        if (json.objectSize(val) != 3)
        {
            if (rep != null) rep.addEntry("bad property count [.object.o1]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "a")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.object.o1]", path);
            return false;
        }
        lpath = new Path("a", path);
        // .object.o1.a
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.object.o1.a]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.object.o1]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "b")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <b> [.object.o1]", path);
            return false;
        }
        lpath = new Path("b", path);
        // .object.o1.b
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.object.o1.b]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <b> [.object.o1]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "c")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <c> [.object.o1]", path);
            return false;
        }
        lpath = new Path("c", path);
        // .object.o1.c
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.object.o1.c]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <c> [.object.o1]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check _jm_f_60_map_o2 (.object.o2)
    public boolean _jm_f_63(Object val, Path path, Report rep)
    {
        // .object.o2
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.object.o2]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_12 = new Path(prop, path);
            if (prop.compareTo("a") == 0)
            {
                // handle may a property
                // .object.o2.a
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.object.o2.a]", (path != null ? lpath_12 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.object.o2.a]", (path != null ? lpath_12 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.object.o2]", (path != null ? lpath_12 : null));
                return false;
            }
        }
        return true;
    }

    // check _jm_f_60_map_o3 (.object.o3)
    public boolean _jm_f_64(Object val, Path path, Report rep)
    {
        // .object.o3
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.object.o3]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_13 = new Path(prop, path);
            if (prop.startsWith("a"))
            {
                // handle 1 re props
                // .object.o3.'/^a/'
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.object.o3.'/^a/']", (path != null ? lpath_13 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.object.o3]", (path != null ? lpath_13 : null));
                return false;
            }
        }
        return true;
    }

    // check _jm_f_60_map_o4 (.object.o4)
    public boolean _jm_f_65(Object val, Path path, Report rep)
    {
        // .object.o4
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.object.o4]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_14 = new Path(prop, path);
            if (rt.is_valid_date(prop))
            {
                // handle 1 key props
                // .object.o4.'$DATE'
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.object.o4.'$DATE']", (path != null ? lpath_14 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.object.o4]", (path != null ? lpath_14 : null));
                return false;
            }
        }
        return true;
    }

    // check _jm_f_60_map_o5 (.object.o5)
    public boolean _jm_f_66(Object val, Path path, Report rep)
    {
        // .object.o5
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.object.o5]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_15 = new Path(prop, path);
            // handle other props
            // .object.o5.''
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 0 strict int [.object.o5.'']", (path != null ? lpath_15 : null));
                return false;
            }
        }
        return true;
    }

    // check _jm_f_60_map_o6 (.object.o6)
    public boolean _jm_f_67(Object val, Path path, Report rep)
    {
        // .object.o6
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.object.o6]", path);
            return false;
        }
        // accept any object
        return true;
    }


    // check json_model_1_map_object (.object)
    public boolean _jm_f_60(Object val, Path path, Report rep)
    {
        // object map property names to values
        // .object
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.object]", path);
            return false;
        }
        Checker pfun;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_11 = new Path(prop, path);
            if ((pfun = _jm_f_60_map_pmap.get(prop)) != null)
            {
                // handle 7 may props
                if (pfun != null && ! (pfun.call(pval, (path != null ? lpath_11 : null), rep)))
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.object]", (path != null ? lpath_11 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.object]", (path != null ? lpath_11 : null));
                return false;
            }
        }
        return true;
    }

    // object .or.o2.'|'.3
    public boolean _jm_obj_13(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.or.o2.'|'.3]", path);
            return false;
        }
        // accept any object
        return true;
    }

    // check json_model_1_map_or (.or)
    public boolean _jm_f_68(Object val, Path path, Report rep)
    {
        // soft alternative, first match
        // .or
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.or]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_16 = new Path(prop, path);
            if (prop.compareTo("o0") == 0)
            {
                // handle may o0 property
                // .or.o0
                // .or.o0.'|'.0
                res = json.isBoolean(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a bool [.or.o0.'|'.0]", (path != null ? lpath_16 : null));
                }
                if (! res)
                {
                    // .or.o0.'|'.1
                    res = json.isInteger(pval);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1 strict int [.or.o0.'|'.1]", (path != null ? lpath_16 : null));
                    }
                }
                if (res)
                {
                    if (rep != null) rep.clearEntries();
                }
                else
                {
                    if (rep != null) rep.addEntry("no model matched [.or.o0.'|']", (path != null ? lpath_16 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.or.o0]", (path != null ? lpath_16 : null));
                    return false;
                }
            }
            else if (prop.compareTo("o1") == 0)
            {
                // handle may o1 property
                // .or.o1
                // .or.o1.'|'.0
                res = json.isString(pval) && rt.is_valid_date(json.asString(pval));
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $DATE [.or.o1.'|'.0]", (path != null ? lpath_16 : null));
                }
                if (! res)
                {
                    // .or.o1.'|'.1
                    res = json.isString(pval) && rt.is_valid_time(json.asString(pval));
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("unexpected $TIME [.or.o1.'|'.1]", (path != null ? lpath_16 : null));
                    }
                }
                if (res)
                {
                    if (rep != null) rep.clearEntries();
                }
                else
                {
                    if (rep != null) rep.addEntry("no model matched [.or.o1.'|']", (path != null ? lpath_16 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.or.o1]", (path != null ? lpath_16 : null));
                    return false;
                }
            }
            else if (prop.compareTo("o2") == 0)
            {
                // handle may o2 property
                // .or.o2
                // .or.o2.'|'.0
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.or.o2.'|'.0]", (path != null ? lpath_16 : null));
                }
                if (! res)
                {
                    // .or.o2.'|'.1
                    res = json.isString(pval) && rt.is_valid_uuid(json.asString(pval));
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("unexpected $UUID [.or.o2.'|'.1]", (path != null ? lpath_16 : null));
                    }
                    if (! res)
                    {
                        // .or.o2.'|'.2
                        res = json.isArray(pval);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not array or unexpected array [.or.o2.'|'.2]", (path != null ? lpath_16 : null));
                        }
                        if (! res)
                        {
                            // .or.o2.'|'.3
                            res = _jm_obj_13(pval, (path != null ? lpath_16 : null), rep);
                            if (! res)
                            {
                                if (rep != null) rep.addEntry("unexpected element [.or.o2.'|'.3]", (path != null ? lpath_16 : null));
                            }
                        }
                    }
                }
                if (res)
                {
                    if (rep != null) rep.clearEntries();
                }
                else
                {
                    if (rep != null) rep.addEntry("no model matched [.or.o2.'|']", (path != null ? lpath_16 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.or.o2]", (path != null ? lpath_16 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.or]", (path != null ? lpath_16 : null));
                return false;
            }
        }
        return true;
    }

    // check _jm_f_69_map_ANY (.predefs.ANY)
    public boolean _jm_f_70(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.ANY
        res = true;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $ANY [.predefs.ANY]", path);
        }
        return res;
    }

    // check _jm_f_69_map_BOOL (.predefs.BOOL)
    public boolean _jm_f_71(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.BOOL
        res = json.isBoolean(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $BOOL [.predefs.BOOL]", path);
        }
        return res;
    }

    // check _jm_f_69_map_BOOLEAN (.predefs.BOOLEAN)
    public boolean _jm_f_72(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.BOOLEAN
        res = json.isBoolean(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $BOOLEAN [.predefs.BOOLEAN]", path);
        }
        return res;
    }

    // check _jm_f_69_map_DATE (.predefs.DATE)
    public boolean _jm_f_73(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.DATE
        res = json.isString(val) && rt.is_valid_date(json.asString(val));
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $DATE [.predefs.DATE]", path);
        }
        return res;
    }

    // check _jm_f_69_map_DATETIME (.predefs.DATETIME)
    public boolean _jm_f_74(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.DATETIME
        res = json.isString(val) && rt.is_valid_datetime(json.asString(val));
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $DATETIME [.predefs.DATETIME]", path);
        }
        return res;
    }

    // check _jm_f_69_map_EMAIL (.predefs.EMAIL)
    public boolean _jm_f_75(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.EMAIL
        res = json.isString(val) && rt.is_valid_email(json.asString(val));
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $EMAIL [.predefs.EMAIL]", path);
        }
        return res;
    }

    // check _jm_f_69_map_EXREG (.predefs.EXREG)
    public boolean _jm_f_76(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.EXREG
        res = json.isString(val) && rt.is_valid_exreg(json.asString(val));
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $EXREG [.predefs.EXREG]", path);
        }
        return res;
    }

    // check _jm_f_69_map_F32 (.predefs.F32)
    public boolean _jm_f_77(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.F32
        res = json.isDouble(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $F32 [.predefs.F32]", path);
        }
        return res;
    }

    // check _jm_f_69_map_F64 (.predefs.F64)
    public boolean _jm_f_78(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.F64
        res = json.isDouble(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $F64 [.predefs.F64]", path);
        }
        return res;
    }

    // check _jm_f_69_map_FLOAT (.predefs.FLOAT)
    public boolean _jm_f_79(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.FLOAT
        res = json.isDouble(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $FLOAT [.predefs.FLOAT]", path);
        }
        return res;
    }

    // check _jm_f_69_map_I32 (.predefs.I32)
    public boolean _jm_f_80(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.I32
        res = json.isInteger(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $I32 [.predefs.I32]", path);
        }
        return res;
    }

    // check _jm_f_69_map_I64 (.predefs.I64)
    public boolean _jm_f_81(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.I64
        res = json.isInteger(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $I64 [.predefs.I64]", path);
        }
        return res;
    }

    // check _jm_f_69_map_INT (.predefs.INT)
    public boolean _jm_f_82(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.INT
        res = json.isInteger(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $INT [.predefs.INT]", path);
        }
        return res;
    }

    // check _jm_f_69_map_INTEGER (.predefs.INTEGER)
    public boolean _jm_f_83(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.INTEGER
        res = json.isInteger(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $INTEGER [.predefs.INTEGER]", path);
        }
        return res;
    }

    // check _jm_f_69_map_JSON (.predefs.JSON)
    public boolean _jm_f_84(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.JSON
        res = json.isString(val) && rt.is_valid_json(json.asString(val));
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $JSON [.predefs.JSON]", path);
        }
        return res;
    }

    // check _jm_f_69_map_NONE (.predefs.NONE)
    public boolean _jm_f_85(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.NONE
        res = false;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $NONE [.predefs.NONE]", path);
        }
        return res;
    }

    // check _jm_f_69_map_NULL (.predefs.NULL)
    public boolean _jm_f_86(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.NULL
        res = json.isNull(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $NULL [.predefs.NULL]", path);
        }
        return res;
    }

    // check _jm_f_69_map_NUMBER (.predefs.NUMBER)
    public boolean _jm_f_87(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.NUMBER
        res = json.isNumber(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $NUMBER [.predefs.NUMBER]", path);
        }
        return res;
    }

    // check _jm_f_69_map_REGEX (.predefs.REGEX)
    public boolean _jm_f_88(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.REGEX
        res = json.isString(val) && rt.is_valid_regex(json.asString(val));
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $REGEX [.predefs.REGEX]", path);
        }
        return res;
    }

    // check _jm_f_69_map_STRING (.predefs.STRING)
    public boolean _jm_f_89(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.STRING
        res = json.isString(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $STRING [.predefs.STRING]", path);
        }
        return res;
    }

    // check _jm_f_69_map_TIME (.predefs.TIME)
    public boolean _jm_f_90(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.TIME
        res = json.isString(val) && rt.is_valid_time(json.asString(val));
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $TIME [.predefs.TIME]", path);
        }
        return res;
    }

    // check _jm_f_69_map_U32 (.predefs.U32)
    public boolean _jm_f_91(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.U32
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $U32 [.predefs.U32]", path);
        }
        return res;
    }

    // check _jm_f_69_map_U64 (.predefs.U64)
    public boolean _jm_f_92(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.U64
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $U64 [.predefs.U64]", path);
        }
        return res;
    }

    // check _jm_f_69_map_URI (.predefs.URI)
    public boolean _jm_f_93(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.URI
        res = json.isString(val) && rt.is_valid_url(json.asString(val));
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $URI [.predefs.URI]", path);
        }
        return res;
    }

    // check _jm_f_69_map_URL (.predefs.URL)
    public boolean _jm_f_94(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.URL
        res = json.isString(val) && rt.is_valid_url(json.asString(val));
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $URL [.predefs.URL]", path);
        }
        return res;
    }

    // check _jm_f_69_map_UUID (.predefs.UUID)
    public boolean _jm_f_95(Object val, Path path, Report rep)
    {
        boolean res;
        // .predefs.UUID
        res = json.isString(val) && rt.is_valid_uuid(json.asString(val));
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $UUID [.predefs.UUID]", path);
        }
        return res;
    }


    // check json_model_1_map_predefs (.predefs)
    public boolean _jm_f_69(Object val, Path path, Report rep)
    {
        // predefined models
        // .predefs
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.predefs]", path);
            return false;
        }
        Checker pfun;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_17 = new Path(prop, path);
            if ((pfun = _jm_f_69_map_pmap.get(prop)) != null)
            {
                // handle 26 may props
                if (pfun != null && ! (pfun.call(pval, (path != null ? lpath_17 : null), rep)))
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.predefs]", (path != null ? lpath_17 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.predefs]", (path != null ? lpath_17 : null));
                return false;
            }
        }
        return true;
    }

    public boolean _jm_re_0(String val, Path path, Report rep)
    {
        return _jm_re_0_pat.matcher(val).find();
    }

    // check json_model_1_map_string (.string)
    public boolean _jm_f_96(Object val, Path path, Report rep)
    {
        // strings: inference, predef, constants, regex
        // .string
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.string]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_18 = new Path(prop, path);
            if (prop.compareTo("s0") == 0)
            {
                // handle may s0 property
                // .string.s0
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.string.s0]", (path != null ? lpath_18 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.string.s0]", (path != null ? lpath_18 : null));
                    return false;
                }
            }
            else if (prop.compareTo("s1") == 0)
            {
                // handle may s1 property
                // .string.s1
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $STRING [.string.s1]", (path != null ? lpath_18 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.string.s1]", (path != null ? lpath_18 : null));
                    return false;
                }
            }
            else if (prop.compareTo("s2") == 0)
            {
                // handle may s2 property
                // .string.s2
                res = json.isString(pval) && json.asString(pval).compareTo("Susie") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected Susie [.string.s2]", (path != null ? lpath_18 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.string.s2]", (path != null ? lpath_18 : null));
                    return false;
                }
            }
            else if (prop.compareTo("s3") == 0)
            {
                // handle may s3 property
                // .string.s3
                res = json.isString(pval) && json.asString(pval).compareTo("Calvin") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected _Calvin [.string.s3]", (path != null ? lpath_18 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.string.s3]", (path != null ? lpath_18 : null));
                    return false;
                }
            }
            else if (prop.compareTo("s4") == 0)
            {
                // handle may s4 property
                // .string.s4
                // "/^(Calvin|Susie)$/"
                res = json.isString(pval) && _jm_re_0(json.asString(pval), (path != null ? lpath_18 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected /^(Calvin|Susie)$/ [.string.s4]", (path != null ? lpath_18 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.string.s4]", (path != null ? lpath_18 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.string]", (path != null ? lpath_18 : null));
                return false;
            }
        }
        return true;
    }

    // check json_model_1_map_tuple (.tuple)
    public boolean _jm_f_97(Object val, Path path, Report rep)
    {
        // tuple items have a type
        // .tuple
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.tuple]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_19 = new Path(prop, path);
            if (prop.compareTo("t0") == 0)
            {
                // handle may t0 property
                // .tuple.t0
                res = json.isArray(pval) && json.arrayLength(pval) == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.tuple.t0]", (path != null ? lpath_19 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.tuple.t0]", (path != null ? lpath_19 : null));
                    return false;
                }
            }
            else if (prop.compareTo("t1") == 0)
            {
                // handle may t1 property
                // .tuple.t1
                // .tuple.t1.'@'
                res = json.isArray(pval);
                if (res)
                {
                    int arr_7_idx = -1;
                    Iterator<Object> arr_7_item_loop = json.arrayIterator(pval);
                    while (arr_7_item_loop.hasNext())
                    {
                        arr_7_idx++;
                        Object arr_7_item = arr_7_item_loop.next();
                        Path arr_7_lpath = new Path(arr_7_idx, (path != null ? lpath_19 : null));
                        // .tuple.t1.'@'.0
                        res = json.isInteger(arr_7_item) && json.asLong(arr_7_item) >= 0;
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not a 0 strict int [.tuple.t1.'@'.0]", ((path != null ? lpath_19 : null) != null ? arr_7_lpath : null));
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.tuple.t1.'@']", (path != null ? lpath_19 : null));
                }
                if (res)
                {
                    long ival_12 = json.arrayLength(pval);
                    res = ival_12 == 1;
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("constraints failed [.tuple.t1]", (path != null ? lpath_19 : null));
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.tuple.t1]", (path != null ? lpath_19 : null));
                    return false;
                }
            }
            else if (prop.compareTo("t2") == 0)
            {
                // handle may t2 property
                // .tuple.t2
                res = json.isArray(pval) && json.arrayLength(pval) == 2;
                if (res)
                {
                    Path lpath_20 = new Path(0, (path != null ? lpath_19 : null));
                    // .tuple.t2.0
                    res = json.isInteger(json.arrayItem(pval, 0)) && json.asLong(json.arrayItem(pval, 0)) >= 0;
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a 0 strict int [.tuple.t2.0]", ((path != null ? lpath_19 : null) != null ? lpath_20 : null));
                    }
                    if (res)
                    {
                        lpath_20 = new Path(1, (path != null ? lpath_19 : null));
                        // .tuple.t2.1
                        res = json.isInteger(json.arrayItem(pval, 1)) && json.asLong(json.arrayItem(pval, 1)) >= 0;
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not a 0 strict int [.tuple.t2.1]", ((path != null ? lpath_19 : null) != null ? lpath_20 : null));
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.tuple.t2]", (path != null ? lpath_19 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.tuple.t2]", (path != null ? lpath_19 : null));
                    return false;
                }
            }
            else if (prop.compareTo("t3") == 0)
            {
                // handle may t3 property
                // .tuple.t3
                res = json.isArray(pval) && json.arrayLength(pval) == 3;
                if (res)
                {
                    Path lpath_21 = new Path(0, (path != null ? lpath_19 : null));
                    // .tuple.t3.0
                    res = json.isBoolean(json.arrayItem(pval, 0));
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a bool [.tuple.t3.0]", ((path != null ? lpath_19 : null) != null ? lpath_21 : null));
                    }
                    if (res)
                    {
                        lpath_21 = new Path(1, (path != null ? lpath_19 : null));
                        // .tuple.t3.1
                        res = json.isInteger(json.arrayItem(pval, 1)) && json.asLong(json.arrayItem(pval, 1)) >= 0;
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not a 0 strict int [.tuple.t3.1]", ((path != null ? lpath_19 : null) != null ? lpath_21 : null));
                        }
                        if (res)
                        {
                            lpath_21 = new Path(2, (path != null ? lpath_19 : null));
                            // .tuple.t3.2
                            res = json.isString(json.arrayItem(pval, 2));
                            if (! res)
                            {
                                if (rep != null) rep.addEntry("unexpected string [.tuple.t3.2]", ((path != null ? lpath_19 : null) != null ? lpath_21 : null));
                            }
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.tuple.t3]", (path != null ? lpath_19 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.tuple.t3]", (path != null ? lpath_19 : null));
                    return false;
                }
            }
            else if (prop.compareTo("t4") == 0)
            {
                // handle may t4 property
                // .tuple.t4
                // .tuple.t4.'@'
                Path lpath_22;
                res = json.isArray(pval);
                if (res)
                {
                    long len_0 = json.arrayLength(pval);
                    if (len_0 > 0)
                    {
                        lpath_22 = new Path(0, (path != null ? lpath_19 : null));
                        // .tuple.t4.'@'.0
                        res = json.isString(json.arrayItem(pval, 0));
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected string [.tuple.t4.'@'.0]", ((path != null ? lpath_19 : null) != null ? lpath_22 : null));
                        }
                    }
                    if (res)
                    {
                        for (int idx_0 = 1; idx_0 < len_0; idx_0++)
                        {
                            lpath_22 = new Path(idx_0, (path != null ? lpath_19 : null));
                            // .tuple.t4.'@'.1
                            res = json.isInteger(json.arrayItem(pval, idx_0)) && json.asLong(json.arrayItem(pval, idx_0)) >= 0;
                            if (! res)
                            {
                                if (rep != null) rep.addEntry("not a 0 strict int [.tuple.t4.'@'.1]", ((path != null ? lpath_19 : null) != null ? lpath_22 : null));
                                break;
                            }
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.tuple.t4.'@']", (path != null ? lpath_19 : null));
                }
                if (res)
                {
                    long ival_13 = json.arrayLength(pval);
                    res = ival_13 >= 2;
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("constraints failed [.tuple.t4]", (path != null ? lpath_19 : null));
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.tuple.t4]", (path != null ? lpath_19 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.tuple]", (path != null ? lpath_19 : null));
                return false;
            }
        }
        return true;
    }

    // check json_model_1_map_xor (.xor)
    public boolean _jm_f_98(Object val, Path path, Report rep)
    {
        // hard alternative, only one must match
        // .xor
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.xor]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_23 = new Path(prop, path);
            if (prop.compareTo("x0") == 0)
            {
                // handle may x0 property
                // .xor.x0
                // .xor.x0.'|'.0
                res = json.isBoolean(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a bool [.xor.x0.'|'.0]", (path != null ? lpath_23 : null));
                }
                if (! res)
                {
                    // .xor.x0.'|'.1
                    res = json.isInteger(pval);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1 strict int [.xor.x0.'|'.1]", (path != null ? lpath_23 : null));
                    }
                }
                if (res)
                {
                    if (rep != null) rep.clearEntries();
                }
                else
                {
                    if (rep != null) rep.addEntry("no model matched [.xor.x0.'|']", (path != null ? lpath_23 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.xor.x0]", (path != null ? lpath_23 : null));
                    return false;
                }
            }
            else if (prop.compareTo("x1") == 0)
            {
                // handle may x1 property
                // .xor.x1
                // generic xor list
                long xc_0 = 0;
                boolean xr_0;
                // .xor.x1.'^'.0
                // "/^a/"
                xr_0 = json.isString(pval) && json.asString(pval).startsWith("a");
                if (xr_0)
                {
                    xc_0 += 1;
                }
                else
                {
                    if (rep != null) rep.addEntry("unexpected /^a/ [.xor.x1.'^'.0]", (path != null ? lpath_23 : null));
                }
                // .xor.x1.'^'.1
                // "/z$/"
                xr_0 = json.isString(pval) && json.asString(pval).endsWith("z");
                if (xr_0)
                {
                    xc_0 += 1;
                }
                else
                {
                    if (rep != null) rep.addEntry("unexpected /z$/ [.xor.x1.'^'.1]", (path != null ? lpath_23 : null));
                }
                res = xc_0 == 1;
                if (res)
                {
                    if (rep != null) rep.clearEntries();
                }
                else
                {
                    if (rep != null) rep.addEntry("not one model match [.xor.x1.'^']", (path != null ? lpath_23 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.xor.x1]", (path != null ? lpath_23 : null));
                    return false;
                }
            }
            else if (prop.compareTo("x2") == 0)
            {
                // handle may x2 property
                // .xor.x2
                // generic xor list
                long xc_1 = 0;
                boolean xr_1;
                // .xor.x2.'^'.0
                xr_1 = json.isInteger(pval);
                if (xr_1)
                {
                    xc_1 += 1;
                }
                else
                {
                    if (rep != null) rep.addEntry("not a -1 strict int [.xor.x2.'^'.0]", (path != null ? lpath_23 : null));
                }
                // .xor.x2.'^'.1
                xr_1 = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (xr_1)
                {
                    xc_1 += 1;
                }
                else
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.xor.x2.'^'.1]", (path != null ? lpath_23 : null));
                }
                res = xc_1 == 1;
                if (res)
                {
                    if (rep != null) rep.clearEntries();
                }
                else
                {
                    if (rep != null) rep.addEntry("not one model match [.xor.x2.'^']", (path != null ? lpath_23 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.xor.x2]", (path != null ? lpath_23 : null));
                    return false;
                }
            }
            else if (prop.compareTo("x3") == 0)
            {
                // handle may x3 property
                // .xor.x3
                // not-case xor list
                boolean is_0;
                // .xor.x3.'^'.1
                is_0 = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! is_0)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.xor.x3.'^'.1]", (path != null ? lpath_23 : null));
                }
                res = ! is_0;
                if (res)
                {
                    if (rep != null) rep.clearEntries();
                }
                else
                {
                    if (rep != null) rep.addEntry("not one model match [.xor.x3.'^']", (path != null ? lpath_23 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.xor.x3]", (path != null ? lpath_23 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.xor]", (path != null ? lpath_23 : null));
                return false;
            }
        }
        return true;
    }


    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // A model to illustrate most design features
        // .
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.]", path);
            return false;
        }
        Checker pfun;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if ((pfun = json_model_1_map_pmap.get(prop)) != null)
            {
                // handle 15 may props
                if (pfun != null && ! (pfun.call(pval, (path != null ? lpath_0 : null), rep)))
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.]", (path != null ? lpath_0 : null));
                return false;
            }
        }
        return true;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_cst_0_set = new HashSet<Object>();
            _jm_cst_0_set.add(json.safeJSON("false"));
            _jm_cst_0_set.add(json.safeJSON("true"));
            _jm_f_2_map_pmap = new HashMap<String, Checker>();
            _jm_f_2_map_pmap.put("b0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_3(o, p, r);} });
            _jm_f_2_map_pmap.put("b1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_4(o, p, r);} });
            _jm_f_2_map_pmap.put("b2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_5(o, p, r);} });
            _jm_f_2_map_pmap.put("b3", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_6(o, p, r);} });
            _jm_f_2_map_pmap.put("b4", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_7(o, p, r);} });
            _jm_f_2_map_pmap.put("b5", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_8(o, p, r);} });
            _jm_f_9_map_pmap = new HashMap<String, Checker>();
            _jm_f_9_map_pmap.put("cia0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_10(o, p, r);} });
            _jm_f_9_map_pmap.put("cia1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_11(o, p, r);} });
            _jm_f_9_map_pmap.put("cia2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_12(o, p, r);} });
            _jm_f_9_map_pmap.put("cii0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_13(o, p, r);} });
            _jm_f_9_map_pmap.put("cii1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_14(o, p, r);} });
            _jm_f_9_map_pmap.put("cii2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_15(o, p, r);} });
            _jm_f_9_map_pmap.put("cin0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_16(o, p, r);} });
            _jm_f_9_map_pmap.put("cin1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_17(o, p, r);} });
            _jm_f_9_map_pmap.put("cin2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_18(o, p, r);} });
            _jm_f_9_map_pmap.put("cio0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_19(o, p, r);} });
            _jm_f_9_map_pmap.put("cio1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_20(o, p, r);} });
            _jm_f_9_map_pmap.put("cio2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_21(o, p, r);} });
            _jm_f_9_map_pmap.put("cis0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_22(o, p, r);} });
            _jm_f_9_map_pmap.put("cis1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_23(o, p, r);} });
            _jm_f_9_map_pmap.put("cis2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_24(o, p, r);} });
            _jm_f_9_map_pmap.put("cni0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_25(o, p, r);} });
            _jm_f_9_map_pmap.put("cni1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_26(o, p, r);} });
            _jm_f_9_map_pmap.put("cni2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_27(o, p, r);} });
            _jm_f_9_map_pmap.put("cnn0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_28(o, p, r);} });
            _jm_f_9_map_pmap.put("cnn1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_29(o, p, r);} });
            _jm_f_9_map_pmap.put("cnn2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_30(o, p, r);} });
            _jm_f_9_map_pmap.put("css0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_31(o, p, r);} });
            _jm_f_9_map_pmap.put("css1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_32(o, p, r);} });
            _jm_f_9_map_pmap.put("css2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_33(o, p, r);} });
            _jm_f_9_map_pmap.put("cua0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_34(o, p, r);} });
            _jm_cst_1_set = new HashSet<Object>();
            _jm_cst_1_set.add(json.safeJSON("true"));
            _jm_cst_1_set.add(json.safeJSON("false"));
            _jm_cst_2_set = new HashSet<Object>();
            _jm_cst_2_set.add(json.safeJSON("200"));
            _jm_cst_2_set.add(json.safeJSON("201"));
            _jm_cst_2_set.add(json.safeJSON("204"));
            _jm_cst_3_set = new HashSet<Object>();
            _jm_cst_3_set.add(json.safeJSON("\"Susie\""));
            _jm_cst_3_set.add(json.safeJSON("\"Calvin\""));
            _jm_cst_3_set.add(json.safeJSON("\"Hobbes\""));
            _jm_cst_4_set = new HashSet<Object>();
            _jm_cst_4_set.add(json.safeJSON("\"Susie\""));
            _jm_cst_4_set.add(json.safeJSON("42"));
            _jm_cst_4_set.add(json.safeJSON("true"));
            _jm_cst_4_set.add(json.safeJSON("null"));
            _jm_f_36_map_pmap = new HashMap<String, Checker>();
            _jm_f_36_map_pmap.put("f0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_37(o, p, r);} });
            _jm_f_36_map_pmap.put("f1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_38(o, p, r);} });
            _jm_f_36_map_pmap.put("f2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_39(o, p, r);} });
            _jm_f_36_map_pmap.put("f3", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_40(o, p, r);} });
            _jm_f_36_map_pmap.put("f4", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_41(o, p, r);} });
            _jm_f_36_map_pmap.put("f5", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_42(o, p, r);} });
            _jm_f_36_map_pmap.put("f6", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_43(o, p, r);} });
            _jm_f_36_map_pmap.put("f7", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_44(o, p, r);} });
            _jm_f_36_map_pmap.put("f8", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_45(o, p, r);} });
            _jm_f_46_map_pmap = new HashMap<String, Checker>();
            _jm_f_46_map_pmap.put("i0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_47(o, p, r);} });
            _jm_f_46_map_pmap.put("i1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_48(o, p, r);} });
            _jm_f_46_map_pmap.put("i2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_49(o, p, r);} });
            _jm_f_46_map_pmap.put("i3", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_50(o, p, r);} });
            _jm_f_46_map_pmap.put("i4", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_51(o, p, r);} });
            _jm_f_46_map_pmap.put("i5", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_52(o, p, r);} });
            _jm_f_46_map_pmap.put("i6", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_53(o, p, r);} });
            _jm_f_46_map_pmap.put("i7", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_54(o, p, r);} });
            _jm_f_46_map_pmap.put("i8", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_55(o, p, r);} });
            _jm_f_46_map_pmap.put("i9", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_56(o, p, r);} });
            _jm_f_46_map_pmap.put("ia", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_57(o, p, r);} });
            _jm_f_60_map_pmap = new HashMap<String, Checker>();
            _jm_f_60_map_pmap.put("o0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_61(o, p, r);} });
            _jm_f_60_map_pmap.put("o1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_62(o, p, r);} });
            _jm_f_60_map_pmap.put("o2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_63(o, p, r);} });
            _jm_f_60_map_pmap.put("o3", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_64(o, p, r);} });
            _jm_f_60_map_pmap.put("o4", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_65(o, p, r);} });
            _jm_f_60_map_pmap.put("o5", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_66(o, p, r);} });
            _jm_f_60_map_pmap.put("o6", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_67(o, p, r);} });
            _jm_f_69_map_pmap = new HashMap<String, Checker>();
            _jm_f_69_map_pmap.put("ANY", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_70(o, p, r);} });
            _jm_f_69_map_pmap.put("BOOL", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_71(o, p, r);} });
            _jm_f_69_map_pmap.put("BOOLEAN", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_72(o, p, r);} });
            _jm_f_69_map_pmap.put("DATE", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_73(o, p, r);} });
            _jm_f_69_map_pmap.put("DATETIME", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_74(o, p, r);} });
            _jm_f_69_map_pmap.put("EMAIL", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_75(o, p, r);} });
            _jm_f_69_map_pmap.put("EXREG", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_76(o, p, r);} });
            _jm_f_69_map_pmap.put("F32", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_77(o, p, r);} });
            _jm_f_69_map_pmap.put("F64", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_78(o, p, r);} });
            _jm_f_69_map_pmap.put("FLOAT", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_79(o, p, r);} });
            _jm_f_69_map_pmap.put("I32", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_80(o, p, r);} });
            _jm_f_69_map_pmap.put("I64", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_81(o, p, r);} });
            _jm_f_69_map_pmap.put("INT", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_82(o, p, r);} });
            _jm_f_69_map_pmap.put("INTEGER", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_83(o, p, r);} });
            _jm_f_69_map_pmap.put("JSON", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_84(o, p, r);} });
            _jm_f_69_map_pmap.put("NONE", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_85(o, p, r);} });
            _jm_f_69_map_pmap.put("NULL", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_86(o, p, r);} });
            _jm_f_69_map_pmap.put("NUMBER", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_87(o, p, r);} });
            _jm_f_69_map_pmap.put("REGEX", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_88(o, p, r);} });
            _jm_f_69_map_pmap.put("STRING", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_89(o, p, r);} });
            _jm_f_69_map_pmap.put("TIME", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_90(o, p, r);} });
            _jm_f_69_map_pmap.put("U32", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_91(o, p, r);} });
            _jm_f_69_map_pmap.put("U64", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_92(o, p, r);} });
            _jm_f_69_map_pmap.put("URI", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_93(o, p, r);} });
            _jm_f_69_map_pmap.put("URL", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_94(o, p, r);} });
            _jm_f_69_map_pmap.put("UUID", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_95(o, p, r);} });
            _jm_re_0_pat = Pattern.compile("^(Calvin|Susie)$");
            json_model_1_map_pmap = new HashMap<String, Checker>();
            json_model_1_map_pmap.put("and", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_0(o, p, r);} });
            json_model_1_map_pmap.put("array", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_1(o, p, r);} });
            json_model_1_map_pmap.put("bool", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_2(o, p, r);} });
            json_model_1_map_pmap.put("constraints", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_9(o, p, r);} });
            json_model_1_map_pmap.put("enum", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_35(o, p, r);} });
            json_model_1_map_pmap.put("float", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_36(o, p, r);} });
            json_model_1_map_pmap.put("int", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_46(o, p, r);} });
            json_model_1_map_pmap.put("merge", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_58(o, p, r);} });
            json_model_1_map_pmap.put("null", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_59(o, p, r);} });
            json_model_1_map_pmap.put("object", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_60(o, p, r);} });
            json_model_1_map_pmap.put("or", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_68(o, p, r);} });
            json_model_1_map_pmap.put("predefs", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_69(o, p, r);} });
            json_model_1_map_pmap.put("string", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_96(o, p, r);} });
            json_model_1_map_pmap.put("tuple", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_97(o, p, r);} });
            json_model_1_map_pmap.put("xor", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_98(o, p, r);} });
            everything_map_pmap = new HashMap<String, Checker>();
            everything_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            everything_map_pmap.put("a", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            everything_map_pmap.put("b", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            everything_map_pmap.put("ab", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            everything_map_pmap.put("cd", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_cst_0_set = null;
            _jm_f_2_map_pmap = null;
            _jm_f_9_map_pmap = null;
            _jm_cst_1_set = null;
            _jm_cst_2_set = null;
            _jm_cst_3_set = null;
            _jm_cst_4_set = null;
            _jm_f_36_map_pmap = null;
            _jm_f_46_map_pmap = null;
            _jm_f_60_map_pmap = null;
            _jm_f_69_map_pmap = null;
            _jm_re_0_pat = null;
            json_model_1_map_pmap = null;
            everything_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return everything_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return everything_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new everything();
        Main.main("everything", checker, VERSION, args);
    }
}
