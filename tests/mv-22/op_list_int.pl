#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub _jm_obj_0($$$);
sub _jm_obj_1($$$);
sub _jm_obj_2($$$);
sub _jm_obj_3($$$);
my %_jm_map_0;
sub json_model_1($$$);
my %check_model_map;

# object .'|'.0
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 2)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'t'})
    {
        return 0;
    }
    $pval = $$val{'t'};
    # .'|'.0.t
    $res = jm_is_integer($pval) && $pval == 0;
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'z'})
    {
        return 0;
    }
    $pval = $$val{'z'};
    # .'|'.0.z
    $res = jm_is_integer($pval) && $pval >= 1;
    return $res;
}

# object .'|'.1
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 2)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'t'})
    {
        return 0;
    }
    $pval = $$val{'t'};
    # .'|'.1.t
    $res = jm_is_integer($pval);
    if ($res)
    {
        # .'|'.1.t.'|'.0
        $res = jm_is_integer($pval) && $pval == 2;
        if (! $res)
        {
            # .'|'.1.t.'|'.1
            $res = jm_is_integer($pval) && $pval == 4;
            if (! $res)
            {
                # .'|'.1.t.'|'.2
                $res = jm_is_integer($pval) && $pval == 6;
                if (! $res)
                {
                    # .'|'.1.t.'|'.3
                    $res = jm_is_integer($pval) && $pval == 8;
                }
            }
        }
    }
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'p'})
    {
        return 0;
    }
    $pval = $$val{'p'};
    # .'|'.1.p
    $res = jm_is_integer($pval) && $pval >= 1;
    return $res;
}

# object .'|'.2
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 2)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'t'})
    {
        return 0;
    }
    $pval = $$val{'t'};
    # .'|'.2.t
    $res = jm_is_integer($pval);
    if ($res)
    {
        # .'|'.2.t.'|'.0
        $res = jm_is_integer($pval) && $pval == 1;
        if (! $res)
        {
            # .'|'.2.t.'|'.1
            $res = jm_is_integer($pval) && $pval == 3;
            if (! $res)
            {
                # .'|'.2.t.'|'.2
                $res = jm_is_integer($pval) && $pval == 5;
                if (! $res)
                {
                    # .'|'.2.t.'|'.3
                    $res = jm_is_integer($pval) && $pval == 7;
                    if (! $res)
                    {
                        # .'|'.2.t.'|'.4
                        $res = jm_is_integer($pval) && $pval == 9;
                    }
                }
            }
        }
    }
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'i'})
    {
        return 0;
    }
    $pval = $$val{'i'};
    # .'|'.2.i
    $res = jm_is_integer($pval) && $pval >= 1;
    return $res;
}

# object .'|'.3
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 2)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'t'})
    {
        return 0;
    }
    $pval = $$val{'t'};
    # .'|'.3.t
    $res = jm_is_integer($pval) && $pval == 10;
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'d'})
    {
        return 0;
    }
    $pval = $$val{'d'};
    # .'|'.3.d
    $res = jm_is_integer($pval) && $pval >= 1;
    return $res;
}


# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    my $iso_0 = jm_is_object($val);
    $res = $iso_0;
    if ($res)
    {
        if (exists $$val{'t'})
        {
            my $tag_0 = $$val{'t'};
            my $fun_0 = $_jm_map_0{$tag_0};
            if (defined($fun_0))
            {
                $res = &$fun_0($val, $path, $rep);
            }
            else
            {
                $res = 0;
            }
        }
        else
        {
            $res = 0;
        }
    }
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_map_0 = (
            0 => \&_jm_obj_0,
            2 => \&_jm_obj_1,
            4 => \&_jm_obj_1,
            6 => \&_jm_obj_1,
            8 => \&_jm_obj_1,
            1 => \&_jm_obj_2,
            3 => \&_jm_obj_2,
            5 => \&_jm_obj_2,
            7 => \&_jm_obj_2,
            9 => \&_jm_obj_2,
            10 => \&_jm_obj_3,
        );
        %check_model_map = (
            '' => \&json_model_1,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_map_0 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
