#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub _jm_obj_0($$$);
sub _jm_obj_1($$$);
sub _jm_obj_2($$$);
sub _jm_obj_3($$$);
sub json_model_1($$$);
my %check_model_map;

# object .mo0
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    return jm_is_object($val) && jm_obj_size($val) == 0;
}

# object .mo1
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 1)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'p10'})
    {
        return 0;
    }
    $pval = $$val{'p10'};
    # .mo1.p10
    return jm_is_integer($pval) && $pval >= 0;
}

# object .mo2
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 2)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'p20'})
    {
        return 0;
    }
    $pval = $$val{'p20'};
    # .mo2.p20
    $res = jm_is_integer($pval) && $pval >= 0;
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'p21'})
    {
        return 0;
    }
    $pval = $$val{'p21'};
    # .mo2.p21
    return jm_is_integer($pval) && $pval >= 0;
}

# object .mo3
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'p30')
        {
            # handle must p30 property
            $must_count++;
            # .mo3.p30
            $res = jm_is_integer($pval) && $pval >= 0;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'p31')
        {
            # handle must p31 property
            $must_count++;
            # .mo3.p31
            $res = jm_is_integer($pval) && $pval >= 0;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'p32')
        {
            # handle must p32 property
            $must_count++;
            # .mo3.p32
            $res = jm_is_integer($pval) && $pval >= 0;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 3;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'mo0')
        {
            # handle may mo0 property
            # empty object
            # .mo0
            $res = _jm_obj_0($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'mo1')
        {
            # handle may mo1 property
            # one mandatory prop
            # .mo1
            $res = _jm_obj_1($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'mo2')
        {
            # handle may mo2 property
            # two mandatory props
            # .mo2
            $res = _jm_obj_2($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'mo3')
        {
            # handle may mo3 property
            # three mandatory props
            # .mo3
            $res = _jm_obj_3($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&json_model_1,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
