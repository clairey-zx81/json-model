//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class must_only extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> must_only_map_pmap;

    // object .mo0
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // object .mo1
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            return false;
        }
        if (json.objectSize(val) != 1)
        {
            return false;
        }
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "p10")) != null))
        {
            return false;
        }
        // .mo1.p10
        return json.isInteger(pval) && json.asLong(pval) >= 0;
    }

    // object .mo2
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            return false;
        }
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "p20")) != null))
        {
            return false;
        }
        // .mo2.p20
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            return false;
        }
        if (! ((pval = json.objectValue(val, "p21")) != null))
        {
            return false;
        }
        // .mo2.p21
        return json.isInteger(pval) && json.asLong(pval) >= 0;
    }

    // object .mo3
    public boolean _jm_obj_3(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            if (prop.compareTo("p30") == 0)
            {
                // handle must p30 property
                must_count += 1;
                // .mo3.p30
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("p31") == 0)
            {
                // handle must p31 property
                must_count += 1;
                // .mo3.p31
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("p32") == 0)
            {
                // handle must p32 property
                must_count += 1;
                // .mo3.p32
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        return must_count == 3;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // .
        if (! json.isObject(val))
        {
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            if (prop.compareTo("mo0") == 0)
            {
                // handle may mo0 property
                // empty object
                // .mo0
                res = _jm_obj_0(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("mo1") == 0)
            {
                // handle may mo1 property
                // one mandatory prop
                // .mo1
                res = _jm_obj_1(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("mo2") == 0)
            {
                // handle may mo2 property
                // two mandatory props
                // .mo2
                res = _jm_obj_2(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("mo3") == 0)
            {
                // handle may mo3 property
                // three mandatory props
                // .mo3
                res = _jm_obj_3(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        return true;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            must_only_map_pmap = new HashMap<String, Checker>();
            must_only_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            must_only_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return must_only_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return must_only_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new must_only();
        Main.main("must_only", checker, VERSION, args);
    }
}
