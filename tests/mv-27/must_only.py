#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# object .mo0
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    return isinstance(val, dict) and len(val) == 0

# object .mo1
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        return False
    if len(val) != 1:
        return False
    pval: Jsonable
    res: bool
    if not ((pval := val.get("p10", UNDEFINED)) != UNDEFINED):
        return False
    # .mo1.p10
    return isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0

# object .mo2
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        return False
    if len(val) != 2:
        return False
    pval: Jsonable
    res: bool
    if not ((pval := val.get("p20", UNDEFINED)) != UNDEFINED):
        return False
    # .mo2.p20
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        return False
    if not ((pval := val.get("p21", UNDEFINED)) != UNDEFINED):
        return False
    # .mo2.p21
    return isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0

# object .mo3
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        if prop == "p30":
            # handle must p30 property
            must_count += 1
            # .mo3.p30
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                return False
        elif prop == "p31":
            # handle must p31 property
            must_count += 1
            # .mo3.p31
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                return False
        elif prop == "p32":
            # handle must p32 property
            must_count += 1
            # .mo3.p32
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                return False
        else:
            return False
    return must_count == 3

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .
    if not isinstance(val, dict):
        return False
    res: bool
    for prop, pval in val.items():
        if prop == "mo0":
            # handle may mo0 property
            # empty object
            # .mo0
            res = _jm_obj_0(pval, None, None)
            if not res:
                return False
        elif prop == "mo1":
            # handle may mo1 property
            # one mandatory prop
            # .mo1
            res = _jm_obj_1(pval, None, None)
            if not res:
                return False
        elif prop == "mo2":
            # handle may mo2 property
            # two mandatory props
            # .mo2
            res = _jm_obj_2(pval, None, None)
            if not res:
                return False
        elif prop == "mo3":
            # handle may mo3 property
            # three mandatory props
            # .mo3
            res = _jm_obj_3(pval, None, None)
            if not res:
                return False
        else:
            return False
    return True


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
