//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class test_schema extends ModelChecker
{
    static public final String VERSION = "2";

    public Pattern _jm_re_0_pat = null;
    public Pattern _jm_re_1_pat = null;
    public Pattern _jm_re_2_pat = null;
    public Map<String, Checker> test_schema_map_pmap;

    public boolean _jm_re_0(String val, Path path, Report rep)
    {
        return _jm_re_0_pat.matcher(val).find();
    }

    // check $Version (.'$Version')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        // .'$Version'
        // "/^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$/"
        return json.isString(val) && _jm_re_0(json.asString(val), null, null);
    }

    // check $Test (.'$Test')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        // A single test
        // .'$Test'
        if (! json.isObject(val))
        {
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            if (prop.compareTo("description") == 0)
            {
                // handle must description property
                must_count += 1;
                // .'$Test'.description
                res = json.isString(pval);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("data") == 0)
            {
                // handle must data property
                must_count += 1;
                // .'$Test'.data
                res = true;
            }
            else if (prop.compareTo("valid") == 0)
            {
                // handle must valid property
                must_count += 1;
                // .'$Test'.valid
                res = json.isBoolean(pval);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("comment") == 0)
            {
                // handle may comment property
                // .'$Test'.comment
                res = json.isString(pval);
                if (! res)
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        return must_count == 3;
    }

    public boolean _jm_re_1(String val, Path path, Report rep)
    {
        return _jm_re_1_pat.matcher(val).find();
    }

    public boolean _jm_re_2(String val, Path path, Report rep)
    {
        return _jm_re_2_pat.matcher(val).find();
    }

    // object .'$Specification'.'@'
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            if (prop.compareTo("core") == 0)
            {
                // handle may core property
                // .'$Specification'.'@'.core
                res = json_model_2(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("validation") == 0)
            {
                // handle may validation property
                // .'$Specification'.'@'.validation
                res = json_model_2(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("ecma262") == 0)
            {
                // handle may ecma262 property
                // .'$Specification'.'@'.ecma262
                res = json_model_2(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("perl5") == 0)
            {
                // handle may perl5 property
                // .'$Specification'.'@'.perl5
                res = json.isString(pval);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("quote") == 0)
            {
                // handle may quote property
                // .'$Specification'.'@'.quote
                res = json.isString(pval);
                if (! res)
                {
                    return false;
                }
            }
            else if (_jm_re_1(prop, null, null))
            {
                // handle 2 re props
                // .'$Specification'.'@'.'/^rfc\\d+$/'
                res = json_model_2(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (_jm_re_2(prop, null, null))
            {
                // handle 2 re props
                // .'$Specification'.'@'.'/^iso\\d+$/'
                res = json_model_2(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        return true;
    }

    // check $Specification (.'$Specification')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        // .'$Specification'
        // .'$Specification'.'@'
        boolean res = _jm_obj_0(val, null, null);
        if (res)
        {
            long ival_0 = json.objectSize(val);
            res = ival_0 >= 1;
        }
        return res;
    }

    // check $TestCase (.'$TestCase')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        // .'$TestCase'
        if (! json.isObject(val))
        {
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            if (prop.compareTo("description") == 0)
            {
                // handle must description property
                must_count += 1;
                // .'$TestCase'.description
                res = json.isString(pval);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("schema") == 0)
            {
                // handle must schema property
                must_count += 1;
                // .'$TestCase'.schema
                res = true;
            }
            else if (prop.compareTo("tests") == 0)
            {
                // handle must tests property
                must_count += 1;
                // .'$TestCase'.tests
                // .'$TestCase'.tests.'@'
                res = json.isArray(pval);
                if (res)
                {
                    int arr_0_idx = -1;
                    Iterator<Object> arr_0_item_loop = json.arrayIterator(pval);
                    while (arr_0_item_loop.hasNext())
                    {
                        arr_0_idx++;
                        Object arr_0_item = arr_0_item_loop.next();
                        // .'$TestCase'.tests.'@'.0
                        res = json_model_3(arr_0_item, null, null);
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (res)
                {
                    long ival_1 = json.arrayLength(pval);
                    res = ival_1 >= 1;
                }
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("comment") == 0)
            {
                // handle may comment property
                // .'$TestCase'.comment
                res = json.isString(pval);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("specification") == 0)
            {
                // handle may specification property
                // .'$TestCase'.specification
                // .'$TestCase'.specification.'@'
                res = json.isArray(pval);
                if (res)
                {
                    int arr_1_idx = -1;
                    Iterator<Object> arr_1_item_loop = json.arrayIterator(pval);
                    while (arr_1_item_loop.hasNext())
                    {
                        arr_1_idx++;
                        Object arr_1_item = arr_1_item_loop.next();
                        // .'$TestCase'.specification.'@'.0
                        res = json_model_4(arr_1_item, null, null);
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (res)
                {
                    long ival_2 = json.arrayLength(pval);
                    res = rt.array_is_unique(pval, null, null) && ival_2 >= 1;
                }
                if (! res)
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        return must_count == 3;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // Model for the JSON Schema Test Suite tests
        // .
        // .'@'
        boolean res = json.isArray(val);
        if (res)
        {
            int arr_2_idx = -1;
            Iterator<Object> arr_2_item_loop = json.arrayIterator(val);
            while (arr_2_item_loop.hasNext())
            {
                arr_2_idx++;
                Object arr_2_item = arr_2_item_loop.next();
                // .'@'.0
                res = json_model_5(arr_2_item, null, null);
                if (! res)
                {
                    break;
                }
            }
        }
        if (res)
        {
            long ival_3 = json.arrayLength(val);
            res = ival_3 >= 1;
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_re_0_pat = Pattern.compile("^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$");
            _jm_re_1_pat = Pattern.compile("^rfc\\d+$");
            _jm_re_2_pat = Pattern.compile("^iso\\d+$");
            test_schema_map_pmap = new HashMap<String, Checker>();
            test_schema_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            test_schema_map_pmap.put("Version", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            test_schema_map_pmap.put("Test", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            test_schema_map_pmap.put("Specification", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            test_schema_map_pmap.put("TestCase", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_re_0_pat = null;
            _jm_re_1_pat = null;
            _jm_re_2_pat = null;
            test_schema_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return test_schema_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return test_schema_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new test_schema();
        Main.main("test_schema", checker, VERSION, args);
    }
}
