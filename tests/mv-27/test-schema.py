#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_re_0_reco: object
_jm_re_0: RegexFun
_jm_re_1_reco: object
_jm_re_1: RegexFun
_jm_re_2_reco: object
_jm_re_2: RegexFun
check_model_map: PropMap


# check $Version (.'$Version')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Version'
    # "/^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$/"
    return isinstance(val, str) and _jm_re_0(val, None, None)

# check $Test (.'$Test')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # A single test
    # .'$Test'
    if not isinstance(val, dict):
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        if prop == "data":
            # handle must data property
            must_count += 1
            # .'$Test'.data
            res = True
        elif prop == "valid":
            # handle must valid property
            must_count += 1
            # .'$Test'.valid
            res = isinstance(pval, bool)
            if not res:
                return False
        elif prop == "description":
            # handle must description property
            must_count += 1
            # .'$Test'.description
            res = isinstance(pval, str)
            if not res:
                return False
        elif prop == "comment":
            # handle may comment property
            # .'$Test'.comment
            res = isinstance(pval, str)
            if not res:
                return False
        else:
            return False
    return must_count == 3



# object .'$Specification'.'@'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        return False
    res: bool
    for prop, pval in val.items():
        if prop == "core":
            # handle may core property
            # .'$Specification'.'@'.core
            res = json_model_2(pval, None, None)
            if not res:
                return False
        elif prop == "perl5":
            # handle may perl5 property
            # .'$Specification'.'@'.perl5
            res = isinstance(pval, str)
            if not res:
                return False
        elif prop == "quote":
            # handle may quote property
            # .'$Specification'.'@'.quote
            res = isinstance(pval, str)
            if not res:
                return False
        elif prop == "ecma262":
            # handle may ecma262 property
            # .'$Specification'.'@'.ecma262
            res = json_model_2(pval, None, None)
            if not res:
                return False
        elif prop == "validation":
            # handle may validation property
            # .'$Specification'.'@'.validation
            res = json_model_2(pval, None, None)
            if not res:
                return False
        elif _jm_re_1(prop, None, None):
            # handle 2 re props
            # .'$Specification'.'@'.'/^rfc\\d+$/'
            res = json_model_2(pval, None, None)
            if not res:
                return False
        elif _jm_re_2(prop, None, None):
            # handle 2 re props
            # .'$Specification'.'@'.'/^iso\\d+$/'
            res = json_model_2(pval, None, None)
            if not res:
                return False
        else:
            return False
    return True

# check $Specification (.'$Specification')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Specification'
    # .'$Specification'.'@'
    res: bool = _jm_obj_0(val, None, None)
    if res:
        ival_0: int = len(val)
        res = ival_0 >= 1
    return res

# check $TestCase (.'$TestCase')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$TestCase'
    if not isinstance(val, dict):
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        if prop == "tests":
            # handle must tests property
            must_count += 1
            # .'$TestCase'.tests
            # .'$TestCase'.tests.'@'
            res = isinstance(pval, list)
            if res:
                for arr_0_idx, arr_0_item in enumerate(pval):
                    # .'$TestCase'.tests.'@'.0
                    res = json_model_3(arr_0_item, None, None)
                    if not res:
                        break
            if res:
                ival_1: int = len(pval)
                res = ival_1 >= 1
            if not res:
                return False
        elif prop == "schema":
            # handle must schema property
            must_count += 1
            # .'$TestCase'.schema
            res = True
        elif prop == "description":
            # handle must description property
            must_count += 1
            # .'$TestCase'.description
            res = isinstance(pval, str)
            if not res:
                return False
        elif prop == "comment":
            # handle may comment property
            # .'$TestCase'.comment
            res = isinstance(pval, str)
            if not res:
                return False
        elif prop == "specification":
            # handle may specification property
            # .'$TestCase'.specification
            # .'$TestCase'.specification.'@'
            res = isinstance(pval, list)
            if res:
                for arr_1_idx, arr_1_item in enumerate(pval):
                    # .'$TestCase'.specification.'@'.0
                    res = json_model_4(arr_1_item, None, None)
                    if not res:
                        break
            if res:
                ival_2: int = len(pval)
                res = is_unique_array(pval, None, rep) and ival_2 >= 1
            if not res:
                return False
        else:
            return False
    return must_count == 3

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # Model for the JSON Schema Test Suite tests
    # .
    # .'@'
    res: bool = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            # .'@'.0
            res = json_model_5(arr_2_item, None, None)
            if not res:
                break
    if res:
        ival_3: int = len(val)
        res = ival_3 >= 1
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile("^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = re.compile("^rfc\\d+$")
        _jm_re_1 = lambda s, p, r: _jm_re_1_reco.search(s) is not None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = re.compile("^iso\\d+$")
        _jm_re_2 = lambda s, p, r: _jm_re_2_reco.search(s) is not None
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "Version": json_model_2,
            "Test": json_model_3,
            "Specification": json_model_4,
            "TestCase": json_model_5,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = None
        _jm_re_1 = None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = None
        _jm_re_2 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
