#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

const _jm_re_0_re = new runtime.RX("^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$", "")
const _jm_re_1_re = new runtime.RX("^rfc\\d+$", "")
const _jm_re_2_re = new runtime.RX("^iso\\d+$", "")
var check_model_map = new Map()

const _jm_re_0 = (s) => _jm_re_0_re.exec(s) !== null

// check $Version (.'$Version')
function json_model_2(val, path, rep)
{
    // .'$Version'
    // "/^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$/"
    return ((typeof val === 'string' || val instanceof String)) && _jm_re_0(val, null, null);
}

// check $Test (.'$Test')
function json_model_3(val, path, rep)
{
    // A single test
    // .'$Test'
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        if (prop == "description")
        {
            // handle must description property
            must_count += 1;
            // .'$Test'.description
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                return false;
            }
        }
        else if (prop == "data")
        {
            // handle must data property
            must_count += 1;
            // .'$Test'.data
            res = true;
        }
        else if (prop == "valid")
        {
            // handle must valid property
            must_count += 1;
            // .'$Test'.valid
            res = (typeof pval === 'boolean' || pval instanceof Boolean);
            if (! res)
            {
                return false;
            }
        }
        else if (prop == "comment")
        {
            // handle may comment property
            // .'$Test'.comment
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    return must_count == 3;
}

const _jm_re_1 = (s) => _jm_re_1_re.exec(s) !== null

const _jm_re_2 = (s) => _jm_re_2_re.exec(s) !== null

// object .'$Specification'.'@'
function _jm_obj_0(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    let res;
    for (const [prop, pval] of Object.entries(val))
    {
        if (prop == "core")
        {
            // handle may core property
            // .'$Specification'.'@'.core
            res = json_model_2(pval, null, null);
            if (! res)
            {
                return false;
            }
        }
        else if (prop == "validation")
        {
            // handle may validation property
            // .'$Specification'.'@'.validation
            res = json_model_2(pval, null, null);
            if (! res)
            {
                return false;
            }
        }
        else if (prop == "ecma262")
        {
            // handle may ecma262 property
            // .'$Specification'.'@'.ecma262
            res = json_model_2(pval, null, null);
            if (! res)
            {
                return false;
            }
        }
        else if (prop == "perl5")
        {
            // handle may perl5 property
            // .'$Specification'.'@'.perl5
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                return false;
            }
        }
        else if (prop == "quote")
        {
            // handle may quote property
            // .'$Specification'.'@'.quote
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                return false;
            }
        }
        else if (_jm_re_1(prop, null, null))
        {
            // handle 2 re props
            // .'$Specification'.'@'.'/^rfc\\d+$/'
            res = json_model_2(pval, null, null);
            if (! res)
            {
                return false;
            }
        }
        else if (_jm_re_2(prop, null, null))
        {
            // handle 2 re props
            // .'$Specification'.'@'.'/^iso\\d+$/'
            res = json_model_2(pval, null, null);
            if (! res)
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    return true;
}

// check $Specification (.'$Specification')
function json_model_4(val, path, rep)
{
    // .'$Specification'
    // .'$Specification'.'@'
    let res = _jm_obj_0(val, null, null);
    if (res)
    {
        let ival_0 = Object.keys(val).length;
        res = ival_0 >= 1;
    }
    return res;
}

// check $TestCase (.'$TestCase')
function json_model_5(val, path, rep)
{
    // .'$TestCase'
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        if (prop == "description")
        {
            // handle must description property
            must_count += 1;
            // .'$TestCase'.description
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                return false;
            }
        }
        else if (prop == "schema")
        {
            // handle must schema property
            must_count += 1;
            // .'$TestCase'.schema
            res = true;
        }
        else if (prop == "tests")
        {
            // handle must tests property
            must_count += 1;
            // .'$TestCase'.tests
            // .'$TestCase'.tests.'@'
            res = Array.isArray(pval);
            if (res)
            {
                for (let arr_0_idx = 0; arr_0_idx < pval.length; arr_0_idx++)
                {
                    let arr_0_item = pval[arr_0_idx]
                    // .'$TestCase'.tests.'@'.0
                    res = json_model_3(arr_0_item, null, null);
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (res)
            {
                let ival_1 = pval.length;
                res = ival_1 >= 1;
            }
            if (! res)
            {
                return false;
            }
        }
        else if (prop == "comment")
        {
            // handle may comment property
            // .'$TestCase'.comment
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                return false;
            }
        }
        else if (prop == "specification")
        {
            // handle may specification property
            // .'$TestCase'.specification
            // .'$TestCase'.specification.'@'
            res = Array.isArray(pval);
            if (res)
            {
                for (let arr_1_idx = 0; arr_1_idx < pval.length; arr_1_idx++)
                {
                    let arr_1_item = pval[arr_1_idx]
                    // .'$TestCase'.specification.'@'.0
                    res = json_model_4(arr_1_item, null, null);
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (res)
            {
                let ival_2 = pval.length;
                res = runtime.jm_array_is_unique(pval, null, null) && ival_2 >= 1;
            }
            if (! res)
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    return must_count == 3;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    // Model for the JSON Schema Test Suite tests
    // .
    // .'@'
    let res = Array.isArray(val);
    if (res)
    {
        for (let arr_2_idx = 0; arr_2_idx < val.length; arr_2_idx++)
        {
            let arr_2_item = val[arr_2_idx]
            // .'@'.0
            res = json_model_5(arr_2_item, null, null);
            if (! res)
            {
                break;
            }
        }
    }
    if (res)
    {
        let ival_3 = val.length;
        res = ival_3 >= 1;
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_1)
        check_model_map.set("Version", json_model_2)
        check_model_map.set("Test", json_model_3)
        check_model_map.set("Specification", json_model_4)
        check_model_map.set("TestCase", json_model_5)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
