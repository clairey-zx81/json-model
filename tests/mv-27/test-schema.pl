#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_2($$$);
sub _jm_obj_0($$$);
sub json_model_3($$$);
sub json_model_4($$$);
sub json_model_1($$$);
my %check_model_map;

# check $Test (.'$Test')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    # A single test
    # .'$Test'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'description')
        {
            # handle must description property
            $must_count++;
            # .'$Test'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'data')
        {
            # handle must data property
            $must_count++;
            # .'$Test'.data
            $res = 1;
        }
        elsif ($prop eq 'valid')
        {
            # handle must valid property
            $must_count++;
            # .'$Test'.valid
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'comment')
        {
            # handle may comment property
            # .'$Test'.comment
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 3;
}

sub _jm_re_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[0-9a-zA-Z]+(\.[0-9a-zA-Z]+)*$/;
    return $res;
}

sub _jm_re_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^rfc\d+$/;
    return $res;
}

sub _jm_re_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^iso\d+$/;
    return $res;
}

# object .'$Specification'.'@'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'core')
        {
            # handle may core property
            # .'$Specification'.'@'.core
            # "/^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$/"
            $res = jm_is_string($pval) && _jm_re_0($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'validation')
        {
            # handle may validation property
            # .'$Specification'.'@'.validation
            # "/^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$/"
            $res = jm_is_string($pval) && _jm_re_0($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'ecma262')
        {
            # handle may ecma262 property
            # .'$Specification'.'@'.ecma262
            # "/^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$/"
            $res = jm_is_string($pval) && _jm_re_0($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'perl5')
        {
            # handle may perl5 property
            # .'$Specification'.'@'.perl5
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'quote')
        {
            # handle may quote property
            # .'$Specification'.'@'.quote
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, undef, undef))
        {
            # handle 2 re props
            # .'$Specification'.'@'.'/^rfc\\d+$/'
            # "/^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$/"
            $res = jm_is_string($pval) && _jm_re_0($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_2($prop, undef, undef))
        {
            # handle 2 re props
            # .'$Specification'.'@'.'/^iso\\d+$/'
            # "/^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$/"
            $res = jm_is_string($pval) && _jm_re_0($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Specification (.'$Specification')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Specification'
    # .'$Specification'.'@'
    my $res = _jm_obj_0($val, undef, undef);
    if ($res)
    {
        my $ival_0 = jm_obj_size($val);
        $res = $ival_0 >= 1;
    }
    return $res;
}

# check $TestCase (.'$TestCase')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$TestCase'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'description')
        {
            # handle must description property
            $must_count++;
            # .'$TestCase'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'schema')
        {
            # handle must schema property
            $must_count++;
            # .'$TestCase'.schema
            $res = 1;
        }
        elsif ($prop eq 'tests')
        {
            # handle must tests property
            $must_count++;
            # .'$TestCase'.tests
            # .'$TestCase'.tests.'@'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_0_idx (0 .. $#$pval)
                {
                    my $arr_0_item = $$pval[$arr_0_idx];
                    # .'$TestCase'.tests.'@'.0
                    $res = json_model_2($arr_0_item, undef, undef);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if ($res)
            {
                my $ival_1 = scalar @$pval;
                $res = $ival_1 >= 1;
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'comment')
        {
            # handle may comment property
            # .'$TestCase'.comment
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'specification')
        {
            # handle may specification property
            # .'$TestCase'.specification
            # .'$TestCase'.specification.'@'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_1_idx (0 .. $#$pval)
                {
                    my $arr_1_item = $$pval[$arr_1_idx];
                    # .'$TestCase'.specification.'@'.0
                    $res = json_model_3($arr_1_item, undef, undef);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if ($res)
            {
                my $ival_2 = scalar @$pval;
                $res = jm_is_unique_array($pval, undef, undef) && $ival_2 >= 1;
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 3;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    # Model for the JSON Schema Test Suite tests
    # .
    # .'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_2_idx (0 .. $#$val)
        {
            my $arr_2_item = $$val[$arr_2_idx];
            # .'@'.0
            $res = json_model_4($arr_2_item, undef, undef);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_3 = scalar @$val;
        $res = $ival_3 >= 1;
    }
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&json_model_1,
            'Test' => \&json_model_2,
            'Specification' => \&json_model_3,
            'TestCase' => \&json_model_4,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
