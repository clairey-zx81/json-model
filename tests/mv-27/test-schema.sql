--
-- Generated by JSON Model Compiler version 2
-- see https://github.com/clairey-zx81/json-model
--
-- JSON_MODEL_VERSION is 2
CREATE EXTENSION IF NOT EXISTS json_model;

-- check $Test (.'$Test')
CREATE OR REPLACE FUNCTION json_model_2(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
BEGIN
  -- A single test
  -- .'$Test'
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = 'description' THEN
      -- handle must description property
      must_count := must_count + 1;
      -- .'$Test'.description
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'data' THEN
      -- handle must data property
      must_count := must_count + 1;
      -- .'$Test'.data
      res := TRUE;
    ELSEIF prop = 'valid' THEN
      -- handle must valid property
      must_count := must_count + 1;
      -- .'$Test'.valid
      res := JSONB_TYPEOF(pval) = 'boolean';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'comment' THEN
      -- handle may comment property
      -- .'$Test'.comment
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN must_count = 3;
END;
$$ LANGUAGE PLpgSQL;

-- regex=^[0-9a-zA-Z]+(\.[0-9a-zA-Z]+)*$ opts=n
CREATE OR REPLACE FUNCTION _jm_re_0(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^[0-9a-zA-Z]+(\.[0-9a-zA-Z]+)*$', 'n');
END;
$$ LANGUAGE plpgsql;

-- regex=^rfc\d+$ opts=n
CREATE OR REPLACE FUNCTION _jm_re_1(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^rfc\d+$', 'n');
END;
$$ LANGUAGE plpgsql;

-- regex=^iso\d+$ opts=n
CREATE OR REPLACE FUNCTION _jm_re_2(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^iso\d+$', 'n');
END;
$$ LANGUAGE plpgsql;

-- object .'$Specification'.'@'
CREATE OR REPLACE FUNCTION _jm_obj_0(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = 'core' THEN
      -- handle may core property
      -- .'$Specification'.'@'.core
      -- "/^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$/"
      res := JSONB_TYPEOF(pval) = 'string' AND _jm_re_0(JSON_VALUE(pval, '$' RETURNING TEXT), NULL, NULL);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'validation' THEN
      -- handle may validation property
      -- .'$Specification'.'@'.validation
      -- "/^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$/"
      res := JSONB_TYPEOF(pval) = 'string' AND _jm_re_0(JSON_VALUE(pval, '$' RETURNING TEXT), NULL, NULL);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'ecma262' THEN
      -- handle may ecma262 property
      -- .'$Specification'.'@'.ecma262
      -- "/^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$/"
      res := JSONB_TYPEOF(pval) = 'string' AND _jm_re_0(JSON_VALUE(pval, '$' RETURNING TEXT), NULL, NULL);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'perl5' THEN
      -- handle may perl5 property
      -- .'$Specification'.'@'.perl5
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'quote' THEN
      -- handle may quote property
      -- .'$Specification'.'@'.quote
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF _jm_re_1(prop, NULL, NULL) THEN
      -- handle 2 re props
      -- .'$Specification'.'@'.'/^rfc\\d+$/'
      -- "/^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$/"
      res := JSONB_TYPEOF(pval) = 'string' AND _jm_re_0(JSON_VALUE(pval, '$' RETURNING TEXT), NULL, NULL);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF _jm_re_2(prop, NULL, NULL) THEN
      -- handle 2 re props
      -- .'$Specification'.'@'.'/^iso\\d+$/'
      -- "/^[0-9a-zA-Z]+(\\.[0-9a-zA-Z]+)*$/"
      res := JSONB_TYPEOF(pval) = 'string' AND _jm_re_0(JSON_VALUE(pval, '$' RETURNING TEXT), NULL, NULL);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- check $Specification (.'$Specification')
CREATE OR REPLACE FUNCTION json_model_3(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  ival_0 int;
BEGIN
  -- .'$Specification'
  -- .'$Specification'.'@'
  res := _jm_obj_0(val, NULL, NULL);
  IF res THEN
    ival_0 := jm_object_size(val);
    res := ival_0 >= 1;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $TestCase (.'$TestCase')
CREATE OR REPLACE FUNCTION json_model_4(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_0_idx INT8;
  arr_0_item JSONB;
  ival_1 int;
  arr_1_idx INT8;
  arr_1_item JSONB;
  ival_2 int;
BEGIN
  -- .'$TestCase'
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = 'description' THEN
      -- handle must description property
      must_count := must_count + 1;
      -- .'$TestCase'.description
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'schema' THEN
      -- handle must schema property
      must_count := must_count + 1;
      -- .'$TestCase'.schema
      res := TRUE;
    ELSEIF prop = 'tests' THEN
      -- handle must tests property
      must_count := must_count + 1;
      -- .'$TestCase'.tests
      -- .'$TestCase'.tests.'@'
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_0_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_0_item := pval -> arr_0_idx;
          -- .'$TestCase'.tests.'@'.0
          res := json_model_2(arr_0_item, NULL, NULL);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF res THEN
        ival_1 := JSONB_ARRAY_LENGTH(pval);
        res := ival_1 >= 1;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'comment' THEN
      -- handle may comment property
      -- .'$TestCase'.comment
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'specification' THEN
      -- handle may specification property
      -- .'$TestCase'.specification
      -- .'$TestCase'.specification.'@'
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_1_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_1_item := pval -> arr_1_idx;
          -- .'$TestCase'.specification.'@'.0
          res := json_model_3(arr_1_item, NULL, NULL);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF res THEN
        ival_2 := JSONB_ARRAY_LENGTH(pval);
        res := jm_array_is_unique(pval, NULL, NULL) AND ival_2 >= 1;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN must_count = 3;
END;
$$ LANGUAGE PLpgSQL;

-- check $ (.)
CREATE OR REPLACE FUNCTION json_model_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  arr_2_idx INT8;
  arr_2_item JSONB;
  ival_3 int;
BEGIN
  -- Model for the JSON Schema Test Suite tests
  -- .
  -- .'@'
  res := JSONB_TYPEOF(val) = 'array';
  IF res THEN
    FOR arr_2_idx IN 0 .. JSONB_ARRAY_LENGTH(val) - 1 LOOP
      arr_2_item := val -> arr_2_idx;
      -- .'@'.0
      res := json_model_4(arr_2_item, NULL, NULL);
      IF NOT res THEN
        EXIT;
      END IF;
    END LOOP;
  END IF;
  IF res THEN
    ival_3 := JSONB_ARRAY_LENGTH(val);
    res := ival_3 >= 1;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION check_model_map(name TEXT)
RETURNS TEXT STRICT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  map JSONB := JSONB '{"":"json_model_1","Test":"json_model_2","Specification":"json_model_3","TestCase":"json_model_4"}';
BEGIN
  RETURN map->>name;
END;
$$ LANGUAGE plpgsql;

--
-- constant maps initialization
--
TRUNCATE jm_constant_maps;

--
-- JSON Model checking entry point
--
-- TODO INOUT rep?
CREATE OR REPLACE FUNCTION check_model(val JSONB, name TEXT, rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  fun TEXT;
BEGIN
  fun := check_model_map(name);
  IF fun IS NULL THEN
    RAISE EXCEPTION 'model for % not found', name;
  END IF;
  RETURN jm_call(fun, val, NULL, rep);
END;
$$ LANGUAGE plpgsql;
