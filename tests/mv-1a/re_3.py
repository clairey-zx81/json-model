#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_re_0_reco: object
_jm_re_0: RegexFun
check_model_map: PropMap

# object .
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "all":
            # handle may all property
            # .all
            # "/.*/"
            res = isinstance(pval, str) and True
            if not res:
                rep is None or rep.append(("unexpected REGEX [.all]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [..all]", lpath_0 if path is not None else None))
                return False
        elif prop == "nz":
            # handle may nz property
            # .nz
            # "/./s"
            res = isinstance(pval, str) and len(pval) > 0
            if not res:
                rep is None or rep.append(("unexpected REGEX [.nz]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [..nz]", lpath_0 if path is not None else None))
                return False
        elif prop == "some":
            # handle may some property
            # .some
            # "/./"
            res = isinstance(pval, str) and _jm_re_0(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [.some]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [..some]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.]", lpath_0 if path is not None else None))
            return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile(".")
        _jm_re_0 = lambda s: _jm_re_0_reco.search(s) is not None
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
