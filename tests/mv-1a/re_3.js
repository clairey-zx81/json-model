#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

const _jm_re_0_re = new runtime.RX(".", "")
var check_model_map = new Map()

const _jm_re_0 = (s) => _jm_re_0_re.exec(s) !== null

// check $ (.)
function json_model_1(val, path, rep)
{
    // .
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.]", path])
        return false;
    }
    let res;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_0 = path ? path.concat([prop]) : null;
        if (prop == "nz")
        {
            // handle may nz property
            // .nz
            // "/./s"
            res = ((typeof pval === 'string' || pval instanceof String)) && pval.length > 0;
            if (! res)
            {
                rep !== null && rep.push(["unexpected /./s [.nz]", (path ? lpath_0 : null)])
                rep !== null && rep.push(["invalid optional prop value [.nz]", (path ? lpath_0 : null)])
                return false;
            }
        }
        else if (prop == "all")
        {
            // handle may all property
            // .all
            // "/.*/"
            res = ((typeof pval === 'string' || pval instanceof String));
            if (! res)
            {
                rep !== null && rep.push(["unexpected /.*/ [.all]", (path ? lpath_0 : null)])
                rep !== null && rep.push(["invalid optional prop value [.all]", (path ? lpath_0 : null)])
                return false;
            }
        }
        else if (prop == "some")
        {
            // handle may some property
            // .some
            // "/./"
            res = ((typeof pval === 'string' || pval instanceof String)) && _jm_re_0(pval, (path ? lpath_0 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected /./ [.some]", (path ? lpath_0 : null)])
                rep !== null && rep.push(["invalid optional prop value [.some]", (path ? lpath_0 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.]", (path ? lpath_0 : null)])
            return false;
        }
    }
    return true;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_1)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
