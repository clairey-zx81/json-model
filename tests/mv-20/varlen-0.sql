--
-- Generated by JSON Model Compiler version 2
-- see https://github.com/clairey-zx81/json-model
--
-- JSON_MODEL_VERSION is 2
CREATE EXTENSION IF NOT EXISTS json_model;

-- check $ (.)
CREATE OR REPLACE FUNCTION json_model_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  len_0 int;
  idx_0 INT8;
  ival_0 int;
BEGIN
  -- .
  -- .'@'
  res := JSONB_TYPEOF(val) = 'array';
  IF res THEN
    len_0 := JSONB_ARRAY_LENGTH(val);
    IF len_0 > 0 THEN
      -- .'@'.0
      res := JSONB_TYPEOF(val -> 0) = 'number' AND (val -> 0)::INT8 = (val -> 0)::FLOAT8;
    END IF;
    IF res THEN
      IF len_0 > 1 THEN
        -- .'@'.1
        res := JSONB_TYPEOF(val -> 1) = 'string';
      END IF;
      IF res THEN
        FOR idx_0 IN 2 .. len_0-1 LOOP
          -- .'@'.2
          res := JSONB_TYPEOF(val -> idx_0) = 'boolean';
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
    END IF;
  END IF;
  IF res THEN
    ival_0 := JSONB_ARRAY_LENGTH(val);
    res := ival_0 >= 5;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION check_model_map(name TEXT)
RETURNS TEXT STRICT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  map JSONB := JSONB '{"":"json_model_1"}';
BEGIN
  RETURN map->>name;
END;
$$ LANGUAGE plpgsql;

--
-- constant maps initialization
--
TRUNCATE jm_constant_maps;

--
-- JSON Model checking entry point
--
-- TODO INOUT rep?
CREATE OR REPLACE FUNCTION check_model(val JSONB, name TEXT, rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  fun TEXT;
BEGIN
  fun := check_model_map(name);
  IF fun IS NULL THEN
    RAISE EXCEPTION 'model for % not found', name;
  END IF;
  RETURN jm_call(fun, val, NULL, rep);
END;
$$ LANGUAGE plpgsql;
