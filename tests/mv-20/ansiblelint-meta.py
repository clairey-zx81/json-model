#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
_jm_cst_1: set[str]
_jm_cst_2: set[str]
_jm_cst_3: set[str]
_jm_cst_4: set[str]
_jm_cst_5: set[str]
_jm_cst_6: set[str]
_jm_cst_7: set[str]
_jm_cst_8: set[str]
_jm_cst_9: set[str]
_jm_cst_10: set[str]
_jm_cst_11: set[str]
_jm_cst_12: set[str]
_jm_cst_13: set[str]
_jm_cst_14: set[str]
_jm_cst_15: set[str]
_jm_cst_16: set[str]
_jm_cst_17: set[str]
_jm_cst_18: set[str]
_jm_cst_19: set[str]
_jm_cst_20: set[str]
_jm_cst_21: set[str]
_jm_cst_22: set[str]
_jm_cst_23: set[str]
_jm_cst_24: set[str]
_jm_cst_25: set[str]
_jm_cst_26: set[str]
_jm_cst_27: set[str]
_jm_cst_28: set[str]
_jm_cst_29: set[str]
_jm_cst_30: set[str]
_jm_cst_31: set[str]
_jm_cst_32: set[str]
_jm_cst_33: set[str]
_jm_cst_34: set[str]
_jm_cst_35: set[str]
_jm_cst_36: set[str]
_jm_cst_37: set[str]
_jm_cst_38: set[str]
_jm_cst_39: set[str]
_jm_cst_40: set[str]
_jm_cst_41: set[str]
_jm_cst_42: set[str]
_jm_cst_43: set[str]
_jm_cst_44: set[str]
_jm_cst_45: set[str]
_jm_cst_46: set[str]
_jm_cst_47: set[str]
_jm_cst_48: set[str]
_jm_cst_49: set[str]
_jm_cst_50: set[str]
_jm_cst_51: set[str]
_jm_cst_52: set[str]
_jm_cst_53: set[str]
_jm_cst_54: set[str]
_jm_cst_55: set[str]
_jm_cst_56: set[str]
_jm_cst_57: set[str]
_jm_cst_58: set[str]
_jm_cst_59: set[str]
_jm_cst_60: set[str]
_jm_cst_61: set[str]
_jm_cst_62: set[str]
_jm_cst_63: set[str]
_jm_cst_64: set[str]
_jm_cst_65: set[str]
_jm_cst_66: set[str]
_jm_cst_67: set[str]
_jm_cst_68: set[str]
_jm_cst_69: set[str]
_jm_cst_70: set[str]
_jm_cst_71: set[str]
_jm_cst_72: set[str]
_jm_cst_73: set[str]
_jm_cst_74: set[str]
_jm_cst_75: set[str]
_jm_cst_76: set[str]
_jm_cst_77: set[str]
_jm_cst_78: set[str]
_jm_cst_79: set[str]
_jm_cst_80: set[str]
_jm_cst_81: set[str]
_jm_cst_82: set[str]
_jm_cst_83: set[str]
_jm_cst_84: set[str]
_jm_cst_85: set[str]
_jm_cst_86: set[str]
_jm_cst_87: set[str]
_jm_cst_88: set[str]
_jm_cst_89: set[str]
_jm_cst_90: set[str]
_jm_cst_91: set[str]
_jm_cst_92: set[str]
_jm_cst_93: set[str]
_jm_cst_94: set[str]
_jm_cst_95: set[str]
_jm_re_0_reco: object
_jm_re_0: RegexFun
_jm_re_1_reco: object
_jm_re_1: RegexFun
_jm_obj_141_map: PropMap
_jm_obj_142_map: PropMap
_jm_obj_143_map: PropMap
_jm_obj_144_map: PropMap
_jm_obj_145_map: PropMap
_jm_obj_146_map: PropMap
_jm_re_2_reco: object
_jm_re_2: RegexFun
_jm_cst_96: set[str]
check_model_map: PropMap

# object .'$AIXPlatformModel'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$AIXPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$AIXPlatformModel'.name
            res = isinstance(pval, str) and pval == "AIX"
            if not res:
                rep is None or rep.append(("unexpected _AIX [.'$AIXPlatformModel'.name]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AIXPlatformModel'.name]", lpath_0 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$AIXPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_0_idx, arr_0_item in enumerate(pval):
                    arr_0_lpath: Path = ((lpath_0 if path is not None else None) + [ arr_0_idx ]) if (lpath_0 if path is not None else None) is not None else None
                    # .'$AIXPlatformModel'.versions.0
                    res = ((arr_0_item is None or isinstance(arr_0_item, (bool, int, float, str)))) and arr_0_item in _jm_cst_0
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$AIXPlatformModel'.versions.0.'|']", arr_0_lpath if (lpath_0 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$AIXPlatformModel'.versions]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AIXPlatformModel'.versions]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$AIXPlatformModel']", lpath_0 if path is not None else None))
            return False
    return True

# check $AIXPlatformModel (.'$AIXPlatformModel')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$AIXPlatformModel'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$AIXPlatformModel']", path))
    return res

# object .'$AlpinePlatformModel'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$AlpinePlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$AlpinePlatformModel'.name
            res = isinstance(pval, str) and pval == "Alpine"
            if not res:
                rep is None or rep.append(("unexpected _Alpine [.'$AlpinePlatformModel'.name]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AlpinePlatformModel'.name]", lpath_1 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$AlpinePlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_1_idx, arr_1_item in enumerate(pval):
                    arr_1_lpath: Path = ((lpath_1 if path is not None else None) + [ arr_1_idx ]) if (lpath_1 if path is not None else None) is not None else None
                    # .'$AlpinePlatformModel'.versions.0
                    res = isinstance(arr_1_item, str) and arr_1_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$AlpinePlatformModel'.versions.0]", arr_1_lpath if (lpath_1 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$AlpinePlatformModel'.versions]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AlpinePlatformModel'.versions]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$AlpinePlatformModel']", lpath_1 if path is not None else None))
            return False
    return True

# check $AlpinePlatformModel (.'$AlpinePlatformModel')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$AlpinePlatformModel'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$AlpinePlatformModel']", path))
    return res


# object .'$AmazonLinuxPlatformModel'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$AmazonLinuxPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$AmazonLinuxPlatformModel'.name
            res = isinstance(pval, str) and pval == "Amazon Linux"
            if not res:
                rep is None or rep.append(("unexpected _Amazon Linux [.'$AmazonLinuxPlatformModel'.name]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AmazonLinuxPlatformModel'.name]", lpath_2 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$AmazonLinuxPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_2_idx, arr_2_item in enumerate(pval):
                    arr_2_lpath: Path = ((lpath_2 if path is not None else None) + [ arr_2_idx ]) if (lpath_2 if path is not None else None) is not None else None
                    # .'$AmazonLinuxPlatformModel'.versions.0
                    res = ((arr_2_item is None or isinstance(arr_2_item, (bool, int, float, str)))) and arr_2_item in _jm_cst_1
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$AmazonLinuxPlatformModel'.versions.0.'|']", arr_2_lpath if (lpath_2 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$AmazonLinuxPlatformModel'.versions]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AmazonLinuxPlatformModel'.versions]", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$AmazonLinuxPlatformModel']", lpath_2 if path is not None else None))
            return False
    return True

# check $AmazonLinuxPlatformModel (.'$AmazonLinuxPlatformModel')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$AmazonLinuxPlatformModel'
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$AmazonLinuxPlatformModel']", path))
    return res


# object .'$AmazonPlatformModel'
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$AmazonPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$AmazonPlatformModel'.name
            res = isinstance(pval, str) and pval == "Amazon"
            if not res:
                rep is None or rep.append(("unexpected _Amazon [.'$AmazonPlatformModel'.name]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AmazonPlatformModel'.name]", lpath_3 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$AmazonPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_3_idx, arr_3_item in enumerate(pval):
                    arr_3_lpath: Path = ((lpath_3 if path is not None else None) + [ arr_3_idx ]) if (lpath_3 if path is not None else None) is not None else None
                    # .'$AmazonPlatformModel'.versions.0
                    res = ((arr_3_item is None or isinstance(arr_3_item, (bool, int, float, str)))) and arr_3_item in _jm_cst_2
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$AmazonPlatformModel'.versions.0.'|']", arr_3_lpath if (lpath_3 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$AmazonPlatformModel'.versions]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AmazonPlatformModel'.versions]", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$AmazonPlatformModel']", lpath_3 if path is not None else None))
            return False
    return True

# check $AmazonPlatformModel (.'$AmazonPlatformModel')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$AmazonPlatformModel'
    res = _jm_obj_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$AmazonPlatformModel']", path))
    return res

# object .'$ArchLinuxPlatformModel'
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ArchLinuxPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$ArchLinuxPlatformModel'.name
            res = isinstance(pval, str) and pval == "ArchLinux"
            if not res:
                rep is None or rep.append(("unexpected _ArchLinux [.'$ArchLinuxPlatformModel'.name]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$ArchLinuxPlatformModel'.name]", lpath_4 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$ArchLinuxPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_4_idx, arr_4_item in enumerate(pval):
                    arr_4_lpath: Path = ((lpath_4 if path is not None else None) + [ arr_4_idx ]) if (lpath_4 if path is not None else None) is not None else None
                    # .'$ArchLinuxPlatformModel'.versions.0
                    res = isinstance(arr_4_item, str) and arr_4_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$ArchLinuxPlatformModel'.versions.0]", arr_4_lpath if (lpath_4 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$ArchLinuxPlatformModel'.versions]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$ArchLinuxPlatformModel'.versions]", lpath_4 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$ArchLinuxPlatformModel']", lpath_4 if path is not None else None))
            return False
    return True

# check $ArchLinuxPlatformModel (.'$ArchLinuxPlatformModel')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ArchLinuxPlatformModel'
    res = _jm_obj_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$ArchLinuxPlatformModel']", path))
    return res


# object .'$AstraLinuxPlatformModel'
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$AstraLinuxPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$AstraLinuxPlatformModel'.name
            res = isinstance(pval, str) and pval == "Astra Linux"
            if not res:
                rep is None or rep.append(("unexpected _Astra Linux [.'$AstraLinuxPlatformModel'.name]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AstraLinuxPlatformModel'.name]", lpath_5 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$AstraLinuxPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_5_idx, arr_5_item in enumerate(pval):
                    arr_5_lpath: Path = ((lpath_5 if path is not None else None) + [ arr_5_idx ]) if (lpath_5 if path is not None else None) is not None else None
                    # .'$AstraLinuxPlatformModel'.versions.0
                    res = ((arr_5_item is None or isinstance(arr_5_item, (bool, int, float, str)))) and arr_5_item in _jm_cst_3
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$AstraLinuxPlatformModel'.versions.0.'|']", arr_5_lpath if (lpath_5 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$AstraLinuxPlatformModel'.versions]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AstraLinuxPlatformModel'.versions]", lpath_5 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$AstraLinuxPlatformModel']", lpath_5 if path is not None else None))
            return False
    return True

# check $AstraLinuxPlatformModel (.'$AstraLinuxPlatformModel')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$AstraLinuxPlatformModel'
    res = _jm_obj_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$AstraLinuxPlatformModel']", path))
    return res

# object .'$ClearLinuxPlatformModel'
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ClearLinuxPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$ClearLinuxPlatformModel'.name
            res = isinstance(pval, str) and pval == "ClearLinux"
            if not res:
                rep is None or rep.append(("unexpected _ClearLinux [.'$ClearLinuxPlatformModel'.name]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$ClearLinuxPlatformModel'.name]", lpath_6 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$ClearLinuxPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_6_idx, arr_6_item in enumerate(pval):
                    arr_6_lpath: Path = ((lpath_6 if path is not None else None) + [ arr_6_idx ]) if (lpath_6 if path is not None else None) is not None else None
                    # .'$ClearLinuxPlatformModel'.versions.0
                    res = isinstance(arr_6_item, str) and arr_6_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$ClearLinuxPlatformModel'.versions.0]", arr_6_lpath if (lpath_6 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$ClearLinuxPlatformModel'.versions]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$ClearLinuxPlatformModel'.versions]", lpath_6 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$ClearLinuxPlatformModel']", lpath_6 if path is not None else None))
            return False
    return True

# check $ClearLinuxPlatformModel (.'$ClearLinuxPlatformModel')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ClearLinuxPlatformModel'
    res = _jm_obj_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$ClearLinuxPlatformModel']", path))
    return res


# object .'$CumulusPlatformModel'
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$CumulusPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$CumulusPlatformModel'.name
            res = isinstance(pval, str) and pval == "Cumulus"
            if not res:
                rep is None or rep.append(("unexpected _Cumulus [.'$CumulusPlatformModel'.name]", lpath_7 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$CumulusPlatformModel'.name]", lpath_7 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$CumulusPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_7_idx, arr_7_item in enumerate(pval):
                    arr_7_lpath: Path = ((lpath_7 if path is not None else None) + [ arr_7_idx ]) if (lpath_7 if path is not None else None) is not None else None
                    # .'$CumulusPlatformModel'.versions.0
                    res = ((arr_7_item is None or isinstance(arr_7_item, (bool, int, float, str)))) and arr_7_item in _jm_cst_4
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$CumulusPlatformModel'.versions.0.'|']", arr_7_lpath if (lpath_7 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$CumulusPlatformModel'.versions]", lpath_7 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$CumulusPlatformModel'.versions]", lpath_7 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$CumulusPlatformModel']", lpath_7 if path is not None else None))
            return False
    return True

# check $CumulusPlatformModel (.'$CumulusPlatformModel')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$CumulusPlatformModel'
    res = _jm_obj_7(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$CumulusPlatformModel']", path))
    return res


# object .'$DebianPlatformModel'
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$DebianPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$DebianPlatformModel'.name
            res = isinstance(pval, str) and pval == "Debian"
            if not res:
                rep is None or rep.append(("unexpected _Debian [.'$DebianPlatformModel'.name]", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$DebianPlatformModel'.name]", lpath_8 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$DebianPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_8_idx, arr_8_item in enumerate(pval):
                    arr_8_lpath: Path = ((lpath_8 if path is not None else None) + [ arr_8_idx ]) if (lpath_8 if path is not None else None) is not None else None
                    # .'$DebianPlatformModel'.versions.0
                    res = ((arr_8_item is None or isinstance(arr_8_item, (bool, int, float, str)))) and arr_8_item in _jm_cst_5
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$DebianPlatformModel'.versions.0.'|']", arr_8_lpath if (lpath_8 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$DebianPlatformModel'.versions]", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$DebianPlatformModel'.versions]", lpath_8 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$DebianPlatformModel']", lpath_8 if path is not None else None))
            return False
    return True

# check $DebianPlatformModel (.'$DebianPlatformModel')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$DebianPlatformModel'
    res = _jm_obj_8(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$DebianPlatformModel']", path))
    return res


# object .'$DellOSPlatformModel'
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$DellOSPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$DellOSPlatformModel'.name
            res = isinstance(pval, str) and pval == "DellOS"
            if not res:
                rep is None or rep.append(("unexpected _DellOS [.'$DellOSPlatformModel'.name]", lpath_9 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$DellOSPlatformModel'.name]", lpath_9 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$DellOSPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_9_idx, arr_9_item in enumerate(pval):
                    arr_9_lpath: Path = ((lpath_9 if path is not None else None) + [ arr_9_idx ]) if (lpath_9 if path is not None else None) is not None else None
                    # .'$DellOSPlatformModel'.versions.0
                    res = ((arr_9_item is None or isinstance(arr_9_item, (bool, int, float, str)))) and arr_9_item in _jm_cst_6
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$DellOSPlatformModel'.versions.0.'|']", arr_9_lpath if (lpath_9 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$DellOSPlatformModel'.versions]", lpath_9 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$DellOSPlatformModel'.versions]", lpath_9 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$DellOSPlatformModel']", lpath_9 if path is not None else None))
            return False
    return True

# check $DellOSPlatformModel (.'$DellOSPlatformModel')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$DellOSPlatformModel'
    res = _jm_obj_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$DellOSPlatformModel']", path))
    return res


# object .'$DevuanPlatformModel'
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$DevuanPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$DevuanPlatformModel'.name
            res = isinstance(pval, str) and pval == "Devuan"
            if not res:
                rep is None or rep.append(("unexpected _Devuan [.'$DevuanPlatformModel'.name]", lpath_10 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$DevuanPlatformModel'.name]", lpath_10 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$DevuanPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_10_idx, arr_10_item in enumerate(pval):
                    arr_10_lpath: Path = ((lpath_10 if path is not None else None) + [ arr_10_idx ]) if (lpath_10 if path is not None else None) is not None else None
                    # .'$DevuanPlatformModel'.versions.0
                    res = ((arr_10_item is None or isinstance(arr_10_item, (bool, int, float, str)))) and arr_10_item in _jm_cst_7
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$DevuanPlatformModel'.versions.0.'|']", arr_10_lpath if (lpath_10 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$DevuanPlatformModel'.versions]", lpath_10 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$DevuanPlatformModel'.versions]", lpath_10 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$DevuanPlatformModel']", lpath_10 if path is not None else None))
            return False
    return True

# check $DevuanPlatformModel (.'$DevuanPlatformModel')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$DevuanPlatformModel'
    res = _jm_obj_10(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$DevuanPlatformModel']", path))
    return res


# object .'$DragonFlyBSDPlatformModel'
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$DragonFlyBSDPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$DragonFlyBSDPlatformModel'.name
            res = isinstance(pval, str) and pval == "DragonFlyBSD"
            if not res:
                rep is None or rep.append(("unexpected _DragonFlyBSD [.'$DragonFlyBSDPlatformModel'.name]", lpath_11 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$DragonFlyBSDPlatformModel'.name]", lpath_11 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$DragonFlyBSDPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_11_idx, arr_11_item in enumerate(pval):
                    arr_11_lpath: Path = ((lpath_11 if path is not None else None) + [ arr_11_idx ]) if (lpath_11 if path is not None else None) is not None else None
                    # .'$DragonFlyBSDPlatformModel'.versions.0
                    res = ((arr_11_item is None or isinstance(arr_11_item, (bool, int, float, str)))) and arr_11_item in _jm_cst_8
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$DragonFlyBSDPlatformModel'.versions.0.'|']", arr_11_lpath if (lpath_11 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$DragonFlyBSDPlatformModel'.versions]", lpath_11 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$DragonFlyBSDPlatformModel'.versions]", lpath_11 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$DragonFlyBSDPlatformModel']", lpath_11 if path is not None else None))
            return False
    return True

# check $DragonFlyBSDPlatformModel (.'$DragonFlyBSDPlatformModel')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$DragonFlyBSDPlatformModel'
    res = _jm_obj_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$DragonFlyBSDPlatformModel']", path))
    return res


# object .'$ELPlatformModel'
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ELPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$ELPlatformModel'.name
            res = isinstance(pval, str) and pval == "EL"
            if not res:
                rep is None or rep.append(("unexpected _EL [.'$ELPlatformModel'.name]", lpath_12 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$ELPlatformModel'.name]", lpath_12 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$ELPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_12_idx, arr_12_item in enumerate(pval):
                    arr_12_lpath: Path = ((lpath_12 if path is not None else None) + [ arr_12_idx ]) if (lpath_12 if path is not None else None) is not None else None
                    # .'$ELPlatformModel'.versions.0
                    res = ((arr_12_item is None or isinstance(arr_12_item, (bool, int, float, str)))) and arr_12_item in _jm_cst_9
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$ELPlatformModel'.versions.0.'|']", arr_12_lpath if (lpath_12 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$ELPlatformModel'.versions]", lpath_12 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$ELPlatformModel'.versions]", lpath_12 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$ELPlatformModel']", lpath_12 if path is not None else None))
            return False
    return True

# check $ELPlatformModel (.'$ELPlatformModel')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ELPlatformModel'
    res = _jm_obj_12(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$ELPlatformModel']", path))
    return res


# object .'$FedoraPlatformModel'
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$FedoraPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$FedoraPlatformModel'.name
            res = isinstance(pval, str) and (pval == "Fedora")
            if not res:
                rep is None or rep.append(("unexpected _Fedora [.'$FedoraPlatformModel'.name]", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$FedoraPlatformModel'.name]", lpath_13 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$FedoraPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_13_idx, arr_13_item in enumerate(pval):
                    arr_13_lpath: Path = ((lpath_13 if path is not None else None) + [ arr_13_idx ]) if (lpath_13 if path is not None else None) is not None else None
                    # .'$FedoraPlatformModel'.versions.0
                    res = ((arr_13_item is None or isinstance(arr_13_item, (bool, int, float, str)))) and arr_13_item in _jm_cst_10
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$FedoraPlatformModel'.versions.0.'|']", arr_13_lpath if (lpath_13 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$FedoraPlatformModel'.versions]", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$FedoraPlatformModel'.versions]", lpath_13 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$FedoraPlatformModel']", lpath_13 if path is not None else None))
            return False
    return True

# check $FedoraPlatformModel (.'$FedoraPlatformModel')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$FedoraPlatformModel'
    res = _jm_obj_13(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$FedoraPlatformModel']", path))
    return res


# object .'$FreeBSDPlatformModel'
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$FreeBSDPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$FreeBSDPlatformModel'.name
            res = isinstance(pval, str) and pval == "FreeBSD"
            if not res:
                rep is None or rep.append(("unexpected _FreeBSD [.'$FreeBSDPlatformModel'.name]", lpath_14 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$FreeBSDPlatformModel'.name]", lpath_14 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$FreeBSDPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_14_idx, arr_14_item in enumerate(pval):
                    arr_14_lpath: Path = ((lpath_14 if path is not None else None) + [ arr_14_idx ]) if (lpath_14 if path is not None else None) is not None else None
                    # .'$FreeBSDPlatformModel'.versions.0
                    res = ((arr_14_item is None or isinstance(arr_14_item, (bool, int, float, str)))) and arr_14_item in _jm_cst_11
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$FreeBSDPlatformModel'.versions.0.'|']", arr_14_lpath if (lpath_14 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$FreeBSDPlatformModel'.versions]", lpath_14 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$FreeBSDPlatformModel'.versions]", lpath_14 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$FreeBSDPlatformModel']", lpath_14 if path is not None else None))
            return False
    return True

# check $FreeBSDPlatformModel (.'$FreeBSDPlatformModel')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$FreeBSDPlatformModel'
    res = _jm_obj_14(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$FreeBSDPlatformModel']", path))
    return res

# object .'$GenericBSDPlatformModel'
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$GenericBSDPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$GenericBSDPlatformModel'.name
            res = isinstance(pval, str) and pval == "GenericBSD"
            if not res:
                rep is None or rep.append(("unexpected _GenericBSD [.'$GenericBSDPlatformModel'.name]", lpath_15 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$GenericBSDPlatformModel'.name]", lpath_15 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$GenericBSDPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_15_idx, arr_15_item in enumerate(pval):
                    arr_15_lpath: Path = ((lpath_15 if path is not None else None) + [ arr_15_idx ]) if (lpath_15 if path is not None else None) is not None else None
                    # .'$GenericBSDPlatformModel'.versions.0
                    res = isinstance(arr_15_item, str) and arr_15_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$GenericBSDPlatformModel'.versions.0]", arr_15_lpath if (lpath_15 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$GenericBSDPlatformModel'.versions]", lpath_15 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$GenericBSDPlatformModel'.versions]", lpath_15 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$GenericBSDPlatformModel']", lpath_15 if path is not None else None))
            return False
    return True

# check $GenericBSDPlatformModel (.'$GenericBSDPlatformModel')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GenericBSDPlatformModel'
    res = _jm_obj_15(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$GenericBSDPlatformModel']", path))
    return res

# object .'$GenericLinuxPlatformModel'
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$GenericLinuxPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$GenericLinuxPlatformModel'.name
            res = isinstance(pval, str) and pval == "GenericLinux"
            if not res:
                rep is None or rep.append(("unexpected _GenericLinux [.'$GenericLinuxPlatformModel'.name]", lpath_16 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$GenericLinuxPlatformModel'.name]", lpath_16 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$GenericLinuxPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_16_idx, arr_16_item in enumerate(pval):
                    arr_16_lpath: Path = ((lpath_16 if path is not None else None) + [ arr_16_idx ]) if (lpath_16 if path is not None else None) is not None else None
                    # .'$GenericLinuxPlatformModel'.versions.0
                    res = isinstance(arr_16_item, str) and arr_16_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$GenericLinuxPlatformModel'.versions.0]", arr_16_lpath if (lpath_16 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$GenericLinuxPlatformModel'.versions]", lpath_16 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$GenericLinuxPlatformModel'.versions]", lpath_16 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$GenericLinuxPlatformModel']", lpath_16 if path is not None else None))
            return False
    return True

# check $GenericLinuxPlatformModel (.'$GenericLinuxPlatformModel')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GenericLinuxPlatformModel'
    res = _jm_obj_16(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$GenericLinuxPlatformModel']", path))
    return res

# object .'$GenericUNIXPlatformModel'
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$GenericUNIXPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$GenericUNIXPlatformModel'.name
            res = isinstance(pval, str) and pval == "GenericUNIX"
            if not res:
                rep is None or rep.append(("unexpected _GenericUNIX [.'$GenericUNIXPlatformModel'.name]", lpath_17 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$GenericUNIXPlatformModel'.name]", lpath_17 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$GenericUNIXPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_17_idx, arr_17_item in enumerate(pval):
                    arr_17_lpath: Path = ((lpath_17 if path is not None else None) + [ arr_17_idx ]) if (lpath_17 if path is not None else None) is not None else None
                    # .'$GenericUNIXPlatformModel'.versions.0
                    res = isinstance(arr_17_item, str) and arr_17_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$GenericUNIXPlatformModel'.versions.0]", arr_17_lpath if (lpath_17 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$GenericUNIXPlatformModel'.versions]", lpath_17 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$GenericUNIXPlatformModel'.versions]", lpath_17 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$GenericUNIXPlatformModel']", lpath_17 if path is not None else None))
            return False
    return True

# check $GenericUNIXPlatformModel (.'$GenericUNIXPlatformModel')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GenericUNIXPlatformModel'
    res = _jm_obj_17(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$GenericUNIXPlatformModel']", path))
    return res

# object .'$GentooPlatformModel'
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$GentooPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$GentooPlatformModel'.name
            res = isinstance(pval, str) and pval == "Gentoo"
            if not res:
                rep is None or rep.append(("unexpected _Gentoo [.'$GentooPlatformModel'.name]", lpath_18 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$GentooPlatformModel'.name]", lpath_18 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$GentooPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_18_idx, arr_18_item in enumerate(pval):
                    arr_18_lpath: Path = ((lpath_18 if path is not None else None) + [ arr_18_idx ]) if (lpath_18 if path is not None else None) is not None else None
                    # .'$GentooPlatformModel'.versions.0
                    res = isinstance(arr_18_item, str) and arr_18_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$GentooPlatformModel'.versions.0]", arr_18_lpath if (lpath_18 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$GentooPlatformModel'.versions]", lpath_18 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$GentooPlatformModel'.versions]", lpath_18 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$GentooPlatformModel']", lpath_18 if path is not None else None))
            return False
    return True

# check $GentooPlatformModel (.'$GentooPlatformModel')
def json_model_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GentooPlatformModel'
    res = _jm_obj_18(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$GentooPlatformModel']", path))
    return res


# object .'$HardenedBSDPlatformModel'
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$HardenedBSDPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$HardenedBSDPlatformModel'.name
            res = isinstance(pval, str) and pval == "HardenedBSD"
            if not res:
                rep is None or rep.append(("unexpected _HardenedBSD [.'$HardenedBSDPlatformModel'.name]", lpath_19 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$HardenedBSDPlatformModel'.name]", lpath_19 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$HardenedBSDPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_19_idx, arr_19_item in enumerate(pval):
                    arr_19_lpath: Path = ((lpath_19 if path is not None else None) + [ arr_19_idx ]) if (lpath_19 if path is not None else None) is not None else None
                    # .'$HardenedBSDPlatformModel'.versions.0
                    res = ((arr_19_item is None or isinstance(arr_19_item, (bool, int, float, str)))) and arr_19_item in _jm_cst_12
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$HardenedBSDPlatformModel'.versions.0.'|']", arr_19_lpath if (lpath_19 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$HardenedBSDPlatformModel'.versions]", lpath_19 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$HardenedBSDPlatformModel'.versions]", lpath_19 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$HardenedBSDPlatformModel']", lpath_19 if path is not None else None))
            return False
    return True

# check $HardenedBSDPlatformModel (.'$HardenedBSDPlatformModel')
def json_model_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$HardenedBSDPlatformModel'
    res = _jm_obj_19(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$HardenedBSDPlatformModel']", path))
    return res

# object .'$IOSPlatformModel'
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$IOSPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$IOSPlatformModel'.name
            res = isinstance(pval, str) and pval == "IOS"
            if not res:
                rep is None or rep.append(("unexpected _IOS [.'$IOSPlatformModel'.name]", lpath_20 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$IOSPlatformModel'.name]", lpath_20 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$IOSPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_20_idx, arr_20_item in enumerate(pval):
                    arr_20_lpath: Path = ((lpath_20 if path is not None else None) + [ arr_20_idx ]) if (lpath_20 if path is not None else None) is not None else None
                    # .'$IOSPlatformModel'.versions.0
                    res = isinstance(arr_20_item, str) and arr_20_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$IOSPlatformModel'.versions.0]", arr_20_lpath if (lpath_20 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$IOSPlatformModel'.versions]", lpath_20 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$IOSPlatformModel'.versions]", lpath_20 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$IOSPlatformModel']", lpath_20 if path is not None else None))
            return False
    return True

# check $IOSPlatformModel (.'$IOSPlatformModel')
def json_model_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$IOSPlatformModel'
    res = _jm_obj_20(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$IOSPlatformModel']", path))
    return res

# object .'$JunosPlatformModel'
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$JunosPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$JunosPlatformModel'.name
            res = isinstance(pval, str) and pval == "Junos"
            if not res:
                rep is None or rep.append(("unexpected _Junos [.'$JunosPlatformModel'.name]", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$JunosPlatformModel'.name]", lpath_21 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$JunosPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_21_idx, arr_21_item in enumerate(pval):
                    arr_21_lpath: Path = ((lpath_21 if path is not None else None) + [ arr_21_idx ]) if (lpath_21 if path is not None else None) is not None else None
                    # .'$JunosPlatformModel'.versions.0
                    res = isinstance(arr_21_item, str) and arr_21_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$JunosPlatformModel'.versions.0]", arr_21_lpath if (lpath_21 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$JunosPlatformModel'.versions]", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$JunosPlatformModel'.versions]", lpath_21 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$JunosPlatformModel']", lpath_21 if path is not None else None))
            return False
    return True

# check $JunosPlatformModel (.'$JunosPlatformModel')
def json_model_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$JunosPlatformModel'
    res = _jm_obj_21(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$JunosPlatformModel']", path))
    return res


# object .'$KaliPlatformModel'
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$KaliPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$KaliPlatformModel'.name
            res = isinstance(pval, str) and pval == "Kali"
            if not res:
                rep is None or rep.append(("unexpected _Kali [.'$KaliPlatformModel'.name]", lpath_22 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$KaliPlatformModel'.name]", lpath_22 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$KaliPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_22_idx, arr_22_item in enumerate(pval):
                    arr_22_lpath: Path = ((lpath_22 if path is not None else None) + [ arr_22_idx ]) if (lpath_22 if path is not None else None) is not None else None
                    # .'$KaliPlatformModel'.versions.0
                    res = ((arr_22_item is None or isinstance(arr_22_item, (bool, int, float, str)))) and arr_22_item in _jm_cst_13
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$KaliPlatformModel'.versions.0.'|']", arr_22_lpath if (lpath_22 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$KaliPlatformModel'.versions]", lpath_22 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$KaliPlatformModel'.versions]", lpath_22 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$KaliPlatformModel']", lpath_22 if path is not None else None))
            return False
    return True

# check $KaliPlatformModel (.'$KaliPlatformModel')
def json_model_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$KaliPlatformModel'
    res = _jm_obj_22(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$KaliPlatformModel']", path))
    return res


# object .'$MacOSXPlatformModel'
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$MacOSXPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$MacOSXPlatformModel'.name
            res = isinstance(pval, str) and pval == "Kali"
            if not res:
                rep is None or rep.append(("unexpected _Kali [.'$MacOSXPlatformModel'.name]", lpath_23 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$MacOSXPlatformModel'.name]", lpath_23 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$MacOSXPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_23_idx, arr_23_item in enumerate(pval):
                    arr_23_lpath: Path = ((lpath_23 if path is not None else None) + [ arr_23_idx ]) if (lpath_23 if path is not None else None) is not None else None
                    # .'$MacOSXPlatformModel'.versions.0
                    res = ((arr_23_item is None or isinstance(arr_23_item, (bool, int, float, str)))) and arr_23_item in _jm_cst_14
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$MacOSXPlatformModel'.versions.0.'|']", arr_23_lpath if (lpath_23 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$MacOSXPlatformModel'.versions]", lpath_23 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$MacOSXPlatformModel'.versions]", lpath_23 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$MacOSXPlatformModel']", lpath_23 if path is not None else None))
            return False
    return True

# check $MacOSXPlatformModel (.'$MacOSXPlatformModel')
def json_model_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$MacOSXPlatformModel'
    res = _jm_obj_23(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$MacOSXPlatformModel']", path))
    return res


# object .'$MageiaPlatformModel'
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$MageiaPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$MageiaPlatformModel'.name
            res = isinstance(pval, str) and pval == "Megeia"
            if not res:
                rep is None or rep.append(("unexpected _Megeia [.'$MageiaPlatformModel'.name]", lpath_24 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$MageiaPlatformModel'.name]", lpath_24 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$MageiaPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_24_idx, arr_24_item in enumerate(pval):
                    arr_24_lpath: Path = ((lpath_24 if path is not None else None) + [ arr_24_idx ]) if (lpath_24 if path is not None else None) is not None else None
                    # .'$MageiaPlatformModel'.versions.0
                    res = ((arr_24_item is None or isinstance(arr_24_item, (bool, int, float, str)))) and arr_24_item in _jm_cst_15
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$MageiaPlatformModel'.versions.0.'|']", arr_24_lpath if (lpath_24 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$MageiaPlatformModel'.versions]", lpath_24 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$MageiaPlatformModel'.versions]", lpath_24 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$MageiaPlatformModel']", lpath_24 if path is not None else None))
            return False
    return True

# check $MageiaPlatformModel (.'$MageiaPlatformModel')
def json_model_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$MageiaPlatformModel'
    res = _jm_obj_24(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$MageiaPlatformModel']", path))
    return res

# object .'$NXOSPlatformModel'
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$NXOSPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$NXOSPlatformModel'.name
            res = isinstance(pval, str) and pval == "NXOS"
            if not res:
                rep is None or rep.append(("unexpected _NXOS [.'$NXOSPlatformModel'.name]", lpath_25 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$NXOSPlatformModel'.name]", lpath_25 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$NXOSPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_25_idx, arr_25_item in enumerate(pval):
                    arr_25_lpath: Path = ((lpath_25 if path is not None else None) + [ arr_25_idx ]) if (lpath_25 if path is not None else None) is not None else None
                    # .'$NXOSPlatformModel'.versions.0
                    res = isinstance(arr_25_item, str) and arr_25_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$NXOSPlatformModel'.versions.0]", arr_25_lpath if (lpath_25 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$NXOSPlatformModel'.versions]", lpath_25 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$NXOSPlatformModel'.versions]", lpath_25 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$NXOSPlatformModel']", lpath_25 if path is not None else None))
            return False
    return True

# check $NXOSPlatformModel (.'$NXOSPlatformModel')
def json_model_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$NXOSPlatformModel'
    res = _jm_obj_25(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$NXOSPlatformModel']", path))
    return res


# object .'$NetBSDPlatformModel'
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$NetBSDPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$NetBSDPlatformModel'.name
            res = isinstance(pval, str) and pval == "NetBSD"
            if not res:
                rep is None or rep.append(("unexpected _NetBSD [.'$NetBSDPlatformModel'.name]", lpath_26 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$NetBSDPlatformModel'.name]", lpath_26 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$NetBSDPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_26_idx, arr_26_item in enumerate(pval):
                    arr_26_lpath: Path = ((lpath_26 if path is not None else None) + [ arr_26_idx ]) if (lpath_26 if path is not None else None) is not None else None
                    # .'$NetBSDPlatformModel'.versions.0
                    res = ((arr_26_item is None or isinstance(arr_26_item, (bool, int, float, str)))) and arr_26_item in _jm_cst_16
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$NetBSDPlatformModel'.versions.0.'|']", arr_26_lpath if (lpath_26 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$NetBSDPlatformModel'.versions]", lpath_26 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$NetBSDPlatformModel'.versions]", lpath_26 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$NetBSDPlatformModel']", lpath_26 if path is not None else None))
            return False
    return True

# check $NetBSDPlatformModel (.'$NetBSDPlatformModel')
def json_model_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$NetBSDPlatformModel'
    res = _jm_obj_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$NetBSDPlatformModel']", path))
    return res


# object .'$OpenBSDPlatformModel'
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$OpenBSDPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$OpenBSDPlatformModel'.name
            res = isinstance(pval, str) and pval == "OpenBSD"
            if not res:
                rep is None or rep.append(("unexpected _OpenBSD [.'$OpenBSDPlatformModel'.name]", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$OpenBSDPlatformModel'.name]", lpath_27 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$OpenBSDPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_27_idx, arr_27_item in enumerate(pval):
                    arr_27_lpath: Path = ((lpath_27 if path is not None else None) + [ arr_27_idx ]) if (lpath_27 if path is not None else None) is not None else None
                    # .'$OpenBSDPlatformModel'.versions.0
                    res = ((arr_27_item is None or isinstance(arr_27_item, (bool, int, float, str)))) and arr_27_item in _jm_cst_17
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$OpenBSDPlatformModel'.versions.0.'|']", arr_27_lpath if (lpath_27 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$OpenBSDPlatformModel'.versions]", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$OpenBSDPlatformModel'.versions]", lpath_27 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$OpenBSDPlatformModel']", lpath_27 if path is not None else None))
            return False
    return True

# check $OpenBSDPlatformModel (.'$OpenBSDPlatformModel')
def json_model_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OpenBSDPlatformModel'
    res = _jm_obj_27(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$OpenBSDPlatformModel']", path))
    return res


# object .'$OpenWrtPlatformModel'
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$OpenWrtPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$OpenWrtPlatformModel'.name
            res = isinstance(pval, str) and pval == "OpenWrt"
            if not res:
                rep is None or rep.append(("unexpected _OpenWrt [.'$OpenWrtPlatformModel'.name]", lpath_28 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$OpenWrtPlatformModel'.name]", lpath_28 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$OpenWrtPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_28_idx, arr_28_item in enumerate(pval):
                    arr_28_lpath: Path = ((lpath_28 if path is not None else None) + [ arr_28_idx ]) if (lpath_28 if path is not None else None) is not None else None
                    # .'$OpenWrtPlatformModel'.versions.0
                    res = ((arr_28_item is None or isinstance(arr_28_item, (bool, int, float, str)))) and arr_28_item in _jm_cst_18
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$OpenWrtPlatformModel'.versions.0.'|']", arr_28_lpath if (lpath_28 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$OpenWrtPlatformModel'.versions]", lpath_28 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$OpenWrtPlatformModel'.versions]", lpath_28 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$OpenWrtPlatformModel']", lpath_28 if path is not None else None))
            return False
    return True

# check $OpenWrtPlatformModel (.'$OpenWrtPlatformModel')
def json_model_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OpenWrtPlatformModel'
    res = _jm_obj_28(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$OpenWrtPlatformModel']", path))
    return res


# object .'$OracleLinuxPlatformModel'
def _jm_obj_29(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$OracleLinuxPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$OracleLinuxPlatformModel'.name
            res = isinstance(pval, str) and pval == "OracleLinux"
            if not res:
                rep is None or rep.append(("unexpected _OracleLinux [.'$OracleLinuxPlatformModel'.name]", lpath_29 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$OracleLinuxPlatformModel'.name]", lpath_29 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$OracleLinuxPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_29_idx, arr_29_item in enumerate(pval):
                    arr_29_lpath: Path = ((lpath_29 if path is not None else None) + [ arr_29_idx ]) if (lpath_29 if path is not None else None) is not None else None
                    # .'$OracleLinuxPlatformModel'.versions.0
                    res = ((arr_29_item is None or isinstance(arr_29_item, (bool, int, float, str)))) and arr_29_item in _jm_cst_19
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$OracleLinuxPlatformModel'.versions.0.'|']", arr_29_lpath if (lpath_29 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$OracleLinuxPlatformModel'.versions]", lpath_29 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$OracleLinuxPlatformModel'.versions]", lpath_29 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$OracleLinuxPlatformModel']", lpath_29 if path is not None else None))
            return False
    return True

# check $OracleLinuxPlatformModel (.'$OracleLinuxPlatformModel')
def json_model_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OracleLinuxPlatformModel'
    res = _jm_obj_29(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$OracleLinuxPlatformModel']", path))
    return res


# object .'$PAN-OSPlatformModel'
def _jm_obj_30(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$PAN-OSPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$PAN-OSPlatformModel'.name
            res = isinstance(pval, str) and pval == "PAN-OS"
            if not res:
                rep is None or rep.append(("unexpected _PAN-OS [.'$PAN-OSPlatformModel'.name]", lpath_30 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$PAN-OSPlatformModel'.name]", lpath_30 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$PAN-OSPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_30_idx, arr_30_item in enumerate(pval):
                    arr_30_lpath: Path = ((lpath_30 if path is not None else None) + [ arr_30_idx ]) if (lpath_30 if path is not None else None) is not None else None
                    # .'$PAN-OSPlatformModel'.versions.0
                    res = ((arr_30_item is None or isinstance(arr_30_item, (bool, int, float, str)))) and arr_30_item in _jm_cst_20
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$PAN-OSPlatformModel'.versions.0.'|']", arr_30_lpath if (lpath_30 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$PAN-OSPlatformModel'.versions]", lpath_30 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$PAN-OSPlatformModel'.versions]", lpath_30 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$PAN-OSPlatformModel']", lpath_30 if path is not None else None))
            return False
    return True

# check $PAN-OSPlatformModel (.'$PAN-OSPlatformModel')
def json_model_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PAN-OSPlatformModel'
    res = _jm_obj_30(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$PAN-OSPlatformModel']", path))
    return res


# object .'$RockyLinuxPlatformModel'
def _jm_obj_31(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RockyLinuxPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$RockyLinuxPlatformModel'.name
            res = isinstance(pval, str) and pval == "Rocky"
            if not res:
                rep is None or rep.append(("unexpected _Rocky [.'$RockyLinuxPlatformModel'.name]", lpath_31 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RockyLinuxPlatformModel'.name]", lpath_31 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$RockyLinuxPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_31_idx, arr_31_item in enumerate(pval):
                    arr_31_lpath: Path = ((lpath_31 if path is not None else None) + [ arr_31_idx ]) if (lpath_31 if path is not None else None) is not None else None
                    # .'$RockyLinuxPlatformModel'.versions.0
                    res = ((arr_31_item is None or isinstance(arr_31_item, (bool, int, float, str)))) and arr_31_item in _jm_cst_21
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$RockyLinuxPlatformModel'.versions.0.'|']", arr_31_lpath if (lpath_31 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$RockyLinuxPlatformModel'.versions]", lpath_31 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RockyLinuxPlatformModel'.versions]", lpath_31 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RockyLinuxPlatformModel']", lpath_31 if path is not None else None))
            return False
    return True

# check $RockyLinuxPlatformModel (.'$RockyLinuxPlatformModel')
def json_model_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$RockyLinuxPlatformModel'
    res = _jm_obj_31(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$RockyLinuxPlatformModel']", path))
    return res


# object .'$SLESPlatformModel'
def _jm_obj_32(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SLESPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$SLESPlatformModel'.name
            res = isinstance(pval, str) and pval == "SLES"
            if not res:
                rep is None or rep.append(("unexpected _SLES [.'$SLESPlatformModel'.name]", lpath_32 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SLESPlatformModel'.name]", lpath_32 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$SLESPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_32_idx, arr_32_item in enumerate(pval):
                    arr_32_lpath: Path = ((lpath_32 if path is not None else None) + [ arr_32_idx ]) if (lpath_32 if path is not None else None) is not None else None
                    # .'$SLESPlatformModel'.versions.0
                    res = ((arr_32_item is None or isinstance(arr_32_item, (bool, int, float, str)))) and arr_32_item in _jm_cst_22
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$SLESPlatformModel'.versions.0.'|']", arr_32_lpath if (lpath_32 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$SLESPlatformModel'.versions]", lpath_32 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SLESPlatformModel'.versions]", lpath_32 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SLESPlatformModel']", lpath_32 if path is not None else None))
            return False
    return True

# check $SLESPlatformModel (.'$SLESPlatformModel')
def json_model_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$SLESPlatformModel'
    res = _jm_obj_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$SLESPlatformModel']", path))
    return res

# object .'$SmartOSPlatformModel'
def _jm_obj_33(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SmartOSPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$SmartOSPlatformModel'.name
            res = isinstance(pval, str) and pval == "SmartOS"
            if not res:
                rep is None or rep.append(("unexpected _SmartOS [.'$SmartOSPlatformModel'.name]", lpath_33 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SmartOSPlatformModel'.name]", lpath_33 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$SmartOSPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_33_idx, arr_33_item in enumerate(pval):
                    arr_33_lpath: Path = ((lpath_33 if path is not None else None) + [ arr_33_idx ]) if (lpath_33 if path is not None else None) is not None else None
                    # .'$SmartOSPlatformModel'.versions.0
                    res = isinstance(arr_33_item, str) and arr_33_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$SmartOSPlatformModel'.versions.0]", arr_33_lpath if (lpath_33 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$SmartOSPlatformModel'.versions]", lpath_33 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SmartOSPlatformModel'.versions]", lpath_33 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SmartOSPlatformModel']", lpath_33 if path is not None else None))
            return False
    return True

# check $SmartOSPlatformModel (.'$SmartOSPlatformModel')
def json_model_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$SmartOSPlatformModel'
    res = _jm_obj_33(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$SmartOSPlatformModel']", path))
    return res


# object .'$SolarisPlatformModel'
def _jm_obj_34(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SolarisPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$SolarisPlatformModel'.name
            res = isinstance(pval, str) and pval == "Solaris"
            if not res:
                rep is None or rep.append(("unexpected _Solaris [.'$SolarisPlatformModel'.name]", lpath_34 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SolarisPlatformModel'.name]", lpath_34 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$SolarisPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_34_idx, arr_34_item in enumerate(pval):
                    arr_34_lpath: Path = ((lpath_34 if path is not None else None) + [ arr_34_idx ]) if (lpath_34 if path is not None else None) is not None else None
                    # .'$SolarisPlatformModel'.versions.0
                    res = ((arr_34_item is None or isinstance(arr_34_item, (bool, int, float, str)))) and arr_34_item in _jm_cst_23
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$SolarisPlatformModel'.versions.0.'|']", arr_34_lpath if (lpath_34 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$SolarisPlatformModel'.versions]", lpath_34 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SolarisPlatformModel'.versions]", lpath_34 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SolarisPlatformModel']", lpath_34 if path is not None else None))
            return False
    return True

# check $SolarisPlatformModel (.'$SolarisPlatformModel')
def json_model_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$SolarisPlatformModel'
    res = _jm_obj_34(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$SolarisPlatformModel']", path))
    return res


# object .'$SynologyPlatformModel'
def _jm_obj_35(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SynologyPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$SynologyPlatformModel'.name
            res = isinstance(pval, str) and pval == "Synology"
            if not res:
                rep is None or rep.append(("unexpected _Synology [.'$SynologyPlatformModel'.name]", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SynologyPlatformModel'.name]", lpath_35 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$SynologyPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_35_idx, arr_35_item in enumerate(pval):
                    arr_35_lpath: Path = ((lpath_35 if path is not None else None) + [ arr_35_idx ]) if (lpath_35 if path is not None else None) is not None else None
                    # .'$SynologyPlatformModel'.versions.0
                    res = ((arr_35_item is None or isinstance(arr_35_item, (bool, int, float, str)))) and arr_35_item in _jm_cst_24
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$SynologyPlatformModel'.versions.0.'|']", arr_35_lpath if (lpath_35 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$SynologyPlatformModel'.versions]", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SynologyPlatformModel'.versions]", lpath_35 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SynologyPlatformModel']", lpath_35 if path is not None else None))
            return False
    return True

# check $SynologyPlatformModel (.'$SynologyPlatformModel')
def json_model_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$SynologyPlatformModel'
    res = _jm_obj_35(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$SynologyPlatformModel']", path))
    return res


# object .'$TMOSPlatformModel'
def _jm_obj_36(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$TMOSPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_36: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$TMOSPlatformModel'.name
            res = isinstance(pval, str) and pval == "TMOS"
            if not res:
                rep is None or rep.append(("unexpected _TMOS [.'$TMOSPlatformModel'.name]", lpath_36 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$TMOSPlatformModel'.name]", lpath_36 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$TMOSPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_36_idx, arr_36_item in enumerate(pval):
                    arr_36_lpath: Path = ((lpath_36 if path is not None else None) + [ arr_36_idx ]) if (lpath_36 if path is not None else None) is not None else None
                    # .'$TMOSPlatformModel'.versions.0
                    res = ((arr_36_item is None or isinstance(arr_36_item, (bool, int, float, str)))) and arr_36_item in _jm_cst_25
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$TMOSPlatformModel'.versions.0.'|']", arr_36_lpath if (lpath_36 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$TMOSPlatformModel'.versions]", lpath_36 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$TMOSPlatformModel'.versions]", lpath_36 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$TMOSPlatformModel']", lpath_36 if path is not None else None))
            return False
    return True

# check $TMOSPlatformModel (.'$TMOSPlatformModel')
def json_model_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$TMOSPlatformModel'
    res = _jm_obj_36(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$TMOSPlatformModel']", path))
    return res


# object .'$UbuntuPlatformModel'
def _jm_obj_37(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$UbuntuPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_37: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$UbuntuPlatformModel'.name
            res = isinstance(pval, str) and pval == "Ubuntu"
            if not res:
                rep is None or rep.append(("unexpected _Ubuntu [.'$UbuntuPlatformModel'.name]", lpath_37 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$UbuntuPlatformModel'.name]", lpath_37 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$UbuntuPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_37_idx, arr_37_item in enumerate(pval):
                    arr_37_lpath: Path = ((lpath_37 if path is not None else None) + [ arr_37_idx ]) if (lpath_37 if path is not None else None) is not None else None
                    # .'$UbuntuPlatformModel'.versions.0
                    res = ((arr_37_item is None or isinstance(arr_37_item, (bool, int, float, str)))) and arr_37_item in _jm_cst_26
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$UbuntuPlatformModel'.versions.0.'|']", arr_37_lpath if (lpath_37 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$UbuntuPlatformModel'.versions]", lpath_37 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$UbuntuPlatformModel'.versions]", lpath_37 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$UbuntuPlatformModel']", lpath_37 if path is not None else None))
            return False
    return True

# check $UbuntuPlatformModel (.'$UbuntuPlatformModel')
def json_model_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$UbuntuPlatformModel'
    res = _jm_obj_37(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$UbuntuPlatformModel']", path))
    return res

# object .'$Void_LinuxPlatformModel'
def _jm_obj_38(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Void_LinuxPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_38: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$Void_LinuxPlatformModel'.name
            res = isinstance(pval, str) and pval == "Void Linux"
            if not res:
                rep is None or rep.append(("unexpected _Void Linux [.'$Void_LinuxPlatformModel'.name]", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Void_LinuxPlatformModel'.name]", lpath_38 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$Void_LinuxPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_38_idx, arr_38_item in enumerate(pval):
                    arr_38_lpath: Path = ((lpath_38 if path is not None else None) + [ arr_38_idx ]) if (lpath_38 if path is not None else None) is not None else None
                    # .'$Void_LinuxPlatformModel'.versions.0
                    res = isinstance(arr_38_item, str) and arr_38_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$Void_LinuxPlatformModel'.versions.0]", arr_38_lpath if (lpath_38 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Void_LinuxPlatformModel'.versions]", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Void_LinuxPlatformModel'.versions]", lpath_38 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Void_LinuxPlatformModel']", lpath_38 if path is not None else None))
            return False
    return True

# check $Void_LinuxPlatformModel (.'$Void_LinuxPlatformModel')
def json_model_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Void_LinuxPlatformModel'
    res = _jm_obj_38(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Void_LinuxPlatformModel']", path))
    return res


# object .'$WindowsPlatformModel'
def _jm_obj_39(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$WindowsPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_39: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$WindowsPlatformModel'.name
            res = isinstance(pval, str) and pval == "Windows"
            if not res:
                rep is None or rep.append(("unexpected _Windows [.'$WindowsPlatformModel'.name]", lpath_39 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$WindowsPlatformModel'.name]", lpath_39 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$WindowsPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_39_idx, arr_39_item in enumerate(pval):
                    arr_39_lpath: Path = ((lpath_39 if path is not None else None) + [ arr_39_idx ]) if (lpath_39 if path is not None else None) is not None else None
                    # .'$WindowsPlatformModel'.versions.0
                    res = ((arr_39_item is None or isinstance(arr_39_item, (bool, int, float, str)))) and arr_39_item in _jm_cst_27
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$WindowsPlatformModel'.versions.0.'|']", arr_39_lpath if (lpath_39 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$WindowsPlatformModel'.versions]", lpath_39 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$WindowsPlatformModel'.versions]", lpath_39 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$WindowsPlatformModel']", lpath_39 if path is not None else None))
            return False
    return True

# check $WindowsPlatformModel (.'$WindowsPlatformModel')
def json_model_41(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$WindowsPlatformModel'
    res = _jm_obj_39(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$WindowsPlatformModel']", path))
    return res

# object .'$aosPlatformModel'
def _jm_obj_40(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$aosPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_40: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$aosPlatformModel'.name
            res = isinstance(pval, str) and pval == "aos"
            if not res:
                rep is None or rep.append(("unexpected _aos [.'$aosPlatformModel'.name]", lpath_40 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$aosPlatformModel'.name]", lpath_40 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$aosPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_40_idx, arr_40_item in enumerate(pval):
                    arr_40_lpath: Path = ((lpath_40 if path is not None else None) + [ arr_40_idx ]) if (lpath_40 if path is not None else None) is not None else None
                    # .'$aosPlatformModel'.versions.0
                    res = isinstance(arr_40_item, str) and arr_40_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$aosPlatformModel'.versions.0]", arr_40_lpath if (lpath_40 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$aosPlatformModel'.versions]", lpath_40 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$aosPlatformModel'.versions]", lpath_40 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$aosPlatformModel']", lpath_40 if path is not None else None))
            return False
    return True

# check $aosPlatformModel (.'$aosPlatformModel')
def json_model_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$aosPlatformModel'
    res = _jm_obj_40(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$aosPlatformModel']", path))
    return res

# object .'$eosPlatformModel'
def _jm_obj_41(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$eosPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_41: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$eosPlatformModel'.name
            res = isinstance(pval, str) and pval == "eos"
            if not res:
                rep is None or rep.append(("unexpected _eos [.'$eosPlatformModel'.name]", lpath_41 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$eosPlatformModel'.name]", lpath_41 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$eosPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_41_idx, arr_41_item in enumerate(pval):
                    arr_41_lpath: Path = ((lpath_41 if path is not None else None) + [ arr_41_idx ]) if (lpath_41 if path is not None else None) is not None else None
                    # .'$eosPlatformModel'.versions.0
                    res = isinstance(arr_41_item, str) and arr_41_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$eosPlatformModel'.versions.0]", arr_41_lpath if (lpath_41 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$eosPlatformModel'.versions]", lpath_41 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$eosPlatformModel'.versions]", lpath_41 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$eosPlatformModel']", lpath_41 if path is not None else None))
            return False
    return True

# check $eosPlatformModel (.'$eosPlatformModel')
def json_model_43(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$eosPlatformModel'
    res = _jm_obj_41(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$eosPlatformModel']", path))
    return res


# object .'$macOSPlatformModel'
def _jm_obj_42(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$macOSPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_42: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$macOSPlatformModel'.name
            res = isinstance(pval, str) and pval == "macOS"
            if not res:
                rep is None or rep.append(("unexpected _macOS [.'$macOSPlatformModel'.name]", lpath_42 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$macOSPlatformModel'.name]", lpath_42 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$macOSPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_42_idx, arr_42_item in enumerate(pval):
                    arr_42_lpath: Path = ((lpath_42 if path is not None else None) + [ arr_42_idx ]) if (lpath_42 if path is not None else None) is not None else None
                    # .'$macOSPlatformModel'.versions.0
                    res = ((arr_42_item is None or isinstance(arr_42_item, (bool, int, float, str)))) and arr_42_item in _jm_cst_28
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$macOSPlatformModel'.versions.0.'|']", arr_42_lpath if (lpath_42 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$macOSPlatformModel'.versions]", lpath_42 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$macOSPlatformModel'.versions]", lpath_42 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$macOSPlatformModel']", lpath_42 if path is not None else None))
            return False
    return True

# check $macOSPlatformModel (.'$macOSPlatformModel')
def json_model_44(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$macOSPlatformModel'
    res = _jm_obj_42(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$macOSPlatformModel']", path))
    return res


# object .'$opensusePlatformModel'
def _jm_obj_43(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$opensusePlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_43: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$opensusePlatformModel'.name
            res = isinstance(pval, str) and pval == "opensuse"
            if not res:
                rep is None or rep.append(("unexpected _opensuse [.'$opensusePlatformModel'.name]", lpath_43 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$opensusePlatformModel'.name]", lpath_43 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$opensusePlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_43_idx, arr_43_item in enumerate(pval):
                    arr_43_lpath: Path = ((lpath_43 if path is not None else None) + [ arr_43_idx ]) if (lpath_43 if path is not None else None) is not None else None
                    # .'$opensusePlatformModel'.versions.0
                    res = ((arr_43_item is None or isinstance(arr_43_item, (bool, int, float, str)))) and arr_43_item in _jm_cst_29
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$opensusePlatformModel'.versions.0.'|']", arr_43_lpath if (lpath_43 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$opensusePlatformModel'.versions]", lpath_43 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$opensusePlatformModel'.versions]", lpath_43 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$opensusePlatformModel']", lpath_43 if path is not None else None))
            return False
    return True

# check $opensusePlatformModel (.'$opensusePlatformModel')
def json_model_45(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$opensusePlatformModel'
    res = _jm_obj_43(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$opensusePlatformModel']", path))
    return res

# object .'$os10PlatformModel'
def _jm_obj_44(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$os10PlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_44: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$os10PlatformModel'.name
            res = isinstance(pval, str) and pval == "os10"
            if not res:
                rep is None or rep.append(("unexpected _os10 [.'$os10PlatformModel'.name]", lpath_44 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$os10PlatformModel'.name]", lpath_44 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$os10PlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_44_idx, arr_44_item in enumerate(pval):
                    arr_44_lpath: Path = ((lpath_44 if path is not None else None) + [ arr_44_idx ]) if (lpath_44 if path is not None else None) is not None else None
                    # .'$os10PlatformModel'.versions.0
                    res = isinstance(arr_44_item, str) and arr_44_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$os10PlatformModel'.versions.0]", arr_44_lpath if (lpath_44 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$os10PlatformModel'.versions]", lpath_44 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$os10PlatformModel'.versions]", lpath_44 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$os10PlatformModel']", lpath_44 if path is not None else None))
            return False
    return True

# check $os10PlatformModel (.'$os10PlatformModel')
def json_model_46(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$os10PlatformModel'
    res = _jm_obj_44(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$os10PlatformModel']", path))
    return res


# object .'$vCenterPlatformModel'
def _jm_obj_45(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$vCenterPlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_45: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$vCenterPlatformModel'.name
            res = isinstance(pval, str) and pval == "vCenter"
            if not res:
                rep is None or rep.append(("unexpected _vCenter [.'$vCenterPlatformModel'.name]", lpath_45 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$vCenterPlatformModel'.name]", lpath_45 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$vCenterPlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_45_idx, arr_45_item in enumerate(pval):
                    arr_45_lpath: Path = ((lpath_45 if path is not None else None) + [ arr_45_idx ]) if (lpath_45 if path is not None else None) is not None else None
                    # .'$vCenterPlatformModel'.versions.0
                    res = ((arr_45_item is None or isinstance(arr_45_item, (bool, int, float, str)))) and arr_45_item in _jm_cst_30
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$vCenterPlatformModel'.versions.0.'|']", arr_45_lpath if (lpath_45 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$vCenterPlatformModel'.versions]", lpath_45 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$vCenterPlatformModel'.versions]", lpath_45 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$vCenterPlatformModel']", lpath_45 if path is not None else None))
            return False
    return True

# check $vCenterPlatformModel (.'$vCenterPlatformModel')
def json_model_47(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$vCenterPlatformModel'
    res = _jm_obj_45(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$vCenterPlatformModel']", path))
    return res


# object .'$vSpherePlatformModel'
def _jm_obj_46(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$vSpherePlatformModel']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_46: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$vSpherePlatformModel'.name
            res = isinstance(pval, str) and pval == "vSphere"
            if not res:
                rep is None or rep.append(("unexpected _vSphere [.'$vSpherePlatformModel'.name]", lpath_46 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$vSpherePlatformModel'.name]", lpath_46 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$vSpherePlatformModel'.versions
            res = isinstance(pval, list)
            if res:
                for arr_46_idx, arr_46_item in enumerate(pval):
                    arr_46_lpath: Path = ((lpath_46 if path is not None else None) + [ arr_46_idx ]) if (lpath_46 if path is not None else None) is not None else None
                    # .'$vSpherePlatformModel'.versions.0
                    res = ((arr_46_item is None or isinstance(arr_46_item, (bool, int, float, str)))) and arr_46_item in _jm_cst_31
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$vSpherePlatformModel'.versions.0.'|']", arr_46_lpath if (lpath_46 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$vSpherePlatformModel'.versions]", lpath_46 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$vSpherePlatformModel'.versions]", lpath_46 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$vSpherePlatformModel']", lpath_46 if path is not None else None))
            return False
    return True

# check $vSpherePlatformModel (.'$vSpherePlatformModel')
def json_model_48(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$vSpherePlatformModel'
    res = _jm_obj_46(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$vSpherePlatformModel']", path))
    return res


# object .'$any_platform'.'|'.46
def _jm_obj_47(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.46]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_47: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.46.name
            res = isinstance(pval, str) and pval == "Windows"
            if not res:
                rep is None or rep.append(("unexpected _Windows [.'$any_platform'.'|'.46.name]", lpath_47 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.46.name]", lpath_47 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.46.versions
            res = isinstance(pval, list)
            if res:
                for arr_47_idx, arr_47_item in enumerate(pval):
                    arr_47_lpath: Path = ((lpath_47 if path is not None else None) + [ arr_47_idx ]) if (lpath_47 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.46.versions.0
                    res = ((arr_47_item is None or isinstance(arr_47_item, (bool, int, float, str)))) and arr_47_item in _jm_cst_32
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.46.versions.0.'|']", arr_47_lpath if (lpath_47 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.46.versions]", lpath_47 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.46.versions]", lpath_47 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.46]", lpath_47 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.45
def _jm_obj_48(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.45]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_48: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.45.name
            res = isinstance(pval, str) and pval == "vSphere"
            if not res:
                rep is None or rep.append(("unexpected _vSphere [.'$any_platform'.'|'.45.name]", lpath_48 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.45.name]", lpath_48 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.45.versions
            res = isinstance(pval, list)
            if res:
                for arr_48_idx, arr_48_item in enumerate(pval):
                    arr_48_lpath: Path = ((lpath_48 if path is not None else None) + [ arr_48_idx ]) if (lpath_48 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.45.versions.0
                    res = ((arr_48_item is None or isinstance(arr_48_item, (bool, int, float, str)))) and arr_48_item in _jm_cst_33
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.45.versions.0.'|']", arr_48_lpath if (lpath_48 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.45.versions]", lpath_48 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.45.versions]", lpath_48 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.45]", lpath_48 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.44
def _jm_obj_49(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.44]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_49: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.44.name
            res = isinstance(pval, str) and pval == "Void Linux"
            if not res:
                rep is None or rep.append(("unexpected _Void Linux [.'$any_platform'.'|'.44.name]", lpath_49 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.44.name]", lpath_49 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.44.versions
            res = isinstance(pval, list)
            if res:
                for arr_49_idx, arr_49_item in enumerate(pval):
                    arr_49_lpath: Path = ((lpath_49 if path is not None else None) + [ arr_49_idx ]) if (lpath_49 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.44.versions.0
                    res = isinstance(arr_49_item, str) and arr_49_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.44.versions.0]", arr_49_lpath if (lpath_49 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.44.versions]", lpath_49 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.44.versions]", lpath_49 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.44]", lpath_49 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.43
def _jm_obj_50(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.43]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_50: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.43.name
            res = isinstance(pval, str) and pval == "vCenter"
            if not res:
                rep is None or rep.append(("unexpected _vCenter [.'$any_platform'.'|'.43.name]", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.43.name]", lpath_50 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.43.versions
            res = isinstance(pval, list)
            if res:
                for arr_50_idx, arr_50_item in enumerate(pval):
                    arr_50_lpath: Path = ((lpath_50 if path is not None else None) + [ arr_50_idx ]) if (lpath_50 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.43.versions.0
                    res = ((arr_50_item is None or isinstance(arr_50_item, (bool, int, float, str)))) and arr_50_item in _jm_cst_34
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.43.versions.0.'|']", arr_50_lpath if (lpath_50 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.43.versions]", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.43.versions]", lpath_50 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.43]", lpath_50 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.42
def _jm_obj_51(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.42]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_51: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.42.name
            res = isinstance(pval, str) and pval == "Ubuntu"
            if not res:
                rep is None or rep.append(("unexpected _Ubuntu [.'$any_platform'.'|'.42.name]", lpath_51 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.42.name]", lpath_51 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.42.versions
            res = isinstance(pval, list)
            if res:
                for arr_51_idx, arr_51_item in enumerate(pval):
                    arr_51_lpath: Path = ((lpath_51 if path is not None else None) + [ arr_51_idx ]) if (lpath_51 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.42.versions.0
                    res = ((arr_51_item is None or isinstance(arr_51_item, (bool, int, float, str)))) and arr_51_item in _jm_cst_35
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.42.versions.0.'|']", arr_51_lpath if (lpath_51 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.42.versions]", lpath_51 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.42.versions]", lpath_51 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.42]", lpath_51 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.41
def _jm_obj_52(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.41]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_52: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.41.name
            res = isinstance(pval, str) and pval == "TMOS"
            if not res:
                rep is None or rep.append(("unexpected _TMOS [.'$any_platform'.'|'.41.name]", lpath_52 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.41.name]", lpath_52 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.41.versions
            res = isinstance(pval, list)
            if res:
                for arr_52_idx, arr_52_item in enumerate(pval):
                    arr_52_lpath: Path = ((lpath_52 if path is not None else None) + [ arr_52_idx ]) if (lpath_52 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.41.versions.0
                    res = ((arr_52_item is None or isinstance(arr_52_item, (bool, int, float, str)))) and arr_52_item in _jm_cst_36
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.41.versions.0.'|']", arr_52_lpath if (lpath_52 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.41.versions]", lpath_52 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.41.versions]", lpath_52 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.41]", lpath_52 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.40
def _jm_obj_53(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.40]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_53: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.40.name
            res = isinstance(pval, str) and pval == "Synology"
            if not res:
                rep is None or rep.append(("unexpected _Synology [.'$any_platform'.'|'.40.name]", lpath_53 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.40.name]", lpath_53 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.40.versions
            res = isinstance(pval, list)
            if res:
                for arr_53_idx, arr_53_item in enumerate(pval):
                    arr_53_lpath: Path = ((lpath_53 if path is not None else None) + [ arr_53_idx ]) if (lpath_53 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.40.versions.0
                    res = ((arr_53_item is None or isinstance(arr_53_item, (bool, int, float, str)))) and arr_53_item in _jm_cst_37
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.40.versions.0.'|']", arr_53_lpath if (lpath_53 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.40.versions]", lpath_53 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.40.versions]", lpath_53 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.40]", lpath_53 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.39
def _jm_obj_54(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.39]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_54: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.39.name
            res = isinstance(pval, str) and pval == "Solaris"
            if not res:
                rep is None or rep.append(("unexpected _Solaris [.'$any_platform'.'|'.39.name]", lpath_54 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.39.name]", lpath_54 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.39.versions
            res = isinstance(pval, list)
            if res:
                for arr_54_idx, arr_54_item in enumerate(pval):
                    arr_54_lpath: Path = ((lpath_54 if path is not None else None) + [ arr_54_idx ]) if (lpath_54 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.39.versions.0
                    res = ((arr_54_item is None or isinstance(arr_54_item, (bool, int, float, str)))) and arr_54_item in _jm_cst_38
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.39.versions.0.'|']", arr_54_lpath if (lpath_54 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.39.versions]", lpath_54 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.39.versions]", lpath_54 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.39]", lpath_54 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.38
def _jm_obj_55(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.38]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_55: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.38.name
            res = isinstance(pval, str) and pval == "SmartOS"
            if not res:
                rep is None or rep.append(("unexpected _SmartOS [.'$any_platform'.'|'.38.name]", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.38.name]", lpath_55 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.38.versions
            res = isinstance(pval, list)
            if res:
                for arr_55_idx, arr_55_item in enumerate(pval):
                    arr_55_lpath: Path = ((lpath_55 if path is not None else None) + [ arr_55_idx ]) if (lpath_55 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.38.versions.0
                    res = isinstance(arr_55_item, str) and arr_55_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.38.versions.0]", arr_55_lpath if (lpath_55 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.38.versions]", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.38.versions]", lpath_55 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.38]", lpath_55 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.37
def _jm_obj_56(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.37]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_56: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.37.name
            res = isinstance(pval, str) and pval == "SLES"
            if not res:
                rep is None or rep.append(("unexpected _SLES [.'$any_platform'.'|'.37.name]", lpath_56 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.37.name]", lpath_56 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.37.versions
            res = isinstance(pval, list)
            if res:
                for arr_56_idx, arr_56_item in enumerate(pval):
                    arr_56_lpath: Path = ((lpath_56 if path is not None else None) + [ arr_56_idx ]) if (lpath_56 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.37.versions.0
                    res = ((arr_56_item is None or isinstance(arr_56_item, (bool, int, float, str)))) and arr_56_item in _jm_cst_39
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.37.versions.0.'|']", arr_56_lpath if (lpath_56 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.37.versions]", lpath_56 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.37.versions]", lpath_56 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.37]", lpath_56 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.36
def _jm_obj_57(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.36]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_57: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.36.name
            res = isinstance(pval, str) and pval == "Rocky"
            if not res:
                rep is None or rep.append(("unexpected _Rocky [.'$any_platform'.'|'.36.name]", lpath_57 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.36.name]", lpath_57 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.36.versions
            res = isinstance(pval, list)
            if res:
                for arr_57_idx, arr_57_item in enumerate(pval):
                    arr_57_lpath: Path = ((lpath_57 if path is not None else None) + [ arr_57_idx ]) if (lpath_57 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.36.versions.0
                    res = ((arr_57_item is None or isinstance(arr_57_item, (bool, int, float, str)))) and arr_57_item in _jm_cst_40
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.36.versions.0.'|']", arr_57_lpath if (lpath_57 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.36.versions]", lpath_57 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.36.versions]", lpath_57 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.36]", lpath_57 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.35
def _jm_obj_58(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.35]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_58: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.35.name
            res = isinstance(pval, str) and pval == "PAN-OS"
            if not res:
                rep is None or rep.append(("unexpected _PAN-OS [.'$any_platform'.'|'.35.name]", lpath_58 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.35.name]", lpath_58 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.35.versions
            res = isinstance(pval, list)
            if res:
                for arr_58_idx, arr_58_item in enumerate(pval):
                    arr_58_lpath: Path = ((lpath_58 if path is not None else None) + [ arr_58_idx ]) if (lpath_58 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.35.versions.0
                    res = ((arr_58_item is None or isinstance(arr_58_item, (bool, int, float, str)))) and arr_58_item in _jm_cst_41
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.35.versions.0.'|']", arr_58_lpath if (lpath_58 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.35.versions]", lpath_58 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.35.versions]", lpath_58 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.35]", lpath_58 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.34
def _jm_obj_59(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.34]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_59: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.34.name
            res = isinstance(pval, str) and pval == "os10"
            if not res:
                rep is None or rep.append(("unexpected _os10 [.'$any_platform'.'|'.34.name]", lpath_59 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.34.name]", lpath_59 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.34.versions
            res = isinstance(pval, list)
            if res:
                for arr_59_idx, arr_59_item in enumerate(pval):
                    arr_59_lpath: Path = ((lpath_59 if path is not None else None) + [ arr_59_idx ]) if (lpath_59 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.34.versions.0
                    res = isinstance(arr_59_item, str) and arr_59_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.34.versions.0]", arr_59_lpath if (lpath_59 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.34.versions]", lpath_59 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.34.versions]", lpath_59 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.34]", lpath_59 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.33
def _jm_obj_60(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.33]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_60: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.33.name
            res = isinstance(pval, str) and pval == "OracleLinux"
            if not res:
                rep is None or rep.append(("unexpected _OracleLinux [.'$any_platform'.'|'.33.name]", lpath_60 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.33.name]", lpath_60 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.33.versions
            res = isinstance(pval, list)
            if res:
                for arr_60_idx, arr_60_item in enumerate(pval):
                    arr_60_lpath: Path = ((lpath_60 if path is not None else None) + [ arr_60_idx ]) if (lpath_60 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.33.versions.0
                    res = ((arr_60_item is None or isinstance(arr_60_item, (bool, int, float, str)))) and arr_60_item in _jm_cst_42
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.33.versions.0.'|']", arr_60_lpath if (lpath_60 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.33.versions]", lpath_60 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.33.versions]", lpath_60 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.33]", lpath_60 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.32
def _jm_obj_61(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.32]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_61: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.32.name
            res = isinstance(pval, str) and pval == "OpenWrt"
            if not res:
                rep is None or rep.append(("unexpected _OpenWrt [.'$any_platform'.'|'.32.name]", lpath_61 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.32.name]", lpath_61 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.32.versions
            res = isinstance(pval, list)
            if res:
                for arr_61_idx, arr_61_item in enumerate(pval):
                    arr_61_lpath: Path = ((lpath_61 if path is not None else None) + [ arr_61_idx ]) if (lpath_61 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.32.versions.0
                    res = ((arr_61_item is None or isinstance(arr_61_item, (bool, int, float, str)))) and arr_61_item in _jm_cst_43
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.32.versions.0.'|']", arr_61_lpath if (lpath_61 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.32.versions]", lpath_61 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.32.versions]", lpath_61 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.32]", lpath_61 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.31
def _jm_obj_62(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.31]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_62: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.31.name
            res = isinstance(pval, str) and pval == "opensuse"
            if not res:
                rep is None or rep.append(("unexpected _opensuse [.'$any_platform'.'|'.31.name]", lpath_62 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.31.name]", lpath_62 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.31.versions
            res = isinstance(pval, list)
            if res:
                for arr_62_idx, arr_62_item in enumerate(pval):
                    arr_62_lpath: Path = ((lpath_62 if path is not None else None) + [ arr_62_idx ]) if (lpath_62 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.31.versions.0
                    res = ((arr_62_item is None or isinstance(arr_62_item, (bool, int, float, str)))) and arr_62_item in _jm_cst_44
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.31.versions.0.'|']", arr_62_lpath if (lpath_62 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.31.versions]", lpath_62 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.31.versions]", lpath_62 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.31]", lpath_62 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.30
def _jm_obj_63(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.30]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_63: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.30.name
            res = isinstance(pval, str) and pval == "OpenBSD"
            if not res:
                rep is None or rep.append(("unexpected _OpenBSD [.'$any_platform'.'|'.30.name]", lpath_63 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.30.name]", lpath_63 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.30.versions
            res = isinstance(pval, list)
            if res:
                for arr_63_idx, arr_63_item in enumerate(pval):
                    arr_63_lpath: Path = ((lpath_63 if path is not None else None) + [ arr_63_idx ]) if (lpath_63 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.30.versions.0
                    res = ((arr_63_item is None or isinstance(arr_63_item, (bool, int, float, str)))) and arr_63_item in _jm_cst_45
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.30.versions.0.'|']", arr_63_lpath if (lpath_63 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.30.versions]", lpath_63 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.30.versions]", lpath_63 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.30]", lpath_63 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.29
def _jm_obj_64(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.29]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_64: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.29.name
            res = isinstance(pval, str) and pval == "NXOS"
            if not res:
                rep is None or rep.append(("unexpected _NXOS [.'$any_platform'.'|'.29.name]", lpath_64 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.29.name]", lpath_64 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.29.versions
            res = isinstance(pval, list)
            if res:
                for arr_64_idx, arr_64_item in enumerate(pval):
                    arr_64_lpath: Path = ((lpath_64 if path is not None else None) + [ arr_64_idx ]) if (lpath_64 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.29.versions.0
                    res = isinstance(arr_64_item, str) and arr_64_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.29.versions.0]", arr_64_lpath if (lpath_64 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.29.versions]", lpath_64 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.29.versions]", lpath_64 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.29]", lpath_64 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.28
def _jm_obj_65(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.28]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_65: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.28.name
            res = isinstance(pval, str) and pval == "Megeia"
            if not res:
                rep is None or rep.append(("unexpected _Megeia [.'$any_platform'.'|'.28.name]", lpath_65 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.28.name]", lpath_65 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.28.versions
            res = isinstance(pval, list)
            if res:
                for arr_65_idx, arr_65_item in enumerate(pval):
                    arr_65_lpath: Path = ((lpath_65 if path is not None else None) + [ arr_65_idx ]) if (lpath_65 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.28.versions.0
                    res = ((arr_65_item is None or isinstance(arr_65_item, (bool, int, float, str)))) and arr_65_item in _jm_cst_46
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.28.versions.0.'|']", arr_65_lpath if (lpath_65 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.28.versions]", lpath_65 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.28.versions]", lpath_65 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.28]", lpath_65 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.27
def _jm_obj_66(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.27]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_66: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.27.name
            res = isinstance(pval, str) and pval == "Kali"
            if not res:
                rep is None or rep.append(("unexpected _Kali [.'$any_platform'.'|'.27.name]", lpath_66 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.27.name]", lpath_66 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.27.versions
            res = isinstance(pval, list)
            if res:
                for arr_66_idx, arr_66_item in enumerate(pval):
                    arr_66_lpath: Path = ((lpath_66 if path is not None else None) + [ arr_66_idx ]) if (lpath_66 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.27.versions.0
                    res = ((arr_66_item is None or isinstance(arr_66_item, (bool, int, float, str)))) and arr_66_item in _jm_cst_47
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.27.versions.0.'|']", arr_66_lpath if (lpath_66 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.27.versions]", lpath_66 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.27.versions]", lpath_66 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.27]", lpath_66 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.26
def _jm_obj_67(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.26]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_67: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.26.name
            res = isinstance(pval, str) and pval == "macOS"
            if not res:
                rep is None or rep.append(("unexpected _macOS [.'$any_platform'.'|'.26.name]", lpath_67 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.26.name]", lpath_67 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.26.versions
            res = isinstance(pval, list)
            if res:
                for arr_67_idx, arr_67_item in enumerate(pval):
                    arr_67_lpath: Path = ((lpath_67 if path is not None else None) + [ arr_67_idx ]) if (lpath_67 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.26.versions.0
                    res = ((arr_67_item is None or isinstance(arr_67_item, (bool, int, float, str)))) and arr_67_item in _jm_cst_48
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.26.versions.0.'|']", arr_67_lpath if (lpath_67 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.26.versions]", lpath_67 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.26.versions]", lpath_67 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.26]", lpath_67 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.25
def _jm_obj_68(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.25]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_68: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.25.name
            res = isinstance(pval, str) and pval == "Kali"
            if not res:
                rep is None or rep.append(("unexpected _Kali [.'$any_platform'.'|'.25.name]", lpath_68 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.25.name]", lpath_68 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.25.versions
            res = isinstance(pval, list)
            if res:
                for arr_68_idx, arr_68_item in enumerate(pval):
                    arr_68_lpath: Path = ((lpath_68 if path is not None else None) + [ arr_68_idx ]) if (lpath_68 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.25.versions.0
                    res = ((arr_68_item is None or isinstance(arr_68_item, (bool, int, float, str)))) and arr_68_item in _jm_cst_49
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.25.versions.0.'|']", arr_68_lpath if (lpath_68 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.25.versions]", lpath_68 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.25.versions]", lpath_68 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.25]", lpath_68 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.24
def _jm_obj_69(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.24]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_69: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.24.name
            res = isinstance(pval, str) and pval == "Junos"
            if not res:
                rep is None or rep.append(("unexpected _Junos [.'$any_platform'.'|'.24.name]", lpath_69 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.24.name]", lpath_69 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.24.versions
            res = isinstance(pval, list)
            if res:
                for arr_69_idx, arr_69_item in enumerate(pval):
                    arr_69_lpath: Path = ((lpath_69 if path is not None else None) + [ arr_69_idx ]) if (lpath_69 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.24.versions.0
                    res = isinstance(arr_69_item, str) and arr_69_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.24.versions.0]", arr_69_lpath if (lpath_69 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.24.versions]", lpath_69 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.24.versions]", lpath_69 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.24]", lpath_69 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.23
def _jm_obj_70(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.23]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_70: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.23.name
            res = isinstance(pval, str) and pval == "IOS"
            if not res:
                rep is None or rep.append(("unexpected _IOS [.'$any_platform'.'|'.23.name]", lpath_70 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.23.name]", lpath_70 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.23.versions
            res = isinstance(pval, list)
            if res:
                for arr_70_idx, arr_70_item in enumerate(pval):
                    arr_70_lpath: Path = ((lpath_70 if path is not None else None) + [ arr_70_idx ]) if (lpath_70 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.23.versions.0
                    res = isinstance(arr_70_item, str) and arr_70_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.23.versions.0]", arr_70_lpath if (lpath_70 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.23.versions]", lpath_70 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.23.versions]", lpath_70 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.23]", lpath_70 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.22
def _jm_obj_71(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.22]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_71: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.22.name
            res = isinstance(pval, str) and pval == "HardenedBSD"
            if not res:
                rep is None or rep.append(("unexpected _HardenedBSD [.'$any_platform'.'|'.22.name]", lpath_71 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.22.name]", lpath_71 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.22.versions
            res = isinstance(pval, list)
            if res:
                for arr_71_idx, arr_71_item in enumerate(pval):
                    arr_71_lpath: Path = ((lpath_71 if path is not None else None) + [ arr_71_idx ]) if (lpath_71 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.22.versions.0
                    res = ((arr_71_item is None or isinstance(arr_71_item, (bool, int, float, str)))) and arr_71_item in _jm_cst_50
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.22.versions.0.'|']", arr_71_lpath if (lpath_71 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.22.versions]", lpath_71 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.22.versions]", lpath_71 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.22]", lpath_71 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.21
def _jm_obj_72(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.21]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_72: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.21.name
            res = isinstance(pval, str) and pval == "Gentoo"
            if not res:
                rep is None or rep.append(("unexpected _Gentoo [.'$any_platform'.'|'.21.name]", lpath_72 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.21.name]", lpath_72 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.21.versions
            res = isinstance(pval, list)
            if res:
                for arr_72_idx, arr_72_item in enumerate(pval):
                    arr_72_lpath: Path = ((lpath_72 if path is not None else None) + [ arr_72_idx ]) if (lpath_72 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.21.versions.0
                    res = isinstance(arr_72_item, str) and arr_72_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.21.versions.0]", arr_72_lpath if (lpath_72 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.21.versions]", lpath_72 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.21.versions]", lpath_72 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.21]", lpath_72 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.20
def _jm_obj_73(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.20]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_73: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.20.name
            res = isinstance(pval, str) and pval == "GenericUNIX"
            if not res:
                rep is None or rep.append(("unexpected _GenericUNIX [.'$any_platform'.'|'.20.name]", lpath_73 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.20.name]", lpath_73 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.20.versions
            res = isinstance(pval, list)
            if res:
                for arr_73_idx, arr_73_item in enumerate(pval):
                    arr_73_lpath: Path = ((lpath_73 if path is not None else None) + [ arr_73_idx ]) if (lpath_73 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.20.versions.0
                    res = isinstance(arr_73_item, str) and arr_73_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.20.versions.0]", arr_73_lpath if (lpath_73 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.20.versions]", lpath_73 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.20.versions]", lpath_73 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.20]", lpath_73 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.19
def _jm_obj_74(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.19]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_74: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.19.name
            res = isinstance(pval, str) and pval == "GenericLinux"
            if not res:
                rep is None or rep.append(("unexpected _GenericLinux [.'$any_platform'.'|'.19.name]", lpath_74 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.19.name]", lpath_74 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.19.versions
            res = isinstance(pval, list)
            if res:
                for arr_74_idx, arr_74_item in enumerate(pval):
                    arr_74_lpath: Path = ((lpath_74 if path is not None else None) + [ arr_74_idx ]) if (lpath_74 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.19.versions.0
                    res = isinstance(arr_74_item, str) and arr_74_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.19.versions.0]", arr_74_lpath if (lpath_74 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.19.versions]", lpath_74 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.19.versions]", lpath_74 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.19]", lpath_74 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.18
def _jm_obj_75(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.18]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_75: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.18.name
            res = isinstance(pval, str) and pval == "GenericBSD"
            if not res:
                rep is None or rep.append(("unexpected _GenericBSD [.'$any_platform'.'|'.18.name]", lpath_75 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.18.name]", lpath_75 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.18.versions
            res = isinstance(pval, list)
            if res:
                for arr_75_idx, arr_75_item in enumerate(pval):
                    arr_75_lpath: Path = ((lpath_75 if path is not None else None) + [ arr_75_idx ]) if (lpath_75 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.18.versions.0
                    res = isinstance(arr_75_item, str) and arr_75_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.18.versions.0]", arr_75_lpath if (lpath_75 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.18.versions]", lpath_75 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.18.versions]", lpath_75 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.18]", lpath_75 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.17
def _jm_obj_76(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.17]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_76: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.17.name
            res = isinstance(pval, str) and pval == "FreeBSD"
            if not res:
                rep is None or rep.append(("unexpected _FreeBSD [.'$any_platform'.'|'.17.name]", lpath_76 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.17.name]", lpath_76 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.17.versions
            res = isinstance(pval, list)
            if res:
                for arr_76_idx, arr_76_item in enumerate(pval):
                    arr_76_lpath: Path = ((lpath_76 if path is not None else None) + [ arr_76_idx ]) if (lpath_76 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.17.versions.0
                    res = ((arr_76_item is None or isinstance(arr_76_item, (bool, int, float, str)))) and arr_76_item in _jm_cst_51
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.17.versions.0.'|']", arr_76_lpath if (lpath_76 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.17.versions]", lpath_76 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.17.versions]", lpath_76 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.17]", lpath_76 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.16
def _jm_obj_77(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.16]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_77: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.16.name
            res = isinstance(pval, str) and (pval == "Fedora")
            if not res:
                rep is None or rep.append(("unexpected _Fedora [.'$any_platform'.'|'.16.name]", lpath_77 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.16.name]", lpath_77 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.16.versions
            res = isinstance(pval, list)
            if res:
                for arr_77_idx, arr_77_item in enumerate(pval):
                    arr_77_lpath: Path = ((lpath_77 if path is not None else None) + [ arr_77_idx ]) if (lpath_77 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.16.versions.0
                    res = ((arr_77_item is None or isinstance(arr_77_item, (bool, int, float, str)))) and arr_77_item in _jm_cst_52
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.16.versions.0.'|']", arr_77_lpath if (lpath_77 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.16.versions]", lpath_77 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.16.versions]", lpath_77 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.16]", lpath_77 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.15
def _jm_obj_78(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.15]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_78: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.15.name
            res = isinstance(pval, str) and pval == "eos"
            if not res:
                rep is None or rep.append(("unexpected _eos [.'$any_platform'.'|'.15.name]", lpath_78 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.15.name]", lpath_78 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.15.versions
            res = isinstance(pval, list)
            if res:
                for arr_78_idx, arr_78_item in enumerate(pval):
                    arr_78_lpath: Path = ((lpath_78 if path is not None else None) + [ arr_78_idx ]) if (lpath_78 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.15.versions.0
                    res = isinstance(arr_78_item, str) and arr_78_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.15.versions.0]", arr_78_lpath if (lpath_78 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.15.versions]", lpath_78 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.15.versions]", lpath_78 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.15]", lpath_78 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.14
def _jm_obj_79(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.14]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_79: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.14.name
            res = isinstance(pval, str) and pval == "EL"
            if not res:
                rep is None or rep.append(("unexpected _EL [.'$any_platform'.'|'.14.name]", lpath_79 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.14.name]", lpath_79 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.14.versions
            res = isinstance(pval, list)
            if res:
                for arr_79_idx, arr_79_item in enumerate(pval):
                    arr_79_lpath: Path = ((lpath_79 if path is not None else None) + [ arr_79_idx ]) if (lpath_79 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.14.versions.0
                    res = ((arr_79_item is None or isinstance(arr_79_item, (bool, int, float, str)))) and arr_79_item in _jm_cst_53
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.14.versions.0.'|']", arr_79_lpath if (lpath_79 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.14.versions]", lpath_79 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.14.versions]", lpath_79 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.14]", lpath_79 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.13
def _jm_obj_80(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.13]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_80: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.13.name
            res = isinstance(pval, str) and pval == "DragonFlyBSD"
            if not res:
                rep is None or rep.append(("unexpected _DragonFlyBSD [.'$any_platform'.'|'.13.name]", lpath_80 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.13.name]", lpath_80 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.13.versions
            res = isinstance(pval, list)
            if res:
                for arr_80_idx, arr_80_item in enumerate(pval):
                    arr_80_lpath: Path = ((lpath_80 if path is not None else None) + [ arr_80_idx ]) if (lpath_80 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.13.versions.0
                    res = ((arr_80_item is None or isinstance(arr_80_item, (bool, int, float, str)))) and arr_80_item in _jm_cst_54
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.13.versions.0.'|']", arr_80_lpath if (lpath_80 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.13.versions]", lpath_80 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.13.versions]", lpath_80 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.13]", lpath_80 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.12
def _jm_obj_81(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.12]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_81: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.12.name
            res = isinstance(pval, str) and pval == "Devuan"
            if not res:
                rep is None or rep.append(("unexpected _Devuan [.'$any_platform'.'|'.12.name]", lpath_81 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.12.name]", lpath_81 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.12.versions
            res = isinstance(pval, list)
            if res:
                for arr_81_idx, arr_81_item in enumerate(pval):
                    arr_81_lpath: Path = ((lpath_81 if path is not None else None) + [ arr_81_idx ]) if (lpath_81 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.12.versions.0
                    res = ((arr_81_item is None or isinstance(arr_81_item, (bool, int, float, str)))) and arr_81_item in _jm_cst_55
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.12.versions.0.'|']", arr_81_lpath if (lpath_81 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.12.versions]", lpath_81 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.12.versions]", lpath_81 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.12]", lpath_81 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.11
def _jm_obj_82(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.11]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_82: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.11.name
            res = isinstance(pval, str) and pval == "DellOS"
            if not res:
                rep is None or rep.append(("unexpected _DellOS [.'$any_platform'.'|'.11.name]", lpath_82 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.11.name]", lpath_82 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.11.versions
            res = isinstance(pval, list)
            if res:
                for arr_82_idx, arr_82_item in enumerate(pval):
                    arr_82_lpath: Path = ((lpath_82 if path is not None else None) + [ arr_82_idx ]) if (lpath_82 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.11.versions.0
                    res = ((arr_82_item is None or isinstance(arr_82_item, (bool, int, float, str)))) and arr_82_item in _jm_cst_56
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.11.versions.0.'|']", arr_82_lpath if (lpath_82 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.11.versions]", lpath_82 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.11.versions]", lpath_82 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.11]", lpath_82 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.10
def _jm_obj_83(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.10]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_83: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.10.name
            res = isinstance(pval, str) and pval == "Debian"
            if not res:
                rep is None or rep.append(("unexpected _Debian [.'$any_platform'.'|'.10.name]", lpath_83 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.10.name]", lpath_83 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.10.versions
            res = isinstance(pval, list)
            if res:
                for arr_83_idx, arr_83_item in enumerate(pval):
                    arr_83_lpath: Path = ((lpath_83 if path is not None else None) + [ arr_83_idx ]) if (lpath_83 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.10.versions.0
                    res = ((arr_83_item is None or isinstance(arr_83_item, (bool, int, float, str)))) and arr_83_item in _jm_cst_57
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.10.versions.0.'|']", arr_83_lpath if (lpath_83 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.10.versions]", lpath_83 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.10.versions]", lpath_83 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.10]", lpath_83 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.9
def _jm_obj_84(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.9]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_84: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.9.name
            res = isinstance(pval, str) and pval == "NetBSD"
            if not res:
                rep is None or rep.append(("unexpected _NetBSD [.'$any_platform'.'|'.9.name]", lpath_84 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.9.name]", lpath_84 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.9.versions
            res = isinstance(pval, list)
            if res:
                for arr_84_idx, arr_84_item in enumerate(pval):
                    arr_84_lpath: Path = ((lpath_84 if path is not None else None) + [ arr_84_idx ]) if (lpath_84 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.9.versions.0
                    res = ((arr_84_item is None or isinstance(arr_84_item, (bool, int, float, str)))) and arr_84_item in _jm_cst_58
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.9.versions.0.'|']", arr_84_lpath if (lpath_84 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.9.versions]", lpath_84 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.9.versions]", lpath_84 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.9]", lpath_84 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.8
def _jm_obj_85(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.8]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_85: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.8.name
            res = isinstance(pval, str) and pval == "Cumulus"
            if not res:
                rep is None or rep.append(("unexpected _Cumulus [.'$any_platform'.'|'.8.name]", lpath_85 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.8.name]", lpath_85 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.8.versions
            res = isinstance(pval, list)
            if res:
                for arr_85_idx, arr_85_item in enumerate(pval):
                    arr_85_lpath: Path = ((lpath_85 if path is not None else None) + [ arr_85_idx ]) if (lpath_85 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.8.versions.0
                    res = ((arr_85_item is None or isinstance(arr_85_item, (bool, int, float, str)))) and arr_85_item in _jm_cst_59
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.8.versions.0.'|']", arr_85_lpath if (lpath_85 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.8.versions]", lpath_85 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.8.versions]", lpath_85 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.8]", lpath_85 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.7
def _jm_obj_86(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.7]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_86: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.7.name
            res = isinstance(pval, str) and pval == "ClearLinux"
            if not res:
                rep is None or rep.append(("unexpected _ClearLinux [.'$any_platform'.'|'.7.name]", lpath_86 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.7.name]", lpath_86 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.7.versions
            res = isinstance(pval, list)
            if res:
                for arr_86_idx, arr_86_item in enumerate(pval):
                    arr_86_lpath: Path = ((lpath_86 if path is not None else None) + [ arr_86_idx ]) if (lpath_86 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.7.versions.0
                    res = isinstance(arr_86_item, str) and arr_86_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.7.versions.0]", arr_86_lpath if (lpath_86 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.7.versions]", lpath_86 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.7.versions]", lpath_86 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.7]", lpath_86 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.6
def _jm_obj_87(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.6]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_87: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.6.name
            res = isinstance(pval, str) and pval == "Astra Linux"
            if not res:
                rep is None or rep.append(("unexpected _Astra Linux [.'$any_platform'.'|'.6.name]", lpath_87 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.6.name]", lpath_87 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.6.versions
            res = isinstance(pval, list)
            if res:
                for arr_87_idx, arr_87_item in enumerate(pval):
                    arr_87_lpath: Path = ((lpath_87 if path is not None else None) + [ arr_87_idx ]) if (lpath_87 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.6.versions.0
                    res = ((arr_87_item is None or isinstance(arr_87_item, (bool, int, float, str)))) and arr_87_item in _jm_cst_60
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.6.versions.0.'|']", arr_87_lpath if (lpath_87 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.6.versions]", lpath_87 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.6.versions]", lpath_87 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.6]", lpath_87 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.5
def _jm_obj_88(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_88: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.5.name
            res = isinstance(pval, str) and pval == "ArchLinux"
            if not res:
                rep is None or rep.append(("unexpected _ArchLinux [.'$any_platform'.'|'.5.name]", lpath_88 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.5.name]", lpath_88 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.5.versions
            res = isinstance(pval, list)
            if res:
                for arr_88_idx, arr_88_item in enumerate(pval):
                    arr_88_lpath: Path = ((lpath_88 if path is not None else None) + [ arr_88_idx ]) if (lpath_88 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.5.versions.0
                    res = isinstance(arr_88_item, str) and arr_88_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.5.versions.0]", arr_88_lpath if (lpath_88 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.5.versions]", lpath_88 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.5.versions]", lpath_88 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.5]", lpath_88 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.4
def _jm_obj_89(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.4]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_89: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.4.name
            res = isinstance(pval, str) and pval == "aos"
            if not res:
                rep is None or rep.append(("unexpected _aos [.'$any_platform'.'|'.4.name]", lpath_89 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.4.name]", lpath_89 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.4.versions
            res = isinstance(pval, list)
            if res:
                for arr_89_idx, arr_89_item in enumerate(pval):
                    arr_89_lpath: Path = ((lpath_89 if path is not None else None) + [ arr_89_idx ]) if (lpath_89 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.4.versions.0
                    res = isinstance(arr_89_item, str) and arr_89_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.4.versions.0]", arr_89_lpath if (lpath_89 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.4.versions]", lpath_89 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.4.versions]", lpath_89 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.4]", lpath_89 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.3
def _jm_obj_90(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.3]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_90: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.3.name
            res = isinstance(pval, str) and pval == "Amazon Linux"
            if not res:
                rep is None or rep.append(("unexpected _Amazon Linux [.'$any_platform'.'|'.3.name]", lpath_90 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.3.name]", lpath_90 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.3.versions
            res = isinstance(pval, list)
            if res:
                for arr_90_idx, arr_90_item in enumerate(pval):
                    arr_90_lpath: Path = ((lpath_90 if path is not None else None) + [ arr_90_idx ]) if (lpath_90 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.3.versions.0
                    res = ((arr_90_item is None or isinstance(arr_90_item, (bool, int, float, str)))) and arr_90_item in _jm_cst_61
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.3.versions.0.'|']", arr_90_lpath if (lpath_90 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.3.versions]", lpath_90 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.3.versions]", lpath_90 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.3]", lpath_90 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.2
def _jm_obj_91(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.2]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_91: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.2.name
            res = isinstance(pval, str) and pval == "Amazon"
            if not res:
                rep is None or rep.append(("unexpected _Amazon [.'$any_platform'.'|'.2.name]", lpath_91 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.2.name]", lpath_91 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.2.versions
            res = isinstance(pval, list)
            if res:
                for arr_91_idx, arr_91_item in enumerate(pval):
                    arr_91_lpath: Path = ((lpath_91 if path is not None else None) + [ arr_91_idx ]) if (lpath_91 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.2.versions.0
                    res = ((arr_91_item is None or isinstance(arr_91_item, (bool, int, float, str)))) and arr_91_item in _jm_cst_62
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.2.versions.0.'|']", arr_91_lpath if (lpath_91 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.2.versions]", lpath_91 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.2.versions]", lpath_91 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.2]", lpath_91 if path is not None else None))
            return False
    return True

# object .'$any_platform'.'|'.1
def _jm_obj_92(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_92: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.1.name
            res = isinstance(pval, str) and pval == "Alpine"
            if not res:
                rep is None or rep.append(("unexpected _Alpine [.'$any_platform'.'|'.1.name]", lpath_92 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.1.name]", lpath_92 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.1.versions
            res = isinstance(pval, list)
            if res:
                for arr_92_idx, arr_92_item in enumerate(pval):
                    arr_92_lpath: Path = ((lpath_92 if path is not None else None) + [ arr_92_idx ]) if (lpath_92 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.1.versions.0
                    res = isinstance(arr_92_item, str) and arr_92_item == "all"
                    if not res:
                        rep is None or rep.append(("unexpected all [.'$any_platform'.'|'.1.versions.0]", arr_92_lpath if (lpath_92 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.1.versions]", lpath_92 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.1.versions]", lpath_92 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.1]", lpath_92 if path is not None else None))
            return False
    return True


# object .'$any_platform'.'|'.0
def _jm_obj_93(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$any_platform'.'|'.0]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_93: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$any_platform'.'|'.0.name
            res = isinstance(pval, str) and pval == "AIX"
            if not res:
                rep is None or rep.append(("unexpected _AIX [.'$any_platform'.'|'.0.name]", lpath_93 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.0.name]", lpath_93 if path is not None else None))
                return False
        elif prop == "versions":
            # handle may versions property
            # .'$any_platform'.'|'.0.versions
            res = isinstance(pval, list)
            if res:
                for arr_93_idx, arr_93_item in enumerate(pval):
                    arr_93_lpath: Path = ((lpath_93 if path is not None else None) + [ arr_93_idx ]) if (lpath_93 if path is not None else None) is not None else None
                    # .'$any_platform'.'|'.0.versions.0
                    res = ((arr_93_item is None or isinstance(arr_93_item, (bool, int, float, str)))) and arr_93_item in _jm_cst_63
                    if not res:
                        rep is None or rep.append(("value not in enum [.'$any_platform'.'|'.0.versions.0.'|']", arr_93_lpath if (lpath_93 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$any_platform'.'|'.0.versions]", lpath_93 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$any_platform'.'|'.0.versions]", lpath_93 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$any_platform'.'|'.0]", lpath_93 if path is not None else None))
            return False
    return True

# check $any_platform (.'$any_platform')
def json_model_49(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # FIXME: name is not mandatory, not sure it makes much sense… versions should be unique?
    # .'$any_platform'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$any_platform'.'|']", path))
    if res:
        # .'$any_platform'.'|'.0
        res = _jm_obj_93(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.0]", path))
        if not res:
            # .'$any_platform'.'|'.1
            res = _jm_obj_92(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.1]", path))
            if not res:
                # .'$any_platform'.'|'.2
                res = _jm_obj_91(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.2]", path))
                if not res:
                    # .'$any_platform'.'|'.3
                    res = _jm_obj_90(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.3]", path))
                    if not res:
                        # .'$any_platform'.'|'.4
                        res = _jm_obj_89(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.4]", path))
                        if not res:
                            # .'$any_platform'.'|'.5
                            res = _jm_obj_88(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.5]", path))
                            if not res:
                                # .'$any_platform'.'|'.6
                                res = _jm_obj_87(val, path, rep)
                                if not res:
                                    rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.6]", path))
                                if not res:
                                    # .'$any_platform'.'|'.7
                                    res = _jm_obj_86(val, path, rep)
                                    if not res:
                                        rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.7]", path))
                                    if not res:
                                        # .'$any_platform'.'|'.8
                                        res = _jm_obj_85(val, path, rep)
                                        if not res:
                                            rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.8]", path))
                                        if not res:
                                            # .'$any_platform'.'|'.9
                                            res = _jm_obj_84(val, path, rep)
                                            if not res:
                                                rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.9]", path))
                                            if not res:
                                                # .'$any_platform'.'|'.10
                                                res = _jm_obj_83(val, path, rep)
                                                if not res:
                                                    rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.10]", path))
                                                if not res:
                                                    # .'$any_platform'.'|'.11
                                                    res = _jm_obj_82(val, path, rep)
                                                    if not res:
                                                        rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.11]", path))
                                                    if not res:
                                                        # .'$any_platform'.'|'.12
                                                        res = _jm_obj_81(val, path, rep)
                                                        if not res:
                                                            rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.12]", path))
                                                        if not res:
                                                            # .'$any_platform'.'|'.13
                                                            res = _jm_obj_80(val, path, rep)
                                                            if not res:
                                                                rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.13]", path))
                                                            if not res:
                                                                # .'$any_platform'.'|'.14
                                                                res = _jm_obj_79(val, path, rep)
                                                                if not res:
                                                                    rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.14]", path))
                                                                if not res:
                                                                    # .'$any_platform'.'|'.15
                                                                    res = _jm_obj_78(val, path, rep)
                                                                    if not res:
                                                                        rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.15]", path))
                                                                    if not res:
                                                                        # .'$any_platform'.'|'.16
                                                                        res = _jm_obj_77(val, path, rep)
                                                                        if not res:
                                                                            rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.16]", path))
                                                                        if not res:
                                                                            # .'$any_platform'.'|'.17
                                                                            res = _jm_obj_76(val, path, rep)
                                                                            if not res:
                                                                                rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.17]", path))
                                                                            if not res:
                                                                                # .'$any_platform'.'|'.18
                                                                                res = _jm_obj_75(val, path, rep)
                                                                                if not res:
                                                                                    rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.18]", path))
                                                                                if not res:
                                                                                    # .'$any_platform'.'|'.19
                                                                                    res = _jm_obj_74(val, path, rep)
                                                                                    if not res:
                                                                                        rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.19]", path))
                                                                                    if not res:
                                                                                        # .'$any_platform'.'|'.20
                                                                                        res = _jm_obj_73(val, path, rep)
                                                                                        if not res:
                                                                                            rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.20]", path))
                                                                                        if not res:
                                                                                            # .'$any_platform'.'|'.21
                                                                                            res = _jm_obj_72(val, path, rep)
                                                                                            if not res:
                                                                                                rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.21]", path))
                                                                                            if not res:
                                                                                                # .'$any_platform'.'|'.22
                                                                                                res = _jm_obj_71(val, path, rep)
                                                                                                if not res:
                                                                                                    rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.22]", path))
                                                                                                if not res:
                                                                                                    # .'$any_platform'.'|'.23
                                                                                                    res = _jm_obj_70(val, path, rep)
                                                                                                    if not res:
                                                                                                        rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.23]", path))
                                                                                                    if not res:
                                                                                                        # .'$any_platform'.'|'.24
                                                                                                        res = _jm_obj_69(val, path, rep)
                                                                                                        if not res:
                                                                                                            rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.24]", path))
                                                                                                        if not res:
                                                                                                            # .'$any_platform'.'|'.25
                                                                                                            res = _jm_obj_68(val, path, rep)
                                                                                                            if not res:
                                                                                                                rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.25]", path))
                                                                                                            if not res:
                                                                                                                # .'$any_platform'.'|'.26
                                                                                                                res = _jm_obj_67(val, path, rep)
                                                                                                                if not res:
                                                                                                                    rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.26]", path))
                                                                                                                if not res:
                                                                                                                    # .'$any_platform'.'|'.27
                                                                                                                    res = _jm_obj_66(val, path, rep)
                                                                                                                    if not res:
                                                                                                                        rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.27]", path))
                                                                                                                    if not res:
                                                                                                                        # .'$any_platform'.'|'.28
                                                                                                                        res = _jm_obj_65(val, path, rep)
                                                                                                                        if not res:
                                                                                                                            rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.28]", path))
                                                                                                                        if not res:
                                                                                                                            # .'$any_platform'.'|'.29
                                                                                                                            res = _jm_obj_64(val, path, rep)
                                                                                                                            if not res:
                                                                                                                                rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.29]", path))
                                                                                                                            if not res:
                                                                                                                                # .'$any_platform'.'|'.30
                                                                                                                                res = _jm_obj_63(val, path, rep)
                                                                                                                                if not res:
                                                                                                                                    rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.30]", path))
                                                                                                                                if not res:
                                                                                                                                    # .'$any_platform'.'|'.31
                                                                                                                                    res = _jm_obj_62(val, path, rep)
                                                                                                                                    if not res:
                                                                                                                                        rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.31]", path))
                                                                                                                                    if not res:
                                                                                                                                        # .'$any_platform'.'|'.32
                                                                                                                                        res = _jm_obj_61(val, path, rep)
                                                                                                                                        if not res:
                                                                                                                                            rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.32]", path))
                                                                                                                                        if not res:
                                                                                                                                            # .'$any_platform'.'|'.33
                                                                                                                                            res = _jm_obj_60(val, path, rep)
                                                                                                                                            if not res:
                                                                                                                                                rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.33]", path))
                                                                                                                                            if not res:
                                                                                                                                                # .'$any_platform'.'|'.34
                                                                                                                                                res = _jm_obj_59(val, path, rep)
                                                                                                                                                if not res:
                                                                                                                                                    rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.34]", path))
                                                                                                                                                if not res:
                                                                                                                                                    # .'$any_platform'.'|'.35
                                                                                                                                                    res = _jm_obj_58(val, path, rep)
                                                                                                                                                    if not res:
                                                                                                                                                        rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.35]", path))
                                                                                                                                                    if not res:
                                                                                                                                                        # .'$any_platform'.'|'.36
                                                                                                                                                        res = _jm_obj_57(val, path, rep)
                                                                                                                                                        if not res:
                                                                                                                                                            rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.36]", path))
                                                                                                                                                        if not res:
                                                                                                                                                            # .'$any_platform'.'|'.37
                                                                                                                                                            res = _jm_obj_56(val, path, rep)
                                                                                                                                                            if not res:
                                                                                                                                                                rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.37]", path))
                                                                                                                                                            if not res:
                                                                                                                                                                # .'$any_platform'.'|'.38
                                                                                                                                                                res = _jm_obj_55(val, path, rep)
                                                                                                                                                                if not res:
                                                                                                                                                                    rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.38]", path))
                                                                                                                                                                if not res:
                                                                                                                                                                    # .'$any_platform'.'|'.39
                                                                                                                                                                    res = _jm_obj_54(val, path, rep)
                                                                                                                                                                    if not res:
                                                                                                                                                                        rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.39]", path))
                                                                                                                                                                    if not res:
                                                                                                                                                                        # .'$any_platform'.'|'.40
                                                                                                                                                                        res = _jm_obj_53(val, path, rep)
                                                                                                                                                                        if not res:
                                                                                                                                                                            rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.40]", path))
                                                                                                                                                                        if not res:
                                                                                                                                                                            # .'$any_platform'.'|'.41
                                                                                                                                                                            res = _jm_obj_52(val, path, rep)
                                                                                                                                                                            if not res:
                                                                                                                                                                                rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.41]", path))
                                                                                                                                                                            if not res:
                                                                                                                                                                                # .'$any_platform'.'|'.42
                                                                                                                                                                                res = _jm_obj_51(val, path, rep)
                                                                                                                                                                                if not res:
                                                                                                                                                                                    rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.42]", path))
                                                                                                                                                                                if not res:
                                                                                                                                                                                    # .'$any_platform'.'|'.43
                                                                                                                                                                                    res = _jm_obj_50(val, path, rep)
                                                                                                                                                                                    if not res:
                                                                                                                                                                                        rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.43]", path))
                                                                                                                                                                                    if not res:
                                                                                                                                                                                        # .'$any_platform'.'|'.44
                                                                                                                                                                                        res = _jm_obj_49(val, path, rep)
                                                                                                                                                                                        if not res:
                                                                                                                                                                                            rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.44]", path))
                                                                                                                                                                                        if not res:
                                                                                                                                                                                            # .'$any_platform'.'|'.45
                                                                                                                                                                                            res = _jm_obj_48(val, path, rep)
                                                                                                                                                                                            if not res:
                                                                                                                                                                                                rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.45]", path))
                                                                                                                                                                                            if not res:
                                                                                                                                                                                                # .'$any_platform'.'|'.46
                                                                                                                                                                                                res = _jm_obj_47(val, path, rep)
                                                                                                                                                                                                if not res:
                                                                                                                                                                                                    rep is None or rep.append(("unexpected element [.'$any_platform'.'|'.46]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$any_platform'.'|']", path))
    return res


# object .'$platforms'.0.'|'.46
def _jm_obj_94(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.46]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.46.name
        res = isinstance(pval, str) and pval == "Windows"
        if not res:
            rep is None or rep.append(("unexpected _Windows [.'$platforms'.0.'|'.46.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.46]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.46.versions
        res = isinstance(pval, list)
        if res:
            for arr_95_idx, arr_95_item in enumerate(pval):
                arr_95_lpath: Path = (path + [ arr_95_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.46.versions.0
                res = ((arr_95_item is None or isinstance(arr_95_item, (bool, int, float, str)))) and arr_95_item in _jm_cst_64
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.46.versions.0.'|']", arr_95_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.46.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.46]", path))
            return False
    return True


# object .'$platforms'.0.'|'.45
def _jm_obj_95(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.45]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.45.name
        res = isinstance(pval, str) and pval == "vSphere"
        if not res:
            rep is None or rep.append(("unexpected _vSphere [.'$platforms'.0.'|'.45.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.45]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.45.versions
        res = isinstance(pval, list)
        if res:
            for arr_96_idx, arr_96_item in enumerate(pval):
                arr_96_lpath: Path = (path + [ arr_96_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.45.versions.0
                res = ((arr_96_item is None or isinstance(arr_96_item, (bool, int, float, str)))) and arr_96_item in _jm_cst_65
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.45.versions.0.'|']", arr_96_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.45.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.45]", path))
            return False
    return True

# object .'$platforms'.0.'|'.44
def _jm_obj_96(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.44]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.44.name
        res = isinstance(pval, str) and pval == "Void Linux"
        if not res:
            rep is None or rep.append(("unexpected _Void Linux [.'$platforms'.0.'|'.44.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.44]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.44.versions
        res = isinstance(pval, list)
        if res:
            for arr_97_idx, arr_97_item in enumerate(pval):
                arr_97_lpath: Path = (path + [ arr_97_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.44.versions.0
                res = isinstance(arr_97_item, str) and arr_97_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.44.versions.0]", arr_97_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.44.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.44]", path))
            return False
    return True


# object .'$platforms'.0.'|'.43
def _jm_obj_97(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.43]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.43.name
        res = isinstance(pval, str) and pval == "vCenter"
        if not res:
            rep is None or rep.append(("unexpected _vCenter [.'$platforms'.0.'|'.43.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.43]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.43.versions
        res = isinstance(pval, list)
        if res:
            for arr_98_idx, arr_98_item in enumerate(pval):
                arr_98_lpath: Path = (path + [ arr_98_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.43.versions.0
                res = ((arr_98_item is None or isinstance(arr_98_item, (bool, int, float, str)))) and arr_98_item in _jm_cst_66
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.43.versions.0.'|']", arr_98_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.43.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.43]", path))
            return False
    return True


# object .'$platforms'.0.'|'.42
def _jm_obj_98(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.42]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.42.name
        res = isinstance(pval, str) and pval == "Ubuntu"
        if not res:
            rep is None or rep.append(("unexpected _Ubuntu [.'$platforms'.0.'|'.42.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.42]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.42.versions
        res = isinstance(pval, list)
        if res:
            for arr_99_idx, arr_99_item in enumerate(pval):
                arr_99_lpath: Path = (path + [ arr_99_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.42.versions.0
                res = ((arr_99_item is None or isinstance(arr_99_item, (bool, int, float, str)))) and arr_99_item in _jm_cst_67
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.42.versions.0.'|']", arr_99_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.42.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.42]", path))
            return False
    return True


# object .'$platforms'.0.'|'.41
def _jm_obj_99(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.41]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.41.name
        res = isinstance(pval, str) and pval == "TMOS"
        if not res:
            rep is None or rep.append(("unexpected _TMOS [.'$platforms'.0.'|'.41.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.41]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.41.versions
        res = isinstance(pval, list)
        if res:
            for arr_100_idx, arr_100_item in enumerate(pval):
                arr_100_lpath: Path = (path + [ arr_100_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.41.versions.0
                res = ((arr_100_item is None or isinstance(arr_100_item, (bool, int, float, str)))) and arr_100_item in _jm_cst_68
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.41.versions.0.'|']", arr_100_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.41.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.41]", path))
            return False
    return True


# object .'$platforms'.0.'|'.40
def _jm_obj_100(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.40]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.40.name
        res = isinstance(pval, str) and pval == "Synology"
        if not res:
            rep is None or rep.append(("unexpected _Synology [.'$platforms'.0.'|'.40.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.40]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.40.versions
        res = isinstance(pval, list)
        if res:
            for arr_101_idx, arr_101_item in enumerate(pval):
                arr_101_lpath: Path = (path + [ arr_101_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.40.versions.0
                res = ((arr_101_item is None or isinstance(arr_101_item, (bool, int, float, str)))) and arr_101_item in _jm_cst_69
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.40.versions.0.'|']", arr_101_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.40.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.40]", path))
            return False
    return True


# object .'$platforms'.0.'|'.39
def _jm_obj_101(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.39]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.39.name
        res = isinstance(pval, str) and pval == "Solaris"
        if not res:
            rep is None or rep.append(("unexpected _Solaris [.'$platforms'.0.'|'.39.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.39]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.39.versions
        res = isinstance(pval, list)
        if res:
            for arr_102_idx, arr_102_item in enumerate(pval):
                arr_102_lpath: Path = (path + [ arr_102_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.39.versions.0
                res = ((arr_102_item is None or isinstance(arr_102_item, (bool, int, float, str)))) and arr_102_item in _jm_cst_70
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.39.versions.0.'|']", arr_102_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.39.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.39]", path))
            return False
    return True

# object .'$platforms'.0.'|'.38
def _jm_obj_102(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.38]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.38.name
        res = isinstance(pval, str) and pval == "SmartOS"
        if not res:
            rep is None or rep.append(("unexpected _SmartOS [.'$platforms'.0.'|'.38.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.38]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.38.versions
        res = isinstance(pval, list)
        if res:
            for arr_103_idx, arr_103_item in enumerate(pval):
                arr_103_lpath: Path = (path + [ arr_103_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.38.versions.0
                res = isinstance(arr_103_item, str) and arr_103_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.38.versions.0]", arr_103_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.38.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.38]", path))
            return False
    return True


# object .'$platforms'.0.'|'.37
def _jm_obj_103(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.37]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.37.name
        res = isinstance(pval, str) and pval == "SLES"
        if not res:
            rep is None or rep.append(("unexpected _SLES [.'$platforms'.0.'|'.37.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.37]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.37.versions
        res = isinstance(pval, list)
        if res:
            for arr_104_idx, arr_104_item in enumerate(pval):
                arr_104_lpath: Path = (path + [ arr_104_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.37.versions.0
                res = ((arr_104_item is None or isinstance(arr_104_item, (bool, int, float, str)))) and arr_104_item in _jm_cst_71
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.37.versions.0.'|']", arr_104_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.37.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.37]", path))
            return False
    return True


# object .'$platforms'.0.'|'.36
def _jm_obj_104(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.36]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.36.name
        res = isinstance(pval, str) and pval == "Rocky"
        if not res:
            rep is None or rep.append(("unexpected _Rocky [.'$platforms'.0.'|'.36.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.36]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.36.versions
        res = isinstance(pval, list)
        if res:
            for arr_105_idx, arr_105_item in enumerate(pval):
                arr_105_lpath: Path = (path + [ arr_105_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.36.versions.0
                res = ((arr_105_item is None or isinstance(arr_105_item, (bool, int, float, str)))) and arr_105_item in _jm_cst_72
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.36.versions.0.'|']", arr_105_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.36.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.36]", path))
            return False
    return True


# object .'$platforms'.0.'|'.35
def _jm_obj_105(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.35]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.35.name
        res = isinstance(pval, str) and pval == "PAN-OS"
        if not res:
            rep is None or rep.append(("unexpected _PAN-OS [.'$platforms'.0.'|'.35.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.35]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.35.versions
        res = isinstance(pval, list)
        if res:
            for arr_106_idx, arr_106_item in enumerate(pval):
                arr_106_lpath: Path = (path + [ arr_106_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.35.versions.0
                res = ((arr_106_item is None or isinstance(arr_106_item, (bool, int, float, str)))) and arr_106_item in _jm_cst_73
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.35.versions.0.'|']", arr_106_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.35.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.35]", path))
            return False
    return True

# object .'$platforms'.0.'|'.34
def _jm_obj_106(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.34]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.34.name
        res = isinstance(pval, str) and pval == "os10"
        if not res:
            rep is None or rep.append(("unexpected _os10 [.'$platforms'.0.'|'.34.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.34]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.34.versions
        res = isinstance(pval, list)
        if res:
            for arr_107_idx, arr_107_item in enumerate(pval):
                arr_107_lpath: Path = (path + [ arr_107_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.34.versions.0
                res = isinstance(arr_107_item, str) and arr_107_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.34.versions.0]", arr_107_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.34.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.34]", path))
            return False
    return True


# object .'$platforms'.0.'|'.33
def _jm_obj_107(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.33]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.33.name
        res = isinstance(pval, str) and pval == "OracleLinux"
        if not res:
            rep is None or rep.append(("unexpected _OracleLinux [.'$platforms'.0.'|'.33.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.33]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.33.versions
        res = isinstance(pval, list)
        if res:
            for arr_108_idx, arr_108_item in enumerate(pval):
                arr_108_lpath: Path = (path + [ arr_108_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.33.versions.0
                res = ((arr_108_item is None or isinstance(arr_108_item, (bool, int, float, str)))) and arr_108_item in _jm_cst_74
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.33.versions.0.'|']", arr_108_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.33.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.33]", path))
            return False
    return True


# object .'$platforms'.0.'|'.32
def _jm_obj_108(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.32]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.32.name
        res = isinstance(pval, str) and pval == "OpenWrt"
        if not res:
            rep is None or rep.append(("unexpected _OpenWrt [.'$platforms'.0.'|'.32.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.32]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.32.versions
        res = isinstance(pval, list)
        if res:
            for arr_109_idx, arr_109_item in enumerate(pval):
                arr_109_lpath: Path = (path + [ arr_109_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.32.versions.0
                res = ((arr_109_item is None or isinstance(arr_109_item, (bool, int, float, str)))) and arr_109_item in _jm_cst_75
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.32.versions.0.'|']", arr_109_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.32.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.32]", path))
            return False
    return True


# object .'$platforms'.0.'|'.31
def _jm_obj_109(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.31]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.31.name
        res = isinstance(pval, str) and pval == "opensuse"
        if not res:
            rep is None or rep.append(("unexpected _opensuse [.'$platforms'.0.'|'.31.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.31]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.31.versions
        res = isinstance(pval, list)
        if res:
            for arr_110_idx, arr_110_item in enumerate(pval):
                arr_110_lpath: Path = (path + [ arr_110_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.31.versions.0
                res = ((arr_110_item is None or isinstance(arr_110_item, (bool, int, float, str)))) and arr_110_item in _jm_cst_76
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.31.versions.0.'|']", arr_110_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.31.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.31]", path))
            return False
    return True


# object .'$platforms'.0.'|'.30
def _jm_obj_110(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.30]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.30.name
        res = isinstance(pval, str) and pval == "OpenBSD"
        if not res:
            rep is None or rep.append(("unexpected _OpenBSD [.'$platforms'.0.'|'.30.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.30]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.30.versions
        res = isinstance(pval, list)
        if res:
            for arr_111_idx, arr_111_item in enumerate(pval):
                arr_111_lpath: Path = (path + [ arr_111_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.30.versions.0
                res = ((arr_111_item is None or isinstance(arr_111_item, (bool, int, float, str)))) and arr_111_item in _jm_cst_77
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.30.versions.0.'|']", arr_111_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.30.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.30]", path))
            return False
    return True

# object .'$platforms'.0.'|'.29
def _jm_obj_111(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.29]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.29.name
        res = isinstance(pval, str) and pval == "NXOS"
        if not res:
            rep is None or rep.append(("unexpected _NXOS [.'$platforms'.0.'|'.29.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.29]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.29.versions
        res = isinstance(pval, list)
        if res:
            for arr_112_idx, arr_112_item in enumerate(pval):
                arr_112_lpath: Path = (path + [ arr_112_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.29.versions.0
                res = isinstance(arr_112_item, str) and arr_112_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.29.versions.0]", arr_112_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.29.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.29]", path))
            return False
    return True


# object .'$platforms'.0.'|'.28
def _jm_obj_112(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.28]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.28.name
        res = isinstance(pval, str) and pval == "Megeia"
        if not res:
            rep is None or rep.append(("unexpected _Megeia [.'$platforms'.0.'|'.28.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.28]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.28.versions
        res = isinstance(pval, list)
        if res:
            for arr_113_idx, arr_113_item in enumerate(pval):
                arr_113_lpath: Path = (path + [ arr_113_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.28.versions.0
                res = ((arr_113_item is None or isinstance(arr_113_item, (bool, int, float, str)))) and arr_113_item in _jm_cst_78
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.28.versions.0.'|']", arr_113_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.28.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.28]", path))
            return False
    return True


# object .'$platforms'.0.'|'.27
def _jm_obj_113(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.27]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.27.name
        res = isinstance(pval, str) and pval == "Kali"
        if not res:
            rep is None or rep.append(("unexpected _Kali [.'$platforms'.0.'|'.27.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.27]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.27.versions
        res = isinstance(pval, list)
        if res:
            for arr_114_idx, arr_114_item in enumerate(pval):
                arr_114_lpath: Path = (path + [ arr_114_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.27.versions.0
                res = ((arr_114_item is None or isinstance(arr_114_item, (bool, int, float, str)))) and arr_114_item in _jm_cst_79
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.27.versions.0.'|']", arr_114_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.27.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.27]", path))
            return False
    return True


# object .'$platforms'.0.'|'.26
def _jm_obj_114(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.26]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.26.name
        res = isinstance(pval, str) and pval == "macOS"
        if not res:
            rep is None or rep.append(("unexpected _macOS [.'$platforms'.0.'|'.26.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.26]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.26.versions
        res = isinstance(pval, list)
        if res:
            for arr_115_idx, arr_115_item in enumerate(pval):
                arr_115_lpath: Path = (path + [ arr_115_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.26.versions.0
                res = ((arr_115_item is None or isinstance(arr_115_item, (bool, int, float, str)))) and arr_115_item in _jm_cst_80
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.26.versions.0.'|']", arr_115_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.26.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.26]", path))
            return False
    return True


# object .'$platforms'.0.'|'.25
def _jm_obj_115(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.25]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.25.name
        res = isinstance(pval, str) and pval == "Kali"
        if not res:
            rep is None or rep.append(("unexpected _Kali [.'$platforms'.0.'|'.25.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.25]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.25.versions
        res = isinstance(pval, list)
        if res:
            for arr_116_idx, arr_116_item in enumerate(pval):
                arr_116_lpath: Path = (path + [ arr_116_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.25.versions.0
                res = ((arr_116_item is None or isinstance(arr_116_item, (bool, int, float, str)))) and arr_116_item in _jm_cst_81
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.25.versions.0.'|']", arr_116_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.25.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.25]", path))
            return False
    return True

# object .'$platforms'.0.'|'.24
def _jm_obj_116(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.24]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.24.name
        res = isinstance(pval, str) and pval == "Junos"
        if not res:
            rep is None or rep.append(("unexpected _Junos [.'$platforms'.0.'|'.24.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.24]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.24.versions
        res = isinstance(pval, list)
        if res:
            for arr_117_idx, arr_117_item in enumerate(pval):
                arr_117_lpath: Path = (path + [ arr_117_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.24.versions.0
                res = isinstance(arr_117_item, str) and arr_117_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.24.versions.0]", arr_117_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.24.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.24]", path))
            return False
    return True

# object .'$platforms'.0.'|'.23
def _jm_obj_117(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.23]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.23.name
        res = isinstance(pval, str) and pval == "IOS"
        if not res:
            rep is None or rep.append(("unexpected _IOS [.'$platforms'.0.'|'.23.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.23]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.23.versions
        res = isinstance(pval, list)
        if res:
            for arr_118_idx, arr_118_item in enumerate(pval):
                arr_118_lpath: Path = (path + [ arr_118_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.23.versions.0
                res = isinstance(arr_118_item, str) and arr_118_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.23.versions.0]", arr_118_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.23.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.23]", path))
            return False
    return True


# object .'$platforms'.0.'|'.22
def _jm_obj_118(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.22]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.22.name
        res = isinstance(pval, str) and pval == "HardenedBSD"
        if not res:
            rep is None or rep.append(("unexpected _HardenedBSD [.'$platforms'.0.'|'.22.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.22]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.22.versions
        res = isinstance(pval, list)
        if res:
            for arr_119_idx, arr_119_item in enumerate(pval):
                arr_119_lpath: Path = (path + [ arr_119_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.22.versions.0
                res = ((arr_119_item is None or isinstance(arr_119_item, (bool, int, float, str)))) and arr_119_item in _jm_cst_82
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.22.versions.0.'|']", arr_119_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.22.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.22]", path))
            return False
    return True

# object .'$platforms'.0.'|'.21
def _jm_obj_119(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.21]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.21.name
        res = isinstance(pval, str) and pval == "Gentoo"
        if not res:
            rep is None or rep.append(("unexpected _Gentoo [.'$platforms'.0.'|'.21.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.21]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.21.versions
        res = isinstance(pval, list)
        if res:
            for arr_120_idx, arr_120_item in enumerate(pval):
                arr_120_lpath: Path = (path + [ arr_120_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.21.versions.0
                res = isinstance(arr_120_item, str) and arr_120_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.21.versions.0]", arr_120_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.21.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.21]", path))
            return False
    return True

# object .'$platforms'.0.'|'.20
def _jm_obj_120(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.20]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.20.name
        res = isinstance(pval, str) and pval == "GenericUNIX"
        if not res:
            rep is None or rep.append(("unexpected _GenericUNIX [.'$platforms'.0.'|'.20.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.20]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.20.versions
        res = isinstance(pval, list)
        if res:
            for arr_121_idx, arr_121_item in enumerate(pval):
                arr_121_lpath: Path = (path + [ arr_121_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.20.versions.0
                res = isinstance(arr_121_item, str) and arr_121_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.20.versions.0]", arr_121_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.20.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.20]", path))
            return False
    return True

# object .'$platforms'.0.'|'.19
def _jm_obj_121(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.19]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.19.name
        res = isinstance(pval, str) and pval == "GenericLinux"
        if not res:
            rep is None or rep.append(("unexpected _GenericLinux [.'$platforms'.0.'|'.19.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.19]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.19.versions
        res = isinstance(pval, list)
        if res:
            for arr_122_idx, arr_122_item in enumerate(pval):
                arr_122_lpath: Path = (path + [ arr_122_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.19.versions.0
                res = isinstance(arr_122_item, str) and arr_122_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.19.versions.0]", arr_122_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.19.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.19]", path))
            return False
    return True

# object .'$platforms'.0.'|'.18
def _jm_obj_122(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.18]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.18.name
        res = isinstance(pval, str) and pval == "GenericBSD"
        if not res:
            rep is None or rep.append(("unexpected _GenericBSD [.'$platforms'.0.'|'.18.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.18]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.18.versions
        res = isinstance(pval, list)
        if res:
            for arr_123_idx, arr_123_item in enumerate(pval):
                arr_123_lpath: Path = (path + [ arr_123_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.18.versions.0
                res = isinstance(arr_123_item, str) and arr_123_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.18.versions.0]", arr_123_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.18.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.18]", path))
            return False
    return True


# object .'$platforms'.0.'|'.17
def _jm_obj_123(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.17]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.17.name
        res = isinstance(pval, str) and pval == "FreeBSD"
        if not res:
            rep is None or rep.append(("unexpected _FreeBSD [.'$platforms'.0.'|'.17.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.17]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.17.versions
        res = isinstance(pval, list)
        if res:
            for arr_124_idx, arr_124_item in enumerate(pval):
                arr_124_lpath: Path = (path + [ arr_124_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.17.versions.0
                res = ((arr_124_item is None or isinstance(arr_124_item, (bool, int, float, str)))) and arr_124_item in _jm_cst_83
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.17.versions.0.'|']", arr_124_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.17.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.17]", path))
            return False
    return True


# object .'$platforms'.0.'|'.16
def _jm_obj_124(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.16]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.16.name
        res = isinstance(pval, str) and (pval == "Fedora")
        if not res:
            rep is None or rep.append(("unexpected _Fedora [.'$platforms'.0.'|'.16.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.16]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.16.versions
        res = isinstance(pval, list)
        if res:
            for arr_125_idx, arr_125_item in enumerate(pval):
                arr_125_lpath: Path = (path + [ arr_125_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.16.versions.0
                res = ((arr_125_item is None or isinstance(arr_125_item, (bool, int, float, str)))) and arr_125_item in _jm_cst_84
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.16.versions.0.'|']", arr_125_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.16.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.16]", path))
            return False
    return True

# object .'$platforms'.0.'|'.15
def _jm_obj_125(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.15]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.15.name
        res = isinstance(pval, str) and pval == "eos"
        if not res:
            rep is None or rep.append(("unexpected _eos [.'$platforms'.0.'|'.15.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.15]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.15.versions
        res = isinstance(pval, list)
        if res:
            for arr_126_idx, arr_126_item in enumerate(pval):
                arr_126_lpath: Path = (path + [ arr_126_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.15.versions.0
                res = isinstance(arr_126_item, str) and arr_126_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.15.versions.0]", arr_126_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.15.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.15]", path))
            return False
    return True


# object .'$platforms'.0.'|'.14
def _jm_obj_126(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.14]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.14.name
        res = isinstance(pval, str) and pval == "EL"
        if not res:
            rep is None or rep.append(("unexpected _EL [.'$platforms'.0.'|'.14.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.14]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.14.versions
        res = isinstance(pval, list)
        if res:
            for arr_127_idx, arr_127_item in enumerate(pval):
                arr_127_lpath: Path = (path + [ arr_127_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.14.versions.0
                res = ((arr_127_item is None or isinstance(arr_127_item, (bool, int, float, str)))) and arr_127_item in _jm_cst_85
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.14.versions.0.'|']", arr_127_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.14.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.14]", path))
            return False
    return True


# object .'$platforms'.0.'|'.13
def _jm_obj_127(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.13]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.13.name
        res = isinstance(pval, str) and pval == "DragonFlyBSD"
        if not res:
            rep is None or rep.append(("unexpected _DragonFlyBSD [.'$platforms'.0.'|'.13.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.13]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.13.versions
        res = isinstance(pval, list)
        if res:
            for arr_128_idx, arr_128_item in enumerate(pval):
                arr_128_lpath: Path = (path + [ arr_128_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.13.versions.0
                res = ((arr_128_item is None or isinstance(arr_128_item, (bool, int, float, str)))) and arr_128_item in _jm_cst_86
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.13.versions.0.'|']", arr_128_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.13.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.13]", path))
            return False
    return True


# object .'$platforms'.0.'|'.12
def _jm_obj_128(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.12]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.12.name
        res = isinstance(pval, str) and pval == "Devuan"
        if not res:
            rep is None or rep.append(("unexpected _Devuan [.'$platforms'.0.'|'.12.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.12]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.12.versions
        res = isinstance(pval, list)
        if res:
            for arr_129_idx, arr_129_item in enumerate(pval):
                arr_129_lpath: Path = (path + [ arr_129_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.12.versions.0
                res = ((arr_129_item is None or isinstance(arr_129_item, (bool, int, float, str)))) and arr_129_item in _jm_cst_87
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.12.versions.0.'|']", arr_129_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.12.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.12]", path))
            return False
    return True


# object .'$platforms'.0.'|'.11
def _jm_obj_129(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.11]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.11.name
        res = isinstance(pval, str) and pval == "DellOS"
        if not res:
            rep is None or rep.append(("unexpected _DellOS [.'$platforms'.0.'|'.11.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.11]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.11.versions
        res = isinstance(pval, list)
        if res:
            for arr_130_idx, arr_130_item in enumerate(pval):
                arr_130_lpath: Path = (path + [ arr_130_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.11.versions.0
                res = ((arr_130_item is None or isinstance(arr_130_item, (bool, int, float, str)))) and arr_130_item in _jm_cst_88
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.11.versions.0.'|']", arr_130_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.11.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.11]", path))
            return False
    return True


# object .'$platforms'.0.'|'.10
def _jm_obj_130(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.10]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.10.name
        res = isinstance(pval, str) and pval == "Debian"
        if not res:
            rep is None or rep.append(("unexpected _Debian [.'$platforms'.0.'|'.10.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.10]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.10.versions
        res = isinstance(pval, list)
        if res:
            for arr_131_idx, arr_131_item in enumerate(pval):
                arr_131_lpath: Path = (path + [ arr_131_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.10.versions.0
                res = ((arr_131_item is None or isinstance(arr_131_item, (bool, int, float, str)))) and arr_131_item in _jm_cst_89
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.10.versions.0.'|']", arr_131_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.10.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.10]", path))
            return False
    return True


# object .'$platforms'.0.'|'.9
def _jm_obj_131(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.9]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.9.name
        res = isinstance(pval, str) and pval == "NetBSD"
        if not res:
            rep is None or rep.append(("unexpected _NetBSD [.'$platforms'.0.'|'.9.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.9]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.9.versions
        res = isinstance(pval, list)
        if res:
            for arr_132_idx, arr_132_item in enumerate(pval):
                arr_132_lpath: Path = (path + [ arr_132_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.9.versions.0
                res = ((arr_132_item is None or isinstance(arr_132_item, (bool, int, float, str)))) and arr_132_item in _jm_cst_90
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.9.versions.0.'|']", arr_132_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.9.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.9]", path))
            return False
    return True


# object .'$platforms'.0.'|'.8
def _jm_obj_132(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.8]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.8.name
        res = isinstance(pval, str) and pval == "Cumulus"
        if not res:
            rep is None or rep.append(("unexpected _Cumulus [.'$platforms'.0.'|'.8.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.8]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.8.versions
        res = isinstance(pval, list)
        if res:
            for arr_133_idx, arr_133_item in enumerate(pval):
                arr_133_lpath: Path = (path + [ arr_133_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.8.versions.0
                res = ((arr_133_item is None or isinstance(arr_133_item, (bool, int, float, str)))) and arr_133_item in _jm_cst_91
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.8.versions.0.'|']", arr_133_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.8.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.8]", path))
            return False
    return True

# object .'$platforms'.0.'|'.7
def _jm_obj_133(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.7]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.7.name
        res = isinstance(pval, str) and pval == "ClearLinux"
        if not res:
            rep is None or rep.append(("unexpected _ClearLinux [.'$platforms'.0.'|'.7.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.7]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.7.versions
        res = isinstance(pval, list)
        if res:
            for arr_134_idx, arr_134_item in enumerate(pval):
                arr_134_lpath: Path = (path + [ arr_134_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.7.versions.0
                res = isinstance(arr_134_item, str) and arr_134_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.7.versions.0]", arr_134_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.7.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.7]", path))
            return False
    return True


# object .'$platforms'.0.'|'.6
def _jm_obj_134(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.6]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.6.name
        res = isinstance(pval, str) and pval == "Astra Linux"
        if not res:
            rep is None or rep.append(("unexpected _Astra Linux [.'$platforms'.0.'|'.6.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.6]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.6.versions
        res = isinstance(pval, list)
        if res:
            for arr_135_idx, arr_135_item in enumerate(pval):
                arr_135_lpath: Path = (path + [ arr_135_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.6.versions.0
                res = ((arr_135_item is None or isinstance(arr_135_item, (bool, int, float, str)))) and arr_135_item in _jm_cst_92
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.6.versions.0.'|']", arr_135_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.6.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.6]", path))
            return False
    return True

# object .'$platforms'.0.'|'.5
def _jm_obj_135(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.5]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.5.name
        res = isinstance(pval, str) and pval == "ArchLinux"
        if not res:
            rep is None or rep.append(("unexpected _ArchLinux [.'$platforms'.0.'|'.5.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.5]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.5.versions
        res = isinstance(pval, list)
        if res:
            for arr_136_idx, arr_136_item in enumerate(pval):
                arr_136_lpath: Path = (path + [ arr_136_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.5.versions.0
                res = isinstance(arr_136_item, str) and arr_136_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.5.versions.0]", arr_136_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.5.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.5]", path))
            return False
    return True

# object .'$platforms'.0.'|'.4
def _jm_obj_136(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.4]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.4.name
        res = isinstance(pval, str) and pval == "aos"
        if not res:
            rep is None or rep.append(("unexpected _aos [.'$platforms'.0.'|'.4.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.4]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.4.versions
        res = isinstance(pval, list)
        if res:
            for arr_137_idx, arr_137_item in enumerate(pval):
                arr_137_lpath: Path = (path + [ arr_137_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.4.versions.0
                res = isinstance(arr_137_item, str) and arr_137_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.4.versions.0]", arr_137_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.4.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.4]", path))
            return False
    return True


# object .'$platforms'.0.'|'.3
def _jm_obj_137(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.3]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.3.name
        res = isinstance(pval, str) and pval == "Amazon Linux"
        if not res:
            rep is None or rep.append(("unexpected _Amazon Linux [.'$platforms'.0.'|'.3.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.3]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.3.versions
        res = isinstance(pval, list)
        if res:
            for arr_138_idx, arr_138_item in enumerate(pval):
                arr_138_lpath: Path = (path + [ arr_138_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.3.versions.0
                res = ((arr_138_item is None or isinstance(arr_138_item, (bool, int, float, str)))) and arr_138_item in _jm_cst_93
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.3.versions.0.'|']", arr_138_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.3.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.3]", path))
            return False
    return True


# object .'$platforms'.0.'|'.2
def _jm_obj_138(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.2]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.2.name
        res = isinstance(pval, str) and pval == "Amazon"
        if not res:
            rep is None or rep.append(("unexpected _Amazon [.'$platforms'.0.'|'.2.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.2]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.2.versions
        res = isinstance(pval, list)
        if res:
            for arr_139_idx, arr_139_item in enumerate(pval):
                arr_139_lpath: Path = (path + [ arr_139_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.2.versions.0
                res = ((arr_139_item is None or isinstance(arr_139_item, (bool, int, float, str)))) and arr_139_item in _jm_cst_94
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.2.versions.0.'|']", arr_139_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.2.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.2]", path))
            return False
    return True

# object .'$platforms'.0.'|'.1
def _jm_obj_139(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.1]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.1.name
        res = isinstance(pval, str) and pval == "Alpine"
        if not res:
            rep is None or rep.append(("unexpected _Alpine [.'$platforms'.0.'|'.1.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.1]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.1.versions
        res = isinstance(pval, list)
        if res:
            for arr_140_idx, arr_140_item in enumerate(pval):
                arr_140_lpath: Path = (path + [ arr_140_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.1.versions.0
                res = isinstance(arr_140_item, str) and arr_140_item == "all"
                if not res:
                    rep is None or rep.append(("unexpected all [.'$platforms'.0.'|'.1.versions.0]", arr_140_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.1.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.1]", path))
            return False
    return True


# object .'$platforms'.0.'|'.0
def _jm_obj_140(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$platforms'.0.'|'.0]", path))
        return False
    pval: Jsonable
    res: bool
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$platforms'.0.'|'.0.name
        res = isinstance(pval, str) and pval == "AIX"
        if not res:
            rep is None or rep.append(("unexpected _AIX [.'$platforms'.0.'|'.0.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$platforms'.0.'|'.0]", path))
            return False
    if "versions" in val:
        pval = val.get("versions", UNDEFINED)
        # .'$platforms'.0.'|'.0.versions
        res = isinstance(pval, list)
        if res:
            for arr_141_idx, arr_141_item in enumerate(pval):
                arr_141_lpath: Path = (path + [ arr_141_idx ]) if path is not None else None
                # .'$platforms'.0.'|'.0.versions.0
                res = ((arr_141_item is None or isinstance(arr_141_item, (bool, int, float, str)))) and arr_141_item in _jm_cst_95
                if not res:
                    rep is None or rep.append(("value not in enum [.'$platforms'.0.'|'.0.versions.0.'|']", arr_141_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$platforms'.0.'|'.0.versions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <versions> [.'$platforms'.0.'|'.0]", path))
            return False
    return True

# check $platforms (.'$platforms')
def json_model_50(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$platforms'
    res = isinstance(val, list)
    if res:
        for arr_94_idx, arr_94_item in enumerate(val):
            arr_94_lpath: Path = (path + [ arr_94_idx ]) if path is not None else None
            # .'$platforms'.0
            res = isinstance(arr_94_item, dict)
            if not res:
                rep is None or rep.append(("unexpected type [.'$platforms'.0.'|']", arr_94_lpath if path is not None else None))
            if res:
                # .'$platforms'.0.'|'.0
                res = _jm_obj_140(arr_94_item, arr_94_lpath if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.0]", arr_94_lpath if path is not None else None))
                if not res:
                    # .'$platforms'.0.'|'.1
                    res = _jm_obj_139(arr_94_item, arr_94_lpath if path is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.1]", arr_94_lpath if path is not None else None))
                    if not res:
                        # .'$platforms'.0.'|'.2
                        res = _jm_obj_138(arr_94_item, arr_94_lpath if path is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.2]", arr_94_lpath if path is not None else None))
                        if not res:
                            # .'$platforms'.0.'|'.3
                            res = _jm_obj_137(arr_94_item, arr_94_lpath if path is not None else None, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.3]", arr_94_lpath if path is not None else None))
                            if not res:
                                # .'$platforms'.0.'|'.4
                                res = _jm_obj_136(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                if not res:
                                    rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.4]", arr_94_lpath if path is not None else None))
                                if not res:
                                    # .'$platforms'.0.'|'.5
                                    res = _jm_obj_135(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                    if not res:
                                        rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.5]", arr_94_lpath if path is not None else None))
                                    if not res:
                                        # .'$platforms'.0.'|'.6
                                        res = _jm_obj_134(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                        if not res:
                                            rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.6]", arr_94_lpath if path is not None else None))
                                        if not res:
                                            # .'$platforms'.0.'|'.7
                                            res = _jm_obj_133(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                            if not res:
                                                rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.7]", arr_94_lpath if path is not None else None))
                                            if not res:
                                                # .'$platforms'.0.'|'.8
                                                res = _jm_obj_132(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                if not res:
                                                    rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.8]", arr_94_lpath if path is not None else None))
                                                if not res:
                                                    # .'$platforms'.0.'|'.9
                                                    res = _jm_obj_131(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                    if not res:
                                                        rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.9]", arr_94_lpath if path is not None else None))
                                                    if not res:
                                                        # .'$platforms'.0.'|'.10
                                                        res = _jm_obj_130(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                        if not res:
                                                            rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.10]", arr_94_lpath if path is not None else None))
                                                        if not res:
                                                            # .'$platforms'.0.'|'.11
                                                            res = _jm_obj_129(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                            if not res:
                                                                rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.11]", arr_94_lpath if path is not None else None))
                                                            if not res:
                                                                # .'$platforms'.0.'|'.12
                                                                res = _jm_obj_128(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                if not res:
                                                                    rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.12]", arr_94_lpath if path is not None else None))
                                                                if not res:
                                                                    # .'$platforms'.0.'|'.13
                                                                    res = _jm_obj_127(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                    if not res:
                                                                        rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.13]", arr_94_lpath if path is not None else None))
                                                                    if not res:
                                                                        # .'$platforms'.0.'|'.14
                                                                        res = _jm_obj_126(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                        if not res:
                                                                            rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.14]", arr_94_lpath if path is not None else None))
                                                                        if not res:
                                                                            # .'$platforms'.0.'|'.15
                                                                            res = _jm_obj_125(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                            if not res:
                                                                                rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.15]", arr_94_lpath if path is not None else None))
                                                                            if not res:
                                                                                # .'$platforms'.0.'|'.16
                                                                                res = _jm_obj_124(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                if not res:
                                                                                    rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.16]", arr_94_lpath if path is not None else None))
                                                                                if not res:
                                                                                    # .'$platforms'.0.'|'.17
                                                                                    res = _jm_obj_123(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                    if not res:
                                                                                        rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.17]", arr_94_lpath if path is not None else None))
                                                                                    if not res:
                                                                                        # .'$platforms'.0.'|'.18
                                                                                        res = _jm_obj_122(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                        if not res:
                                                                                            rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.18]", arr_94_lpath if path is not None else None))
                                                                                        if not res:
                                                                                            # .'$platforms'.0.'|'.19
                                                                                            res = _jm_obj_121(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                            if not res:
                                                                                                rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.19]", arr_94_lpath if path is not None else None))
                                                                                            if not res:
                                                                                                # .'$platforms'.0.'|'.20
                                                                                                res = _jm_obj_120(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                if not res:
                                                                                                    rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.20]", arr_94_lpath if path is not None else None))
                                                                                                if not res:
                                                                                                    # .'$platforms'.0.'|'.21
                                                                                                    res = _jm_obj_119(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                    if not res:
                                                                                                        rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.21]", arr_94_lpath if path is not None else None))
                                                                                                    if not res:
                                                                                                        # .'$platforms'.0.'|'.22
                                                                                                        res = _jm_obj_118(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                        if not res:
                                                                                                            rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.22]", arr_94_lpath if path is not None else None))
                                                                                                        if not res:
                                                                                                            # .'$platforms'.0.'|'.23
                                                                                                            res = _jm_obj_117(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                            if not res:
                                                                                                                rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.23]", arr_94_lpath if path is not None else None))
                                                                                                            if not res:
                                                                                                                # .'$platforms'.0.'|'.24
                                                                                                                res = _jm_obj_116(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                if not res:
                                                                                                                    rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.24]", arr_94_lpath if path is not None else None))
                                                                                                                if not res:
                                                                                                                    # .'$platforms'.0.'|'.25
                                                                                                                    res = _jm_obj_115(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                    if not res:
                                                                                                                        rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.25]", arr_94_lpath if path is not None else None))
                                                                                                                    if not res:
                                                                                                                        # .'$platforms'.0.'|'.26
                                                                                                                        res = _jm_obj_114(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                        if not res:
                                                                                                                            rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.26]", arr_94_lpath if path is not None else None))
                                                                                                                        if not res:
                                                                                                                            # .'$platforms'.0.'|'.27
                                                                                                                            res = _jm_obj_113(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                            if not res:
                                                                                                                                rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.27]", arr_94_lpath if path is not None else None))
                                                                                                                            if not res:
                                                                                                                                # .'$platforms'.0.'|'.28
                                                                                                                                res = _jm_obj_112(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                if not res:
                                                                                                                                    rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.28]", arr_94_lpath if path is not None else None))
                                                                                                                                if not res:
                                                                                                                                    # .'$platforms'.0.'|'.29
                                                                                                                                    res = _jm_obj_111(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                    if not res:
                                                                                                                                        rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.29]", arr_94_lpath if path is not None else None))
                                                                                                                                    if not res:
                                                                                                                                        # .'$platforms'.0.'|'.30
                                                                                                                                        res = _jm_obj_110(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                        if not res:
                                                                                                                                            rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.30]", arr_94_lpath if path is not None else None))
                                                                                                                                        if not res:
                                                                                                                                            # .'$platforms'.0.'|'.31
                                                                                                                                            res = _jm_obj_109(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                            if not res:
                                                                                                                                                rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.31]", arr_94_lpath if path is not None else None))
                                                                                                                                            if not res:
                                                                                                                                                # .'$platforms'.0.'|'.32
                                                                                                                                                res = _jm_obj_108(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                if not res:
                                                                                                                                                    rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.32]", arr_94_lpath if path is not None else None))
                                                                                                                                                if not res:
                                                                                                                                                    # .'$platforms'.0.'|'.33
                                                                                                                                                    res = _jm_obj_107(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                    if not res:
                                                                                                                                                        rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.33]", arr_94_lpath if path is not None else None))
                                                                                                                                                    if not res:
                                                                                                                                                        # .'$platforms'.0.'|'.34
                                                                                                                                                        res = _jm_obj_106(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                        if not res:
                                                                                                                                                            rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.34]", arr_94_lpath if path is not None else None))
                                                                                                                                                        if not res:
                                                                                                                                                            # .'$platforms'.0.'|'.35
                                                                                                                                                            res = _jm_obj_105(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                            if not res:
                                                                                                                                                                rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.35]", arr_94_lpath if path is not None else None))
                                                                                                                                                            if not res:
                                                                                                                                                                # .'$platforms'.0.'|'.36
                                                                                                                                                                res = _jm_obj_104(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                                if not res:
                                                                                                                                                                    rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.36]", arr_94_lpath if path is not None else None))
                                                                                                                                                                if not res:
                                                                                                                                                                    # .'$platforms'.0.'|'.37
                                                                                                                                                                    res = _jm_obj_103(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                                    if not res:
                                                                                                                                                                        rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.37]", arr_94_lpath if path is not None else None))
                                                                                                                                                                    if not res:
                                                                                                                                                                        # .'$platforms'.0.'|'.38
                                                                                                                                                                        res = _jm_obj_102(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                                        if not res:
                                                                                                                                                                            rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.38]", arr_94_lpath if path is not None else None))
                                                                                                                                                                        if not res:
                                                                                                                                                                            # .'$platforms'.0.'|'.39
                                                                                                                                                                            res = _jm_obj_101(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                                            if not res:
                                                                                                                                                                                rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.39]", arr_94_lpath if path is not None else None))
                                                                                                                                                                            if not res:
                                                                                                                                                                                # .'$platforms'.0.'|'.40
                                                                                                                                                                                res = _jm_obj_100(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                                                if not res:
                                                                                                                                                                                    rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.40]", arr_94_lpath if path is not None else None))
                                                                                                                                                                                if not res:
                                                                                                                                                                                    # .'$platforms'.0.'|'.41
                                                                                                                                                                                    res = _jm_obj_99(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                                                    if not res:
                                                                                                                                                                                        rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.41]", arr_94_lpath if path is not None else None))
                                                                                                                                                                                    if not res:
                                                                                                                                                                                        # .'$platforms'.0.'|'.42
                                                                                                                                                                                        res = _jm_obj_98(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                                                        if not res:
                                                                                                                                                                                            rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.42]", arr_94_lpath if path is not None else None))
                                                                                                                                                                                        if not res:
                                                                                                                                                                                            # .'$platforms'.0.'|'.43
                                                                                                                                                                                            res = _jm_obj_97(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                                                            if not res:
                                                                                                                                                                                                rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.43]", arr_94_lpath if path is not None else None))
                                                                                                                                                                                            if not res:
                                                                                                                                                                                                # .'$platforms'.0.'|'.44
                                                                                                                                                                                                res = _jm_obj_96(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                                                                if not res:
                                                                                                                                                                                                    rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.44]", arr_94_lpath if path is not None else None))
                                                                                                                                                                                                if not res:
                                                                                                                                                                                                    # .'$platforms'.0.'|'.45
                                                                                                                                                                                                    res = _jm_obj_95(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                                                                    if not res:
                                                                                                                                                                                                        rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.45]", arr_94_lpath if path is not None else None))
                                                                                                                                                                                                    if not res:
                                                                                                                                                                                                        # .'$platforms'.0.'|'.46
                                                                                                                                                                                                        res = _jm_obj_94(arr_94_item, arr_94_lpath if path is not None else None, rep)
                                                                                                                                                                                                        if not res:
                                                                                                                                                                                                            rep is None or rep.append(("unexpected element [.'$platforms'.0.'|'.46]", arr_94_lpath if path is not None else None))
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("no model matched [.'$platforms'.0.'|']", arr_94_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$platforms']", path))
    return res

# check _jm_obj_141_map_cloud_platforms (.'$GalaxyInfoModelCollection'.cloud_platforms)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelCollection'.cloud_platforms
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$GalaxyInfoModelCollection'.cloud_platforms]", path))
    return res

# check _jm_obj_141_map_galaxy_tags (.'$GalaxyInfoModelCollection'.galaxy_tags)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelCollection'.galaxy_tags
    res = isinstance(val, list)
    if res:
        for arr_142_idx, arr_142_item in enumerate(val):
            arr_142_lpath: Path = (path + [ arr_142_idx ]) if path is not None else None
            # .'$GalaxyInfoModelCollection'.galaxy_tags.0
            res = isinstance(arr_142_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelCollection'.galaxy_tags.0]", arr_142_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$GalaxyInfoModelCollection'.galaxy_tags]", path))
    return res

# check _jm_obj_141_map_min_ansible_version (.'$GalaxyInfoModelCollection'.min_ansible_version)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelCollection'.min_ansible_version
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelCollection'.min_ansible_version]", path))
    return res


# check _jm_obj_141_map_namespace (.'$GalaxyInfoModelCollection'.namespace)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelCollection'.namespace
    # "/^[a-z][-a-z0-9_]+$/"
    res = isinstance(val, str) and _jm_re_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[a-z][-a-z0-9_]+$/ [.'$GalaxyInfoModelCollection'.namespace]", path))
    return res

# check _jm_obj_141_map_platforms (.'$GalaxyInfoModelCollection'.platforms)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelCollection'.platforms
    res = json_model_50(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $platforms [.'$GalaxyInfoModelCollection'.platforms]", path))
    return res


# check _jm_obj_141_map_role_name (.'$GalaxyInfoModelCollection'.role_name)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelCollection'.role_name
    # "/^[a-z][a-z0-9_]+$/"
    res = isinstance(val, str) and _jm_re_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[a-z][a-z0-9_]+$/ [.'$GalaxyInfoModelCollection'.role_name]", path))
    return res

# check _jm_obj_141_map_video_links (.'$GalaxyInfoModelCollection'.video_links)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelCollection'.video_links
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$GalaxyInfoModelCollection'.video_links]", path))
    return res


# object .'$GalaxyInfoModelCollection'
def _jm_obj_141(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$GalaxyInfoModelCollection']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_94: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_141_map.get(prop):
            # handle 7 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_94 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$GalaxyInfoModelCollection']", lpath_94 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$GalaxyInfoModelCollection']", lpath_94 if path is not None else None))
            return False
    return True

# check $GalaxyInfoModelCollection (.'$GalaxyInfoModelCollection')
def json_model_51(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelCollection'
    res = _jm_obj_141(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$GalaxyInfoModelCollection']", path))
    return res

# check _jm_obj_142_map_author (.'$GalaxyInfoModelLoose'.author)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelLoose'.author
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelLoose'.author]", path))
    return res

# check _jm_obj_142_map_company (.'$GalaxyInfoModelLoose'.company)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelLoose'.company
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelLoose'.company]", path))
    return res

# check _jm_obj_142_map_github_branch (.'$GalaxyInfoModelLoose'.github_branch)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelLoose'.github_branch
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelLoose'.github_branch]", path))
    return res

# check _jm_obj_142_map_issue_tracker_url (.'$GalaxyInfoModelLoose'.issue_tracker_url)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelLoose'.issue_tracker_url
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelLoose'.issue_tracker_url]", path))
    return res

# check _jm_obj_142_map_license (.'$GalaxyInfoModelLoose'.license)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelLoose'.license
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelLoose'.license]", path))
    return res

# check _jm_obj_142_map_min_ansible_container_version (.'$GalaxyInfoModelLoose'.min_ansible_container_version)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelLoose'.min_ansible_container_version
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelLoose'.min_ansible_container_version]", path))
    return res


# object .'$GalaxyInfoModelLoose'
def _jm_obj_142(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$GalaxyInfoModelLoose']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_95: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle must description property
            must_count += 1
            # .'$GalaxyInfoModelLoose'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelLoose'.description]", lpath_95 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModelLoose'.description]", lpath_95 if path is not None else None))
                return False
        elif pfun := _jm_obj_142_map.get(prop):
            # handle 6 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_95 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$GalaxyInfoModelLoose']", lpath_95 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$GalaxyInfoModelLoose']", lpath_95 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "description" in val:
                rep is None or rep.append(("missing mandatory prop <description> [.'$GalaxyInfoModelLoose']", path))
        return False
    return True

# check $GalaxyInfoModelLoose (.'$GalaxyInfoModelLoose')
def json_model_52(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # some $URL should be added?
    # .'$GalaxyInfoModelLoose'
    res = _jm_obj_142(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$GalaxyInfoModelLoose']", path))
    return res

# check _jm_obj_143_map_cloud_platforms (.'$GalaxyInfoModelStandalone'.cloud_platforms)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelStandalone'.cloud_platforms
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$GalaxyInfoModelStandalone'.cloud_platforms]", path))
    return res

# check _jm_obj_143_map_company (.'$GalaxyInfoModelStandalone'.company)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelStandalone'.company
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelStandalone'.company]", path))
    return res

# check _jm_obj_143_map_galaxy_tags (.'$GalaxyInfoModelStandalone'.galaxy_tags)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelStandalone'.galaxy_tags
    res = isinstance(val, list)
    if res:
        for arr_143_idx, arr_143_item in enumerate(val):
            arr_143_lpath: Path = (path + [ arr_143_idx ]) if path is not None else None
            # .'$GalaxyInfoModelStandalone'.galaxy_tags.0
            res = isinstance(arr_143_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelStandalone'.galaxy_tags.0]", arr_143_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$GalaxyInfoModelStandalone'.galaxy_tags]", path))
    return res

# check _jm_obj_143_map_github_branch (.'$GalaxyInfoModelStandalone'.github_branch)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelStandalone'.github_branch
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelStandalone'.github_branch]", path))
    return res

# check _jm_obj_143_map_issue_tracker_url (.'$GalaxyInfoModelStandalone'.issue_tracker_url)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelStandalone'.issue_tracker_url
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelStandalone'.issue_tracker_url]", path))
    return res

# check _jm_obj_143_map_min_ansible_container_version (.'$GalaxyInfoModelStandalone'.min_ansible_container_version)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelStandalone'.min_ansible_container_version
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelStandalone'.min_ansible_container_version]", path))
    return res

# check _jm_obj_143_map_namespace (.'$GalaxyInfoModelStandalone'.namespace)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelStandalone'.namespace
    # "/^[a-z][-a-z0-9_]+$/"
    res = isinstance(val, str) and _jm_re_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[a-z][-a-z0-9_]+$/ [.'$GalaxyInfoModelStandalone'.namespace]", path))
    return res

# check _jm_obj_143_map_platforms (.'$GalaxyInfoModelStandalone'.platforms)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelStandalone'.platforms
    res = json_model_50(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $platforms [.'$GalaxyInfoModelStandalone'.platforms]", path))
    return res

# check _jm_obj_143_map_role_name (.'$GalaxyInfoModelStandalone'.role_name)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelStandalone'.role_name
    # "/^[a-z][a-z0-9_]+$/"
    res = isinstance(val, str) and _jm_re_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[a-z][a-z0-9_]+$/ [.'$GalaxyInfoModelStandalone'.role_name]", path))
    return res

# check _jm_obj_143_map_video_links (.'$GalaxyInfoModelStandalone'.video_links)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelStandalone'.video_links
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$GalaxyInfoModelStandalone'.video_links]", path))
    return res


# object .'$GalaxyInfoModelStandalone'
def _jm_obj_143(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$GalaxyInfoModelStandalone']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_96: Path = (path + [ prop ]) if path is not None else None
        if prop == "standalone":
            # handle must standalone property
            must_count += 1
            # .'$GalaxyInfoModelStandalone'.standalone
            res = isinstance(pval, bool) and pval == True
            if not res:
                rep is None or rep.append(("unexpected =true [.'$GalaxyInfoModelStandalone'.standalone]", lpath_96 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModelStandalone'.standalone]", lpath_96 if path is not None else None))
                return False
        elif prop == "description":
            # handle must description property
            must_count += 1
            # .'$GalaxyInfoModelStandalone'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelStandalone'.description]", lpath_96 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModelStandalone'.description]", lpath_96 if path is not None else None))
                return False
        elif prop == "author":
            # handle must author property
            must_count += 1
            # .'$GalaxyInfoModelStandalone'.author
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelStandalone'.author]", lpath_96 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModelStandalone'.author]", lpath_96 if path is not None else None))
                return False
        elif prop == "license":
            # handle must license property
            must_count += 1
            # .'$GalaxyInfoModelStandalone'.license
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelStandalone'.license]", lpath_96 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModelStandalone'.license]", lpath_96 if path is not None else None))
                return False
        elif prop == "min_ansible_version":
            # handle must min_ansible_version property
            must_count += 1
            # .'$GalaxyInfoModelStandalone'.min_ansible_version
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModelStandalone'.min_ansible_version]", lpath_96 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModelStandalone'.min_ansible_version]", lpath_96 if path is not None else None))
                return False
        elif pfun := _jm_obj_143_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_96 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$GalaxyInfoModelStandalone']", lpath_96 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$GalaxyInfoModelStandalone']", lpath_96 if path is not None else None))
            return False
    if must_count != 5:
        if rep is not None:
            if not ("author" in val):
                rep is None or rep.append(("missing mandatory prop <author> [.'$GalaxyInfoModelStandalone']", path))
            if not "description" in val:
                rep is None or rep.append(("missing mandatory prop <description> [.'$GalaxyInfoModelStandalone']", path))
            if not "license" in val:
                rep is None or rep.append(("missing mandatory prop <license> [.'$GalaxyInfoModelStandalone']", path))
            if not "min_ansible_version" in val:
                rep is None or rep.append(("missing mandatory prop <min_ansible_version> [.'$GalaxyInfoModelStandalone']", path))
            if not ("standalone" in val):
                rep is None or rep.append(("missing mandatory prop <standalone> [.'$GalaxyInfoModelStandalone']", path))
        return False
    return True

# check $GalaxyInfoModelStandalone (.'$GalaxyInfoModelStandalone')
def json_model_53(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModelStandalone'
    res = _jm_obj_143(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$GalaxyInfoModelStandalone']", path))
    return res

# check _jm_obj_144_map_author (.'$GalaxyInfoModel'.'|'.2.author)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.2.author
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.2.author]", path))
    return res

# check _jm_obj_144_map_cloud_platforms (.'$GalaxyInfoModel'.'|'.2.cloud_platforms)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.2.cloud_platforms
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$GalaxyInfoModel'.'|'.2.cloud_platforms]", path))
    return res

# check _jm_obj_144_map_company (.'$GalaxyInfoModel'.'|'.2.company)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.2.company
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.2.company]", path))
    return res

# check _jm_obj_144_map_galaxy_tags (.'$GalaxyInfoModel'.'|'.2.galaxy_tags)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.2.galaxy_tags
    res = isinstance(val, list)
    if res:
        for arr_144_idx, arr_144_item in enumerate(val):
            arr_144_lpath: Path = (path + [ arr_144_idx ]) if path is not None else None
            # .'$GalaxyInfoModel'.'|'.2.galaxy_tags.0
            res = isinstance(arr_144_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.2.galaxy_tags.0]", arr_144_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$GalaxyInfoModel'.'|'.2.galaxy_tags]", path))
    return res

# check _jm_obj_144_map_github_branch (.'$GalaxyInfoModel'.'|'.2.github_branch)
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.2.github_branch
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.2.github_branch]", path))
    return res

# check _jm_obj_144_map_issue_tracker_url (.'$GalaxyInfoModel'.'|'.2.issue_tracker_url)
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.2.issue_tracker_url
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.2.issue_tracker_url]", path))
    return res

# check _jm_obj_144_map_license (.'$GalaxyInfoModel'.'|'.2.license)
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.2.license
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.2.license]", path))
    return res

# check _jm_obj_144_map_min_ansible_container_version (.'$GalaxyInfoModel'.'|'.2.min_ansible_container_version)
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.2.min_ansible_container_version
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.2.min_ansible_container_version]", path))
    return res

# check _jm_obj_144_map_min_ansible_version (.'$GalaxyInfoModel'.'|'.2.min_ansible_version)
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.2.min_ansible_version
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.2.min_ansible_version]", path))
    return res

# check _jm_obj_144_map_namespace (.'$GalaxyInfoModel'.'|'.2.namespace)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.2.namespace
    # "/^[a-z][-a-z0-9_]+$/"
    res = isinstance(val, str) and _jm_re_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[a-z][-a-z0-9_]+$/ [.'$GalaxyInfoModel'.'|'.2.namespace]", path))
    return res

# check _jm_obj_144_map_platforms (.'$GalaxyInfoModel'.'|'.2.platforms)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.2.platforms
    res = json_model_50(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $platforms [.'$GalaxyInfoModel'.'|'.2.platforms]", path))
    return res

# check _jm_obj_144_map_role_name (.'$GalaxyInfoModel'.'|'.2.role_name)
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.2.role_name
    # "/^[a-z][a-z0-9_]+$/"
    res = isinstance(val, str) and _jm_re_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[a-z][a-z0-9_]+$/ [.'$GalaxyInfoModel'.'|'.2.role_name]", path))
    return res

# check _jm_obj_144_map_video_links (.'$GalaxyInfoModel'.'|'.2.video_links)
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.2.video_links
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$GalaxyInfoModel'.'|'.2.video_links]", path))
    return res


# object .'$GalaxyInfoModel'.'|'.2
def _jm_obj_144(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$GalaxyInfoModel'.'|'.2]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_97: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle must description property
            must_count += 1
            # .'$GalaxyInfoModel'.'|'.2.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.2.description]", lpath_97 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModel'.'|'.2.description]", lpath_97 if path is not None else None))
                return False
        elif pfun := _jm_obj_144_map.get(prop):
            # handle 13 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_97 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$GalaxyInfoModel'.'|'.2]", lpath_97 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$GalaxyInfoModel'.'|'.2]", lpath_97 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "description" in val:
                rep is None or rep.append(("missing mandatory prop <description> [.'$GalaxyInfoModel'.'|'.2]", path))
        return False
    return True

# check _jm_obj_145_map_author (.'$GalaxyInfoModel'.'|'.1.author)
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.1.author
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.1.author]", path))
    return res

# check _jm_obj_145_map_cloud_platforms (.'$GalaxyInfoModel'.'|'.1.cloud_platforms)
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.1.cloud_platforms
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$GalaxyInfoModel'.'|'.1.cloud_platforms]", path))
    return res

# check _jm_obj_145_map_company (.'$GalaxyInfoModel'.'|'.1.company)
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.1.company
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.1.company]", path))
    return res

# check _jm_obj_145_map_galaxy_tags (.'$GalaxyInfoModel'.'|'.1.galaxy_tags)
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.1.galaxy_tags
    res = isinstance(val, list)
    if res:
        for arr_145_idx, arr_145_item in enumerate(val):
            arr_145_lpath: Path = (path + [ arr_145_idx ]) if path is not None else None
            # .'$GalaxyInfoModel'.'|'.1.galaxy_tags.0
            res = isinstance(arr_145_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.1.galaxy_tags.0]", arr_145_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$GalaxyInfoModel'.'|'.1.galaxy_tags]", path))
    return res

# check _jm_obj_145_map_github_branch (.'$GalaxyInfoModel'.'|'.1.github_branch)
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.1.github_branch
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.1.github_branch]", path))
    return res

# check _jm_obj_145_map_issue_tracker_url (.'$GalaxyInfoModel'.'|'.1.issue_tracker_url)
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.1.issue_tracker_url
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.1.issue_tracker_url]", path))
    return res

# check _jm_obj_145_map_license (.'$GalaxyInfoModel'.'|'.1.license)
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.1.license
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.1.license]", path))
    return res

# check _jm_obj_145_map_min_ansible_container_version (.'$GalaxyInfoModel'.'|'.1.min_ansible_container_version)
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.1.min_ansible_container_version
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.1.min_ansible_container_version]", path))
    return res

# check _jm_obj_145_map_min_ansible_version (.'$GalaxyInfoModel'.'|'.1.min_ansible_version)
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.1.min_ansible_version
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.1.min_ansible_version]", path))
    return res

# check _jm_obj_145_map_namespace (.'$GalaxyInfoModel'.'|'.1.namespace)
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.1.namespace
    # "/^[a-z][-a-z0-9_]+$/"
    res = isinstance(val, str) and _jm_re_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[a-z][-a-z0-9_]+$/ [.'$GalaxyInfoModel'.'|'.1.namespace]", path))
    return res

# check _jm_obj_145_map_platforms (.'$GalaxyInfoModel'.'|'.1.platforms)
def _jm_f_46(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.1.platforms
    res = json_model_50(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $platforms [.'$GalaxyInfoModel'.'|'.1.platforms]", path))
    return res

# check _jm_obj_145_map_role_name (.'$GalaxyInfoModel'.'|'.1.role_name)
def _jm_f_47(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.1.role_name
    # "/^[a-z][a-z0-9_]+$/"
    res = isinstance(val, str) and _jm_re_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[a-z][a-z0-9_]+$/ [.'$GalaxyInfoModel'.'|'.1.role_name]", path))
    return res

# check _jm_obj_145_map_video_links (.'$GalaxyInfoModel'.'|'.1.video_links)
def _jm_f_48(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.1.video_links
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$GalaxyInfoModel'.'|'.1.video_links]", path))
    return res


# object .'$GalaxyInfoModel'.'|'.1
def _jm_obj_145(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$GalaxyInfoModel'.'|'.1]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_98: Path = (path + [ prop ]) if path is not None else None
        if prop == "standalone":
            # handle must standalone property
            must_count += 1
            # .'$GalaxyInfoModel'.'|'.1.standalone
            res = isinstance(pval, bool) and pval == False
            if not res:
                rep is None or rep.append(("unexpected =false [.'$GalaxyInfoModel'.'|'.1.standalone]", lpath_98 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModel'.'|'.1.standalone]", lpath_98 if path is not None else None))
                return False
        elif prop == "description":
            # handle must description property
            must_count += 1
            # .'$GalaxyInfoModel'.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.1.description]", lpath_98 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModel'.'|'.1.description]", lpath_98 if path is not None else None))
                return False
        elif pfun := _jm_obj_145_map.get(prop):
            # handle 13 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_98 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$GalaxyInfoModel'.'|'.1]", lpath_98 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$GalaxyInfoModel'.'|'.1]", lpath_98 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "description" in val:
                rep is None or rep.append(("missing mandatory prop <description> [.'$GalaxyInfoModel'.'|'.1]", path))
            if not ("standalone" in val):
                rep is None or rep.append(("missing mandatory prop <standalone> [.'$GalaxyInfoModel'.'|'.1]", path))
        return False
    return True

# check _jm_obj_146_map_cloud_platforms (.'$GalaxyInfoModel'.'|'.0.cloud_platforms)
def _jm_f_49(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.0.cloud_platforms
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$GalaxyInfoModel'.'|'.0.cloud_platforms]", path))
    return res

# check _jm_obj_146_map_company (.'$GalaxyInfoModel'.'|'.0.company)
def _jm_f_50(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.0.company
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.0.company]", path))
    return res

# check _jm_obj_146_map_galaxy_tags (.'$GalaxyInfoModel'.'|'.0.galaxy_tags)
def _jm_f_51(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.0.galaxy_tags
    res = isinstance(val, list)
    if res:
        for arr_146_idx, arr_146_item in enumerate(val):
            arr_146_lpath: Path = (path + [ arr_146_idx ]) if path is not None else None
            # .'$GalaxyInfoModel'.'|'.0.galaxy_tags.0
            res = isinstance(arr_146_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.0.galaxy_tags.0]", arr_146_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$GalaxyInfoModel'.'|'.0.galaxy_tags]", path))
    return res

# check _jm_obj_146_map_github_branch (.'$GalaxyInfoModel'.'|'.0.github_branch)
def _jm_f_52(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.0.github_branch
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.0.github_branch]", path))
    return res

# check _jm_obj_146_map_issue_tracker_url (.'$GalaxyInfoModel'.'|'.0.issue_tracker_url)
def _jm_f_53(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.0.issue_tracker_url
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.0.issue_tracker_url]", path))
    return res

# check _jm_obj_146_map_min_ansible_container_version (.'$GalaxyInfoModel'.'|'.0.min_ansible_container_version)
def _jm_f_54(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.0.min_ansible_container_version
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.0.min_ansible_container_version]", path))
    return res

# check _jm_obj_146_map_namespace (.'$GalaxyInfoModel'.'|'.0.namespace)
def _jm_f_55(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.0.namespace
    # "/^[a-z][-a-z0-9_]+$/"
    res = isinstance(val, str) and _jm_re_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[a-z][-a-z0-9_]+$/ [.'$GalaxyInfoModel'.'|'.0.namespace]", path))
    return res

# check _jm_obj_146_map_platforms (.'$GalaxyInfoModel'.'|'.0.platforms)
def _jm_f_56(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.0.platforms
    res = json_model_50(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $platforms [.'$GalaxyInfoModel'.'|'.0.platforms]", path))
    return res

# check _jm_obj_146_map_role_name (.'$GalaxyInfoModel'.'|'.0.role_name)
def _jm_f_57(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.0.role_name
    # "/^[a-z][a-z0-9_]+$/"
    res = isinstance(val, str) and _jm_re_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[a-z][a-z0-9_]+$/ [.'$GalaxyInfoModel'.'|'.0.role_name]", path))
    return res

# check _jm_obj_146_map_video_links (.'$GalaxyInfoModel'.'|'.0.video_links)
def _jm_f_58(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$GalaxyInfoModel'.'|'.0.video_links
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$GalaxyInfoModel'.'|'.0.video_links]", path))
    return res


# object .'$GalaxyInfoModel'.'|'.0
def _jm_obj_146(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$GalaxyInfoModel'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_99: Path = (path + [ prop ]) if path is not None else None
        if prop == "standalone":
            # handle must standalone property
            must_count += 1
            # .'$GalaxyInfoModel'.'|'.0.standalone
            res = isinstance(pval, bool) and pval == True
            if not res:
                rep is None or rep.append(("unexpected =true [.'$GalaxyInfoModel'.'|'.0.standalone]", lpath_99 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModel'.'|'.0.standalone]", lpath_99 if path is not None else None))
                return False
        elif prop == "description":
            # handle must description property
            must_count += 1
            # .'$GalaxyInfoModel'.'|'.0.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.0.description]", lpath_99 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModel'.'|'.0.description]", lpath_99 if path is not None else None))
                return False
        elif prop == "author":
            # handle must author property
            must_count += 1
            # .'$GalaxyInfoModel'.'|'.0.author
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.0.author]", lpath_99 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModel'.'|'.0.author]", lpath_99 if path is not None else None))
                return False
        elif prop == "license":
            # handle must license property
            must_count += 1
            # .'$GalaxyInfoModel'.'|'.0.license
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.0.license]", lpath_99 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModel'.'|'.0.license]", lpath_99 if path is not None else None))
                return False
        elif prop == "min_ansible_version":
            # handle must min_ansible_version property
            must_count += 1
            # .'$GalaxyInfoModel'.'|'.0.min_ansible_version
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$GalaxyInfoModel'.'|'.0.min_ansible_version]", lpath_99 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$GalaxyInfoModel'.'|'.0.min_ansible_version]", lpath_99 if path is not None else None))
                return False
        elif pfun := _jm_obj_146_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_99 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$GalaxyInfoModel'.'|'.0]", lpath_99 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$GalaxyInfoModel'.'|'.0]", lpath_99 if path is not None else None))
            return False
    if must_count != 5:
        if rep is not None:
            if not ("author" in val):
                rep is None or rep.append(("missing mandatory prop <author> [.'$GalaxyInfoModel'.'|'.0]", path))
            if not "description" in val:
                rep is None or rep.append(("missing mandatory prop <description> [.'$GalaxyInfoModel'.'|'.0]", path))
            if not "license" in val:
                rep is None or rep.append(("missing mandatory prop <license> [.'$GalaxyInfoModel'.'|'.0]", path))
            if not "min_ansible_version" in val:
                rep is None or rep.append(("missing mandatory prop <min_ansible_version> [.'$GalaxyInfoModel'.'|'.0]", path))
            if not ("standalone" in val):
                rep is None or rep.append(("missing mandatory prop <standalone> [.'$GalaxyInfoModel'.'|'.0]", path))
        return False
    return True

# check $GalaxyInfoModel (.'$GalaxyInfoModel')
def json_model_54(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # hmmmm, property standalone should probably be required…
    # .'$GalaxyInfoModel'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$GalaxyInfoModel'.'|']", path))
    if res:
        # .'$GalaxyInfoModel'.'|'.0
        res = _jm_obj_146(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$GalaxyInfoModel'.'|'.0]", path))
        if not res:
            # .'$GalaxyInfoModel'.'|'.1
            res = _jm_obj_145(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$GalaxyInfoModel'.'|'.1]", path))
            if not res:
                # .'$GalaxyInfoModel'.'|'.2
                res = _jm_obj_144(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$GalaxyInfoModel'.'|'.2]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$GalaxyInfoModel'.'|']", path))
    return res


# check $collections (.'$collections')
def json_model_55(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$collections'
    res = isinstance(val, list)
    if res:
        for arr_147_idx, arr_147_item in enumerate(val):
            arr_147_lpath: Path = (path + [ arr_147_idx ]) if path is not None else None
            # .'$collections'.0
            # "/^[a-z_]+\\.[a-z_]+$/"
            res = isinstance(arr_147_item, str) and _jm_re_2(arr_147_item, arr_147_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^[a-z_]+\\.[a-z_]+$/ [.'$collections'.0]", arr_147_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$collections']", path))
    return res

# check $complex_conditional (.'$complex_conditional')
def json_model_56(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$complex_conditional'
    # .'$complex_conditional'.'|'.0
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$complex_conditional'.'|'.0]", path))
    if not res:
        # .'$complex_conditional'.'|'.1
        res = isinstance(val, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$complex_conditional'.'|'.1]", path))
        if not res:
            # .'$complex_conditional'.'|'.2
            res = isinstance(val, list)
            if res:
                for arr_148_idx, arr_148_item in enumerate(val):
                    arr_148_lpath: Path = (path + [ arr_148_idx ]) if path is not None else None
                    # .'$complex_conditional'.'|'.2.0
                    res = isinstance(arr_148_item, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$complex_conditional'.'|'.2.0]", arr_148_lpath if path is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$complex_conditional'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$complex_conditional'.'|']", path))
    return res


# object .'$DependencyModelLoose'.vars
def _jm_obj_148(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$DependencyModelLoose'.vars]", path))
        return False
    # accept any object
    return True

# object .'$DependencyModelLoose'
def _jm_obj_147(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$DependencyModelLoose']", path))
        return False
    pval: Jsonable
    res: bool
    if "become" in val:
        pval = val.get("become", UNDEFINED)
        # .'$DependencyModelLoose'.become
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$DependencyModelLoose'.become]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <become> [.'$DependencyModelLoose']", path))
            return False
    if "name" in val:
        pval = val.get("name", UNDEFINED)
        # .'$DependencyModelLoose'.name
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$DependencyModelLoose'.name]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <name> [.'$DependencyModelLoose']", path))
            return False
    if "role" in val:
        pval = val.get("role", UNDEFINED)
        # .'$DependencyModelLoose'.role
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$DependencyModelLoose'.role]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <role> [.'$DependencyModelLoose']", path))
            return False
    if "src" in val:
        pval = val.get("src", UNDEFINED)
        # .'$DependencyModelLoose'.src
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$DependencyModelLoose'.src]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <src> [.'$DependencyModelLoose']", path))
            return False
    if "scm" in val:
        pval = val.get("scm", UNDEFINED)
        # .'$DependencyModelLoose'.scm
        res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_96
        if not res:
            rep is None or rep.append(("value not in enum [.'$DependencyModelLoose'.scm.'|']", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <scm> [.'$DependencyModelLoose']", path))
            return False
    if "tags" in val:
        pval = val.get("tags", UNDEFINED)
        # .'$DependencyModelLoose'.tags
        # .'$DependencyModelLoose'.tags.'|'.0
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$DependencyModelLoose'.tags.'|'.0]", path))
        if not res:
            # .'$DependencyModelLoose'.tags.'|'.1
            res = isinstance(pval, list)
            if res:
                for arr_149_idx, arr_149_item in enumerate(pval):
                    arr_149_lpath: Path = (path + [ arr_149_idx ]) if path is not None else None
                    # .'$DependencyModelLoose'.tags.'|'.1.0
                    res = isinstance(arr_149_item, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$DependencyModelLoose'.tags.'|'.1.0]", arr_149_lpath if path is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$DependencyModelLoose'.tags.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$DependencyModelLoose'.tags.'|']", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <tags> [.'$DependencyModelLoose']", path))
            return False
    if "vars" in val:
        pval = val.get("vars", UNDEFINED)
        # .'$DependencyModelLoose'.vars
        res = _jm_obj_148(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$DependencyModelLoose'.vars]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <vars> [.'$DependencyModelLoose']", path))
            return False
    if "version" in val:
        pval = val.get("version", UNDEFINED)
        # .'$DependencyModelLoose'.version
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$DependencyModelLoose'.version]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <version> [.'$DependencyModelLoose']", path))
            return False
    if "when" in val:
        pval = val.get("when", UNDEFINED)
        # .'$DependencyModelLoose'.when
        res = json_model_56(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $complex_conditional [.'$DependencyModelLoose'.when]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <when> [.'$DependencyModelLoose']", path))
            return False
    return True

# check $DependencyModelLoose (.'$DependencyModelLoose')
def json_model_57(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # See https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html#role-dependencies and https://github.com/ansible/ansible/blob/devel/lib/ansible/playbook/role/metadata.py#L79
    # 
    # Other keys are treated as role [parameters](https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html#passing-different-parameters).
    # .'$DependencyModelLoose'
    res = _jm_obj_147(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$DependencyModelLoose']", path))
    return res

# object .'$DependencyModel'.'&'.1.'|'.2
def _jm_obj_149(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$DependencyModel'.'&'.1.'|'.2]", path))
        return False
    pval: Jsonable
    res: bool
    if not "name" in val:
        rep is None or rep.append(("missing mandatory prop <name> [.'$DependencyModel'.'&'.1.'|'.2]", path))
        return False
    pval = val.get("name", UNDEFINED)
    # .'$DependencyModel'.'&'.1.'|'.2.name
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$DependencyModel'.'&'.1.'|'.2.name]", path))
    if not res:
        rep is None or rep.append(("unexpected value for mandatory prop <name> [.'$DependencyModel'.'&'.1.'|'.2]", path))
        return False
    return True

# object .'$DependencyModel'.'&'.1.'|'.1
def _jm_obj_150(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$DependencyModel'.'&'.1.'|'.1]", path))
        return False
    pval: Jsonable
    res: bool
    if not "src" in val:
        rep is None or rep.append(("missing mandatory prop <src> [.'$DependencyModel'.'&'.1.'|'.1]", path))
        return False
    pval = val.get("src", UNDEFINED)
    # .'$DependencyModel'.'&'.1.'|'.1.src
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$DependencyModel'.'&'.1.'|'.1.src]", path))
    if not res:
        rep is None or rep.append(("unexpected value for mandatory prop <src> [.'$DependencyModel'.'&'.1.'|'.1]", path))
        return False
    return True

# object .'$DependencyModel'.'&'.1.'|'.0
def _jm_obj_151(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$DependencyModel'.'&'.1.'|'.0]", path))
        return False
    pval: Jsonable
    res: bool
    if not "role" in val:
        rep is None or rep.append(("missing mandatory prop <role> [.'$DependencyModel'.'&'.1.'|'.0]", path))
        return False
    pval = val.get("role", UNDEFINED)
    # .'$DependencyModel'.'&'.1.'|'.0.role
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$DependencyModel'.'&'.1.'|'.0.role]", path))
    if not res:
        rep is None or rep.append(("unexpected value for mandatory prop <role> [.'$DependencyModel'.'&'.1.'|'.0]", path))
        return False
    return True

# check $DependencyModel (.'$DependencyModel')
def json_model_58(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # add non-exclusive mandatory role, src or name props
    # .'$DependencyModel'
    res = True
    if res:
        # .'$DependencyModel'.'&'.0
        res = json_model_57(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $DependencyModelLoose [.'$DependencyModel'.'&'.0]", path))
        if res:
            # .'$DependencyModel'.'&'.1
            res = isinstance(val, dict)
            if not res:
                rep is None or rep.append(("unexpected type [.'$DependencyModel'.'&'.1.'|']", path))
            if res:
                # .'$DependencyModel'.'&'.1.'|'.0
                res = _jm_obj_151(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$DependencyModel'.'&'.1.'|'.0]", path))
                if not res:
                    # .'$DependencyModel'.'&'.1.'|'.1
                    res = _jm_obj_150(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$DependencyModel'.'&'.1.'|'.1]", path))
                    if not res:
                        # .'$DependencyModel'.'&'.1.'|'.2
                        res = _jm_obj_149(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$DependencyModel'.'&'.1.'|'.2]", path))
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("no model matched [.'$DependencyModel'.'&'.1.'|']", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not all model match [.'$DependencyModel'.'&']", path))
    return res

# object .'$AnsibleMetaObj'
def _jm_obj_152(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$AnsibleMetaObj']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_100: Path = (path + [ prop ]) if path is not None else None
        if prop == "allow_duplicates":
            # handle may allow_duplicates property
            # .'$AnsibleMetaObj'.allow_duplicates
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$AnsibleMetaObj'.allow_duplicates]", lpath_100 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AnsibleMetaObj'.allow_duplicates]", lpath_100 if path is not None else None))
                return False
        elif prop == "collections":
            # handle may collections property
            # .'$AnsibleMetaObj'.collections
            res = json_model_55(pval, lpath_100 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $collections [.'$AnsibleMetaObj'.collections]", lpath_100 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AnsibleMetaObj'.collections]", lpath_100 if path is not None else None))
                return False
        elif prop == "dependencies":
            # handle may dependencies property
            # .'$AnsibleMetaObj'.dependencies
            res = isinstance(pval, list)
            if res:
                for arr_150_idx, arr_150_item in enumerate(pval):
                    arr_150_lpath: Path = ((lpath_100 if path is not None else None) + [ arr_150_idx ]) if (lpath_100 if path is not None else None) is not None else None
                    # .'$AnsibleMetaObj'.dependencies.0
                    # .'$AnsibleMetaObj'.dependencies.0.'|'.0
                    res = isinstance(arr_150_item, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$AnsibleMetaObj'.dependencies.0.'|'.0]", arr_150_lpath if (lpath_100 if path is not None else None) is not None else None))
                    if not res:
                        # .'$AnsibleMetaObj'.dependencies.0.'|'.1
                        res = json_model_58(arr_150_item, arr_150_lpath if (lpath_100 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $DependencyModel [.'$AnsibleMetaObj'.dependencies.0.'|'.1]", arr_150_lpath if (lpath_100 if path is not None else None) is not None else None))
                    if res:
                        rep is None or rep.clear()
                    else:
                        rep is None or rep.append(("no model matched [.'$AnsibleMetaObj'.dependencies.0.'|']", arr_150_lpath if (lpath_100 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$AnsibleMetaObj'.dependencies]", lpath_100 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AnsibleMetaObj'.dependencies]", lpath_100 if path is not None else None))
                return False
        elif prop == "galaxy_info":
            # handle may galaxy_info property
            # .'$AnsibleMetaObj'.galaxy_info
            res = json_model_54(pval, lpath_100 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $GalaxyInfoModel [.'$AnsibleMetaObj'.galaxy_info]", lpath_100 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AnsibleMetaObj'.galaxy_info]", lpath_100 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$AnsibleMetaObj']", lpath_100 if path is not None else None))
            return False
    return True

# check $AnsibleMetaObj (.'$AnsibleMetaObj')
def json_model_59(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$AnsibleMetaObj'
    res = _jm_obj_152(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$AnsibleMetaObj']", path))
    return res

# object .'$AnsibleMeta'.'|'.1
def _jm_obj_153(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$AnsibleMeta'.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_101: Path = (path + [ prop ]) if path is not None else None
        if prop == "allow_duplicates":
            # handle may allow_duplicates property
            # .'$AnsibleMeta'.'|'.1.allow_duplicates
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$AnsibleMeta'.'|'.1.allow_duplicates]", lpath_101 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AnsibleMeta'.'|'.1.allow_duplicates]", lpath_101 if path is not None else None))
                return False
        elif prop == "collections":
            # handle may collections property
            # .'$AnsibleMeta'.'|'.1.collections
            res = json_model_55(pval, lpath_101 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $collections [.'$AnsibleMeta'.'|'.1.collections]", lpath_101 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AnsibleMeta'.'|'.1.collections]", lpath_101 if path is not None else None))
                return False
        elif prop == "dependencies":
            # handle may dependencies property
            # .'$AnsibleMeta'.'|'.1.dependencies
            res = isinstance(pval, list)
            if res:
                for arr_151_idx, arr_151_item in enumerate(pval):
                    arr_151_lpath: Path = ((lpath_101 if path is not None else None) + [ arr_151_idx ]) if (lpath_101 if path is not None else None) is not None else None
                    # .'$AnsibleMeta'.'|'.1.dependencies.0
                    # .'$AnsibleMeta'.'|'.1.dependencies.0.'|'.0
                    res = isinstance(arr_151_item, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$AnsibleMeta'.'|'.1.dependencies.0.'|'.0]", arr_151_lpath if (lpath_101 if path is not None else None) is not None else None))
                    if not res:
                        # .'$AnsibleMeta'.'|'.1.dependencies.0.'|'.1
                        res = json_model_58(arr_151_item, arr_151_lpath if (lpath_101 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $DependencyModel [.'$AnsibleMeta'.'|'.1.dependencies.0.'|'.1]", arr_151_lpath if (lpath_101 if path is not None else None) is not None else None))
                    if res:
                        rep is None or rep.clear()
                    else:
                        rep is None or rep.append(("no model matched [.'$AnsibleMeta'.'|'.1.dependencies.0.'|']", arr_151_lpath if (lpath_101 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$AnsibleMeta'.'|'.1.dependencies]", lpath_101 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AnsibleMeta'.'|'.1.dependencies]", lpath_101 if path is not None else None))
                return False
        elif prop == "galaxy_info":
            # handle may galaxy_info property
            # .'$AnsibleMeta'.'|'.1.galaxy_info
            res = json_model_54(pval, lpath_101 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $GalaxyInfoModel [.'$AnsibleMeta'.'|'.1.galaxy_info]", lpath_101 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$AnsibleMeta'.'|'.1.galaxy_info]", lpath_101 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$AnsibleMeta'.'|'.1]", lpath_101 if path is not None else None))
            return False
    return True

# check $AnsibleMeta (.'$AnsibleMeta')
def json_model_60(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # why null?
    # .'$AnsibleMeta'
    # .'$AnsibleMeta'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$AnsibleMeta'.'|'.0]", path))
    if not res:
        # .'$AnsibleMeta'.'|'.1
        res = _jm_obj_153(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$AnsibleMeta'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$AnsibleMeta'.'|']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $AnsibleMeta [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'6.1', '7.1', '7.2', 'all'}
        global _jm_cst_1
        _jm_cst_1 = {'1', '2', '2023', 'all'}
        global _jm_cst_2
        _jm_cst_2 = {'2013.03', '2013.09', '2014.03', '2014.09', '2015.03', '2015.09', '2016.03', '2016.09', '2017.03', '2017.09', '2017.12', '2018.03', 'Candidate', 'all'}
        global _jm_cst_3
        _jm_cst_3 = {'1.6', '1.7', '1.8', '2.12', 'all'}
        global _jm_cst_4
        _jm_cst_4 = {'2.5', '3.0', '3.1', '3.2', '3.3', '3.4', '3.5', 'all'}
        global _jm_cst_5
        _jm_cst_5 = {'all', 'bookworm', 'bullseye', 'buster', 'etch', 'jessie', 'lenny', 'sid', 'squeeze', 'stretch', 'trixie', 'wheezy'}
        global _jm_cst_6
        _jm_cst_6 = {'10', '6', '9', 'all'}
        global _jm_cst_7
        _jm_cst_7 = {'all', 'ascii', 'beowulf', 'chimaera', 'daedalus', 'jessie'}
        global _jm_cst_8
        _jm_cst_8 = {'5.2', '5.4', '5.6', '5.8', '6.0', '6.2', '6.4', 'all'}
        global _jm_cst_9
        _jm_cst_9 = {'10', '5', '6', '7', '8', '9', 'all'}
        global _jm_cst_10
        _jm_cst_10 = {'16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', 'all'}
        global _jm_cst_11
        _jm_cst_11 = {'10.0', '10.1', '10.2', '10.3', '10.4', '11.0', '11.1', '11.2', '11.3', '11.4', '12.0', '12.1', '12.2', '13.0', '13.1', '13.2', '14.0', '8.0', '8.1', '8.2', '8.3', '8.4', '9.0', '9.1', '9.2', '9.3', 'all'}
        global _jm_cst_12
        _jm_cst_12 = {'10', '11', 'all'}
        global _jm_cst_13
        _jm_cst_13 = {'2.0', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', 'all'}
        global _jm_cst_14
        _jm_cst_14 = {'10.10', '10.11', '10.12', '10.13', '10.14', '10.15', '10.7', '10.8', '10.9', 'all'}
        global _jm_cst_15
        _jm_cst_15 = {'7', '8', 'all'}
        global _jm_cst_16
        _jm_cst_16 = {'10.0', '8.0', '8.1', '8.2', '9.0', '9.1', '9.2', '9.3', 'all'}
        global _jm_cst_17
        _jm_cst_17 = {'5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', 'all'}
        global _jm_cst_18
        _jm_cst_18 = {'17.01', '18.06', '19.07', '21.02', '22.03', '23.05', '24.10', 'all'}
        global _jm_cst_19
        _jm_cst_19 = {'7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.10', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', 'all'}
        global _jm_cst_20
        _jm_cst_20 = {'7.1', '8.0', '8.1', '9.0', 'all'}
        global _jm_cst_21
        _jm_cst_21 = {'8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '9.0', '9.1', '9.2', 'all'}
        global _jm_cst_22
        _jm_cst_22 = {'10SP3', '10SP4', '11', '11SP1', '11SP2', '11SP3', '11SP4', '12', '12SP1', '12SP2', '12SP3', '12SP4', '12SP5', '15', '15SP1', '15SP2', '15SP3', '15SP4', '15SP5', '15SP6', 'all'}
        global _jm_cst_23
        _jm_cst_23 = {'10', '11.0', '11.1', '11.2', '11.3', '11.4', 'all'}
        global _jm_cst_24
        _jm_cst_24 = {'6.0', '6.1', '6.2', '7.0', 'all'}
        global _jm_cst_25
        _jm_cst_25 = {'12.1', '13.0', '13.1', '14.0', 'all'}
        global _jm_cst_26
        _jm_cst_26 = {'all', 'artful', 'bionic', 'cosmic', 'disco', 'eoan', 'focal', 'groovy', 'hirsute', 'impish', 'jammy', 'kinetic', 'lucid', 'lunar', 'mantic', 'maverick', 'natty', 'noble', 'oneiric', 'oracular', 'plucky', 'precise', 'quantal', 'raring', 'saucy', 'trusty', 'utopic', 'vivid', 'wily', 'xenial', 'yakkety', 'zesty'}
        global _jm_cst_27
        _jm_cst_27 = {'2008R2', '2008x64', '2008x86', '2012', '2012R2', '2016', '2019', '2022', '2025', 'all'}
        global _jm_cst_28
        _jm_cst_28 = {'Big-Sur', 'Catalina', 'High-Sierra', 'Mojave', 'Monterey', 'Sierra', 'Sonoma', 'Ventura', 'all'}
        global _jm_cst_29
        _jm_cst_29 = {'12.1', '12.2', '12.3', '13.1', '13.2', '15.0', '15.1', '15.2', '15.3', '15.4', '15.5', '42.1', '42.2', '42.3', 'all'}
        global _jm_cst_30
        _jm_cst_30 = {'5.5', '6.0', '6.5', '6.7', '7.0', '8.0', 'all'}
        global _jm_cst_31
        _jm_cst_31 = {'5.5', '6.0', '6.5', '6.7', '7.0', '8.0', 'all'}
        global _jm_cst_32
        _jm_cst_32 = {'2008R2', '2008x64', '2008x86', '2012', '2012R2', '2016', '2019', '2022', '2025', 'all'}
        global _jm_cst_33
        _jm_cst_33 = {'5.5', '6.0', '6.5', '6.7', '7.0', '8.0', 'all'}
        global _jm_cst_34
        _jm_cst_34 = {'5.5', '6.0', '6.5', '6.7', '7.0', '8.0', 'all'}
        global _jm_cst_35
        _jm_cst_35 = {'all', 'artful', 'bionic', 'cosmic', 'disco', 'eoan', 'focal', 'groovy', 'hirsute', 'impish', 'jammy', 'kinetic', 'lucid', 'lunar', 'mantic', 'maverick', 'natty', 'noble', 'oneiric', 'oracular', 'plucky', 'precise', 'quantal', 'raring', 'saucy', 'trusty', 'utopic', 'vivid', 'wily', 'xenial', 'yakkety', 'zesty'}
        global _jm_cst_36
        _jm_cst_36 = {'12.1', '13.0', '13.1', '14.0', 'all'}
        global _jm_cst_37
        _jm_cst_37 = {'6.0', '6.1', '6.2', '7.0', 'all'}
        global _jm_cst_38
        _jm_cst_38 = {'10', '11.0', '11.1', '11.2', '11.3', '11.4', 'all'}
        global _jm_cst_39
        _jm_cst_39 = {'10SP3', '10SP4', '11', '11SP1', '11SP2', '11SP3', '11SP4', '12', '12SP1', '12SP2', '12SP3', '12SP4', '12SP5', '15', '15SP1', '15SP2', '15SP3', '15SP4', '15SP5', '15SP6', 'all'}
        global _jm_cst_40
        _jm_cst_40 = {'8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '9.0', '9.1', '9.2', 'all'}
        global _jm_cst_41
        _jm_cst_41 = {'7.1', '8.0', '8.1', '9.0', 'all'}
        global _jm_cst_42
        _jm_cst_42 = {'7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.10', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', 'all'}
        global _jm_cst_43
        _jm_cst_43 = {'17.01', '18.06', '19.07', '21.02', '22.03', '23.05', '24.10', 'all'}
        global _jm_cst_44
        _jm_cst_44 = {'12.1', '12.2', '12.3', '13.1', '13.2', '15.0', '15.1', '15.2', '15.3', '15.4', '15.5', '42.1', '42.2', '42.3', 'all'}
        global _jm_cst_45
        _jm_cst_45 = {'5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', 'all'}
        global _jm_cst_46
        _jm_cst_46 = {'7', '8', 'all'}
        global _jm_cst_47
        _jm_cst_47 = {'10.10', '10.11', '10.12', '10.13', '10.14', '10.15', '10.7', '10.8', '10.9', 'all'}
        global _jm_cst_48
        _jm_cst_48 = {'Big-Sur', 'Catalina', 'High-Sierra', 'Mojave', 'Monterey', 'Sierra', 'Sonoma', 'Ventura', 'all'}
        global _jm_cst_49
        _jm_cst_49 = {'2.0', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', 'all'}
        global _jm_cst_50
        _jm_cst_50 = {'10', '11', 'all'}
        global _jm_cst_51
        _jm_cst_51 = {'10.0', '10.1', '10.2', '10.3', '10.4', '11.0', '11.1', '11.2', '11.3', '11.4', '12.0', '12.1', '12.2', '13.0', '13.1', '13.2', '14.0', '8.0', '8.1', '8.2', '8.3', '8.4', '9.0', '9.1', '9.2', '9.3', 'all'}
        global _jm_cst_52
        _jm_cst_52 = {'16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', 'all'}
        global _jm_cst_53
        _jm_cst_53 = {'10', '5', '6', '7', '8', '9', 'all'}
        global _jm_cst_54
        _jm_cst_54 = {'5.2', '5.4', '5.6', '5.8', '6.0', '6.2', '6.4', 'all'}
        global _jm_cst_55
        _jm_cst_55 = {'all', 'ascii', 'beowulf', 'chimaera', 'daedalus', 'jessie'}
        global _jm_cst_56
        _jm_cst_56 = {'10', '6', '9', 'all'}
        global _jm_cst_57
        _jm_cst_57 = {'all', 'bookworm', 'bullseye', 'buster', 'etch', 'jessie', 'lenny', 'sid', 'squeeze', 'stretch', 'trixie', 'wheezy'}
        global _jm_cst_58
        _jm_cst_58 = {'10.0', '8.0', '8.1', '8.2', '9.0', '9.1', '9.2', '9.3', 'all'}
        global _jm_cst_59
        _jm_cst_59 = {'2.5', '3.0', '3.1', '3.2', '3.3', '3.4', '3.5', 'all'}
        global _jm_cst_60
        _jm_cst_60 = {'1.6', '1.7', '1.8', '2.12', 'all'}
        global _jm_cst_61
        _jm_cst_61 = {'1', '2', '2023', 'all'}
        global _jm_cst_62
        _jm_cst_62 = {'2013.03', '2013.09', '2014.03', '2014.09', '2015.03', '2015.09', '2016.03', '2016.09', '2017.03', '2017.09', '2017.12', '2018.03', 'Candidate', 'all'}
        global _jm_cst_63
        _jm_cst_63 = {'6.1', '7.1', '7.2', 'all'}
        global _jm_cst_64
        _jm_cst_64 = {'2008R2', '2008x64', '2008x86', '2012', '2012R2', '2016', '2019', '2022', '2025', 'all'}
        global _jm_cst_65
        _jm_cst_65 = {'5.5', '6.0', '6.5', '6.7', '7.0', '8.0', 'all'}
        global _jm_cst_66
        _jm_cst_66 = {'5.5', '6.0', '6.5', '6.7', '7.0', '8.0', 'all'}
        global _jm_cst_67
        _jm_cst_67 = {'all', 'artful', 'bionic', 'cosmic', 'disco', 'eoan', 'focal', 'groovy', 'hirsute', 'impish', 'jammy', 'kinetic', 'lucid', 'lunar', 'mantic', 'maverick', 'natty', 'noble', 'oneiric', 'oracular', 'plucky', 'precise', 'quantal', 'raring', 'saucy', 'trusty', 'utopic', 'vivid', 'wily', 'xenial', 'yakkety', 'zesty'}
        global _jm_cst_68
        _jm_cst_68 = {'12.1', '13.0', '13.1', '14.0', 'all'}
        global _jm_cst_69
        _jm_cst_69 = {'6.0', '6.1', '6.2', '7.0', 'all'}
        global _jm_cst_70
        _jm_cst_70 = {'10', '11.0', '11.1', '11.2', '11.3', '11.4', 'all'}
        global _jm_cst_71
        _jm_cst_71 = {'10SP3', '10SP4', '11', '11SP1', '11SP2', '11SP3', '11SP4', '12', '12SP1', '12SP2', '12SP3', '12SP4', '12SP5', '15', '15SP1', '15SP2', '15SP3', '15SP4', '15SP5', '15SP6', 'all'}
        global _jm_cst_72
        _jm_cst_72 = {'8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '9.0', '9.1', '9.2', 'all'}
        global _jm_cst_73
        _jm_cst_73 = {'7.1', '8.0', '8.1', '9.0', 'all'}
        global _jm_cst_74
        _jm_cst_74 = {'7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.10', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', 'all'}
        global _jm_cst_75
        _jm_cst_75 = {'17.01', '18.06', '19.07', '21.02', '22.03', '23.05', '24.10', 'all'}
        global _jm_cst_76
        _jm_cst_76 = {'12.1', '12.2', '12.3', '13.1', '13.2', '15.0', '15.1', '15.2', '15.3', '15.4', '15.5', '42.1', '42.2', '42.3', 'all'}
        global _jm_cst_77
        _jm_cst_77 = {'5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', 'all'}
        global _jm_cst_78
        _jm_cst_78 = {'7', '8', 'all'}
        global _jm_cst_79
        _jm_cst_79 = {'10.10', '10.11', '10.12', '10.13', '10.14', '10.15', '10.7', '10.8', '10.9', 'all'}
        global _jm_cst_80
        _jm_cst_80 = {'Big-Sur', 'Catalina', 'High-Sierra', 'Mojave', 'Monterey', 'Sierra', 'Sonoma', 'Ventura', 'all'}
        global _jm_cst_81
        _jm_cst_81 = {'2.0', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', 'all'}
        global _jm_cst_82
        _jm_cst_82 = {'10', '11', 'all'}
        global _jm_cst_83
        _jm_cst_83 = {'10.0', '10.1', '10.2', '10.3', '10.4', '11.0', '11.1', '11.2', '11.3', '11.4', '12.0', '12.1', '12.2', '13.0', '13.1', '13.2', '14.0', '8.0', '8.1', '8.2', '8.3', '8.4', '9.0', '9.1', '9.2', '9.3', 'all'}
        global _jm_cst_84
        _jm_cst_84 = {'16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', 'all'}
        global _jm_cst_85
        _jm_cst_85 = {'10', '5', '6', '7', '8', '9', 'all'}
        global _jm_cst_86
        _jm_cst_86 = {'5.2', '5.4', '5.6', '5.8', '6.0', '6.2', '6.4', 'all'}
        global _jm_cst_87
        _jm_cst_87 = {'all', 'ascii', 'beowulf', 'chimaera', 'daedalus', 'jessie'}
        global _jm_cst_88
        _jm_cst_88 = {'10', '6', '9', 'all'}
        global _jm_cst_89
        _jm_cst_89 = {'all', 'bookworm', 'bullseye', 'buster', 'etch', 'jessie', 'lenny', 'sid', 'squeeze', 'stretch', 'trixie', 'wheezy'}
        global _jm_cst_90
        _jm_cst_90 = {'10.0', '8.0', '8.1', '8.2', '9.0', '9.1', '9.2', '9.3', 'all'}
        global _jm_cst_91
        _jm_cst_91 = {'2.5', '3.0', '3.1', '3.2', '3.3', '3.4', '3.5', 'all'}
        global _jm_cst_92
        _jm_cst_92 = {'1.6', '1.7', '1.8', '2.12', 'all'}
        global _jm_cst_93
        _jm_cst_93 = {'1', '2', '2023', 'all'}
        global _jm_cst_94
        _jm_cst_94 = {'2013.03', '2013.09', '2014.03', '2014.09', '2015.03', '2015.09', '2016.03', '2016.09', '2017.03', '2017.09', '2017.12', '2018.03', 'Candidate', 'all'}
        global _jm_cst_95
        _jm_cst_95 = {'6.1', '7.1', '7.2', 'all'}
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile("^[a-z][-a-z0-9_]+$")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = re.compile("^[a-z][a-z0-9_]+$")
        _jm_re_1 = lambda s, p, r: _jm_re_1_reco.search(s) is not None
        global _jm_obj_141_map
        _jm_obj_141_map = {
            "cloud_platforms": _jm_f_0,
            "galaxy_tags": _jm_f_1,
            "min_ansible_version": _jm_f_2,
            "namespace": _jm_f_3,
            "platforms": _jm_f_4,
            "role_name": _jm_f_5,
            "video_links": _jm_f_6,
        }
        global _jm_obj_142_map
        _jm_obj_142_map = {
            "author": _jm_f_7,
            "company": _jm_f_8,
            "github_branch": _jm_f_9,
            "issue_tracker_url": _jm_f_10,
            "license": _jm_f_11,
            "min_ansible_container_version": _jm_f_12,
        }
        global _jm_obj_143_map
        _jm_obj_143_map = {
            "cloud_platforms": _jm_f_13,
            "company": _jm_f_14,
            "galaxy_tags": _jm_f_15,
            "github_branch": _jm_f_16,
            "issue_tracker_url": _jm_f_17,
            "min_ansible_container_version": _jm_f_18,
            "namespace": _jm_f_19,
            "platforms": _jm_f_20,
            "role_name": _jm_f_21,
            "video_links": _jm_f_22,
        }
        global _jm_obj_144_map
        _jm_obj_144_map = {
            "author": _jm_f_23,
            "cloud_platforms": _jm_f_24,
            "company": _jm_f_25,
            "galaxy_tags": _jm_f_26,
            "github_branch": _jm_f_27,
            "issue_tracker_url": _jm_f_28,
            "license": _jm_f_29,
            "min_ansible_container_version": _jm_f_30,
            "min_ansible_version": _jm_f_31,
            "namespace": _jm_f_32,
            "platforms": _jm_f_33,
            "role_name": _jm_f_34,
            "video_links": _jm_f_35,
        }
        global _jm_obj_145_map
        _jm_obj_145_map = {
            "author": _jm_f_36,
            "cloud_platforms": _jm_f_37,
            "company": _jm_f_38,
            "galaxy_tags": _jm_f_39,
            "github_branch": _jm_f_40,
            "issue_tracker_url": _jm_f_41,
            "license": _jm_f_42,
            "min_ansible_container_version": _jm_f_43,
            "min_ansible_version": _jm_f_44,
            "namespace": _jm_f_45,
            "platforms": _jm_f_46,
            "role_name": _jm_f_47,
            "video_links": _jm_f_48,
        }
        global _jm_obj_146_map
        _jm_obj_146_map = {
            "cloud_platforms": _jm_f_49,
            "company": _jm_f_50,
            "galaxy_tags": _jm_f_51,
            "github_branch": _jm_f_52,
            "issue_tracker_url": _jm_f_53,
            "min_ansible_container_version": _jm_f_54,
            "namespace": _jm_f_55,
            "platforms": _jm_f_56,
            "role_name": _jm_f_57,
            "video_links": _jm_f_58,
        }
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = re.compile("^[a-z_]+\\.[a-z_]+$")
        _jm_re_2 = lambda s, p, r: _jm_re_2_reco.search(s) is not None
        global _jm_cst_96
        _jm_cst_96 = {'git', 'hg'}
        global check_model_map
        check_model_map = {
            "": json_model_60,
            "AIXPlatformModel": json_model_2,
            "AlpinePlatformModel": json_model_3,
            "AmazonLinuxPlatformModel": json_model_4,
            "AmazonPlatformModel": json_model_5,
            "ArchLinuxPlatformModel": json_model_6,
            "AstraLinuxPlatformModel": json_model_7,
            "ClearLinuxPlatformModel": json_model_8,
            "CumulusPlatformModel": json_model_9,
            "DebianPlatformModel": json_model_10,
            "DellOSPlatformModel": json_model_11,
            "DevuanPlatformModel": json_model_12,
            "DragonFlyBSDPlatformModel": json_model_13,
            "ELPlatformModel": json_model_14,
            "FedoraPlatformModel": json_model_15,
            "FreeBSDPlatformModel": json_model_16,
            "GenericBSDPlatformModel": json_model_17,
            "GenericLinuxPlatformModel": json_model_18,
            "GenericUNIXPlatformModel": json_model_19,
            "GentooPlatformModel": json_model_20,
            "HardenedBSDPlatformModel": json_model_21,
            "IOSPlatformModel": json_model_22,
            "JunosPlatformModel": json_model_23,
            "KaliPlatformModel": json_model_24,
            "MacOSXPlatformModel": json_model_25,
            "MageiaPlatformModel": json_model_26,
            "NXOSPlatformModel": json_model_27,
            "NetBSDPlatformModel": json_model_28,
            "OpenBSDPlatformModel": json_model_29,
            "OpenWrtPlatformModel": json_model_30,
            "OracleLinuxPlatformModel": json_model_31,
            "PAN-OSPlatformModel": json_model_32,
            "RockyLinuxPlatformModel": json_model_33,
            "SLESPlatformModel": json_model_34,
            "SmartOSPlatformModel": json_model_35,
            "SolarisPlatformModel": json_model_36,
            "SynologyPlatformModel": json_model_37,
            "TMOSPlatformModel": json_model_38,
            "UbuntuPlatformModel": json_model_39,
            "Void_LinuxPlatformModel": json_model_40,
            "WindowsPlatformModel": json_model_41,
            "aosPlatformModel": json_model_42,
            "eosPlatformModel": json_model_43,
            "macOSPlatformModel": json_model_44,
            "opensusePlatformModel": json_model_45,
            "os10PlatformModel": json_model_46,
            "vCenterPlatformModel": json_model_47,
            "vSpherePlatformModel": json_model_48,
            "any_platform": json_model_49,
            "platforms": json_model_50,
            "GalaxyInfoModelCollection": json_model_51,
            "GalaxyInfoModelLoose": json_model_52,
            "GalaxyInfoModelStandalone": json_model_53,
            "GalaxyInfoModel": json_model_54,
            "collections": json_model_55,
            "complex_conditional": json_model_56,
            "DependencyModelLoose": json_model_57,
            "DependencyModel": json_model_58,
            "AnsibleMetaObj": json_model_59,
            "AnsibleMeta": json_model_60,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = None
        _jm_re_1 = None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = None
        _jm_re_2 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
