#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0b1
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    # .'@'
    lpath_0: Path
    res = isinstance(val, list)
    if res:
        len_0: int = len(val)
        if len_0 > 0:
            lpath_0 = (path + [ 0 ]) if path is not None else None
            # .'@'.0
            res = isinstance(val[0], int) and not isinstance(val[0], bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'@'.0]", lpath_0 if path is not None else None))
        if res:
            if len_0 > 1:
                lpath_0 = (path + [ 1 ]) if path is not None else None
                # .'@'.1
                res = isinstance(val[1], str)
                if not res:
                    rep is None or rep.append(("unexpected string [.'@'.1]", lpath_0 if path is not None else None))
            if res:
                for idx_0 in range(2, len_0):
                    lpath_0 = (path + [ idx_0 ]) if path is not None else None
                    # .'@'.2
                    res = isinstance(val[idx_0], bool)
                    if not res:
                        rep is None or rep.append(("not a bool [.'@'.2]", lpath_0 if path is not None else None))
                    if not res:
                        break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'@']", path))
    if res:
        ival_0: int = len(val)
        res = ival_0 >= 5
        if not res:
            rep is None or rep.append(("constraints failed [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
