#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


my %_jm_cst_0;
sub json_model_2($$$);
sub json_model_3($$$);
sub json_model_4($$$);
my %_jm_cst_1;
sub json_model_5($$$);
sub json_model_6($$$);
sub json_model_7($$$);
sub json_model_8($$$);
sub json_model_9($$$);
sub _jm_obj_1($$$);
my %_jm_cst_2;
sub _jm_obj_2($$$);
sub _jm_obj_0($$$);
sub _jm_obj_3($$$);
sub _jm_obj_5($$$);
sub _jm_obj_4($$$);
sub _jm_obj_6($$$);
my %_jm_map_0;
sub json_model_10($$$);
sub _jm_f_0($$$);
my %_jm_cst_3;
sub _jm_obj_9($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
sub _jm_f_6($$$);
sub _jm_f_7($$$);
sub _jm_f_8($$$);
my %_jm_obj_8_map;
sub _jm_obj_8($$$);
sub _jm_f_1($$$);
sub _jm_f_9($$$);
sub _jm_f_11($$$);
sub _jm_f_12($$$);
sub _jm_f_13($$$);
sub _jm_f_14($$$);
sub _jm_obj_11($$$);
sub _jm_f_15($$$);
sub _jm_obj_13($$$);
sub _jm_obj_12($$$);
sub _jm_f_16($$$);
sub _jm_f_17($$$);
sub _jm_f_18($$$);
sub _jm_f_19($$$);
my %_jm_cst_4;
my %_jm_cst_5;
sub _jm_obj_14($$$);
sub _jm_f_20($$$);
sub _jm_f_21($$$);
sub _jm_obj_15($$$);
sub _jm_f_22($$$);
sub _jm_f_23($$$);
my %_jm_cst_6;
sub _jm_obj_16($$$);
sub _jm_f_24($$$);
sub _jm_f_25($$$);
sub _jm_f_26($$$);
my %_jm_obj_10_map;
sub _jm_obj_10($$$);
sub _jm_f_10($$$);
sub _jm_f_28($$$);
sub _jm_obj_18($$$);
sub _jm_f_29($$$);
my %_jm_cst_7;
sub _jm_f_30($$$);
sub _jm_obj_19($$$);
sub _jm_f_31($$$);
sub _jm_f_32($$$);
sub _jm_obj_20($$$);
sub _jm_f_33($$$);
sub _jm_f_34($$$);
my %_jm_cst_8;
sub _jm_f_35($$$);
my %_jm_cst_9;
sub _jm_f_36($$$);
sub _jm_f_37($$$);
my %_jm_cst_10;
sub _jm_f_38($$$);
sub _jm_f_39($$$);
sub _jm_f_40($$$);
sub _jm_f_41($$$);
sub _jm_f_42($$$);
sub _jm_f_43($$$);
sub _jm_f_44($$$);
sub _jm_f_45($$$);
sub _jm_f_46($$$);
sub _jm_f_47($$$);
sub _jm_f_48($$$);
sub _jm_f_49($$$);
sub _jm_f_50($$$);
sub _jm_f_51($$$);
my %_jm_cst_11;
sub _jm_f_52($$$);
sub _jm_f_54($$$);
sub _jm_f_55($$$);
sub _jm_f_56($$$);
sub _jm_f_57($$$);
sub _jm_f_58($$$);
sub _jm_f_59($$$);
sub _jm_f_60($$$);
sub _jm_f_61($$$);
sub _jm_f_62($$$);
sub _jm_f_63($$$);
my %_jm_obj_21_map;
sub _jm_obj_21($$$);
sub _jm_f_53($$$);
sub _jm_f_64($$$);
my %_jm_cst_12;
sub _jm_f_65($$$);
my %_jm_obj_17_map;
sub _jm_obj_17($$$);
sub _jm_f_27($$$);
sub _jm_f_68($$$);
sub _jm_f_69($$$);
sub _jm_f_70($$$);
sub _jm_f_71($$$);
sub _jm_f_72($$$);
sub _jm_f_73($$$);
sub _jm_f_74($$$);
sub _jm_f_75($$$);
sub _jm_f_76($$$);
sub _jm_f_77($$$);
sub _jm_f_78($$$);
sub _jm_f_79($$$);
sub _jm_f_80($$$);
my %_jm_obj_23_map;
sub _jm_obj_23($$$);
sub _jm_f_67($$$);
sub _jm_obj_24($$$);
sub _jm_f_81($$$);
sub _jm_f_83($$$);
sub _jm_f_84($$$);
sub _jm_f_85($$$);
sub _jm_f_86($$$);
sub _jm_f_87($$$);
sub _jm_f_88($$$);
sub _jm_f_89($$$);
sub _jm_f_90($$$);
sub _jm_f_91($$$);
sub _jm_f_92($$$);
sub _jm_f_93($$$);
sub _jm_f_94($$$);
sub _jm_f_95($$$);
sub _jm_f_96($$$);
sub _jm_f_97($$$);
sub _jm_f_98($$$);
sub _jm_f_99($$$);
sub _jm_f_100($$$);
sub _jm_f_101($$$);
sub _jm_f_102($$$);
sub _jm_f_103($$$);
my %_jm_obj_25_map;
sub _jm_obj_25($$$);
sub _jm_f_82($$$);
sub _jm_f_105($$$);
sub _jm_f_106($$$);
sub _jm_f_107($$$);
sub _jm_f_108($$$);
sub _jm_f_109($$$);
sub _jm_f_110($$$);
sub _jm_f_111($$$);
sub _jm_f_112($$$);
sub _jm_f_113($$$);
sub _jm_f_114($$$);
sub _jm_f_115($$$);
sub _jm_f_116($$$);
sub _jm_f_117($$$);
sub _jm_f_118($$$);
my %_jm_obj_26_map;
sub _jm_obj_26($$$);
sub _jm_f_104($$$);
sub _jm_obj_27($$$);
sub _jm_f_119($$$);
sub _jm_obj_28($$$);
sub _jm_f_120($$$);
sub _jm_obj_29($$$);
sub _jm_f_121($$$);
sub _jm_obj_30($$$);
sub _jm_f_122($$$);
sub _jm_f_124($$$);
sub _jm_f_125($$$);
sub _jm_f_126($$$);
sub _jm_f_127($$$);
sub _jm_f_128($$$);
sub _jm_f_129($$$);
sub _jm_f_130($$$);
sub _jm_f_131($$$);
sub _jm_f_132($$$);
sub _jm_f_133($$$);
sub _jm_f_134($$$);
sub _jm_f_135($$$);
sub _jm_f_136($$$);
sub _jm_f_137($$$);
sub _jm_f_138($$$);
sub _jm_f_139($$$);
sub _jm_f_140($$$);
sub _jm_f_141($$$);
sub _jm_f_142($$$);
sub _jm_f_143($$$);
sub _jm_f_144($$$);
sub _jm_f_145($$$);
sub _jm_f_146($$$);
sub _jm_f_147($$$);
sub _jm_f_148($$$);
sub _jm_f_149($$$);
sub _jm_f_150($$$);
sub _jm_f_151($$$);
sub _jm_f_152($$$);
sub _jm_f_153($$$);
sub _jm_f_154($$$);
sub _jm_f_155($$$);
sub _jm_f_156($$$);
sub _jm_f_157($$$);
sub _jm_f_158($$$);
sub _jm_f_159($$$);
sub _jm_f_160($$$);
sub _jm_f_161($$$);
sub _jm_f_162($$$);
sub _jm_f_163($$$);
sub _jm_f_164($$$);
sub _jm_f_165($$$);
sub _jm_f_166($$$);
sub _jm_f_167($$$);
sub _jm_f_168($$$);
sub _jm_f_169($$$);
sub _jm_f_170($$$);
sub _jm_f_171($$$);
sub _jm_f_172($$$);
sub _jm_f_173($$$);
sub _jm_f_174($$$);
sub _jm_f_175($$$);
sub _jm_f_176($$$);
sub _jm_f_177($$$);
sub _jm_f_178($$$);
sub _jm_f_179($$$);
sub _jm_f_180($$$);
sub _jm_f_181($$$);
sub _jm_f_182($$$);
my %_jm_obj_31_map;
sub _jm_obj_31($$$);
sub _jm_f_123($$$);
my %_jm_obj_22_map;
sub _jm_obj_22($$$);
sub _jm_f_66($$$);
my %_jm_cst_13;
sub _jm_f_183($$$);
sub _jm_f_185($$$);
sub _jm_f_186($$$);
sub _jm_f_187($$$);
sub _jm_f_188($$$);
my %_jm_cst_14;
sub _jm_f_189($$$);
sub _jm_f_190($$$);
sub _jm_f_191($$$);
my %_jm_obj_32_map;
sub _jm_obj_32($$$);
sub _jm_f_184($$$);
sub _jm_f_192($$$);
sub _jm_f_193($$$);
sub _jm_obj_33($$$);
sub _jm_f_194($$$);
sub _jm_obj_34($$$);
sub _jm_f_195($$$);
my %_jm_cst_15;
sub _jm_obj_35($$$);
sub _jm_f_196($$$);
my %_jm_obj_7_map;
sub _jm_obj_7($$$);
sub json_model_1($$$);
my %check_model_map;


sub _jm_re_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^#[0-9a-fA-F]{6}$/;
    return $res;
}

# check $color (.'$color')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$color'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_0{$val};
    if (! $res)
    {
        $res = jm_is_string($val);
        if ($res)
        {
            # .'$color'.'|'.0
            # "/^#[0-9a-fA-F]{6}$/"
            $res = _jm_re_0($val, $path, $rep);
        }
    }
    return $res;
}

# check $colorArray (.'$colorArray')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$colorArray'
    # .'$colorArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$colorArray'.'@'.0
            $res = json_model_2($arr_0_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_0 = scalar @$val;
        $res = jm_is_unique_array($val, $path, $rep) && $ival_0 >= 1;
    }
    return $res;
}

# check $keybinding (.'$keybinding')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$keybinding'
    # .'$keybinding'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$keybinding'.'|'.1
        $res = jm_is_string($val);
    }
    return $res;
}


# check $custom-commands-prompts-type-property (.'$custom-commands-prompts-type-property')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$custom-commands-prompts-type-property'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_1{$val};
    return $res;
}

# check $custom-commands-prompts-title-property (.'$custom-commands-prompts-title-property')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$custom-commands-prompts-title-property'
    $res = jm_is_string($val);
    return $res;
}

# check $custom-commands-prompts-key-property (.'$custom-commands-prompts-key-property')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$custom-commands-prompts-key-property'
    $res = jm_is_string($val);
    return $res;
}

# check $neString (.'$neString')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$neString'
    # .'$neString'.'@'
    $res = jm_is_string($val);
    if ($res)
    {
        my $ival_1 = length $val;
        $res = $ival_1 >= 1;
    }
    return $res;
}

# check $stringArray (.'$stringArray')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$stringArray'
    # .'$stringArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_1_idx (0 .. $#$val)
        {
            my $arr_1_item = $$val[$arr_1_idx];
            # .'$stringArray'.'@'.0
            $res = json_model_8($arr_1_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        $res = jm_is_unique_array($val, $path, $rep);
    }
    return $res;
}

# object .'$Prompts'.'|'.0.suggestions.'|'.1
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 1)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'command'})
    {
        return 0;
    }
    $pval = $$val{'command'};
    # .'$Prompts'.'|'.0.suggestions.'|'.1.command
    $res = jm_is_string($pval);
    if (! $res)
    {
        return 0;
    }
    return 1;
}


# object .'$Prompts'.'|'.0.suggestions.'|'.0
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 1)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'preset'})
    {
        return 0;
    }
    $pval = $$val{'preset'};
    # .'$Prompts'.'|'.0.suggestions.'|'.0.preset
    $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_2{$pval};
    if (! $res)
    {
        return 0;
    }
    return 1;
}

# object .'$Prompts'.'|'.0
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Prompts'.'|'.0.type
            $res = jm_is_string($pval) && $pval eq 'input';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'title')
        {
            # handle must title property
            $must_count++;
            # .'$Prompts'.'|'.0.title
            $res = json_model_6($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'key')
        {
            # handle must key property
            $must_count++;
            # .'$Prompts'.'|'.0.key
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'initialValue')
        {
            # handle may initialValue property
            # .'$Prompts'.'|'.0.initialValue
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'suggestions')
        {
            # handle may suggestions property
            # .'$Prompts'.'|'.0.suggestions
            $res = jm_is_object($pval);
            if ($res)
            {
                # .'$Prompts'.'|'.0.suggestions.'|'.0
                $res = _jm_obj_2($pval, undef, $rep);
                if (! $res)
                {
                    # .'$Prompts'.'|'.0.suggestions.'|'.1
                    $res = _jm_obj_1($pval, undef, $rep);
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 3)
    {
        return 0;
    }
    return 1;
}

# object .'$Prompts'.'|'.1
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Prompts'.'|'.1.type
            $res = jm_is_string($pval) && $pval eq 'confirm';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'title')
        {
            # handle must title property
            $must_count++;
            # .'$Prompts'.'|'.1.title
            $res = json_model_6($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'key')
        {
            # handle must key property
            $must_count++;
            # .'$Prompts'.'|'.1.key
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'body')
        {
            # handle may body property
            # .'$Prompts'.'|'.1.body
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 3)
    {
        return 0;
    }
    return 1;
}

# object .'$Prompts'.'|'.2.options.'@'.0
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'value')
        {
            # handle must value property
            $must_count++;
            # .'$Prompts'.'|'.2.options.'@'.0.value
            $res = json_model_8($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$Prompts'.'|'.2.options.'@'.0.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'name')
        {
            # handle may name property
            # .'$Prompts'.'|'.2.options.'@'.0.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Prompts'.'|'.2
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 4)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'type'})
    {
        return 0;
    }
    $pval = $$val{'type'};
    # .'$Prompts'.'|'.2.type
    $res = jm_is_string($pval) && $pval eq 'menu';
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'title'})
    {
        return 0;
    }
    $pval = $$val{'title'};
    # .'$Prompts'.'|'.2.title
    $res = json_model_6($pval, $path, $rep);
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'key'})
    {
        return 0;
    }
    $pval = $$val{'key'};
    # .'$Prompts'.'|'.2.key
    $res = json_model_7($pval, $path, $rep);
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'options'})
    {
        return 0;
    }
    $pval = $$val{'options'};
    # .'$Prompts'.'|'.2.options
    # .'$Prompts'.'|'.2.options.'@'
    $res = jm_is_array($pval);
    if ($res)
    {
        for my $arr_2_idx (0 .. $#$pval)
        {
            my $arr_2_item = $$pval[$arr_2_idx];
            # .'$Prompts'.'|'.2.options.'@'.0
            $res = _jm_obj_5($arr_2_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        $res = jm_is_unique_array($pval, $path, $rep);
    }
    if (! $res)
    {
        return 0;
    }
    return 1;
}

# object .'$Prompts'.'|'.3
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Prompts'.'|'.3.type
            $res = jm_is_string($pval) && $pval eq 'menuFromCommand';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'title')
        {
            # handle must title property
            $must_count++;
            # .'$Prompts'.'|'.3.title
            $res = json_model_6($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'key')
        {
            # handle must key property
            $must_count++;
            # .'$Prompts'.'|'.3.key
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'command')
        {
            # handle must command property
            $must_count++;
            # .'$Prompts'.'|'.3.command
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'filter')
        {
            # handle may filter property
            # .'$Prompts'.'|'.3.filter
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'valueFormat')
        {
            # handle may valueFormat property
            # .'$Prompts'.'|'.3.valueFormat
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'labelFormat')
        {
            # handle may labelFormat property
            # .'$Prompts'.'|'.3.labelFormat
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 4)
    {
        return 0;
    }
    return 1;
}


# check $Prompts (.'$Prompts')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Prompts'
    my $iso_0 = jm_is_object($val);
    $res = $iso_0;
    if ($res)
    {
        if (exists $$val{'type'})
        {
            my $tag_0 = $$val{'type'};
            my $fun_0 = $_jm_map_0{$tag_0};
            if (defined($fun_0))
            {
                $res = &$fun_0($val, $path, $rep);
            }
            else
            {
                $res = 0;
            }
        }
        else
        {
            $res = 0;
        }
    }
    return $res;
}

# check _jm_obj_7_map_confirmOnQuit (.confirmOnQuit)
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .confirmOnQuit
    $res = jm_is_boolean($val);
    return $res;
}


# object .customCommands.'@'.0.after
sub _jm_obj_9($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'checkForConflicts')
        {
            # handle may checkForConflicts property
            # .customCommands.'@'.0.after.checkForConflicts
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_8_map_after (.customCommands.'@'.0.after)
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .customCommands.'@'.0.after
    $res = _jm_obj_9($val, $path, $rep);
    return $res;
}

# check _jm_obj_8_map_description (.customCommands.'@'.0.description)
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .customCommands.'@'.0.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_8_map_loadingText (.customCommands.'@'.0.loadingText)
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .customCommands.'@'.0.loadingText
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_8_map_prompts (.customCommands.'@'.0.prompts)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .customCommands.'@'.0.prompts
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_4_idx (0 .. $#$val)
        {
            my $arr_4_item = $$val[$arr_4_idx];
            # .customCommands.'@'.0.prompts.0
            $res = json_model_10($arr_4_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_8_map_showOutput (.customCommands.'@'.0.showOutput)
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .customCommands.'@'.0.showOutput
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_8_map_stream (.customCommands.'@'.0.stream)
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .customCommands.'@'.0.stream
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_8_map_subprocess (.customCommands.'@'.0.subprocess)
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .customCommands.'@'.0.subprocess
    $res = jm_is_boolean($val);
    return $res;
}


# object .customCommands.'@'.0
sub _jm_obj_8($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'key')
        {
            # handle must key property
            $must_count++;
            # .customCommands.'@'.0.key
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'command')
        {
            # handle must command property
            $must_count++;
            # .customCommands.'@'.0.command
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'context')
        {
            # handle must context property
            $must_count++;
            # .customCommands.'@'.0.context
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_3{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_8_map{$prop}))
        {
            # handle 7 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 3)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_7_map_customCommands (.customCommands)
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .customCommands
    # .customCommands.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_3_idx (0 .. $#$val)
        {
            my $arr_3_item = $$val[$arr_3_idx];
            # .customCommands.'@'.0
            $res = _jm_obj_8($arr_3_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        $res = jm_is_unique_array($val, $path, $rep);
    }
    return $res;
}

# check _jm_obj_7_map_disableStartupPopups (.disableStartupPopups)
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .disableStartupPopups
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_10_map_allBranchesLogCmd (.git.allBranchesLogCmd)
sub _jm_f_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.allBranchesLogCmd
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_10_map_autoFetch (.git.autoFetch)
sub _jm_f_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.autoFetch
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_10_map_autoRefresh (.git.autoRefresh)
sub _jm_f_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.autoRefresh
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_10_map_branchLogCmd (.git.branchLogCmd)
sub _jm_f_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.branchLogCmd
    $res = jm_is_string($val);
    return $res;
}

# object .git.commit
sub _jm_obj_11($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'signOff')
        {
            # handle may signOff property
            # .git.commit.signOff
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_10_map_commit (.git.commit)
sub _jm_f_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.commit
    $res = _jm_obj_11($val, $path, $rep);
    return $res;
}

sub _jm_re_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /./;
    return $res;
}

# object .git.commitPrefixes.'/./'
sub _jm_obj_13($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 2)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'pattern'})
    {
        return 0;
    }
    $pval = $$val{'pattern'};
    # .git.commitPrefixes.'/./'.pattern
    $res = json_model_8($pval, $path, $rep);
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'replace'})
    {
        return 0;
    }
    $pval = $$val{'replace'};
    # .git.commitPrefixes.'/./'.replace
    $res = json_model_8($pval, $path, $rep);
    if (! $res)
    {
        return 0;
    }
    return 1;
}

# object .git.commitPrefixes
sub _jm_obj_12($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (_jm_re_1($prop, $path, $rep))
        {
            # handle 1 re props
            # .git.commitPrefixes.'/./'
            $res = _jm_obj_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_10_map_commitPrefixes (.git.commitPrefixes)
sub _jm_f_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.commitPrefixes
    $res = _jm_obj_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_10_map_diffContextSize (.git.diffContextSize)
sub _jm_f_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.diffContextSize
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_10_map_disableForcePushing (.git.disableForcePushing)
sub _jm_f_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.disableForcePushing
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_10_map_fetchAll (.git.fetchAll)
sub _jm_f_19($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.fetchAll
    $res = jm_is_boolean($val);
    return $res;
}



# object .git.log
sub _jm_obj_14($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'order')
        {
            # handle may order property
            # .git.log.order
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_4{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'showGraph')
        {
            # handle may showGraph property
            # .git.log.showGraph
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_5{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'showWholeGraph')
        {
            # handle may showWholeGraph property
            # .git.log.showWholeGraph
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_10_map_log (.git.log)
sub _jm_f_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.log
    $res = _jm_obj_14($val, $path, $rep);
    return $res;
}

# check _jm_obj_10_map_mainBranches (.git.mainBranches)
sub _jm_f_21($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.mainBranches
    $res = json_model_9($val, $path, $rep);
    return $res;
}

# object .git.merging
sub _jm_obj_15($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'manualCommit')
        {
            # handle may manualCommit property
            # .git.merging.manualCommit
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'args')
        {
            # handle may args property
            # .git.merging.args
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_10_map_merging (.git.merging)
sub _jm_f_22($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.merging
    $res = _jm_obj_15($val, $path, $rep);
    return $res;
}

# check _jm_obj_10_map_overrideGpg (.git.overrideGpg)
sub _jm_f_23($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.overrideGpg
    $res = jm_is_boolean($val);
    return $res;
}


# object .git.paging
sub _jm_obj_16($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'colorArg')
        {
            # handle may colorArg property
            # .git.paging.colorArg
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_6{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'useConfig')
        {
            # handle may useConfig property
            # .git.paging.useConfig
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'pager')
        {
            # handle may pager property
            # .git.paging.pager
            # .git.paging.pager.'@'
            $res = jm_is_string($pval);
            if ($res)
            {
                my $ival_2 = length $pval;
                $res = $ival_2 >= 1;
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_10_map_paging (.git.paging)
sub _jm_f_24($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.paging
    $res = _jm_obj_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_10_map_parseEmoji (.git.parseEmoji)
sub _jm_f_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.parseEmoji
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_10_map_skipHookPrefix (.git.skipHookPrefix)
sub _jm_f_26($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git.skipHookPrefix
    $res = jm_is_string($val);
    return $res;
}


# object .git
sub _jm_obj_10($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_10_map{$prop}))
        {
            # handle 16 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_7_map_git (.git)
sub _jm_f_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .git
    $res = _jm_obj_10($val, $path, $rep);
    return $res;
}

# check _jm_obj_17_map_animateExplosion (.gui.animateExplosion)
sub _jm_f_28($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.animateExplosion
    $res = jm_is_boolean($val);
    return $res;
}

# object .gui.authorColors
sub _jm_obj_18($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (_jm_re_1($prop, $path, $rep))
        {
            # handle 1 re props
            # .gui.authorColors.'/./'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_17_map_authorColors (.gui.authorColors)
sub _jm_f_29($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.authorColors
    $res = _jm_obj_18($val, $path, $rep);
    return $res;
}


# check _jm_obj_17_map_border (.gui.border)
sub _jm_f_30($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.border
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_7{$val};
    return $res;
}

# object .gui.branchColors
sub _jm_obj_19($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (_jm_re_1($prop, $path, $rep))
        {
            # handle 1 re props
            # .gui.branchColors.'/./'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_17_map_branchColors (.gui.branchColors)
sub _jm_f_31($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.branchColors
    $res = _jm_obj_19($val, $path, $rep);
    return $res;
}

# check _jm_obj_17_map_commandLogSize (.gui.commandLogSize)
sub _jm_f_32($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.commandLogSize
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# object .gui.commitLength
sub _jm_obj_20($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'show')
        {
            # handle may show property
            # .gui.commitLength.show
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_17_map_commitLength (.gui.commitLength)
sub _jm_f_33($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.commitLength
    $res = _jm_obj_20($val, $path, $rep);
    return $res;
}

# check _jm_obj_17_map_expandFocusedSidePanel (.gui.expandFocusedSidePanel)
sub _jm_f_34($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.expandFocusedSidePanel
    $res = jm_is_boolean($val);
    return $res;
}


# check _jm_obj_17_map_language (.gui.language)
sub _jm_f_35($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.language
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_8{$val};
    return $res;
}


# check _jm_obj_17_map_mainPanelSplitMode (.gui.mainPanelSplitMode)
sub _jm_f_36($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.mainPanelSplitMode
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_9{$val};
    return $res;
}

# check _jm_obj_17_map_mouseEvents (.gui.mouseEvents)
sub _jm_f_37($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.mouseEvents
    $res = jm_is_boolean($val);
    return $res;
}


# check _jm_obj_17_map_nerdFontsVersion (.gui.nerdFontsVersion)
sub _jm_f_38($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.nerdFontsVersion
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_10{$val};
    if (! $res)
    {
        $res = jm_is_string($val);
        if ($res)
        {
            # .gui.nerdFontsVersion.'|'.0
            $res = 1;
        }
    }
    return $res;
}

# check _jm_obj_17_map_scrollHeight (.gui.scrollHeight)
sub _jm_f_39($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.scrollHeight
    $res = jm_is_integer($val) && $val >= 1;
    return $res;
}

# check _jm_obj_17_map_scrollPastBottom (.gui.scrollPastBottom)
sub _jm_f_40($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.scrollPastBottom
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_17_map_shortTimeFormat (.gui.shortTimeFormat)
sub _jm_f_41($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.shortTimeFormat
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_17_map_showBottomLine (.gui.showBottomLine)
sub _jm_f_42($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.showBottomLine
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_17_map_showBranchCommitHash (.gui.showBranchCommitHash)
sub _jm_f_43($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.showBranchCommitHash
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_17_map_showCommandLog (.gui.showCommandLog)
sub _jm_f_44($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.showCommandLog
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_17_map_showFileTree (.gui.showFileTree)
sub _jm_f_45($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.showFileTree
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_17_map_showListFooter (.gui.showListFooter)
sub _jm_f_46($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.showListFooter
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_17_map_showRandomTip (.gui.showRandomTip)
sub _jm_f_47($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.showRandomTip
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_17_map_sidePanelWidth (.gui.sidePanelWidth)
sub _jm_f_48($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.sidePanelWidth
    # .gui.sidePanelWidth.'@'
    $res = jm_is_numeric($val) && $val >= 0.0;
    if ($res)
    {
        my $fval_0 = $val;
        $res = $fval_0 <= 1.0;
    }
    return $res;
}

# check _jm_obj_17_map_skipDiscardChangeWarning (.gui.skipDiscardChangeWarning)
sub _jm_f_49($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.skipDiscardChangeWarning
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_17_map_skipRewordInEditorWarning (.gui.skipRewordInEditorWarning)
sub _jm_f_50($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.skipRewordInEditorWarning
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_17_map_skipStashWarning (.gui.skipStashWarning)
sub _jm_f_51($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.skipStashWarning
    $res = jm_is_boolean($val);
    return $res;
}


# check _jm_obj_17_map_splitDiff (.gui.splitDiff)
sub _jm_f_52($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.splitDiff
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_11{$val};
    return $res;
}

# check _jm_obj_21_map_activeBorderColor (.gui.theme.activeBorderColor)
sub _jm_f_54($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.theme.activeBorderColor
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_cherryPickedCommitBgColor (.gui.theme.cherryPickedCommitBgColor)
sub _jm_f_55($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.theme.cherryPickedCommitBgColor
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_cherryPickedCommitFgColor (.gui.theme.cherryPickedCommitFgColor)
sub _jm_f_56($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.theme.cherryPickedCommitFgColor
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_defaultFgColor (.gui.theme.defaultFgColor)
sub _jm_f_57($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.theme.defaultFgColor
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_inactiveBorderColor (.gui.theme.inactiveBorderColor)
sub _jm_f_58($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.theme.inactiveBorderColor
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_optionsTextColor (.gui.theme.optionsTextColor)
sub _jm_f_59($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.theme.optionsTextColor
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_searchingActiveBorderColor (.gui.theme.searchingActiveBorderColor)
sub _jm_f_60($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.theme.searchingActiveBorderColor
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_selectedLineBgColor (.gui.theme.selectedLineBgColor)
sub _jm_f_61($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.theme.selectedLineBgColor
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_selectedRangeBgColor (.gui.theme.selectedRangeBgColor)
sub _jm_f_62($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.theme.selectedRangeBgColor
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_unstagedChangesColor (.gui.theme.unstagedChangesColor)
sub _jm_f_63($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.theme.unstagedChangesColor
    $res = json_model_3($val, $path, $rep);
    return $res;
}


# object .gui.theme
sub _jm_obj_21($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_21_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_17_map_theme (.gui.theme)
sub _jm_f_53($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.theme
    $res = _jm_obj_21($val, $path, $rep);
    return $res;
}

# check _jm_obj_17_map_timeFormat (.gui.timeFormat)
sub _jm_f_64($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.timeFormat
    $res = jm_is_string($val);
    return $res;
}


# check _jm_obj_17_map_windowSize (.gui.windowSize)
sub _jm_f_65($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui.windowSize
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_12{$val};
    return $res;
}


# object .gui
sub _jm_obj_17($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_17_map{$prop}))
        {
            # handle 28 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_7_map_gui (.gui)
sub _jm_f_27($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .gui
    $res = _jm_obj_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_checkoutBranchByName (.keybinding.branches.checkoutBranchByName)
sub _jm_f_68($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches.checkoutBranchByName
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_createPullRequest (.keybinding.branches.createPullRequest)
sub _jm_f_69($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches.createPullRequest
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_createTag (.keybinding.branches.createTag)
sub _jm_f_70($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches.createTag
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_fastForward (.keybinding.branches.fastForward)
sub _jm_f_71($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches.fastForward
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_fetchRemote (.keybinding.branches.fetchRemote)
sub _jm_f_72($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches.fetchRemote
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_forceCheckoutBranch (.keybinding.branches.forceCheckoutBranch)
sub _jm_f_73($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches.forceCheckoutBranch
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_mergeIntoCurrentBranch (.keybinding.branches.mergeIntoCurrentBranch)
sub _jm_f_74($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches.mergeIntoCurrentBranch
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_pushTag (.keybinding.branches.pushTag)
sub _jm_f_75($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches.pushTag
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_rebaseBranch (.keybinding.branches.rebaseBranch)
sub _jm_f_76($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches.rebaseBranch
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_renameBranch (.keybinding.branches.renameBranch)
sub _jm_f_77($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches.renameBranch
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_setUpstream (.keybinding.branches.setUpstream)
sub _jm_f_78($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches.setUpstream
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_viewGitFlowOptions (.keybinding.branches.viewGitFlowOptions)
sub _jm_f_79($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches.viewGitFlowOptions
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_viewPullRequestOptions (.keybinding.branches.viewPullRequestOptions)
sub _jm_f_80($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches.viewPullRequestOptions
    $res = json_model_4($val, $path, $rep);
    return $res;
}


# object .keybinding.branches
sub _jm_obj_23($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_23_map{$prop}))
        {
            # handle 13 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_22_map_branches (.keybinding.branches)
sub _jm_f_67($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.branches
    $res = _jm_obj_23($val, $path, $rep);
    return $res;
}

# object .keybinding.commitFiles
sub _jm_obj_24($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'checkoutCommitFile')
        {
            # handle may checkoutCommitFile property
            # .keybinding.commitFiles.checkoutCommitFile
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_22_map_commitFiles (.keybinding.commitFiles)
sub _jm_f_81($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commitFiles
    $res = _jm_obj_24($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_amendToCommit (.keybinding.commits.amendToCommit)
sub _jm_f_83($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.amendToCommit
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_checkoutCommit (.keybinding.commits.checkoutCommit)
sub _jm_f_84($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.checkoutCommit
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_cherryPickCopy (.keybinding.commits.cherryPickCopy)
sub _jm_f_85($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.cherryPickCopy
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_cherryPickCopyRange (.keybinding.commits.cherryPickCopyRange)
sub _jm_f_86($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.cherryPickCopyRange
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_copyCommitMessageToClipboard (.keybinding.commits.copyCommitMessageToClipboard)
sub _jm_f_87($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.copyCommitMessageToClipboard
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_createFixupCommit (.keybinding.commits.createFixupCommit)
sub _jm_f_88($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.createFixupCommit
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_markCommitAsFixup (.keybinding.commits.markCommitAsFixup)
sub _jm_f_89($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.markCommitAsFixup
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_moveDownCommit (.keybinding.commits.moveDownCommit)
sub _jm_f_90($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.moveDownCommit
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_moveUpCommit (.keybinding.commits.moveUpCommit)
sub _jm_f_91($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.moveUpCommit
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_openLogMenu (.keybinding.commits.openLogMenu)
sub _jm_f_92($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.openLogMenu
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_pasteCommits (.keybinding.commits.pasteCommits)
sub _jm_f_93($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.pasteCommits
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_pickCommit (.keybinding.commits.pickCommit)
sub _jm_f_94($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.pickCommit
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_renameCommit (.keybinding.commits.renameCommit)
sub _jm_f_95($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.renameCommit
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_renameCommitWithEditor (.keybinding.commits.renameCommitWithEditor)
sub _jm_f_96($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.renameCommitWithEditor
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_resetCherryPick (.keybinding.commits.resetCherryPick)
sub _jm_f_97($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.resetCherryPick
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_revertCommit (.keybinding.commits.revertCommit)
sub _jm_f_98($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.revertCommit
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_squashAboveCommits (.keybinding.commits.squashAboveCommits)
sub _jm_f_99($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.squashAboveCommits
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_squashDown (.keybinding.commits.squashDown)
sub _jm_f_100($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.squashDown
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_tagCommit (.keybinding.commits.tagCommit)
sub _jm_f_101($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.tagCommit
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_viewBisectOptions (.keybinding.commits.viewBisectOptions)
sub _jm_f_102($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.viewBisectOptions
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_25_map_viewResetOptions (.keybinding.commits.viewResetOptions)
sub _jm_f_103($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits.viewResetOptions
    $res = json_model_4($val, $path, $rep);
    return $res;
}


# object .keybinding.commits
sub _jm_obj_25($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_25_map{$prop}))
        {
            # handle 21 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_22_map_commits (.keybinding.commits)
sub _jm_f_82($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.commits
    $res = _jm_obj_25($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_amendLastCommit (.keybinding.files.amendLastCommit)
sub _jm_f_105($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.amendLastCommit
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_commitChanges (.keybinding.files.commitChanges)
sub _jm_f_106($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.commitChanges
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_commitChangesWithEditor (.keybinding.files.commitChangesWithEditor)
sub _jm_f_107($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.commitChangesWithEditor
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_commitChangesWithoutHook (.keybinding.files.commitChangesWithoutHook)
sub _jm_f_108($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.commitChangesWithoutHook
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_fetch (.keybinding.files.fetch)
sub _jm_f_109($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.fetch
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_ignoreFile (.keybinding.files.ignoreFile)
sub _jm_f_110($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.ignoreFile
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_openMergeTool (.keybinding.files.openMergeTool)
sub _jm_f_111($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.openMergeTool
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_openStatusFilter (.keybinding.files.openStatusFilter)
sub _jm_f_112($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.openStatusFilter
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_refreshFiles (.keybinding.files.refreshFiles)
sub _jm_f_113($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.refreshFiles
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_stashAllChanges (.keybinding.files.stashAllChanges)
sub _jm_f_114($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.stashAllChanges
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_toggleStagedAll (.keybinding.files.toggleStagedAll)
sub _jm_f_115($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.toggleStagedAll
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_toggleTreeView (.keybinding.files.toggleTreeView)
sub _jm_f_116($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.toggleTreeView
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_viewResetOptions (.keybinding.files.viewResetOptions)
sub _jm_f_117($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.viewResetOptions
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_viewStashOptions (.keybinding.files.viewStashOptions)
sub _jm_f_118($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files.viewStashOptions
    $res = json_model_4($val, $path, $rep);
    return $res;
}


# object .keybinding.files
sub _jm_obj_26($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_26_map{$prop}))
        {
            # handle 14 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_22_map_files (.keybinding.files)
sub _jm_f_104($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.files
    $res = _jm_obj_26($val, $path, $rep);
    return $res;
}

# object .keybinding.main
sub _jm_obj_27($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'toggleDragSelect')
        {
            # handle may toggleDragSelect property
            # .keybinding.main.toggleDragSelect
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'toggleDragSelect-alt')
        {
            # handle may toggleDragSelect-alt property
            # .keybinding.main.'toggleDragSelect-alt'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'toggleSelectHunk')
        {
            # handle may toggleSelectHunk property
            # .keybinding.main.toggleSelectHunk
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'pickBothHunks')
        {
            # handle may pickBothHunks property
            # .keybinding.main.pickBothHunks
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_22_map_main (.keybinding.main)
sub _jm_f_119($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.main
    $res = _jm_obj_27($val, $path, $rep);
    return $res;
}

# object .keybinding.stash
sub _jm_obj_28($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'popStash')
        {
            # handle may popStash property
            # .keybinding.stash.popStash
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'renameStash')
        {
            # handle may renameStash property
            # .keybinding.stash.renameStash
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_22_map_stash (.keybinding.stash)
sub _jm_f_120($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.stash
    $res = _jm_obj_28($val, $path, $rep);
    return $res;
}

# object .keybinding.status
sub _jm_obj_29($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'checkForUpdate')
        {
            # handle may checkForUpdate property
            # .keybinding.status.checkForUpdate
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'recentRepos')
        {
            # handle may recentRepos property
            # .keybinding.status.recentRepos
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_22_map_status (.keybinding.status)
sub _jm_f_121($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.status
    $res = _jm_obj_29($val, $path, $rep);
    return $res;
}

# object .keybinding.submodules
sub _jm_obj_30($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'init')
        {
            # handle may init property
            # .keybinding.submodules.init
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'update')
        {
            # handle may update property
            # .keybinding.submodules.update
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'bulkMenu')
        {
            # handle may bulkMenu property
            # .keybinding.submodules.bulkMenu
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_22_map_submodules (.keybinding.submodules)
sub _jm_f_122($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.submodules
    $res = _jm_obj_30($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_confirm (.keybinding.universal.confirm)
sub _jm_f_124($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.confirm
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_copyToClipboard (.keybinding.universal.copyToClipboard)
sub _jm_f_125($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.copyToClipboard
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_createPatchOptionsMenu (.keybinding.universal.createPatchOptionsMenu)
sub _jm_f_126($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.createPatchOptionsMenu
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_createRebaseOptionsMenu (.keybinding.universal.createRebaseOptionsMenu)
sub _jm_f_127($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.createRebaseOptionsMenu
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_decreaseContextInDiffView (.keybinding.universal.decreaseContextInDiffView)
sub _jm_f_128($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.decreaseContextInDiffView
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_diffingMenu (.keybinding.universal.diffingMenu)
sub _jm_f_129($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.diffingMenu
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_diffingMenu-alt (.keybinding.universal.'diffingMenu-alt')
sub _jm_f_130($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.'diffingMenu-alt'
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_edit (.keybinding.universal.edit)
sub _jm_f_131($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.edit
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_executeCustomCommand (.keybinding.universal.executeCustomCommand)
sub _jm_f_132($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.executeCustomCommand
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_extrasMenu (.keybinding.universal.extrasMenu)
sub _jm_f_133($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.extrasMenu
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_filteringMenu (.keybinding.universal.filteringMenu)
sub _jm_f_134($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.filteringMenu
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_goInto (.keybinding.universal.goInto)
sub _jm_f_135($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.goInto
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_gotoBottom (.keybinding.universal.gotoBottom)
sub _jm_f_136($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.gotoBottom
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_gotoTop (.keybinding.universal.gotoTop)
sub _jm_f_137($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.gotoTop
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_increaseContextInDiffView (.keybinding.universal.increaseContextInDiffView)
sub _jm_f_138($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.increaseContextInDiffView
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_jumpToBlock (.keybinding.universal.jumpToBlock)
sub _jm_f_139($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.jumpToBlock
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_31_map_new (.keybinding.universal.new)
sub _jm_f_140($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.new
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_nextBlock (.keybinding.universal.nextBlock)
sub _jm_f_141($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.nextBlock
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_nextBlock-alt (.keybinding.universal.'nextBlock-alt')
sub _jm_f_142($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.'nextBlock-alt'
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_nextItem (.keybinding.universal.nextItem)
sub _jm_f_143($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.nextItem
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_nextItem-alt (.keybinding.universal.'nextItem-alt')
sub _jm_f_144($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.'nextItem-alt'
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_nextMatch (.keybinding.universal.nextMatch)
sub _jm_f_145($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.nextMatch
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_nextPage (.keybinding.universal.nextPage)
sub _jm_f_146($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.nextPage
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_nextScreenMode (.keybinding.universal.nextScreenMode)
sub _jm_f_147($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.nextScreenMode
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_nextTab (.keybinding.universal.nextTab)
sub _jm_f_148($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.nextTab
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_openFile (.keybinding.universal.openFile)
sub _jm_f_149($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.openFile
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_openRecentRepos (.keybinding.universal.openRecentRepos)
sub _jm_f_150($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.openRecentRepos
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_optionMenu (.keybinding.universal.optionMenu)
sub _jm_f_151($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.optionMenu
    $res = !defined($val);
    return $res;
}

# check _jm_obj_31_map_optionMenu-alt1 (.keybinding.universal.'optionMenu-alt1')
sub _jm_f_152($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.'optionMenu-alt1'
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_prevBlock (.keybinding.universal.prevBlock)
sub _jm_f_153($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.prevBlock
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_prevBlock-alt (.keybinding.universal.'prevBlock-alt')
sub _jm_f_154($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.'prevBlock-alt'
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_prevItem (.keybinding.universal.prevItem)
sub _jm_f_155($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.prevItem
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_prevItem-alt (.keybinding.universal.'prevItem-alt')
sub _jm_f_156($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.'prevItem-alt'
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_prevMatch (.keybinding.universal.prevMatch)
sub _jm_f_157($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.prevMatch
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_prevPage (.keybinding.universal.prevPage)
sub _jm_f_158($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.prevPage
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_prevScreenMode (.keybinding.universal.prevScreenMode)
sub _jm_f_159($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.prevScreenMode
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_prevTab (.keybinding.universal.prevTab)
sub _jm_f_160($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.prevTab
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_pullFiles (.keybinding.universal.pullFiles)
sub _jm_f_161($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.pullFiles
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_pushFiles (.keybinding.universal.pushFiles)
sub _jm_f_162($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.pushFiles
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_quit (.keybinding.universal.quit)
sub _jm_f_163($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.quit
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_quit-alt1 (.keybinding.universal.'quit-alt1')
sub _jm_f_164($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.'quit-alt1'
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_quitWithoutChangingDirectory (.keybinding.universal.quitWithoutChangingDirectory)
sub _jm_f_165($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.quitWithoutChangingDirectory
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_redo (.keybinding.universal.redo)
sub _jm_f_166($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.redo
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_refresh (.keybinding.universal.refresh)
sub _jm_f_167($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.refresh
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_remove (.keybinding.universal.remove)
sub _jm_f_168($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.remove
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_return (.keybinding.universal.return)
sub _jm_f_169($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.return
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_scrollDownMain (.keybinding.universal.scrollDownMain)
sub _jm_f_170($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.scrollDownMain
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_scrollDownMain-alt1 (.keybinding.universal.'scrollDownMain-alt1')
sub _jm_f_171($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.'scrollDownMain-alt1'
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_scrollDownMain-alt2 (.keybinding.universal.'scrollDownMain-alt2')
sub _jm_f_172($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.'scrollDownMain-alt2'
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_scrollLeft (.keybinding.universal.scrollLeft)
sub _jm_f_173($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.scrollLeft
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_scrollRight (.keybinding.universal.scrollRight)
sub _jm_f_174($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.scrollRight
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_scrollUpMain (.keybinding.universal.scrollUpMain)
sub _jm_f_175($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.scrollUpMain
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_scrollUpMain-alt1 (.keybinding.universal.'scrollUpMain-alt1')
sub _jm_f_176($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.'scrollUpMain-alt1'
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_scrollUpMain-alt2 (.keybinding.universal.'scrollUpMain-alt2')
sub _jm_f_177($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.'scrollUpMain-alt2'
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_select (.keybinding.universal.select)
sub _jm_f_178($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.select
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_submitEditorText (.keybinding.universal.submitEditorText)
sub _jm_f_179($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.submitEditorText
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_togglePanel (.keybinding.universal.togglePanel)
sub _jm_f_180($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.togglePanel
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_toggleWhitespaceInDiffView (.keybinding.universal.toggleWhitespaceInDiffView)
sub _jm_f_181($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.toggleWhitespaceInDiffView
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_undo (.keybinding.universal.undo)
sub _jm_f_182($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal.undo
    $res = json_model_4($val, $path, $rep);
    return $res;
}


# object .keybinding.universal
sub _jm_obj_31($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_31_map{$prop}))
        {
            # handle 59 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_22_map_universal (.keybinding.universal)
sub _jm_f_123($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding.universal
    $res = _jm_obj_31($val, $path, $rep);
    return $res;
}


# object .keybinding
sub _jm_obj_22($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_22_map{$prop}))
        {
            # handle 9 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_7_map_keybinding (.keybinding)
sub _jm_f_66($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .keybinding
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}


# check _jm_obj_7_map_notARepository (.notARepository)
sub _jm_f_183($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .notARepository
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_13{$val};
    return $res;
}

# check _jm_obj_32_map_copyToClipboardCmd (.os.copyToClipboardCmd)
sub _jm_f_185($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .os.copyToClipboardCmd
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_32_map_edit (.os.edit)
sub _jm_f_186($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .os.edit
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_32_map_editAtLine (.os.editAtLine)
sub _jm_f_187($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .os.editAtLine
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_32_map_editAtLineAndWait (.os.editAtLineAndWait)
sub _jm_f_188($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .os.editAtLineAndWait
    $res = jm_is_string($val);
    return $res;
}


# check _jm_obj_32_map_editPreset (.os.editPreset)
sub _jm_f_189($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .os.editPreset
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_14{$val};
    if (! $res)
    {
        $res = jm_is_string($val);
        if ($res)
        {
            # .os.editPreset.'|'.0
            $res = 1;
        }
    }
    return $res;
}

# check _jm_obj_32_map_open (.os.open)
sub _jm_f_190($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .os.open
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_32_map_openLink (.os.openLink)
sub _jm_f_191($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .os.openLink
    $res = jm_is_string($val);
    return $res;
}


# object .os
sub _jm_obj_32($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_32_map{$prop}))
        {
            # handle 7 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_7_map_os (.os)
sub _jm_f_184($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .os
    $res = _jm_obj_32($val, $path, $rep);
    return $res;
}

# check _jm_obj_7_map_promptToReturnFromSubprocess (.promptToReturnFromSubprocess)
sub _jm_f_192($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .promptToReturnFromSubprocess
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_7_map_quitOnTopLevelReturn (.quitOnTopLevelReturn)
sub _jm_f_193($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .quitOnTopLevelReturn
    $res = jm_is_boolean($val);
    return $res;
}

# object .refresher
sub _jm_obj_33($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'refreshInterval')
        {
            # handle may refreshInterval property
            # .refresher.refreshInterval
            $res = jm_is_integer($pval) && $pval >= 0;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'fetchInterval')
        {
            # handle may fetchInterval property
            # .refresher.fetchInterval
            $res = jm_is_integer($pval) && $pval >= 0;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_7_map_refresher (.refresher)
sub _jm_f_194($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .refresher
    $res = _jm_obj_33($val, $path, $rep);
    return $res;
}

sub _jm_re_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[^:]+:[^:]+$/;
    return $res;
}

# object .services
sub _jm_obj_34($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (_jm_re_1($prop, $path, $rep))
        {
            # handle 1 re props
            # .services.'/./'
            # "/^[^:]+:[^:]+$/"
            $res = jm_is_string($pval) && _jm_re_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_7_map_services (.services)
sub _jm_f_195($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .services
    $res = _jm_obj_34($val, $path, $rep);
    return $res;
}


# object .update
sub _jm_obj_35($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'method')
        {
            # handle may method property
            # .update.method
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_15{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'days')
        {
            # handle may days property
            # .update.days
            $res = jm_is_integer($pval) && $pval >= 0;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_7_map_update (.update)
sub _jm_f_196($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .update
    $res = _jm_obj_35($val, $path, $rep);
    return $res;
}


# object .
sub _jm_obj_7($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_7_map{$prop}))
        {
            # handle 13 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # JSON Model for Lazy Git
    # .
    $res = _jm_obj_7($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            'black' => 1,
            'red' => 1,
            'green' => 1,
            'yellow' => 1,
            'blue' => 1,
            'magenta' => 1,
            'cyan' => 1,
            'white' => 1,
            'bold' => 1,
            'default' => 1,
            'reverse' => 1,
            'underline' => 1,
            'strikethrough' => 1,
        );
        %_jm_cst_1 = (
            'input' => 1,
            'confirm' => 1,
            'menu' => 1,
            'menuFromCommand' => 1,
        );
        %_jm_cst_2 = (
            'authors' => 1,
            'branches' => 1,
            'files' => 1,
            'refs' => 1,
            'remotes' => 1,
            'remoteBranches' => 1,
            'tags' => 1,
        );
        %_jm_map_0 = (
            'input' => \&_jm_obj_0,
            'confirm' => \&_jm_obj_3,
            'menu' => \&_jm_obj_4,
            'menuFromCommand' => \&_jm_obj_6,
        );
        %_jm_cst_3 = (
            'status' => 1,
            'files' => 1,
            'worktrees' => 1,
            'localBranches' => 1,
            'remotes' => 1,
            'remoteBranches' => 1,
            'tags' => 1,
            'commits' => 1,
            'reflogCommits' => 1,
            'subCommits' => 1,
            'commitFiles' => 1,
            'stash' => 1,
            'global' => 1,
        );
        %_jm_obj_8_map = (
            'after' => \&_jm_f_2,
            'description' => \&_jm_f_3,
            'loadingText' => \&_jm_f_4,
            'prompts' => \&_jm_f_5,
            'showOutput' => \&_jm_f_6,
            'stream' => \&_jm_f_7,
            'subprocess' => \&_jm_f_8,
        );
        %_jm_cst_4 = (
            'date-order' => 1,
            'author-date-order' => 1,
            'topo-order' => 1,
            'default' => 1,
        );
        %_jm_cst_5 = (
            'always' => 1,
            'never' => 1,
            'when-maximised' => 1,
        );
        %_jm_cst_6 = (
            'always' => 1,
            'never' => 1,
        );
        %_jm_obj_10_map = (
            'allBranchesLogCmd' => \&_jm_f_11,
            'autoFetch' => \&_jm_f_12,
            'autoRefresh' => \&_jm_f_13,
            'branchLogCmd' => \&_jm_f_14,
            'commit' => \&_jm_f_15,
            'commitPrefixes' => \&_jm_f_16,
            'diffContextSize' => \&_jm_f_17,
            'disableForcePushing' => \&_jm_f_18,
            'fetchAll' => \&_jm_f_19,
            'log' => \&_jm_f_20,
            'mainBranches' => \&_jm_f_21,
            'merging' => \&_jm_f_22,
            'overrideGpg' => \&_jm_f_23,
            'paging' => \&_jm_f_24,
            'parseEmoji' => \&_jm_f_25,
            'skipHookPrefix' => \&_jm_f_26,
        );
        %_jm_cst_7 = (
            'single' => 1,
            'double' => 1,
            'rounded' => 1,
            'hidden' => 1,
        );
        %_jm_cst_8 = (
            'auto' => 1,
            'en' => 1,
            'zh-CN' => 1,
            'zh-TW' => 1,
            'pl' => 1,
            'nl' => 1,
            'ja' => 1,
            'ko' => 1,
            'ru' => 1,
        );
        %_jm_cst_9 = (
            'horizontal' => 1,
            'flexible' => 1,
            'vertical' => 1,
        );
        %_jm_cst_10 = (
            '2' => 1,
            '3' => 1,
        );
        %_jm_cst_11 = (
            'auto' => 1,
            'always' => 1,
        );
        %_jm_obj_21_map = (
            'activeBorderColor' => \&_jm_f_54,
            'cherryPickedCommitBgColor' => \&_jm_f_55,
            'cherryPickedCommitFgColor' => \&_jm_f_56,
            'defaultFgColor' => \&_jm_f_57,
            'inactiveBorderColor' => \&_jm_f_58,
            'optionsTextColor' => \&_jm_f_59,
            'searchingActiveBorderColor' => \&_jm_f_60,
            'selectedLineBgColor' => \&_jm_f_61,
            'selectedRangeBgColor' => \&_jm_f_62,
            'unstagedChangesColor' => \&_jm_f_63,
        );
        %_jm_cst_12 = (
            'normal' => 1,
            'half' => 1,
            'full' => 1,
        );
        %_jm_obj_17_map = (
            'animateExplosion' => \&_jm_f_28,
            'authorColors' => \&_jm_f_29,
            'border' => \&_jm_f_30,
            'branchColors' => \&_jm_f_31,
            'commandLogSize' => \&_jm_f_32,
            'commitLength' => \&_jm_f_33,
            'expandFocusedSidePanel' => \&_jm_f_34,
            'language' => \&_jm_f_35,
            'mainPanelSplitMode' => \&_jm_f_36,
            'mouseEvents' => \&_jm_f_37,
            'nerdFontsVersion' => \&_jm_f_38,
            'scrollHeight' => \&_jm_f_39,
            'scrollPastBottom' => \&_jm_f_40,
            'shortTimeFormat' => \&_jm_f_41,
            'showBottomLine' => \&_jm_f_42,
            'showBranchCommitHash' => \&_jm_f_43,
            'showCommandLog' => \&_jm_f_44,
            'showFileTree' => \&_jm_f_45,
            'showListFooter' => \&_jm_f_46,
            'showRandomTip' => \&_jm_f_47,
            'sidePanelWidth' => \&_jm_f_48,
            'skipDiscardChangeWarning' => \&_jm_f_49,
            'skipRewordInEditorWarning' => \&_jm_f_50,
            'skipStashWarning' => \&_jm_f_51,
            'splitDiff' => \&_jm_f_52,
            'theme' => \&_jm_f_53,
            'timeFormat' => \&_jm_f_64,
            'windowSize' => \&_jm_f_65,
        );
        %_jm_obj_23_map = (
            'checkoutBranchByName' => \&_jm_f_68,
            'createPullRequest' => \&_jm_f_69,
            'createTag' => \&_jm_f_70,
            'fastForward' => \&_jm_f_71,
            'fetchRemote' => \&_jm_f_72,
            'forceCheckoutBranch' => \&_jm_f_73,
            'mergeIntoCurrentBranch' => \&_jm_f_74,
            'pushTag' => \&_jm_f_75,
            'rebaseBranch' => \&_jm_f_76,
            'renameBranch' => \&_jm_f_77,
            'setUpstream' => \&_jm_f_78,
            'viewGitFlowOptions' => \&_jm_f_79,
            'viewPullRequestOptions' => \&_jm_f_80,
        );
        %_jm_obj_25_map = (
            'amendToCommit' => \&_jm_f_83,
            'checkoutCommit' => \&_jm_f_84,
            'cherryPickCopy' => \&_jm_f_85,
            'cherryPickCopyRange' => \&_jm_f_86,
            'copyCommitMessageToClipboard' => \&_jm_f_87,
            'createFixupCommit' => \&_jm_f_88,
            'markCommitAsFixup' => \&_jm_f_89,
            'moveDownCommit' => \&_jm_f_90,
            'moveUpCommit' => \&_jm_f_91,
            'openLogMenu' => \&_jm_f_92,
            'pasteCommits' => \&_jm_f_93,
            'pickCommit' => \&_jm_f_94,
            'renameCommit' => \&_jm_f_95,
            'renameCommitWithEditor' => \&_jm_f_96,
            'resetCherryPick' => \&_jm_f_97,
            'revertCommit' => \&_jm_f_98,
            'squashAboveCommits' => \&_jm_f_99,
            'squashDown' => \&_jm_f_100,
            'tagCommit' => \&_jm_f_101,
            'viewBisectOptions' => \&_jm_f_102,
            'viewResetOptions' => \&_jm_f_103,
        );
        %_jm_obj_26_map = (
            'amendLastCommit' => \&_jm_f_105,
            'commitChanges' => \&_jm_f_106,
            'commitChangesWithEditor' => \&_jm_f_107,
            'commitChangesWithoutHook' => \&_jm_f_108,
            'fetch' => \&_jm_f_109,
            'ignoreFile' => \&_jm_f_110,
            'openMergeTool' => \&_jm_f_111,
            'openStatusFilter' => \&_jm_f_112,
            'refreshFiles' => \&_jm_f_113,
            'stashAllChanges' => \&_jm_f_114,
            'toggleStagedAll' => \&_jm_f_115,
            'toggleTreeView' => \&_jm_f_116,
            'viewResetOptions' => \&_jm_f_117,
            'viewStashOptions' => \&_jm_f_118,
        );
        %_jm_obj_31_map = (
            'confirm' => \&_jm_f_124,
            'copyToClipboard' => \&_jm_f_125,
            'createPatchOptionsMenu' => \&_jm_f_126,
            'createRebaseOptionsMenu' => \&_jm_f_127,
            'decreaseContextInDiffView' => \&_jm_f_128,
            'diffingMenu' => \&_jm_f_129,
            'diffingMenu-alt' => \&_jm_f_130,
            'edit' => \&_jm_f_131,
            'executeCustomCommand' => \&_jm_f_132,
            'extrasMenu' => \&_jm_f_133,
            'filteringMenu' => \&_jm_f_134,
            'goInto' => \&_jm_f_135,
            'gotoBottom' => \&_jm_f_136,
            'gotoTop' => \&_jm_f_137,
            'increaseContextInDiffView' => \&_jm_f_138,
            'jumpToBlock' => \&_jm_f_139,
            'new' => \&_jm_f_140,
            'nextBlock' => \&_jm_f_141,
            'nextBlock-alt' => \&_jm_f_142,
            'nextItem' => \&_jm_f_143,
            'nextItem-alt' => \&_jm_f_144,
            'nextMatch' => \&_jm_f_145,
            'nextPage' => \&_jm_f_146,
            'nextScreenMode' => \&_jm_f_147,
            'nextTab' => \&_jm_f_148,
            'openFile' => \&_jm_f_149,
            'openRecentRepos' => \&_jm_f_150,
            'optionMenu' => \&_jm_f_151,
            'optionMenu-alt1' => \&_jm_f_152,
            'prevBlock' => \&_jm_f_153,
            'prevBlock-alt' => \&_jm_f_154,
            'prevItem' => \&_jm_f_155,
            'prevItem-alt' => \&_jm_f_156,
            'prevMatch' => \&_jm_f_157,
            'prevPage' => \&_jm_f_158,
            'prevScreenMode' => \&_jm_f_159,
            'prevTab' => \&_jm_f_160,
            'pullFiles' => \&_jm_f_161,
            'pushFiles' => \&_jm_f_162,
            'quit' => \&_jm_f_163,
            'quit-alt1' => \&_jm_f_164,
            'quitWithoutChangingDirectory' => \&_jm_f_165,
            'redo' => \&_jm_f_166,
            'refresh' => \&_jm_f_167,
            'remove' => \&_jm_f_168,
            'return' => \&_jm_f_169,
            'scrollDownMain' => \&_jm_f_170,
            'scrollDownMain-alt1' => \&_jm_f_171,
            'scrollDownMain-alt2' => \&_jm_f_172,
            'scrollLeft' => \&_jm_f_173,
            'scrollRight' => \&_jm_f_174,
            'scrollUpMain' => \&_jm_f_175,
            'scrollUpMain-alt1' => \&_jm_f_176,
            'scrollUpMain-alt2' => \&_jm_f_177,
            'select' => \&_jm_f_178,
            'submitEditorText' => \&_jm_f_179,
            'togglePanel' => \&_jm_f_180,
            'toggleWhitespaceInDiffView' => \&_jm_f_181,
            'undo' => \&_jm_f_182,
        );
        %_jm_obj_22_map = (
            'branches' => \&_jm_f_67,
            'commitFiles' => \&_jm_f_81,
            'commits' => \&_jm_f_82,
            'files' => \&_jm_f_104,
            'main' => \&_jm_f_119,
            'stash' => \&_jm_f_120,
            'status' => \&_jm_f_121,
            'submodules' => \&_jm_f_122,
            'universal' => \&_jm_f_123,
        );
        %_jm_cst_13 = (
            'prompt' => 1,
            'create' => 1,
            'skip' => 1,
            'quit' => 1,
        );
        %_jm_cst_14 = (
            'vim' => 1,
            'nvim' => 1,
            'emacs' => 1,
            'nano' => 1,
            'vscode' => 1,
            'sublime' => 1,
            'bbedit' => 1,
            'kakoune' => 1,
            'helix' => 1,
            'xcode' => 1,
        );
        %_jm_obj_32_map = (
            'copyToClipboardCmd' => \&_jm_f_185,
            'edit' => \&_jm_f_186,
            'editAtLine' => \&_jm_f_187,
            'editAtLineAndWait' => \&_jm_f_188,
            'editPreset' => \&_jm_f_189,
            'open' => \&_jm_f_190,
            'openLink' => \&_jm_f_191,
        );
        %_jm_cst_15 = (
            'prompt' => 1,
            'background' => 1,
            'never' => 1,
        );
        %_jm_obj_7_map = (
            'confirmOnQuit' => \&_jm_f_0,
            'customCommands' => \&_jm_f_1,
            'disableStartupPopups' => \&_jm_f_9,
            'git' => \&_jm_f_10,
            'gui' => \&_jm_f_27,
            'keybinding' => \&_jm_f_66,
            'notARepository' => \&_jm_f_183,
            'os' => \&_jm_f_184,
            'promptToReturnFromSubprocess' => \&_jm_f_192,
            'quitOnTopLevelReturn' => \&_jm_f_193,
            'refresher' => \&_jm_f_194,
            'services' => \&_jm_f_195,
            'update' => \&_jm_f_196,
        );
        %check_model_map = (
            '' => \&_jm_obj_7,
            'color' => \&json_model_2,
            'colorArray' => \&json_model_3,
            'keybinding' => \&json_model_4,
            'custom-commands-prompts-type-property' => \&json_model_5,
            'custom-commands-prompts-title-property' => \&json_model_6,
            'custom-commands-prompts-key-property' => \&json_model_7,
            'neString' => \&json_model_8,
            'stringArray' => \&json_model_9,
            'Prompts' => \&json_model_10,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %_jm_cst_1 = ();
        %_jm_cst_2 = ();
        %_jm_map_0 = ();
        %_jm_cst_3 = ();
        %_jm_obj_8_map = ();
        %_jm_cst_4 = ();
        %_jm_cst_5 = ();
        %_jm_cst_6 = ();
        %_jm_obj_10_map = ();
        %_jm_cst_7 = ();
        %_jm_cst_8 = ();
        %_jm_cst_9 = ();
        %_jm_cst_10 = ();
        %_jm_cst_11 = ();
        %_jm_obj_21_map = ();
        %_jm_cst_12 = ();
        %_jm_obj_17_map = ();
        %_jm_obj_23_map = ();
        %_jm_obj_25_map = ();
        %_jm_obj_26_map = ();
        %_jm_obj_31_map = ();
        %_jm_obj_22_map = ();
        %_jm_cst_13 = ();
        %_jm_cst_14 = ();
        %_jm_obj_32_map = ();
        %_jm_cst_15 = ();
        %_jm_obj_7_map = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
