#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
_jm_re_0_reco: object
_jm_re_0: RegexFun
_jm_cst_1: set[str]
_jm_cst_2: set[str]
_jm_map_0: dict[str, str]
_jm_cst_3: set[str]
_jm_re_1_reco: object
_jm_re_1: RegexFun
_jm_cst_4: set[str]
_jm_cst_5: set[str]
_jm_cst_6: set[str]
_jm_f_3_map: PropMap
_jm_cst_7: set[str]
_jm_cst_8: set[str]
_jm_cst_9: set[str]
_jm_cst_10: set[str]
_jm_cst_11: set[str]
_jm_cst_12: set[str]
_jm_f_19_map: PropMap
_jm_obj_10_map: PropMap
_jm_obj_12_map: PropMap
_jm_obj_13_map: PropMap
_jm_obj_14_map: PropMap
_jm_cst_13: set[str]
_jm_cst_14: set[str]
_jm_re_2_reco: object
_jm_re_2: RegexFun
_jm_cst_15: set[str]
json_model_1_map: PropMap
check_model_map: PropMap



# check $color (.'$color')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$color'
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$color'.'|']", path))
    if not res:
        res = isinstance(val, str)
        if not res:
            rep is None or rep.append(("unexpected type [.'$color'.'|']", path))
        if res:
            # .'$color'.'|'.0
            # "/^#[0-9a-fA-F]{6}$/"
            res = _jm_re_0(val, path, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected /^#[0-9a-fA-F]{6}$/ [.'$color'.'|'.0]", path))
                rep is None or rep.append(("no model matched [.'$color'.'|']", path))
    return res

# check $colorArray (.'$colorArray')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$colorArray'
    # .'$colorArray'.'@'
    res: bool = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$colorArray'.'@'.0
            res = json_model_2(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $color [.'$colorArray'.'@'.0]", arr_0_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$colorArray'.'@']", path))
    if res:
        ival_0: int = len(val)
        res = is_unique_array(val, path, rep) and ival_0 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$colorArray']", path))
    return res

# check $keybinding (.'$keybinding')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$keybinding'
    # .'$keybinding'.'|'.0
    res: bool = val is None
    if not res:
        rep is None or rep.append(("not null [.'$keybinding'.'|'.0]", path))
    if not res:
        # .'$keybinding'.'|'.1
        res = isinstance(val, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$keybinding'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$keybinding'.'|']", path))
    return res


# check $custom-commands-prompts-type-property (.'$custom-commands-prompts-type-property')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$custom-commands-prompts-type-property'
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_1
    if not res:
        rep is None or rep.append(("value not in enum [.'$custom-commands-prompts-type-property'.'|']", path))
    return res

# check $custom-commands-prompts-title-property (.'$custom-commands-prompts-title-property')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$custom-commands-prompts-title-property'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$custom-commands-prompts-title-property']", path))
    return res

# check $custom-commands-prompts-key-property (.'$custom-commands-prompts-key-property')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$custom-commands-prompts-key-property'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$custom-commands-prompts-key-property']", path))
    return res

# check $neString (.'$neString')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$neString'
    # .'$neString'.'@'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$neString'.'@']", path))
    if res:
        sval_0: str = val
        res = sval_0 != ""
        if not res:
            rep is None or rep.append(("constraints failed [.'$neString']", path))
    return res

# check $stringArray (.'$stringArray')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$stringArray'
    # .'$stringArray'.'@'
    res: bool = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$stringArray'.'@'.0
            res = json_model_8(arr_1_item, arr_1_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $neString [.'$stringArray'.'@'.0]", arr_1_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$stringArray'.'@']", path))
    if res:
        res = is_unique_array(val, path, rep)
        if not res:
            rep is None or rep.append(("constraints failed [.'$stringArray']", path))
    return res

# object .'$Prompts'.'|'.0.suggestions.'|'.1
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.0.suggestions.'|'.1]", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$Prompts'.'|'.0.suggestions.'|'.1]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("command", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <command> [.'$Prompts'.'|'.0.suggestions.'|'.1]", path))
        return False
    lpath = (path + [ "command" ]) if path is not None else None
    # .'$Prompts'.'|'.0.suggestions.'|'.1.command
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.0.suggestions.'|'.1.command]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <command> [.'$Prompts'.'|'.0.suggestions.'|'.1]", lpath if path is not None else None))
        return False
    return True


# object .'$Prompts'.'|'.0.suggestions.'|'.0
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.0.suggestions.'|'.0]", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$Prompts'.'|'.0.suggestions.'|'.0]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("preset", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <preset> [.'$Prompts'.'|'.0.suggestions.'|'.0]", path))
        return False
    lpath = (path + [ "preset" ]) if path is not None else None
    # .'$Prompts'.'|'.0.suggestions.'|'.0.preset
    res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_2
    if not res:
        rep is None or rep.append(("value not in enum [.'$Prompts'.'|'.0.suggestions.'|'.0.preset.'|']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <preset> [.'$Prompts'.'|'.0.suggestions.'|'.0]", lpath if path is not None else None))
        return False
    return True

# object .'$Prompts'.'|'.0
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Prompts'.'|'.0.type
            res = isinstance(pval, str) and pval == "input"
            if not res:
                rep is None or rep.append(("unexpected input [.'$Prompts'.'|'.0.type]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.0.type]", lpath_0 if path is not None else None))
                return False
        elif prop == "title":
            # handle must title property
            must_count += 1
            # .'$Prompts'.'|'.0.title
            res = json_model_6(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-title-property [.'$Prompts'.'|'.0.title]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.0.title]", lpath_0 if path is not None else None))
                return False
        elif prop == "key":
            # handle must key property
            must_count += 1
            # .'$Prompts'.'|'.0.key
            res = json_model_7(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-key-property [.'$Prompts'.'|'.0.key]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.0.key]", lpath_0 if path is not None else None))
                return False
        elif prop == "initialValue":
            # handle may initialValue property
            # .'$Prompts'.'|'.0.initialValue
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.0.initialValue]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.0.initialValue]", lpath_0 if path is not None else None))
                return False
        elif prop == "suggestions":
            # handle may suggestions property
            # .'$Prompts'.'|'.0.suggestions
            res = isinstance(pval, dict)
            if not res:
                rep is None or rep.append(("unexpected type [.'$Prompts'.'|'.0.suggestions.'|']", lpath_0 if path is not None else None))
            if res:
                # .'$Prompts'.'|'.0.suggestions.'|'.0
                res = _jm_obj_2(pval, lpath_0 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Prompts'.'|'.0.suggestions.'|'.0]", lpath_0 if path is not None else None))
                if not res:
                    # .'$Prompts'.'|'.0.suggestions.'|'.1
                    res = _jm_obj_1(pval, lpath_0 if path is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Prompts'.'|'.0.suggestions.'|'.1]", lpath_0 if path is not None else None))
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("no model matched [.'$Prompts'.'|'.0.suggestions.'|']", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.0.suggestions]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Prompts'.'|'.0]", lpath_0 if path is not None else None))
            return False
    if must_count != 3:
        if rep is not None:
            if not "key" in val:
                rep is None or rep.append(("missing mandatory prop <key> [.'$Prompts'.'|'.0]", path))
            if not "title" in val:
                rep is None or rep.append(("missing mandatory prop <title> [.'$Prompts'.'|'.0]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Prompts'.'|'.0]", path))
        return False
    return True

# object .'$Prompts'.'|'.1
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Prompts'.'|'.1.type
            res = isinstance(pval, str) and pval == "confirm"
            if not res:
                rep is None or rep.append(("unexpected confirm [.'$Prompts'.'|'.1.type]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.1.type]", lpath_1 if path is not None else None))
                return False
        elif prop == "title":
            # handle must title property
            must_count += 1
            # .'$Prompts'.'|'.1.title
            res = json_model_6(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-title-property [.'$Prompts'.'|'.1.title]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.1.title]", lpath_1 if path is not None else None))
                return False
        elif prop == "key":
            # handle must key property
            must_count += 1
            # .'$Prompts'.'|'.1.key
            res = json_model_7(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-key-property [.'$Prompts'.'|'.1.key]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.1.key]", lpath_1 if path is not None else None))
                return False
        elif prop == "body":
            # handle may body property
            # .'$Prompts'.'|'.1.body
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.1.body]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.1.body]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Prompts'.'|'.1]", lpath_1 if path is not None else None))
            return False
    if must_count != 3:
        if rep is not None:
            if not "key" in val:
                rep is None or rep.append(("missing mandatory prop <key> [.'$Prompts'.'|'.1]", path))
            if not "title" in val:
                rep is None or rep.append(("missing mandatory prop <title> [.'$Prompts'.'|'.1]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Prompts'.'|'.1]", path))
        return False
    return True

# object .'$Prompts'.'|'.2.options.'@'.0
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.2.options.'@'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "value":
            # handle must value property
            must_count += 1
            # .'$Prompts'.'|'.2.options.'@'.0.value
            res = json_model_8(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $neString [.'$Prompts'.'|'.2.options.'@'.0.value]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.2.options.'@'.0.value]", lpath_2 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Prompts'.'|'.2.options.'@'.0.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.2.options.'@'.0.description]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.2.options.'@'.0.description]", lpath_2 if path is not None else None))
                return False
        elif prop == "name":
            # handle may name property
            # .'$Prompts'.'|'.2.options.'@'.0.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.2.options.'@'.0.name]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.2.options.'@'.0.name]", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Prompts'.'|'.2.options.'@'.0]", lpath_2 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "value" in val:
                rep is None or rep.append(("missing mandatory prop <value> [.'$Prompts'.'|'.2.options.'@'.0]", path))
        return False
    return True

# object .'$Prompts'.'|'.2
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.2]", path))
        return False
    if len(val) != 4:
        rep is None or rep.append(("bad property count [.'$Prompts'.'|'.2]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("type", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <type> [.'$Prompts'.'|'.2]", path))
        return False
    lpath = (path + [ "type" ]) if path is not None else None
    # .'$Prompts'.'|'.2.type
    res = isinstance(pval, str) and pval == "menu"
    if not res:
        rep is None or rep.append(("unexpected menu [.'$Prompts'.'|'.2.type]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <type> [.'$Prompts'.'|'.2]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("title", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <title> [.'$Prompts'.'|'.2]", path))
        return False
    lpath = (path + [ "title" ]) if path is not None else None
    # .'$Prompts'.'|'.2.title
    res = json_model_6(pval, lpath if path is not None else None, rep)
    if not res:
        rep is None or rep.append(("unexpected $custom-commands-prompts-title-property [.'$Prompts'.'|'.2.title]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <title> [.'$Prompts'.'|'.2]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("key", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <key> [.'$Prompts'.'|'.2]", path))
        return False
    lpath = (path + [ "key" ]) if path is not None else None
    # .'$Prompts'.'|'.2.key
    res = json_model_7(pval, lpath if path is not None else None, rep)
    if not res:
        rep is None or rep.append(("unexpected $custom-commands-prompts-key-property [.'$Prompts'.'|'.2.key]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <key> [.'$Prompts'.'|'.2]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("options", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <options> [.'$Prompts'.'|'.2]", path))
        return False
    lpath = (path + [ "options" ]) if path is not None else None
    # .'$Prompts'.'|'.2.options
    # .'$Prompts'.'|'.2.options.'@'
    res = isinstance(pval, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(pval):
            arr_2_lpath: Path = ((lpath if path is not None else None) + [ arr_2_idx ]) if (lpath if path is not None else None) is not None else None
            # .'$Prompts'.'|'.2.options.'@'.0
            res = _jm_obj_5(arr_2_item, arr_2_lpath if (lpath if path is not None else None) is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Prompts'.'|'.2.options.'@'.0]", arr_2_lpath if (lpath if path is not None else None) is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Prompts'.'|'.2.options.'@']", lpath if path is not None else None))
    if res:
        res = is_unique_array(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("constraints failed [.'$Prompts'.'|'.2.options]", lpath if path is not None else None))
    if not res:
        rep is None or rep.append(("unexpected value for mandatory prop <options> [.'$Prompts'.'|'.2]", lpath if path is not None else None))
        return False
    return True

# object .'$Prompts'.'|'.3
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Prompts'.'|'.3.type
            res = isinstance(pval, str) and pval == "menuFromCommand"
            if not res:
                rep is None or rep.append(("unexpected menuFromCommand [.'$Prompts'.'|'.3.type]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.3.type]", lpath_3 if path is not None else None))
                return False
        elif prop == "title":
            # handle must title property
            must_count += 1
            # .'$Prompts'.'|'.3.title
            res = json_model_6(pval, lpath_3 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-title-property [.'$Prompts'.'|'.3.title]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.3.title]", lpath_3 if path is not None else None))
                return False
        elif prop == "key":
            # handle must key property
            must_count += 1
            # .'$Prompts'.'|'.3.key
            res = json_model_7(pval, lpath_3 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-key-property [.'$Prompts'.'|'.3.key]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.3.key]", lpath_3 if path is not None else None))
                return False
        elif prop == "command":
            # handle must command property
            must_count += 1
            # .'$Prompts'.'|'.3.command
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.3.command]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.3.command]", lpath_3 if path is not None else None))
                return False
        elif prop == "filter":
            # handle may filter property
            # .'$Prompts'.'|'.3.filter
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.3.filter]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.3.filter]", lpath_3 if path is not None else None))
                return False
        elif prop == "valueFormat":
            # handle may valueFormat property
            # .'$Prompts'.'|'.3.valueFormat
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.3.valueFormat]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.3.valueFormat]", lpath_3 if path is not None else None))
                return False
        elif prop == "labelFormat":
            # handle may labelFormat property
            # .'$Prompts'.'|'.3.labelFormat
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.3.labelFormat]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.3.labelFormat]", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Prompts'.'|'.3]", lpath_3 if path is not None else None))
            return False
    if must_count != 4:
        if rep is not None:
            if not ("command" in val):
                rep is None or rep.append(("missing mandatory prop <command> [.'$Prompts'.'|'.3]", path))
            if not "key" in val:
                rep is None or rep.append(("missing mandatory prop <key> [.'$Prompts'.'|'.3]", path))
            if not "title" in val:
                rep is None or rep.append(("missing mandatory prop <title> [.'$Prompts'.'|'.3]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Prompts'.'|'.3]", path))
        return False
    return True


# check $Prompts (.'$Prompts')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Prompts'
    iso_0: bool = isinstance(val, dict)
    res = iso_0
    if res:
        if "type" in val:
            tag_0: Jsonable = val.get("type", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <type> value not found [.'$Prompts'.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <type> is missing [.'$Prompts'.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'$Prompts'.'|']", path))
    return res

# check json_model_1_map_confirmOnQuit (.confirmOnQuit)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # .confirmOnQuit
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.confirmOnQuit]", path))
    return res


# object .customCommands.'@'.0.after
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.customCommands.'@'.0.after]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "checkForConflicts":
            # handle may checkForConflicts property
            # .customCommands.'@'.0.after.checkForConflicts
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.customCommands.'@'.0.after.checkForConflicts]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.customCommands.'@'.0.after.checkForConflicts]", lpath_6 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.customCommands.'@'.0.after]", lpath_6 if path is not None else None))
            return False
    return True

# object .customCommands.'@'.0
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.customCommands.'@'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "key":
            # handle must key property
            must_count += 1
            # .customCommands.'@'.0.key
            res = json_model_4(pval, lpath_5 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.customCommands.'@'.0.key]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.customCommands.'@'.0.key]", lpath_5 if path is not None else None))
                return False
        elif prop == "command":
            # handle must command property
            must_count += 1
            # .customCommands.'@'.0.command
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.customCommands.'@'.0.command]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.customCommands.'@'.0.command]", lpath_5 if path is not None else None))
                return False
        elif prop == "context":
            # handle must context property
            must_count += 1
            # .customCommands.'@'.0.context
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_3
            if not res:
                rep is None or rep.append(("value not in enum [.customCommands.'@'.0.context.'|']", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.customCommands.'@'.0.context]", lpath_5 if path is not None else None))
                return False
        elif prop == "subprocess":
            # handle may subprocess property
            # .customCommands.'@'.0.subprocess
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.customCommands.'@'.0.subprocess]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.customCommands.'@'.0.subprocess]", lpath_5 if path is not None else None))
                return False
        elif prop == "prompts":
            # handle may prompts property
            # .customCommands.'@'.0.prompts
            res = isinstance(pval, list)
            if res:
                for arr_4_idx, arr_4_item in enumerate(pval):
                    arr_4_lpath: Path = ((lpath_5 if path is not None else None) + [ arr_4_idx ]) if (lpath_5 if path is not None else None) is not None else None
                    # .customCommands.'@'.0.prompts.0
                    res = json_model_10(arr_4_item, arr_4_lpath if (lpath_5 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Prompts [.customCommands.'@'.0.prompts.0]", arr_4_lpath if (lpath_5 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.customCommands.'@'.0.prompts]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.customCommands.'@'.0.prompts]", lpath_5 if path is not None else None))
                return False
        elif prop == "loadingText":
            # handle may loadingText property
            # .customCommands.'@'.0.loadingText
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.customCommands.'@'.0.loadingText]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.customCommands.'@'.0.loadingText]", lpath_5 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .customCommands.'@'.0.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.customCommands.'@'.0.description]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.customCommands.'@'.0.description]", lpath_5 if path is not None else None))
                return False
        elif prop == "stream":
            # handle may stream property
            # .customCommands.'@'.0.stream
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.customCommands.'@'.0.stream]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.customCommands.'@'.0.stream]", lpath_5 if path is not None else None))
                return False
        elif prop == "showOutput":
            # handle may showOutput property
            # .customCommands.'@'.0.showOutput
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.customCommands.'@'.0.showOutput]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.customCommands.'@'.0.showOutput]", lpath_5 if path is not None else None))
                return False
        elif prop == "after":
            # handle may after property
            # .customCommands.'@'.0.after
            res = _jm_obj_8(pval, lpath_5 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.customCommands.'@'.0.after]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.customCommands.'@'.0.after]", lpath_5 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.customCommands.'@'.0]", lpath_5 if path is not None else None))
            return False
    if must_count != 3:
        if rep is not None:
            if not ("command" in val):
                rep is None or rep.append(("missing mandatory prop <command> [.customCommands.'@'.0]", path))
            if not "context" in val:
                rep is None or rep.append(("missing mandatory prop <context> [.customCommands.'@'.0]", path))
            if not "key" in val:
                rep is None or rep.append(("missing mandatory prop <key> [.customCommands.'@'.0]", path))
        return False
    return True

# check json_model_1_map_customCommands (.customCommands)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .customCommands
    # .customCommands.'@'
    res: bool = isinstance(val, list)
    if res:
        for arr_3_idx, arr_3_item in enumerate(val):
            arr_3_lpath: Path = (path + [ arr_3_idx ]) if path is not None else None
            # .customCommands.'@'.0
            res = _jm_obj_7(arr_3_item, arr_3_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.customCommands.'@'.0]", arr_3_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.customCommands.'@']", path))
    if res:
        res = is_unique_array(val, path, rep)
        if not res:
            rep is None or rep.append(("constraints failed [.customCommands]", path))
    return res

# check json_model_1_map_disableStartupPopups (.disableStartupPopups)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # .disableStartupPopups
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.disableStartupPopups]", path))
    return res

# check _jm_f_3_map_allBranchesLogCmd (.git.allBranchesLogCmd)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.allBranchesLogCmd
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.git.allBranchesLogCmd]", path))
    return res

# check _jm_f_3_map_autoFetch (.git.autoFetch)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.autoFetch
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.git.autoFetch]", path))
    return res

# check _jm_f_3_map_autoRefresh (.git.autoRefresh)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.autoRefresh
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.git.autoRefresh]", path))
    return res

# check _jm_f_3_map_branchLogCmd (.git.branchLogCmd)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.branchLogCmd
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.git.branchLogCmd]", path))
    return res

# check _jm_f_3_map_commit (.git.commit)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.commit
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git.commit]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if prop == "signOff":
            # handle may signOff property
            # .git.commit.signOff
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.git.commit.signOff]", lpath_8 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.git.commit.signOff]", lpath_8 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.git.commit]", lpath_8 if path is not None else None))
            return False
    return True


# object .git.commitPrefixes.'/./'
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git.commitPrefixes.'/./']", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.git.commitPrefixes.'/./']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("pattern", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <pattern> [.git.commitPrefixes.'/./']", path))
        return False
    lpath = (path + [ "pattern" ]) if path is not None else None
    # .git.commitPrefixes.'/./'.pattern
    res = json_model_8(pval, lpath if path is not None else None, rep)
    if not res:
        rep is None or rep.append(("unexpected $neString [.git.commitPrefixes.'/./'.pattern]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <pattern> [.git.commitPrefixes.'/./']", lpath if path is not None else None))
        return False
    if not ((pval := val.get("replace", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <replace> [.git.commitPrefixes.'/./']", path))
        return False
    lpath = (path + [ "replace" ]) if path is not None else None
    # .git.commitPrefixes.'/./'.replace
    res = json_model_8(pval, lpath if path is not None else None, rep)
    if not res:
        rep is None or rep.append(("unexpected $neString [.git.commitPrefixes.'/./'.replace]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <replace> [.git.commitPrefixes.'/./']", lpath if path is not None else None))
        return False
    return True

# check _jm_f_3_map_commitPrefixes (.git.commitPrefixes)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.commitPrefixes
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git.commitPrefixes]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .git.commitPrefixes.'/./'
            res = _jm_obj_9(pval, lpath_9 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.git.commitPrefixes.'/./']", lpath_9 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.git.commitPrefixes]", lpath_9 if path is not None else None))
            return False
    return True

# check _jm_f_3_map_diffContextSize (.git.diffContextSize)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.diffContextSize
    res: bool = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.git.diffContextSize]", path))
    return res

# check _jm_f_3_map_disableForcePushing (.git.disableForcePushing)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.disableForcePushing
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.git.disableForcePushing]", path))
    return res

# check _jm_f_3_map_fetchAll (.git.fetchAll)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.fetchAll
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.git.fetchAll]", path))
    return res



# check _jm_f_3_map_log (.git.log)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.log
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git.log]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        if prop == "order":
            # handle may order property
            # .git.log.order
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_4
            if not res:
                rep is None or rep.append(("value not in enum [.git.log.order.'|']", lpath_10 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.git.log.order]", lpath_10 if path is not None else None))
                return False
        elif prop == "showGraph":
            # handle may showGraph property
            # .git.log.showGraph
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_5
            if not res:
                rep is None or rep.append(("value not in enum [.git.log.showGraph.'|']", lpath_10 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.git.log.showGraph]", lpath_10 if path is not None else None))
                return False
        elif prop == "showWholeGraph":
            # handle may showWholeGraph property
            # .git.log.showWholeGraph
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.git.log.showWholeGraph]", lpath_10 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.git.log.showWholeGraph]", lpath_10 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.git.log]", lpath_10 if path is not None else None))
            return False
    return True

# check _jm_f_3_map_merging (.git.merging)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.merging
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git.merging]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        if prop == "manualCommit":
            # handle may manualCommit property
            # .git.merging.manualCommit
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.git.merging.manualCommit]", lpath_11 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.git.merging.manualCommit]", lpath_11 if path is not None else None))
                return False
        elif prop == "args":
            # handle may args property
            # .git.merging.args
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.git.merging.args]", lpath_11 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.git.merging.args]", lpath_11 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.git.merging]", lpath_11 if path is not None else None))
            return False
    return True

# check _jm_f_3_map_overrideGpg (.git.overrideGpg)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.overrideGpg
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.git.overrideGpg]", path))
    return res


# check _jm_f_3_map_paging (.git.paging)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.paging
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git.paging]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        if prop == "colorArg":
            # handle may colorArg property
            # .git.paging.colorArg
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_6
            if not res:
                rep is None or rep.append(("value not in enum [.git.paging.colorArg.'|']", lpath_12 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.git.paging.colorArg]", lpath_12 if path is not None else None))
                return False
        elif prop == "useConfig":
            # handle may useConfig property
            # .git.paging.useConfig
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.git.paging.useConfig]", lpath_12 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.git.paging.useConfig]", lpath_12 if path is not None else None))
                return False
        elif prop == "pager":
            # handle may pager property
            # .git.paging.pager
            # .git.paging.pager.'@'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.git.paging.pager.'@']", lpath_12 if path is not None else None))
            if res:
                sval_1: str = pval
                res = sval_1 != ""
                if not res:
                    rep is None or rep.append(("constraints failed [.git.paging.pager]", lpath_12 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.git.paging.pager]", lpath_12 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.git.paging]", lpath_12 if path is not None else None))
            return False
    return True

# check _jm_f_3_map_parseEmoji (.git.parseEmoji)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.parseEmoji
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.git.parseEmoji]", path))
    return res

# check _jm_f_3_map_skipHookPrefix (.git.skipHookPrefix)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git.skipHookPrefix
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.git.skipHookPrefix]", path))
    return res


# check json_model_1_map_git (.git)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # .git
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_f_3_map.get(prop):
            # handle 16 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_7 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.git]", lpath_7 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.git]", lpath_7 if path is not None else None))
            return False
    return True

# check _jm_f_19_map_animateExplosion (.gui.animateExplosion)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.animateExplosion
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.animateExplosion]", path))
    return res

# check _jm_f_19_map_authorColors (.gui.authorColors)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.authorColors
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.gui.authorColors]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .gui.authorColors.'/./'
            res = json_model_2(pval, lpath_14 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $color [.gui.authorColors.'/./']", lpath_14 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.gui.authorColors]", lpath_14 if path is not None else None))
            return False
    return True


# check _jm_f_19_map_border (.gui.border)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.border
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_7
    if not res:
        rep is None or rep.append(("value not in enum [.gui.border.'|']", path))
    return res

# check _jm_f_19_map_branchColors (.gui.branchColors)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.branchColors
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.gui.branchColors]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .gui.branchColors.'/./'
            res = json_model_2(pval, lpath_15 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $color [.gui.branchColors.'/./']", lpath_15 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.gui.branchColors]", lpath_15 if path is not None else None))
            return False
    return True

# check _jm_f_19_map_commandLogSize (.gui.commandLogSize)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.commandLogSize
    res: bool = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.gui.commandLogSize]", path))
    return res

# check _jm_f_19_map_commitLength (.gui.commitLength)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.commitLength
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.gui.commitLength]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        if prop == "show":
            # handle may show property
            # .gui.commitLength.show
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.gui.commitLength.show]", lpath_16 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.gui.commitLength.show]", lpath_16 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.gui.commitLength]", lpath_16 if path is not None else None))
            return False
    return True

# check _jm_f_19_map_expandFocusedSidePanel (.gui.expandFocusedSidePanel)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.expandFocusedSidePanel
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.expandFocusedSidePanel]", path))
    return res


# check _jm_f_19_map_language (.gui.language)
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.language
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_8
    if not res:
        rep is None or rep.append(("value not in enum [.gui.language.'|']", path))
    return res


# check _jm_f_19_map_mainPanelSplitMode (.gui.mainPanelSplitMode)
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.mainPanelSplitMode
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_9
    if not res:
        rep is None or rep.append(("value not in enum [.gui.mainPanelSplitMode.'|']", path))
    return res

# check _jm_f_19_map_mouseEvents (.gui.mouseEvents)
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.mouseEvents
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.mouseEvents]", path))
    return res


# check _jm_f_19_map_nerdFontsVersion (.gui.nerdFontsVersion)
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.nerdFontsVersion
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_10
    if not res:
        rep is None or rep.append(("value not in enum [.gui.nerdFontsVersion.'|']", path))
    if not res:
        res = isinstance(val, str)
        if not res:
            rep is None or rep.append(("unexpected type [.gui.nerdFontsVersion.'|']", path))
        if res:
            # .gui.nerdFontsVersion.'|'.0
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [.gui.nerdFontsVersion.'|'.0]", path))
                rep is None or rep.append(("no model matched [.gui.nerdFontsVersion.'|']", path))
    return res

# check _jm_f_19_map_scrollHeight (.gui.scrollHeight)
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.scrollHeight
    res: bool = isinstance(val, int) and not isinstance(val, bool) and val >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.gui.scrollHeight]", path))
    return res

# check _jm_f_19_map_scrollPastBottom (.gui.scrollPastBottom)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.scrollPastBottom
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.scrollPastBottom]", path))
    return res

# check _jm_f_19_map_shortTimeFormat (.gui.shortTimeFormat)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.shortTimeFormat
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.gui.shortTimeFormat]", path))
    return res

# check _jm_f_19_map_showBottomLine (.gui.showBottomLine)
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.showBottomLine
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.showBottomLine]", path))
    return res

# check _jm_f_19_map_showBranchCommitHash (.gui.showBranchCommitHash)
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.showBranchCommitHash
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.showBranchCommitHash]", path))
    return res

# check _jm_f_19_map_showCommandLog (.gui.showCommandLog)
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.showCommandLog
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.showCommandLog]", path))
    return res

# check _jm_f_19_map_showFileTree (.gui.showFileTree)
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.showFileTree
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.showFileTree]", path))
    return res

# check _jm_f_19_map_showListFooter (.gui.showListFooter)
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.showListFooter
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.showListFooter]", path))
    return res

# check _jm_f_19_map_showRandomTip (.gui.showRandomTip)
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.showRandomTip
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.showRandomTip]", path))
    return res

# check _jm_f_19_map_sidePanelWidth (.gui.sidePanelWidth)
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.sidePanelWidth
    # .gui.sidePanelWidth.'@'
    res: bool = isinstance(val, float) and val >= 0.0
    if not res:
        rep is None or rep.append(("not a 0.0 strict float [.gui.sidePanelWidth.'@']", path))
    if res:
        fval_0: float = val
        res = fval_0 <= 1.0
        if not res:
            rep is None or rep.append(("constraints failed [.gui.sidePanelWidth]", path))
    return res

# check _jm_f_19_map_skipDiscardChangeWarning (.gui.skipDiscardChangeWarning)
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.skipDiscardChangeWarning
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.skipDiscardChangeWarning]", path))
    return res

# check _jm_f_19_map_skipRewordInEditorWarning (.gui.skipRewordInEditorWarning)
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.skipRewordInEditorWarning
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.skipRewordInEditorWarning]", path))
    return res

# check _jm_f_19_map_skipStashWarning (.gui.skipStashWarning)
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.skipStashWarning
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.skipStashWarning]", path))
    return res


# check _jm_f_19_map_splitDiff (.gui.splitDiff)
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.splitDiff
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_11
    if not res:
        rep is None or rep.append(("value not in enum [.gui.splitDiff.'|']", path))
    return res

# check _jm_f_19_map_theme (.gui.theme)
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.theme
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.gui.theme]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        if prop == "activeBorderColor":
            # handle may activeBorderColor property
            # .gui.theme.activeBorderColor
            res = json_model_3(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $colorArray [.gui.theme.activeBorderColor]", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.gui.theme.activeBorderColor]", lpath_17 if path is not None else None))
                return False
        elif prop == "inactiveBorderColor":
            # handle may inactiveBorderColor property
            # .gui.theme.inactiveBorderColor
            res = json_model_3(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $colorArray [.gui.theme.inactiveBorderColor]", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.gui.theme.inactiveBorderColor]", lpath_17 if path is not None else None))
                return False
        elif prop == "searchingActiveBorderColor":
            # handle may searchingActiveBorderColor property
            # .gui.theme.searchingActiveBorderColor
            res = json_model_3(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $colorArray [.gui.theme.searchingActiveBorderColor]", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.gui.theme.searchingActiveBorderColor]", lpath_17 if path is not None else None))
                return False
        elif prop == "optionsTextColor":
            # handle may optionsTextColor property
            # .gui.theme.optionsTextColor
            res = json_model_3(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $colorArray [.gui.theme.optionsTextColor]", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.gui.theme.optionsTextColor]", lpath_17 if path is not None else None))
                return False
        elif prop == "selectedLineBgColor":
            # handle may selectedLineBgColor property
            # .gui.theme.selectedLineBgColor
            res = json_model_3(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $colorArray [.gui.theme.selectedLineBgColor]", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.gui.theme.selectedLineBgColor]", lpath_17 if path is not None else None))
                return False
        elif prop == "selectedRangeBgColor":
            # handle may selectedRangeBgColor property
            # .gui.theme.selectedRangeBgColor
            res = json_model_3(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $colorArray [.gui.theme.selectedRangeBgColor]", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.gui.theme.selectedRangeBgColor]", lpath_17 if path is not None else None))
                return False
        elif prop == "cherryPickedCommitBgColor":
            # handle may cherryPickedCommitBgColor property
            # .gui.theme.cherryPickedCommitBgColor
            res = json_model_3(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $colorArray [.gui.theme.cherryPickedCommitBgColor]", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.gui.theme.cherryPickedCommitBgColor]", lpath_17 if path is not None else None))
                return False
        elif prop == "cherryPickedCommitFgColor":
            # handle may cherryPickedCommitFgColor property
            # .gui.theme.cherryPickedCommitFgColor
            res = json_model_3(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $colorArray [.gui.theme.cherryPickedCommitFgColor]", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.gui.theme.cherryPickedCommitFgColor]", lpath_17 if path is not None else None))
                return False
        elif prop == "unstagedChangesColor":
            # handle may unstagedChangesColor property
            # .gui.theme.unstagedChangesColor
            res = json_model_3(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $colorArray [.gui.theme.unstagedChangesColor]", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.gui.theme.unstagedChangesColor]", lpath_17 if path is not None else None))
                return False
        elif prop == "defaultFgColor":
            # handle may defaultFgColor property
            # .gui.theme.defaultFgColor
            res = json_model_3(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $colorArray [.gui.theme.defaultFgColor]", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.gui.theme.defaultFgColor]", lpath_17 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.gui.theme]", lpath_17 if path is not None else None))
            return False
    return True

# check _jm_f_19_map_timeFormat (.gui.timeFormat)
def _jm_f_46(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.timeFormat
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.gui.timeFormat]", path))
    return res


# check _jm_f_19_map_windowSize (.gui.windowSize)
def _jm_f_47(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui.windowSize
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_12
    if not res:
        rep is None or rep.append(("value not in enum [.gui.windowSize.'|']", path))
    return res


# check json_model_1_map_gui (.gui)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    # .gui
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.gui]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_f_19_map.get(prop):
            # handle 28 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_13 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.gui]", lpath_13 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.gui]", lpath_13 if path is not None else None))
            return False
    return True

# check _jm_obj_10_map_jumpToBlock (.keybinding.universal.jumpToBlock)
def _jm_f_49(val: Jsonable, path: Path, rep: Report) -> bool:
    # .keybinding.universal.jumpToBlock
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.keybinding.universal.jumpToBlock]", path))
    return res

# check _jm_obj_10_map_optionMenu (.keybinding.universal.optionMenu)
def _jm_f_50(val: Jsonable, path: Path, rep: Report) -> bool:
    # .keybinding.universal.optionMenu
    res: bool = val is None
    if not res:
        rep is None or rep.append(("not null [.keybinding.universal.optionMenu]", path))
    return res


# object .keybinding.universal
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.universal]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_10_map.get(prop):
            # handle 59 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_19 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.keybinding.universal]", lpath_19 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.universal]", lpath_19 if path is not None else None))
            return False
    return True

# object .keybinding.status
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.status]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if prop == "checkForUpdate":
            # handle may checkForUpdate property
            # .keybinding.status.checkForUpdate
            res = json_model_4(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.status.checkForUpdate]", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.status.checkForUpdate]", lpath_20 if path is not None else None))
                return False
        elif prop == "recentRepos":
            # handle may recentRepos property
            # .keybinding.status.recentRepos
            res = json_model_4(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.status.recentRepos]", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.status.recentRepos]", lpath_20 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.status]", lpath_20 if path is not None else None))
            return False
    return True


# object .keybinding.files
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.files]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_12_map.get(prop):
            # handle 14 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_21 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.keybinding.files]", lpath_21 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.files]", lpath_21 if path is not None else None))
            return False
    return True


# object .keybinding.branches
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.branches]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_13_map.get(prop):
            # handle 13 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_22 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.keybinding.branches]", lpath_22 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.branches]", lpath_22 if path is not None else None))
            return False
    return True


# object .keybinding.commits
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.commits]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_14_map.get(prop):
            # handle 21 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_23 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.keybinding.commits]", lpath_23 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.commits]", lpath_23 if path is not None else None))
            return False
    return True

# object .keybinding.stash
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.stash]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        if prop == "popStash":
            # handle may popStash property
            # .keybinding.stash.popStash
            res = json_model_4(pval, lpath_24 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.stash.popStash]", lpath_24 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.stash.popStash]", lpath_24 if path is not None else None))
                return False
        elif prop == "renameStash":
            # handle may renameStash property
            # .keybinding.stash.renameStash
            res = json_model_4(pval, lpath_24 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.stash.renameStash]", lpath_24 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.stash.renameStash]", lpath_24 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.stash]", lpath_24 if path is not None else None))
            return False
    return True

# object .keybinding.commitFiles
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.commitFiles]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        if prop == "checkoutCommitFile":
            # handle may checkoutCommitFile property
            # .keybinding.commitFiles.checkoutCommitFile
            res = json_model_4(pval, lpath_25 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.commitFiles.checkoutCommitFile]", lpath_25 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.commitFiles.checkoutCommitFile]", lpath_25 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.commitFiles]", lpath_25 if path is not None else None))
            return False
    return True

# object .keybinding.main
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.main]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        if prop == "toggleDragSelect":
            # handle may toggleDragSelect property
            # .keybinding.main.toggleDragSelect
            res = json_model_4(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.main.toggleDragSelect]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.main.toggleDragSelect]", lpath_26 if path is not None else None))
                return False
        elif prop == "toggleDragSelect-alt":
            # handle may toggleDragSelect-alt property
            # .keybinding.main.'toggleDragSelect-alt'
            res = json_model_4(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.main.'toggleDragSelect-alt']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.main.'toggleDragSelect-alt']", lpath_26 if path is not None else None))
                return False
        elif prop == "toggleSelectHunk":
            # handle may toggleSelectHunk property
            # .keybinding.main.toggleSelectHunk
            res = json_model_4(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.main.toggleSelectHunk]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.main.toggleSelectHunk]", lpath_26 if path is not None else None))
                return False
        elif prop == "pickBothHunks":
            # handle may pickBothHunks property
            # .keybinding.main.pickBothHunks
            res = json_model_4(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.main.pickBothHunks]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.main.pickBothHunks]", lpath_26 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.main]", lpath_26 if path is not None else None))
            return False
    return True

# object .keybinding.submodules
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.submodules]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        if prop == "init":
            # handle may init property
            # .keybinding.submodules.init
            res = json_model_4(pval, lpath_27 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.submodules.init]", lpath_27 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.submodules.init]", lpath_27 if path is not None else None))
                return False
        elif prop == "update":
            # handle may update property
            # .keybinding.submodules.update
            res = json_model_4(pval, lpath_27 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.submodules.update]", lpath_27 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.submodules.update]", lpath_27 if path is not None else None))
                return False
        elif prop == "bulkMenu":
            # handle may bulkMenu property
            # .keybinding.submodules.bulkMenu
            res = json_model_4(pval, lpath_27 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.submodules.bulkMenu]", lpath_27 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.submodules.bulkMenu]", lpath_27 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.submodules]", lpath_27 if path is not None else None))
            return False
    return True

# check json_model_1_map_keybinding (.keybinding)
def _jm_f_48(val: Jsonable, path: Path, rep: Report) -> bool:
    # .keybinding
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        if prop == "universal":
            # handle may universal property
            # .keybinding.universal
            res = _jm_obj_10(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.keybinding.universal]", lpath_18 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.universal]", lpath_18 if path is not None else None))
                return False
        elif prop == "status":
            # handle may status property
            # .keybinding.status
            res = _jm_obj_11(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.keybinding.status]", lpath_18 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.status]", lpath_18 if path is not None else None))
                return False
        elif prop == "files":
            # handle may files property
            # .keybinding.files
            res = _jm_obj_12(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.keybinding.files]", lpath_18 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.files]", lpath_18 if path is not None else None))
                return False
        elif prop == "branches":
            # handle may branches property
            # .keybinding.branches
            res = _jm_obj_13(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.keybinding.branches]", lpath_18 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.branches]", lpath_18 if path is not None else None))
                return False
        elif prop == "commits":
            # handle may commits property
            # .keybinding.commits
            res = _jm_obj_14(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.keybinding.commits]", lpath_18 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.commits]", lpath_18 if path is not None else None))
                return False
        elif prop == "stash":
            # handle may stash property
            # .keybinding.stash
            res = _jm_obj_15(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.keybinding.stash]", lpath_18 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.stash]", lpath_18 if path is not None else None))
                return False
        elif prop == "commitFiles":
            # handle may commitFiles property
            # .keybinding.commitFiles
            res = _jm_obj_16(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.keybinding.commitFiles]", lpath_18 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.commitFiles]", lpath_18 if path is not None else None))
                return False
        elif prop == "main":
            # handle may main property
            # .keybinding.main
            res = _jm_obj_17(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.keybinding.main]", lpath_18 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.main]", lpath_18 if path is not None else None))
                return False
        elif prop == "submodules":
            # handle may submodules property
            # .keybinding.submodules
            res = _jm_obj_18(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.keybinding.submodules]", lpath_18 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.keybinding.submodules]", lpath_18 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding]", lpath_18 if path is not None else None))
            return False
    return True


# check json_model_1_map_notARepository (.notARepository)
def _jm_f_51(val: Jsonable, path: Path, rep: Report) -> bool:
    # .notARepository
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_13
    if not res:
        rep is None or rep.append(("value not in enum [.notARepository.'|']", path))
    return res


# check json_model_1_map_os (.os)
def _jm_f_52(val: Jsonable, path: Path, rep: Report) -> bool:
    # .os
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.os]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        if prop == "copyToClipboardCmd":
            # handle may copyToClipboardCmd property
            # .os.copyToClipboardCmd
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.os.copyToClipboardCmd]", lpath_28 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.os.copyToClipboardCmd]", lpath_28 if path is not None else None))
                return False
        elif prop == "editPreset":
            # handle may editPreset property
            # .os.editPreset
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_14
            if not res:
                rep is None or rep.append(("value not in enum [.os.editPreset.'|']", lpath_28 if path is not None else None))
            if not res:
                res = isinstance(pval, str)
                if not res:
                    rep is None or rep.append(("unexpected type [.os.editPreset.'|']", lpath_28 if path is not None else None))
                if res:
                    # .os.editPreset.'|'.0
                    res = True
                    if res:
                        rep is None or rep.clear()
                    else:
                        rep is None or rep.append(("unexpected string [.os.editPreset.'|'.0]", lpath_28 if path is not None else None))
                        rep is None or rep.append(("no model matched [.os.editPreset.'|']", lpath_28 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.os.editPreset]", lpath_28 if path is not None else None))
                return False
        elif prop == "edit":
            # handle may edit property
            # .os.edit
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.os.edit]", lpath_28 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.os.edit]", lpath_28 if path is not None else None))
                return False
        elif prop == "editAtLine":
            # handle may editAtLine property
            # .os.editAtLine
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.os.editAtLine]", lpath_28 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.os.editAtLine]", lpath_28 if path is not None else None))
                return False
        elif prop == "editAtLineAndWait":
            # handle may editAtLineAndWait property
            # .os.editAtLineAndWait
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.os.editAtLineAndWait]", lpath_28 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.os.editAtLineAndWait]", lpath_28 if path is not None else None))
                return False
        elif prop == "open":
            # handle may open property
            # .os.open
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.os.open]", lpath_28 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.os.open]", lpath_28 if path is not None else None))
                return False
        elif prop == "openLink":
            # handle may openLink property
            # .os.openLink
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.os.openLink]", lpath_28 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.os.openLink]", lpath_28 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.os]", lpath_28 if path is not None else None))
            return False
    return True

# check json_model_1_map_promptToReturnFromSubprocess (.promptToReturnFromSubprocess)
def _jm_f_53(val: Jsonable, path: Path, rep: Report) -> bool:
    # .promptToReturnFromSubprocess
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.promptToReturnFromSubprocess]", path))
    return res

# check json_model_1_map_quitOnTopLevelReturn (.quitOnTopLevelReturn)
def _jm_f_54(val: Jsonable, path: Path, rep: Report) -> bool:
    # .quitOnTopLevelReturn
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.quitOnTopLevelReturn]", path))
    return res

# check json_model_1_map_refresher (.refresher)
def _jm_f_55(val: Jsonable, path: Path, rep: Report) -> bool:
    # .refresher
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.refresher]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        if prop == "refreshInterval":
            # handle may refreshInterval property
            # .refresher.refreshInterval
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.refresher.refreshInterval]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.refresher.refreshInterval]", lpath_29 if path is not None else None))
                return False
        elif prop == "fetchInterval":
            # handle may fetchInterval property
            # .refresher.fetchInterval
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.refresher.fetchInterval]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.refresher.fetchInterval]", lpath_29 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.refresher]", lpath_29 if path is not None else None))
            return False
    return True


# check json_model_1_map_services (.services)
def _jm_f_56(val: Jsonable, path: Path, rep: Report) -> bool:
    # .services
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.services]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .services.'/./'
            # "/^[^:]+:[^:]+$/"
            res = isinstance(pval, str) and _jm_re_2(pval, lpath_30 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^[^:]+:[^:]+$/ [.services.'/./']", lpath_30 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.services]", lpath_30 if path is not None else None))
            return False
    return True


# check json_model_1_map_update (.update)
def _jm_f_57(val: Jsonable, path: Path, rep: Report) -> bool:
    # .update
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.update]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        if prop == "method":
            # handle may method property
            # .update.method
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_15
            if not res:
                rep is None or rep.append(("value not in enum [.update.method.'|']", lpath_31 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.update.method]", lpath_31 if path is not None else None))
                return False
        elif prop == "days":
            # handle may days property
            # .update.days
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.update.days]", lpath_31 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.update.days]", lpath_31 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.update]", lpath_31 if path is not None else None))
            return False
    return True


# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # JSON Model for Lazy Git
    # .
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if pfun := json_model_1_map.get(prop):
            # handle 13 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_4 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.]", lpath_4 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.]", lpath_4 if path is not None else None))
            return False
    return True


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'black', 'blue', 'bold', 'cyan', 'default', 'green', 'magenta', 'red', 'reverse', 'strikethrough', 'underline', 'white', 'yellow'}
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile("^#[0-9a-fA-F]{6}$")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global _jm_cst_1
        _jm_cst_1 = {'confirm', 'input', 'menu', 'menuFromCommand'}
        global _jm_cst_2
        _jm_cst_2 = {'authors', 'branches', 'files', 'refs', 'remoteBranches', 'remotes', 'tags'}
        global _jm_map_0
        _jm_map_0 = {
            "input": _jm_obj_0,
            "confirm": _jm_obj_3,
            "menu": _jm_obj_4,
            "menuFromCommand": _jm_obj_6,
        }
        global _jm_cst_3
        _jm_cst_3 = {'commitFiles', 'commits', 'files', 'global', 'localBranches', 'reflogCommits', 'remoteBranches', 'remotes', 'stash', 'status', 'subCommits', 'tags', 'worktrees'}
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = re.compile(".")
        _jm_re_1 = lambda s, p, r: _jm_re_1_reco.search(s) is not None
        global _jm_cst_4
        _jm_cst_4 = {'author-date-order', 'date-order', 'default', 'topo-order'}
        global _jm_cst_5
        _jm_cst_5 = {'always', 'never', 'when-maximised'}
        global _jm_cst_6
        _jm_cst_6 = {'always', 'never'}
        global _jm_f_3_map
        _jm_f_3_map = {
            "allBranchesLogCmd": _jm_f_4,
            "autoFetch": _jm_f_5,
            "autoRefresh": _jm_f_6,
            "branchLogCmd": _jm_f_7,
            "commit": _jm_f_8,
            "commitPrefixes": _jm_f_9,
            "diffContextSize": _jm_f_10,
            "disableForcePushing": _jm_f_11,
            "fetchAll": _jm_f_12,
            "log": _jm_f_13,
            "mainBranches": json_model_9,
            "merging": _jm_f_14,
            "overrideGpg": _jm_f_15,
            "paging": _jm_f_16,
            "parseEmoji": _jm_f_17,
            "skipHookPrefix": _jm_f_18,
        }
        global _jm_cst_7
        _jm_cst_7 = {'double', 'hidden', 'rounded', 'single'}
        global _jm_cst_8
        _jm_cst_8 = {'auto', 'en', 'ja', 'ko', 'nl', 'pl', 'ru', 'zh-CN', 'zh-TW'}
        global _jm_cst_9
        _jm_cst_9 = {'flexible', 'horizontal', 'vertical'}
        global _jm_cst_10
        _jm_cst_10 = {'2', '3'}
        global _jm_cst_11
        _jm_cst_11 = {'always', 'auto'}
        global _jm_cst_12
        _jm_cst_12 = {'full', 'half', 'normal'}
        global _jm_f_19_map
        _jm_f_19_map = {
            "animateExplosion": _jm_f_20,
            "authorColors": _jm_f_21,
            "border": _jm_f_22,
            "branchColors": _jm_f_23,
            "commandLogSize": _jm_f_24,
            "commitLength": _jm_f_25,
            "expandFocusedSidePanel": _jm_f_26,
            "language": _jm_f_27,
            "mainPanelSplitMode": _jm_f_28,
            "mouseEvents": _jm_f_29,
            "nerdFontsVersion": _jm_f_30,
            "scrollHeight": _jm_f_31,
            "scrollPastBottom": _jm_f_32,
            "shortTimeFormat": _jm_f_33,
            "showBottomLine": _jm_f_34,
            "showBranchCommitHash": _jm_f_35,
            "showCommandLog": _jm_f_36,
            "showFileTree": _jm_f_37,
            "showListFooter": _jm_f_38,
            "showRandomTip": _jm_f_39,
            "sidePanelWidth": _jm_f_40,
            "skipDiscardChangeWarning": _jm_f_41,
            "skipRewordInEditorWarning": _jm_f_42,
            "skipStashWarning": _jm_f_43,
            "splitDiff": _jm_f_44,
            "theme": _jm_f_45,
            "timeFormat": _jm_f_46,
            "windowSize": _jm_f_47,
        }
        global _jm_obj_10_map
        _jm_obj_10_map = {
            "confirm": json_model_4,
            "copyToClipboard": json_model_4,
            "createPatchOptionsMenu": json_model_4,
            "createRebaseOptionsMenu": json_model_4,
            "decreaseContextInDiffView": json_model_4,
            "diffingMenu": json_model_4,
            "diffingMenu-alt": json_model_4,
            "edit": json_model_4,
            "executeCustomCommand": json_model_4,
            "extrasMenu": json_model_4,
            "filteringMenu": json_model_4,
            "goInto": json_model_4,
            "gotoBottom": json_model_4,
            "gotoTop": json_model_4,
            "increaseContextInDiffView": json_model_4,
            "jumpToBlock": _jm_f_49,
            "new": json_model_4,
            "nextBlock": json_model_4,
            "nextBlock-alt": json_model_4,
            "nextItem": json_model_4,
            "nextItem-alt": json_model_4,
            "nextMatch": json_model_4,
            "nextPage": json_model_4,
            "nextScreenMode": json_model_4,
            "nextTab": json_model_4,
            "openFile": json_model_4,
            "openRecentRepos": json_model_4,
            "optionMenu": _jm_f_50,
            "optionMenu-alt1": json_model_4,
            "prevBlock": json_model_4,
            "prevBlock-alt": json_model_4,
            "prevItem": json_model_4,
            "prevItem-alt": json_model_4,
            "prevMatch": json_model_4,
            "prevPage": json_model_4,
            "prevScreenMode": json_model_4,
            "prevTab": json_model_4,
            "pullFiles": json_model_4,
            "pushFiles": json_model_4,
            "quit": json_model_4,
            "quit-alt1": json_model_4,
            "quitWithoutChangingDirectory": json_model_4,
            "redo": json_model_4,
            "refresh": json_model_4,
            "remove": json_model_4,
            "return": json_model_4,
            "scrollDownMain": json_model_4,
            "scrollDownMain-alt1": json_model_4,
            "scrollDownMain-alt2": json_model_4,
            "scrollLeft": json_model_4,
            "scrollRight": json_model_4,
            "scrollUpMain": json_model_4,
            "scrollUpMain-alt1": json_model_4,
            "scrollUpMain-alt2": json_model_4,
            "select": json_model_4,
            "submitEditorText": json_model_4,
            "togglePanel": json_model_4,
            "toggleWhitespaceInDiffView": json_model_4,
            "undo": json_model_4,
        }
        global _jm_obj_12_map
        _jm_obj_12_map = {
            "amendLastCommit": json_model_4,
            "commitChanges": json_model_4,
            "commitChangesWithEditor": json_model_4,
            "commitChangesWithoutHook": json_model_4,
            "fetch": json_model_4,
            "ignoreFile": json_model_4,
            "openMergeTool": json_model_4,
            "openStatusFilter": json_model_4,
            "refreshFiles": json_model_4,
            "stashAllChanges": json_model_4,
            "toggleStagedAll": json_model_4,
            "toggleTreeView": json_model_4,
            "viewResetOptions": json_model_4,
            "viewStashOptions": json_model_4,
        }
        global _jm_obj_13_map
        _jm_obj_13_map = {
            "checkoutBranchByName": json_model_4,
            "createPullRequest": json_model_4,
            "createTag": json_model_4,
            "fastForward": json_model_4,
            "fetchRemote": json_model_4,
            "forceCheckoutBranch": json_model_4,
            "mergeIntoCurrentBranch": json_model_4,
            "pushTag": json_model_4,
            "rebaseBranch": json_model_4,
            "renameBranch": json_model_4,
            "setUpstream": json_model_4,
            "viewGitFlowOptions": json_model_4,
            "viewPullRequestOptions": json_model_4,
        }
        global _jm_obj_14_map
        _jm_obj_14_map = {
            "amendToCommit": json_model_4,
            "checkoutCommit": json_model_4,
            "cherryPickCopy": json_model_4,
            "cherryPickCopyRange": json_model_4,
            "copyCommitMessageToClipboard": json_model_4,
            "createFixupCommit": json_model_4,
            "markCommitAsFixup": json_model_4,
            "moveDownCommit": json_model_4,
            "moveUpCommit": json_model_4,
            "openLogMenu": json_model_4,
            "pasteCommits": json_model_4,
            "pickCommit": json_model_4,
            "renameCommit": json_model_4,
            "renameCommitWithEditor": json_model_4,
            "resetCherryPick": json_model_4,
            "revertCommit": json_model_4,
            "squashAboveCommits": json_model_4,
            "squashDown": json_model_4,
            "tagCommit": json_model_4,
            "viewBisectOptions": json_model_4,
            "viewResetOptions": json_model_4,
        }
        global _jm_cst_13
        _jm_cst_13 = {'create', 'prompt', 'quit', 'skip'}
        global _jm_cst_14
        _jm_cst_14 = {'bbedit', 'emacs', 'helix', 'kakoune', 'nano', 'nvim', 'sublime', 'vim', 'vscode', 'xcode'}
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = re.compile("^[^:]+:[^:]+$")
        _jm_re_2 = lambda s, p, r: _jm_re_2_reco.search(s) is not None
        global _jm_cst_15
        _jm_cst_15 = {'background', 'never', 'prompt'}
        global json_model_1_map
        json_model_1_map = {
            "confirmOnQuit": _jm_f_0,
            "customCommands": _jm_f_1,
            "disableStartupPopups": _jm_f_2,
            "git": _jm_f_3,
            "gui": _jm_f_19,
            "keybinding": _jm_f_48,
            "notARepository": _jm_f_51,
            "os": _jm_f_52,
            "promptToReturnFromSubprocess": _jm_f_53,
            "quitOnTopLevelReturn": _jm_f_54,
            "refresher": _jm_f_55,
            "services": _jm_f_56,
            "update": _jm_f_57,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "color": json_model_2,
            "colorArray": json_model_3,
            "keybinding": json_model_4,
            "custom-commands-prompts-type-property": json_model_5,
            "custom-commands-prompts-title-property": json_model_6,
            "custom-commands-prompts-key-property": json_model_7,
            "neString": json_model_8,
            "stringArray": json_model_9,
            "Prompts": json_model_10,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = None
        _jm_re_1 = None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = None
        _jm_re_2 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
