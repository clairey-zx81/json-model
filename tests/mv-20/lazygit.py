#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0b0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0b0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
_jm_re_0_reco: object
_jm_re_0: RegexFun
_jm_cst_1: set[str]
_jm_cst_2: set[str]
_jm_map_0: dict[str, str]
_jm_cst_3: set[str]
_jm_obj_8_map: PropMap
_jm_re_1_reco: object
_jm_re_1: RegexFun
_jm_cst_4: set[str]
_jm_cst_5: set[str]
_jm_cst_6: set[str]
_jm_obj_10_map: PropMap
_jm_cst_7: set[str]
_jm_cst_8: set[str]
_jm_cst_9: set[str]
_jm_cst_10: set[str]
_jm_cst_11: set[str]
_jm_obj_21_map: PropMap
_jm_cst_12: set[str]
_jm_obj_17_map: PropMap
_jm_obj_23_map: PropMap
_jm_obj_25_map: PropMap
_jm_obj_26_map: PropMap
_jm_obj_31_map: PropMap
_jm_obj_22_map: PropMap
_jm_cst_13: set[str]
_jm_cst_14: set[str]
_jm_obj_32_map: PropMap
_jm_re_2_reco: object
_jm_re_2: RegexFun
_jm_cst_15: set[str]
_jm_obj_7_map: PropMap
check_model_map: PropMap

# check $color (.'$color')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$color'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$color'.'|']", path))
    if not res:
        res = isinstance(val, str)
        if not res:
            rep is None or rep.append(("unexpected type [.'$color'.'|']", path))
        if res:
            # .'$color'.'|'.0
            # "/^#[0-9a-fA-F]{6}$/"
            res = _jm_re_0(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected /^#[0-9a-fA-F]{6}$/ [.'$color'.'|'.0]", path))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$color'.'|']", path))
    return res

# check $colorArray (.'$colorArray')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$colorArray'
    # .'$colorArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$colorArray'.'@'.0
            res = json_model_2(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $color [.'$colorArray'.'@'.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$colorArray'.'@']", path))
    if res:
        ival_0: int = len(val)
        res = is_unique_array(val, path, rep) and ival_0 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$colorArray']", path))
    return res

# check $keybinding (.'$keybinding')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$keybinding'
    # .'$keybinding'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$keybinding'.'|'.0]", path))
    if not res:
        # .'$keybinding'.'|'.1
        res = isinstance(val, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$keybinding'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$keybinding'.'|']", path))
    return res


# check $custom-commands-prompts-type-property (.'$custom-commands-prompts-type-property')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$custom-commands-prompts-type-property'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_1
    if not res:
        rep is None or rep.append(("value not in enum [.'$custom-commands-prompts-type-property'.'|']", path))
    return res

# check $custom-commands-prompts-title-property (.'$custom-commands-prompts-title-property')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$custom-commands-prompts-title-property'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$custom-commands-prompts-title-property']", path))
    return res

# check $custom-commands-prompts-key-property (.'$custom-commands-prompts-key-property')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$custom-commands-prompts-key-property'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$custom-commands-prompts-key-property']", path))
    return res

# check $neString (.'$neString')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$neString'
    # .'$neString'.'@'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$neString'.'@']", path))
    if res:
        ival_1: int = len(val)
        res = ival_1 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$neString']", path))
    return res

# check $stringArray (.'$stringArray')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$stringArray'
    # .'$stringArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$stringArray'.'@'.0
            res = json_model_8(arr_1_item, arr_1_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $neString [.'$stringArray'.'@'.0]", arr_1_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$stringArray'.'@']", path))
    if res:
        res = is_unique_array(val, path, rep)
        if not res:
            rep is None or rep.append(("constraints failed [.'$stringArray']", path))
    return res

# object .'$Prompts'.'|'.0.suggestions.'|'.1
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.0.suggestions.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "command":
            # handle must command property
            must_count += 1
            # .'$Prompts'.'|'.0.suggestions.'|'.1.command
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.0.suggestions.'|'.1.command]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.0.suggestions.'|'.1.command]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Prompts'.'|'.0.suggestions.'|'.1]", lpath_1 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not ("command" in val):
                rep is None or rep.append(("missing mandatory prop <command> [.'$Prompts'.'|'.0.suggestions.'|'.1]", path))
        return False
    return True


# object .'$Prompts'.'|'.0.suggestions.'|'.0
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.0.suggestions.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "preset":
            # handle must preset property
            must_count += 1
            # .'$Prompts'.'|'.0.suggestions.'|'.0.preset
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_2
            if not res:
                rep is None or rep.append(("value not in enum [.'$Prompts'.'|'.0.suggestions.'|'.0.preset.'|']", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.0.suggestions.'|'.0.preset]", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Prompts'.'|'.0.suggestions.'|'.0]", lpath_2 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "preset" in val:
                rep is None or rep.append(("missing mandatory prop <preset> [.'$Prompts'.'|'.0.suggestions.'|'.0]", path))
        return False
    return True

# object .'$Prompts'.'|'.0
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Prompts'.'|'.0.type
            res = isinstance(pval, str) and pval == "input"
            if not res:
                rep is None or rep.append(("unexpected input [.'$Prompts'.'|'.0.type]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.0.type]", lpath_0 if path is not None else None))
                return False
        elif prop == "title":
            # handle must title property
            must_count += 1
            # .'$Prompts'.'|'.0.title
            res = json_model_6(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-title-property [.'$Prompts'.'|'.0.title]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.0.title]", lpath_0 if path is not None else None))
                return False
        elif prop == "key":
            # handle must key property
            must_count += 1
            # .'$Prompts'.'|'.0.key
            res = json_model_7(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-key-property [.'$Prompts'.'|'.0.key]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.0.key]", lpath_0 if path is not None else None))
                return False
        elif prop == "initialValue":
            # handle may initialValue property
            # .'$Prompts'.'|'.0.initialValue
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.0.initialValue]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.0.initialValue]", lpath_0 if path is not None else None))
                return False
        elif prop == "suggestions":
            # handle may suggestions property
            # .'$Prompts'.'|'.0.suggestions
            res = isinstance(pval, dict)
            if not res:
                rep is None or rep.append(("unexpected type [.'$Prompts'.'|'.0.suggestions.'|']", lpath_0 if path is not None else None))
            if res:
                # .'$Prompts'.'|'.0.suggestions.'|'.0
                res = _jm_obj_2(pval, lpath_0 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Prompts'.'|'.0.suggestions.'|'.0]", lpath_0 if path is not None else None))
                if not res:
                    # .'$Prompts'.'|'.0.suggestions.'|'.1
                    res = _jm_obj_1(pval, lpath_0 if path is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Prompts'.'|'.0.suggestions.'|'.1]", lpath_0 if path is not None else None))
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("no model matched [.'$Prompts'.'|'.0.suggestions.'|']", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.0.suggestions]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Prompts'.'|'.0]", lpath_0 if path is not None else None))
            return False
    if must_count != 3:
        if rep is not None:
            if not "key" in val:
                rep is None or rep.append(("missing mandatory prop <key> [.'$Prompts'.'|'.0]", path))
            if not "title" in val:
                rep is None or rep.append(("missing mandatory prop <title> [.'$Prompts'.'|'.0]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Prompts'.'|'.0]", path))
        return False
    return True

# object .'$Prompts'.'|'.1
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Prompts'.'|'.1.type
            res = isinstance(pval, str) and pval == "confirm"
            if not res:
                rep is None or rep.append(("unexpected confirm [.'$Prompts'.'|'.1.type]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.1.type]", lpath_3 if path is not None else None))
                return False
        elif prop == "title":
            # handle must title property
            must_count += 1
            # .'$Prompts'.'|'.1.title
            res = json_model_6(pval, lpath_3 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-title-property [.'$Prompts'.'|'.1.title]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.1.title]", lpath_3 if path is not None else None))
                return False
        elif prop == "key":
            # handle must key property
            must_count += 1
            # .'$Prompts'.'|'.1.key
            res = json_model_7(pval, lpath_3 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-key-property [.'$Prompts'.'|'.1.key]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.1.key]", lpath_3 if path is not None else None))
                return False
        elif prop == "body":
            # handle may body property
            # .'$Prompts'.'|'.1.body
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.1.body]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.1.body]", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Prompts'.'|'.1]", lpath_3 if path is not None else None))
            return False
    if must_count != 3:
        if rep is not None:
            if not "key" in val:
                rep is None or rep.append(("missing mandatory prop <key> [.'$Prompts'.'|'.1]", path))
            if not "title" in val:
                rep is None or rep.append(("missing mandatory prop <title> [.'$Prompts'.'|'.1]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Prompts'.'|'.1]", path))
        return False
    return True

# object .'$Prompts'.'|'.2.options.'@'.0
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.2.options.'@'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "value":
            # handle must value property
            must_count += 1
            # .'$Prompts'.'|'.2.options.'@'.0.value
            res = json_model_8(pval, lpath_5 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $neString [.'$Prompts'.'|'.2.options.'@'.0.value]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.2.options.'@'.0.value]", lpath_5 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Prompts'.'|'.2.options.'@'.0.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.2.options.'@'.0.description]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.2.options.'@'.0.description]", lpath_5 if path is not None else None))
                return False
        elif prop == "name":
            # handle may name property
            # .'$Prompts'.'|'.2.options.'@'.0.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.2.options.'@'.0.name]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.2.options.'@'.0.name]", lpath_5 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Prompts'.'|'.2.options.'@'.0]", lpath_5 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "value" in val:
                rep is None or rep.append(("missing mandatory prop <value> [.'$Prompts'.'|'.2.options.'@'.0]", path))
        return False
    return True

# object .'$Prompts'.'|'.2
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Prompts'.'|'.2.type
            res = isinstance(pval, str) and pval == "menu"
            if not res:
                rep is None or rep.append(("unexpected menu [.'$Prompts'.'|'.2.type]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.2.type]", lpath_4 if path is not None else None))
                return False
        elif prop == "title":
            # handle must title property
            must_count += 1
            # .'$Prompts'.'|'.2.title
            res = json_model_6(pval, lpath_4 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-title-property [.'$Prompts'.'|'.2.title]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.2.title]", lpath_4 if path is not None else None))
                return False
        elif prop == "key":
            # handle must key property
            must_count += 1
            # .'$Prompts'.'|'.2.key
            res = json_model_7(pval, lpath_4 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-key-property [.'$Prompts'.'|'.2.key]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.2.key]", lpath_4 if path is not None else None))
                return False
        elif prop == "options":
            # handle must options property
            must_count += 1
            # .'$Prompts'.'|'.2.options
            # .'$Prompts'.'|'.2.options.'@'
            res = isinstance(pval, list)
            if res:
                for arr_2_idx, arr_2_item in enumerate(pval):
                    arr_2_lpath: Path = ((lpath_4 if path is not None else None) + [ arr_2_idx ]) if (lpath_4 if path is not None else None) is not None else None
                    # .'$Prompts'.'|'.2.options.'@'.0
                    res = _jm_obj_5(arr_2_item, arr_2_lpath if (lpath_4 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Prompts'.'|'.2.options.'@'.0]", arr_2_lpath if (lpath_4 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Prompts'.'|'.2.options.'@']", lpath_4 if path is not None else None))
            if res:
                res = is_unique_array(pval, lpath_4 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("constraints failed [.'$Prompts'.'|'.2.options]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.2.options]", lpath_4 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Prompts'.'|'.2]", lpath_4 if path is not None else None))
            return False
    if must_count != 4:
        if rep is not None:
            if not "key" in val:
                rep is None or rep.append(("missing mandatory prop <key> [.'$Prompts'.'|'.2]", path))
            if not "options" in val:
                rep is None or rep.append(("missing mandatory prop <options> [.'$Prompts'.'|'.2]", path))
            if not "title" in val:
                rep is None or rep.append(("missing mandatory prop <title> [.'$Prompts'.'|'.2]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Prompts'.'|'.2]", path))
        return False
    return True

# object .'$Prompts'.'|'.3
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prompts'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Prompts'.'|'.3.type
            res = isinstance(pval, str) and pval == "menuFromCommand"
            if not res:
                rep is None or rep.append(("unexpected menuFromCommand [.'$Prompts'.'|'.3.type]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.3.type]", lpath_6 if path is not None else None))
                return False
        elif prop == "title":
            # handle must title property
            must_count += 1
            # .'$Prompts'.'|'.3.title
            res = json_model_6(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-title-property [.'$Prompts'.'|'.3.title]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.3.title]", lpath_6 if path is not None else None))
                return False
        elif prop == "key":
            # handle must key property
            must_count += 1
            # .'$Prompts'.'|'.3.key
            res = json_model_7(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $custom-commands-prompts-key-property [.'$Prompts'.'|'.3.key]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.3.key]", lpath_6 if path is not None else None))
                return False
        elif prop == "command":
            # handle must command property
            must_count += 1
            # .'$Prompts'.'|'.3.command
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.3.command]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Prompts'.'|'.3.command]", lpath_6 if path is not None else None))
                return False
        elif prop == "filter":
            # handle may filter property
            # .'$Prompts'.'|'.3.filter
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.3.filter]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.3.filter]", lpath_6 if path is not None else None))
                return False
        elif prop == "valueFormat":
            # handle may valueFormat property
            # .'$Prompts'.'|'.3.valueFormat
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.3.valueFormat]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.3.valueFormat]", lpath_6 if path is not None else None))
                return False
        elif prop == "labelFormat":
            # handle may labelFormat property
            # .'$Prompts'.'|'.3.labelFormat
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Prompts'.'|'.3.labelFormat]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Prompts'.'|'.3.labelFormat]", lpath_6 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Prompts'.'|'.3]", lpath_6 if path is not None else None))
            return False
    if must_count != 4:
        if rep is not None:
            if not ("command" in val):
                rep is None or rep.append(("missing mandatory prop <command> [.'$Prompts'.'|'.3]", path))
            if not "key" in val:
                rep is None or rep.append(("missing mandatory prop <key> [.'$Prompts'.'|'.3]", path))
            if not "title" in val:
                rep is None or rep.append(("missing mandatory prop <title> [.'$Prompts'.'|'.3]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Prompts'.'|'.3]", path))
        return False
    return True


# check $Prompts (.'$Prompts')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Prompts'
    res = isinstance(val, dict)
    if res:
        tag_0: Jsonable = val.get("type", UNDEFINED)
        if tag_0 != UNDEFINED:
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <type> value not found [.'$Prompts'.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <type> is missing [.'$Prompts'.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'$Prompts'.'|']", path))
    return res

# check _jm_obj_7_map_confirmOnQuit (.confirmOnQuit)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .confirmOnQuit
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.confirmOnQuit]", path))
    return res


# object .customCommands.'@'.0.after
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.customCommands.'@'.0.after]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if prop == "checkForConflicts":
            # handle may checkForConflicts property
            # .customCommands.'@'.0.after.checkForConflicts
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.customCommands.'@'.0.after.checkForConflicts]", lpath_9 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.customCommands.'@'.0.after.checkForConflicts]", lpath_9 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.customCommands.'@'.0.after]", lpath_9 if path is not None else None))
            return False
    return True

# check _jm_obj_8_map_after (.customCommands.'@'.0.after)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .customCommands.'@'.0.after
    res = _jm_obj_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.customCommands.'@'.0.after]", path))
    return res

# check _jm_obj_8_map_description (.customCommands.'@'.0.description)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .customCommands.'@'.0.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.customCommands.'@'.0.description]", path))
    return res

# check _jm_obj_8_map_loadingText (.customCommands.'@'.0.loadingText)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .customCommands.'@'.0.loadingText
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.customCommands.'@'.0.loadingText]", path))
    return res

# check _jm_obj_8_map_prompts (.customCommands.'@'.0.prompts)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .customCommands.'@'.0.prompts
    res = isinstance(val, list)
    if res:
        for arr_4_idx, arr_4_item in enumerate(val):
            arr_4_lpath: Path = (path + [ arr_4_idx ]) if path is not None else None
            # .customCommands.'@'.0.prompts.0
            res = json_model_10(arr_4_item, arr_4_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Prompts [.customCommands.'@'.0.prompts.0]", arr_4_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.customCommands.'@'.0.prompts]", path))
    return res

# check _jm_obj_8_map_showOutput (.customCommands.'@'.0.showOutput)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .customCommands.'@'.0.showOutput
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.customCommands.'@'.0.showOutput]", path))
    return res

# check _jm_obj_8_map_stream (.customCommands.'@'.0.stream)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .customCommands.'@'.0.stream
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.customCommands.'@'.0.stream]", path))
    return res

# check _jm_obj_8_map_subprocess (.customCommands.'@'.0.subprocess)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .customCommands.'@'.0.subprocess
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.customCommands.'@'.0.subprocess]", path))
    return res


# object .customCommands.'@'.0
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.customCommands.'@'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if prop == "key":
            # handle must key property
            must_count += 1
            # .customCommands.'@'.0.key
            res = json_model_4(pval, lpath_8 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.customCommands.'@'.0.key]", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.customCommands.'@'.0.key]", lpath_8 if path is not None else None))
                return False
        elif prop == "command":
            # handle must command property
            must_count += 1
            # .customCommands.'@'.0.command
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.customCommands.'@'.0.command]", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.customCommands.'@'.0.command]", lpath_8 if path is not None else None))
                return False
        elif prop == "context":
            # handle must context property
            must_count += 1
            # .customCommands.'@'.0.context
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_3
            if not res:
                rep is None or rep.append(("value not in enum [.customCommands.'@'.0.context.'|']", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.customCommands.'@'.0.context]", lpath_8 if path is not None else None))
                return False
        elif pfun := _jm_obj_8_map.get(prop):
            # handle 7 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_8 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.customCommands.'@'.0]", lpath_8 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.customCommands.'@'.0]", lpath_8 if path is not None else None))
            return False
    if must_count != 3:
        if rep is not None:
            if not ("command" in val):
                rep is None or rep.append(("missing mandatory prop <command> [.customCommands.'@'.0]", path))
            if not "context" in val:
                rep is None or rep.append(("missing mandatory prop <context> [.customCommands.'@'.0]", path))
            if not "key" in val:
                rep is None or rep.append(("missing mandatory prop <key> [.customCommands.'@'.0]", path))
        return False
    return True

# check _jm_obj_7_map_customCommands (.customCommands)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .customCommands
    # .customCommands.'@'
    res = isinstance(val, list)
    if res:
        for arr_3_idx, arr_3_item in enumerate(val):
            arr_3_lpath: Path = (path + [ arr_3_idx ]) if path is not None else None
            # .customCommands.'@'.0
            res = _jm_obj_8(arr_3_item, arr_3_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.customCommands.'@'.0]", arr_3_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.customCommands.'@']", path))
    if res:
        res = is_unique_array(val, path, rep)
        if not res:
            rep is None or rep.append(("constraints failed [.customCommands]", path))
    return res

# check _jm_obj_7_map_disableStartupPopups (.disableStartupPopups)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .disableStartupPopups
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.disableStartupPopups]", path))
    return res

# check _jm_obj_10_map_allBranchesLogCmd (.git.allBranchesLogCmd)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.allBranchesLogCmd
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.git.allBranchesLogCmd]", path))
    return res

# check _jm_obj_10_map_autoFetch (.git.autoFetch)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.autoFetch
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.git.autoFetch]", path))
    return res

# check _jm_obj_10_map_autoRefresh (.git.autoRefresh)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.autoRefresh
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.git.autoRefresh]", path))
    return res

# check _jm_obj_10_map_branchLogCmd (.git.branchLogCmd)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.branchLogCmd
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.git.branchLogCmd]", path))
    return res

# object .git.commit
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git.commit]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        if prop == "signOff":
            # handle may signOff property
            # .git.commit.signOff
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.git.commit.signOff]", lpath_11 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.git.commit.signOff]", lpath_11 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.git.commit]", lpath_11 if path is not None else None))
            return False
    return True

# check _jm_obj_10_map_commit (.git.commit)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.commit
    res = _jm_obj_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.git.commit]", path))
    return res


# object .git.commitPrefixes.'/./'
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git.commitPrefixes.'/./']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        if prop == "pattern":
            # handle must pattern property
            must_count += 1
            # .git.commitPrefixes.'/./'.pattern
            res = json_model_8(pval, lpath_13 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $neString [.git.commitPrefixes.'/./'.pattern]", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.git.commitPrefixes.'/./'.pattern]", lpath_13 if path is not None else None))
                return False
        elif prop == "replace":
            # handle must replace property
            must_count += 1
            # .git.commitPrefixes.'/./'.replace
            res = json_model_8(pval, lpath_13 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $neString [.git.commitPrefixes.'/./'.replace]", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.git.commitPrefixes.'/./'.replace]", lpath_13 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.git.commitPrefixes.'/./']", lpath_13 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "pattern" in val:
                rep is None or rep.append(("missing mandatory prop <pattern> [.git.commitPrefixes.'/./']", path))
            if not "replace" in val:
                rep is None or rep.append(("missing mandatory prop <replace> [.git.commitPrefixes.'/./']", path))
        return False
    return True

# object .git.commitPrefixes
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git.commitPrefixes]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .git.commitPrefixes.'/./'
            res = _jm_obj_13(pval, lpath_12 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.git.commitPrefixes.'/./']", lpath_12 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.git.commitPrefixes]", lpath_12 if path is not None else None))
            return False
    return True

# check _jm_obj_10_map_commitPrefixes (.git.commitPrefixes)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.commitPrefixes
    res = _jm_obj_12(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.git.commitPrefixes]", path))
    return res

# check _jm_obj_10_map_diffContextSize (.git.diffContextSize)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.diffContextSize
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.git.diffContextSize]", path))
    return res

# check _jm_obj_10_map_disableForcePushing (.git.disableForcePushing)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.disableForcePushing
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.git.disableForcePushing]", path))
    return res

# check _jm_obj_10_map_fetchAll (.git.fetchAll)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.fetchAll
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.git.fetchAll]", path))
    return res



# object .git.log
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git.log]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        if prop == "order":
            # handle may order property
            # .git.log.order
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_4
            if not res:
                rep is None or rep.append(("value not in enum [.git.log.order.'|']", lpath_14 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.git.log.order]", lpath_14 if path is not None else None))
                return False
        elif prop == "showGraph":
            # handle may showGraph property
            # .git.log.showGraph
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_5
            if not res:
                rep is None or rep.append(("value not in enum [.git.log.showGraph.'|']", lpath_14 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.git.log.showGraph]", lpath_14 if path is not None else None))
                return False
        elif prop == "showWholeGraph":
            # handle may showWholeGraph property
            # .git.log.showWholeGraph
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.git.log.showWholeGraph]", lpath_14 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.git.log.showWholeGraph]", lpath_14 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.git.log]", lpath_14 if path is not None else None))
            return False
    return True

# check _jm_obj_10_map_log (.git.log)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.log
    res = _jm_obj_14(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.git.log]", path))
    return res

# check _jm_obj_10_map_mainBranches (.git.mainBranches)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.mainBranches
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $stringArray [.git.mainBranches]", path))
    return res

# object .git.merging
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git.merging]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        if prop == "manualCommit":
            # handle may manualCommit property
            # .git.merging.manualCommit
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.git.merging.manualCommit]", lpath_15 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.git.merging.manualCommit]", lpath_15 if path is not None else None))
                return False
        elif prop == "args":
            # handle may args property
            # .git.merging.args
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.git.merging.args]", lpath_15 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.git.merging.args]", lpath_15 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.git.merging]", lpath_15 if path is not None else None))
            return False
    return True

# check _jm_obj_10_map_merging (.git.merging)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.merging
    res = _jm_obj_15(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.git.merging]", path))
    return res

# check _jm_obj_10_map_overrideGpg (.git.overrideGpg)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.overrideGpg
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.git.overrideGpg]", path))
    return res


# object .git.paging
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git.paging]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        if prop == "colorArg":
            # handle may colorArg property
            # .git.paging.colorArg
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_6
            if not res:
                rep is None or rep.append(("value not in enum [.git.paging.colorArg.'|']", lpath_16 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.git.paging.colorArg]", lpath_16 if path is not None else None))
                return False
        elif prop == "useConfig":
            # handle may useConfig property
            # .git.paging.useConfig
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.git.paging.useConfig]", lpath_16 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.git.paging.useConfig]", lpath_16 if path is not None else None))
                return False
        elif prop == "pager":
            # handle may pager property
            # .git.paging.pager
            # .git.paging.pager.'@'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.git.paging.pager.'@']", lpath_16 if path is not None else None))
            if res:
                ival_2: int = len(pval)
                res = ival_2 >= 1
                if not res:
                    rep is None or rep.append(("constraints failed [.git.paging.pager]", lpath_16 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.git.paging.pager]", lpath_16 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.git.paging]", lpath_16 if path is not None else None))
            return False
    return True

# check _jm_obj_10_map_paging (.git.paging)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.paging
    res = _jm_obj_16(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.git.paging]", path))
    return res

# check _jm_obj_10_map_parseEmoji (.git.parseEmoji)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.parseEmoji
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.git.parseEmoji]", path))
    return res

# check _jm_obj_10_map_skipHookPrefix (.git.skipHookPrefix)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git.skipHookPrefix
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.git.skipHookPrefix]", path))
    return res


# object .git
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.git]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_10_map.get(prop):
            # handle 16 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_10 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.git]", lpath_10 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.git]", lpath_10 if path is not None else None))
            return False
    return True

# check _jm_obj_7_map_git (.git)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .git
    res = _jm_obj_10(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.git]", path))
    return res

# check _jm_obj_17_map_animateExplosion (.gui.animateExplosion)
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.animateExplosion
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.animateExplosion]", path))
    return res

# object .gui.authorColors
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.gui.authorColors]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .gui.authorColors.'/./'
            res = json_model_2(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $color [.gui.authorColors.'/./']", lpath_18 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.gui.authorColors]", lpath_18 if path is not None else None))
            return False
    return True

# check _jm_obj_17_map_authorColors (.gui.authorColors)
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.authorColors
    res = _jm_obj_18(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.gui.authorColors]", path))
    return res


# check _jm_obj_17_map_border (.gui.border)
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.border
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_7
    if not res:
        rep is None or rep.append(("value not in enum [.gui.border.'|']", path))
    return res

# object .gui.branchColors
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.gui.branchColors]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .gui.branchColors.'/./'
            res = json_model_2(pval, lpath_19 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $color [.gui.branchColors.'/./']", lpath_19 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.gui.branchColors]", lpath_19 if path is not None else None))
            return False
    return True

# check _jm_obj_17_map_branchColors (.gui.branchColors)
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.branchColors
    res = _jm_obj_19(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.gui.branchColors]", path))
    return res

# check _jm_obj_17_map_commandLogSize (.gui.commandLogSize)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.commandLogSize
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.gui.commandLogSize]", path))
    return res

# object .gui.commitLength
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.gui.commitLength]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if prop == "show":
            # handle may show property
            # .gui.commitLength.show
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.gui.commitLength.show]", lpath_20 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.gui.commitLength.show]", lpath_20 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.gui.commitLength]", lpath_20 if path is not None else None))
            return False
    return True

# check _jm_obj_17_map_commitLength (.gui.commitLength)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.commitLength
    res = _jm_obj_20(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.gui.commitLength]", path))
    return res

# check _jm_obj_17_map_expandFocusedSidePanel (.gui.expandFocusedSidePanel)
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.expandFocusedSidePanel
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.expandFocusedSidePanel]", path))
    return res


# check _jm_obj_17_map_language (.gui.language)
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.language
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_8
    if not res:
        rep is None or rep.append(("value not in enum [.gui.language.'|']", path))
    return res


# check _jm_obj_17_map_mainPanelSplitMode (.gui.mainPanelSplitMode)
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.mainPanelSplitMode
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_9
    if not res:
        rep is None or rep.append(("value not in enum [.gui.mainPanelSplitMode.'|']", path))
    return res

# check _jm_obj_17_map_mouseEvents (.gui.mouseEvents)
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.mouseEvents
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.mouseEvents]", path))
    return res


# check _jm_obj_17_map_nerdFontsVersion (.gui.nerdFontsVersion)
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.nerdFontsVersion
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_10
    if not res:
        rep is None or rep.append(("value not in enum [.gui.nerdFontsVersion.'|']", path))
    if not res:
        res = isinstance(val, str)
        if not res:
            rep is None or rep.append(("unexpected type [.gui.nerdFontsVersion.'|']", path))
        if res:
            # .gui.nerdFontsVersion.'|'.0
            res = True
            if not res:
                rep is None or rep.append(("unexpected string [.gui.nerdFontsVersion.'|'.0]", path))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.gui.nerdFontsVersion.'|']", path))
    return res

# check _jm_obj_17_map_scrollHeight (.gui.scrollHeight)
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.scrollHeight
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.gui.scrollHeight]", path))
    return res

# check _jm_obj_17_map_scrollPastBottom (.gui.scrollPastBottom)
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.scrollPastBottom
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.scrollPastBottom]", path))
    return res

# check _jm_obj_17_map_shortTimeFormat (.gui.shortTimeFormat)
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.shortTimeFormat
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.gui.shortTimeFormat]", path))
    return res

# check _jm_obj_17_map_showBottomLine (.gui.showBottomLine)
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.showBottomLine
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.showBottomLine]", path))
    return res

# check _jm_obj_17_map_showBranchCommitHash (.gui.showBranchCommitHash)
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.showBranchCommitHash
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.showBranchCommitHash]", path))
    return res

# check _jm_obj_17_map_showCommandLog (.gui.showCommandLog)
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.showCommandLog
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.showCommandLog]", path))
    return res

# check _jm_obj_17_map_showFileTree (.gui.showFileTree)
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.showFileTree
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.showFileTree]", path))
    return res

# check _jm_obj_17_map_showListFooter (.gui.showListFooter)
def _jm_f_46(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.showListFooter
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.showListFooter]", path))
    return res

# check _jm_obj_17_map_showRandomTip (.gui.showRandomTip)
def _jm_f_47(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.showRandomTip
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.showRandomTip]", path))
    return res

# check _jm_obj_17_map_sidePanelWidth (.gui.sidePanelWidth)
def _jm_f_48(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.sidePanelWidth
    # .gui.sidePanelWidth.'@'
    res = isinstance(val, float) and val >= 0.0
    if not res:
        rep is None or rep.append(("not a 0.0 strict float [.gui.sidePanelWidth.'@']", path))
    if res:
        fval_0: float = val
        res = fval_0 <= 1.0
        if not res:
            rep is None or rep.append(("constraints failed [.gui.sidePanelWidth]", path))
    return res

# check _jm_obj_17_map_skipDiscardChangeWarning (.gui.skipDiscardChangeWarning)
def _jm_f_49(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.skipDiscardChangeWarning
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.skipDiscardChangeWarning]", path))
    return res

# check _jm_obj_17_map_skipRewordInEditorWarning (.gui.skipRewordInEditorWarning)
def _jm_f_50(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.skipRewordInEditorWarning
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.skipRewordInEditorWarning]", path))
    return res

# check _jm_obj_17_map_skipStashWarning (.gui.skipStashWarning)
def _jm_f_51(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.skipStashWarning
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.gui.skipStashWarning]", path))
    return res


# check _jm_obj_17_map_splitDiff (.gui.splitDiff)
def _jm_f_52(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.splitDiff
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_11
    if not res:
        rep is None or rep.append(("value not in enum [.gui.splitDiff.'|']", path))
    return res

# check _jm_obj_21_map_activeBorderColor (.gui.theme.activeBorderColor)
def _jm_f_54(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.theme.activeBorderColor
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $colorArray [.gui.theme.activeBorderColor]", path))
    return res

# check _jm_obj_21_map_cherryPickedCommitBgColor (.gui.theme.cherryPickedCommitBgColor)
def _jm_f_55(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.theme.cherryPickedCommitBgColor
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $colorArray [.gui.theme.cherryPickedCommitBgColor]", path))
    return res

# check _jm_obj_21_map_cherryPickedCommitFgColor (.gui.theme.cherryPickedCommitFgColor)
def _jm_f_56(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.theme.cherryPickedCommitFgColor
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $colorArray [.gui.theme.cherryPickedCommitFgColor]", path))
    return res

# check _jm_obj_21_map_defaultFgColor (.gui.theme.defaultFgColor)
def _jm_f_57(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.theme.defaultFgColor
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $colorArray [.gui.theme.defaultFgColor]", path))
    return res

# check _jm_obj_21_map_inactiveBorderColor (.gui.theme.inactiveBorderColor)
def _jm_f_58(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.theme.inactiveBorderColor
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $colorArray [.gui.theme.inactiveBorderColor]", path))
    return res

# check _jm_obj_21_map_optionsTextColor (.gui.theme.optionsTextColor)
def _jm_f_59(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.theme.optionsTextColor
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $colorArray [.gui.theme.optionsTextColor]", path))
    return res

# check _jm_obj_21_map_searchingActiveBorderColor (.gui.theme.searchingActiveBorderColor)
def _jm_f_60(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.theme.searchingActiveBorderColor
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $colorArray [.gui.theme.searchingActiveBorderColor]", path))
    return res

# check _jm_obj_21_map_selectedLineBgColor (.gui.theme.selectedLineBgColor)
def _jm_f_61(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.theme.selectedLineBgColor
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $colorArray [.gui.theme.selectedLineBgColor]", path))
    return res

# check _jm_obj_21_map_selectedRangeBgColor (.gui.theme.selectedRangeBgColor)
def _jm_f_62(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.theme.selectedRangeBgColor
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $colorArray [.gui.theme.selectedRangeBgColor]", path))
    return res

# check _jm_obj_21_map_unstagedChangesColor (.gui.theme.unstagedChangesColor)
def _jm_f_63(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.theme.unstagedChangesColor
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $colorArray [.gui.theme.unstagedChangesColor]", path))
    return res


# object .gui.theme
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.gui.theme]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_21_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_21 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.gui.theme]", lpath_21 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.gui.theme]", lpath_21 if path is not None else None))
            return False
    return True

# check _jm_obj_17_map_theme (.gui.theme)
def _jm_f_53(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.theme
    res = _jm_obj_21(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.gui.theme]", path))
    return res

# check _jm_obj_17_map_timeFormat (.gui.timeFormat)
def _jm_f_64(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.timeFormat
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.gui.timeFormat]", path))
    return res


# check _jm_obj_17_map_windowSize (.gui.windowSize)
def _jm_f_65(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui.windowSize
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_12
    if not res:
        rep is None or rep.append(("value not in enum [.gui.windowSize.'|']", path))
    return res


# object .gui
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.gui]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_17_map.get(prop):
            # handle 28 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_17 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.gui]", lpath_17 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.gui]", lpath_17 if path is not None else None))
            return False
    return True

# check _jm_obj_7_map_gui (.gui)
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .gui
    res = _jm_obj_17(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.gui]", path))
    return res

# check _jm_obj_23_map_checkoutBranchByName (.keybinding.branches.checkoutBranchByName)
def _jm_f_68(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches.checkoutBranchByName
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.branches.checkoutBranchByName]", path))
    return res

# check _jm_obj_23_map_createPullRequest (.keybinding.branches.createPullRequest)
def _jm_f_69(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches.createPullRequest
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.branches.createPullRequest]", path))
    return res

# check _jm_obj_23_map_createTag (.keybinding.branches.createTag)
def _jm_f_70(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches.createTag
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.branches.createTag]", path))
    return res

# check _jm_obj_23_map_fastForward (.keybinding.branches.fastForward)
def _jm_f_71(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches.fastForward
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.branches.fastForward]", path))
    return res

# check _jm_obj_23_map_fetchRemote (.keybinding.branches.fetchRemote)
def _jm_f_72(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches.fetchRemote
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.branches.fetchRemote]", path))
    return res

# check _jm_obj_23_map_forceCheckoutBranch (.keybinding.branches.forceCheckoutBranch)
def _jm_f_73(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches.forceCheckoutBranch
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.branches.forceCheckoutBranch]", path))
    return res

# check _jm_obj_23_map_mergeIntoCurrentBranch (.keybinding.branches.mergeIntoCurrentBranch)
def _jm_f_74(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches.mergeIntoCurrentBranch
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.branches.mergeIntoCurrentBranch]", path))
    return res

# check _jm_obj_23_map_pushTag (.keybinding.branches.pushTag)
def _jm_f_75(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches.pushTag
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.branches.pushTag]", path))
    return res

# check _jm_obj_23_map_rebaseBranch (.keybinding.branches.rebaseBranch)
def _jm_f_76(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches.rebaseBranch
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.branches.rebaseBranch]", path))
    return res

# check _jm_obj_23_map_renameBranch (.keybinding.branches.renameBranch)
def _jm_f_77(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches.renameBranch
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.branches.renameBranch]", path))
    return res

# check _jm_obj_23_map_setUpstream (.keybinding.branches.setUpstream)
def _jm_f_78(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches.setUpstream
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.branches.setUpstream]", path))
    return res

# check _jm_obj_23_map_viewGitFlowOptions (.keybinding.branches.viewGitFlowOptions)
def _jm_f_79(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches.viewGitFlowOptions
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.branches.viewGitFlowOptions]", path))
    return res

# check _jm_obj_23_map_viewPullRequestOptions (.keybinding.branches.viewPullRequestOptions)
def _jm_f_80(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches.viewPullRequestOptions
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.branches.viewPullRequestOptions]", path))
    return res


# object .keybinding.branches
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.branches]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_23_map.get(prop):
            # handle 13 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_23 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.keybinding.branches]", lpath_23 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.branches]", lpath_23 if path is not None else None))
            return False
    return True

# check _jm_obj_22_map_branches (.keybinding.branches)
def _jm_f_67(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.branches
    res = _jm_obj_23(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.keybinding.branches]", path))
    return res

# object .keybinding.commitFiles
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.commitFiles]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        if prop == "checkoutCommitFile":
            # handle may checkoutCommitFile property
            # .keybinding.commitFiles.checkoutCommitFile
            res = json_model_4(pval, lpath_24 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.commitFiles.checkoutCommitFile]", lpath_24 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.keybinding.commitFiles.checkoutCommitFile]", lpath_24 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.commitFiles]", lpath_24 if path is not None else None))
            return False
    return True

# check _jm_obj_22_map_commitFiles (.keybinding.commitFiles)
def _jm_f_81(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commitFiles
    res = _jm_obj_24(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.keybinding.commitFiles]", path))
    return res

# check _jm_obj_25_map_amendToCommit (.keybinding.commits.amendToCommit)
def _jm_f_83(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.amendToCommit
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.amendToCommit]", path))
    return res

# check _jm_obj_25_map_checkoutCommit (.keybinding.commits.checkoutCommit)
def _jm_f_84(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.checkoutCommit
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.checkoutCommit]", path))
    return res

# check _jm_obj_25_map_cherryPickCopy (.keybinding.commits.cherryPickCopy)
def _jm_f_85(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.cherryPickCopy
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.cherryPickCopy]", path))
    return res

# check _jm_obj_25_map_cherryPickCopyRange (.keybinding.commits.cherryPickCopyRange)
def _jm_f_86(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.cherryPickCopyRange
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.cherryPickCopyRange]", path))
    return res

# check _jm_obj_25_map_copyCommitMessageToClipboard (.keybinding.commits.copyCommitMessageToClipboard)
def _jm_f_87(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.copyCommitMessageToClipboard
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.copyCommitMessageToClipboard]", path))
    return res

# check _jm_obj_25_map_createFixupCommit (.keybinding.commits.createFixupCommit)
def _jm_f_88(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.createFixupCommit
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.createFixupCommit]", path))
    return res

# check _jm_obj_25_map_markCommitAsFixup (.keybinding.commits.markCommitAsFixup)
def _jm_f_89(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.markCommitAsFixup
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.markCommitAsFixup]", path))
    return res

# check _jm_obj_25_map_moveDownCommit (.keybinding.commits.moveDownCommit)
def _jm_f_90(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.moveDownCommit
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.moveDownCommit]", path))
    return res

# check _jm_obj_25_map_moveUpCommit (.keybinding.commits.moveUpCommit)
def _jm_f_91(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.moveUpCommit
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.moveUpCommit]", path))
    return res

# check _jm_obj_25_map_openLogMenu (.keybinding.commits.openLogMenu)
def _jm_f_92(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.openLogMenu
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.openLogMenu]", path))
    return res

# check _jm_obj_25_map_pasteCommits (.keybinding.commits.pasteCommits)
def _jm_f_93(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.pasteCommits
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.pasteCommits]", path))
    return res

# check _jm_obj_25_map_pickCommit (.keybinding.commits.pickCommit)
def _jm_f_94(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.pickCommit
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.pickCommit]", path))
    return res

# check _jm_obj_25_map_renameCommit (.keybinding.commits.renameCommit)
def _jm_f_95(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.renameCommit
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.renameCommit]", path))
    return res

# check _jm_obj_25_map_renameCommitWithEditor (.keybinding.commits.renameCommitWithEditor)
def _jm_f_96(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.renameCommitWithEditor
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.renameCommitWithEditor]", path))
    return res

# check _jm_obj_25_map_resetCherryPick (.keybinding.commits.resetCherryPick)
def _jm_f_97(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.resetCherryPick
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.resetCherryPick]", path))
    return res

# check _jm_obj_25_map_revertCommit (.keybinding.commits.revertCommit)
def _jm_f_98(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.revertCommit
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.revertCommit]", path))
    return res

# check _jm_obj_25_map_squashAboveCommits (.keybinding.commits.squashAboveCommits)
def _jm_f_99(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.squashAboveCommits
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.squashAboveCommits]", path))
    return res

# check _jm_obj_25_map_squashDown (.keybinding.commits.squashDown)
def _jm_f_100(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.squashDown
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.squashDown]", path))
    return res

# check _jm_obj_25_map_tagCommit (.keybinding.commits.tagCommit)
def _jm_f_101(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.tagCommit
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.tagCommit]", path))
    return res

# check _jm_obj_25_map_viewBisectOptions (.keybinding.commits.viewBisectOptions)
def _jm_f_102(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.viewBisectOptions
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.viewBisectOptions]", path))
    return res

# check _jm_obj_25_map_viewResetOptions (.keybinding.commits.viewResetOptions)
def _jm_f_103(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits.viewResetOptions
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.commits.viewResetOptions]", path))
    return res


# object .keybinding.commits
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.commits]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_25_map.get(prop):
            # handle 21 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_25 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.keybinding.commits]", lpath_25 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.commits]", lpath_25 if path is not None else None))
            return False
    return True

# check _jm_obj_22_map_commits (.keybinding.commits)
def _jm_f_82(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.commits
    res = _jm_obj_25(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.keybinding.commits]", path))
    return res

# check _jm_obj_26_map_amendLastCommit (.keybinding.files.amendLastCommit)
def _jm_f_105(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.amendLastCommit
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.amendLastCommit]", path))
    return res

# check _jm_obj_26_map_commitChanges (.keybinding.files.commitChanges)
def _jm_f_106(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.commitChanges
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.commitChanges]", path))
    return res

# check _jm_obj_26_map_commitChangesWithEditor (.keybinding.files.commitChangesWithEditor)
def _jm_f_107(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.commitChangesWithEditor
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.commitChangesWithEditor]", path))
    return res

# check _jm_obj_26_map_commitChangesWithoutHook (.keybinding.files.commitChangesWithoutHook)
def _jm_f_108(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.commitChangesWithoutHook
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.commitChangesWithoutHook]", path))
    return res

# check _jm_obj_26_map_fetch (.keybinding.files.fetch)
def _jm_f_109(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.fetch
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.fetch]", path))
    return res

# check _jm_obj_26_map_ignoreFile (.keybinding.files.ignoreFile)
def _jm_f_110(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.ignoreFile
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.ignoreFile]", path))
    return res

# check _jm_obj_26_map_openMergeTool (.keybinding.files.openMergeTool)
def _jm_f_111(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.openMergeTool
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.openMergeTool]", path))
    return res

# check _jm_obj_26_map_openStatusFilter (.keybinding.files.openStatusFilter)
def _jm_f_112(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.openStatusFilter
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.openStatusFilter]", path))
    return res

# check _jm_obj_26_map_refreshFiles (.keybinding.files.refreshFiles)
def _jm_f_113(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.refreshFiles
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.refreshFiles]", path))
    return res

# check _jm_obj_26_map_stashAllChanges (.keybinding.files.stashAllChanges)
def _jm_f_114(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.stashAllChanges
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.stashAllChanges]", path))
    return res

# check _jm_obj_26_map_toggleStagedAll (.keybinding.files.toggleStagedAll)
def _jm_f_115(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.toggleStagedAll
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.toggleStagedAll]", path))
    return res

# check _jm_obj_26_map_toggleTreeView (.keybinding.files.toggleTreeView)
def _jm_f_116(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.toggleTreeView
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.toggleTreeView]", path))
    return res

# check _jm_obj_26_map_viewResetOptions (.keybinding.files.viewResetOptions)
def _jm_f_117(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.viewResetOptions
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.viewResetOptions]", path))
    return res

# check _jm_obj_26_map_viewStashOptions (.keybinding.files.viewStashOptions)
def _jm_f_118(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files.viewStashOptions
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.files.viewStashOptions]", path))
    return res


# object .keybinding.files
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.files]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_26_map.get(prop):
            # handle 14 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_26 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.keybinding.files]", lpath_26 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.files]", lpath_26 if path is not None else None))
            return False
    return True

# check _jm_obj_22_map_files (.keybinding.files)
def _jm_f_104(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.files
    res = _jm_obj_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.keybinding.files]", path))
    return res

# object .keybinding.main
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.main]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        if prop == "toggleDragSelect":
            # handle may toggleDragSelect property
            # .keybinding.main.toggleDragSelect
            res = json_model_4(pval, lpath_27 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.main.toggleDragSelect]", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.keybinding.main.toggleDragSelect]", lpath_27 if path is not None else None))
                return False
        elif prop == "toggleDragSelect-alt":
            # handle may toggleDragSelect-alt property
            # .keybinding.main.'toggleDragSelect-alt'
            res = json_model_4(pval, lpath_27 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.main.'toggleDragSelect-alt']", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.keybinding.main.'toggleDragSelect-alt']", lpath_27 if path is not None else None))
                return False
        elif prop == "toggleSelectHunk":
            # handle may toggleSelectHunk property
            # .keybinding.main.toggleSelectHunk
            res = json_model_4(pval, lpath_27 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.main.toggleSelectHunk]", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.keybinding.main.toggleSelectHunk]", lpath_27 if path is not None else None))
                return False
        elif prop == "pickBothHunks":
            # handle may pickBothHunks property
            # .keybinding.main.pickBothHunks
            res = json_model_4(pval, lpath_27 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.main.pickBothHunks]", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.keybinding.main.pickBothHunks]", lpath_27 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.main]", lpath_27 if path is not None else None))
            return False
    return True

# check _jm_obj_22_map_main (.keybinding.main)
def _jm_f_119(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.main
    res = _jm_obj_27(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.keybinding.main]", path))
    return res

# object .keybinding.stash
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.stash]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        if prop == "popStash":
            # handle may popStash property
            # .keybinding.stash.popStash
            res = json_model_4(pval, lpath_28 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.stash.popStash]", lpath_28 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.keybinding.stash.popStash]", lpath_28 if path is not None else None))
                return False
        elif prop == "renameStash":
            # handle may renameStash property
            # .keybinding.stash.renameStash
            res = json_model_4(pval, lpath_28 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.stash.renameStash]", lpath_28 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.keybinding.stash.renameStash]", lpath_28 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.stash]", lpath_28 if path is not None else None))
            return False
    return True

# check _jm_obj_22_map_stash (.keybinding.stash)
def _jm_f_120(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.stash
    res = _jm_obj_28(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.keybinding.stash]", path))
    return res

# object .keybinding.status
def _jm_obj_29(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.status]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        if prop == "checkForUpdate":
            # handle may checkForUpdate property
            # .keybinding.status.checkForUpdate
            res = json_model_4(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.status.checkForUpdate]", lpath_29 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.keybinding.status.checkForUpdate]", lpath_29 if path is not None else None))
                return False
        elif prop == "recentRepos":
            # handle may recentRepos property
            # .keybinding.status.recentRepos
            res = json_model_4(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.status.recentRepos]", lpath_29 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.keybinding.status.recentRepos]", lpath_29 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.status]", lpath_29 if path is not None else None))
            return False
    return True

# check _jm_obj_22_map_status (.keybinding.status)
def _jm_f_121(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.status
    res = _jm_obj_29(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.keybinding.status]", path))
    return res

# object .keybinding.submodules
def _jm_obj_30(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.submodules]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        if prop == "init":
            # handle may init property
            # .keybinding.submodules.init
            res = json_model_4(pval, lpath_30 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.submodules.init]", lpath_30 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.keybinding.submodules.init]", lpath_30 if path is not None else None))
                return False
        elif prop == "update":
            # handle may update property
            # .keybinding.submodules.update
            res = json_model_4(pval, lpath_30 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.submodules.update]", lpath_30 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.keybinding.submodules.update]", lpath_30 if path is not None else None))
                return False
        elif prop == "bulkMenu":
            # handle may bulkMenu property
            # .keybinding.submodules.bulkMenu
            res = json_model_4(pval, lpath_30 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $keybinding [.keybinding.submodules.bulkMenu]", lpath_30 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.keybinding.submodules.bulkMenu]", lpath_30 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.submodules]", lpath_30 if path is not None else None))
            return False
    return True

# check _jm_obj_22_map_submodules (.keybinding.submodules)
def _jm_f_122(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.submodules
    res = _jm_obj_30(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.keybinding.submodules]", path))
    return res

# check _jm_obj_31_map_confirm (.keybinding.universal.confirm)
def _jm_f_124(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.confirm
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.confirm]", path))
    return res

# check _jm_obj_31_map_copyToClipboard (.keybinding.universal.copyToClipboard)
def _jm_f_125(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.copyToClipboard
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.copyToClipboard]", path))
    return res

# check _jm_obj_31_map_createPatchOptionsMenu (.keybinding.universal.createPatchOptionsMenu)
def _jm_f_126(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.createPatchOptionsMenu
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.createPatchOptionsMenu]", path))
    return res

# check _jm_obj_31_map_createRebaseOptionsMenu (.keybinding.universal.createRebaseOptionsMenu)
def _jm_f_127(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.createRebaseOptionsMenu
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.createRebaseOptionsMenu]", path))
    return res

# check _jm_obj_31_map_decreaseContextInDiffView (.keybinding.universal.decreaseContextInDiffView)
def _jm_f_128(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.decreaseContextInDiffView
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.decreaseContextInDiffView]", path))
    return res

# check _jm_obj_31_map_diffingMenu (.keybinding.universal.diffingMenu)
def _jm_f_129(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.diffingMenu
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.diffingMenu]", path))
    return res

# check _jm_obj_31_map_diffingMenu-alt (.keybinding.universal.'diffingMenu-alt')
def _jm_f_130(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.'diffingMenu-alt'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.'diffingMenu-alt']", path))
    return res

# check _jm_obj_31_map_edit (.keybinding.universal.edit)
def _jm_f_131(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.edit
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.edit]", path))
    return res

# check _jm_obj_31_map_executeCustomCommand (.keybinding.universal.executeCustomCommand)
def _jm_f_132(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.executeCustomCommand
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.executeCustomCommand]", path))
    return res

# check _jm_obj_31_map_extrasMenu (.keybinding.universal.extrasMenu)
def _jm_f_133(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.extrasMenu
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.extrasMenu]", path))
    return res

# check _jm_obj_31_map_filteringMenu (.keybinding.universal.filteringMenu)
def _jm_f_134(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.filteringMenu
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.filteringMenu]", path))
    return res

# check _jm_obj_31_map_goInto (.keybinding.universal.goInto)
def _jm_f_135(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.goInto
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.goInto]", path))
    return res

# check _jm_obj_31_map_gotoBottom (.keybinding.universal.gotoBottom)
def _jm_f_136(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.gotoBottom
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.gotoBottom]", path))
    return res

# check _jm_obj_31_map_gotoTop (.keybinding.universal.gotoTop)
def _jm_f_137(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.gotoTop
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.gotoTop]", path))
    return res

# check _jm_obj_31_map_increaseContextInDiffView (.keybinding.universal.increaseContextInDiffView)
def _jm_f_138(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.increaseContextInDiffView
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.increaseContextInDiffView]", path))
    return res

# check _jm_obj_31_map_jumpToBlock (.keybinding.universal.jumpToBlock)
def _jm_f_139(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.jumpToBlock
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.keybinding.universal.jumpToBlock]", path))
    return res

# check _jm_obj_31_map_new (.keybinding.universal.new)
def _jm_f_140(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.new
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.new]", path))
    return res

# check _jm_obj_31_map_nextBlock (.keybinding.universal.nextBlock)
def _jm_f_141(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.nextBlock
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.nextBlock]", path))
    return res

# check _jm_obj_31_map_nextBlock-alt (.keybinding.universal.'nextBlock-alt')
def _jm_f_142(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.'nextBlock-alt'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.'nextBlock-alt']", path))
    return res

# check _jm_obj_31_map_nextItem (.keybinding.universal.nextItem)
def _jm_f_143(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.nextItem
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.nextItem]", path))
    return res

# check _jm_obj_31_map_nextItem-alt (.keybinding.universal.'nextItem-alt')
def _jm_f_144(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.'nextItem-alt'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.'nextItem-alt']", path))
    return res

# check _jm_obj_31_map_nextMatch (.keybinding.universal.nextMatch)
def _jm_f_145(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.nextMatch
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.nextMatch]", path))
    return res

# check _jm_obj_31_map_nextPage (.keybinding.universal.nextPage)
def _jm_f_146(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.nextPage
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.nextPage]", path))
    return res

# check _jm_obj_31_map_nextScreenMode (.keybinding.universal.nextScreenMode)
def _jm_f_147(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.nextScreenMode
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.nextScreenMode]", path))
    return res

# check _jm_obj_31_map_nextTab (.keybinding.universal.nextTab)
def _jm_f_148(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.nextTab
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.nextTab]", path))
    return res

# check _jm_obj_31_map_openFile (.keybinding.universal.openFile)
def _jm_f_149(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.openFile
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.openFile]", path))
    return res

# check _jm_obj_31_map_openRecentRepos (.keybinding.universal.openRecentRepos)
def _jm_f_150(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.openRecentRepos
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.openRecentRepos]", path))
    return res

# check _jm_obj_31_map_optionMenu (.keybinding.universal.optionMenu)
def _jm_f_151(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.optionMenu
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.keybinding.universal.optionMenu]", path))
    return res

# check _jm_obj_31_map_optionMenu-alt1 (.keybinding.universal.'optionMenu-alt1')
def _jm_f_152(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.'optionMenu-alt1'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.'optionMenu-alt1']", path))
    return res

# check _jm_obj_31_map_prevBlock (.keybinding.universal.prevBlock)
def _jm_f_153(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.prevBlock
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.prevBlock]", path))
    return res

# check _jm_obj_31_map_prevBlock-alt (.keybinding.universal.'prevBlock-alt')
def _jm_f_154(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.'prevBlock-alt'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.'prevBlock-alt']", path))
    return res

# check _jm_obj_31_map_prevItem (.keybinding.universal.prevItem)
def _jm_f_155(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.prevItem
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.prevItem]", path))
    return res

# check _jm_obj_31_map_prevItem-alt (.keybinding.universal.'prevItem-alt')
def _jm_f_156(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.'prevItem-alt'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.'prevItem-alt']", path))
    return res

# check _jm_obj_31_map_prevMatch (.keybinding.universal.prevMatch)
def _jm_f_157(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.prevMatch
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.prevMatch]", path))
    return res

# check _jm_obj_31_map_prevPage (.keybinding.universal.prevPage)
def _jm_f_158(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.prevPage
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.prevPage]", path))
    return res

# check _jm_obj_31_map_prevScreenMode (.keybinding.universal.prevScreenMode)
def _jm_f_159(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.prevScreenMode
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.prevScreenMode]", path))
    return res

# check _jm_obj_31_map_prevTab (.keybinding.universal.prevTab)
def _jm_f_160(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.prevTab
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.prevTab]", path))
    return res

# check _jm_obj_31_map_pullFiles (.keybinding.universal.pullFiles)
def _jm_f_161(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.pullFiles
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.pullFiles]", path))
    return res

# check _jm_obj_31_map_pushFiles (.keybinding.universal.pushFiles)
def _jm_f_162(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.pushFiles
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.pushFiles]", path))
    return res

# check _jm_obj_31_map_quit (.keybinding.universal.quit)
def _jm_f_163(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.quit
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.quit]", path))
    return res

# check _jm_obj_31_map_quit-alt1 (.keybinding.universal.'quit-alt1')
def _jm_f_164(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.'quit-alt1'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.'quit-alt1']", path))
    return res

# check _jm_obj_31_map_quitWithoutChangingDirectory (.keybinding.universal.quitWithoutChangingDirectory)
def _jm_f_165(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.quitWithoutChangingDirectory
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.quitWithoutChangingDirectory]", path))
    return res

# check _jm_obj_31_map_redo (.keybinding.universal.redo)
def _jm_f_166(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.redo
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.redo]", path))
    return res

# check _jm_obj_31_map_refresh (.keybinding.universal.refresh)
def _jm_f_167(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.refresh
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.refresh]", path))
    return res

# check _jm_obj_31_map_remove (.keybinding.universal.remove)
def _jm_f_168(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.remove
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.remove]", path))
    return res

# check _jm_obj_31_map_return (.keybinding.universal.return)
def _jm_f_169(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.return
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.return]", path))
    return res

# check _jm_obj_31_map_scrollDownMain (.keybinding.universal.scrollDownMain)
def _jm_f_170(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.scrollDownMain
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.scrollDownMain]", path))
    return res

# check _jm_obj_31_map_scrollDownMain-alt1 (.keybinding.universal.'scrollDownMain-alt1')
def _jm_f_171(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.'scrollDownMain-alt1'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.'scrollDownMain-alt1']", path))
    return res

# check _jm_obj_31_map_scrollDownMain-alt2 (.keybinding.universal.'scrollDownMain-alt2')
def _jm_f_172(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.'scrollDownMain-alt2'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.'scrollDownMain-alt2']", path))
    return res

# check _jm_obj_31_map_scrollLeft (.keybinding.universal.scrollLeft)
def _jm_f_173(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.scrollLeft
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.scrollLeft]", path))
    return res

# check _jm_obj_31_map_scrollRight (.keybinding.universal.scrollRight)
def _jm_f_174(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.scrollRight
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.scrollRight]", path))
    return res

# check _jm_obj_31_map_scrollUpMain (.keybinding.universal.scrollUpMain)
def _jm_f_175(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.scrollUpMain
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.scrollUpMain]", path))
    return res

# check _jm_obj_31_map_scrollUpMain-alt1 (.keybinding.universal.'scrollUpMain-alt1')
def _jm_f_176(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.'scrollUpMain-alt1'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.'scrollUpMain-alt1']", path))
    return res

# check _jm_obj_31_map_scrollUpMain-alt2 (.keybinding.universal.'scrollUpMain-alt2')
def _jm_f_177(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.'scrollUpMain-alt2'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.'scrollUpMain-alt2']", path))
    return res

# check _jm_obj_31_map_select (.keybinding.universal.select)
def _jm_f_178(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.select
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.select]", path))
    return res

# check _jm_obj_31_map_submitEditorText (.keybinding.universal.submitEditorText)
def _jm_f_179(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.submitEditorText
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.submitEditorText]", path))
    return res

# check _jm_obj_31_map_togglePanel (.keybinding.universal.togglePanel)
def _jm_f_180(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.togglePanel
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.togglePanel]", path))
    return res

# check _jm_obj_31_map_toggleWhitespaceInDiffView (.keybinding.universal.toggleWhitespaceInDiffView)
def _jm_f_181(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.toggleWhitespaceInDiffView
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.toggleWhitespaceInDiffView]", path))
    return res

# check _jm_obj_31_map_undo (.keybinding.universal.undo)
def _jm_f_182(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal.undo
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $keybinding [.keybinding.universal.undo]", path))
    return res


# object .keybinding.universal
def _jm_obj_31(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding.universal]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_31_map.get(prop):
            # handle 59 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_31 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.keybinding.universal]", lpath_31 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding.universal]", lpath_31 if path is not None else None))
            return False
    return True

# check _jm_obj_22_map_universal (.keybinding.universal)
def _jm_f_123(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding.universal
    res = _jm_obj_31(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.keybinding.universal]", path))
    return res


# object .keybinding
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.keybinding]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_22_map.get(prop):
            # handle 9 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_22 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.keybinding]", lpath_22 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.keybinding]", lpath_22 if path is not None else None))
            return False
    return True

# check _jm_obj_7_map_keybinding (.keybinding)
def _jm_f_66(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .keybinding
    res = _jm_obj_22(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.keybinding]", path))
    return res


# check _jm_obj_7_map_notARepository (.notARepository)
def _jm_f_183(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .notARepository
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_13
    if not res:
        rep is None or rep.append(("value not in enum [.notARepository.'|']", path))
    return res

# check _jm_obj_32_map_copyToClipboardCmd (.os.copyToClipboardCmd)
def _jm_f_185(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .os.copyToClipboardCmd
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.os.copyToClipboardCmd]", path))
    return res

# check _jm_obj_32_map_edit (.os.edit)
def _jm_f_186(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .os.edit
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.os.edit]", path))
    return res

# check _jm_obj_32_map_editAtLine (.os.editAtLine)
def _jm_f_187(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .os.editAtLine
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.os.editAtLine]", path))
    return res

# check _jm_obj_32_map_editAtLineAndWait (.os.editAtLineAndWait)
def _jm_f_188(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .os.editAtLineAndWait
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.os.editAtLineAndWait]", path))
    return res


# check _jm_obj_32_map_editPreset (.os.editPreset)
def _jm_f_189(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .os.editPreset
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_14
    if not res:
        rep is None or rep.append(("value not in enum [.os.editPreset.'|']", path))
    if not res:
        res = isinstance(val, str)
        if not res:
            rep is None or rep.append(("unexpected type [.os.editPreset.'|']", path))
        if res:
            # .os.editPreset.'|'.0
            res = True
            if not res:
                rep is None or rep.append(("unexpected string [.os.editPreset.'|'.0]", path))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.os.editPreset.'|']", path))
    return res

# check _jm_obj_32_map_open (.os.open)
def _jm_f_190(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .os.open
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.os.open]", path))
    return res

# check _jm_obj_32_map_openLink (.os.openLink)
def _jm_f_191(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .os.openLink
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.os.openLink]", path))
    return res


# object .os
def _jm_obj_32(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.os]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_32_map.get(prop):
            # handle 7 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_32 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.os]", lpath_32 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.os]", lpath_32 if path is not None else None))
            return False
    return True

# check _jm_obj_7_map_os (.os)
def _jm_f_184(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .os
    res = _jm_obj_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.os]", path))
    return res

# check _jm_obj_7_map_promptToReturnFromSubprocess (.promptToReturnFromSubprocess)
def _jm_f_192(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .promptToReturnFromSubprocess
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.promptToReturnFromSubprocess]", path))
    return res

# check _jm_obj_7_map_quitOnTopLevelReturn (.quitOnTopLevelReturn)
def _jm_f_193(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .quitOnTopLevelReturn
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.quitOnTopLevelReturn]", path))
    return res

# object .refresher
def _jm_obj_33(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.refresher]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        if prop == "refreshInterval":
            # handle may refreshInterval property
            # .refresher.refreshInterval
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.refresher.refreshInterval]", lpath_33 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.refresher.refreshInterval]", lpath_33 if path is not None else None))
                return False
        elif prop == "fetchInterval":
            # handle may fetchInterval property
            # .refresher.fetchInterval
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.refresher.fetchInterval]", lpath_33 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.refresher.fetchInterval]", lpath_33 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.refresher]", lpath_33 if path is not None else None))
            return False
    return True

# check _jm_obj_7_map_refresher (.refresher)
def _jm_f_194(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .refresher
    res = _jm_obj_33(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.refresher]", path))
    return res


# object .services
def _jm_obj_34(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.services]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .services.'/./'
            # "/^[^:]+:[^:]+$/"
            res = isinstance(pval, str) and _jm_re_2(pval, lpath_34 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^[^:]+:[^:]+$/ [.services.'/./']", lpath_34 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.services]", lpath_34 if path is not None else None))
            return False
    return True

# check _jm_obj_7_map_services (.services)
def _jm_f_195(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .services
    res = _jm_obj_34(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.services]", path))
    return res


# object .update
def _jm_obj_35(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.update]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        if prop == "method":
            # handle may method property
            # .update.method
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_15
            if not res:
                rep is None or rep.append(("value not in enum [.update.method.'|']", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.update.method]", lpath_35 if path is not None else None))
                return False
        elif prop == "days":
            # handle may days property
            # .update.days
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.update.days]", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.update.days]", lpath_35 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.update]", lpath_35 if path is not None else None))
            return False
    return True

# check _jm_obj_7_map_update (.update)
def _jm_f_196(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .update
    res = _jm_obj_35(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.update]", path))
    return res


# object .
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_7_map.get(prop):
            # handle 13 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_7 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.]", lpath_7 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.]", lpath_7 if path is not None else None))
            return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = _jm_obj_7(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'black', 'blue', 'bold', 'cyan', 'default', 'green', 'magenta', 'red', 'reverse', 'strikethrough', 'underline', 'white', 'yellow'}
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile("^#[0-9a-fA-F]{6}$")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global _jm_cst_1
        _jm_cst_1 = {'confirm', 'input', 'menu', 'menuFromCommand'}
        global _jm_cst_2
        _jm_cst_2 = {'authors', 'branches', 'files', 'refs', 'remoteBranches', 'remotes', 'tags'}
        global _jm_map_0
        _jm_map_0 = {
            "input": _jm_obj_0,
            "confirm": _jm_obj_3,
            "menu": _jm_obj_4,
            "menuFromCommand": _jm_obj_6,
        }
        global _jm_cst_3
        _jm_cst_3 = {'commitFiles', 'commits', 'files', 'global', 'localBranches', 'reflogCommits', 'remoteBranches', 'remotes', 'stash', 'status', 'subCommits', 'tags', 'worktrees'}
        global _jm_obj_8_map
        _jm_obj_8_map = {
            "after": _jm_f_2,
            "description": _jm_f_3,
            "loadingText": _jm_f_4,
            "prompts": _jm_f_5,
            "showOutput": _jm_f_6,
            "stream": _jm_f_7,
            "subprocess": _jm_f_8,
        }
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = re.compile(".")
        _jm_re_1 = lambda s, p, r: _jm_re_1_reco.search(s) is not None
        global _jm_cst_4
        _jm_cst_4 = {'author-date-order', 'date-order', 'default', 'topo-order'}
        global _jm_cst_5
        _jm_cst_5 = {'always', 'never', 'when-maximised'}
        global _jm_cst_6
        _jm_cst_6 = {'always', 'never'}
        global _jm_obj_10_map
        _jm_obj_10_map = {
            "allBranchesLogCmd": _jm_f_11,
            "autoFetch": _jm_f_12,
            "autoRefresh": _jm_f_13,
            "branchLogCmd": _jm_f_14,
            "commit": _jm_f_15,
            "commitPrefixes": _jm_f_16,
            "diffContextSize": _jm_f_17,
            "disableForcePushing": _jm_f_18,
            "fetchAll": _jm_f_19,
            "log": _jm_f_20,
            "mainBranches": _jm_f_21,
            "merging": _jm_f_22,
            "overrideGpg": _jm_f_23,
            "paging": _jm_f_24,
            "parseEmoji": _jm_f_25,
            "skipHookPrefix": _jm_f_26,
        }
        global _jm_cst_7
        _jm_cst_7 = {'double', 'hidden', 'rounded', 'single'}
        global _jm_cst_8
        _jm_cst_8 = {'auto', 'en', 'ja', 'ko', 'nl', 'pl', 'ru', 'zh-CN', 'zh-TW'}
        global _jm_cst_9
        _jm_cst_9 = {'flexible', 'horizontal', 'vertical'}
        global _jm_cst_10
        _jm_cst_10 = {'2', '3'}
        global _jm_cst_11
        _jm_cst_11 = {'always', 'auto'}
        global _jm_obj_21_map
        _jm_obj_21_map = {
            "activeBorderColor": _jm_f_54,
            "cherryPickedCommitBgColor": _jm_f_55,
            "cherryPickedCommitFgColor": _jm_f_56,
            "defaultFgColor": _jm_f_57,
            "inactiveBorderColor": _jm_f_58,
            "optionsTextColor": _jm_f_59,
            "searchingActiveBorderColor": _jm_f_60,
            "selectedLineBgColor": _jm_f_61,
            "selectedRangeBgColor": _jm_f_62,
            "unstagedChangesColor": _jm_f_63,
        }
        global _jm_cst_12
        _jm_cst_12 = {'full', 'half', 'normal'}
        global _jm_obj_17_map
        _jm_obj_17_map = {
            "animateExplosion": _jm_f_28,
            "authorColors": _jm_f_29,
            "border": _jm_f_30,
            "branchColors": _jm_f_31,
            "commandLogSize": _jm_f_32,
            "commitLength": _jm_f_33,
            "expandFocusedSidePanel": _jm_f_34,
            "language": _jm_f_35,
            "mainPanelSplitMode": _jm_f_36,
            "mouseEvents": _jm_f_37,
            "nerdFontsVersion": _jm_f_38,
            "scrollHeight": _jm_f_39,
            "scrollPastBottom": _jm_f_40,
            "shortTimeFormat": _jm_f_41,
            "showBottomLine": _jm_f_42,
            "showBranchCommitHash": _jm_f_43,
            "showCommandLog": _jm_f_44,
            "showFileTree": _jm_f_45,
            "showListFooter": _jm_f_46,
            "showRandomTip": _jm_f_47,
            "sidePanelWidth": _jm_f_48,
            "skipDiscardChangeWarning": _jm_f_49,
            "skipRewordInEditorWarning": _jm_f_50,
            "skipStashWarning": _jm_f_51,
            "splitDiff": _jm_f_52,
            "theme": _jm_f_53,
            "timeFormat": _jm_f_64,
            "windowSize": _jm_f_65,
        }
        global _jm_obj_23_map
        _jm_obj_23_map = {
            "checkoutBranchByName": _jm_f_68,
            "createPullRequest": _jm_f_69,
            "createTag": _jm_f_70,
            "fastForward": _jm_f_71,
            "fetchRemote": _jm_f_72,
            "forceCheckoutBranch": _jm_f_73,
            "mergeIntoCurrentBranch": _jm_f_74,
            "pushTag": _jm_f_75,
            "rebaseBranch": _jm_f_76,
            "renameBranch": _jm_f_77,
            "setUpstream": _jm_f_78,
            "viewGitFlowOptions": _jm_f_79,
            "viewPullRequestOptions": _jm_f_80,
        }
        global _jm_obj_25_map
        _jm_obj_25_map = {
            "amendToCommit": _jm_f_83,
            "checkoutCommit": _jm_f_84,
            "cherryPickCopy": _jm_f_85,
            "cherryPickCopyRange": _jm_f_86,
            "copyCommitMessageToClipboard": _jm_f_87,
            "createFixupCommit": _jm_f_88,
            "markCommitAsFixup": _jm_f_89,
            "moveDownCommit": _jm_f_90,
            "moveUpCommit": _jm_f_91,
            "openLogMenu": _jm_f_92,
            "pasteCommits": _jm_f_93,
            "pickCommit": _jm_f_94,
            "renameCommit": _jm_f_95,
            "renameCommitWithEditor": _jm_f_96,
            "resetCherryPick": _jm_f_97,
            "revertCommit": _jm_f_98,
            "squashAboveCommits": _jm_f_99,
            "squashDown": _jm_f_100,
            "tagCommit": _jm_f_101,
            "viewBisectOptions": _jm_f_102,
            "viewResetOptions": _jm_f_103,
        }
        global _jm_obj_26_map
        _jm_obj_26_map = {
            "amendLastCommit": _jm_f_105,
            "commitChanges": _jm_f_106,
            "commitChangesWithEditor": _jm_f_107,
            "commitChangesWithoutHook": _jm_f_108,
            "fetch": _jm_f_109,
            "ignoreFile": _jm_f_110,
            "openMergeTool": _jm_f_111,
            "openStatusFilter": _jm_f_112,
            "refreshFiles": _jm_f_113,
            "stashAllChanges": _jm_f_114,
            "toggleStagedAll": _jm_f_115,
            "toggleTreeView": _jm_f_116,
            "viewResetOptions": _jm_f_117,
            "viewStashOptions": _jm_f_118,
        }
        global _jm_obj_31_map
        _jm_obj_31_map = {
            "confirm": _jm_f_124,
            "copyToClipboard": _jm_f_125,
            "createPatchOptionsMenu": _jm_f_126,
            "createRebaseOptionsMenu": _jm_f_127,
            "decreaseContextInDiffView": _jm_f_128,
            "diffingMenu": _jm_f_129,
            "diffingMenu-alt": _jm_f_130,
            "edit": _jm_f_131,
            "executeCustomCommand": _jm_f_132,
            "extrasMenu": _jm_f_133,
            "filteringMenu": _jm_f_134,
            "goInto": _jm_f_135,
            "gotoBottom": _jm_f_136,
            "gotoTop": _jm_f_137,
            "increaseContextInDiffView": _jm_f_138,
            "jumpToBlock": _jm_f_139,
            "new": _jm_f_140,
            "nextBlock": _jm_f_141,
            "nextBlock-alt": _jm_f_142,
            "nextItem": _jm_f_143,
            "nextItem-alt": _jm_f_144,
            "nextMatch": _jm_f_145,
            "nextPage": _jm_f_146,
            "nextScreenMode": _jm_f_147,
            "nextTab": _jm_f_148,
            "openFile": _jm_f_149,
            "openRecentRepos": _jm_f_150,
            "optionMenu": _jm_f_151,
            "optionMenu-alt1": _jm_f_152,
            "prevBlock": _jm_f_153,
            "prevBlock-alt": _jm_f_154,
            "prevItem": _jm_f_155,
            "prevItem-alt": _jm_f_156,
            "prevMatch": _jm_f_157,
            "prevPage": _jm_f_158,
            "prevScreenMode": _jm_f_159,
            "prevTab": _jm_f_160,
            "pullFiles": _jm_f_161,
            "pushFiles": _jm_f_162,
            "quit": _jm_f_163,
            "quit-alt1": _jm_f_164,
            "quitWithoutChangingDirectory": _jm_f_165,
            "redo": _jm_f_166,
            "refresh": _jm_f_167,
            "remove": _jm_f_168,
            "return": _jm_f_169,
            "scrollDownMain": _jm_f_170,
            "scrollDownMain-alt1": _jm_f_171,
            "scrollDownMain-alt2": _jm_f_172,
            "scrollLeft": _jm_f_173,
            "scrollRight": _jm_f_174,
            "scrollUpMain": _jm_f_175,
            "scrollUpMain-alt1": _jm_f_176,
            "scrollUpMain-alt2": _jm_f_177,
            "select": _jm_f_178,
            "submitEditorText": _jm_f_179,
            "togglePanel": _jm_f_180,
            "toggleWhitespaceInDiffView": _jm_f_181,
            "undo": _jm_f_182,
        }
        global _jm_obj_22_map
        _jm_obj_22_map = {
            "branches": _jm_f_67,
            "commitFiles": _jm_f_81,
            "commits": _jm_f_82,
            "files": _jm_f_104,
            "main": _jm_f_119,
            "stash": _jm_f_120,
            "status": _jm_f_121,
            "submodules": _jm_f_122,
            "universal": _jm_f_123,
        }
        global _jm_cst_13
        _jm_cst_13 = {'create', 'prompt', 'quit', 'skip'}
        global _jm_cst_14
        _jm_cst_14 = {'bbedit', 'emacs', 'helix', 'kakoune', 'nano', 'nvim', 'sublime', 'vim', 'vscode', 'xcode'}
        global _jm_obj_32_map
        _jm_obj_32_map = {
            "copyToClipboardCmd": _jm_f_185,
            "edit": _jm_f_186,
            "editAtLine": _jm_f_187,
            "editAtLineAndWait": _jm_f_188,
            "editPreset": _jm_f_189,
            "open": _jm_f_190,
            "openLink": _jm_f_191,
        }
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = re.compile("^[^:]+:[^:]+$")
        _jm_re_2 = lambda s, p, r: _jm_re_2_reco.search(s) is not None
        global _jm_cst_15
        _jm_cst_15 = {'background', 'never', 'prompt'}
        global _jm_obj_7_map
        _jm_obj_7_map = {
            "confirmOnQuit": _jm_f_0,
            "customCommands": _jm_f_1,
            "disableStartupPopups": _jm_f_9,
            "git": _jm_f_10,
            "gui": _jm_f_27,
            "keybinding": _jm_f_66,
            "notARepository": _jm_f_183,
            "os": _jm_f_184,
            "promptToReturnFromSubprocess": _jm_f_192,
            "quitOnTopLevelReturn": _jm_f_193,
            "refresher": _jm_f_194,
            "services": _jm_f_195,
            "update": _jm_f_196,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "color": json_model_2,
            "colorArray": json_model_3,
            "keybinding": json_model_4,
            "custom-commands-prompts-type-property": json_model_5,
            "custom-commands-prompts-title-property": json_model_6,
            "custom-commands-prompts-key-property": json_model_7,
            "neString": json_model_8,
            "stringArray": json_model_9,
            "Prompts": json_model_10,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = None
        _jm_re_1 = None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = None
        _jm_re_2 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
