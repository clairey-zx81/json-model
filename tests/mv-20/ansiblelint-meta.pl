#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


my %_jm_cst_0;
sub _jm_obj_0($$$);
sub json_model_2($$$);
sub _jm_obj_1($$$);
sub json_model_3($$$);
my %_jm_cst_1;
sub _jm_obj_2($$$);
sub json_model_4($$$);
my %_jm_cst_2;
sub _jm_obj_3($$$);
sub json_model_5($$$);
sub _jm_obj_4($$$);
sub json_model_6($$$);
my %_jm_cst_3;
sub _jm_obj_5($$$);
sub json_model_7($$$);
sub _jm_obj_6($$$);
sub json_model_8($$$);
my %_jm_cst_4;
sub _jm_obj_7($$$);
sub json_model_9($$$);
my %_jm_cst_5;
sub _jm_obj_8($$$);
sub json_model_10($$$);
my %_jm_cst_6;
sub _jm_obj_9($$$);
sub json_model_11($$$);
my %_jm_cst_7;
sub _jm_obj_10($$$);
sub json_model_12($$$);
my %_jm_cst_8;
sub _jm_obj_11($$$);
sub json_model_13($$$);
my %_jm_cst_9;
sub _jm_obj_12($$$);
sub json_model_14($$$);
my %_jm_cst_10;
sub _jm_obj_13($$$);
sub json_model_15($$$);
my %_jm_cst_11;
sub _jm_obj_14($$$);
sub json_model_16($$$);
sub _jm_obj_15($$$);
sub json_model_17($$$);
sub _jm_obj_16($$$);
sub json_model_18($$$);
sub _jm_obj_17($$$);
sub json_model_19($$$);
sub _jm_obj_18($$$);
sub json_model_20($$$);
my %_jm_cst_12;
sub _jm_obj_19($$$);
sub json_model_21($$$);
sub _jm_obj_20($$$);
sub json_model_22($$$);
sub _jm_obj_21($$$);
sub json_model_23($$$);
my %_jm_cst_13;
sub _jm_obj_22($$$);
sub json_model_24($$$);
my %_jm_cst_14;
sub _jm_obj_23($$$);
sub json_model_25($$$);
my %_jm_cst_15;
sub _jm_obj_24($$$);
sub json_model_26($$$);
sub _jm_obj_25($$$);
sub json_model_27($$$);
my %_jm_cst_16;
sub _jm_obj_26($$$);
sub json_model_28($$$);
my %_jm_cst_17;
sub _jm_obj_27($$$);
sub json_model_29($$$);
my %_jm_cst_18;
sub _jm_obj_28($$$);
sub json_model_30($$$);
my %_jm_cst_19;
sub _jm_obj_29($$$);
sub json_model_31($$$);
my %_jm_cst_20;
sub _jm_obj_30($$$);
sub json_model_32($$$);
my %_jm_cst_21;
sub _jm_obj_31($$$);
sub json_model_33($$$);
my %_jm_cst_22;
sub _jm_obj_32($$$);
sub json_model_34($$$);
sub _jm_obj_33($$$);
sub json_model_35($$$);
my %_jm_cst_23;
sub _jm_obj_34($$$);
sub json_model_36($$$);
my %_jm_cst_24;
sub _jm_obj_35($$$);
sub json_model_37($$$);
my %_jm_cst_25;
sub _jm_obj_36($$$);
sub json_model_38($$$);
my %_jm_cst_26;
sub _jm_obj_37($$$);
sub json_model_39($$$);
sub _jm_obj_38($$$);
sub json_model_40($$$);
my %_jm_cst_27;
sub _jm_obj_39($$$);
sub json_model_41($$$);
sub _jm_obj_40($$$);
sub json_model_42($$$);
sub _jm_obj_41($$$);
sub json_model_43($$$);
my %_jm_cst_28;
sub _jm_obj_42($$$);
sub json_model_44($$$);
my %_jm_cst_29;
sub _jm_obj_43($$$);
sub json_model_45($$$);
sub _jm_obj_44($$$);
sub json_model_46($$$);
my %_jm_cst_30;
sub _jm_obj_45($$$);
sub json_model_47($$$);
my %_jm_cst_31;
sub _jm_obj_46($$$);
sub json_model_48($$$);
sub json_model_49($$$);
my %_jm_cst_32;
sub _jm_obj_47($$$);
my %_jm_cst_33;
sub _jm_obj_48($$$);
sub _jm_obj_49($$$);
my %_jm_cst_34;
sub _jm_obj_50($$$);
my %_jm_cst_35;
sub _jm_obj_51($$$);
my %_jm_cst_36;
sub _jm_obj_52($$$);
my %_jm_cst_37;
sub _jm_obj_53($$$);
my %_jm_cst_38;
sub _jm_obj_54($$$);
sub _jm_obj_55($$$);
my %_jm_cst_39;
sub _jm_obj_56($$$);
my %_jm_cst_40;
sub _jm_obj_57($$$);
my %_jm_cst_41;
sub _jm_obj_58($$$);
sub _jm_obj_59($$$);
my %_jm_cst_42;
sub _jm_obj_60($$$);
my %_jm_cst_43;
sub _jm_obj_61($$$);
my %_jm_cst_44;
sub _jm_obj_62($$$);
my %_jm_cst_45;
sub _jm_obj_63($$$);
sub _jm_obj_64($$$);
my %_jm_cst_46;
sub _jm_obj_65($$$);
my %_jm_cst_47;
sub _jm_obj_66($$$);
my %_jm_cst_48;
sub _jm_obj_67($$$);
my %_jm_cst_49;
sub _jm_obj_68($$$);
sub _jm_obj_69($$$);
sub _jm_obj_70($$$);
my %_jm_cst_50;
sub _jm_obj_71($$$);
sub _jm_obj_72($$$);
sub _jm_obj_73($$$);
sub _jm_obj_74($$$);
sub _jm_obj_75($$$);
my %_jm_cst_51;
sub _jm_obj_76($$$);
my %_jm_cst_52;
sub _jm_obj_77($$$);
sub _jm_obj_78($$$);
my %_jm_cst_53;
sub _jm_obj_79($$$);
my %_jm_cst_54;
sub _jm_obj_80($$$);
my %_jm_cst_55;
sub _jm_obj_81($$$);
my %_jm_cst_56;
sub _jm_obj_82($$$);
my %_jm_cst_57;
sub _jm_obj_83($$$);
my %_jm_cst_58;
sub _jm_obj_84($$$);
my %_jm_cst_59;
sub _jm_obj_85($$$);
sub _jm_obj_86($$$);
my %_jm_cst_60;
sub _jm_obj_87($$$);
sub _jm_obj_88($$$);
sub _jm_obj_89($$$);
my %_jm_cst_61;
sub _jm_obj_90($$$);
my %_jm_cst_62;
sub _jm_obj_91($$$);
sub _jm_obj_92($$$);
my %_jm_cst_63;
sub _jm_obj_93($$$);
sub json_model_50($$$);
sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
sub _jm_f_6($$$);
my %_jm_obj_94_map;
sub _jm_obj_94($$$);
sub json_model_51($$$);
sub _jm_f_7($$$);
sub _jm_f_8($$$);
sub _jm_f_9($$$);
sub _jm_f_10($$$);
sub _jm_f_11($$$);
sub _jm_f_12($$$);
my %_jm_obj_95_map;
sub _jm_obj_95($$$);
sub json_model_52($$$);
sub _jm_f_13($$$);
sub _jm_f_14($$$);
sub _jm_f_15($$$);
sub _jm_f_16($$$);
sub _jm_f_17($$$);
sub _jm_f_18($$$);
sub _jm_f_19($$$);
sub _jm_f_20($$$);
sub _jm_f_21($$$);
sub _jm_f_22($$$);
my %_jm_obj_96_map;
sub _jm_obj_96($$$);
sub json_model_53($$$);
sub _jm_f_23($$$);
sub _jm_f_24($$$);
sub _jm_f_25($$$);
sub _jm_f_26($$$);
sub _jm_f_27($$$);
sub _jm_f_28($$$);
sub _jm_f_29($$$);
sub _jm_f_30($$$);
sub _jm_f_31($$$);
sub _jm_f_32($$$);
sub _jm_f_33($$$);
sub _jm_f_34($$$);
sub _jm_f_35($$$);
my %_jm_obj_97_map;
sub _jm_obj_97($$$);
sub _jm_f_36($$$);
sub _jm_f_37($$$);
sub _jm_f_38($$$);
sub _jm_f_39($$$);
sub _jm_f_40($$$);
sub _jm_f_41($$$);
sub _jm_f_42($$$);
sub _jm_f_43($$$);
sub _jm_f_44($$$);
sub _jm_f_45($$$);
sub _jm_f_46($$$);
sub _jm_f_47($$$);
sub _jm_f_48($$$);
my %_jm_obj_98_map;
sub _jm_obj_98($$$);
my %_jm_map_0;
sub json_model_54($$$);
sub json_model_55($$$);
sub json_model_56($$$);
sub _jm_f_49($$$);
sub _jm_f_50($$$);
sub _jm_f_51($$$);
my %_jm_cst_64;
sub _jm_f_52($$$);
sub _jm_f_53($$$);
sub _jm_f_54($$$);
sub _jm_obj_100($$$);
sub _jm_f_55($$$);
sub _jm_f_56($$$);
sub _jm_f_57($$$);
my %_jm_obj_99_map;
sub _jm_obj_99($$$);
sub json_model_57($$$);
sub _jm_obj_101($$$);
sub _jm_obj_102($$$);
sub _jm_obj_103($$$);
sub json_model_58($$$);
sub _jm_obj_104($$$);
sub json_model_59($$$);
sub json_model_60($$$);
sub json_model_1($$$);
my %check_model_map;


# object .'$AIXPlatformModel'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$AIXPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'AIX';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$AIXPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_0_idx (0 .. $#$pval)
                {
                    my $arr_0_item = $$pval[$arr_0_idx];
                    # .'$AIXPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_0_item) && jm_is_string($arr_0_item) && exists $_jm_cst_0{$arr_0_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $AIXPlatformModel (.'$AIXPlatformModel')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AIXPlatformModel'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# object .'$AlpinePlatformModel'
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$AlpinePlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Alpine';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$AlpinePlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_1_idx (0 .. $#$pval)
                {
                    my $arr_1_item = $$pval[$arr_1_idx];
                    # .'$AlpinePlatformModel'.versions.0
                    $res = jm_is_string($arr_1_item) && $arr_1_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $AlpinePlatformModel (.'$AlpinePlatformModel')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AlpinePlatformModel'
    $res = _jm_obj_1($val, $path, $rep);
    return $res;
}


# object .'$AmazonLinuxPlatformModel'
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$AmazonLinuxPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Amazon Linux';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$AmazonLinuxPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_2_idx (0 .. $#$pval)
                {
                    my $arr_2_item = $$pval[$arr_2_idx];
                    # .'$AmazonLinuxPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_2_item) && jm_is_string($arr_2_item) && exists $_jm_cst_1{$arr_2_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $AmazonLinuxPlatformModel (.'$AmazonLinuxPlatformModel')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AmazonLinuxPlatformModel'
    $res = _jm_obj_2($val, $path, $rep);
    return $res;
}


# object .'$AmazonPlatformModel'
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$AmazonPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Amazon';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$AmazonPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_3_idx (0 .. $#$pval)
                {
                    my $arr_3_item = $$pval[$arr_3_idx];
                    # .'$AmazonPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_3_item) && jm_is_string($arr_3_item) && exists $_jm_cst_2{$arr_3_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $AmazonPlatformModel (.'$AmazonPlatformModel')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AmazonPlatformModel'
    $res = _jm_obj_3($val, $path, $rep);
    return $res;
}

# object .'$ArchLinuxPlatformModel'
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$ArchLinuxPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'ArchLinux';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$ArchLinuxPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_4_idx (0 .. $#$pval)
                {
                    my $arr_4_item = $$pval[$arr_4_idx];
                    # .'$ArchLinuxPlatformModel'.versions.0
                    $res = jm_is_string($arr_4_item) && $arr_4_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $ArchLinuxPlatformModel (.'$ArchLinuxPlatformModel')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ArchLinuxPlatformModel'
    $res = _jm_obj_4($val, $path, $rep);
    return $res;
}


# object .'$AstraLinuxPlatformModel'
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$AstraLinuxPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Astra Linux';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$AstraLinuxPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_5_idx (0 .. $#$pval)
                {
                    my $arr_5_item = $$pval[$arr_5_idx];
                    # .'$AstraLinuxPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_5_item) && jm_is_string($arr_5_item) && exists $_jm_cst_3{$arr_5_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $AstraLinuxPlatformModel (.'$AstraLinuxPlatformModel')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AstraLinuxPlatformModel'
    $res = _jm_obj_5($val, $path, $rep);
    return $res;
}

# object .'$ClearLinuxPlatformModel'
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$ClearLinuxPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'ClearLinux';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$ClearLinuxPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_6_idx (0 .. $#$pval)
                {
                    my $arr_6_item = $$pval[$arr_6_idx];
                    # .'$ClearLinuxPlatformModel'.versions.0
                    $res = jm_is_string($arr_6_item) && $arr_6_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $ClearLinuxPlatformModel (.'$ClearLinuxPlatformModel')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ClearLinuxPlatformModel'
    $res = _jm_obj_6($val, $path, $rep);
    return $res;
}


# object .'$CumulusPlatformModel'
sub _jm_obj_7($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$CumulusPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Cumulus';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$CumulusPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_7_idx (0 .. $#$pval)
                {
                    my $arr_7_item = $$pval[$arr_7_idx];
                    # .'$CumulusPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_7_item) && jm_is_string($arr_7_item) && exists $_jm_cst_4{$arr_7_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $CumulusPlatformModel (.'$CumulusPlatformModel')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$CumulusPlatformModel'
    $res = _jm_obj_7($val, $path, $rep);
    return $res;
}


# object .'$DebianPlatformModel'
sub _jm_obj_8($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$DebianPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Debian';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$DebianPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_8_idx (0 .. $#$pval)
                {
                    my $arr_8_item = $$pval[$arr_8_idx];
                    # .'$DebianPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_8_item) && jm_is_string($arr_8_item) && exists $_jm_cst_5{$arr_8_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $DebianPlatformModel (.'$DebianPlatformModel')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$DebianPlatformModel'
    $res = _jm_obj_8($val, $path, $rep);
    return $res;
}


# object .'$DellOSPlatformModel'
sub _jm_obj_9($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$DellOSPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'DellOS';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$DellOSPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_9_idx (0 .. $#$pval)
                {
                    my $arr_9_item = $$pval[$arr_9_idx];
                    # .'$DellOSPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_9_item) && jm_is_string($arr_9_item) && exists $_jm_cst_6{$arr_9_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $DellOSPlatformModel (.'$DellOSPlatformModel')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$DellOSPlatformModel'
    $res = _jm_obj_9($val, $path, $rep);
    return $res;
}


# object .'$DevuanPlatformModel'
sub _jm_obj_10($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$DevuanPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Devuan';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$DevuanPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_10_idx (0 .. $#$pval)
                {
                    my $arr_10_item = $$pval[$arr_10_idx];
                    # .'$DevuanPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_10_item) && jm_is_string($arr_10_item) && exists $_jm_cst_7{$arr_10_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $DevuanPlatformModel (.'$DevuanPlatformModel')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$DevuanPlatformModel'
    $res = _jm_obj_10($val, $path, $rep);
    return $res;
}


# object .'$DragonFlyBSDPlatformModel'
sub _jm_obj_11($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$DragonFlyBSDPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'DragonFlyBSD';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$DragonFlyBSDPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_11_idx (0 .. $#$pval)
                {
                    my $arr_11_item = $$pval[$arr_11_idx];
                    # .'$DragonFlyBSDPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_11_item) && jm_is_string($arr_11_item) && exists $_jm_cst_8{$arr_11_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $DragonFlyBSDPlatformModel (.'$DragonFlyBSDPlatformModel')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$DragonFlyBSDPlatformModel'
    $res = _jm_obj_11($val, $path, $rep);
    return $res;
}


# object .'$ELPlatformModel'
sub _jm_obj_12($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$ELPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'EL';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$ELPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_12_idx (0 .. $#$pval)
                {
                    my $arr_12_item = $$pval[$arr_12_idx];
                    # .'$ELPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_12_item) && jm_is_string($arr_12_item) && exists $_jm_cst_9{$arr_12_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $ELPlatformModel (.'$ELPlatformModel')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ELPlatformModel'
    $res = _jm_obj_12($val, $path, $rep);
    return $res;
}


# object .'$FedoraPlatformModel'
sub _jm_obj_13($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$FedoraPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Fedora';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$FedoraPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_13_idx (0 .. $#$pval)
                {
                    my $arr_13_item = $$pval[$arr_13_idx];
                    # .'$FedoraPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_13_item) && jm_is_string($arr_13_item) && exists $_jm_cst_10{$arr_13_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $FedoraPlatformModel (.'$FedoraPlatformModel')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$FedoraPlatformModel'
    $res = _jm_obj_13($val, $path, $rep);
    return $res;
}


# object .'$FreeBSDPlatformModel'
sub _jm_obj_14($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$FreeBSDPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'FreeBSD';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$FreeBSDPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_14_idx (0 .. $#$pval)
                {
                    my $arr_14_item = $$pval[$arr_14_idx];
                    # .'$FreeBSDPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_14_item) && jm_is_string($arr_14_item) && exists $_jm_cst_11{$arr_14_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $FreeBSDPlatformModel (.'$FreeBSDPlatformModel')
sub json_model_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$FreeBSDPlatformModel'
    $res = _jm_obj_14($val, $path, $rep);
    return $res;
}

# object .'$GenericBSDPlatformModel'
sub _jm_obj_15($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$GenericBSDPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'GenericBSD';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$GenericBSDPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_15_idx (0 .. $#$pval)
                {
                    my $arr_15_item = $$pval[$arr_15_idx];
                    # .'$GenericBSDPlatformModel'.versions.0
                    $res = jm_is_string($arr_15_item) && $arr_15_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $GenericBSDPlatformModel (.'$GenericBSDPlatformModel')
sub json_model_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GenericBSDPlatformModel'
    $res = _jm_obj_15($val, $path, $rep);
    return $res;
}

# object .'$GenericLinuxPlatformModel'
sub _jm_obj_16($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$GenericLinuxPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'GenericLinux';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$GenericLinuxPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_16_idx (0 .. $#$pval)
                {
                    my $arr_16_item = $$pval[$arr_16_idx];
                    # .'$GenericLinuxPlatformModel'.versions.0
                    $res = jm_is_string($arr_16_item) && $arr_16_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $GenericLinuxPlatformModel (.'$GenericLinuxPlatformModel')
sub json_model_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GenericLinuxPlatformModel'
    $res = _jm_obj_16($val, $path, $rep);
    return $res;
}

# object .'$GenericUNIXPlatformModel'
sub _jm_obj_17($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$GenericUNIXPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'GenericUNIX';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$GenericUNIXPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_17_idx (0 .. $#$pval)
                {
                    my $arr_17_item = $$pval[$arr_17_idx];
                    # .'$GenericUNIXPlatformModel'.versions.0
                    $res = jm_is_string($arr_17_item) && $arr_17_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $GenericUNIXPlatformModel (.'$GenericUNIXPlatformModel')
sub json_model_19($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GenericUNIXPlatformModel'
    $res = _jm_obj_17($val, $path, $rep);
    return $res;
}

# object .'$GentooPlatformModel'
sub _jm_obj_18($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$GentooPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Gentoo';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$GentooPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_18_idx (0 .. $#$pval)
                {
                    my $arr_18_item = $$pval[$arr_18_idx];
                    # .'$GentooPlatformModel'.versions.0
                    $res = jm_is_string($arr_18_item) && $arr_18_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $GentooPlatformModel (.'$GentooPlatformModel')
sub json_model_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GentooPlatformModel'
    $res = _jm_obj_18($val, $path, $rep);
    return $res;
}


# object .'$HardenedBSDPlatformModel'
sub _jm_obj_19($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$HardenedBSDPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'HardenedBSD';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$HardenedBSDPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_19_idx (0 .. $#$pval)
                {
                    my $arr_19_item = $$pval[$arr_19_idx];
                    # .'$HardenedBSDPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_19_item) && jm_is_string($arr_19_item) && exists $_jm_cst_12{$arr_19_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $HardenedBSDPlatformModel (.'$HardenedBSDPlatformModel')
sub json_model_21($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$HardenedBSDPlatformModel'
    $res = _jm_obj_19($val, $path, $rep);
    return $res;
}

# object .'$IOSPlatformModel'
sub _jm_obj_20($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$IOSPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'IOS';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$IOSPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_20_idx (0 .. $#$pval)
                {
                    my $arr_20_item = $$pval[$arr_20_idx];
                    # .'$IOSPlatformModel'.versions.0
                    $res = jm_is_string($arr_20_item) && $arr_20_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $IOSPlatformModel (.'$IOSPlatformModel')
sub json_model_22($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$IOSPlatformModel'
    $res = _jm_obj_20($val, $path, $rep);
    return $res;
}

# object .'$JunosPlatformModel'
sub _jm_obj_21($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$JunosPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Junos';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$JunosPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_21_idx (0 .. $#$pval)
                {
                    my $arr_21_item = $$pval[$arr_21_idx];
                    # .'$JunosPlatformModel'.versions.0
                    $res = jm_is_string($arr_21_item) && $arr_21_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $JunosPlatformModel (.'$JunosPlatformModel')
sub json_model_23($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$JunosPlatformModel'
    $res = _jm_obj_21($val, $path, $rep);
    return $res;
}


# object .'$KaliPlatformModel'
sub _jm_obj_22($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$KaliPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Kali';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$KaliPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_22_idx (0 .. $#$pval)
                {
                    my $arr_22_item = $$pval[$arr_22_idx];
                    # .'$KaliPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_22_item) && jm_is_string($arr_22_item) && exists $_jm_cst_13{$arr_22_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $KaliPlatformModel (.'$KaliPlatformModel')
sub json_model_24($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$KaliPlatformModel'
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}


# object .'$MacOSXPlatformModel'
sub _jm_obj_23($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$MacOSXPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Kali';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$MacOSXPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_23_idx (0 .. $#$pval)
                {
                    my $arr_23_item = $$pval[$arr_23_idx];
                    # .'$MacOSXPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_23_item) && jm_is_string($arr_23_item) && exists $_jm_cst_14{$arr_23_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $MacOSXPlatformModel (.'$MacOSXPlatformModel')
sub json_model_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$MacOSXPlatformModel'
    $res = _jm_obj_23($val, $path, $rep);
    return $res;
}


# object .'$MageiaPlatformModel'
sub _jm_obj_24($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$MageiaPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Megeia';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$MageiaPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_24_idx (0 .. $#$pval)
                {
                    my $arr_24_item = $$pval[$arr_24_idx];
                    # .'$MageiaPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_24_item) && jm_is_string($arr_24_item) && exists $_jm_cst_15{$arr_24_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $MageiaPlatformModel (.'$MageiaPlatformModel')
sub json_model_26($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$MageiaPlatformModel'
    $res = _jm_obj_24($val, $path, $rep);
    return $res;
}

# object .'$NXOSPlatformModel'
sub _jm_obj_25($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$NXOSPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'NXOS';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$NXOSPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_25_idx (0 .. $#$pval)
                {
                    my $arr_25_item = $$pval[$arr_25_idx];
                    # .'$NXOSPlatformModel'.versions.0
                    $res = jm_is_string($arr_25_item) && $arr_25_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $NXOSPlatformModel (.'$NXOSPlatformModel')
sub json_model_27($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$NXOSPlatformModel'
    $res = _jm_obj_25($val, $path, $rep);
    return $res;
}


# object .'$NetBSDPlatformModel'
sub _jm_obj_26($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$NetBSDPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'NetBSD';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$NetBSDPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_26_idx (0 .. $#$pval)
                {
                    my $arr_26_item = $$pval[$arr_26_idx];
                    # .'$NetBSDPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_26_item) && jm_is_string($arr_26_item) && exists $_jm_cst_16{$arr_26_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $NetBSDPlatformModel (.'$NetBSDPlatformModel')
sub json_model_28($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$NetBSDPlatformModel'
    $res = _jm_obj_26($val, $path, $rep);
    return $res;
}


# object .'$OpenBSDPlatformModel'
sub _jm_obj_27($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$OpenBSDPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'OpenBSD';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$OpenBSDPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_27_idx (0 .. $#$pval)
                {
                    my $arr_27_item = $$pval[$arr_27_idx];
                    # .'$OpenBSDPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_27_item) && jm_is_string($arr_27_item) && exists $_jm_cst_17{$arr_27_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $OpenBSDPlatformModel (.'$OpenBSDPlatformModel')
sub json_model_29($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OpenBSDPlatformModel'
    $res = _jm_obj_27($val, $path, $rep);
    return $res;
}


# object .'$OpenWrtPlatformModel'
sub _jm_obj_28($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$OpenWrtPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'OpenWrt';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$OpenWrtPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_28_idx (0 .. $#$pval)
                {
                    my $arr_28_item = $$pval[$arr_28_idx];
                    # .'$OpenWrtPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_28_item) && jm_is_string($arr_28_item) && exists $_jm_cst_18{$arr_28_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $OpenWrtPlatformModel (.'$OpenWrtPlatformModel')
sub json_model_30($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OpenWrtPlatformModel'
    $res = _jm_obj_28($val, $path, $rep);
    return $res;
}


# object .'$OracleLinuxPlatformModel'
sub _jm_obj_29($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$OracleLinuxPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'OracleLinux';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$OracleLinuxPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_29_idx (0 .. $#$pval)
                {
                    my $arr_29_item = $$pval[$arr_29_idx];
                    # .'$OracleLinuxPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_29_item) && jm_is_string($arr_29_item) && exists $_jm_cst_19{$arr_29_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $OracleLinuxPlatformModel (.'$OracleLinuxPlatformModel')
sub json_model_31($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OracleLinuxPlatformModel'
    $res = _jm_obj_29($val, $path, $rep);
    return $res;
}


# object .'$PAN-OSPlatformModel'
sub _jm_obj_30($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$PAN-OSPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'PAN-OS';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$PAN-OSPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_30_idx (0 .. $#$pval)
                {
                    my $arr_30_item = $$pval[$arr_30_idx];
                    # .'$PAN-OSPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_30_item) && jm_is_string($arr_30_item) && exists $_jm_cst_20{$arr_30_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $PAN-OSPlatformModel (.'$PAN-OSPlatformModel')
sub json_model_32($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PAN-OSPlatformModel'
    $res = _jm_obj_30($val, $path, $rep);
    return $res;
}


# object .'$RockyLinuxPlatformModel'
sub _jm_obj_31($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$RockyLinuxPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Rocky';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$RockyLinuxPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_31_idx (0 .. $#$pval)
                {
                    my $arr_31_item = $$pval[$arr_31_idx];
                    # .'$RockyLinuxPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_31_item) && jm_is_string($arr_31_item) && exists $_jm_cst_21{$arr_31_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $RockyLinuxPlatformModel (.'$RockyLinuxPlatformModel')
sub json_model_33($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$RockyLinuxPlatformModel'
    $res = _jm_obj_31($val, $path, $rep);
    return $res;
}


# object .'$SLESPlatformModel'
sub _jm_obj_32($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$SLESPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'SLES';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$SLESPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_32_idx (0 .. $#$pval)
                {
                    my $arr_32_item = $$pval[$arr_32_idx];
                    # .'$SLESPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_32_item) && jm_is_string($arr_32_item) && exists $_jm_cst_22{$arr_32_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $SLESPlatformModel (.'$SLESPlatformModel')
sub json_model_34($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$SLESPlatformModel'
    $res = _jm_obj_32($val, $path, $rep);
    return $res;
}

# object .'$SmartOSPlatformModel'
sub _jm_obj_33($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$SmartOSPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'SmartOS';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$SmartOSPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_33_idx (0 .. $#$pval)
                {
                    my $arr_33_item = $$pval[$arr_33_idx];
                    # .'$SmartOSPlatformModel'.versions.0
                    $res = jm_is_string($arr_33_item) && $arr_33_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $SmartOSPlatformModel (.'$SmartOSPlatformModel')
sub json_model_35($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$SmartOSPlatformModel'
    $res = _jm_obj_33($val, $path, $rep);
    return $res;
}


# object .'$SolarisPlatformModel'
sub _jm_obj_34($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$SolarisPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Solaris';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$SolarisPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_34_idx (0 .. $#$pval)
                {
                    my $arr_34_item = $$pval[$arr_34_idx];
                    # .'$SolarisPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_34_item) && jm_is_string($arr_34_item) && exists $_jm_cst_23{$arr_34_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $SolarisPlatformModel (.'$SolarisPlatformModel')
sub json_model_36($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$SolarisPlatformModel'
    $res = _jm_obj_34($val, $path, $rep);
    return $res;
}


# object .'$SynologyPlatformModel'
sub _jm_obj_35($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$SynologyPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Synology';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$SynologyPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_35_idx (0 .. $#$pval)
                {
                    my $arr_35_item = $$pval[$arr_35_idx];
                    # .'$SynologyPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_35_item) && jm_is_string($arr_35_item) && exists $_jm_cst_24{$arr_35_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $SynologyPlatformModel (.'$SynologyPlatformModel')
sub json_model_37($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$SynologyPlatformModel'
    $res = _jm_obj_35($val, $path, $rep);
    return $res;
}


# object .'$TMOSPlatformModel'
sub _jm_obj_36($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$TMOSPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'TMOS';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$TMOSPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_36_idx (0 .. $#$pval)
                {
                    my $arr_36_item = $$pval[$arr_36_idx];
                    # .'$TMOSPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_36_item) && jm_is_string($arr_36_item) && exists $_jm_cst_25{$arr_36_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $TMOSPlatformModel (.'$TMOSPlatformModel')
sub json_model_38($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$TMOSPlatformModel'
    $res = _jm_obj_36($val, $path, $rep);
    return $res;
}


# object .'$UbuntuPlatformModel'
sub _jm_obj_37($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$UbuntuPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Ubuntu';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$UbuntuPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_37_idx (0 .. $#$pval)
                {
                    my $arr_37_item = $$pval[$arr_37_idx];
                    # .'$UbuntuPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_37_item) && jm_is_string($arr_37_item) && exists $_jm_cst_26{$arr_37_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $UbuntuPlatformModel (.'$UbuntuPlatformModel')
sub json_model_39($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$UbuntuPlatformModel'
    $res = _jm_obj_37($val, $path, $rep);
    return $res;
}

# object .'$Void_LinuxPlatformModel'
sub _jm_obj_38($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$Void_LinuxPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Void Linux';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$Void_LinuxPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_38_idx (0 .. $#$pval)
                {
                    my $arr_38_item = $$pval[$arr_38_idx];
                    # .'$Void_LinuxPlatformModel'.versions.0
                    $res = jm_is_string($arr_38_item) && $arr_38_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Void_LinuxPlatformModel (.'$Void_LinuxPlatformModel')
sub json_model_40($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Void_LinuxPlatformModel'
    $res = _jm_obj_38($val, $path, $rep);
    return $res;
}


# object .'$WindowsPlatformModel'
sub _jm_obj_39($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$WindowsPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'Windows';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$WindowsPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_39_idx (0 .. $#$pval)
                {
                    my $arr_39_item = $$pval[$arr_39_idx];
                    # .'$WindowsPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_39_item) && jm_is_string($arr_39_item) && exists $_jm_cst_27{$arr_39_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $WindowsPlatformModel (.'$WindowsPlatformModel')
sub json_model_41($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$WindowsPlatformModel'
    $res = _jm_obj_39($val, $path, $rep);
    return $res;
}

# object .'$aosPlatformModel'
sub _jm_obj_40($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$aosPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'aos';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$aosPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_40_idx (0 .. $#$pval)
                {
                    my $arr_40_item = $$pval[$arr_40_idx];
                    # .'$aosPlatformModel'.versions.0
                    $res = jm_is_string($arr_40_item) && $arr_40_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $aosPlatformModel (.'$aosPlatformModel')
sub json_model_42($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$aosPlatformModel'
    $res = _jm_obj_40($val, $path, $rep);
    return $res;
}

# object .'$eosPlatformModel'
sub _jm_obj_41($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$eosPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'eos';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$eosPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_41_idx (0 .. $#$pval)
                {
                    my $arr_41_item = $$pval[$arr_41_idx];
                    # .'$eosPlatformModel'.versions.0
                    $res = jm_is_string($arr_41_item) && $arr_41_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $eosPlatformModel (.'$eosPlatformModel')
sub json_model_43($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$eosPlatformModel'
    $res = _jm_obj_41($val, $path, $rep);
    return $res;
}


# object .'$macOSPlatformModel'
sub _jm_obj_42($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$macOSPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'macOS';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$macOSPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_42_idx (0 .. $#$pval)
                {
                    my $arr_42_item = $$pval[$arr_42_idx];
                    # .'$macOSPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_42_item) && jm_is_string($arr_42_item) && exists $_jm_cst_28{$arr_42_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $macOSPlatformModel (.'$macOSPlatformModel')
sub json_model_44($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$macOSPlatformModel'
    $res = _jm_obj_42($val, $path, $rep);
    return $res;
}


# object .'$opensusePlatformModel'
sub _jm_obj_43($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$opensusePlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'opensuse';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$opensusePlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_43_idx (0 .. $#$pval)
                {
                    my $arr_43_item = $$pval[$arr_43_idx];
                    # .'$opensusePlatformModel'.versions.0
                    $res = jm_is_scalar($arr_43_item) && jm_is_string($arr_43_item) && exists $_jm_cst_29{$arr_43_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $opensusePlatformModel (.'$opensusePlatformModel')
sub json_model_45($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$opensusePlatformModel'
    $res = _jm_obj_43($val, $path, $rep);
    return $res;
}

# object .'$os10PlatformModel'
sub _jm_obj_44($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$os10PlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'os10';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$os10PlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_44_idx (0 .. $#$pval)
                {
                    my $arr_44_item = $$pval[$arr_44_idx];
                    # .'$os10PlatformModel'.versions.0
                    $res = jm_is_string($arr_44_item) && $arr_44_item eq 'all';
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $os10PlatformModel (.'$os10PlatformModel')
sub json_model_46($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$os10PlatformModel'
    $res = _jm_obj_44($val, $path, $rep);
    return $res;
}


# object .'$vCenterPlatformModel'
sub _jm_obj_45($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$vCenterPlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'vCenter';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$vCenterPlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_45_idx (0 .. $#$pval)
                {
                    my $arr_45_item = $$pval[$arr_45_idx];
                    # .'$vCenterPlatformModel'.versions.0
                    $res = jm_is_scalar($arr_45_item) && jm_is_string($arr_45_item) && exists $_jm_cst_30{$arr_45_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $vCenterPlatformModel (.'$vCenterPlatformModel')
sub json_model_47($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$vCenterPlatformModel'
    $res = _jm_obj_45($val, $path, $rep);
    return $res;
}


# object .'$vSpherePlatformModel'
sub _jm_obj_46($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$vSpherePlatformModel'.name
            $res = jm_is_string($pval) && $pval eq 'vSphere';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'versions')
        {
            # handle may versions property
            # .'$vSpherePlatformModel'.versions
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_46_idx (0 .. $#$pval)
                {
                    my $arr_46_item = $$pval[$arr_46_idx];
                    # .'$vSpherePlatformModel'.versions.0
                    $res = jm_is_scalar($arr_46_item) && jm_is_string($arr_46_item) && exists $_jm_cst_31{$arr_46_item};
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $vSpherePlatformModel (.'$vSpherePlatformModel')
sub json_model_48($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$vSpherePlatformModel'
    $res = _jm_obj_46($val, $path, $rep);
    return $res;
}

# check $any_platform (.'$any_platform')
sub json_model_49($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # FIXME: name is not mandatory, not sure it makes much sense… versions should be unique?
    # .'$any_platform'
    # .'$any_platform'.'|'.0
    $res = _jm_obj_0($val, $path, $rep);
    if (! $res)
    {
        # .'$any_platform'.'|'.1
        $res = _jm_obj_1($val, $path, $rep);
        if (! $res)
        {
            # .'$any_platform'.'|'.2
            $res = _jm_obj_3($val, $path, $rep);
            if (! $res)
            {
                # .'$any_platform'.'|'.3
                $res = _jm_obj_2($val, $path, $rep);
                if (! $res)
                {
                    # .'$any_platform'.'|'.4
                    $res = _jm_obj_40($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$any_platform'.'|'.5
                        $res = _jm_obj_4($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$any_platform'.'|'.6
                            $res = _jm_obj_5($val, $path, $rep);
                            if (! $res)
                            {
                                # .'$any_platform'.'|'.7
                                $res = _jm_obj_6($val, $path, $rep);
                                if (! $res)
                                {
                                    # .'$any_platform'.'|'.8
                                    $res = _jm_obj_7($val, $path, $rep);
                                    if (! $res)
                                    {
                                        # .'$any_platform'.'|'.9
                                        $res = _jm_obj_26($val, $path, $rep);
                                        if (! $res)
                                        {
                                            # .'$any_platform'.'|'.10
                                            $res = _jm_obj_8($val, $path, $rep);
                                            if (! $res)
                                            {
                                                # .'$any_platform'.'|'.11
                                                $res = _jm_obj_9($val, $path, $rep);
                                                if (! $res)
                                                {
                                                    # .'$any_platform'.'|'.12
                                                    $res = _jm_obj_10($val, $path, $rep);
                                                    if (! $res)
                                                    {
                                                        # .'$any_platform'.'|'.13
                                                        $res = _jm_obj_11($val, $path, $rep);
                                                        if (! $res)
                                                        {
                                                            # .'$any_platform'.'|'.14
                                                            $res = _jm_obj_12($val, $path, $rep);
                                                            if (! $res)
                                                            {
                                                                # .'$any_platform'.'|'.15
                                                                $res = _jm_obj_41($val, $path, $rep);
                                                                if (! $res)
                                                                {
                                                                    # .'$any_platform'.'|'.16
                                                                    $res = _jm_obj_13($val, $path, $rep);
                                                                    if (! $res)
                                                                    {
                                                                        # .'$any_platform'.'|'.17
                                                                        $res = _jm_obj_14($val, $path, $rep);
                                                                        if (! $res)
                                                                        {
                                                                            # .'$any_platform'.'|'.18
                                                                            $res = _jm_obj_15($val, $path, $rep);
                                                                            if (! $res)
                                                                            {
                                                                                # .'$any_platform'.'|'.19
                                                                                $res = _jm_obj_16($val, $path, $rep);
                                                                                if (! $res)
                                                                                {
                                                                                    # .'$any_platform'.'|'.20
                                                                                    $res = _jm_obj_17($val, $path, $rep);
                                                                                    if (! $res)
                                                                                    {
                                                                                        # .'$any_platform'.'|'.21
                                                                                        $res = _jm_obj_18($val, $path, $rep);
                                                                                        if (! $res)
                                                                                        {
                                                                                            # .'$any_platform'.'|'.22
                                                                                            $res = _jm_obj_19($val, $path, $rep);
                                                                                            if (! $res)
                                                                                            {
                                                                                                # .'$any_platform'.'|'.23
                                                                                                $res = _jm_obj_20($val, $path, $rep);
                                                                                                if (! $res)
                                                                                                {
                                                                                                    # .'$any_platform'.'|'.24
                                                                                                    $res = _jm_obj_21($val, $path, $rep);
                                                                                                    if (! $res)
                                                                                                    {
                                                                                                        # .'$any_platform'.'|'.25
                                                                                                        $res = _jm_obj_22($val, $path, $rep);
                                                                                                        if (! $res)
                                                                                                        {
                                                                                                            # .'$any_platform'.'|'.26
                                                                                                            $res = _jm_obj_42($val, $path, $rep);
                                                                                                            if (! $res)
                                                                                                            {
                                                                                                                # .'$any_platform'.'|'.27
                                                                                                                $res = _jm_obj_23($val, $path, $rep);
                                                                                                                if (! $res)
                                                                                                                {
                                                                                                                    # .'$any_platform'.'|'.28
                                                                                                                    $res = _jm_obj_24($val, $path, $rep);
                                                                                                                    if (! $res)
                                                                                                                    {
                                                                                                                        # .'$any_platform'.'|'.29
                                                                                                                        $res = _jm_obj_25($val, $path, $rep);
                                                                                                                        if (! $res)
                                                                                                                        {
                                                                                                                            # .'$any_platform'.'|'.30
                                                                                                                            $res = _jm_obj_27($val, $path, $rep);
                                                                                                                            if (! $res)
                                                                                                                            {
                                                                                                                                # .'$any_platform'.'|'.31
                                                                                                                                $res = _jm_obj_43($val, $path, $rep);
                                                                                                                                if (! $res)
                                                                                                                                {
                                                                                                                                    # .'$any_platform'.'|'.32
                                                                                                                                    $res = _jm_obj_28($val, $path, $rep);
                                                                                                                                    if (! $res)
                                                                                                                                    {
                                                                                                                                        # .'$any_platform'.'|'.33
                                                                                                                                        $res = _jm_obj_29($val, $path, $rep);
                                                                                                                                        if (! $res)
                                                                                                                                        {
                                                                                                                                            # .'$any_platform'.'|'.34
                                                                                                                                            $res = _jm_obj_44($val, $path, $rep);
                                                                                                                                            if (! $res)
                                                                                                                                            {
                                                                                                                                                # .'$any_platform'.'|'.35
                                                                                                                                                $res = _jm_obj_30($val, $path, $rep);
                                                                                                                                                if (! $res)
                                                                                                                                                {
                                                                                                                                                    # .'$any_platform'.'|'.36
                                                                                                                                                    $res = _jm_obj_31($val, $path, $rep);
                                                                                                                                                    if (! $res)
                                                                                                                                                    {
                                                                                                                                                        # .'$any_platform'.'|'.37
                                                                                                                                                        $res = _jm_obj_32($val, $path, $rep);
                                                                                                                                                        if (! $res)
                                                                                                                                                        {
                                                                                                                                                            # .'$any_platform'.'|'.38
                                                                                                                                                            $res = _jm_obj_33($val, $path, $rep);
                                                                                                                                                            if (! $res)
                                                                                                                                                            {
                                                                                                                                                                # .'$any_platform'.'|'.39
                                                                                                                                                                $res = _jm_obj_34($val, $path, $rep);
                                                                                                                                                                if (! $res)
                                                                                                                                                                {
                                                                                                                                                                    # .'$any_platform'.'|'.40
                                                                                                                                                                    $res = _jm_obj_35($val, $path, $rep);
                                                                                                                                                                    if (! $res)
                                                                                                                                                                    {
                                                                                                                                                                        # .'$any_platform'.'|'.41
                                                                                                                                                                        $res = _jm_obj_36($val, $path, $rep);
                                                                                                                                                                        if (! $res)
                                                                                                                                                                        {
                                                                                                                                                                            # .'$any_platform'.'|'.42
                                                                                                                                                                            $res = _jm_obj_37($val, $path, $rep);
                                                                                                                                                                            if (! $res)
                                                                                                                                                                            {
                                                                                                                                                                                # .'$any_platform'.'|'.43
                                                                                                                                                                                $res = _jm_obj_45($val, $path, $rep);
                                                                                                                                                                                if (! $res)
                                                                                                                                                                                {
                                                                                                                                                                                    # .'$any_platform'.'|'.44
                                                                                                                                                                                    $res = _jm_obj_38($val, $path, $rep);
                                                                                                                                                                                    if (! $res)
                                                                                                                                                                                    {
                                                                                                                                                                                        # .'$any_platform'.'|'.45
                                                                                                                                                                                        $res = _jm_obj_46($val, $path, $rep);
                                                                                                                                                                                        if (! $res)
                                                                                                                                                                                        {
                                                                                                                                                                                            # .'$any_platform'.'|'.46
                                                                                                                                                                                            $res = _jm_obj_39($val, $path, $rep);
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}


# object .'$platforms'.0.'|'.46
sub _jm_obj_47($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.46.name
        $res = jm_is_string($pval) && $pval eq 'Windows';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.46.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_48_idx (0 .. $#$pval)
            {
                my $arr_48_item = $$pval[$arr_48_idx];
                # .'$platforms'.0.'|'.46.versions.0
                $res = jm_is_scalar($arr_48_item) && jm_is_string($arr_48_item) && exists $_jm_cst_32{$arr_48_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.45
sub _jm_obj_48($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.45.name
        $res = jm_is_string($pval) && $pval eq 'vSphere';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.45.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_49_idx (0 .. $#$pval)
            {
                my $arr_49_item = $$pval[$arr_49_idx];
                # .'$platforms'.0.'|'.45.versions.0
                $res = jm_is_scalar($arr_49_item) && jm_is_string($arr_49_item) && exists $_jm_cst_33{$arr_49_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.44
sub _jm_obj_49($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.44.name
        $res = jm_is_string($pval) && $pval eq 'Void Linux';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.44.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_50_idx (0 .. $#$pval)
            {
                my $arr_50_item = $$pval[$arr_50_idx];
                # .'$platforms'.0.'|'.44.versions.0
                $res = jm_is_string($arr_50_item) && $arr_50_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.43
sub _jm_obj_50($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.43.name
        $res = jm_is_string($pval) && $pval eq 'vCenter';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.43.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_51_idx (0 .. $#$pval)
            {
                my $arr_51_item = $$pval[$arr_51_idx];
                # .'$platforms'.0.'|'.43.versions.0
                $res = jm_is_scalar($arr_51_item) && jm_is_string($arr_51_item) && exists $_jm_cst_34{$arr_51_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.42
sub _jm_obj_51($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.42.name
        $res = jm_is_string($pval) && $pval eq 'Ubuntu';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.42.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_52_idx (0 .. $#$pval)
            {
                my $arr_52_item = $$pval[$arr_52_idx];
                # .'$platforms'.0.'|'.42.versions.0
                $res = jm_is_scalar($arr_52_item) && jm_is_string($arr_52_item) && exists $_jm_cst_35{$arr_52_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.41
sub _jm_obj_52($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.41.name
        $res = jm_is_string($pval) && $pval eq 'TMOS';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.41.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_53_idx (0 .. $#$pval)
            {
                my $arr_53_item = $$pval[$arr_53_idx];
                # .'$platforms'.0.'|'.41.versions.0
                $res = jm_is_scalar($arr_53_item) && jm_is_string($arr_53_item) && exists $_jm_cst_36{$arr_53_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.40
sub _jm_obj_53($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.40.name
        $res = jm_is_string($pval) && $pval eq 'Synology';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.40.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_54_idx (0 .. $#$pval)
            {
                my $arr_54_item = $$pval[$arr_54_idx];
                # .'$platforms'.0.'|'.40.versions.0
                $res = jm_is_scalar($arr_54_item) && jm_is_string($arr_54_item) && exists $_jm_cst_37{$arr_54_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.39
sub _jm_obj_54($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.39.name
        $res = jm_is_string($pval) && $pval eq 'Solaris';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.39.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_55_idx (0 .. $#$pval)
            {
                my $arr_55_item = $$pval[$arr_55_idx];
                # .'$platforms'.0.'|'.39.versions.0
                $res = jm_is_scalar($arr_55_item) && jm_is_string($arr_55_item) && exists $_jm_cst_38{$arr_55_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.38
sub _jm_obj_55($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.38.name
        $res = jm_is_string($pval) && $pval eq 'SmartOS';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.38.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_56_idx (0 .. $#$pval)
            {
                my $arr_56_item = $$pval[$arr_56_idx];
                # .'$platforms'.0.'|'.38.versions.0
                $res = jm_is_string($arr_56_item) && $arr_56_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.37
sub _jm_obj_56($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.37.name
        $res = jm_is_string($pval) && $pval eq 'SLES';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.37.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_57_idx (0 .. $#$pval)
            {
                my $arr_57_item = $$pval[$arr_57_idx];
                # .'$platforms'.0.'|'.37.versions.0
                $res = jm_is_scalar($arr_57_item) && jm_is_string($arr_57_item) && exists $_jm_cst_39{$arr_57_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.36
sub _jm_obj_57($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.36.name
        $res = jm_is_string($pval) && $pval eq 'Rocky';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.36.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_58_idx (0 .. $#$pval)
            {
                my $arr_58_item = $$pval[$arr_58_idx];
                # .'$platforms'.0.'|'.36.versions.0
                $res = jm_is_scalar($arr_58_item) && jm_is_string($arr_58_item) && exists $_jm_cst_40{$arr_58_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.35
sub _jm_obj_58($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.35.name
        $res = jm_is_string($pval) && $pval eq 'PAN-OS';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.35.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_59_idx (0 .. $#$pval)
            {
                my $arr_59_item = $$pval[$arr_59_idx];
                # .'$platforms'.0.'|'.35.versions.0
                $res = jm_is_scalar($arr_59_item) && jm_is_string($arr_59_item) && exists $_jm_cst_41{$arr_59_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.34
sub _jm_obj_59($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.34.name
        $res = jm_is_string($pval) && $pval eq 'os10';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.34.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_60_idx (0 .. $#$pval)
            {
                my $arr_60_item = $$pval[$arr_60_idx];
                # .'$platforms'.0.'|'.34.versions.0
                $res = jm_is_string($arr_60_item) && $arr_60_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.33
sub _jm_obj_60($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.33.name
        $res = jm_is_string($pval) && $pval eq 'OracleLinux';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.33.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_61_idx (0 .. $#$pval)
            {
                my $arr_61_item = $$pval[$arr_61_idx];
                # .'$platforms'.0.'|'.33.versions.0
                $res = jm_is_scalar($arr_61_item) && jm_is_string($arr_61_item) && exists $_jm_cst_42{$arr_61_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.32
sub _jm_obj_61($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.32.name
        $res = jm_is_string($pval) && $pval eq 'OpenWrt';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.32.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_62_idx (0 .. $#$pval)
            {
                my $arr_62_item = $$pval[$arr_62_idx];
                # .'$platforms'.0.'|'.32.versions.0
                $res = jm_is_scalar($arr_62_item) && jm_is_string($arr_62_item) && exists $_jm_cst_43{$arr_62_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.31
sub _jm_obj_62($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.31.name
        $res = jm_is_string($pval) && $pval eq 'opensuse';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.31.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_63_idx (0 .. $#$pval)
            {
                my $arr_63_item = $$pval[$arr_63_idx];
                # .'$platforms'.0.'|'.31.versions.0
                $res = jm_is_scalar($arr_63_item) && jm_is_string($arr_63_item) && exists $_jm_cst_44{$arr_63_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.30
sub _jm_obj_63($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.30.name
        $res = jm_is_string($pval) && $pval eq 'OpenBSD';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.30.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_64_idx (0 .. $#$pval)
            {
                my $arr_64_item = $$pval[$arr_64_idx];
                # .'$platforms'.0.'|'.30.versions.0
                $res = jm_is_scalar($arr_64_item) && jm_is_string($arr_64_item) && exists $_jm_cst_45{$arr_64_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.29
sub _jm_obj_64($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.29.name
        $res = jm_is_string($pval) && $pval eq 'NXOS';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.29.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_65_idx (0 .. $#$pval)
            {
                my $arr_65_item = $$pval[$arr_65_idx];
                # .'$platforms'.0.'|'.29.versions.0
                $res = jm_is_string($arr_65_item) && $arr_65_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.28
sub _jm_obj_65($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.28.name
        $res = jm_is_string($pval) && $pval eq 'Megeia';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.28.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_66_idx (0 .. $#$pval)
            {
                my $arr_66_item = $$pval[$arr_66_idx];
                # .'$platforms'.0.'|'.28.versions.0
                $res = jm_is_scalar($arr_66_item) && jm_is_string($arr_66_item) && exists $_jm_cst_46{$arr_66_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.27
sub _jm_obj_66($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.27.name
        $res = jm_is_string($pval) && $pval eq 'Kali';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.27.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_67_idx (0 .. $#$pval)
            {
                my $arr_67_item = $$pval[$arr_67_idx];
                # .'$platforms'.0.'|'.27.versions.0
                $res = jm_is_scalar($arr_67_item) && jm_is_string($arr_67_item) && exists $_jm_cst_47{$arr_67_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.26
sub _jm_obj_67($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.26.name
        $res = jm_is_string($pval) && $pval eq 'macOS';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.26.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_68_idx (0 .. $#$pval)
            {
                my $arr_68_item = $$pval[$arr_68_idx];
                # .'$platforms'.0.'|'.26.versions.0
                $res = jm_is_scalar($arr_68_item) && jm_is_string($arr_68_item) && exists $_jm_cst_48{$arr_68_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.25
sub _jm_obj_68($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.25.name
        $res = jm_is_string($pval) && $pval eq 'Kali';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.25.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_69_idx (0 .. $#$pval)
            {
                my $arr_69_item = $$pval[$arr_69_idx];
                # .'$platforms'.0.'|'.25.versions.0
                $res = jm_is_scalar($arr_69_item) && jm_is_string($arr_69_item) && exists $_jm_cst_49{$arr_69_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.24
sub _jm_obj_69($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.24.name
        $res = jm_is_string($pval) && $pval eq 'Junos';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.24.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_70_idx (0 .. $#$pval)
            {
                my $arr_70_item = $$pval[$arr_70_idx];
                # .'$platforms'.0.'|'.24.versions.0
                $res = jm_is_string($arr_70_item) && $arr_70_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.23
sub _jm_obj_70($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.23.name
        $res = jm_is_string($pval) && $pval eq 'IOS';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.23.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_71_idx (0 .. $#$pval)
            {
                my $arr_71_item = $$pval[$arr_71_idx];
                # .'$platforms'.0.'|'.23.versions.0
                $res = jm_is_string($arr_71_item) && $arr_71_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.22
sub _jm_obj_71($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.22.name
        $res = jm_is_string($pval) && $pval eq 'HardenedBSD';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.22.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_72_idx (0 .. $#$pval)
            {
                my $arr_72_item = $$pval[$arr_72_idx];
                # .'$platforms'.0.'|'.22.versions.0
                $res = jm_is_scalar($arr_72_item) && jm_is_string($arr_72_item) && exists $_jm_cst_50{$arr_72_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.21
sub _jm_obj_72($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.21.name
        $res = jm_is_string($pval) && $pval eq 'Gentoo';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.21.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_73_idx (0 .. $#$pval)
            {
                my $arr_73_item = $$pval[$arr_73_idx];
                # .'$platforms'.0.'|'.21.versions.0
                $res = jm_is_string($arr_73_item) && $arr_73_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.20
sub _jm_obj_73($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.20.name
        $res = jm_is_string($pval) && $pval eq 'GenericUNIX';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.20.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_74_idx (0 .. $#$pval)
            {
                my $arr_74_item = $$pval[$arr_74_idx];
                # .'$platforms'.0.'|'.20.versions.0
                $res = jm_is_string($arr_74_item) && $arr_74_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.19
sub _jm_obj_74($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.19.name
        $res = jm_is_string($pval) && $pval eq 'GenericLinux';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.19.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_75_idx (0 .. $#$pval)
            {
                my $arr_75_item = $$pval[$arr_75_idx];
                # .'$platforms'.0.'|'.19.versions.0
                $res = jm_is_string($arr_75_item) && $arr_75_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.18
sub _jm_obj_75($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.18.name
        $res = jm_is_string($pval) && $pval eq 'GenericBSD';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.18.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_76_idx (0 .. $#$pval)
            {
                my $arr_76_item = $$pval[$arr_76_idx];
                # .'$platforms'.0.'|'.18.versions.0
                $res = jm_is_string($arr_76_item) && $arr_76_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.17
sub _jm_obj_76($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.17.name
        $res = jm_is_string($pval) && $pval eq 'FreeBSD';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.17.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_77_idx (0 .. $#$pval)
            {
                my $arr_77_item = $$pval[$arr_77_idx];
                # .'$platforms'.0.'|'.17.versions.0
                $res = jm_is_scalar($arr_77_item) && jm_is_string($arr_77_item) && exists $_jm_cst_51{$arr_77_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.16
sub _jm_obj_77($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.16.name
        $res = jm_is_string($pval) && $pval eq 'Fedora';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.16.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_78_idx (0 .. $#$pval)
            {
                my $arr_78_item = $$pval[$arr_78_idx];
                # .'$platforms'.0.'|'.16.versions.0
                $res = jm_is_scalar($arr_78_item) && jm_is_string($arr_78_item) && exists $_jm_cst_52{$arr_78_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.15
sub _jm_obj_78($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.15.name
        $res = jm_is_string($pval) && $pval eq 'eos';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.15.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_79_idx (0 .. $#$pval)
            {
                my $arr_79_item = $$pval[$arr_79_idx];
                # .'$platforms'.0.'|'.15.versions.0
                $res = jm_is_string($arr_79_item) && $arr_79_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.14
sub _jm_obj_79($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.14.name
        $res = jm_is_string($pval) && $pval eq 'EL';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.14.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_80_idx (0 .. $#$pval)
            {
                my $arr_80_item = $$pval[$arr_80_idx];
                # .'$platforms'.0.'|'.14.versions.0
                $res = jm_is_scalar($arr_80_item) && jm_is_string($arr_80_item) && exists $_jm_cst_53{$arr_80_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.13
sub _jm_obj_80($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.13.name
        $res = jm_is_string($pval) && $pval eq 'DragonFlyBSD';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.13.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_81_idx (0 .. $#$pval)
            {
                my $arr_81_item = $$pval[$arr_81_idx];
                # .'$platforms'.0.'|'.13.versions.0
                $res = jm_is_scalar($arr_81_item) && jm_is_string($arr_81_item) && exists $_jm_cst_54{$arr_81_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.12
sub _jm_obj_81($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.12.name
        $res = jm_is_string($pval) && $pval eq 'Devuan';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.12.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_82_idx (0 .. $#$pval)
            {
                my $arr_82_item = $$pval[$arr_82_idx];
                # .'$platforms'.0.'|'.12.versions.0
                $res = jm_is_scalar($arr_82_item) && jm_is_string($arr_82_item) && exists $_jm_cst_55{$arr_82_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.11
sub _jm_obj_82($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.11.name
        $res = jm_is_string($pval) && $pval eq 'DellOS';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.11.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_83_idx (0 .. $#$pval)
            {
                my $arr_83_item = $$pval[$arr_83_idx];
                # .'$platforms'.0.'|'.11.versions.0
                $res = jm_is_scalar($arr_83_item) && jm_is_string($arr_83_item) && exists $_jm_cst_56{$arr_83_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.10
sub _jm_obj_83($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.10.name
        $res = jm_is_string($pval) && $pval eq 'Debian';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.10.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_84_idx (0 .. $#$pval)
            {
                my $arr_84_item = $$pval[$arr_84_idx];
                # .'$platforms'.0.'|'.10.versions.0
                $res = jm_is_scalar($arr_84_item) && jm_is_string($arr_84_item) && exists $_jm_cst_57{$arr_84_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.9
sub _jm_obj_84($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.9.name
        $res = jm_is_string($pval) && $pval eq 'NetBSD';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.9.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_85_idx (0 .. $#$pval)
            {
                my $arr_85_item = $$pval[$arr_85_idx];
                # .'$platforms'.0.'|'.9.versions.0
                $res = jm_is_scalar($arr_85_item) && jm_is_string($arr_85_item) && exists $_jm_cst_58{$arr_85_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.8
sub _jm_obj_85($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.8.name
        $res = jm_is_string($pval) && $pval eq 'Cumulus';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.8.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_86_idx (0 .. $#$pval)
            {
                my $arr_86_item = $$pval[$arr_86_idx];
                # .'$platforms'.0.'|'.8.versions.0
                $res = jm_is_scalar($arr_86_item) && jm_is_string($arr_86_item) && exists $_jm_cst_59{$arr_86_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.7
sub _jm_obj_86($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.7.name
        $res = jm_is_string($pval) && $pval eq 'ClearLinux';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.7.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_87_idx (0 .. $#$pval)
            {
                my $arr_87_item = $$pval[$arr_87_idx];
                # .'$platforms'.0.'|'.7.versions.0
                $res = jm_is_string($arr_87_item) && $arr_87_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.6
sub _jm_obj_87($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.6.name
        $res = jm_is_string($pval) && $pval eq 'Astra Linux';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.6.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_88_idx (0 .. $#$pval)
            {
                my $arr_88_item = $$pval[$arr_88_idx];
                # .'$platforms'.0.'|'.6.versions.0
                $res = jm_is_scalar($arr_88_item) && jm_is_string($arr_88_item) && exists $_jm_cst_60{$arr_88_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.5
sub _jm_obj_88($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.5.name
        $res = jm_is_string($pval) && $pval eq 'ArchLinux';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.5.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_89_idx (0 .. $#$pval)
            {
                my $arr_89_item = $$pval[$arr_89_idx];
                # .'$platforms'.0.'|'.5.versions.0
                $res = jm_is_string($arr_89_item) && $arr_89_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.4
sub _jm_obj_89($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.4.name
        $res = jm_is_string($pval) && $pval eq 'aos';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.4.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_90_idx (0 .. $#$pval)
            {
                my $arr_90_item = $$pval[$arr_90_idx];
                # .'$platforms'.0.'|'.4.versions.0
                $res = jm_is_string($arr_90_item) && $arr_90_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.3
sub _jm_obj_90($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.3.name
        $res = jm_is_string($pval) && $pval eq 'Amazon Linux';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.3.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_91_idx (0 .. $#$pval)
            {
                my $arr_91_item = $$pval[$arr_91_idx];
                # .'$platforms'.0.'|'.3.versions.0
                $res = jm_is_scalar($arr_91_item) && jm_is_string($arr_91_item) && exists $_jm_cst_61{$arr_91_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.2
sub _jm_obj_91($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.2.name
        $res = jm_is_string($pval) && $pval eq 'Amazon';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.2.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_92_idx (0 .. $#$pval)
            {
                my $arr_92_item = $$pval[$arr_92_idx];
                # .'$platforms'.0.'|'.2.versions.0
                $res = jm_is_scalar($arr_92_item) && jm_is_string($arr_92_item) && exists $_jm_cst_62{$arr_92_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$platforms'.0.'|'.1
sub _jm_obj_92($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.1.name
        $res = jm_is_string($pval) && $pval eq 'Alpine';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.1.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_93_idx (0 .. $#$pval)
            {
                my $arr_93_item = $$pval[$arr_93_idx];
                # .'$platforms'.0.'|'.1.versions.0
                $res = jm_is_string($arr_93_item) && $arr_93_item eq 'all';
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# object .'$platforms'.0.'|'.0
sub _jm_obj_93($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'name'})
    {
        $pval = $$val{'name'};
        # .'$platforms'.0.'|'.0.name
        $res = jm_is_string($pval) && $pval eq 'AIX';
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'versions'})
    {
        $pval = $$val{'versions'};
        # .'$platforms'.0.'|'.0.versions
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_94_idx (0 .. $#$pval)
            {
                my $arr_94_item = $$pval[$arr_94_idx];
                # .'$platforms'.0.'|'.0.versions.0
                $res = jm_is_scalar($arr_94_item) && jm_is_string($arr_94_item) && exists $_jm_cst_63{$arr_94_item};
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $platforms (.'$platforms')
sub json_model_50($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$platforms'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_47_idx (0 .. $#$val)
        {
            my $arr_47_item = $$val[$arr_47_idx];
            # .'$platforms'.0
            $res = jm_is_object($arr_47_item);
            if ($res)
            {
                # .'$platforms'.0.'|'.0
                $res = _jm_obj_93($arr_47_item, undef, $rep);
                if (! $res)
                {
                    # .'$platforms'.0.'|'.1
                    $res = _jm_obj_92($arr_47_item, undef, $rep);
                    if (! $res)
                    {
                        # .'$platforms'.0.'|'.2
                        $res = _jm_obj_91($arr_47_item, undef, $rep);
                        if (! $res)
                        {
                            # .'$platforms'.0.'|'.3
                            $res = _jm_obj_90($arr_47_item, undef, $rep);
                            if (! $res)
                            {
                                # .'$platforms'.0.'|'.4
                                $res = _jm_obj_89($arr_47_item, undef, $rep);
                                if (! $res)
                                {
                                    # .'$platforms'.0.'|'.5
                                    $res = _jm_obj_88($arr_47_item, undef, $rep);
                                    if (! $res)
                                    {
                                        # .'$platforms'.0.'|'.6
                                        $res = _jm_obj_87($arr_47_item, undef, $rep);
                                        if (! $res)
                                        {
                                            # .'$platforms'.0.'|'.7
                                            $res = _jm_obj_86($arr_47_item, undef, $rep);
                                            if (! $res)
                                            {
                                                # .'$platforms'.0.'|'.8
                                                $res = _jm_obj_85($arr_47_item, undef, $rep);
                                                if (! $res)
                                                {
                                                    # .'$platforms'.0.'|'.9
                                                    $res = _jm_obj_84($arr_47_item, undef, $rep);
                                                    if (! $res)
                                                    {
                                                        # .'$platforms'.0.'|'.10
                                                        $res = _jm_obj_83($arr_47_item, undef, $rep);
                                                        if (! $res)
                                                        {
                                                            # .'$platforms'.0.'|'.11
                                                            $res = _jm_obj_82($arr_47_item, undef, $rep);
                                                            if (! $res)
                                                            {
                                                                # .'$platforms'.0.'|'.12
                                                                $res = _jm_obj_81($arr_47_item, undef, $rep);
                                                                if (! $res)
                                                                {
                                                                    # .'$platforms'.0.'|'.13
                                                                    $res = _jm_obj_80($arr_47_item, undef, $rep);
                                                                    if (! $res)
                                                                    {
                                                                        # .'$platforms'.0.'|'.14
                                                                        $res = _jm_obj_79($arr_47_item, undef, $rep);
                                                                        if (! $res)
                                                                        {
                                                                            # .'$platforms'.0.'|'.15
                                                                            $res = _jm_obj_78($arr_47_item, undef, $rep);
                                                                            if (! $res)
                                                                            {
                                                                                # .'$platforms'.0.'|'.16
                                                                                $res = _jm_obj_77($arr_47_item, undef, $rep);
                                                                                if (! $res)
                                                                                {
                                                                                    # .'$platforms'.0.'|'.17
                                                                                    $res = _jm_obj_76($arr_47_item, undef, $rep);
                                                                                    if (! $res)
                                                                                    {
                                                                                        # .'$platforms'.0.'|'.18
                                                                                        $res = _jm_obj_75($arr_47_item, undef, $rep);
                                                                                        if (! $res)
                                                                                        {
                                                                                            # .'$platforms'.0.'|'.19
                                                                                            $res = _jm_obj_74($arr_47_item, undef, $rep);
                                                                                            if (! $res)
                                                                                            {
                                                                                                # .'$platforms'.0.'|'.20
                                                                                                $res = _jm_obj_73($arr_47_item, undef, $rep);
                                                                                                if (! $res)
                                                                                                {
                                                                                                    # .'$platforms'.0.'|'.21
                                                                                                    $res = _jm_obj_72($arr_47_item, undef, $rep);
                                                                                                    if (! $res)
                                                                                                    {
                                                                                                        # .'$platforms'.0.'|'.22
                                                                                                        $res = _jm_obj_71($arr_47_item, undef, $rep);
                                                                                                        if (! $res)
                                                                                                        {
                                                                                                            # .'$platforms'.0.'|'.23
                                                                                                            $res = _jm_obj_70($arr_47_item, undef, $rep);
                                                                                                            if (! $res)
                                                                                                            {
                                                                                                                # .'$platforms'.0.'|'.24
                                                                                                                $res = _jm_obj_69($arr_47_item, undef, $rep);
                                                                                                                if (! $res)
                                                                                                                {
                                                                                                                    # .'$platforms'.0.'|'.25
                                                                                                                    $res = _jm_obj_68($arr_47_item, undef, $rep);
                                                                                                                    if (! $res)
                                                                                                                    {
                                                                                                                        # .'$platforms'.0.'|'.26
                                                                                                                        $res = _jm_obj_67($arr_47_item, undef, $rep);
                                                                                                                        if (! $res)
                                                                                                                        {
                                                                                                                            # .'$platforms'.0.'|'.27
                                                                                                                            $res = _jm_obj_66($arr_47_item, undef, $rep);
                                                                                                                            if (! $res)
                                                                                                                            {
                                                                                                                                # .'$platforms'.0.'|'.28
                                                                                                                                $res = _jm_obj_65($arr_47_item, undef, $rep);
                                                                                                                                if (! $res)
                                                                                                                                {
                                                                                                                                    # .'$platforms'.0.'|'.29
                                                                                                                                    $res = _jm_obj_64($arr_47_item, undef, $rep);
                                                                                                                                    if (! $res)
                                                                                                                                    {
                                                                                                                                        # .'$platforms'.0.'|'.30
                                                                                                                                        $res = _jm_obj_63($arr_47_item, undef, $rep);
                                                                                                                                        if (! $res)
                                                                                                                                        {
                                                                                                                                            # .'$platforms'.0.'|'.31
                                                                                                                                            $res = _jm_obj_62($arr_47_item, undef, $rep);
                                                                                                                                            if (! $res)
                                                                                                                                            {
                                                                                                                                                # .'$platforms'.0.'|'.32
                                                                                                                                                $res = _jm_obj_61($arr_47_item, undef, $rep);
                                                                                                                                                if (! $res)
                                                                                                                                                {
                                                                                                                                                    # .'$platforms'.0.'|'.33
                                                                                                                                                    $res = _jm_obj_60($arr_47_item, undef, $rep);
                                                                                                                                                    if (! $res)
                                                                                                                                                    {
                                                                                                                                                        # .'$platforms'.0.'|'.34
                                                                                                                                                        $res = _jm_obj_59($arr_47_item, undef, $rep);
                                                                                                                                                        if (! $res)
                                                                                                                                                        {
                                                                                                                                                            # .'$platforms'.0.'|'.35
                                                                                                                                                            $res = _jm_obj_58($arr_47_item, undef, $rep);
                                                                                                                                                            if (! $res)
                                                                                                                                                            {
                                                                                                                                                                # .'$platforms'.0.'|'.36
                                                                                                                                                                $res = _jm_obj_57($arr_47_item, undef, $rep);
                                                                                                                                                                if (! $res)
                                                                                                                                                                {
                                                                                                                                                                    # .'$platforms'.0.'|'.37
                                                                                                                                                                    $res = _jm_obj_56($arr_47_item, undef, $rep);
                                                                                                                                                                    if (! $res)
                                                                                                                                                                    {
                                                                                                                                                                        # .'$platforms'.0.'|'.38
                                                                                                                                                                        $res = _jm_obj_55($arr_47_item, undef, $rep);
                                                                                                                                                                        if (! $res)
                                                                                                                                                                        {
                                                                                                                                                                            # .'$platforms'.0.'|'.39
                                                                                                                                                                            $res = _jm_obj_54($arr_47_item, undef, $rep);
                                                                                                                                                                            if (! $res)
                                                                                                                                                                            {
                                                                                                                                                                                # .'$platforms'.0.'|'.40
                                                                                                                                                                                $res = _jm_obj_53($arr_47_item, undef, $rep);
                                                                                                                                                                                if (! $res)
                                                                                                                                                                                {
                                                                                                                                                                                    # .'$platforms'.0.'|'.41
                                                                                                                                                                                    $res = _jm_obj_52($arr_47_item, undef, $rep);
                                                                                                                                                                                    if (! $res)
                                                                                                                                                                                    {
                                                                                                                                                                                        # .'$platforms'.0.'|'.42
                                                                                                                                                                                        $res = _jm_obj_51($arr_47_item, undef, $rep);
                                                                                                                                                                                        if (! $res)
                                                                                                                                                                                        {
                                                                                                                                                                                            # .'$platforms'.0.'|'.43
                                                                                                                                                                                            $res = _jm_obj_50($arr_47_item, undef, $rep);
                                                                                                                                                                                            if (! $res)
                                                                                                                                                                                            {
                                                                                                                                                                                                # .'$platforms'.0.'|'.44
                                                                                                                                                                                                $res = _jm_obj_49($arr_47_item, undef, $rep);
                                                                                                                                                                                                if (! $res)
                                                                                                                                                                                                {
                                                                                                                                                                                                    # .'$platforms'.0.'|'.45
                                                                                                                                                                                                    $res = _jm_obj_48($arr_47_item, undef, $rep);
                                                                                                                                                                                                    if (! $res)
                                                                                                                                                                                                    {
                                                                                                                                                                                                        # .'$platforms'.0.'|'.46
                                                                                                                                                                                                        $res = _jm_obj_47($arr_47_item, undef, $rep);
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_94_map_cloud_platforms (.'$GalaxyInfoModelCollection'.cloud_platforms)
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelCollection'.cloud_platforms
    $res = 1;
    return $res;
}

# check _jm_obj_94_map_galaxy_tags (.'$GalaxyInfoModelCollection'.galaxy_tags)
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelCollection'.galaxy_tags
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_95_idx (0 .. $#$val)
        {
            my $arr_95_item = $$val[$arr_95_idx];
            # .'$GalaxyInfoModelCollection'.galaxy_tags.0
            $res = jm_is_string($arr_95_item);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_94_map_min_ansible_version (.'$GalaxyInfoModelCollection'.min_ansible_version)
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelCollection'.min_ansible_version
    $res = jm_is_string($val);
    return $res;
}

sub _jm_re_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[a-z][-a-z0-9_]+$/;
    return $res;
}

# check _jm_obj_94_map_namespace (.'$GalaxyInfoModelCollection'.namespace)
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelCollection'.namespace
    # "/^[a-z][-a-z0-9_]+$/"
    $res = jm_is_string($val) && _jm_re_0($val, $path, $rep);
    return $res;
}

# check _jm_obj_94_map_platforms (.'$GalaxyInfoModelCollection'.platforms)
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelCollection'.platforms
    $res = json_model_50($val, $path, $rep);
    return $res;
}

sub _jm_re_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[a-z][a-z0-9_]+$/;
    return $res;
}

# check _jm_obj_94_map_role_name (.'$GalaxyInfoModelCollection'.role_name)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelCollection'.role_name
    # "/^[a-z][a-z0-9_]+$/"
    $res = jm_is_string($val) && _jm_re_1($val, $path, $rep);
    return $res;
}

# check _jm_obj_94_map_video_links (.'$GalaxyInfoModelCollection'.video_links)
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelCollection'.video_links
    $res = jm_is_array($val);
    return $res;
}


# object .'$GalaxyInfoModelCollection'
sub _jm_obj_94($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_94_map{$prop}))
        {
            # handle 7 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $GalaxyInfoModelCollection (.'$GalaxyInfoModelCollection')
sub json_model_51($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelCollection'
    $res = _jm_obj_94($val, $path, $rep);
    return $res;
}

# check _jm_obj_95_map_author (.'$GalaxyInfoModelLoose'.author)
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelLoose'.author
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_95_map_company (.'$GalaxyInfoModelLoose'.company)
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelLoose'.company
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_95_map_github_branch (.'$GalaxyInfoModelLoose'.github_branch)
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelLoose'.github_branch
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_95_map_issue_tracker_url (.'$GalaxyInfoModelLoose'.issue_tracker_url)
sub _jm_f_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelLoose'.issue_tracker_url
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_95_map_license (.'$GalaxyInfoModelLoose'.license)
sub _jm_f_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelLoose'.license
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_95_map_min_ansible_container_version (.'$GalaxyInfoModelLoose'.min_ansible_container_version)
sub _jm_f_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelLoose'.min_ansible_container_version
    $res = jm_is_string($val);
    return $res;
}


# object .'$GalaxyInfoModelLoose'
sub _jm_obj_95($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'description')
        {
            # handle must description property
            $must_count++;
            # .'$GalaxyInfoModelLoose'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_95_map{$prop}))
        {
            # handle 6 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $GalaxyInfoModelLoose (.'$GalaxyInfoModelLoose')
sub json_model_52($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # some $URL should be added?
    # .'$GalaxyInfoModelLoose'
    $res = _jm_obj_95($val, $path, $rep);
    return $res;
}

# check _jm_obj_96_map_cloud_platforms (.'$GalaxyInfoModelStandalone'.cloud_platforms)
sub _jm_f_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelStandalone'.cloud_platforms
    $res = 1;
    return $res;
}

# check _jm_obj_96_map_company (.'$GalaxyInfoModelStandalone'.company)
sub _jm_f_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelStandalone'.company
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_96_map_galaxy_tags (.'$GalaxyInfoModelStandalone'.galaxy_tags)
sub _jm_f_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelStandalone'.galaxy_tags
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_96_idx (0 .. $#$val)
        {
            my $arr_96_item = $$val[$arr_96_idx];
            # .'$GalaxyInfoModelStandalone'.galaxy_tags.0
            $res = jm_is_string($arr_96_item);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_96_map_github_branch (.'$GalaxyInfoModelStandalone'.github_branch)
sub _jm_f_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelStandalone'.github_branch
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_96_map_issue_tracker_url (.'$GalaxyInfoModelStandalone'.issue_tracker_url)
sub _jm_f_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelStandalone'.issue_tracker_url
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_96_map_min_ansible_container_version (.'$GalaxyInfoModelStandalone'.min_ansible_container_version)
sub _jm_f_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelStandalone'.min_ansible_container_version
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_96_map_namespace (.'$GalaxyInfoModelStandalone'.namespace)
sub _jm_f_19($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelStandalone'.namespace
    # "/^[a-z][-a-z0-9_]+$/"
    $res = jm_is_string($val) && _jm_re_0($val, $path, $rep);
    return $res;
}

# check _jm_obj_96_map_platforms (.'$GalaxyInfoModelStandalone'.platforms)
sub _jm_f_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelStandalone'.platforms
    $res = json_model_50($val, $path, $rep);
    return $res;
}

# check _jm_obj_96_map_role_name (.'$GalaxyInfoModelStandalone'.role_name)
sub _jm_f_21($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelStandalone'.role_name
    # "/^[a-z][a-z0-9_]+$/"
    $res = jm_is_string($val) && _jm_re_1($val, $path, $rep);
    return $res;
}

# check _jm_obj_96_map_video_links (.'$GalaxyInfoModelStandalone'.video_links)
sub _jm_f_22($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelStandalone'.video_links
    $res = jm_is_array($val);
    return $res;
}


# object .'$GalaxyInfoModelStandalone'
sub _jm_obj_96($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'standalone')
        {
            # handle must standalone property
            $must_count++;
            # .'$GalaxyInfoModelStandalone'.standalone
            $res = jm_is_boolean($pval) && $pval == 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle must description property
            $must_count++;
            # .'$GalaxyInfoModelStandalone'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'author')
        {
            # handle must author property
            $must_count++;
            # .'$GalaxyInfoModelStandalone'.author
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'license')
        {
            # handle must license property
            $must_count++;
            # .'$GalaxyInfoModelStandalone'.license
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'min_ansible_version')
        {
            # handle must min_ansible_version property
            $must_count++;
            # .'$GalaxyInfoModelStandalone'.min_ansible_version
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_96_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 5)
    {
        return 0;
    }
    return 1;
}

# check $GalaxyInfoModelStandalone (.'$GalaxyInfoModelStandalone')
sub json_model_53($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModelStandalone'
    $res = _jm_obj_96($val, $path, $rep);
    return $res;
}

# check _jm_obj_97_map_author (.'$GalaxyInfoModel'.'|'.1.author)
sub _jm_f_23($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.1.author
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_97_map_cloud_platforms (.'$GalaxyInfoModel'.'|'.1.cloud_platforms)
sub _jm_f_24($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.1.cloud_platforms
    $res = 1;
    return $res;
}

# check _jm_obj_97_map_company (.'$GalaxyInfoModel'.'|'.1.company)
sub _jm_f_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.1.company
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_97_map_galaxy_tags (.'$GalaxyInfoModel'.'|'.1.galaxy_tags)
sub _jm_f_26($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.1.galaxy_tags
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_97_idx (0 .. $#$val)
        {
            my $arr_97_item = $$val[$arr_97_idx];
            # .'$GalaxyInfoModel'.'|'.1.galaxy_tags.0
            $res = jm_is_string($arr_97_item);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_97_map_github_branch (.'$GalaxyInfoModel'.'|'.1.github_branch)
sub _jm_f_27($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.1.github_branch
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_97_map_issue_tracker_url (.'$GalaxyInfoModel'.'|'.1.issue_tracker_url)
sub _jm_f_28($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.1.issue_tracker_url
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_97_map_license (.'$GalaxyInfoModel'.'|'.1.license)
sub _jm_f_29($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.1.license
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_97_map_min_ansible_container_version (.'$GalaxyInfoModel'.'|'.1.min_ansible_container_version)
sub _jm_f_30($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.1.min_ansible_container_version
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_97_map_min_ansible_version (.'$GalaxyInfoModel'.'|'.1.min_ansible_version)
sub _jm_f_31($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.1.min_ansible_version
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_97_map_namespace (.'$GalaxyInfoModel'.'|'.1.namespace)
sub _jm_f_32($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.1.namespace
    # "/^[a-z][-a-z0-9_]+$/"
    $res = jm_is_string($val) && _jm_re_0($val, $path, $rep);
    return $res;
}

# check _jm_obj_97_map_platforms (.'$GalaxyInfoModel'.'|'.1.platforms)
sub _jm_f_33($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.1.platforms
    $res = json_model_50($val, $path, $rep);
    return $res;
}

# check _jm_obj_97_map_role_name (.'$GalaxyInfoModel'.'|'.1.role_name)
sub _jm_f_34($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.1.role_name
    # "/^[a-z][a-z0-9_]+$/"
    $res = jm_is_string($val) && _jm_re_1($val, $path, $rep);
    return $res;
}

# check _jm_obj_97_map_video_links (.'$GalaxyInfoModel'.'|'.1.video_links)
sub _jm_f_35($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.1.video_links
    $res = jm_is_array($val);
    return $res;
}


# object .'$GalaxyInfoModel'.'|'.1
sub _jm_obj_97($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'standalone')
        {
            # handle must standalone property
            $must_count++;
            # .'$GalaxyInfoModel'.'|'.1.standalone
            $res = jm_is_boolean($pval) && $pval == 0;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle must description property
            $must_count++;
            # .'$GalaxyInfoModel'.'|'.1.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_97_map{$prop}))
        {
            # handle 13 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_98_map_author (.'$GalaxyInfoModel'.'|'.2.author)
sub _jm_f_36($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.2.author
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_98_map_cloud_platforms (.'$GalaxyInfoModel'.'|'.2.cloud_platforms)
sub _jm_f_37($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.2.cloud_platforms
    $res = 1;
    return $res;
}

# check _jm_obj_98_map_company (.'$GalaxyInfoModel'.'|'.2.company)
sub _jm_f_38($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.2.company
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_98_map_galaxy_tags (.'$GalaxyInfoModel'.'|'.2.galaxy_tags)
sub _jm_f_39($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.2.galaxy_tags
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_98_idx (0 .. $#$val)
        {
            my $arr_98_item = $$val[$arr_98_idx];
            # .'$GalaxyInfoModel'.'|'.2.galaxy_tags.0
            $res = jm_is_string($arr_98_item);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_98_map_github_branch (.'$GalaxyInfoModel'.'|'.2.github_branch)
sub _jm_f_40($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.2.github_branch
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_98_map_issue_tracker_url (.'$GalaxyInfoModel'.'|'.2.issue_tracker_url)
sub _jm_f_41($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.2.issue_tracker_url
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_98_map_license (.'$GalaxyInfoModel'.'|'.2.license)
sub _jm_f_42($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.2.license
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_98_map_min_ansible_container_version (.'$GalaxyInfoModel'.'|'.2.min_ansible_container_version)
sub _jm_f_43($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.2.min_ansible_container_version
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_98_map_min_ansible_version (.'$GalaxyInfoModel'.'|'.2.min_ansible_version)
sub _jm_f_44($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.2.min_ansible_version
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_98_map_namespace (.'$GalaxyInfoModel'.'|'.2.namespace)
sub _jm_f_45($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.2.namespace
    # "/^[a-z][-a-z0-9_]+$/"
    $res = jm_is_string($val) && _jm_re_0($val, $path, $rep);
    return $res;
}

# check _jm_obj_98_map_platforms (.'$GalaxyInfoModel'.'|'.2.platforms)
sub _jm_f_46($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.2.platforms
    $res = json_model_50($val, $path, $rep);
    return $res;
}

# check _jm_obj_98_map_role_name (.'$GalaxyInfoModel'.'|'.2.role_name)
sub _jm_f_47($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.2.role_name
    # "/^[a-z][a-z0-9_]+$/"
    $res = jm_is_string($val) && _jm_re_1($val, $path, $rep);
    return $res;
}

# check _jm_obj_98_map_video_links (.'$GalaxyInfoModel'.'|'.2.video_links)
sub _jm_f_48($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$GalaxyInfoModel'.'|'.2.video_links
    $res = jm_is_array($val);
    return $res;
}


# object .'$GalaxyInfoModel'.'|'.2
sub _jm_obj_98($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'description')
        {
            # handle must description property
            $must_count++;
            # .'$GalaxyInfoModel'.'|'.2.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_98_map{$prop}))
        {
            # handle 13 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}


# check $GalaxyInfoModel (.'$GalaxyInfoModel')
sub json_model_54($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # hmmmm, property standalone should probably be required…
    # .'$GalaxyInfoModel'
    my $iso_0 = jm_is_object($val);
    $res = $iso_0;
    if ($res)
    {
        if (exists $$val{'standalone'})
        {
            my $tag_0 = $$val{'standalone'};
            my $fun_0 = $_jm_map_0{$tag_0};
            if (defined($fun_0))
            {
                $res = &$fun_0($val, $path, $rep);
            }
            else
            {
                $res = 0;
            }
        }
        else
        {
            $res = 0;
        }
    }
    if (! $res)
    {
        # .'$GalaxyInfoModel'.'|'.2
        $res = _jm_obj_98($val, $path, $rep);
    }
    return $res;
}

sub _jm_re_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[a-z_]+\.[a-z_]+$/;
    return $res;
}

# check $collections (.'$collections')
sub json_model_55($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$collections'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_99_idx (0 .. $#$val)
        {
            my $arr_99_item = $$val[$arr_99_idx];
            # .'$collections'.0
            # "/^[a-z_]+\\.[a-z_]+$/"
            $res = jm_is_string($arr_99_item) && _jm_re_2($arr_99_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check $complex_conditional (.'$complex_conditional')
sub json_model_56($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$complex_conditional'
    # .'$complex_conditional'.'|'.0
    $res = jm_is_boolean($val);
    if (! $res)
    {
        # .'$complex_conditional'.'|'.1
        $res = jm_is_string($val);
        if (! $res)
        {
            # .'$complex_conditional'.'|'.2
            $res = jm_is_array($val);
            if ($res)
            {
                for my $arr_100_idx (0 .. $#$val)
                {
                    my $arr_100_item = $$val[$arr_100_idx];
                    # .'$complex_conditional'.'|'.2.0
                    $res = jm_is_string($arr_100_item);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
        }
    }
    return $res;
}

# check _jm_obj_99_map_become (.'$DependencyModelLoose'.become)
sub _jm_f_49($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$DependencyModelLoose'.become
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_99_map_name (.'$DependencyModelLoose'.name)
sub _jm_f_50($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$DependencyModelLoose'.name
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_99_map_role (.'$DependencyModelLoose'.role)
sub _jm_f_51($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$DependencyModelLoose'.role
    $res = jm_is_string($val);
    return $res;
}


# check _jm_obj_99_map_scm (.'$DependencyModelLoose'.scm)
sub _jm_f_52($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$DependencyModelLoose'.scm
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_64{$val};
    return $res;
}

# check _jm_obj_99_map_src (.'$DependencyModelLoose'.src)
sub _jm_f_53($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$DependencyModelLoose'.src
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_99_map_tags (.'$DependencyModelLoose'.tags)
sub _jm_f_54($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$DependencyModelLoose'.tags
    # .'$DependencyModelLoose'.tags.'|'.0
    $res = jm_is_string($val);
    if (! $res)
    {
        # .'$DependencyModelLoose'.tags.'|'.1
        $res = jm_is_array($val);
        if ($res)
        {
            for my $arr_101_idx (0 .. $#$val)
            {
                my $arr_101_item = $$val[$arr_101_idx];
                # .'$DependencyModelLoose'.tags.'|'.1.0
                $res = jm_is_string($arr_101_item);
                if (! $res)
                {
                    last;
                }
            }
        }
    }
    return $res;
}

# object .'$DependencyModelLoose'.vars
sub _jm_obj_100($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# check _jm_obj_99_map_vars (.'$DependencyModelLoose'.vars)
sub _jm_f_55($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$DependencyModelLoose'.vars
    $res = _jm_obj_100($val, $path, $rep);
    return $res;
}

# check _jm_obj_99_map_version (.'$DependencyModelLoose'.version)
sub _jm_f_56($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$DependencyModelLoose'.version
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_99_map_when (.'$DependencyModelLoose'.when)
sub _jm_f_57($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$DependencyModelLoose'.when
    $res = json_model_56($val, $path, $rep);
    return $res;
}


# object .'$DependencyModelLoose'
sub _jm_obj_99($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_99_map{$prop}))
        {
            # handle 9 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            # accept any other props
            ;
        }
    }
    return 1;
}

# check $DependencyModelLoose (.'$DependencyModelLoose')
sub json_model_57($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # See https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html#role-dependencies and https://github.com/ansible/ansible/blob/devel/lib/ansible/playbook/role/metadata.py#L79
    # 
    # Other keys are treated as role [parameters](https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html#passing-different-parameters).
    # .'$DependencyModelLoose'
    $res = _jm_obj_99($val, $path, $rep);
    return $res;
}

# object .'$DependencyModel'.'&'.1.'|'.2
sub _jm_obj_101($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'name'})
    {
        return 0;
    }
    $pval = $$val{'name'};
    # .'$DependencyModel'.'&'.1.'|'.2.name
    $res = jm_is_string($pval);
    if (! $res)
    {
        return 0;
    }
    return 1;
}

# object .'$DependencyModel'.'&'.1.'|'.1
sub _jm_obj_102($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'src'})
    {
        return 0;
    }
    $pval = $$val{'src'};
    # .'$DependencyModel'.'&'.1.'|'.1.src
    $res = jm_is_string($pval);
    if (! $res)
    {
        return 0;
    }
    return 1;
}

# object .'$DependencyModel'.'&'.1.'|'.0
sub _jm_obj_103($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'role'})
    {
        return 0;
    }
    $pval = $$val{'role'};
    # .'$DependencyModel'.'&'.1.'|'.0.role
    $res = jm_is_string($pval);
    if (! $res)
    {
        return 0;
    }
    return 1;
}

# check $DependencyModel (.'$DependencyModel')
sub json_model_58($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # add non-exclusive mandatory role, src or name props
    # .'$DependencyModel'
    $res = 1;
    if ($res)
    {
        # .'$DependencyModel'.'&'.0
        $res = _jm_obj_99($val, $path, $rep);
        if ($res)
        {
            # .'$DependencyModel'.'&'.1
            $res = jm_is_object($val);
            if ($res)
            {
                # .'$DependencyModel'.'&'.1.'|'.0
                $res = _jm_obj_103($val, $path, $rep);
                if (! $res)
                {
                    # .'$DependencyModel'.'&'.1.'|'.1
                    $res = _jm_obj_102($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$DependencyModel'.'&'.1.'|'.2
                        $res = _jm_obj_101($val, $path, $rep);
                    }
                }
            }
        }
    }
    return $res;
}

# object .'$AnsibleMetaObj'
sub _jm_obj_104($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'allow_duplicates')
        {
            # handle may allow_duplicates property
            # .'$AnsibleMetaObj'.allow_duplicates
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'collections')
        {
            # handle may collections property
            # .'$AnsibleMetaObj'.collections
            $res = json_model_55($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'dependencies')
        {
            # handle may dependencies property
            # .'$AnsibleMetaObj'.dependencies
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_102_idx (0 .. $#$pval)
                {
                    my $arr_102_item = $$pval[$arr_102_idx];
                    # .'$AnsibleMetaObj'.dependencies.0
                    # .'$AnsibleMetaObj'.dependencies.0.'|'.0
                    $res = jm_is_string($arr_102_item);
                    if (! $res)
                    {
                        # .'$AnsibleMetaObj'.dependencies.0.'|'.1
                        $res = json_model_58($arr_102_item, undef, $rep);
                    }
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'galaxy_info')
        {
            # handle may galaxy_info property
            # .'$AnsibleMetaObj'.galaxy_info
            $res = json_model_54($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $AnsibleMetaObj (.'$AnsibleMetaObj')
sub json_model_59($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AnsibleMetaObj'
    $res = _jm_obj_104($val, $path, $rep);
    return $res;
}

# check $AnsibleMeta (.'$AnsibleMeta')
sub json_model_60($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # why null?
    # .'$AnsibleMeta'
    # .'$AnsibleMeta'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$AnsibleMeta'.'|'.1
        $res = _jm_obj_104($val, $path, $rep);
    }
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_60($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            '6.1' => 1,
            '7.1' => 1,
            '7.2' => 1,
            'all' => 1,
        );
        %_jm_cst_1 = (
            'all' => 1,
            '1' => 1,
            '2' => 1,
            '2023' => 1,
        );
        %_jm_cst_2 = (
            '2013.03' => 1,
            '2013.09' => 1,
            '2014.03' => 1,
            '2014.09' => 1,
            '2015.03' => 1,
            '2015.09' => 1,
            '2016.03' => 1,
            '2016.09' => 1,
            '2017.03' => 1,
            '2017.09' => 1,
            '2017.12' => 1,
            '2018.03' => 1,
            'Candidate' => 1,
            'all' => 1,
        );
        %_jm_cst_3 = (
            '1.8' => 1,
            '1.7' => 1,
            '1.6' => 1,
            '2.12' => 1,
            'all' => 1,
        );
        %_jm_cst_4 = (
            '2.5' => 1,
            '3.0' => 1,
            '3.1' => 1,
            '3.2' => 1,
            '3.3' => 1,
            '3.4' => 1,
            '3.5' => 1,
            'all' => 1,
        );
        %_jm_cst_5 = (
            'bookworm' => 1,
            'bullseye' => 1,
            'buster' => 1,
            'etch' => 1,
            'jessie' => 1,
            'lenny' => 1,
            'sid' => 1,
            'squeeze' => 1,
            'stretch' => 1,
            'trixie' => 1,
            'wheezy' => 1,
            'all' => 1,
        );
        %_jm_cst_6 = (
            '10' => 1,
            '6' => 1,
            '9' => 1,
            'all' => 1,
        );
        %_jm_cst_7 = (
            'ascii' => 1,
            'beowulf' => 1,
            'chimaera' => 1,
            'daedalus' => 1,
            'jessie' => 1,
            'all' => 1,
        );
        %_jm_cst_8 = (
            '5.2' => 1,
            '5.4' => 1,
            '5.6' => 1,
            '5.8' => 1,
            '6.0' => 1,
            '6.2' => 1,
            '6.4' => 1,
            'all' => 1,
        );
        %_jm_cst_9 = (
            '5' => 1,
            '6' => 1,
            '7' => 1,
            '8' => 1,
            '9' => 1,
            '10' => 1,
            'all' => 1,
        );
        %_jm_cst_10 = (
            '16' => 1,
            '17' => 1,
            '18' => 1,
            '19' => 1,
            '20' => 1,
            '21' => 1,
            '22' => 1,
            '23' => 1,
            '24' => 1,
            '25' => 1,
            '26' => 1,
            '27' => 1,
            '28' => 1,
            '29' => 1,
            '30' => 1,
            '31' => 1,
            '32' => 1,
            '33' => 1,
            '34' => 1,
            '35' => 1,
            '36' => 1,
            '37' => 1,
            '38' => 1,
            '39' => 1,
            '40' => 1,
            '41' => 1,
            '42' => 1,
            'all' => 1,
        );
        %_jm_cst_11 = (
            '8.0' => 1,
            '8.1' => 1,
            '8.2' => 1,
            '8.3' => 1,
            '8.4' => 1,
            '9.0' => 1,
            '9.1' => 1,
            '9.2' => 1,
            '9.3' => 1,
            '10.0' => 1,
            '10.1' => 1,
            '10.2' => 1,
            '10.3' => 1,
            '10.4' => 1,
            '11.0' => 1,
            '11.1' => 1,
            '11.2' => 1,
            '11.3' => 1,
            '11.4' => 1,
            '12.0' => 1,
            '12.1' => 1,
            '12.2' => 1,
            '13.0' => 1,
            '13.1' => 1,
            '13.2' => 1,
            '14.0' => 1,
            'all' => 1,
        );
        %_jm_cst_12 = (
            '10' => 1,
            '11' => 1,
            'all' => 1,
        );
        %_jm_cst_13 = (
            '2.0' => 1,
            '2016' => 1,
            '2017' => 1,
            '2018' => 1,
            '2019' => 1,
            '2020' => 1,
            '2021' => 1,
            '2022' => 1,
            '2023' => 1,
            'all' => 1,
        );
        %_jm_cst_14 = (
            '10.7' => 1,
            '10.8' => 1,
            '10.9' => 1,
            '10.10' => 1,
            '10.11' => 1,
            '10.12' => 1,
            '10.13' => 1,
            '10.14' => 1,
            '10.15' => 1,
            'all' => 1,
        );
        %_jm_cst_15 = (
            '7' => 1,
            '8' => 1,
            'all' => 1,
        );
        %_jm_cst_16 = (
            '8.0' => 1,
            '8.1' => 1,
            '8.2' => 1,
            '9.0' => 1,
            '9.1' => 1,
            '9.2' => 1,
            '9.3' => 1,
            '10.0' => 1,
            'all' => 1,
        );
        %_jm_cst_17 = (
            '5.6' => 1,
            '5.7' => 1,
            '5.8' => 1,
            '5.9' => 1,
            '6.0' => 1,
            '6.1' => 1,
            '6.2' => 1,
            '6.3' => 1,
            '6.4' => 1,
            '6.5' => 1,
            '6.6' => 1,
            '6.7' => 1,
            '6.8' => 1,
            '6.9' => 1,
            '7.0' => 1,
            '7.1' => 1,
            '7.2' => 1,
            '7.3' => 1,
            'all' => 1,
        );
        %_jm_cst_18 = (
            '17.01' => 1,
            '18.06' => 1,
            '19.07' => 1,
            '21.02' => 1,
            '22.03' => 1,
            '23.05' => 1,
            '24.10' => 1,
            'all' => 1,
        );
        %_jm_cst_19 = (
            '7.0' => 1,
            '7.1' => 1,
            '7.2' => 1,
            '7.3' => 1,
            '7.4' => 1,
            '7.5' => 1,
            '7.6' => 1,
            '7.7' => 1,
            '7.8' => 1,
            '7.9' => 1,
            '8.0' => 1,
            '8.1' => 1,
            '8.2' => 1,
            '8.3' => 1,
            '8.4' => 1,
            '8.5' => 1,
            '8.6' => 1,
            '8.7' => 1,
            '8.8' => 1,
            '8.9' => 1,
            '8.10' => 1,
            '9.0' => 1,
            '9.1' => 1,
            '9.2' => 1,
            '9.3' => 1,
            '9.4' => 1,
            'all' => 1,
        );
        %_jm_cst_20 = (
            '7.1' => 1,
            '8.0' => 1,
            '8.1' => 1,
            '9.0' => 1,
            'all' => 1,
        );
        %_jm_cst_21 = (
            '8.0' => 1,
            '8.1' => 1,
            '8.2' => 1,
            '8.3' => 1,
            '8.4' => 1,
            '8.5' => 1,
            '8.6' => 1,
            '8.7' => 1,
            '8.8' => 1,
            '9.0' => 1,
            '9.1' => 1,
            '9.2' => 1,
            'all' => 1,
        );
        %_jm_cst_22 = (
            '10SP3' => 1,
            '10SP4' => 1,
            '11' => 1,
            '11SP1' => 1,
            '11SP2' => 1,
            '11SP3' => 1,
            '11SP4' => 1,
            '12' => 1,
            '12SP1' => 1,
            '12SP2' => 1,
            '12SP3' => 1,
            '12SP4' => 1,
            '12SP5' => 1,
            '15' => 1,
            '15SP1' => 1,
            '15SP2' => 1,
            '15SP3' => 1,
            '15SP4' => 1,
            '15SP5' => 1,
            '15SP6' => 1,
            'all' => 1,
        );
        %_jm_cst_23 = (
            '10' => 1,
            '11.0' => 1,
            '11.1' => 1,
            '11.2' => 1,
            '11.3' => 1,
            '11.4' => 1,
            'all' => 1,
        );
        %_jm_cst_24 = (
            '6.0' => 1,
            '6.1' => 1,
            '6.2' => 1,
            '7.0' => 1,
            'all' => 1,
        );
        %_jm_cst_25 = (
            '12.1' => 1,
            '13.0' => 1,
            '13.1' => 1,
            '14.0' => 1,
            'all' => 1,
        );
        %_jm_cst_26 = (
            'artful' => 1,
            'bionic' => 1,
            'cosmic' => 1,
            'disco' => 1,
            'eoan' => 1,
            'focal' => 1,
            'groovy' => 1,
            'hirsute' => 1,
            'impish' => 1,
            'jammy' => 1,
            'kinetic' => 1,
            'lucid' => 1,
            'lunar' => 1,
            'mantic' => 1,
            'noble' => 1,
            'maverick' => 1,
            'natty' => 1,
            'oneiric' => 1,
            'oracular' => 1,
            'plucky' => 1,
            'precise' => 1,
            'quantal' => 1,
            'raring' => 1,
            'saucy' => 1,
            'trusty' => 1,
            'utopic' => 1,
            'vivid' => 1,
            'wily' => 1,
            'xenial' => 1,
            'yakkety' => 1,
            'zesty' => 1,
            'all' => 1,
        );
        %_jm_cst_27 = (
            '2008R2' => 1,
            '2008x64' => 1,
            '2008x86' => 1,
            '2012' => 1,
            '2012R2' => 1,
            '2016' => 1,
            '2019' => 1,
            '2022' => 1,
            '2025' => 1,
            'all' => 1,
        );
        %_jm_cst_28 = (
            'Big-Sur' => 1,
            'Catalina' => 1,
            'High-Sierra' => 1,
            'Mojave' => 1,
            'Monterey' => 1,
            'Sierra' => 1,
            'Sonoma' => 1,
            'Ventura' => 1,
            'all' => 1,
        );
        %_jm_cst_29 = (
            '12.1' => 1,
            '12.2' => 1,
            '12.3' => 1,
            '13.1' => 1,
            '13.2' => 1,
            '15.0' => 1,
            '15.1' => 1,
            '15.2' => 1,
            '15.3' => 1,
            '15.4' => 1,
            '15.5' => 1,
            '42.1' => 1,
            '42.2' => 1,
            '42.3' => 1,
            'all' => 1,
        );
        %_jm_cst_30 = (
            '5.5' => 1,
            '6.0' => 1,
            '6.5' => 1,
            '6.7' => 1,
            '7.0' => 1,
            '8.0' => 1,
            'all' => 1,
        );
        %_jm_cst_31 = (
            '5.5' => 1,
            '6.0' => 1,
            '6.5' => 1,
            '6.7' => 1,
            '7.0' => 1,
            '8.0' => 1,
            'all' => 1,
        );
        %_jm_cst_32 = (
            '2008R2' => 1,
            '2008x64' => 1,
            '2008x86' => 1,
            '2012' => 1,
            '2012R2' => 1,
            '2016' => 1,
            '2019' => 1,
            '2022' => 1,
            '2025' => 1,
            'all' => 1,
        );
        %_jm_cst_33 = (
            '5.5' => 1,
            '6.0' => 1,
            '6.5' => 1,
            '6.7' => 1,
            '7.0' => 1,
            '8.0' => 1,
            'all' => 1,
        );
        %_jm_cst_34 = (
            '5.5' => 1,
            '6.0' => 1,
            '6.5' => 1,
            '6.7' => 1,
            '7.0' => 1,
            '8.0' => 1,
            'all' => 1,
        );
        %_jm_cst_35 = (
            'artful' => 1,
            'bionic' => 1,
            'cosmic' => 1,
            'disco' => 1,
            'eoan' => 1,
            'focal' => 1,
            'groovy' => 1,
            'hirsute' => 1,
            'impish' => 1,
            'jammy' => 1,
            'kinetic' => 1,
            'lucid' => 1,
            'lunar' => 1,
            'mantic' => 1,
            'noble' => 1,
            'maverick' => 1,
            'natty' => 1,
            'oneiric' => 1,
            'oracular' => 1,
            'plucky' => 1,
            'precise' => 1,
            'quantal' => 1,
            'raring' => 1,
            'saucy' => 1,
            'trusty' => 1,
            'utopic' => 1,
            'vivid' => 1,
            'wily' => 1,
            'xenial' => 1,
            'yakkety' => 1,
            'zesty' => 1,
            'all' => 1,
        );
        %_jm_cst_36 = (
            '12.1' => 1,
            '13.0' => 1,
            '13.1' => 1,
            '14.0' => 1,
            'all' => 1,
        );
        %_jm_cst_37 = (
            '6.0' => 1,
            '6.1' => 1,
            '6.2' => 1,
            '7.0' => 1,
            'all' => 1,
        );
        %_jm_cst_38 = (
            '10' => 1,
            '11.0' => 1,
            '11.1' => 1,
            '11.2' => 1,
            '11.3' => 1,
            '11.4' => 1,
            'all' => 1,
        );
        %_jm_cst_39 = (
            '10SP3' => 1,
            '10SP4' => 1,
            '11' => 1,
            '11SP1' => 1,
            '11SP2' => 1,
            '11SP3' => 1,
            '11SP4' => 1,
            '12' => 1,
            '12SP1' => 1,
            '12SP2' => 1,
            '12SP3' => 1,
            '12SP4' => 1,
            '12SP5' => 1,
            '15' => 1,
            '15SP1' => 1,
            '15SP2' => 1,
            '15SP3' => 1,
            '15SP4' => 1,
            '15SP5' => 1,
            '15SP6' => 1,
            'all' => 1,
        );
        %_jm_cst_40 = (
            '8.0' => 1,
            '8.1' => 1,
            '8.2' => 1,
            '8.3' => 1,
            '8.4' => 1,
            '8.5' => 1,
            '8.6' => 1,
            '8.7' => 1,
            '8.8' => 1,
            '9.0' => 1,
            '9.1' => 1,
            '9.2' => 1,
            'all' => 1,
        );
        %_jm_cst_41 = (
            '7.1' => 1,
            '8.0' => 1,
            '8.1' => 1,
            '9.0' => 1,
            'all' => 1,
        );
        %_jm_cst_42 = (
            '7.0' => 1,
            '7.1' => 1,
            '7.2' => 1,
            '7.3' => 1,
            '7.4' => 1,
            '7.5' => 1,
            '7.6' => 1,
            '7.7' => 1,
            '7.8' => 1,
            '7.9' => 1,
            '8.0' => 1,
            '8.1' => 1,
            '8.2' => 1,
            '8.3' => 1,
            '8.4' => 1,
            '8.5' => 1,
            '8.6' => 1,
            '8.7' => 1,
            '8.8' => 1,
            '8.9' => 1,
            '8.10' => 1,
            '9.0' => 1,
            '9.1' => 1,
            '9.2' => 1,
            '9.3' => 1,
            '9.4' => 1,
            'all' => 1,
        );
        %_jm_cst_43 = (
            '17.01' => 1,
            '18.06' => 1,
            '19.07' => 1,
            '21.02' => 1,
            '22.03' => 1,
            '23.05' => 1,
            '24.10' => 1,
            'all' => 1,
        );
        %_jm_cst_44 = (
            '12.1' => 1,
            '12.2' => 1,
            '12.3' => 1,
            '13.1' => 1,
            '13.2' => 1,
            '15.0' => 1,
            '15.1' => 1,
            '15.2' => 1,
            '15.3' => 1,
            '15.4' => 1,
            '15.5' => 1,
            '42.1' => 1,
            '42.2' => 1,
            '42.3' => 1,
            'all' => 1,
        );
        %_jm_cst_45 = (
            '5.6' => 1,
            '5.7' => 1,
            '5.8' => 1,
            '5.9' => 1,
            '6.0' => 1,
            '6.1' => 1,
            '6.2' => 1,
            '6.3' => 1,
            '6.4' => 1,
            '6.5' => 1,
            '6.6' => 1,
            '6.7' => 1,
            '6.8' => 1,
            '6.9' => 1,
            '7.0' => 1,
            '7.1' => 1,
            '7.2' => 1,
            '7.3' => 1,
            'all' => 1,
        );
        %_jm_cst_46 = (
            '7' => 1,
            '8' => 1,
            'all' => 1,
        );
        %_jm_cst_47 = (
            '10.7' => 1,
            '10.8' => 1,
            '10.9' => 1,
            '10.10' => 1,
            '10.11' => 1,
            '10.12' => 1,
            '10.13' => 1,
            '10.14' => 1,
            '10.15' => 1,
            'all' => 1,
        );
        %_jm_cst_48 = (
            'Big-Sur' => 1,
            'Catalina' => 1,
            'High-Sierra' => 1,
            'Mojave' => 1,
            'Monterey' => 1,
            'Sierra' => 1,
            'Sonoma' => 1,
            'Ventura' => 1,
            'all' => 1,
        );
        %_jm_cst_49 = (
            '2.0' => 1,
            '2016' => 1,
            '2017' => 1,
            '2018' => 1,
            '2019' => 1,
            '2020' => 1,
            '2021' => 1,
            '2022' => 1,
            '2023' => 1,
            'all' => 1,
        );
        %_jm_cst_50 = (
            '10' => 1,
            '11' => 1,
            'all' => 1,
        );
        %_jm_cst_51 = (
            '8.0' => 1,
            '8.1' => 1,
            '8.2' => 1,
            '8.3' => 1,
            '8.4' => 1,
            '9.0' => 1,
            '9.1' => 1,
            '9.2' => 1,
            '9.3' => 1,
            '10.0' => 1,
            '10.1' => 1,
            '10.2' => 1,
            '10.3' => 1,
            '10.4' => 1,
            '11.0' => 1,
            '11.1' => 1,
            '11.2' => 1,
            '11.3' => 1,
            '11.4' => 1,
            '12.0' => 1,
            '12.1' => 1,
            '12.2' => 1,
            '13.0' => 1,
            '13.1' => 1,
            '13.2' => 1,
            '14.0' => 1,
            'all' => 1,
        );
        %_jm_cst_52 = (
            '16' => 1,
            '17' => 1,
            '18' => 1,
            '19' => 1,
            '20' => 1,
            '21' => 1,
            '22' => 1,
            '23' => 1,
            '24' => 1,
            '25' => 1,
            '26' => 1,
            '27' => 1,
            '28' => 1,
            '29' => 1,
            '30' => 1,
            '31' => 1,
            '32' => 1,
            '33' => 1,
            '34' => 1,
            '35' => 1,
            '36' => 1,
            '37' => 1,
            '38' => 1,
            '39' => 1,
            '40' => 1,
            '41' => 1,
            '42' => 1,
            'all' => 1,
        );
        %_jm_cst_53 = (
            '5' => 1,
            '6' => 1,
            '7' => 1,
            '8' => 1,
            '9' => 1,
            '10' => 1,
            'all' => 1,
        );
        %_jm_cst_54 = (
            '5.2' => 1,
            '5.4' => 1,
            '5.6' => 1,
            '5.8' => 1,
            '6.0' => 1,
            '6.2' => 1,
            '6.4' => 1,
            'all' => 1,
        );
        %_jm_cst_55 = (
            'ascii' => 1,
            'beowulf' => 1,
            'chimaera' => 1,
            'daedalus' => 1,
            'jessie' => 1,
            'all' => 1,
        );
        %_jm_cst_56 = (
            '10' => 1,
            '6' => 1,
            '9' => 1,
            'all' => 1,
        );
        %_jm_cst_57 = (
            'bookworm' => 1,
            'bullseye' => 1,
            'buster' => 1,
            'etch' => 1,
            'jessie' => 1,
            'lenny' => 1,
            'sid' => 1,
            'squeeze' => 1,
            'stretch' => 1,
            'trixie' => 1,
            'wheezy' => 1,
            'all' => 1,
        );
        %_jm_cst_58 = (
            '8.0' => 1,
            '8.1' => 1,
            '8.2' => 1,
            '9.0' => 1,
            '9.1' => 1,
            '9.2' => 1,
            '9.3' => 1,
            '10.0' => 1,
            'all' => 1,
        );
        %_jm_cst_59 = (
            '2.5' => 1,
            '3.0' => 1,
            '3.1' => 1,
            '3.2' => 1,
            '3.3' => 1,
            '3.4' => 1,
            '3.5' => 1,
            'all' => 1,
        );
        %_jm_cst_60 = (
            '1.8' => 1,
            '1.7' => 1,
            '1.6' => 1,
            '2.12' => 1,
            'all' => 1,
        );
        %_jm_cst_61 = (
            'all' => 1,
            '1' => 1,
            '2' => 1,
            '2023' => 1,
        );
        %_jm_cst_62 = (
            '2013.03' => 1,
            '2013.09' => 1,
            '2014.03' => 1,
            '2014.09' => 1,
            '2015.03' => 1,
            '2015.09' => 1,
            '2016.03' => 1,
            '2016.09' => 1,
            '2017.03' => 1,
            '2017.09' => 1,
            '2017.12' => 1,
            '2018.03' => 1,
            'Candidate' => 1,
            'all' => 1,
        );
        %_jm_cst_63 = (
            '6.1' => 1,
            '7.1' => 1,
            '7.2' => 1,
            'all' => 1,
        );
        %_jm_obj_94_map = (
            'cloud_platforms' => \&_jm_f_0,
            'galaxy_tags' => \&_jm_f_1,
            'min_ansible_version' => \&_jm_f_2,
            'namespace' => \&_jm_f_3,
            'platforms' => \&_jm_f_4,
            'role_name' => \&_jm_f_5,
            'video_links' => \&_jm_f_6,
        );
        %_jm_obj_95_map = (
            'author' => \&_jm_f_7,
            'company' => \&_jm_f_8,
            'github_branch' => \&_jm_f_9,
            'issue_tracker_url' => \&_jm_f_10,
            'license' => \&_jm_f_11,
            'min_ansible_container_version' => \&_jm_f_12,
        );
        %_jm_obj_96_map = (
            'cloud_platforms' => \&_jm_f_13,
            'company' => \&_jm_f_14,
            'galaxy_tags' => \&_jm_f_15,
            'github_branch' => \&_jm_f_16,
            'issue_tracker_url' => \&_jm_f_17,
            'min_ansible_container_version' => \&_jm_f_18,
            'namespace' => \&_jm_f_19,
            'platforms' => \&_jm_f_20,
            'role_name' => \&_jm_f_21,
            'video_links' => \&_jm_f_22,
        );
        %_jm_obj_97_map = (
            'author' => \&_jm_f_23,
            'cloud_platforms' => \&_jm_f_24,
            'company' => \&_jm_f_25,
            'galaxy_tags' => \&_jm_f_26,
            'github_branch' => \&_jm_f_27,
            'issue_tracker_url' => \&_jm_f_28,
            'license' => \&_jm_f_29,
            'min_ansible_container_version' => \&_jm_f_30,
            'min_ansible_version' => \&_jm_f_31,
            'namespace' => \&_jm_f_32,
            'platforms' => \&_jm_f_33,
            'role_name' => \&_jm_f_34,
            'video_links' => \&_jm_f_35,
        );
        %_jm_obj_98_map = (
            'author' => \&_jm_f_36,
            'cloud_platforms' => \&_jm_f_37,
            'company' => \&_jm_f_38,
            'galaxy_tags' => \&_jm_f_39,
            'github_branch' => \&_jm_f_40,
            'issue_tracker_url' => \&_jm_f_41,
            'license' => \&_jm_f_42,
            'min_ansible_container_version' => \&_jm_f_43,
            'min_ansible_version' => \&_jm_f_44,
            'namespace' => \&_jm_f_45,
            'platforms' => \&_jm_f_46,
            'role_name' => \&_jm_f_47,
            'video_links' => \&_jm_f_48,
        );
        %_jm_map_0 = (
            1 => \&_jm_obj_96,
            0 => \&_jm_obj_97,
        );
        %_jm_cst_64 = (
            'hg' => 1,
            'git' => 1,
        );
        %_jm_obj_99_map = (
            'become' => \&_jm_f_49,
            'name' => \&_jm_f_50,
            'role' => \&_jm_f_51,
            'scm' => \&_jm_f_52,
            'src' => \&_jm_f_53,
            'tags' => \&_jm_f_54,
            'vars' => \&_jm_f_55,
            'version' => \&_jm_f_56,
            'when' => \&_jm_f_57,
        );
        %check_model_map = (
            '' => \&json_model_60,
            'AIXPlatformModel' => \&_jm_obj_0,
            'AlpinePlatformModel' => \&_jm_obj_1,
            'AmazonLinuxPlatformModel' => \&_jm_obj_2,
            'AmazonPlatformModel' => \&_jm_obj_3,
            'ArchLinuxPlatformModel' => \&_jm_obj_4,
            'AstraLinuxPlatformModel' => \&_jm_obj_5,
            'ClearLinuxPlatformModel' => \&_jm_obj_6,
            'CumulusPlatformModel' => \&_jm_obj_7,
            'DebianPlatformModel' => \&_jm_obj_8,
            'DellOSPlatformModel' => \&_jm_obj_9,
            'DevuanPlatformModel' => \&_jm_obj_10,
            'DragonFlyBSDPlatformModel' => \&_jm_obj_11,
            'ELPlatformModel' => \&_jm_obj_12,
            'FedoraPlatformModel' => \&_jm_obj_13,
            'FreeBSDPlatformModel' => \&_jm_obj_14,
            'GenericBSDPlatformModel' => \&_jm_obj_15,
            'GenericLinuxPlatformModel' => \&_jm_obj_16,
            'GenericUNIXPlatformModel' => \&_jm_obj_17,
            'GentooPlatformModel' => \&_jm_obj_18,
            'HardenedBSDPlatformModel' => \&_jm_obj_19,
            'IOSPlatformModel' => \&_jm_obj_20,
            'JunosPlatformModel' => \&_jm_obj_21,
            'KaliPlatformModel' => \&_jm_obj_22,
            'MacOSXPlatformModel' => \&_jm_obj_23,
            'MageiaPlatformModel' => \&_jm_obj_24,
            'NXOSPlatformModel' => \&_jm_obj_25,
            'NetBSDPlatformModel' => \&_jm_obj_26,
            'OpenBSDPlatformModel' => \&_jm_obj_27,
            'OpenWrtPlatformModel' => \&_jm_obj_28,
            'OracleLinuxPlatformModel' => \&_jm_obj_29,
            'PAN-OSPlatformModel' => \&_jm_obj_30,
            'RockyLinuxPlatformModel' => \&_jm_obj_31,
            'SLESPlatformModel' => \&_jm_obj_32,
            'SmartOSPlatformModel' => \&_jm_obj_33,
            'SolarisPlatformModel' => \&_jm_obj_34,
            'SynologyPlatformModel' => \&_jm_obj_35,
            'TMOSPlatformModel' => \&_jm_obj_36,
            'UbuntuPlatformModel' => \&_jm_obj_37,
            'Void_LinuxPlatformModel' => \&_jm_obj_38,
            'WindowsPlatformModel' => \&_jm_obj_39,
            'aosPlatformModel' => \&_jm_obj_40,
            'eosPlatformModel' => \&_jm_obj_41,
            'macOSPlatformModel' => \&_jm_obj_42,
            'opensusePlatformModel' => \&_jm_obj_43,
            'os10PlatformModel' => \&_jm_obj_44,
            'vCenterPlatformModel' => \&_jm_obj_45,
            'vSpherePlatformModel' => \&_jm_obj_46,
            'any_platform' => \&json_model_49,
            'platforms' => \&json_model_50,
            'GalaxyInfoModelCollection' => \&_jm_obj_94,
            'GalaxyInfoModelLoose' => \&_jm_obj_95,
            'GalaxyInfoModelStandalone' => \&_jm_obj_96,
            'GalaxyInfoModel' => \&json_model_54,
            'collections' => \&json_model_55,
            'complex_conditional' => \&json_model_56,
            'DependencyModelLoose' => \&_jm_obj_99,
            'DependencyModel' => \&json_model_58,
            'AnsibleMetaObj' => \&_jm_obj_104,
            'AnsibleMeta' => \&json_model_60,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %_jm_cst_1 = ();
        %_jm_cst_2 = ();
        %_jm_cst_3 = ();
        %_jm_cst_4 = ();
        %_jm_cst_5 = ();
        %_jm_cst_6 = ();
        %_jm_cst_7 = ();
        %_jm_cst_8 = ();
        %_jm_cst_9 = ();
        %_jm_cst_10 = ();
        %_jm_cst_11 = ();
        %_jm_cst_12 = ();
        %_jm_cst_13 = ();
        %_jm_cst_14 = ();
        %_jm_cst_15 = ();
        %_jm_cst_16 = ();
        %_jm_cst_17 = ();
        %_jm_cst_18 = ();
        %_jm_cst_19 = ();
        %_jm_cst_20 = ();
        %_jm_cst_21 = ();
        %_jm_cst_22 = ();
        %_jm_cst_23 = ();
        %_jm_cst_24 = ();
        %_jm_cst_25 = ();
        %_jm_cst_26 = ();
        %_jm_cst_27 = ();
        %_jm_cst_28 = ();
        %_jm_cst_29 = ();
        %_jm_cst_30 = ();
        %_jm_cst_31 = ();
        %_jm_cst_32 = ();
        %_jm_cst_33 = ();
        %_jm_cst_34 = ();
        %_jm_cst_35 = ();
        %_jm_cst_36 = ();
        %_jm_cst_37 = ();
        %_jm_cst_38 = ();
        %_jm_cst_39 = ();
        %_jm_cst_40 = ();
        %_jm_cst_41 = ();
        %_jm_cst_42 = ();
        %_jm_cst_43 = ();
        %_jm_cst_44 = ();
        %_jm_cst_45 = ();
        %_jm_cst_46 = ();
        %_jm_cst_47 = ();
        %_jm_cst_48 = ();
        %_jm_cst_49 = ();
        %_jm_cst_50 = ();
        %_jm_cst_51 = ();
        %_jm_cst_52 = ();
        %_jm_cst_53 = ();
        %_jm_cst_54 = ();
        %_jm_cst_55 = ();
        %_jm_cst_56 = ();
        %_jm_cst_57 = ();
        %_jm_cst_58 = ();
        %_jm_cst_59 = ();
        %_jm_cst_60 = ();
        %_jm_cst_61 = ();
        %_jm_cst_62 = ();
        %_jm_cst_63 = ();
        %_jm_obj_94_map = ();
        %_jm_obj_95_map = ();
        %_jm_obj_96_map = ();
        %_jm_obj_97_map = ();
        %_jm_obj_98_map = ();
        %_jm_map_0 = ();
        %_jm_cst_64 = ();
        %_jm_obj_99_map = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
