//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class enum_00 extends ModelChecker
{
    static public final String VERSION = "2";

    Set<Object> _jm_cst_0_set;
    Set<Object> _jm_cst_1_set;
    public Map<String, Checker> enum_00_map_pmap;

    // check $p1 (.'$p1')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$p1'
        res = json.isScalar(val) && _jm_cst_0_set.contains(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("value not in enum [.'$p1'.'|']", path);
        }
        return res;
    }
    
    
    // check $p2 (.'$p2')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$p2'
        res = json.isScalar(val) && _jm_cst_1_set.contains(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("value not in enum [.'$p2'.'|']", path);
        }
        return res;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // p1 optimized to | and root xor should rejects 'Bad'
        // .
        // generic xor list
        long xc_0 = 0;
        boolean xr_0;
        // .'^'.0
        xr_0 = json_model_2(val, path, rep);
        if (! xr_0)
        {
            if (rep != null) rep.addEntry("unexpected $p1 [.'^'.0]", path);
        }
        if (xr_0)
        {
            xc_0 += 1;
        }
        // .'^'.1
        xr_0 = json_model_3(val, path, rep);
        if (! xr_0)
        {
            if (rep != null) rep.addEntry("unexpected $p2 [.'^'.1]", path);
        }
        if (xr_0)
        {
            xc_0 += 1;
        }
        res = xc_0 == 1;
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("not one model match [.'^']", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_cst_0_set = new HashSet<Object>();
            _jm_cst_0_set.add(json.safeJSON("\"Susie\""));
            _jm_cst_0_set.add(json.safeJSON("\"Calvin\""));
            _jm_cst_0_set.add(json.safeJSON("\"Hobbes\""));
            _jm_cst_0_set.add(json.safeJSON("\"Moe\""));
            _jm_cst_0_set.add(json.safeJSON("\"Bad\""));
            _jm_cst_1_set = new HashSet<Object>();
            _jm_cst_1_set.add(json.safeJSON("\"Castafiore\""));
            _jm_cst_1_set.add(json.safeJSON("\"Haddock\""));
            _jm_cst_1_set.add(json.safeJSON("\"Milou\""));
            _jm_cst_1_set.add(json.safeJSON("\"Tintin\""));
            _jm_cst_1_set.add(json.safeJSON("\"Bad\""));
            enum_00_map_pmap = new HashMap<String, Checker>();
            enum_00_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            enum_00_map_pmap.put("p1", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            enum_00_map_pmap.put("p2", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_cst_0_set = null;
            _jm_cst_1_set = null;
            enum_00_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return enum_00_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return enum_00_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new enum_00();
        Main.main("enum_00", checker, VERSION, args);
    }
}
