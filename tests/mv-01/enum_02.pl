#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2.0b1
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JsonModel;
use constant JMC_VERSION => '2.0b1';


my %_jm_cst_0;
my %_jm_cst_1;
my %check_model_map;

# check $p1 (.'$p1')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$p1'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_0{$val};
    return $res;
}


# check $p2 (.'$p2')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$p2'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_1{$val};
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    # generic xor list
    my $xc_0 = 0;
    my $xr_0;
    # .'^'.0
    $xr_0 = json_model_2($val, $path, $rep);
    if ($xr_0)
    {
        $xc_0++;
    }
    # .'^'.1
    $xr_0 = json_model_3($val, $path, $rep);
    if ($xr_0)
    {
        $xc_0++;
    }
    $res = $xc_0 == 1;
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            'Susie' => 1,
            'Calvin' => 1,
            'Hobbes' => 1,
            'Moe' => 1,
            'Bad' => 1,
        );
        %_jm_cst_1 = (
            'Castafiore' => 1,
            'Haddock' => 1,
            'Milou' => 1,
            'Tintin' => 1,
            'Bad' => 1,
        );
        %check_model_map = (
            '' => \&json_model_1,
            'p1' => \&json_model_2,
            'p2' => \&json_model_3,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %_jm_cst_1 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
