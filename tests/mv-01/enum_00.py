#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
_jm_cst_1: set[str]
check_model_map: PropMap

# check $p1 (.'$p1')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$p1'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$p1'.'|']", path))
    return res


# check $p2 (.'$p2')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$p2'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_1
    if not res:
        rep is None or rep.append(("value not in enum [.'$p2'.'|']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # p1 optimized to | and root xor should rejects 'Bad'
    # .
    # generic xor list
    xc_0: int = 0
    xr_0: bool
    # .'^'.0
    xr_0 = json_model_2(val, path, rep)
    if not xr_0:
        rep is None or rep.append(("unexpected $p1 [.'^'.0]", path))
    if xr_0:
        xc_0 += 1
    # .'^'.1
    xr_0 = json_model_3(val, path, rep)
    if not xr_0:
        rep is None or rep.append(("unexpected $p2 [.'^'.1]", path))
    if xr_0:
        xc_0 += 1
    res = xc_0 == 1
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not one model match [.'^']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'Bad', 'Calvin', 'Hobbes', 'Moe', 'Susie'}
        global _jm_cst_1
        _jm_cst_1 = {'Bad', 'Castafiore', 'Haddock', 'Milou', 'Tintin'}
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "p1": json_model_2,
            "p2": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
