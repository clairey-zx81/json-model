#! /bin/env node
//
// Generated by JSON Model Compiler version 2.0a0
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2.0a0";

let _jm_cst_0 = new Set()
let _jm_cst_1 = new Set()
var check_model_map = new Map()

// check $p1 (.'$p1')
function json_model_2(val, path, rep)
{
    let res;
    // .'$p1'
    res = ((val === null || (typeof val === 'number' || val instanceof Number) || (typeof val === 'boolean' || val instanceof Boolean) || (typeof val === 'string' || val instanceof String))) && _jm_cst_0.has(val);
    if (! res)
    {
        rep !== null && rep.push(["value not in enum [.'$p1'.'|']", path])
    }
    return res;
}


// check $p2 (.'$p2')
function json_model_3(val, path, rep)
{
    let res;
    // .'$p2'
    res = ((val === null || (typeof val === 'number' || val instanceof Number) || (typeof val === 'boolean' || val instanceof Boolean) || (typeof val === 'string' || val instanceof String))) && _jm_cst_1.has(val);
    if (! res)
    {
        rep !== null && rep.push(["value not in enum [.'$p2'.'|']", path])
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    // generic xor list
    let xc_0 = 0;
    let xr_0;
    // .'^'.0
    xr_0 = json_model_2(val, path, rep);
    if (! xr_0)
    {
        rep !== null && rep.push(["unexpected $p1 [.'^'.0]", path])
    }
    if (xr_0)
    {
        xc_0 += 1;
    }
    // .'^'.1
    xr_0 = json_model_3(val, path, rep);
    if (! xr_0)
    {
        rep !== null && rep.push(["unexpected $p2 [.'^'.1]", path])
    }
    if (xr_0)
    {
        xc_0 += 1;
    }
    res = xc_0 == 1;
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["not one model match [.'^']", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        _jm_cst_0.add("Susie")
        _jm_cst_0.add("Calvin")
        _jm_cst_0.add("Hobbes")
        _jm_cst_0.add("Moe")
        _jm_cst_0.add("Bad")
        _jm_cst_1.add("Castafiore")
        _jm_cst_1.add("Haddock")
        _jm_cst_1.add("Milou")
        _jm_cst_1.add("Tintin")
        _jm_cst_1.add("Bad")
        check_model_map[""] = json_model_1
        check_model_map["p1"] = json_model_2
        check_model_map["p2"] = json_model_3
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    check_model_init()

    let checker = check_model_map[name]
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model)
