#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# object .'$Aa'.'|'.1
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Aa'.'|'.1]", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$Aa'.'|'.1]", path))
        return False
    pval: Jsonable
    res: bool
    if not "b" in val:
        rep is None or rep.append(("missing mandatory prop <b> [.'$Aa'.'|'.1]", path))
        return False
    pval = val.get("b", UNDEFINED)
    # .'$Aa'.'|'.1.b
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'$Aa'.'|'.1.b]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <b> [.'$Aa'.'|'.1]", path))
        return False
    return True

# object .'$Aa'.'|'.0
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Aa'.'|'.0]", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$Aa'.'|'.0]", path))
        return False
    pval: Jsonable
    res: bool
    if not "a" in val:
        rep is None or rep.append(("missing mandatory prop <a> [.'$Aa'.'|'.0]", path))
        return False
    pval = val.get("a", UNDEFINED)
    # .'$Aa'.'|'.0.a
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$Aa'.'|'.0.a]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <a> [.'$Aa'.'|'.0]", path))
        return False
    return True

# check $Aa (.'$Aa')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Aa'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Aa'.'|']", path))
    if res:
        # .'$Aa'.'|'.0
        res = _jm_obj_1(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Aa'.'|'.0]", path))
        if not res:
            # .'$Aa'.'|'.1
            res = _jm_obj_0(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Aa'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Aa'.'|']", path))
    return res

# object .'$Bb'.'|'.0
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Bb'.'|'.0]", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$Bb'.'|'.0]", path))
        return False
    pval: Jsonable
    res: bool
    if not "c" in val:
        rep is None or rep.append(("missing mandatory prop <c> [.'$Bb'.'|'.0]", path))
        return False
    pval = val.get("c", UNDEFINED)
    # .'$Bb'.'|'.0.c
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$Bb'.'|'.0.c]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <c> [.'$Bb'.'|'.0]", path))
        return False
    return True

# check $Bb (.'$Bb')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Bb'
    # .'$Bb'.'|'.0
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Bb'.'|'.0]", path))
    if not res:
        # .'$Bb'.'|'.1
        res = json_model_2(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Aa [.'$Bb'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Bb'.'|']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Bb [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_3,
            "Aa": json_model_2,
            "Bb": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
