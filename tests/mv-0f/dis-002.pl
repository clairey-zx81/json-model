#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub _jm_obj_0($$$);
sub _jm_obj_1($$$);
sub json_model_1($$$);
my %check_model_map;

# object .'|'.1
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 2)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'a'})
    {
        return 0;
    }
    $pval = $$val{'a'};
    # .'|'.1.a
    $res = jm_is_integer($pval) && $pval >= 0;
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'c'})
    {
        return 0;
    }
    $pval = $$val{'c'};
    # .'|'.1.c
    return jm_is_integer($pval);
}

# object .'|'.0
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 2)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'a'})
    {
        return 0;
    }
    $pval = $$val{'a'};
    # .'|'.0.a
    $res = jm_is_integer($pval) && $pval >= 0;
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'b'})
    {
        return 0;
    }
    $pval = $$val{'b'};
    # .'|'.0.b
    return jm_is_integer($pval) && $pval >= 1;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .
    # .'|'.0
    # .'|'.1
    return jm_is_object($val) && (_jm_obj_1($val, undef, undef) || _jm_obj_0($val, undef, undef));
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&json_model_1,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
