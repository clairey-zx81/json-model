#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_3($$$);
sub json_model_1($$$);
sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
my %json_model_4_map;
sub json_model_4($$$);
sub json_model_5($$$);
sub json_model_6($$$);
sub _jm_obj_0($$$);
sub _jm_obj_1($$$);
sub json_model_7($$$);
sub _jm_obj_2($$$);
sub json_model_8($$$);
sub json_model_9($$$);
sub _jm_f_5($$$);
sub _jm_f_6($$$);
sub _jm_f_7($$$);
sub _jm_f_8($$$);
sub _jm_f_9($$$);
sub _jm_f_10($$$);
sub _jm_f_11($$$);
sub _jm_f_12($$$);
sub _jm_f_13($$$);
sub _jm_f_14($$$);
my %json_model_10_map;
sub json_model_10($$$);
sub json_model_11($$$);
sub _jm_f_15($$$);
sub _jm_f_16($$$);
sub _jm_f_17($$$);
sub _jm_f_18($$$);
sub _jm_f_19($$$);
my %json_model_12_map;
sub json_model_12($$$);
sub _jm_f_20($$$);
sub _jm_f_21($$$);
sub _jm_f_22($$$);
sub _jm_f_23($$$);
sub _jm_f_24($$$);
sub _jm_f_25($$$);
sub _jm_f_26($$$);
sub _jm_f_27($$$);
sub _jm_f_28($$$);
sub _jm_f_29($$$);
my %json_model_13_map;
sub json_model_13($$$);
sub json_model_14($$$);
my %_jm_cst_0;
sub _jm_obj_4($$$);
sub _jm_obj_3($$$);
my %_jm_cst_1;
sub _jm_f_30($$$);
sub _jm_f_31($$$);
sub _jm_f_32($$$);
sub _jm_f_33($$$);
sub _jm_f_34($$$);
sub _jm_f_35($$$);
sub _jm_f_36($$$);
sub _jm_f_37($$$);
my %_jm_obj_5_map;
sub _jm_obj_5($$$);
sub json_model_20($$$);
my %_jm_cst_2;
sub json_model_17($$$);
sub _jm_obj_6($$$);
sub json_model_21($$$);
sub _jm_obj_7($$$);
sub _jm_obj_8($$$);
sub json_model_22($$$);
sub _jm_obj_9($$$);
sub json_model_23($$$);
sub json_model_24($$$);
sub _jm_obj_10($$$);
sub _jm_obj_11($$$);
sub _jm_obj_12($$$);
sub json_model_25($$$);
sub json_model_26($$$);
sub json_model_27($$$);
sub json_model_28($$$);
sub _jm_obj_14($$$);
sub _jm_obj_13($$$);
sub _jm_obj_16($$$);
sub _jm_obj_15($$$);
sub json_model_29($$$);
sub _jm_obj_18($$$);
sub _jm_obj_17($$$);
sub _jm_f_38($$$);
sub _jm_f_39($$$);
sub _jm_f_40($$$);
sub _jm_f_41($$$);
sub _jm_f_42($$$);
sub _jm_f_43($$$);
sub _jm_f_44($$$);
sub _jm_f_45($$$);
my %_jm_obj_19_map;
sub _jm_obj_19($$$);
sub json_model_30($$$);
sub json_model_31($$$);
sub json_model_32($$$);
my %_jm_cst_3;
sub _jm_obj_20($$$);
sub _jm_obj_21($$$);
sub _jm_obj_22($$$);
sub _jm_obj_23($$$);
sub _jm_obj_24($$$);
sub _jm_obj_25($$$);
my %_jm_map_0;
sub json_model_42($$$);
sub json_model_43($$$);
sub _jm_obj_26($$$);
sub json_model_44($$$);
sub json_model_45($$$);
sub json_model_64($$$);
sub json_model_97($$$);
sub json_model_83($$$);
sub json_model_82($$$);
sub json_model_69($$$);
sub _jm_obj_27($$$);
sub _jm_obj_28($$$);
sub _jm_obj_29($$$);
sub _jm_obj_30($$$);
sub _jm_obj_31($$$);
sub _jm_obj_32($$$);
sub json_model_93($$$);
sub json_model_76($$$);
sub json_model_77($$$);
sub json_model_90($$$);
sub json_model_71($$$);
sub json_model_73($$$);
sub _jm_xre_0($$$);
sub _jm_xre_1($$$);
sub json_model_74($$$);
sub json_model_75($$$);
sub json_model_96($$$);
sub json_model_78($$$);
sub json_model_79($$$);
my %_jm_cst_4;
sub json_model_67($$$);
sub json_model_72($$$);
my %check_model_map;

# check $openapi (.'$openapi')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi'
    return json_model_4($val, $path, $rep);
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .
    return json_model_4($val, $path, $rep);
}

sub _jm_re_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^3\.1\.\d+(-.+)?$/;
    return $res;
}

# check json_model_4_map_jsonModelVersion (.'$openapi#OpenAPI'.jsonModelVersion)
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#OpenAPI'.jsonModelVersion
    return jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
}

# check json_model_4_map_security (.'$openapi#OpenAPI'.security)
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#OpenAPI'.security
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$openapi#OpenAPI'.security.0
            $res = json_model_45($arr_0_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check json_model_4_map_servers (.'$openapi#OpenAPI'.servers)
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#OpenAPI'.servers
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_1_idx (0 .. $#$val)
        {
            my $arr_1_item = $$val[$arr_1_idx];
            # .'$openapi#OpenAPI'.servers.0
            $res = json_model_8($arr_1_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check json_model_4_map_tags (.'$openapi#OpenAPI'.tags)
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#OpenAPI'.tags
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_2_idx (0 .. $#$val)
        {
            my $arr_2_item = $$val[$arr_2_idx];
            # .'$openapi#OpenAPI'.tags.0
            $res = json_model_31($arr_2_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check json_model_4_map_webhooks (.'$openapi#OpenAPI'.webhooks)
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#OpenAPI'.webhooks
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#OpenAPI'.webhooks.''
        $res = json_model_12($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# check $openapi#OpenAPI (.'$openapi#OpenAPI')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#OpenAPI'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'openapi')
        {
            # handle must openapi property
            $must_count++;
            # .'$openapi#OpenAPI'.openapi
            # "/^3\\.1\\.\\d+(-.+)?$/"
            $res = jm_is_string($pval) && _jm_re_0($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'info')
        {
            # handle must info property
            $must_count++;
            # .'$openapi#OpenAPI'.info
            $res = json_model_5($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_4_map{$prop}))
        {
            # handle 8 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#OpenAPI'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# check $openapi#Info (.'$openapi#Info')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Info'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'title')
        {
            # handle must title property
            $must_count++;
            # .'$openapi#Info'.title
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'version')
        {
            # handle must version property
            $must_count++;
            # .'$openapi#Info'.version
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'summary')
        {
            # handle may summary property
            # .'$openapi#Info'.summary
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#Info'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'termsOfService')
        {
            # handle may termsOfService property
            # .'$openapi#Info'.termsOfService
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'contact')
        {
            # handle may contact property
            # .'$openapi#Info'.contact
            $res = json_model_6($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'license')
        {
            # handle may license property
            # .'$openapi#Info'.license
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Info'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# check $openapi#Contact (.'$openapi#Contact')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Contact'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$openapi#Contact'.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'url')
        {
            # handle may url property
            # .'$openapi#Contact'.url
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'email')
        {
            # handle may email property
            # .'$openapi#Contact'.email
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Contact'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

sub _jm_re_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^x\-.*$/;
    return $res;
}

# object .'$openapi#License'.'|'.1
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .'$openapi#License'.'|'.1.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'url')
        {
            # handle must url property
            $must_count++;
            # .'$openapi#License'.'|'.1.url
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$openapi#License'.'|'.1.'/^x\\-.*$/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# object .'$openapi#License'.'|'.0
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .'$openapi#License'.'|'.0.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'identifier')
        {
            # handle must identifier property
            $must_count++;
            # .'$openapi#License'.'|'.0.identifier
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$openapi#License'.'|'.0.'/^x\\-.*$/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# check $openapi#License (.'$openapi#License')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#License'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$openapi#License'.'|'.0
        $res = _jm_obj_1($val, $path, $rep);
        if (! $res)
        {
            # .'$openapi#License'.'|'.1
            $res = _jm_obj_0($val, $path, $rep);
        }
    }
    return $res;
}

# object .'$openapi#Server'.variables
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Server'.variables.''
        $res = json_model_9($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $openapi#Server (.'$openapi#Server')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Server'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'url')
        {
            # handle must url property
            $must_count++;
            # .'$openapi#Server'.url
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#Server'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'variables')
        {
            # handle may variables property
            # .'$openapi#Server'.variables
            $res = _jm_obj_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Server'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check $openapi#ServerVariable (.'$openapi#ServerVariable')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#ServerVariable'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'default')
        {
            # handle must default property
            $must_count++;
            # .'$openapi#ServerVariable'.default
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'enum')
        {
            # handle may enum property
            # .'$openapi#ServerVariable'.enum
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_3_idx (0 .. $#$pval)
                {
                    my $arr_3_item = $$pval[$arr_3_idx];
                    # .'$openapi#ServerVariable'.enum.0
                    $res = jm_is_string($arr_3_item);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#ServerVariable'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#ServerVariable'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check json_model_10_map_callbacks (.'$openapi#Components'.callbacks)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Components'.callbacks
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Components'.callbacks.''
        # .'$openapi#Components'.callbacks.''.'|'.0
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Components'.callbacks.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_10_map_examples (.'$openapi#Components'.examples)
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Components'.examples
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Components'.examples.''
        # .'$openapi#Components'.examples.''.'|'.0
        $res = json_model_27($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Components'.examples.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_10_map_headers (.'$openapi#Components'.headers)
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Components'.headers
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Components'.headers.''
        # .'$openapi#Components'.headers.''.'|'.0
        $res = json_model_30($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Components'.headers.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_10_map_links (.'$openapi#Components'.links)
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Components'.links
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Components'.links.''
        # .'$openapi#Components'.links.''.'|'.0
        $res = json_model_29($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Components'.links.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_10_map_models (.'$openapi#Components'.models)
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Components'.models
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Components'.models.''
        $res = json_model_97($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_10_map_parameters (.'$openapi#Components'.parameters)
sub _jm_f_10($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Components'.parameters
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Components'.parameters.''
        # .'$openapi#Components'.parameters.''.'|'.0
        $res = json_model_20($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Components'.parameters.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_10_map_pathItems (.'$openapi#Components'.pathItems)
sub _jm_f_11($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Components'.pathItems
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Components'.pathItems.''
        # .'$openapi#Components'.pathItems.''.'|'.0
        $res = json_model_12($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Components'.pathItems.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_10_map_requestBodies (.'$openapi#Components'.requestBodies)
sub _jm_f_12($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Components'.requestBodies
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Components'.requestBodies.''
        # .'$openapi#Components'.requestBodies.''.'|'.0
        $res = json_model_21($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Components'.requestBodies.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_10_map_responses (.'$openapi#Components'.responses)
sub _jm_f_13($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Components'.responses
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Components'.responses.''
        # .'$openapi#Components'.responses.''.'|'.0
        $res = json_model_25($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Components'.responses.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_10_map_securitySchemes (.'$openapi#Components'.securitySchemes)
sub _jm_f_14($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Components'.securitySchemes
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Components'.securitySchemes.''
        # .'$openapi#Components'.securitySchemes.''.'|'.0
        $res = json_model_42($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Components'.securitySchemes.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}


# check $openapi#Components (.'$openapi#Components')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Components'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_10_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Components'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $openapi#Paths (.'$openapi#Paths')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Paths'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_starts_with($prop, '/'))
        {
            # handle 2 re props
            # .'$openapi#Paths'.'/^//'
            $res = json_model_12($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 2 re props
            # .'$openapi#Paths'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_12_map_$ref (.'$openapi#PathItem'.'$ref')
sub _jm_f_15($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#PathItem'.'$ref'
    return jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
}

# check json_model_12_map_description (.'$openapi#PathItem'.description)
sub _jm_f_16($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#PathItem'.description
    return jm_is_string($val);
}

# check json_model_12_map_parameters (.'$openapi#PathItem'.parameters)
sub _jm_f_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#PathItem'.parameters
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_4_idx (0 .. $#$val)
        {
            my $arr_4_item = $$val[$arr_4_idx];
            # .'$openapi#PathItem'.parameters.0
            # .'$openapi#PathItem'.parameters.0.'|'.0
            $res = json_model_20($arr_4_item, undef, $rep);
            if (! $res)
            {
                # .'$openapi#PathItem'.parameters.0.'|'.1
                $res = json_model_32($arr_4_item, undef, $rep);
            }
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check json_model_12_map_servers (.'$openapi#PathItem'.servers)
sub _jm_f_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#PathItem'.servers
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_5_idx (0 .. $#$val)
        {
            my $arr_5_item = $$val[$arr_5_idx];
            # .'$openapi#PathItem'.servers.0
            $res = json_model_13($arr_5_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check json_model_12_map_summary (.'$openapi#PathItem'.summary)
sub _jm_f_19($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#PathItem'.summary
    return jm_is_string($val);
}


# check $openapi#PathItem (.'$openapi#PathItem')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#PathItem'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_12_map{$prop}))
        {
            # handle 13 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#PathItem'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_13_map_callbacks (.'$openapi#Operation'.callbacks)
sub _jm_f_20($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Operation'.callbacks
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Operation'.callbacks.''
        # .'$openapi#Operation'.callbacks.''.'|'.0
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Operation'.callbacks.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_13_map_deprecated (.'$openapi#Operation'.deprecated)
sub _jm_f_21($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Operation'.deprecated
    return jm_is_boolean($val);
}

# check json_model_13_map_description (.'$openapi#Operation'.description)
sub _jm_f_22($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Operation'.description
    return jm_is_string($val);
}

# check json_model_13_map_operationId (.'$openapi#Operation'.operationId)
sub _jm_f_23($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Operation'.operationId
    return jm_is_string($val);
}

# check json_model_13_map_parameters (.'$openapi#Operation'.parameters)
sub _jm_f_24($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#Operation'.parameters
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_6_idx (0 .. $#$val)
        {
            my $arr_6_item = $$val[$arr_6_idx];
            # .'$openapi#Operation'.parameters.0
            # .'$openapi#Operation'.parameters.0.'|'.0
            $res = json_model_20($arr_6_item, undef, $rep);
            if (! $res)
            {
                # .'$openapi#Operation'.parameters.0.'|'.1
                $res = json_model_32($arr_6_item, undef, $rep);
            }
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check json_model_13_map_requestBody (.'$openapi#Operation'.requestBody)
sub _jm_f_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#Operation'.requestBody
    # .'$openapi#Operation'.requestBody.'|'.0
    $res = json_model_21($val, $path, $rep);
    if (! $res)
    {
        # .'$openapi#Operation'.requestBody.'|'.1
        $res = json_model_32($val, $path, $rep);
    }
    return $res;
}

# check json_model_13_map_security (.'$openapi#Operation'.security)
sub _jm_f_26($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#Operation'.security
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_7_idx (0 .. $#$val)
        {
            my $arr_7_item = $$val[$arr_7_idx];
            # .'$openapi#Operation'.security.0
            $res = json_model_45($arr_7_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check json_model_13_map_servers (.'$openapi#Operation'.servers)
sub _jm_f_27($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#Operation'.servers
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_8_idx (0 .. $#$val)
        {
            my $arr_8_item = $$val[$arr_8_idx];
            # .'$openapi#Operation'.servers.0
            $res = json_model_8($arr_8_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check json_model_13_map_summary (.'$openapi#Operation'.summary)
sub _jm_f_28($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Operation'.summary
    return jm_is_string($val);
}

# check json_model_13_map_tags (.'$openapi#Operation'.tags)
sub _jm_f_29($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#Operation'.tags
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_9_idx (0 .. $#$val)
        {
            my $arr_9_item = $$val[$arr_9_idx];
            # .'$openapi#Operation'.tags.0
            $res = jm_is_string($arr_9_item);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}


# check $openapi#Operation (.'$openapi#Operation')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Operation'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_13_map{$prop}))
        {
            # handle 12 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Operation'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $openapi#ExternalDocumentation (.'$openapi#ExternalDocumentation')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#ExternalDocumentation'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'url')
        {
            # handle must url property
            $must_count++;
            # .'$openapi#ExternalDocumentation'.url
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#ExternalDocumentation'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#ExternalDocumentation'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}


# object .'$openapi#Parameter'.'|'.1.content
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Parameter'.'|'.1.content.''
        $res = json_model_22($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$openapi#Parameter'.'|'.1
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .'$openapi#Parameter'.'|'.1.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'in')
        {
            # handle must in property
            $must_count++;
            # .'$openapi#Parameter'.'|'.1.in
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_0{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#Parameter'.'|'.1.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'required')
        {
            # handle may required property
            # .'$openapi#Parameter'.'|'.1.required
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'deprecated')
        {
            # handle may deprecated property
            # .'$openapi#Parameter'.'|'.1.deprecated
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'allowEmptyValue')
        {
            # handle may allowEmptyValue property
            # .'$openapi#Parameter'.'|'.1.allowEmptyValue
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'content')
        {
            # handle may content property
            # .'$openapi#Parameter'.'|'.1.content
            $res = _jm_obj_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Parameter'.'|'.1.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}


# check _jm_obj_5_map_allowEmptyValue (.'$openapi#Parameter'.'|'.0.allowEmptyValue)
sub _jm_f_30($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Parameter'.'|'.0.allowEmptyValue
    return jm_is_boolean($val);
}

# check _jm_obj_5_map_allowReserved (.'$openapi#Parameter'.'|'.0.allowReserved)
sub _jm_f_31($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Parameter'.'|'.0.allowReserved
    return jm_is_boolean($val);
}

# check _jm_obj_5_map_deprecated (.'$openapi#Parameter'.'|'.0.deprecated)
sub _jm_f_32($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Parameter'.'|'.0.deprecated
    return jm_is_boolean($val);
}

# check _jm_obj_5_map_description (.'$openapi#Parameter'.'|'.0.description)
sub _jm_f_33($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Parameter'.'|'.0.description
    return jm_is_string($val);
}

# check _jm_obj_5_map_example (.'$openapi#Parameter'.'|'.0.example)
sub _jm_f_34($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Parameter'.'|'.0.example
    return 1;
}

# check _jm_obj_5_map_examples (.'$openapi#Parameter'.'|'.0.examples)
sub _jm_f_35($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Parameter'.'|'.0.examples
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Parameter'.'|'.0.examples.''
        # .'$openapi#Parameter'.'|'.0.examples.''.'|'.0
        $res = json_model_27($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Parameter'.'|'.0.examples.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_5_map_explode (.'$openapi#Parameter'.'|'.0.explode)
sub _jm_f_36($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Parameter'.'|'.0.explode
    return jm_is_boolean($val);
}

# check _jm_obj_5_map_required (.'$openapi#Parameter'.'|'.0.required)
sub _jm_f_37($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Parameter'.'|'.0.required
    return jm_is_boolean($val);
}


# object .'$openapi#Parameter'.'|'.0
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .'$openapi#Parameter'.'|'.0.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'in')
        {
            # handle must in property
            $must_count++;
            # .'$openapi#Parameter'.'|'.0.in
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_1{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_5_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Parameter'.'|'.0.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# check $openapi#Parameter (.'$openapi#Parameter')
sub json_model_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#Parameter'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$openapi#Parameter'.'|'.0
        $res = _jm_obj_5($val, $path, $rep);
        if (! $res)
        {
            # .'$openapi#Parameter'.'|'.1
            $res = _jm_obj_3($val, $path, $rep);
        }
    }
    return $res;
}


# check $openapi#Style (.'$openapi#Style')
sub json_model_17($$$)
{
    my ($val, $path, $rep) = @_;
    # serialization styles
    # .'$openapi#Style'
    return jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_2{$val};
}

# object .'$openapi#RequestBody'.content
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#RequestBody'.content.''
        $res = json_model_22($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $openapi#RequestBody (.'$openapi#RequestBody')
sub json_model_21($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#RequestBody'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#RequestBody'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'content')
        {
            # handle may content property
            # .'$openapi#RequestBody'.content
            $res = _jm_obj_6($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'required')
        {
            # handle may required property
            # .'$openapi#RequestBody'.required
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#RequestBody'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$openapi#MediaType'.examples
sub _jm_obj_7($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#MediaType'.examples.''
        # .'$openapi#MediaType'.examples.''.'|'.0
        $res = json_model_27($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#MediaType'.examples.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$openapi#MediaType'.encoding
sub _jm_obj_8($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#MediaType'.encoding.''
        $res = json_model_23($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $openapi#MediaType (.'$openapi#MediaType')
sub json_model_22($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#MediaType'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'example')
        {
            # handle may example property
            # .'$openapi#MediaType'.example
            $res = 1;
        }
        elsif ($prop eq 'examples')
        {
            # handle may examples property
            # .'$openapi#MediaType'.examples
            $res = _jm_obj_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'encoding')
        {
            # handle may encoding property
            # .'$openapi#MediaType'.encoding
            $res = _jm_obj_8($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'model')
        {
            # handle may model property
            # .'$openapi#MediaType'.model
            $res = json_model_97($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#MediaType'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$openapi#Encoding'.headers
sub _jm_obj_9($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Encoding'.headers.''
        # .'$openapi#Encoding'.headers.''.'|'.0
        $res = json_model_30($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Encoding'.headers.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $openapi#Encoding (.'$openapi#Encoding')
sub json_model_23($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Encoding'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'contentType')
        {
            # handle may contentType property
            # .'$openapi#Encoding'.contentType
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'headers')
        {
            # handle may headers property
            # .'$openapi#Encoding'.headers
            $res = _jm_obj_9($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'style')
        {
            # handle may style property
            # .'$openapi#Encoding'.style
            $res = json_model_17($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'explode')
        {
            # handle may explode property
            # .'$openapi#Encoding'.explode
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'allowReserved')
        {
            # handle may allowReserved property
            # .'$openapi#Encoding'.allowReserved
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Encoding'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

sub _jm_re_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[1-5](\d\d|XX)$/;
    return $res;
}

# check $openapi#Responses (.'$openapi#Responses')
sub json_model_24($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Responses'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'default')
        {
            # handle may default property
            # .'$openapi#Responses'.default
            # .'$openapi#Responses'.default.'|'.0
            $res = json_model_25($pval, undef, $rep);
            if (! $res)
            {
                # .'$openapi#Responses'.default.'|'.1
                $res = json_model_32($pval, undef, $rep);
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_2($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'
            # .'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.0
            $res = json_model_25($pval, undef, $rep);
            if (! $res)
            {
                # .'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.1
                $res = json_model_32($pval, undef, $rep);
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 2 re props
            # .'$openapi#Responses'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$openapi#Response'.headers
sub _jm_obj_10($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Response'.headers.''
        # .'$openapi#Response'.headers.''.'|'.0
        $res = json_model_30($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Response'.headers.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$openapi#Response'.content
sub _jm_obj_11($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Response'.content.''
        $res = json_model_22($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$openapi#Response'.links
sub _jm_obj_12($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Response'.links.''
        # .'$openapi#Response'.links.''.'|'.0
        $res = json_model_29($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Response'.links.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $openapi#Response (.'$openapi#Response')
sub json_model_25($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Response'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#Response'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'headers')
        {
            # handle may headers property
            # .'$openapi#Response'.headers
            $res = _jm_obj_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'content')
        {
            # handle may content property
            # .'$openapi#Response'.content
            $res = _jm_obj_11($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'links')
        {
            # handle may links property
            # .'$openapi#Response'.links
            $res = _jm_obj_12($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Response'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $openapi#Callback (.'$openapi#Callback')
sub json_model_26($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Callback'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (json_model_28($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$openapi#Callback'.'$Expression'
            # .'$openapi#Callback'.'$Expression'.'|'.0
            $res = json_model_12($pval, undef, $rep);
            if (! $res)
            {
                # .'$openapi#Callback'.'$Expression'.'|'.1
                $res = json_model_32($pval, undef, $rep);
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Callback'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $openapi#Example (.'$openapi#Example')
sub json_model_27($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Example'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'summary')
        {
            # handle may summary property
            # .'$openapi#Example'.summary
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#Example'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'value')
        {
            # handle may value property
            # .'$openapi#Example'.value
            $res = 1;
        }
        elsif ($prop eq 'externalValue')
        {
            # handle may externalValue property
            # .'$openapi#Example'.externalValue
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Example'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $openapi#Expression (.'$openapi#Expression')
sub json_model_28($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Expression'
    return jm_is_string($val);
}

# object .'$openapi#Link'.'|'.1.parameters
sub _jm_obj_14($$$)
{
    my ($val, $path, $rep) = @_;
    # accept any object
    return jm_is_object($val);
}

# object .'$openapi#Link'.'|'.1
sub _jm_obj_13($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'operationId')
        {
            # handle must operationId property
            $must_count++;
            # .'$openapi#Link'.'|'.1.operationId
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'parameters')
        {
            # handle may parameters property
            # .'$openapi#Link'.'|'.1.parameters
            $res = _jm_obj_14($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'requestBody')
        {
            # handle may requestBody property
            # .'$openapi#Link'.'|'.1.requestBody
            $res = 1;
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#Link'.'|'.1.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'server')
        {
            # handle may server property
            # .'$openapi#Link'.'|'.1.server
            $res = json_model_8($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Link'.'|'.1.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# object .'$openapi#Link'.'|'.0.parameters
sub _jm_obj_16($$$)
{
    my ($val, $path, $rep) = @_;
    # accept any object
    return jm_is_object($val);
}

# object .'$openapi#Link'.'|'.0
sub _jm_obj_15($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'operationRef')
        {
            # handle must operationRef property
            $must_count++;
            # .'$openapi#Link'.'|'.0.operationRef
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'parameters')
        {
            # handle may parameters property
            # .'$openapi#Link'.'|'.0.parameters
            $res = _jm_obj_16($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'requestBody')
        {
            # handle may requestBody property
            # .'$openapi#Link'.'|'.0.requestBody
            $res = 1;
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#Link'.'|'.0.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'server')
        {
            # handle may server property
            # .'$openapi#Link'.'|'.0.server
            $res = json_model_8($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Link'.'|'.0.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check $openapi#Link (.'$openapi#Link')
sub json_model_29($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#Link'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$openapi#Link'.'|'.0
        $res = _jm_obj_15($val, $path, $rep);
        if (! $res)
        {
            # .'$openapi#Link'.'|'.1
            $res = _jm_obj_13($val, $path, $rep);
        }
    }
    return $res;
}

# object .'$openapi#Header'.'|'.1.content
sub _jm_obj_18($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Header'.'|'.1.content.''
        $res = json_model_22($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$openapi#Header'.'|'.1
sub _jm_obj_17($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#Header'.'|'.1.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'required')
        {
            # handle may required property
            # .'$openapi#Header'.'|'.1.required
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'deprecated')
        {
            # handle may deprecated property
            # .'$openapi#Header'.'|'.1.deprecated
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'allowEmptyValue')
        {
            # handle may allowEmptyValue property
            # .'$openapi#Header'.'|'.1.allowEmptyValue
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'content')
        {
            # handle may content property
            # .'$openapi#Header'.'|'.1.content
            $res = _jm_obj_18($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Header'.'|'.1.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_19_map_allowEmptyValue (.'$openapi#Header'.'|'.0.allowEmptyValue)
sub _jm_f_38($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Header'.'|'.0.allowEmptyValue
    return jm_is_boolean($val);
}

# check _jm_obj_19_map_allowReserved (.'$openapi#Header'.'|'.0.allowReserved)
sub _jm_f_39($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Header'.'|'.0.allowReserved
    return jm_is_boolean($val);
}

# check _jm_obj_19_map_deprecated (.'$openapi#Header'.'|'.0.deprecated)
sub _jm_f_40($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Header'.'|'.0.deprecated
    return jm_is_boolean($val);
}

# check _jm_obj_19_map_description (.'$openapi#Header'.'|'.0.description)
sub _jm_f_41($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Header'.'|'.0.description
    return jm_is_string($val);
}

# check _jm_obj_19_map_example (.'$openapi#Header'.'|'.0.example)
sub _jm_f_42($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Header'.'|'.0.example
    return 1;
}

# check _jm_obj_19_map_examples (.'$openapi#Header'.'|'.0.examples)
sub _jm_f_43($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Header'.'|'.0.examples
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#Header'.'|'.0.examples.''
        # .'$openapi#Header'.'|'.0.examples.''.'|'.0
        $res = json_model_27($pval, undef, $rep);
        if (! $res)
        {
            # .'$openapi#Header'.'|'.0.examples.''.'|'.1
            $res = json_model_32($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_19_map_explode (.'$openapi#Header'.'|'.0.explode)
sub _jm_f_44($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Header'.'|'.0.explode
    return jm_is_boolean($val);
}

# check _jm_obj_19_map_required (.'$openapi#Header'.'|'.0.required)
sub _jm_f_45($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Header'.'|'.0.required
    return jm_is_boolean($val);
}


# object .'$openapi#Header'.'|'.0
sub _jm_obj_19($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_19_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Header'.'|'.0.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $openapi#Header (.'$openapi#Header')
sub json_model_30($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # more or less a parameter but without name and in
    # .'$openapi#Header'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$openapi#Header'.'|'.0
        $res = _jm_obj_19($val, $path, $rep);
        if (! $res)
        {
            # .'$openapi#Header'.'|'.1
            $res = _jm_obj_17($val, $path, $rep);
        }
    }
    return $res;
}

# check $openapi#Tag (.'$openapi#Tag')
sub json_model_31($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Tag'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .'$openapi#Tag'.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#Tag'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'externalDocs')
        {
            # handle may externalDocs property
            # .'$openapi#Tag'.externalDocs
            $res = json_model_14($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#Tag'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check $openapi#Reference (.'$openapi#Reference')
sub json_model_32($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Reference'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '$ref')
        {
            # handle must $ref property
            $must_count++;
            # .'$openapi#Reference'.'$ref'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'summary')
        {
            # handle may summary property
            # .'$openapi#Reference'.summary
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#Reference'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}


# object .'$openapi#SecurityScheme'.'|'.0
sub _jm_obj_20($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$openapi#SecurityScheme'.'|'.0.type
            $res = jm_is_string($pval) && $pval eq 'apiKey';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .'$openapi#SecurityScheme'.'|'.0.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'in')
        {
            # handle must in property
            $must_count++;
            # .'$openapi#SecurityScheme'.'|'.0.in
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_3{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#SecurityScheme'.'|'.0.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 3;
}

sub _jm_re_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /bearer/i;
    return $res;
}

# object .'$openapi#SecurityScheme'.'|'.1
sub _jm_obj_21($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$openapi#SecurityScheme'.'|'.1.type
            $res = jm_is_string($pval) && $pval eq 'http';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'scheme')
        {
            # handle must scheme property
            $must_count++;
            # .'$openapi#SecurityScheme'.'|'.1.scheme
            # "/bearer/i"
            $res = jm_is_string($pval) && _jm_re_3($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'bearerFormat')
        {
            # handle may bearerFormat property
            # .'$openapi#SecurityScheme'.'|'.1.bearerFormat
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#SecurityScheme'.'|'.1.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# object .'$openapi#SecurityScheme'.'|'.2
sub _jm_obj_22($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$openapi#SecurityScheme'.'|'.2.type
            $res = jm_is_string($pval) && $pval eq 'http';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'scheme')
        {
            # handle must scheme property
            $must_count++;
            # .'$openapi#SecurityScheme'.'|'.2.scheme
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#SecurityScheme'.'|'.2.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# object .'$openapi#SecurityScheme'.'|'.3
sub _jm_obj_23($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$openapi#SecurityScheme'.'|'.3.type
            $res = jm_is_string($pval) && $pval eq 'oauth2';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'flows')
        {
            # handle must flows property
            $must_count++;
            # .'$openapi#SecurityScheme'.'|'.3.flows
            $res = json_model_43($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#SecurityScheme'.'|'.3.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# object .'$openapi#SecurityScheme'.'|'.4
sub _jm_obj_24($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$openapi#SecurityScheme'.'|'.4.type
            $res = jm_is_string($pval) && $pval eq 'openIdConnect';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'openIdConnectUrl')
        {
            # handle must openIdConnectUrl property
            $must_count++;
            # .'$openapi#SecurityScheme'.'|'.4.openIdConnectUrl
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#SecurityScheme'.'|'.4.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# object .'$openapi#SecurityScheme'.'|'.5
sub _jm_obj_25($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'description')
        {
            # handle may description property
            # .'$openapi#SecurityScheme'.'|'.5.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#SecurityScheme'.'|'.5.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}


# check $openapi#SecurityScheme (.'$openapi#SecurityScheme')
sub json_model_42($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#SecurityScheme'
    my $iso_0 = jm_is_object($val);
    $res = $iso_0;
    if ($res)
    {
        if (exists $$val{'type'})
        {
            my $tag_0 = $$val{'type'};
            my $fun_0 = $_jm_map_0{$tag_0};
            if (defined($fun_0))
            {
                $res = &$fun_0($val, $path, $rep);
            }
            else
            {
                $res = 0;
            }
        }
        else
        {
            $res = 0;
        }
    }
    else
    {
        ;
    }
    if (! $res)
    {
        # .'$openapi#SecurityScheme'.'|'.5
        $res = _jm_obj_25($val, $path, $rep);
        if (! $res)
        {
            # .'$openapi#SecurityScheme'.'|'.2
            $res = _jm_obj_22($val, $path, $rep);
        }
    }
    return $res;
}

# check $openapi#OAuthFlows (.'$openapi#OAuthFlows')
sub json_model_43($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#OAuthFlows'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'implicit')
        {
            # handle may implicit property
            # .'$openapi#OAuthFlows'.implicit
            $res = json_model_44($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'password')
        {
            # handle may password property
            # .'$openapi#OAuthFlows'.password
            $res = json_model_44($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'clientCredentials')
        {
            # handle may clientCredentials property
            # .'$openapi#OAuthFlows'.clientCredentials
            $res = json_model_44($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'authorizationCode')
        {
            # handle may authorizationCode property
            # .'$openapi#OAuthFlows'.authorizationCode
            $res = json_model_44($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#OAuthFlows'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$openapi#OAuthFlow'.scopes
sub _jm_obj_26($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#OAuthFlow'.scopes.''
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $openapi#OAuthFlow (.'$openapi#OAuthFlow')
sub json_model_44($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#OAuthFlow'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'authorizationUrl')
        {
            # handle must authorizationUrl property
            $must_count++;
            # .'$openapi#OAuthFlow'.authorizationUrl
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'tokenUrl')
        {
            # handle must tokenUrl property
            $must_count++;
            # .'$openapi#OAuthFlow'.tokenUrl
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'scopes')
        {
            # handle must scopes property
            $must_count++;
            # .'$openapi#OAuthFlow'.scopes
            $res = _jm_obj_26($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'refreshUrl')
        {
            # handle may refreshUrl property
            # .'$openapi#OAuthFlow'.refreshUrl
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$openapi#OAuthFlow'.'/^x-/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 3;
}

# check $openapi#SecurityRequirement (.'$openapi#SecurityRequirement')
sub json_model_45($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#SecurityRequirement'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$openapi#SecurityRequirement'.''
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_10_idx (0 .. $#$pval)
            {
                my $arr_10_item = $$pval[$arr_10_idx];
                # .'$openapi#SecurityRequirement'.''.0
                $res = jm_is_string($arr_10_item);
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $openapi#Model (.'$openapi#Model')
sub json_model_64($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#Model'
    return json_model_97($val, $path, $rep);
}

# check $openapi#model#Model (.'$openapi#model#Model')
sub json_model_97($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#model#Model'
    # .'$openapi#model#Model'.'|'.0
    $res = json_model_96($val, $path, $rep);
    if (! $res)
    {
        # .'$openapi#model#Model'.'|'.1
        $res = json_model_83($val, $path, $rep);
        if (! $res)
        {
            # .'$openapi#model#Model'.'|'.2
            $res = json_model_93($val, $path, $rep);
        }
    }
    return $res;
}

# check $openapi#model#Array (.'$openapi#model#Array')
sub json_model_83($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#model#Array'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_11_idx (0 .. $#$val)
        {
            my $arr_11_item = $$val[$arr_11_idx];
            # .'$openapi#model#Array'.0
            $res = json_model_82($arr_11_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check $openapi#model#CModel (.'$openapi#model#CModel')
sub json_model_82($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#model#CModel'
    # .'$openapi#model#CModel'.'|'.0
    $res = json_model_97($val, $path, $rep);
    if (! $res)
    {
        # .'$openapi#model#CModel'.'|'.1
        $res = json_model_69($val, $path, $rep);
    }
    return $res;
}

# check $openapi#model#ArrayComment (.'$openapi#model#ArrayComment')
sub json_model_69($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#model#ArrayComment'
    # "/^#/"
    return jm_is_string($val) && jm_starts_with($val, '#');
}

# object .'$openapi#model#Element'.'|'.5
sub _jm_obj_27($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$openapi#model#Element'.'|'.5.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_90($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$openapi#model#Element'.'|'.5.'$Prop'
            $res = json_model_97($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$openapi#model#Element'.'|'.5.'/^#/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$openapi#model#Element'.'|'.4
sub _jm_obj_28($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '+')
        {
            # handle must + property
            $must_count++;
            # .'$openapi#model#Element'.'|'.4.'+'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_12_idx (0 .. $#$pval)
                {
                    my $arr_12_item = $$pval[$arr_12_idx];
                    # .'$openapi#model#Element'.'|'.4.'+'.0
                    $res = json_model_82($arr_12_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$openapi#model#Element'.'|'.4.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$openapi#model#Element'.'|'.4.'/^#/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# object .'$openapi#model#Element'.'|'.3
sub _jm_obj_29($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$openapi#model#Element'.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_13_idx (0 .. $#$pval)
                {
                    my $arr_13_item = $$pval[$arr_13_idx];
                    # .'$openapi#model#Element'.'|'.3.'^'.0
                    $res = json_model_82($arr_13_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$openapi#model#Element'.'|'.3.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$openapi#model#Element'.'|'.3.'/^#/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# object .'$openapi#model#Element'.'|'.2
sub _jm_obj_30($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$openapi#model#Element'.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_14_idx (0 .. $#$pval)
                {
                    my $arr_14_item = $$pval[$arr_14_idx];
                    # .'$openapi#model#Element'.'|'.2.'&'.0
                    $res = json_model_82($arr_14_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$openapi#model#Element'.'|'.2.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$openapi#model#Element'.'|'.2.'/^#/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# object .'$openapi#model#Element'.'|'.1
sub _jm_obj_31($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$openapi#model#Element'.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_15_idx (0 .. $#$pval)
                {
                    my $arr_15_item = $$pval[$arr_15_idx];
                    # .'$openapi#model#Element'.'|'.1.'|'.0
                    $res = json_model_82($arr_15_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$openapi#model#Element'.'|'.1.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$openapi#model#Element'.'|'.1.'/^#/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

sub _jm_re_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^(<=|>=|<|>)$/;
    return $res;
}

sub _jm_re_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^(=|!=)$/;
    return $res;
}

# object .'$openapi#model#Element'.'|'.0
sub _jm_obj_32($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$openapi#model#Element'.'|'.0.'@'
            $res = json_model_97($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$openapi#model#Element'.'|'.0.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$openapi#model#Element'.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 3 re props
            # .'$openapi#model#Element'.'|'.0.'/^#/'
            $res = 1;
        }
        elsif (_jm_re_4($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$openapi#model#Element'.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_76($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_5($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$openapi#model#Element'.'|'.0.'/^(=|!=)$/'
            $res = json_model_77($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check $openapi#model#Element (.'$openapi#model#Element')
sub json_model_93($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#model#Element'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$openapi#model#Element'.'|'.0
        $res = _jm_obj_32($val, $path, $rep);
        if (! $res)
        {
            # .'$openapi#model#Element'.'|'.1
            $res = _jm_obj_31($val, $path, $rep);
            if (! $res)
            {
                # .'$openapi#model#Element'.'|'.2
                $res = _jm_obj_30($val, $path, $rep);
                if (! $res)
                {
                    # .'$openapi#model#Element'.'|'.3
                    $res = _jm_obj_29($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$openapi#model#Element'.'|'.4
                        $res = _jm_obj_28($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$openapi#model#Element'.'|'.5
                            $res = _jm_obj_27($val, $path, $rep);
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# check $openapi#model#CmpValue (.'$openapi#model#CmpValue')
sub json_model_76($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#model#CmpValue'
    # .'$openapi#model#CmpValue'.'|'.0
    $res = jm_is_integer($val);
    if (! $res)
    {
        # .'$openapi#model#CmpValue'.'|'.1
        $res = jm_is_numeric($val);
        if (! $res)
        {
            # .'$openapi#model#CmpValue'.'|'.2
            $res = jm_is_string($val);
        }
    }
    return $res;
}

# check $openapi#model#EqValue (.'$openapi#model#EqValue')
sub json_model_77($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#model#EqValue'
    # .'$openapi#model#EqValue'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$openapi#model#EqValue'.'|'.1
        $res = jm_is_boolean($val);
        if (! $res)
        {
            # .'$openapi#model#EqValue'.'|'.2
            $res = json_model_76($val, $path, $rep);
        }
    }
    return $res;
}

sub _jm_re_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[?!]/;
    return $res;
}

# check $openapi#model#Prop (.'$openapi#model#Prop')
sub json_model_90($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#model#Prop'
    # .'$openapi#model#Prop'.'|'.0
    # "/^[?!]/"
    $res = jm_is_string($val) && _jm_re_6($val, $path, $rep);
    if (! $res)
    {
        # .'$openapi#model#Prop'.'|'.1
        $res = json_model_73($val, $path, $rep);
        if (! $res)
        {
            # .'$openapi#model#Prop'.'|'.2
            $res = json_model_74($val, $path, $rep);
            if (! $res)
            {
                # .'$openapi#model#Prop'.'|'.3
                $res = json_model_71($val, $path, $rep);
                if (! $res)
                {
                    # .'$openapi#model#Prop'.'|'.4
                    $res = json_model_75($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$openapi#model#Prop'.'|'.5
                        $res = jm_is_string($val) && $val eq '';
                    }
                }
            }
        }
    }
    return $res;
}

sub _jm_re_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\$./;
    return $res;
}

# check $openapi#model#Ref (.'$openapi#model#Ref')
sub json_model_71($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#model#Ref'
    # "/^\\$./"
    return jm_is_string($val) && _jm_re_7($val, $path, $rep);
}

sub _jm_re_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[A-Za-z0-9_]/;
    return $res;
}

# check $openapi#model#StrConst (.'$openapi#model#StrConst')
sub json_model_73($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#model#StrConst'
    # "/^[A-Za-z0-9_]/"
    return jm_is_string($val) && _jm_re_8($val, $path, $rep);
}

sub _jm_xre_0_re($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\/(?<s1>.*)\/[a-z]*$/;
    return $res;
}

sub _jm_xre_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $extract;
    my $match = $val =~ /^\/(?<s1>.*)\/[a-z]*$/;
    if (! $match)
    {
        return 0;
    }
    $extract = $+{'s1'};
    if (! (jm_is_string($extract) && jm_is_valid_regex($extract, $path, $rep)))
    {
        return 0;
    }
    return 1;
}

sub _jm_xre_1_re($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\/(?<s1>.*)\/[a-z]*X[a-z]*$/;
    return $res;
}

sub _jm_xre_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $extract;
    my $match = $val =~ /^\/(?<s1>.*)\/[a-z]*X[a-z]*$/;
    if (! $match)
    {
        return 0;
    }
    $extract = $+{'s1'};
    if (! (jm_is_string($extract) && jm_is_valid_exreg($extract, $path, $rep)))
    {
        return 0;
    }
    return 1;
}

# check $openapi#model#Regex (.'$openapi#model#Regex')
sub json_model_74($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#model#Regex'
    $res = jm_is_string($val);
    if ($res)
    {
        # .'$openapi#model#Regex'.'|'.0
        # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
        $res = _jm_xre_1($val, $path, $rep);
        if (! $res)
        {
            # .'$openapi#model#Regex'.'|'.1
            # "/^/($REGEX)/[a-z]*$/X"
            $res = _jm_xre_0($val, $path, $rep);
        }
    }
    return $res;
}

sub _jm_re_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\..+$/;
    return $res;
}

# check $openapi#model#Name (.'$openapi#model#Name')
sub json_model_75($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#model#Name'
    # "/^\\..+$/"
    return jm_is_string($val) && _jm_re_9($val, $path, $rep);
}

# check $openapi#model#ScalarModel (.'$openapi#model#ScalarModel')
sub json_model_96($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#model#ScalarModel'
    # .'$openapi#model#ScalarModel'.'|'.0
    $res = json_model_78($val, $path, $rep);
    if (! $res)
    {
        # .'$openapi#model#ScalarModel'.'|'.1
        $res = json_model_79($val, $path, $rep);
    }
    return $res;
}

# check $openapi#model#ValModel (.'$openapi#model#ValModel')
sub json_model_78($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#model#ValModel'
    # .'$openapi#model#ValModel'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$openapi#model#ValModel'.'|'.1
        $res = jm_is_boolean($val) && $val == 1;
        if (! $res)
        {
            # .'$openapi#model#ValModel'.'|'.2
            $res = jm_is_integer($val) && $val == 0;
            if (! $res)
            {
                # .'$openapi#model#ValModel'.'|'.3
                $res = jm_is_integer($val) && $val == 1;
                if (! $res)
                {
                    # .'$openapi#model#ValModel'.'|'.4
                    $res = jm_is_integer($val) && $val == -1;
                    if (! $res)
                    {
                        # .'$openapi#model#ValModel'.'|'.5
                        $res = jm_is_numeric($val) && $val == 0.0;
                        if (! $res)
                        {
                            # .'$openapi#model#ValModel'.'|'.6
                            $res = jm_is_numeric($val) && $val == 1.0;
                            if (! $res)
                            {
                                # .'$openapi#model#ValModel'.'|'.7
                                $res = jm_is_numeric($val) && $val == -1.0;
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# check $openapi#model#StrModel (.'$openapi#model#StrModel')
sub json_model_79($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$openapi#model#StrModel'
    # .'$openapi#model#StrModel'.'|'.0
    $res = json_model_73($val, $path, $rep);
    if (! $res)
    {
        # .'$openapi#model#StrModel'.'|'.1
        $res = json_model_72($val, $path, $rep);
        if (! $res)
        {
            # .'$openapi#model#StrModel'.'|'.2
            $res = json_model_74($val, $path, $rep);
            if (! $res)
            {
                # .'$openapi#model#StrModel'.'|'.3
                $res = json_model_67($val, $path, $rep);
                if (! $res)
                {
                    # .'$openapi#model#StrModel'.'|'.4
                    $res = json_model_71($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$openapi#model#StrModel'.'|'.5
                        $res = jm_is_string($val) && $val eq '';
                    }
                }
            }
        }
    }
    return $res;
}


# check $openapi#model#PreDef (.'$openapi#model#PreDef')
sub json_model_67($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#model#PreDef'
    return jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_4{$val};
}

sub _jm_re_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^=(null|true|false|[-+]?\d+(\.\d+)?([Ee][-+]?\d+)?)$/;
    return $res;
}

# check $openapi#model#ValConst (.'$openapi#model#ValConst')
sub json_model_72($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$openapi#model#ValConst'
    # "/^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$/"
    return jm_is_string($val) && _jm_re_10($val, $path, $rep);
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %json_model_4_map = (
            'components' => \&json_model_10,
            'externalDocs' => \&json_model_14,
            'jsonModelVersion' => \&_jm_f_0,
            'paths' => \&json_model_11,
            'security' => \&_jm_f_1,
            'servers' => \&_jm_f_2,
            'tags' => \&_jm_f_3,
            'webhooks' => \&_jm_f_4,
        );
        %json_model_10_map = (
            'callbacks' => \&_jm_f_5,
            'examples' => \&_jm_f_6,
            'headers' => \&_jm_f_7,
            'links' => \&_jm_f_8,
            'models' => \&_jm_f_9,
            'parameters' => \&_jm_f_10,
            'pathItems' => \&_jm_f_11,
            'requestBodies' => \&_jm_f_12,
            'responses' => \&_jm_f_13,
            'securitySchemes' => \&_jm_f_14,
        );
        %json_model_12_map = (
            '$ref' => \&_jm_f_15,
            'delete' => \&json_model_13,
            'description' => \&_jm_f_16,
            'get' => \&json_model_13,
            'head' => \&json_model_13,
            'options' => \&json_model_13,
            'parameters' => \&_jm_f_17,
            'patch' => \&json_model_13,
            'post' => \&json_model_13,
            'put' => \&json_model_13,
            'servers' => \&_jm_f_18,
            'summary' => \&_jm_f_19,
            'trace' => \&json_model_13,
        );
        %json_model_13_map = (
            'callbacks' => \&_jm_f_20,
            'deprecated' => \&_jm_f_21,
            'description' => \&_jm_f_22,
            'externalDocs' => \&json_model_14,
            'operationId' => \&_jm_f_23,
            'parameters' => \&_jm_f_24,
            'requestBody' => \&_jm_f_25,
            'responses' => \&json_model_24,
            'security' => \&_jm_f_26,
            'servers' => \&_jm_f_27,
            'summary' => \&_jm_f_28,
            'tags' => \&_jm_f_29,
        );
        %_jm_cst_0 = (
            'query' => 1,
            'header' => 1,
            'path' => 1,
            'cookie' => 1,
        );
        %_jm_cst_1 = (
            'query' => 1,
            'header' => 1,
            'path' => 1,
            'cookie' => 1,
        );
        %_jm_obj_5_map = (
            'allowEmptyValue' => \&_jm_f_30,
            'allowReserved' => \&_jm_f_31,
            'deprecated' => \&_jm_f_32,
            'description' => \&_jm_f_33,
            'example' => \&_jm_f_34,
            'examples' => \&_jm_f_35,
            'explode' => \&_jm_f_36,
            'model' => \&json_model_97,
            'required' => \&_jm_f_37,
            'style' => \&json_model_17,
        );
        %_jm_cst_2 = (
            'matrix' => 1,
            'label' => 1,
            'form' => 1,
            'simple' => 1,
            'spaceDelimited' => 1,
            'pipeDelimited' => 1,
            'deepObject' => 1,
        );
        %_jm_obj_19_map = (
            'allowEmptyValue' => \&_jm_f_38,
            'allowReserved' => \&_jm_f_39,
            'deprecated' => \&_jm_f_40,
            'description' => \&_jm_f_41,
            'example' => \&_jm_f_42,
            'examples' => \&_jm_f_43,
            'explode' => \&_jm_f_44,
            'model' => \&json_model_97,
            'required' => \&_jm_f_45,
            'style' => \&json_model_17,
        );
        %_jm_cst_3 = (
            'query' => 1,
            'header' => 1,
            'cookie' => 1,
        );
        %_jm_map_0 = (
            'apiKey' => \&_jm_obj_20,
            'http' => \&_jm_obj_21,
            'oauth2' => \&_jm_obj_23,
            'openIdConnect' => \&_jm_obj_24,
        );
        %_jm_cst_4 = (
            '$DATE' => 1,
            '$TIME' => 1,
            '$DATETIME' => 1,
            '$URL' => 1,
            '$URI' => 1,
            '$UUID' => 1,
            '$EMAIL' => 1,
            '$REGEX' => 1,
            '$EXREG' => 1,
            '$NULL' => 1,
            '$BOOL' => 1,
            '$FLOAT' => 1,
            '$F16' => 1,
            '$F32' => 1,
            '$F64' => 1,
            '$NUMBER' => 1,
            '$INT' => 1,
            '$INTEGER' => 1,
            '$I8' => 1,
            '$I16' => 1,
            '$I32' => 1,
            '$I64' => 1,
            '$U8' => 1,
            '$U16' => 1,
            '$U32' => 1,
            '$U64' => 1,
            '$STRING' => 1,
            '$NONE' => 1,
            '$ANY' => 1,
        );
        %check_model_map = (
            '' => \&json_model_4,
            'openapi' => \&json_model_4,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %json_model_4_map = ();
        %json_model_10_map = ();
        %json_model_12_map = ();
        %json_model_13_map = ();
        %_jm_cst_0 = ();
        %_jm_cst_1 = ();
        %_jm_obj_5_map = ();
        %_jm_cst_2 = ();
        %_jm_obj_19_map = ();
        %_jm_cst_3 = ();
        %_jm_map_0 = ();
        %_jm_cst_4 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
