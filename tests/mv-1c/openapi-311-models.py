#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_re_0_reco: object
_jm_re_0: RegexFun
json_model_4_map: PropMap
_jm_re_1_reco: object
_jm_re_1: RegexFun
json_model_10_map: PropMap
json_model_12_map: PropMap
json_model_13_map: PropMap
_jm_cst_0: set[str]
_jm_cst_1: set[str]
_jm_obj_5_map: PropMap
_jm_cst_2: set[str]
_jm_re_2_reco: object
_jm_re_2: RegexFun
_jm_obj_19_map: PropMap
_jm_cst_3: set[str]
_jm_re_3_reco: object
_jm_re_3: RegexFun
_jm_map_0: dict[str, str]
_jm_re_4_reco: object
_jm_re_4: RegexFun
_jm_re_5_reco: object
_jm_re_5: RegexFun
_jm_re_6_reco: object
_jm_re_6: RegexFun
_jm_re_7_reco: object
_jm_re_7: RegexFun
_jm_re_8_reco: object
_jm_re_8: RegexFun
_jm_xre_0_re_reco: object
_jm_xre_0_re: RegexFun
_jm_xre_0: RegexFun
_jm_xre_1_re_reco: object
_jm_xre_1_re: RegexFun
_jm_xre_1: RegexFun
_jm_re_9_reco: object
_jm_re_9: RegexFun
_jm_cst_4: set[str]
_jm_re_10_reco: object
_jm_re_10: RegexFun
check_model_map: PropMap

# check $openapi (.'$openapi')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $OpenAPI [.'$openapi']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $openapi [.]", path))
    return res


# check json_model_4_map_jsonModelVersion (.'$openapi#OpenAPI'.jsonModelVersion)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#OpenAPI'.jsonModelVersion
    res = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URL [.'$openapi#OpenAPI'.jsonModelVersion]", path))
    return res

# check json_model_4_map_security (.'$openapi#OpenAPI'.security)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#OpenAPI'.security
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$openapi#OpenAPI'.security.0
            res = json_model_45(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $SecurityRequirement [.'$openapi#OpenAPI'.security.0]", arr_0_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$openapi#OpenAPI'.security]", path))
    return res

# check json_model_4_map_servers (.'$openapi#OpenAPI'.servers)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#OpenAPI'.servers
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$openapi#OpenAPI'.servers.0
            res = json_model_8(arr_1_item, arr_1_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [.'$openapi#OpenAPI'.servers.0]", arr_1_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$openapi#OpenAPI'.servers]", path))
    return res

# check json_model_4_map_tags (.'$openapi#OpenAPI'.tags)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#OpenAPI'.tags
    res = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # .'$openapi#OpenAPI'.tags.0
            res = json_model_31(arr_2_item, arr_2_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Tag [.'$openapi#OpenAPI'.tags.0]", arr_2_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$openapi#OpenAPI'.tags]", path))
    return res

# check json_model_4_map_webhooks (.'$openapi#OpenAPI'.webhooks)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#OpenAPI'.webhooks
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#OpenAPI'.webhooks]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#OpenAPI'.webhooks.''
        res = json_model_12(pval, lpath_1 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $PathItem [.'$openapi#OpenAPI'.webhooks.'']", lpath_1 if path is not None else None))
            return False
    return True


# check $openapi#OpenAPI (.'$openapi#OpenAPI')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#OpenAPI'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#OpenAPI']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "openapi":
            # handle must openapi property
            must_count += 1
            # .'$openapi#OpenAPI'.openapi
            # "/^3\\.1\\.\\d+(-.+)?$/"
            res = isinstance(pval, str) and _jm_re_0(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^3\\.1\\.\\d+(-.+)?$/ [.'$openapi#OpenAPI'.openapi]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#OpenAPI'.openapi]", lpath_0 if path is not None else None))
                return False
        elif prop == "info":
            # handle must info property
            must_count += 1
            # .'$openapi#OpenAPI'.info
            res = json_model_5(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Info [.'$openapi#OpenAPI'.info]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#OpenAPI'.info]", lpath_0 if path is not None else None))
                return False
        elif pfun := json_model_4_map.get(prop):
            # handle 8 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$openapi#OpenAPI']", lpath_0 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#OpenAPI'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#OpenAPI']", lpath_0 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "info" in val:
                rep is None or rep.append(("missing mandatory prop <info> [.'$openapi#OpenAPI']", path))
            if not "openapi" in val:
                rep is None or rep.append(("missing mandatory prop <openapi> [.'$openapi#OpenAPI']", path))
        return False
    return True

# check $openapi#Info (.'$openapi#Info')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Info'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Info']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "title":
            # handle must title property
            must_count += 1
            # .'$openapi#Info'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Info'.title]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#Info'.title]", lpath_2 if path is not None else None))
                return False
        elif prop == "version":
            # handle must version property
            must_count += 1
            # .'$openapi#Info'.version
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Info'.version]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#Info'.version]", lpath_2 if path is not None else None))
                return False
        elif prop == "summary":
            # handle may summary property
            # .'$openapi#Info'.summary
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Info'.summary]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Info'.summary]", lpath_2 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$openapi#Info'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Info'.description]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Info'.description]", lpath_2 if path is not None else None))
                return False
        elif prop == "termsOfService":
            # handle may termsOfService property
            # .'$openapi#Info'.termsOfService
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Info'.termsOfService]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Info'.termsOfService]", lpath_2 if path is not None else None))
                return False
        elif prop == "contact":
            # handle may contact property
            # .'$openapi#Info'.contact
            res = json_model_6(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Contact [.'$openapi#Info'.contact]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Info'.contact]", lpath_2 if path is not None else None))
                return False
        elif prop == "license":
            # handle may license property
            # .'$openapi#Info'.license
            res = json_model_7(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $License [.'$openapi#Info'.license]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Info'.license]", lpath_2 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Info'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Info']", lpath_2 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "title" in val:
                rep is None or rep.append(("missing mandatory prop <title> [.'$openapi#Info']", path))
            if not "version" in val:
                rep is None or rep.append(("missing mandatory prop <version> [.'$openapi#Info']", path))
        return False
    return True

# check $openapi#Contact (.'$openapi#Contact')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Contact'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Contact']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$openapi#Contact'.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Contact'.name]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Contact'.name]", lpath_3 if path is not None else None))
                return False
        elif prop == "url":
            # handle may url property
            # .'$openapi#Contact'.url
            res = is_valid_url(pval, lpath_3 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$openapi#Contact'.url]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Contact'.url]", lpath_3 if path is not None else None))
                return False
        elif prop == "email":
            # handle may email property
            # .'$openapi#Contact'.email
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Contact'.email]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Contact'.email]", lpath_3 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Contact'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Contact']", lpath_3 if path is not None else None))
            return False
    return True


# object .'$openapi#License'.'|'.1
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#License'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$openapi#License'.'|'.1.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#License'.'|'.1.name]", lpath_4 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#License'.'|'.1.name]", lpath_4 if path is not None else None))
                return False
        elif prop == "url":
            # handle must url property
            must_count += 1
            # .'$openapi#License'.'|'.1.url
            res = is_valid_url(pval, lpath_4 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$openapi#License'.'|'.1.url]", lpath_4 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#License'.'|'.1.url]", lpath_4 if path is not None else None))
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .'$openapi#License'.'|'.1.'/^x\\-.*$/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#License'.'|'.1]", lpath_4 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$openapi#License'.'|'.1]", path))
            if not "url" in val:
                rep is None or rep.append(("missing mandatory prop <url> [.'$openapi#License'.'|'.1]", path))
        return False
    return True

# object .'$openapi#License'.'|'.0
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#License'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$openapi#License'.'|'.0.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#License'.'|'.0.name]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#License'.'|'.0.name]", lpath_5 if path is not None else None))
                return False
        elif prop == "identifier":
            # handle must identifier property
            must_count += 1
            # .'$openapi#License'.'|'.0.identifier
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#License'.'|'.0.identifier]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#License'.'|'.0.identifier]", lpath_5 if path is not None else None))
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .'$openapi#License'.'|'.0.'/^x\\-.*$/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#License'.'|'.0]", lpath_5 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "identifier" in val:
                rep is None or rep.append(("missing mandatory prop <identifier> [.'$openapi#License'.'|'.0]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$openapi#License'.'|'.0]", path))
        return False
    return True

# check $openapi#License (.'$openapi#License')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#License'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$openapi#License'.'|']", path))
    if res:
        # .'$openapi#License'.'|'.0
        res = _jm_obj_1(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$openapi#License'.'|'.0]", path))
        if not res:
            # .'$openapi#License'.'|'.1
            res = _jm_obj_0(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#License'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#License'.'|']", path))
    return res

# object .'$openapi#Server'.variables
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Server'.variables]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Server'.variables.''
        res = json_model_9(pval, lpath_7 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $ServerVariable [.'$openapi#Server'.variables.'']", lpath_7 if path is not None else None))
            return False
    return True

# check $openapi#Server (.'$openapi#Server')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Server'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Server']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "url":
            # handle must url property
            must_count += 1
            # .'$openapi#Server'.url
            res = is_valid_url(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$openapi#Server'.url]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#Server'.url]", lpath_6 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$openapi#Server'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Server'.description]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Server'.description]", lpath_6 if path is not None else None))
                return False
        elif prop == "variables":
            # handle may variables property
            # .'$openapi#Server'.variables
            res = _jm_obj_2(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#Server'.variables]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Server'.variables]", lpath_6 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Server'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Server']", lpath_6 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "url" in val:
                rep is None or rep.append(("missing mandatory prop <url> [.'$openapi#Server']", path))
        return False
    return True

# check $openapi#ServerVariable (.'$openapi#ServerVariable')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#ServerVariable'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#ServerVariable']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if prop == "default":
            # handle must default property
            must_count += 1
            # .'$openapi#ServerVariable'.default
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#ServerVariable'.default]", lpath_8 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#ServerVariable'.default]", lpath_8 if path is not None else None))
                return False
        elif prop == "enum":
            # handle may enum property
            # .'$openapi#ServerVariable'.enum
            res = isinstance(pval, list)
            if res:
                for arr_3_idx, arr_3_item in enumerate(pval):
                    arr_3_lpath: Path = ((lpath_8 if path is not None else None) + [ arr_3_idx ]) if (lpath_8 if path is not None else None) is not None else None
                    # .'$openapi#ServerVariable'.enum.0
                    res = isinstance(arr_3_item, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$openapi#ServerVariable'.enum.0]", arr_3_lpath if (lpath_8 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$openapi#ServerVariable'.enum]", lpath_8 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#ServerVariable'.enum]", lpath_8 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$openapi#ServerVariable'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#ServerVariable'.description]", lpath_8 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#ServerVariable'.description]", lpath_8 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#ServerVariable'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#ServerVariable']", lpath_8 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "default" in val:
                rep is None or rep.append(("missing mandatory prop <default> [.'$openapi#ServerVariable']", path))
        return False
    return True

# check json_model_10_map_callbacks (.'$openapi#Components'.callbacks)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Components'.callbacks
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Components'.callbacks]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Components'.callbacks.''
        # .'$openapi#Components'.callbacks.''.'|'.0
        res = json_model_26(pval, lpath_10 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Callback [.'$openapi#Components'.callbacks.''.'|'.0]", lpath_10 if path is not None else None))
        if not res:
            # .'$openapi#Components'.callbacks.''.'|'.1
            res = json_model_32(pval, lpath_10 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Components'.callbacks.''.'|'.1]", lpath_10 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Components'.callbacks.''.'|']", lpath_10 if path is not None else None))
            return False
    return True

# check json_model_10_map_examples (.'$openapi#Components'.examples)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Components'.examples
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Components'.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Components'.examples.''
        # .'$openapi#Components'.examples.''.'|'.0
        res = json_model_27(pval, lpath_11 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$openapi#Components'.examples.''.'|'.0]", lpath_11 if path is not None else None))
        if not res:
            # .'$openapi#Components'.examples.''.'|'.1
            res = json_model_32(pval, lpath_11 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Components'.examples.''.'|'.1]", lpath_11 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Components'.examples.''.'|']", lpath_11 if path is not None else None))
            return False
    return True

# check json_model_10_map_headers (.'$openapi#Components'.headers)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Components'.headers
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Components'.headers]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Components'.headers.''
        # .'$openapi#Components'.headers.''.'|'.0
        res = json_model_30(pval, lpath_12 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Header [.'$openapi#Components'.headers.''.'|'.0]", lpath_12 if path is not None else None))
        if not res:
            # .'$openapi#Components'.headers.''.'|'.1
            res = json_model_32(pval, lpath_12 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Components'.headers.''.'|'.1]", lpath_12 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Components'.headers.''.'|']", lpath_12 if path is not None else None))
            return False
    return True

# check json_model_10_map_links (.'$openapi#Components'.links)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Components'.links
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Components'.links]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Components'.links.''
        # .'$openapi#Components'.links.''.'|'.0
        res = json_model_29(pval, lpath_13 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Link [.'$openapi#Components'.links.''.'|'.0]", lpath_13 if path is not None else None))
        if not res:
            # .'$openapi#Components'.links.''.'|'.1
            res = json_model_32(pval, lpath_13 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Components'.links.''.'|'.1]", lpath_13 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Components'.links.''.'|']", lpath_13 if path is not None else None))
            return False
    return True

# check json_model_10_map_models (.'$openapi#Components'.models)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Components'.models
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Components'.models]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Components'.models.''
        res = json_model_97(pval, lpath_14 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Model [.'$openapi#Components'.models.'']", lpath_14 if path is not None else None))
            return False
    return True

# check json_model_10_map_parameters (.'$openapi#Components'.parameters)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Components'.parameters
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Components'.parameters]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Components'.parameters.''
        # .'$openapi#Components'.parameters.''.'|'.0
        res = json_model_20(pval, lpath_15 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Parameter [.'$openapi#Components'.parameters.''.'|'.0]", lpath_15 if path is not None else None))
        if not res:
            # .'$openapi#Components'.parameters.''.'|'.1
            res = json_model_32(pval, lpath_15 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Components'.parameters.''.'|'.1]", lpath_15 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Components'.parameters.''.'|']", lpath_15 if path is not None else None))
            return False
    return True

# check json_model_10_map_pathItems (.'$openapi#Components'.pathItems)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Components'.pathItems
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Components'.pathItems]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Components'.pathItems.''
        # .'$openapi#Components'.pathItems.''.'|'.0
        res = json_model_12(pval, lpath_16 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $PathItem [.'$openapi#Components'.pathItems.''.'|'.0]", lpath_16 if path is not None else None))
        if not res:
            # .'$openapi#Components'.pathItems.''.'|'.1
            res = json_model_32(pval, lpath_16 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Components'.pathItems.''.'|'.1]", lpath_16 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Components'.pathItems.''.'|']", lpath_16 if path is not None else None))
            return False
    return True

# check json_model_10_map_requestBodies (.'$openapi#Components'.requestBodies)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Components'.requestBodies
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Components'.requestBodies]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Components'.requestBodies.''
        # .'$openapi#Components'.requestBodies.''.'|'.0
        res = json_model_21(pval, lpath_17 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $RequestBody [.'$openapi#Components'.requestBodies.''.'|'.0]", lpath_17 if path is not None else None))
        if not res:
            # .'$openapi#Components'.requestBodies.''.'|'.1
            res = json_model_32(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Components'.requestBodies.''.'|'.1]", lpath_17 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Components'.requestBodies.''.'|']", lpath_17 if path is not None else None))
            return False
    return True

# check json_model_10_map_responses (.'$openapi#Components'.responses)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Components'.responses
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Components'.responses]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Components'.responses.''
        # .'$openapi#Components'.responses.''.'|'.0
        res = json_model_25(pval, lpath_18 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Response [.'$openapi#Components'.responses.''.'|'.0]", lpath_18 if path is not None else None))
        if not res:
            # .'$openapi#Components'.responses.''.'|'.1
            res = json_model_32(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Components'.responses.''.'|'.1]", lpath_18 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Components'.responses.''.'|']", lpath_18 if path is not None else None))
            return False
    return True

# check json_model_10_map_securitySchemes (.'$openapi#Components'.securitySchemes)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Components'.securitySchemes
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Components'.securitySchemes]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Components'.securitySchemes.''
        # .'$openapi#Components'.securitySchemes.''.'|'.0
        res = json_model_42(pval, lpath_19 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $SecurityScheme [.'$openapi#Components'.securitySchemes.''.'|'.0]", lpath_19 if path is not None else None))
        if not res:
            # .'$openapi#Components'.securitySchemes.''.'|'.1
            res = json_model_32(pval, lpath_19 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Components'.securitySchemes.''.'|'.1]", lpath_19 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Components'.securitySchemes.''.'|']", lpath_19 if path is not None else None))
            return False
    return True


# check $openapi#Components (.'$openapi#Components')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Components'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Components']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if pfun := json_model_10_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_9 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Components']", lpath_9 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Components'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Components']", lpath_9 if path is not None else None))
            return False
    return True

# check $openapi#Paths (.'$openapi#Paths')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Paths'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Paths']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if prop.startswith("/"):
            # handle 2 re props
            # .'$openapi#Paths'.'/^//'
            res = json_model_12(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $PathItem [.'$openapi#Paths'.'/^//']", lpath_20 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 2 re props
            # .'$openapi#Paths'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Paths']", lpath_20 if path is not None else None))
            return False
    return True

# check json_model_12_map_$ref (.'$openapi#PathItem'.'$ref')
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#PathItem'.'$ref'
    res = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI [.'$openapi#PathItem'.'$ref']", path))
    return res

# check json_model_12_map_description (.'$openapi#PathItem'.description)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#PathItem'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$openapi#PathItem'.description]", path))
    return res

# check json_model_12_map_parameters (.'$openapi#PathItem'.parameters)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#PathItem'.parameters
    res = isinstance(val, list)
    if res:
        for arr_4_idx, arr_4_item in enumerate(val):
            arr_4_lpath: Path = (path + [ arr_4_idx ]) if path is not None else None
            # .'$openapi#PathItem'.parameters.0
            # .'$openapi#PathItem'.parameters.0.'|'.0
            res = json_model_20(arr_4_item, arr_4_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Parameter [.'$openapi#PathItem'.parameters.0.'|'.0]", arr_4_lpath if path is not None else None))
            if not res:
                # .'$openapi#PathItem'.parameters.0.'|'.1
                res = json_model_32(arr_4_item, arr_4_lpath if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Reference [.'$openapi#PathItem'.parameters.0.'|'.1]", arr_4_lpath if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$openapi#PathItem'.parameters.0.'|']", arr_4_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$openapi#PathItem'.parameters]", path))
    return res

# check json_model_12_map_servers (.'$openapi#PathItem'.servers)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#PathItem'.servers
    res = isinstance(val, list)
    if res:
        for arr_5_idx, arr_5_item in enumerate(val):
            arr_5_lpath: Path = (path + [ arr_5_idx ]) if path is not None else None
            # .'$openapi#PathItem'.servers.0
            res = json_model_13(arr_5_item, arr_5_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Operation [.'$openapi#PathItem'.servers.0]", arr_5_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$openapi#PathItem'.servers]", path))
    return res

# check json_model_12_map_summary (.'$openapi#PathItem'.summary)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#PathItem'.summary
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$openapi#PathItem'.summary]", path))
    return res


# check $openapi#PathItem (.'$openapi#PathItem')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#PathItem'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#PathItem']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        if pfun := json_model_12_map.get(prop):
            # handle 13 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_21 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$openapi#PathItem']", lpath_21 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#PathItem'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#PathItem']", lpath_21 if path is not None else None))
            return False
    return True

# check json_model_13_map_callbacks (.'$openapi#Operation'.callbacks)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Operation'.callbacks
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Operation'.callbacks]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Operation'.callbacks.''
        # .'$openapi#Operation'.callbacks.''.'|'.0
        res = json_model_26(pval, lpath_23 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Callback [.'$openapi#Operation'.callbacks.''.'|'.0]", lpath_23 if path is not None else None))
        if not res:
            # .'$openapi#Operation'.callbacks.''.'|'.1
            res = json_model_32(pval, lpath_23 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Operation'.callbacks.''.'|'.1]", lpath_23 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Operation'.callbacks.''.'|']", lpath_23 if path is not None else None))
            return False
    return True

# check json_model_13_map_deprecated (.'$openapi#Operation'.deprecated)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Operation'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$openapi#Operation'.deprecated]", path))
    return res

# check json_model_13_map_description (.'$openapi#Operation'.description)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Operation'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$openapi#Operation'.description]", path))
    return res

# check json_model_13_map_operationId (.'$openapi#Operation'.operationId)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Operation'.operationId
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$openapi#Operation'.operationId]", path))
    return res

# check json_model_13_map_parameters (.'$openapi#Operation'.parameters)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Operation'.parameters
    res = isinstance(val, list)
    if res:
        for arr_6_idx, arr_6_item in enumerate(val):
            arr_6_lpath: Path = (path + [ arr_6_idx ]) if path is not None else None
            # .'$openapi#Operation'.parameters.0
            # .'$openapi#Operation'.parameters.0.'|'.0
            res = json_model_20(arr_6_item, arr_6_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Parameter [.'$openapi#Operation'.parameters.0.'|'.0]", arr_6_lpath if path is not None else None))
            if not res:
                # .'$openapi#Operation'.parameters.0.'|'.1
                res = json_model_32(arr_6_item, arr_6_lpath if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Reference [.'$openapi#Operation'.parameters.0.'|'.1]", arr_6_lpath if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$openapi#Operation'.parameters.0.'|']", arr_6_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$openapi#Operation'.parameters]", path))
    return res

# check json_model_13_map_requestBody (.'$openapi#Operation'.requestBody)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Operation'.requestBody
    # .'$openapi#Operation'.requestBody.'|'.0
    res = json_model_21(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $RequestBody [.'$openapi#Operation'.requestBody.'|'.0]", path))
    if not res:
        # .'$openapi#Operation'.requestBody.'|'.1
        res = json_model_32(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Reference [.'$openapi#Operation'.requestBody.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$openapi#Operation'.requestBody.'|']", path))
    return res

# check json_model_13_map_security (.'$openapi#Operation'.security)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Operation'.security
    res = isinstance(val, list)
    if res:
        for arr_7_idx, arr_7_item in enumerate(val):
            arr_7_lpath: Path = (path + [ arr_7_idx ]) if path is not None else None
            # .'$openapi#Operation'.security.0
            res = json_model_45(arr_7_item, arr_7_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $SecurityRequirement [.'$openapi#Operation'.security.0]", arr_7_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$openapi#Operation'.security]", path))
    return res

# check json_model_13_map_servers (.'$openapi#Operation'.servers)
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Operation'.servers
    res = isinstance(val, list)
    if res:
        for arr_8_idx, arr_8_item in enumerate(val):
            arr_8_lpath: Path = (path + [ arr_8_idx ]) if path is not None else None
            # .'$openapi#Operation'.servers.0
            res = json_model_8(arr_8_item, arr_8_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [.'$openapi#Operation'.servers.0]", arr_8_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$openapi#Operation'.servers]", path))
    return res

# check json_model_13_map_summary (.'$openapi#Operation'.summary)
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Operation'.summary
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$openapi#Operation'.summary]", path))
    return res

# check json_model_13_map_tags (.'$openapi#Operation'.tags)
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Operation'.tags
    res = isinstance(val, list)
    if res:
        for arr_9_idx, arr_9_item in enumerate(val):
            arr_9_lpath: Path = (path + [ arr_9_idx ]) if path is not None else None
            # .'$openapi#Operation'.tags.0
            res = isinstance(arr_9_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Operation'.tags.0]", arr_9_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$openapi#Operation'.tags]", path))
    return res


# check $openapi#Operation (.'$openapi#Operation')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Operation'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Operation']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        if pfun := json_model_13_map.get(prop):
            # handle 12 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_22 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Operation']", lpath_22 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Operation'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Operation']", lpath_22 if path is not None else None))
            return False
    return True

# check $openapi#ExternalDocumentation (.'$openapi#ExternalDocumentation')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#ExternalDocumentation'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#ExternalDocumentation']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        if prop == "url":
            # handle must url property
            must_count += 1
            # .'$openapi#ExternalDocumentation'.url
            res = is_valid_url(pval, lpath_24 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$openapi#ExternalDocumentation'.url]", lpath_24 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#ExternalDocumentation'.url]", lpath_24 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$openapi#ExternalDocumentation'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#ExternalDocumentation'.description]", lpath_24 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#ExternalDocumentation'.description]", lpath_24 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#ExternalDocumentation'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#ExternalDocumentation']", lpath_24 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "url" in val:
                rep is None or rep.append(("missing mandatory prop <url> [.'$openapi#ExternalDocumentation']", path))
        return False
    return True


# object .'$openapi#Parameter'.'|'.1.content
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Parameter'.'|'.1.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Parameter'.'|'.1.content.''
        res = json_model_22(pval, lpath_26 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$openapi#Parameter'.'|'.1.content.'']", lpath_26 if path is not None else None))
            return False
    return True

# object .'$openapi#Parameter'.'|'.1
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Parameter'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$openapi#Parameter'.'|'.1.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Parameter'.'|'.1.name]", lpath_25 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#Parameter'.'|'.1.name]", lpath_25 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$openapi#Parameter'.'|'.1.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_0
            if not res:
                rep is None or rep.append(("value not in enum [.'$openapi#Parameter'.'|'.1.in.'|']", lpath_25 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#Parameter'.'|'.1.in]", lpath_25 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$openapi#Parameter'.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Parameter'.'|'.1.description]", lpath_25 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Parameter'.'|'.1.description]", lpath_25 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$openapi#Parameter'.'|'.1.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$openapi#Parameter'.'|'.1.required]", lpath_25 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Parameter'.'|'.1.required]", lpath_25 if path is not None else None))
                return False
        elif prop == "deprecated":
            # handle may deprecated property
            # .'$openapi#Parameter'.'|'.1.deprecated
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$openapi#Parameter'.'|'.1.deprecated]", lpath_25 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Parameter'.'|'.1.deprecated]", lpath_25 if path is not None else None))
                return False
        elif prop == "allowEmptyValue":
            # handle may allowEmptyValue property
            # .'$openapi#Parameter'.'|'.1.allowEmptyValue
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$openapi#Parameter'.'|'.1.allowEmptyValue]", lpath_25 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Parameter'.'|'.1.allowEmptyValue]", lpath_25 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$openapi#Parameter'.'|'.1.content
            res = _jm_obj_4(pval, lpath_25 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#Parameter'.'|'.1.content]", lpath_25 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Parameter'.'|'.1.content]", lpath_25 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Parameter'.'|'.1.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Parameter'.'|'.1]", lpath_25 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$openapi#Parameter'.'|'.1]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$openapi#Parameter'.'|'.1]", path))
        return False
    return True


# check _jm_obj_5_map_allowEmptyValue (.'$openapi#Parameter'.'|'.0.allowEmptyValue)
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Parameter'.'|'.0.allowEmptyValue
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$openapi#Parameter'.'|'.0.allowEmptyValue]", path))
    return res

# check _jm_obj_5_map_allowReserved (.'$openapi#Parameter'.'|'.0.allowReserved)
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Parameter'.'|'.0.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$openapi#Parameter'.'|'.0.allowReserved]", path))
    return res

# check _jm_obj_5_map_deprecated (.'$openapi#Parameter'.'|'.0.deprecated)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Parameter'.'|'.0.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$openapi#Parameter'.'|'.0.deprecated]", path))
    return res

# check _jm_obj_5_map_description (.'$openapi#Parameter'.'|'.0.description)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Parameter'.'|'.0.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$openapi#Parameter'.'|'.0.description]", path))
    return res

# check _jm_obj_5_map_example (.'$openapi#Parameter'.'|'.0.example)
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Parameter'.'|'.0.example
    res = True
    return res

# check _jm_obj_5_map_examples (.'$openapi#Parameter'.'|'.0.examples)
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Parameter'.'|'.0.examples
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Parameter'.'|'.0.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Parameter'.'|'.0.examples.''
        # .'$openapi#Parameter'.'|'.0.examples.''.'|'.0
        res = json_model_27(pval, lpath_28 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$openapi#Parameter'.'|'.0.examples.''.'|'.0]", lpath_28 if path is not None else None))
        if not res:
            # .'$openapi#Parameter'.'|'.0.examples.''.'|'.1
            res = json_model_32(pval, lpath_28 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Parameter'.'|'.0.examples.''.'|'.1]", lpath_28 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Parameter'.'|'.0.examples.''.'|']", lpath_28 if path is not None else None))
            return False
    return True

# check _jm_obj_5_map_explode (.'$openapi#Parameter'.'|'.0.explode)
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Parameter'.'|'.0.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$openapi#Parameter'.'|'.0.explode]", path))
    return res

# check _jm_obj_5_map_required (.'$openapi#Parameter'.'|'.0.required)
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Parameter'.'|'.0.required
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$openapi#Parameter'.'|'.0.required]", path))
    return res


# object .'$openapi#Parameter'.'|'.0
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Parameter'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$openapi#Parameter'.'|'.0.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Parameter'.'|'.0.name]", lpath_27 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#Parameter'.'|'.0.name]", lpath_27 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$openapi#Parameter'.'|'.0.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_1
            if not res:
                rep is None or rep.append(("value not in enum [.'$openapi#Parameter'.'|'.0.in.'|']", lpath_27 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#Parameter'.'|'.0.in]", lpath_27 if path is not None else None))
                return False
        elif pfun := _jm_obj_5_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_27 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Parameter'.'|'.0]", lpath_27 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Parameter'.'|'.0.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Parameter'.'|'.0]", lpath_27 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$openapi#Parameter'.'|'.0]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$openapi#Parameter'.'|'.0]", path))
        return False
    return True

# check $openapi#Parameter (.'$openapi#Parameter')
def json_model_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Parameter'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$openapi#Parameter'.'|']", path))
    if res:
        # .'$openapi#Parameter'.'|'.0
        res = _jm_obj_5(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$openapi#Parameter'.'|'.0]", path))
        if not res:
            # .'$openapi#Parameter'.'|'.1
            res = _jm_obj_3(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#Parameter'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Parameter'.'|']", path))
    return res


# check $openapi#Style (.'$openapi#Style')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # serialization styles
    # .'$openapi#Style'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_2
    if not res:
        rep is None or rep.append(("value not in enum [.'$openapi#Style'.'|']", path))
    return res

# object .'$openapi#RequestBody'.content
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#RequestBody'.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#RequestBody'.content.''
        res = json_model_22(pval, lpath_30 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$openapi#RequestBody'.content.'']", lpath_30 if path is not None else None))
            return False
    return True

# check $openapi#RequestBody (.'$openapi#RequestBody')
def json_model_21(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#RequestBody'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#RequestBody']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # .'$openapi#RequestBody'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#RequestBody'.description]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#RequestBody'.description]", lpath_29 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$openapi#RequestBody'.content
            res = _jm_obj_6(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#RequestBody'.content]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#RequestBody'.content]", lpath_29 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$openapi#RequestBody'.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$openapi#RequestBody'.required]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#RequestBody'.required]", lpath_29 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#RequestBody'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#RequestBody']", lpath_29 if path is not None else None))
            return False
    return True

# object .'$openapi#MediaType'.examples
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#MediaType'.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#MediaType'.examples.''
        # .'$openapi#MediaType'.examples.''.'|'.0
        res = json_model_27(pval, lpath_32 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$openapi#MediaType'.examples.''.'|'.0]", lpath_32 if path is not None else None))
        if not res:
            # .'$openapi#MediaType'.examples.''.'|'.1
            res = json_model_32(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#MediaType'.examples.''.'|'.1]", lpath_32 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#MediaType'.examples.''.'|']", lpath_32 if path is not None else None))
            return False
    return True

# object .'$openapi#MediaType'.encoding
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#MediaType'.encoding]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#MediaType'.encoding.''
        res = json_model_23(pval, lpath_33 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Encoding [.'$openapi#MediaType'.encoding.'']", lpath_33 if path is not None else None))
            return False
    return True

# check $openapi#MediaType (.'$openapi#MediaType')
def json_model_22(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#MediaType'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#MediaType']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        if prop == "example":
            # handle may example property
            # .'$openapi#MediaType'.example
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$openapi#MediaType'.examples
            res = _jm_obj_7(pval, lpath_31 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#MediaType'.examples]", lpath_31 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#MediaType'.examples]", lpath_31 if path is not None else None))
                return False
        elif prop == "encoding":
            # handle may encoding property
            # .'$openapi#MediaType'.encoding
            res = _jm_obj_8(pval, lpath_31 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#MediaType'.encoding]", lpath_31 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#MediaType'.encoding]", lpath_31 if path is not None else None))
                return False
        elif prop == "model":
            # handle may model property
            # .'$openapi#MediaType'.model
            res = json_model_97(pval, lpath_31 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$openapi#MediaType'.model]", lpath_31 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#MediaType'.model]", lpath_31 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#MediaType'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#MediaType']", lpath_31 if path is not None else None))
            return False
    return True

# object .'$openapi#Encoding'.headers
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Encoding'.headers]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Encoding'.headers.''
        # .'$openapi#Encoding'.headers.''.'|'.0
        res = json_model_30(pval, lpath_35 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Header [.'$openapi#Encoding'.headers.''.'|'.0]", lpath_35 if path is not None else None))
        if not res:
            # .'$openapi#Encoding'.headers.''.'|'.1
            res = json_model_32(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Encoding'.headers.''.'|'.1]", lpath_35 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Encoding'.headers.''.'|']", lpath_35 if path is not None else None))
            return False
    return True

# check $openapi#Encoding (.'$openapi#Encoding')
def json_model_23(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Encoding'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Encoding']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        if prop == "contentType":
            # handle may contentType property
            # .'$openapi#Encoding'.contentType
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Encoding'.contentType]", lpath_34 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Encoding'.contentType]", lpath_34 if path is not None else None))
                return False
        elif prop == "headers":
            # handle may headers property
            # .'$openapi#Encoding'.headers
            res = _jm_obj_9(pval, lpath_34 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#Encoding'.headers]", lpath_34 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Encoding'.headers]", lpath_34 if path is not None else None))
                return False
        elif prop == "style":
            # handle may style property
            # .'$openapi#Encoding'.style
            res = json_model_17(pval, lpath_34 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Style [.'$openapi#Encoding'.style]", lpath_34 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Encoding'.style]", lpath_34 if path is not None else None))
                return False
        elif prop == "explode":
            # handle may explode property
            # .'$openapi#Encoding'.explode
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$openapi#Encoding'.explode]", lpath_34 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Encoding'.explode]", lpath_34 if path is not None else None))
                return False
        elif prop == "allowReserved":
            # handle may allowReserved property
            # .'$openapi#Encoding'.allowReserved
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$openapi#Encoding'.allowReserved]", lpath_34 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Encoding'.allowReserved]", lpath_34 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Encoding'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Encoding']", lpath_34 if path is not None else None))
            return False
    return True


# check $openapi#Responses (.'$openapi#Responses')
def json_model_24(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Responses'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Responses']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_36: Path = (path + [ prop ]) if path is not None else None
        if prop == "default":
            # handle may default property
            # .'$openapi#Responses'.default
            # .'$openapi#Responses'.default.'|'.0
            res = json_model_25(pval, lpath_36 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Response [.'$openapi#Responses'.default.'|'.0]", lpath_36 if path is not None else None))
            if not res:
                # .'$openapi#Responses'.default.'|'.1
                res = json_model_32(pval, lpath_36 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Reference [.'$openapi#Responses'.default.'|'.1]", lpath_36 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$openapi#Responses'.default.'|']", lpath_36 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Responses'.default]", lpath_36 if path is not None else None))
                return False
        elif _jm_re_2(prop, path, rep):
            # handle 2 re props
            # .'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'
            # .'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.0
            res = json_model_25(pval, lpath_36 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Response [.'$openapi#Responses'.'/^[1-5](\\\\d\\\\d|XX)$/'.'|'.0]", lpath_36 if path is not None else None))
            if not res:
                # .'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.1
                res = json_model_32(pval, lpath_36 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Reference [.'$openapi#Responses'.'/^[1-5](\\\\d\\\\d|XX)$/'.'|'.1]", lpath_36 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$openapi#Responses'.'/^[1-5](\\\\d\\\\d|XX)$/'.'|']", lpath_36 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 2 re props
            # .'$openapi#Responses'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Responses']", lpath_36 if path is not None else None))
            return False
    return True

# object .'$openapi#Response'.headers
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Response'.headers]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_38: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Response'.headers.''
        # .'$openapi#Response'.headers.''.'|'.0
        res = json_model_30(pval, lpath_38 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Header [.'$openapi#Response'.headers.''.'|'.0]", lpath_38 if path is not None else None))
        if not res:
            # .'$openapi#Response'.headers.''.'|'.1
            res = json_model_32(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Response'.headers.''.'|'.1]", lpath_38 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Response'.headers.''.'|']", lpath_38 if path is not None else None))
            return False
    return True

# object .'$openapi#Response'.content
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Response'.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_39: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Response'.content.''
        res = json_model_22(pval, lpath_39 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$openapi#Response'.content.'']", lpath_39 if path is not None else None))
            return False
    return True

# object .'$openapi#Response'.links
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Response'.links]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_40: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Response'.links.''
        # .'$openapi#Response'.links.''.'|'.0
        res = json_model_29(pval, lpath_40 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Link [.'$openapi#Response'.links.''.'|'.0]", lpath_40 if path is not None else None))
        if not res:
            # .'$openapi#Response'.links.''.'|'.1
            res = json_model_32(pval, lpath_40 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Response'.links.''.'|'.1]", lpath_40 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Response'.links.''.'|']", lpath_40 if path is not None else None))
            return False
    return True

# check $openapi#Response (.'$openapi#Response')
def json_model_25(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Response'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Response']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_37: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # .'$openapi#Response'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Response'.description]", lpath_37 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Response'.description]", lpath_37 if path is not None else None))
                return False
        elif prop == "headers":
            # handle may headers property
            # .'$openapi#Response'.headers
            res = _jm_obj_10(pval, lpath_37 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#Response'.headers]", lpath_37 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Response'.headers]", lpath_37 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$openapi#Response'.content
            res = _jm_obj_11(pval, lpath_37 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#Response'.content]", lpath_37 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Response'.content]", lpath_37 if path is not None else None))
                return False
        elif prop == "links":
            # handle may links property
            # .'$openapi#Response'.links
            res = _jm_obj_12(pval, lpath_37 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#Response'.links]", lpath_37 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Response'.links]", lpath_37 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Response'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Response']", lpath_37 if path is not None else None))
            return False
    return True

# check $openapi#Callback (.'$openapi#Callback')
def json_model_26(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Callback'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Callback']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_41: Path = (path + [ prop ]) if path is not None else None
        if json_model_28(prop, lpath_41 if path is not None else None, rep):
            # handle 1 key props
            # .'$openapi#Callback'.'$Expression'
            # .'$openapi#Callback'.'$Expression'.'|'.0
            res = json_model_12(pval, lpath_41 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $PathItem [.'$openapi#Callback'.'$Expression'.'|'.0]", lpath_41 if path is not None else None))
            if not res:
                # .'$openapi#Callback'.'$Expression'.'|'.1
                res = json_model_32(pval, lpath_41 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Reference [.'$openapi#Callback'.'$Expression'.'|'.1]", lpath_41 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$openapi#Callback'.'$Expression'.'|']", lpath_41 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Callback'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Callback']", lpath_41 if path is not None else None))
            return False
    return True

# check $openapi#Example (.'$openapi#Example')
def json_model_27(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Example'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Example']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_42: Path = (path + [ prop ]) if path is not None else None
        if prop == "summary":
            # handle may summary property
            # .'$openapi#Example'.summary
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Example'.summary]", lpath_42 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Example'.summary]", lpath_42 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$openapi#Example'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Example'.description]", lpath_42 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Example'.description]", lpath_42 if path is not None else None))
                return False
        elif prop == "value":
            # handle may value property
            # .'$openapi#Example'.value
            res = True
        elif prop == "externalValue":
            # handle may externalValue property
            # .'$openapi#Example'.externalValue
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Example'.externalValue]", lpath_42 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Example'.externalValue]", lpath_42 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Example'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Example']", lpath_42 if path is not None else None))
            return False
    return True

# check $openapi#Expression (.'$openapi#Expression')
def json_model_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Expression'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$openapi#Expression']", path))
    return res

# object .'$openapi#Link'.'|'.1.parameters
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Link'.'|'.1.parameters]", path))
        return False
    # accept any object
    return True

# object .'$openapi#Link'.'|'.1
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Link'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_43: Path = (path + [ prop ]) if path is not None else None
        if prop == "operationId":
            # handle must operationId property
            must_count += 1
            # .'$openapi#Link'.'|'.1.operationId
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Link'.'|'.1.operationId]", lpath_43 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#Link'.'|'.1.operationId]", lpath_43 if path is not None else None))
                return False
        elif prop == "parameters":
            # handle may parameters property
            # .'$openapi#Link'.'|'.1.parameters
            res = _jm_obj_14(pval, lpath_43 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#Link'.'|'.1.parameters]", lpath_43 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Link'.'|'.1.parameters]", lpath_43 if path is not None else None))
                return False
        elif prop == "requestBody":
            # handle may requestBody property
            # .'$openapi#Link'.'|'.1.requestBody
            res = True
        elif prop == "description":
            # handle may description property
            # .'$openapi#Link'.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Link'.'|'.1.description]", lpath_43 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Link'.'|'.1.description]", lpath_43 if path is not None else None))
                return False
        elif prop == "server":
            # handle may server property
            # .'$openapi#Link'.'|'.1.server
            res = json_model_8(pval, lpath_43 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [.'$openapi#Link'.'|'.1.server]", lpath_43 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Link'.'|'.1.server]", lpath_43 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Link'.'|'.1.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Link'.'|'.1]", lpath_43 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "operationId" in val:
                rep is None or rep.append(("missing mandatory prop <operationId> [.'$openapi#Link'.'|'.1]", path))
        return False
    return True

# object .'$openapi#Link'.'|'.0.parameters
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Link'.'|'.0.parameters]", path))
        return False
    # accept any object
    return True

# object .'$openapi#Link'.'|'.0
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Link'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_44: Path = (path + [ prop ]) if path is not None else None
        if prop == "operationRef":
            # handle must operationRef property
            must_count += 1
            # .'$openapi#Link'.'|'.0.operationRef
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Link'.'|'.0.operationRef]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#Link'.'|'.0.operationRef]", lpath_44 if path is not None else None))
                return False
        elif prop == "parameters":
            # handle may parameters property
            # .'$openapi#Link'.'|'.0.parameters
            res = _jm_obj_16(pval, lpath_44 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#Link'.'|'.0.parameters]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Link'.'|'.0.parameters]", lpath_44 if path is not None else None))
                return False
        elif prop == "requestBody":
            # handle may requestBody property
            # .'$openapi#Link'.'|'.0.requestBody
            res = True
        elif prop == "description":
            # handle may description property
            # .'$openapi#Link'.'|'.0.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Link'.'|'.0.description]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Link'.'|'.0.description]", lpath_44 if path is not None else None))
                return False
        elif prop == "server":
            # handle may server property
            # .'$openapi#Link'.'|'.0.server
            res = json_model_8(pval, lpath_44 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [.'$openapi#Link'.'|'.0.server]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Link'.'|'.0.server]", lpath_44 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Link'.'|'.0.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Link'.'|'.0]", lpath_44 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "operationRef" in val:
                rep is None or rep.append(("missing mandatory prop <operationRef> [.'$openapi#Link'.'|'.0]", path))
        return False
    return True

# check $openapi#Link (.'$openapi#Link')
def json_model_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Link'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$openapi#Link'.'|']", path))
    if res:
        # .'$openapi#Link'.'|'.0
        res = _jm_obj_15(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$openapi#Link'.'|'.0]", path))
        if not res:
            # .'$openapi#Link'.'|'.1
            res = _jm_obj_13(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#Link'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Link'.'|']", path))
    return res

# object .'$openapi#Header'.'|'.1.content
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Header'.'|'.1.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_46: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Header'.'|'.1.content.''
        res = json_model_22(pval, lpath_46 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$openapi#Header'.'|'.1.content.'']", lpath_46 if path is not None else None))
            return False
    return True

# object .'$openapi#Header'.'|'.1
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Header'.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_45: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # .'$openapi#Header'.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Header'.'|'.1.description]", lpath_45 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Header'.'|'.1.description]", lpath_45 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$openapi#Header'.'|'.1.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$openapi#Header'.'|'.1.required]", lpath_45 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Header'.'|'.1.required]", lpath_45 if path is not None else None))
                return False
        elif prop == "deprecated":
            # handle may deprecated property
            # .'$openapi#Header'.'|'.1.deprecated
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$openapi#Header'.'|'.1.deprecated]", lpath_45 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Header'.'|'.1.deprecated]", lpath_45 if path is not None else None))
                return False
        elif prop == "allowEmptyValue":
            # handle may allowEmptyValue property
            # .'$openapi#Header'.'|'.1.allowEmptyValue
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$openapi#Header'.'|'.1.allowEmptyValue]", lpath_45 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Header'.'|'.1.allowEmptyValue]", lpath_45 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$openapi#Header'.'|'.1.content
            res = _jm_obj_18(pval, lpath_45 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#Header'.'|'.1.content]", lpath_45 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Header'.'|'.1.content]", lpath_45 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Header'.'|'.1.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Header'.'|'.1]", lpath_45 if path is not None else None))
            return False
    return True

# check _jm_obj_19_map_allowEmptyValue (.'$openapi#Header'.'|'.0.allowEmptyValue)
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Header'.'|'.0.allowEmptyValue
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$openapi#Header'.'|'.0.allowEmptyValue]", path))
    return res

# check _jm_obj_19_map_allowReserved (.'$openapi#Header'.'|'.0.allowReserved)
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Header'.'|'.0.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$openapi#Header'.'|'.0.allowReserved]", path))
    return res

# check _jm_obj_19_map_deprecated (.'$openapi#Header'.'|'.0.deprecated)
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Header'.'|'.0.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$openapi#Header'.'|'.0.deprecated]", path))
    return res

# check _jm_obj_19_map_description (.'$openapi#Header'.'|'.0.description)
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Header'.'|'.0.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$openapi#Header'.'|'.0.description]", path))
    return res

# check _jm_obj_19_map_example (.'$openapi#Header'.'|'.0.example)
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Header'.'|'.0.example
    res = True
    return res

# check _jm_obj_19_map_examples (.'$openapi#Header'.'|'.0.examples)
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Header'.'|'.0.examples
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Header'.'|'.0.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_48: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#Header'.'|'.0.examples.''
        # .'$openapi#Header'.'|'.0.examples.''.'|'.0
        res = json_model_27(pval, lpath_48 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$openapi#Header'.'|'.0.examples.''.'|'.0]", lpath_48 if path is not None else None))
        if not res:
            # .'$openapi#Header'.'|'.0.examples.''.'|'.1
            res = json_model_32(pval, lpath_48 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$openapi#Header'.'|'.0.examples.''.'|'.1]", lpath_48 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Header'.'|'.0.examples.''.'|']", lpath_48 if path is not None else None))
            return False
    return True

# check _jm_obj_19_map_explode (.'$openapi#Header'.'|'.0.explode)
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Header'.'|'.0.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$openapi#Header'.'|'.0.explode]", path))
    return res

# check _jm_obj_19_map_required (.'$openapi#Header'.'|'.0.required)
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Header'.'|'.0.required
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$openapi#Header'.'|'.0.required]", path))
    return res


# object .'$openapi#Header'.'|'.0
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Header'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_47: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_19_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_47 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Header'.'|'.0]", lpath_47 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Header'.'|'.0.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Header'.'|'.0]", lpath_47 if path is not None else None))
            return False
    return True

# check $openapi#Header (.'$openapi#Header')
def json_model_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # more or less a parameter but without name and in
    # .'$openapi#Header'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$openapi#Header'.'|']", path))
    if res:
        # .'$openapi#Header'.'|'.0
        res = _jm_obj_19(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$openapi#Header'.'|'.0]", path))
        if not res:
            # .'$openapi#Header'.'|'.1
            res = _jm_obj_17(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#Header'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#Header'.'|']", path))
    return res

# check $openapi#Tag (.'$openapi#Tag')
def json_model_31(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Tag'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Tag']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_49: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$openapi#Tag'.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Tag'.name]", lpath_49 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#Tag'.name]", lpath_49 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$openapi#Tag'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Tag'.description]", lpath_49 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Tag'.description]", lpath_49 if path is not None else None))
                return False
        elif prop == "externalDocs":
            # handle may externalDocs property
            # .'$openapi#Tag'.externalDocs
            res = json_model_14(pval, lpath_49 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $ExternalDocumentation [.'$openapi#Tag'.externalDocs]", lpath_49 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Tag'.externalDocs]", lpath_49 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#Tag'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Tag']", lpath_49 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$openapi#Tag']", path))
        return False
    return True

# check $openapi#Reference (.'$openapi#Reference')
def json_model_32(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#Reference'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#Reference']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_50: Path = (path + [ prop ]) if path is not None else None
        if prop == "$ref":
            # handle must $ref property
            must_count += 1
            # .'$openapi#Reference'.'$ref'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Reference'.'$ref']", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#Reference'.'$ref']", lpath_50 if path is not None else None))
                return False
        elif prop == "summary":
            # handle may summary property
            # .'$openapi#Reference'.summary
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Reference'.summary]", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Reference'.summary]", lpath_50 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$openapi#Reference'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#Reference'.description]", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#Reference'.description]", lpath_50 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#Reference']", lpath_50 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "$ref" in val:
                rep is None or rep.append(("missing mandatory prop <$ref> [.'$openapi#Reference']", path))
        return False
    return True


# object .'$openapi#SecurityScheme'.'|'.0
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#SecurityScheme'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_51: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$openapi#SecurityScheme'.'|'.0.type
            res = isinstance(pval, str) and pval == "apiKey"
            if not res:
                rep is None or rep.append(("unexpected _apiKey [.'$openapi#SecurityScheme'.'|'.0.type]", lpath_51 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#SecurityScheme'.'|'.0.type]", lpath_51 if path is not None else None))
                return False
        elif prop == "name":
            # handle must name property
            must_count += 1
            # .'$openapi#SecurityScheme'.'|'.0.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#SecurityScheme'.'|'.0.name]", lpath_51 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#SecurityScheme'.'|'.0.name]", lpath_51 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$openapi#SecurityScheme'.'|'.0.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_3
            if not res:
                rep is None or rep.append(("value not in enum [.'$openapi#SecurityScheme'.'|'.0.in.'|']", lpath_51 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#SecurityScheme'.'|'.0.in]", lpath_51 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$openapi#SecurityScheme'.'|'.0.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#SecurityScheme'.'|'.0.description]", lpath_51 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#SecurityScheme'.'|'.0.description]", lpath_51 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#SecurityScheme'.'|'.0]", lpath_51 if path is not None else None))
            return False
    if must_count != 3:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$openapi#SecurityScheme'.'|'.0]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$openapi#SecurityScheme'.'|'.0]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$openapi#SecurityScheme'.'|'.0]", path))
        return False
    return True


# object .'$openapi#SecurityScheme'.'|'.1
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#SecurityScheme'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_52: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$openapi#SecurityScheme'.'|'.1.type
            res = isinstance(pval, str) and pval == "http"
            if not res:
                rep is None or rep.append(("unexpected _http [.'$openapi#SecurityScheme'.'|'.1.type]", lpath_52 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#SecurityScheme'.'|'.1.type]", lpath_52 if path is not None else None))
                return False
        elif prop == "scheme":
            # handle must scheme property
            must_count += 1
            # .'$openapi#SecurityScheme'.'|'.1.scheme
            # "/bearer/i"
            res = isinstance(pval, str) and _jm_re_3(pval, lpath_52 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /bearer/i [.'$openapi#SecurityScheme'.'|'.1.scheme]", lpath_52 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#SecurityScheme'.'|'.1.scheme]", lpath_52 if path is not None else None))
                return False
        elif prop == "bearerFormat":
            # handle may bearerFormat property
            # .'$openapi#SecurityScheme'.'|'.1.bearerFormat
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#SecurityScheme'.'|'.1.bearerFormat]", lpath_52 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#SecurityScheme'.'|'.1.bearerFormat]", lpath_52 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$openapi#SecurityScheme'.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#SecurityScheme'.'|'.1.description]", lpath_52 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#SecurityScheme'.'|'.1.description]", lpath_52 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#SecurityScheme'.'|'.1]", lpath_52 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "scheme" in val:
                rep is None or rep.append(("missing mandatory prop <scheme> [.'$openapi#SecurityScheme'.'|'.1]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$openapi#SecurityScheme'.'|'.1]", path))
        return False
    return True

# object .'$openapi#SecurityScheme'.'|'.2
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#SecurityScheme'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_53: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$openapi#SecurityScheme'.'|'.2.type
            res = isinstance(pval, str) and pval == "http"
            if not res:
                rep is None or rep.append(("unexpected _http [.'$openapi#SecurityScheme'.'|'.2.type]", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#SecurityScheme'.'|'.2.type]", lpath_53 if path is not None else None))
                return False
        elif prop == "scheme":
            # handle must scheme property
            must_count += 1
            # .'$openapi#SecurityScheme'.'|'.2.scheme
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#SecurityScheme'.'|'.2.scheme]", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#SecurityScheme'.'|'.2.scheme]", lpath_53 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$openapi#SecurityScheme'.'|'.2.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#SecurityScheme'.'|'.2.description]", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#SecurityScheme'.'|'.2.description]", lpath_53 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#SecurityScheme'.'|'.2]", lpath_53 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "scheme" in val:
                rep is None or rep.append(("missing mandatory prop <scheme> [.'$openapi#SecurityScheme'.'|'.2]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$openapi#SecurityScheme'.'|'.2]", path))
        return False
    return True

# object .'$openapi#SecurityScheme'.'|'.3
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#SecurityScheme'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_54: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$openapi#SecurityScheme'.'|'.3.type
            res = isinstance(pval, str) and pval == "oauth2"
            if not res:
                rep is None or rep.append(("unexpected _oauth2 [.'$openapi#SecurityScheme'.'|'.3.type]", lpath_54 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#SecurityScheme'.'|'.3.type]", lpath_54 if path is not None else None))
                return False
        elif prop == "flows":
            # handle must flows property
            must_count += 1
            # .'$openapi#SecurityScheme'.'|'.3.flows
            res = json_model_43(pval, lpath_54 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $OAuthFlows [.'$openapi#SecurityScheme'.'|'.3.flows]", lpath_54 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#SecurityScheme'.'|'.3.flows]", lpath_54 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$openapi#SecurityScheme'.'|'.3.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#SecurityScheme'.'|'.3.description]", lpath_54 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#SecurityScheme'.'|'.3.description]", lpath_54 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#SecurityScheme'.'|'.3]", lpath_54 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "flows" in val:
                rep is None or rep.append(("missing mandatory prop <flows> [.'$openapi#SecurityScheme'.'|'.3]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$openapi#SecurityScheme'.'|'.3]", path))
        return False
    return True

# object .'$openapi#SecurityScheme'.'|'.4
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#SecurityScheme'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_55: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$openapi#SecurityScheme'.'|'.4.type
            res = isinstance(pval, str) and pval == "openIdConnect"
            if not res:
                rep is None or rep.append(("unexpected _openIdConnect [.'$openapi#SecurityScheme'.'|'.4.type]", lpath_55 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#SecurityScheme'.'|'.4.type]", lpath_55 if path is not None else None))
                return False
        elif prop == "openIdConnectUrl":
            # handle must openIdConnectUrl property
            must_count += 1
            # .'$openapi#SecurityScheme'.'|'.4.openIdConnectUrl
            res = is_valid_url(pval, lpath_55 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$openapi#SecurityScheme'.'|'.4.openIdConnectUrl]", lpath_55 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#SecurityScheme'.'|'.4.openIdConnectUrl]", lpath_55 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$openapi#SecurityScheme'.'|'.4.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#SecurityScheme'.'|'.4.description]", lpath_55 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#SecurityScheme'.'|'.4.description]", lpath_55 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#SecurityScheme'.'|'.4]", lpath_55 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "openIdConnectUrl" in val:
                rep is None or rep.append(("missing mandatory prop <openIdConnectUrl> [.'$openapi#SecurityScheme'.'|'.4]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$openapi#SecurityScheme'.'|'.4]", path))
        return False
    return True

# object .'$openapi#SecurityScheme'.'|'.5
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#SecurityScheme'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_56: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # .'$openapi#SecurityScheme'.'|'.5.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#SecurityScheme'.'|'.5.description]", lpath_56 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#SecurityScheme'.'|'.5.description]", lpath_56 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#SecurityScheme'.'|'.5.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#SecurityScheme'.'|'.5]", lpath_56 if path is not None else None))
            return False
    return True


# check $openapi#SecurityScheme (.'$openapi#SecurityScheme')
def json_model_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#SecurityScheme'
    iso_0: bool = isinstance(val, dict)
    res = iso_0
    if res:
        if "type" in val:
            tag_0: Jsonable = val.get("type", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <type> value not found [.'$openapi#SecurityScheme'.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <type> is missing [.'$openapi#SecurityScheme'.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'$openapi#SecurityScheme'.'|']", path))
    if not res:
        # .'$openapi#SecurityScheme'.'|'.5
        res = _jm_obj_25(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$openapi#SecurityScheme'.'|'.5]", path))
        if not res:
            # .'$openapi#SecurityScheme'.'|'.2
            res = _jm_obj_22(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#SecurityScheme'.'|'.2]", path))
    return res

# check $openapi#OAuthFlows (.'$openapi#OAuthFlows')
def json_model_43(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#OAuthFlows'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#OAuthFlows']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_57: Path = (path + [ prop ]) if path is not None else None
        if prop == "implicit":
            # handle may implicit property
            # .'$openapi#OAuthFlows'.implicit
            res = json_model_44(pval, lpath_57 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $OAuthFlow [.'$openapi#OAuthFlows'.implicit]", lpath_57 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#OAuthFlows'.implicit]", lpath_57 if path is not None else None))
                return False
        elif prop == "password":
            # handle may password property
            # .'$openapi#OAuthFlows'.password
            res = json_model_44(pval, lpath_57 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $OAuthFlow [.'$openapi#OAuthFlows'.password]", lpath_57 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#OAuthFlows'.password]", lpath_57 if path is not None else None))
                return False
        elif prop == "clientCredentials":
            # handle may clientCredentials property
            # .'$openapi#OAuthFlows'.clientCredentials
            res = json_model_44(pval, lpath_57 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $OAuthFlow [.'$openapi#OAuthFlows'.clientCredentials]", lpath_57 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#OAuthFlows'.clientCredentials]", lpath_57 if path is not None else None))
                return False
        elif prop == "authorizationCode":
            # handle may authorizationCode property
            # .'$openapi#OAuthFlows'.authorizationCode
            res = json_model_44(pval, lpath_57 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $OAuthFlow [.'$openapi#OAuthFlows'.authorizationCode]", lpath_57 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#OAuthFlows'.authorizationCode]", lpath_57 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#OAuthFlows'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#OAuthFlows']", lpath_57 if path is not None else None))
            return False
    return True

# object .'$openapi#OAuthFlow'.scopes
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#OAuthFlow'.scopes]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_59: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#OAuthFlow'.scopes.''
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$openapi#OAuthFlow'.scopes.'']", lpath_59 if path is not None else None))
            return False
    return True

# check $openapi#OAuthFlow (.'$openapi#OAuthFlow')
def json_model_44(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#OAuthFlow'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#OAuthFlow']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_58: Path = (path + [ prop ]) if path is not None else None
        if prop == "authorizationUrl":
            # handle must authorizationUrl property
            must_count += 1
            # .'$openapi#OAuthFlow'.authorizationUrl
            res = is_valid_url(pval, lpath_58 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$openapi#OAuthFlow'.authorizationUrl]", lpath_58 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#OAuthFlow'.authorizationUrl]", lpath_58 if path is not None else None))
                return False
        elif prop == "tokenUrl":
            # handle must tokenUrl property
            must_count += 1
            # .'$openapi#OAuthFlow'.tokenUrl
            res = is_valid_url(pval, lpath_58 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$openapi#OAuthFlow'.tokenUrl]", lpath_58 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#OAuthFlow'.tokenUrl]", lpath_58 if path is not None else None))
                return False
        elif prop == "scopes":
            # handle must scopes property
            must_count += 1
            # .'$openapi#OAuthFlow'.scopes
            res = _jm_obj_26(pval, lpath_58 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#OAuthFlow'.scopes]", lpath_58 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#OAuthFlow'.scopes]", lpath_58 if path is not None else None))
                return False
        elif prop == "refreshUrl":
            # handle may refreshUrl property
            # .'$openapi#OAuthFlow'.refreshUrl
            res = is_valid_url(pval, lpath_58 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$openapi#OAuthFlow'.refreshUrl]", lpath_58 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#OAuthFlow'.refreshUrl]", lpath_58 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$openapi#OAuthFlow'.'/^x-/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#OAuthFlow']", lpath_58 if path is not None else None))
            return False
    if must_count != 3:
        if rep is not None:
            if not ("authorizationUrl" in val):
                rep is None or rep.append(("missing mandatory prop <authorizationUrl> [.'$openapi#OAuthFlow']", path))
            if not "scopes" in val:
                rep is None or rep.append(("missing mandatory prop <scopes> [.'$openapi#OAuthFlow']", path))
            if not "tokenUrl" in val:
                rep is None or rep.append(("missing mandatory prop <tokenUrl> [.'$openapi#OAuthFlow']", path))
        return False
    return True

# check $openapi#SecurityRequirement (.'$openapi#SecurityRequirement')
def json_model_45(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$openapi#SecurityRequirement'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#SecurityRequirement']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_60: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$openapi#SecurityRequirement'.''
        res = isinstance(pval, list)
        if res:
            for arr_10_idx, arr_10_item in enumerate(pval):
                arr_10_lpath: Path = ((lpath_60 if path is not None else None) + [ arr_10_idx ]) if (lpath_60 if path is not None else None) is not None else None
                # .'$openapi#SecurityRequirement'.''.0
                res = isinstance(arr_10_item, str)
                if not res:
                    rep is None or rep.append(("unexpected string [.'$openapi#SecurityRequirement'.''.0]", arr_10_lpath if (lpath_60 if path is not None else None) is not None else None))
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$openapi#SecurityRequirement'.'']", lpath_60 if path is not None else None))
            return False
    return True

# check $openapi#Model (.'$openapi#Model')
def json_model_64(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#Model'
    res = json_model_97(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $model#Model [.'$openapi#Model']", path))
    return res

# check $openapi#model#Model (.'$openapi#model#Model')
def json_model_97(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#Model'
    # .'$openapi#model#Model'.'|'.0
    res = json_model_96(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ScalarModel [.'$openapi#model#Model'.'|'.0]", path))
    if not res:
        # .'$openapi#model#Model'.'|'.1
        res = json_model_83(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Array [.'$openapi#model#Model'.'|'.1]", path))
        if not res:
            # .'$openapi#model#Model'.'|'.2
            res = json_model_93(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Element [.'$openapi#model#Model'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$openapi#model#Model'.'|']", path))
    return res

# check $openapi#model#Array (.'$openapi#model#Array')
def json_model_83(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#Array'
    res = isinstance(val, list)
    if res:
        for arr_11_idx, arr_11_item in enumerate(val):
            arr_11_lpath: Path = (path + [ arr_11_idx ]) if path is not None else None
            # .'$openapi#model#Array'.0
            res = json_model_82(arr_11_item, arr_11_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CModel [.'$openapi#model#Array'.0]", arr_11_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$openapi#model#Array']", path))
    return res

# check $openapi#model#CModel (.'$openapi#model#CModel')
def json_model_82(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#CModel'
    # .'$openapi#model#CModel'.'|'.0
    res = json_model_97(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [.'$openapi#model#CModel'.'|'.0]", path))
    if not res:
        # .'$openapi#model#CModel'.'|'.1
        res = json_model_69(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ArrayComment [.'$openapi#model#CModel'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$openapi#model#CModel'.'|']", path))
    return res

# check $openapi#model#ArrayComment (.'$openapi#model#ArrayComment')
def json_model_69(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#ArrayComment'
    # "/^#/"
    res = isinstance(val, str) and val.startswith("#")
    if not res:
        rep is None or rep.append(("unexpected /^#/ [.'$openapi#model#ArrayComment']", path))
    return res

# object .'$openapi#model#Element'.'|'.5
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#model#Element'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_61: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$openapi#model#Element'.'|'.5.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#model#Element'.'|'.5.'#']", lpath_61 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#model#Element'.'|'.5.'#']", lpath_61 if path is not None else None))
                return False
        elif json_model_90(prop, lpath_61 if path is not None else None, rep):
            # handle 1 key props
            # .'$openapi#model#Element'.'|'.5.'$Prop'
            res = json_model_97(pval, lpath_61 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$openapi#model#Element'.'|'.5.'$Prop']", lpath_61 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$openapi#model#Element'.'|'.5.'/^#/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#model#Element'.'|'.5]", lpath_61 if path is not None else None))
            return False
    return True

# object .'$openapi#model#Element'.'|'.4
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#model#Element'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_62: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$openapi#model#Element'.'|'.4.'+'
            res = isinstance(pval, list)
            if res:
                for arr_12_idx, arr_12_item in enumerate(pval):
                    arr_12_lpath: Path = ((lpath_62 if path is not None else None) + [ arr_12_idx ]) if (lpath_62 if path is not None else None) is not None else None
                    # .'$openapi#model#Element'.'|'.4.'+'.0
                    res = json_model_82(arr_12_item, arr_12_lpath if (lpath_62 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $CModel [.'$openapi#model#Element'.'|'.4.'+'.0]", arr_12_lpath if (lpath_62 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$openapi#model#Element'.'|'.4.'+']", lpath_62 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#model#Element'.'|'.4.'+']", lpath_62 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$openapi#model#Element'.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#model#Element'.'|'.4.'#']", lpath_62 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#model#Element'.'|'.4.'#']", lpath_62 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$openapi#model#Element'.'|'.4.'/^#/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#model#Element'.'|'.4]", lpath_62 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$openapi#model#Element'.'|'.4]", path))
        return False
    return True

# object .'$openapi#model#Element'.'|'.3
def _jm_obj_29(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#model#Element'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_63: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$openapi#model#Element'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_13_idx, arr_13_item in enumerate(pval):
                    arr_13_lpath: Path = ((lpath_63 if path is not None else None) + [ arr_13_idx ]) if (lpath_63 if path is not None else None) is not None else None
                    # .'$openapi#model#Element'.'|'.3.'^'.0
                    res = json_model_82(arr_13_item, arr_13_lpath if (lpath_63 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $CModel [.'$openapi#model#Element'.'|'.3.'^'.0]", arr_13_lpath if (lpath_63 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$openapi#model#Element'.'|'.3.'^']", lpath_63 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#model#Element'.'|'.3.'^']", lpath_63 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$openapi#model#Element'.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#model#Element'.'|'.3.'#']", lpath_63 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#model#Element'.'|'.3.'#']", lpath_63 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$openapi#model#Element'.'|'.3.'/^#/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#model#Element'.'|'.3]", lpath_63 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$openapi#model#Element'.'|'.3]", path))
        return False
    return True

# object .'$openapi#model#Element'.'|'.2
def _jm_obj_30(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#model#Element'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_64: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$openapi#model#Element'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_14_idx, arr_14_item in enumerate(pval):
                    arr_14_lpath: Path = ((lpath_64 if path is not None else None) + [ arr_14_idx ]) if (lpath_64 if path is not None else None) is not None else None
                    # .'$openapi#model#Element'.'|'.2.'&'.0
                    res = json_model_82(arr_14_item, arr_14_lpath if (lpath_64 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $CModel [.'$openapi#model#Element'.'|'.2.'&'.0]", arr_14_lpath if (lpath_64 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$openapi#model#Element'.'|'.2.'&']", lpath_64 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#model#Element'.'|'.2.'&']", lpath_64 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$openapi#model#Element'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#model#Element'.'|'.2.'#']", lpath_64 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#model#Element'.'|'.2.'#']", lpath_64 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$openapi#model#Element'.'|'.2.'/^#/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#model#Element'.'|'.2]", lpath_64 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$openapi#model#Element'.'|'.2]", path))
        return False
    return True

# object .'$openapi#model#Element'.'|'.1
def _jm_obj_31(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#model#Element'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_65: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$openapi#model#Element'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_15_idx, arr_15_item in enumerate(pval):
                    arr_15_lpath: Path = ((lpath_65 if path is not None else None) + [ arr_15_idx ]) if (lpath_65 if path is not None else None) is not None else None
                    # .'$openapi#model#Element'.'|'.1.'|'.0
                    res = json_model_82(arr_15_item, arr_15_lpath if (lpath_65 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $CModel [.'$openapi#model#Element'.'|'.1.'|'.0]", arr_15_lpath if (lpath_65 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$openapi#model#Element'.'|'.1.'|']", lpath_65 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#model#Element'.'|'.1.'|']", lpath_65 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$openapi#model#Element'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#model#Element'.'|'.1.'#']", lpath_65 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#model#Element'.'|'.1.'#']", lpath_65 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$openapi#model#Element'.'|'.1.'/^#/'
            res = True
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#model#Element'.'|'.1]", lpath_65 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$openapi#model#Element'.'|'.1]", path))
        return False
    return True



# object .'$openapi#model#Element'.'|'.0
def _jm_obj_32(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$openapi#model#Element'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_66: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$openapi#model#Element'.'|'.0.'@'
            res = json_model_97(pval, lpath_66 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$openapi#model#Element'.'|'.0.'@']", lpath_66 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$openapi#model#Element'.'|'.0.'@']", lpath_66 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$openapi#model#Element'.'|'.0.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#model#Element'.'|'.0.'#']", lpath_66 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#model#Element'.'|'.0.'#']", lpath_66 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$openapi#model#Element'.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$openapi#model#Element'.'|'.0.'!']", lpath_66 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$openapi#model#Element'.'|'.0.'!']", lpath_66 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 3 re props
            # .'$openapi#model#Element'.'|'.0.'/^#/'
            res = True
        elif _jm_re_4(prop, path, rep):
            # handle 3 re props
            # .'$openapi#model#Element'.'|'.0.'/^(<=|>=|<|>)$/'
            res = json_model_76(pval, lpath_66 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$openapi#model#Element'.'|'.0.'/^(<=|>=|<|>)$/']", lpath_66 if path is not None else None))
                return False
        elif _jm_re_5(prop, path, rep):
            # handle 3 re props
            # .'$openapi#model#Element'.'|'.0.'/^(=|!=)$/'
            res = json_model_77(pval, lpath_66 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$openapi#model#Element'.'|'.0.'/^(=|!=)$/']", lpath_66 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$openapi#model#Element'.'|'.0]", lpath_66 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$openapi#model#Element'.'|'.0]", path))
        return False
    return True

# check $openapi#model#Element (.'$openapi#model#Element')
def json_model_93(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#Element'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$openapi#model#Element'.'|']", path))
    if res:
        # .'$openapi#model#Element'.'|'.0
        res = _jm_obj_32(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$openapi#model#Element'.'|'.0]", path))
        if not res:
            # .'$openapi#model#Element'.'|'.1
            res = _jm_obj_31(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$openapi#model#Element'.'|'.1]", path))
            if not res:
                # .'$openapi#model#Element'.'|'.2
                res = _jm_obj_30(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$openapi#model#Element'.'|'.2]", path))
                if not res:
                    # .'$openapi#model#Element'.'|'.3
                    res = _jm_obj_29(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$openapi#model#Element'.'|'.3]", path))
                    if not res:
                        # .'$openapi#model#Element'.'|'.4
                        res = _jm_obj_28(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$openapi#model#Element'.'|'.4]", path))
                        if not res:
                            # .'$openapi#model#Element'.'|'.5
                            res = _jm_obj_27(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$openapi#model#Element'.'|'.5]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#model#Element'.'|']", path))
    return res

# check $openapi#model#CmpValue (.'$openapi#model#CmpValue')
def json_model_76(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#CmpValue'
    # .'$openapi#model#CmpValue'.'|'.0
    res = isinstance(val, int) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1 strict int [.'$openapi#model#CmpValue'.'|'.0]", path))
    if not res:
        # .'$openapi#model#CmpValue'.'|'.1
        res = isinstance(val, float)
        if not res:
            rep is None or rep.append(("not a -1.0 strict float [.'$openapi#model#CmpValue'.'|'.1]", path))
        if not res:
            # .'$openapi#model#CmpValue'.'|'.2
            res = isinstance(val, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$openapi#model#CmpValue'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$openapi#model#CmpValue'.'|']", path))
    return res

# check $openapi#model#EqValue (.'$openapi#model#EqValue')
def json_model_77(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#EqValue'
    # .'$openapi#model#EqValue'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$openapi#model#EqValue'.'|'.0]", path))
    if not res:
        # .'$openapi#model#EqValue'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$openapi#model#EqValue'.'|'.1]", path))
        if not res:
            # .'$openapi#model#EqValue'.'|'.2
            res = json_model_76(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$openapi#model#EqValue'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$openapi#model#EqValue'.'|']", path))
    return res


# check $openapi#model#Prop (.'$openapi#model#Prop')
def json_model_90(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#Prop'
    # .'$openapi#model#Prop'.'|'.0
    # "/^[?!]/"
    res = isinstance(val, str) and _jm_re_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[?!]/ [.'$openapi#model#Prop'.'|'.0]", path))
    if not res:
        # .'$openapi#model#Prop'.'|'.1
        res = json_model_73(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $StrConst [.'$openapi#model#Prop'.'|'.1]", path))
        if not res:
            # .'$openapi#model#Prop'.'|'.2
            res = json_model_74(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Regex [.'$openapi#model#Prop'.'|'.2]", path))
            if not res:
                # .'$openapi#model#Prop'.'|'.3
                res = json_model_71(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Ref [.'$openapi#model#Prop'.'|'.3]", path))
                if not res:
                    # .'$openapi#model#Prop'.'|'.4
                    res = json_model_75(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Name [.'$openapi#model#Prop'.'|'.4]", path))
                    if not res:
                        # .'$openapi#model#Prop'.'|'.5
                        res = isinstance(val, str) and val == ""
                        if not res:
                            rep is None or rep.append(("unexpected _ [.'$openapi#model#Prop'.'|'.5]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$openapi#model#Prop'.'|']", path))
    return res


# check $openapi#model#Ref (.'$openapi#model#Ref')
def json_model_71(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#Ref'
    # "/^\\$./"
    res = isinstance(val, str) and _jm_re_7(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^\\$./ [.'$openapi#model#Ref']", path))
    return res


# check $openapi#model#StrConst (.'$openapi#model#StrConst')
def json_model_73(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#StrConst'
    # "/^[A-Za-z0-9_]/"
    res = isinstance(val, str) and _jm_re_8(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[A-Za-z0-9_]/ [.'$openapi#model#StrConst']", path))
    return res


def _jm_xre_0(val: str, path: Path, rep: Report) -> bool:
    extract: str
    match = _jm_xre_0_re_reco.search(val)
    if not match:
        return False
    extract: str = match.groupdict()["s1"]
    if not is_valid_regex(extract, path, rep):
        return False
    return True


def _jm_xre_1(val: str, path: Path, rep: Report) -> bool:
    extract: str
    match = _jm_xre_1_re_reco.search(val)
    if not match:
        return False
    extract: str = match.groupdict()["s1"]
    if not is_valid_exreg(extract, path, rep):
        return False
    return True

# check $openapi#model#Regex (.'$openapi#model#Regex')
def json_model_74(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#Regex'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected type [.'$openapi#model#Regex'.'|']", path))
    if res:
        # .'$openapi#model#Regex'.'|'.0
        # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
        res = _jm_xre_1(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected /^/($EXREG)/[a-z]*X[a-z]*$/X [.'$openapi#model#Regex'.'|'.0]", path))
        if not res:
            # .'$openapi#model#Regex'.'|'.1
            # "/^/($REGEX)/[a-z]*$/X"
            res = _jm_xre_0(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected /^/($REGEX)/[a-z]*$/X [.'$openapi#model#Regex'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$openapi#model#Regex'.'|']", path))
    return res


# check $openapi#model#Name (.'$openapi#model#Name')
def json_model_75(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#Name'
    # "/^\\..+$/"
    res = isinstance(val, str) and _jm_re_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^\\..+$/ [.'$openapi#model#Name']", path))
    return res

# check $openapi#model#ScalarModel (.'$openapi#model#ScalarModel')
def json_model_96(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#ScalarModel'
    # .'$openapi#model#ScalarModel'.'|'.0
    res = json_model_78(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ValModel [.'$openapi#model#ScalarModel'.'|'.0]", path))
    if not res:
        # .'$openapi#model#ScalarModel'.'|'.1
        res = json_model_79(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $StrModel [.'$openapi#model#ScalarModel'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$openapi#model#ScalarModel'.'|']", path))
    return res

# check $openapi#model#ValModel (.'$openapi#model#ValModel')
def json_model_78(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#ValModel'
    # .'$openapi#model#ValModel'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$openapi#model#ValModel'.'|'.0]", path))
    if not res:
        # .'$openapi#model#ValModel'.'|'.1
        res = isinstance(val, bool) and val == True
        if not res:
            rep is None or rep.append(("unexpected =true [.'$openapi#model#ValModel'.'|'.1]", path))
        if not res:
            # .'$openapi#model#ValModel'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool) and val == 0
            if not res:
                rep is None or rep.append(("unexpected =0 [.'$openapi#model#ValModel'.'|'.2]", path))
            if not res:
                # .'$openapi#model#ValModel'.'|'.3
                res = isinstance(val, int) and not isinstance(val, bool) and val == 1
                if not res:
                    rep is None or rep.append(("unexpected =1 [.'$openapi#model#ValModel'.'|'.3]", path))
                if not res:
                    # .'$openapi#model#ValModel'.'|'.4
                    res = isinstance(val, int) and not isinstance(val, bool) and val == -1
                    if not res:
                        rep is None or rep.append(("unexpected =-1 [.'$openapi#model#ValModel'.'|'.4]", path))
                    if not res:
                        # .'$openapi#model#ValModel'.'|'.5
                        res = isinstance(val, float) and val == 0.0
                        if not res:
                            rep is None or rep.append(("unexpected =0.0 [.'$openapi#model#ValModel'.'|'.5]", path))
                        if not res:
                            # .'$openapi#model#ValModel'.'|'.6
                            res = isinstance(val, float) and val == 1.0
                            if not res:
                                rep is None or rep.append(("unexpected =1.0 [.'$openapi#model#ValModel'.'|'.6]", path))
                            if not res:
                                # .'$openapi#model#ValModel'.'|'.7
                                res = isinstance(val, float) and val == -1.0
                                if not res:
                                    rep is None or rep.append(("unexpected =-1.0 [.'$openapi#model#ValModel'.'|'.7]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$openapi#model#ValModel'.'|']", path))
    return res

# check $openapi#model#StrModel (.'$openapi#model#StrModel')
def json_model_79(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#StrModel'
    # .'$openapi#model#StrModel'.'|'.0
    res = json_model_73(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $StrConst [.'$openapi#model#StrModel'.'|'.0]", path))
    if not res:
        # .'$openapi#model#StrModel'.'|'.1
        res = json_model_72(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ValConst [.'$openapi#model#StrModel'.'|'.1]", path))
        if not res:
            # .'$openapi#model#StrModel'.'|'.2
            res = json_model_74(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Regex [.'$openapi#model#StrModel'.'|'.2]", path))
            if not res:
                # .'$openapi#model#StrModel'.'|'.3
                res = json_model_67(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected $PreDef [.'$openapi#model#StrModel'.'|'.3]", path))
                if not res:
                    # .'$openapi#model#StrModel'.'|'.4
                    res = json_model_71(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Ref [.'$openapi#model#StrModel'.'|'.4]", path))
                    if not res:
                        # .'$openapi#model#StrModel'.'|'.5
                        res = isinstance(val, str) and val == ""
                        if not res:
                            rep is None or rep.append(("unexpected _ [.'$openapi#model#StrModel'.'|'.5]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$openapi#model#StrModel'.'|']", path))
    return res


# check $openapi#model#PreDef (.'$openapi#model#PreDef')
def json_model_67(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#PreDef'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_4
    if not res:
        rep is None or rep.append(("value not in enum [.'$openapi#model#PreDef'.'|']", path))
    return res


# check $openapi#model#ValConst (.'$openapi#model#ValConst')
def json_model_72(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$openapi#model#ValConst'
    # "/^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$/"
    res = isinstance(val, str) and _jm_re_10(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$/ [.'$openapi#model#ValConst']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile("^3\\.1\\.\\d+(-.+)?$")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global json_model_4_map
        json_model_4_map = {
            "components": json_model_10,
            "externalDocs": json_model_14,
            "jsonModelVersion": _jm_f_0,
            "paths": json_model_11,
            "security": _jm_f_1,
            "servers": _jm_f_2,
            "tags": _jm_f_3,
            "webhooks": _jm_f_4,
        }
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = re.compile("^x\\-.*$")
        _jm_re_1 = lambda s, p, r: _jm_re_1_reco.search(s) is not None
        global json_model_10_map
        json_model_10_map = {
            "callbacks": _jm_f_5,
            "examples": _jm_f_6,
            "headers": _jm_f_7,
            "links": _jm_f_8,
            "models": _jm_f_9,
            "parameters": _jm_f_10,
            "pathItems": _jm_f_11,
            "requestBodies": _jm_f_12,
            "responses": _jm_f_13,
            "securitySchemes": _jm_f_14,
        }
        global json_model_12_map
        json_model_12_map = {
            "$ref": _jm_f_15,
            "delete": json_model_13,
            "description": _jm_f_16,
            "get": json_model_13,
            "head": json_model_13,
            "options": json_model_13,
            "parameters": _jm_f_17,
            "patch": json_model_13,
            "post": json_model_13,
            "put": json_model_13,
            "servers": _jm_f_18,
            "summary": _jm_f_19,
            "trace": json_model_13,
        }
        global json_model_13_map
        json_model_13_map = {
            "callbacks": _jm_f_20,
            "deprecated": _jm_f_21,
            "description": _jm_f_22,
            "externalDocs": json_model_14,
            "operationId": _jm_f_23,
            "parameters": _jm_f_24,
            "requestBody": _jm_f_25,
            "responses": json_model_24,
            "security": _jm_f_26,
            "servers": _jm_f_27,
            "summary": _jm_f_28,
            "tags": _jm_f_29,
        }
        global _jm_cst_0
        _jm_cst_0 = {'cookie', 'header', 'path', 'query'}
        global _jm_cst_1
        _jm_cst_1 = {'cookie', 'header', 'path', 'query'}
        global _jm_obj_5_map
        _jm_obj_5_map = {
            "allowEmptyValue": _jm_f_30,
            "allowReserved": _jm_f_31,
            "deprecated": _jm_f_32,
            "description": _jm_f_33,
            "example": _jm_f_34,
            "examples": _jm_f_35,
            "explode": _jm_f_36,
            "model": json_model_97,
            "required": _jm_f_37,
            "style": json_model_17,
        }
        global _jm_cst_2
        _jm_cst_2 = {'deepObject', 'form', 'label', 'matrix', 'pipeDelimited', 'simple', 'spaceDelimited'}
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = re.compile("^[1-5](\\d\\d|XX)$")
        _jm_re_2 = lambda s, p, r: _jm_re_2_reco.search(s) is not None
        global _jm_obj_19_map
        _jm_obj_19_map = {
            "allowEmptyValue": _jm_f_38,
            "allowReserved": _jm_f_39,
            "deprecated": _jm_f_40,
            "description": _jm_f_41,
            "example": _jm_f_42,
            "examples": _jm_f_43,
            "explode": _jm_f_44,
            "model": json_model_97,
            "required": _jm_f_45,
            "style": json_model_17,
        }
        global _jm_cst_3
        _jm_cst_3 = {'cookie', 'header', 'query'}
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = re.compile("(?i)bearer")
        _jm_re_3 = lambda s, p, r: _jm_re_3_reco.search(s) is not None
        global _jm_map_0
        _jm_map_0 = {
            "apiKey": _jm_obj_20,
            "http": _jm_obj_21,
            "oauth2": _jm_obj_23,
            "openIdConnect": _jm_obj_24,
        }
        global _jm_re_4_reco, _jm_re_4
        _jm_re_4_reco = re.compile("^(<=|>=|<|>)$")
        _jm_re_4 = lambda s, p, r: _jm_re_4_reco.search(s) is not None
        global _jm_re_5_reco, _jm_re_5
        _jm_re_5_reco = re.compile("^(=|!=)$")
        _jm_re_5 = lambda s, p, r: _jm_re_5_reco.search(s) is not None
        global _jm_re_6_reco, _jm_re_6
        _jm_re_6_reco = re.compile("^[?!]")
        _jm_re_6 = lambda s, p, r: _jm_re_6_reco.search(s) is not None
        global _jm_re_7_reco, _jm_re_7
        _jm_re_7_reco = re.compile("^\\$.")
        _jm_re_7 = lambda s, p, r: _jm_re_7_reco.search(s) is not None
        global _jm_re_8_reco, _jm_re_8
        _jm_re_8_reco = re.compile("^[A-Za-z0-9_]")
        _jm_re_8 = lambda s, p, r: _jm_re_8_reco.search(s) is not None
        global _jm_xre_0_re_reco, _jm_xre_0_re
        _jm_xre_0_re_reco = re.compile("^/(?<s1>.*)/[a-z]*$")
        _jm_xre_0_re = lambda s, p, r: _jm_xre_0_re_reco.search(s) is not None
        global _jm_xre_1_re_reco, _jm_xre_1_re
        _jm_xre_1_re_reco = re.compile("^/(?<s1>.*)/[a-z]*X[a-z]*$")
        _jm_xre_1_re = lambda s, p, r: _jm_xre_1_re_reco.search(s) is not None
        global _jm_re_9_reco, _jm_re_9
        _jm_re_9_reco = re.compile("^\\..+$")
        _jm_re_9 = lambda s, p, r: _jm_re_9_reco.search(s) is not None
        global _jm_cst_4
        _jm_cst_4 = {'$ANY', '$BOOL', '$DATE', '$DATETIME', '$EMAIL', '$EXREG', '$F16', '$F32', '$F64', '$FLOAT', '$I16', '$I32', '$I64', '$I8', '$INT', '$INTEGER', '$NONE', '$NULL', '$NUMBER', '$REGEX', '$STRING', '$TIME', '$U16', '$U32', '$U64', '$U8', '$URI', '$URL', '$UUID'}
        global _jm_re_10_reco, _jm_re_10
        _jm_re_10_reco = re.compile("^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$")
        _jm_re_10 = lambda s, p, r: _jm_re_10_reco.search(s) is not None
        global check_model_map
        check_model_map = {
            "": json_model_4,
            "openapi": json_model_4,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = None
        _jm_re_1 = None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = None
        _jm_re_2 = None
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = None
        _jm_re_3 = None
        global _jm_re_4_reco, _jm_re_4
        _jm_re_4_reco = None
        _jm_re_4 = None
        global _jm_re_5_reco, _jm_re_5
        _jm_re_5_reco = None
        _jm_re_5 = None
        global _jm_re_6_reco, _jm_re_6
        _jm_re_6_reco = None
        _jm_re_6 = None
        global _jm_re_7_reco, _jm_re_7
        _jm_re_7_reco = None
        _jm_re_7 = None
        global _jm_re_8_reco, _jm_re_8
        _jm_re_8_reco = None
        _jm_re_8 = None
        global _jm_xre_0_re_reco, _jm_xre_0_re
        _jm_xre_0_re_reco = None
        _jm_xre_0_re = None
        global _jm_xre_1_re_reco, _jm_xre_1_re
        _jm_xre_1_re_reco = None
        _jm_xre_1_re = None
        global _jm_re_9_reco, _jm_re_9
        _jm_re_9_reco = None
        _jm_re_9 = None
        global _jm_re_10_reco, _jm_re_10
        _jm_re_10_reco = None
        _jm_re_10 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
