#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $Dd (.'$Dd')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Dd'
    res = json_model_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $l [.'$Dd']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Dd [.]", path))
    return res

# check $Dd#l (.'$Dd#l')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Dd#l'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$Dd#l'.0
            res = json_model_12(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $u [.'$Dd#l'.0]", arr_0_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Dd#l']", path))
    return res

# check $Dd#u (.'$Dd#u')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Dd#u'
    res = json_model_12(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Uu#un [.'$Dd#u']", path))
    return res

# check $Dd#Uu#un (.'$Dd#Uu#un')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Dd#Uu#un'
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Dd#Uu#un']", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'$Dd#Uu#un']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("ua", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <ua> [.'$Dd#Uu#un']", path))
        return False
    lpath = (path + [ "ua" ]) if path is not None else None
    # .'$Dd#Uu#un'.ua
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$Dd#Uu#un'.ua]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <ua> [.'$Dd#Uu#un']", lpath if path is not None else None))
        return False
    if not ((pval := val.get("ub", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <ub> [.'$Dd#Uu#un']", path))
        return False
    lpath = (path + [ "ub" ]) if path is not None else None
    # .'$Dd#Uu#un'.ub
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$Dd#Uu#un'.ub]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <ub> [.'$Dd#Uu#un']", lpath if path is not None else None))
        return False
    return True


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_6,
            "Dd": json_model_6,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
