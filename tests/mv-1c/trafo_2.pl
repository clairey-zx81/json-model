#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_5($$$);
sub json_model_3($$$);
sub json_model_4($$$);
sub json_model_1($$$);
sub json_model_6($$$);
my %check_model_map;

# check $Zz (.'$Zz')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Zz'
    $res = json_model_6($val, $path, $rep);
    return $res;
}

# check $z (.'$z')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$z'
    $res = json_model_6($val, $path, $rep);
    return $res;
}

# check $l (.'$l')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$l'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$l'.0
            $res = json_model_6($arr_0_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check $Zz#zero (.'$Zz#zero')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Zz#zero'
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 2)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'za'})
    {
        return 0;
    }
    $pval = $$val{'za'};
    # .'$Zz#zero'.za
    $res = jm_is_integer($pval) && $pval >= 0;
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'zb'})
    {
        return 0;
    }
    $pval = $$val{'zb'};
    # .'$Zz#zero'.zb
    $res = jm_is_integer($pval) && $pval >= 0;
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&json_model_4,
            'Zz' => \&json_model_6,
            'z' => \&json_model_6,
            'l' => \&json_model_4,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
