#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $Zz (.'$Zz')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Zz'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $zero [.'$Zz']", path))
    return res

# check $z (.'$z')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$z'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Zz#zero [.'$z']", path))
    return res

# check $l (.'$l')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$l'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$l'.0
            res = _jm_obj_0(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $z [.'$l'.0]", arr_0_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$l']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $l [.]", path))
    return res

# object .'$Zz#zero'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Zz#zero']", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'$Zz#zero']", path))
        return False
    pval: Jsonable
    res: bool
    if not "za" in val:
        rep is None or rep.append(("missing mandatory prop <za> [.'$Zz#zero']", path))
        return False
    pval = val.get("za", UNDEFINED)
    # .'$Zz#zero'.za
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$Zz#zero'.za]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <za> [.'$Zz#zero']", path))
        return False
    if not "zb" in val:
        rep is None or rep.append(("missing mandatory prop <zb> [.'$Zz#zero']", path))
        return False
    pval = val.get("zb", UNDEFINED)
    # .'$Zz#zero'.zb
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$Zz#zero'.zb]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <zb> [.'$Zz#zero']", path))
        return False
    return True

# check $Zz#zero (.'$Zz#zero')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Zz#zero'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Zz#zero']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_4,
            "Zz": _jm_obj_0,
            "z": _jm_obj_0,
            "l": json_model_4,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
