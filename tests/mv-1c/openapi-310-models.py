#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_obj_0_must: PropMap
_jm_obj_0_may: PropMap
_jm_re_0_search: Callable
_jm_re_0: RegexFun
_jm_obj_2_must: PropMap
_jm_obj_2_may: PropMap
_jm_obj_3_may: PropMap
_jm_obj_4_must: PropMap
_jm_obj_5_must: PropMap
_jm_obj_6_may: PropMap
_jm_obj_8_may: PropMap
_jm_obj_9_may: PropMap
_jm_re_1_search: Callable
_jm_re_1: RegexFun
_jm_obj_21_may: PropMap
_jm_obj_23_may: PropMap
_jm_cst_0: set[str]
_jm_obj_28_must: PropMap
_jm_cst_1: set[str]
_jm_obj_28_may: PropMap
_jm_obj_31_may: PropMap
_jm_obj_33_may: PropMap
_jm_obj_36_may: PropMap
_jm_re_2_search: Callable
_jm_re_2: RegexFun
_jm_obj_39_may: PropMap
_jm_obj_44_may: PropMap
_jm_re_3_search: Callable
_jm_re_3: RegexFun
_jm_obj_45_may: PropMap
_jm_obj_47_may: PropMap
_jm_cst_2: set[str]
_jm_obj_49_may: PropMap
_jm_obj_52_may: PropMap
_jm_obj_53_may: PropMap
_jm_obj_54_must: PropMap
_jm_obj_54_may: PropMap
_jm_obj_55_may: PropMap
_jm_obj_56_must: PropMap
_jm_re_4_search: Callable
_jm_re_4: RegexFun
_jm_obj_64_may: PropMap
_jm_re_5_search: Callable
_jm_re_5: RegexFun
_jm_re_6_search: Callable
_jm_re_6: RegexFun
check_model_map: PropMap

# check $openapi ($.'$openapi')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $OpenAPI [$.'$openapi']", path))
    return res

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $openapi [$]", path))
    return res

# check _jm_obj_0_must_info ($.'$openapi#OpenAPI'.info)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OpenAPI'.info
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Info [$.'$openapi#OpenAPI'.info]", path))
    return res

# check _jm_obj_0_must_openapi ($.'$openapi#OpenAPI'.openapi)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OpenAPI'.openapi
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#OpenAPI'.openapi]", path))
    return res


# check _jm_obj_0_may_component ($.'$openapi#OpenAPI'.component)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OpenAPI'.component
    res = json_model_10(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Components [$.'$openapi#OpenAPI'.component]", path))
    return res

# check _jm_obj_0_may_externalDocs ($.'$openapi#OpenAPI'.externalDocs)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OpenAPI'.externalDocs
    res = json_model_14(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ExternalDocumentation [$.'$openapi#OpenAPI'.externalDocs]", path))
    return res

# check _jm_obj_0_may_jsonSchemaDialect ($.'$openapi#OpenAPI'.jsonSchemaDialect)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OpenAPI'.jsonSchemaDialect
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#OpenAPI'.jsonSchemaDialect]", path))
    return res

# check _jm_obj_0_may_paths ($.'$openapi#OpenAPI'.paths)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OpenAPI'.paths
    res = json_model_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Paths [$.'$openapi#OpenAPI'.paths]", path))
    return res

# check _jm_obj_0_may_security ($.'$openapi#OpenAPI'.security)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OpenAPI'.security
    res = json_model_36(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $SecurityRequirement [$.'$openapi#OpenAPI'.security]", path))
    return res

# check _jm_obj_0_may_servers ($.'$openapi#OpenAPI'.servers)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OpenAPI'.servers
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # $.'$openapi#OpenAPI'.servers.0
            res = json_model_8(arr_0_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [$.'$openapi#OpenAPI'.servers.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$openapi#OpenAPI'.servers]", path))
    return res

# check _jm_obj_0_may_tags ($.'$openapi#OpenAPI'.tags)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OpenAPI'.tags
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # $.'$openapi#OpenAPI'.tags.0
            res = json_model_27(arr_1_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Tag [$.'$openapi#OpenAPI'.tags.0]", arr_1_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$openapi#OpenAPI'.tags]", path))
    return res

# object $.'$openapi#OpenAPI'.webhooks
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#OpenAPI'.webhooks]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#OpenAPI'.webhooks.''
        # $.'$openapi#OpenAPI'.webhooks.''.'|'.0
        res = json_model_12(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $PathItem [$.'$openapi#OpenAPI'.webhooks.''.'|'.0]", lpath_1 if path is not None else None))
        if not res:
            # $.'$openapi#OpenAPI'.webhooks.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#OpenAPI'.webhooks.''.'|'.1]", lpath_1 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#OpenAPI'.webhooks.''.'|']", lpath_1 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_0_may_webhooks ($.'$openapi#OpenAPI'.webhooks)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OpenAPI'.webhooks
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#OpenAPI'.webhooks]", path))
    return res



# object $.'$openapi#OpenAPI'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#OpenAPI']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_0 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$openapi#OpenAPI']", lpath_0 if path is not None else None))
                    return False
        elif pfun := _jm_obj_0_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#OpenAPI']", lpath_0 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#OpenAPI'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#OpenAPI'.'/^x\\\\-.*$/']", lpath_0 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#OpenAPI']", lpath_0 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'$openapi#OpenAPI']", path))
        return False
    return True

# check $openapi#OpenAPI ($.'$openapi#OpenAPI')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OpenAPI'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#OpenAPI']", path))
    return res

# check _jm_obj_2_must_title ($.'$openapi#Info'.title)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Info'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Info'.title]", path))
    return res

# check _jm_obj_2_must_version ($.'$openapi#Info'.version)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Info'.version
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Info'.version]", path))
    return res


# check _jm_obj_2_may_contact ($.'$openapi#Info'.contact)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Info'.contact
    res = json_model_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Contact [$.'$openapi#Info'.contact]", path))
    return res

# check _jm_obj_2_may_description ($.'$openapi#Info'.description)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Info'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Info'.description]", path))
    return res

# check _jm_obj_2_may_license ($.'$openapi#Info'.license)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Info'.license
    res = json_model_7(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $License [$.'$openapi#Info'.license]", path))
    return res

# check _jm_obj_2_may_summary ($.'$openapi#Info'.summary)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Info'.summary
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Info'.summary]", path))
    return res

# check _jm_obj_2_may_termsOfService ($.'$openapi#Info'.termsOfService)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Info'.termsOfService
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Info'.termsOfService]", path))
    return res


# object $.'$openapi#Info'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Info']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_2_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_2 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$openapi#Info']", lpath_2 if path is not None else None))
                    return False
        elif pfun := _jm_obj_2_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_2 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#Info']", lpath_2 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Info'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Info'.'/^x\\\\-.*$/']", lpath_2 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Info']", lpath_2 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'$openapi#Info']", path))
        return False
    return True

# check $openapi#Info ($.'$openapi#Info')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Info'
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Info']", path))
    return res

# check _jm_obj_3_may_email ($.'$openapi#Contact'.email)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Contact'.email
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Contact'.email]", path))
    return res

# check _jm_obj_3_may_name ($.'$openapi#Contact'.name)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Contact'.name
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Contact'.name]", path))
    return res

# check _jm_obj_3_may_url ($.'$openapi#Contact'.url)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Contact'.url
    res = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URL [$.'$openapi#Contact'.url]", path))
    return res


# object $.'$openapi#Contact'
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Contact']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_3_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_3 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#Contact']", lpath_3 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Contact'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Contact'.'/^x\\\\-.*$/']", lpath_3 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Contact']", lpath_3 if path is not None else None))
            return False
    return True

# check $openapi#Contact ($.'$openapi#Contact')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Contact'
    res = _jm_obj_3(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Contact']", path))
    return res

# check _jm_obj_4_must_name ($.'$openapi#License'.'|'.1.name)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#License'.'|'.1.name
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#License'.'|'.1.name]", path))
    return res

# check _jm_obj_4_must_url ($.'$openapi#License'.'|'.1.url)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#License'.'|'.1.url
    res = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URL [$.'$openapi#License'.'|'.1.url]", path))
    return res


# object $.'$openapi#License'.'|'.1
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#License'.'|'.1]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_4_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_4 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$openapi#License'.'|'.1]", lpath_4 if path is not None else None))
                    return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#License'.'|'.1.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#License'.'|'.1.'/^x\\\\-.*$/']", lpath_4 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#License'.'|'.1]", lpath_4 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'$openapi#License'.'|'.1]", path))
        return False
    return True

# check _jm_obj_5_must_identifier ($.'$openapi#License'.'|'.0.identifier)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#License'.'|'.0.identifier
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#License'.'|'.0.identifier]", path))
    return res

# check _jm_obj_5_must_name ($.'$openapi#License'.'|'.0.name)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#License'.'|'.0.name
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#License'.'|'.0.name]", path))
    return res


# object $.'$openapi#License'.'|'.0
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#License'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_5_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_5 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$openapi#License'.'|'.0]", lpath_5 if path is not None else None))
                    return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#License'.'|'.0.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#License'.'|'.0.'/^x\\\\-.*$/']", lpath_5 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#License'.'|'.0]", lpath_5 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'$openapi#License'.'|'.0]", path))
        return False
    return True

# check $openapi#License ($.'$openapi#License')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#License'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'$openapi#License'.'|']", path))
    if res:
        # $.'$openapi#License'.'|'.0
        res = _jm_obj_5(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$openapi#License'.'|'.0]", path))
        if not res:
            # $.'$openapi#License'.'|'.1
            res = _jm_obj_4(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'$openapi#License'.'|'.1]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#License'.'|']", path))
    return res

# check _jm_obj_6_may_description ($.'$openapi#Server'.description)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Server'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Server'.description]", path))
    return res

# object $.'$openapi#Server'.variables
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Server'.variables]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Server'.variables.''
        res = json_model_9(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ServerVariable [$.'$openapi#Server'.variables.'']", lpath_7 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_6_may_variables ($.'$openapi#Server'.variables)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Server'.variables
    res = _jm_obj_7(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Server'.variables]", path))
    return res


# object $.'$openapi#Server'
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Server']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "url":
            # handle one must property
            must_count += 1
            # $.'$openapi#Server'.url
            res = is_valid_url(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [$.'$openapi#Server'.url]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$openapi#Server'.url]", lpath_6 if path is not None else None))
                return False
        elif pfun := _jm_obj_6_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_6 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#Server']", lpath_6 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Server'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Server'.'/^x\\\\-.*$/']", lpath_6 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Server']", lpath_6 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$openapi#Server']", path))
        return False
    return True

# check $openapi#Server ($.'$openapi#Server')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Server'
    res = _jm_obj_6(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Server']", path))
    return res

# check _jm_obj_8_may_description ($.'$openapi#ServerVariable'.description)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#ServerVariable'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#ServerVariable'.description]", path))
    return res

# check _jm_obj_8_may_enum ($.'$openapi#ServerVariable'.enum)
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#ServerVariable'.enum
    res = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # $.'$openapi#ServerVariable'.enum.0
            res = isinstance(arr_2_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#ServerVariable'.enum.0]", arr_2_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$openapi#ServerVariable'.enum]", path))
    return res


# object $.'$openapi#ServerVariable'
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#ServerVariable']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if prop == "default":
            # handle one must property
            must_count += 1
            # $.'$openapi#ServerVariable'.default
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#ServerVariable'.default]", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$openapi#ServerVariable'.default]", lpath_8 if path is not None else None))
                return False
        elif pfun := _jm_obj_8_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_8 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#ServerVariable']", lpath_8 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#ServerVariable'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#ServerVariable'.'/^x\\\\-.*$/']", lpath_8 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#ServerVariable']", lpath_8 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$openapi#ServerVariable']", path))
        return False
    return True

# check $openapi#ServerVariable ($.'$openapi#ServerVariable')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#ServerVariable'
    res = _jm_obj_8(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#ServerVariable']", path))
    return res

# object $.'$openapi#Components'.callbacks
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Components'.callbacks]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Components'.callbacks.''
        # $.'$openapi#Components'.callbacks.''.'|'.0
        res = json_model_22(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Callback [$.'$openapi#Components'.callbacks.''.'|'.0]", lpath_10 if path is not None else None))
        if not res:
            # $.'$openapi#Components'.callbacks.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Components'.callbacks.''.'|'.1]", lpath_10 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Components'.callbacks.''.'|']", lpath_10 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_may_callbacks ($.'$openapi#Components'.callbacks)
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Components'.callbacks
    res = _jm_obj_10(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Components'.callbacks]", path))
    return res

# object $.'$openapi#Components'.examples
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Components'.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Components'.examples.''
        # $.'$openapi#Components'.examples.''.'|'.0
        res = json_model_23(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [$.'$openapi#Components'.examples.''.'|'.0]", lpath_11 if path is not None else None))
        if not res:
            # $.'$openapi#Components'.examples.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Components'.examples.''.'|'.1]", lpath_11 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Components'.examples.''.'|']", lpath_11 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_may_examples ($.'$openapi#Components'.examples)
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Components'.examples
    res = _jm_obj_11(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Components'.examples]", path))
    return res

# object $.'$openapi#Components'.headers
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Components'.headers]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Components'.headers.''
        # $.'$openapi#Components'.headers.''.'|'.0
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Header [$.'$openapi#Components'.headers.''.'|'.0]", lpath_12 if path is not None else None))
        if not res:
            # $.'$openapi#Components'.headers.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Components'.headers.''.'|'.1]", lpath_12 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Components'.headers.''.'|']", lpath_12 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_may_headers ($.'$openapi#Components'.headers)
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Components'.headers
    res = _jm_obj_12(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Components'.headers]", path))
    return res

# object $.'$openapi#Components'.links
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Components'.links]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Components'.links.''
        # $.'$openapi#Components'.links.''.'|'.0
        res = json_model_25(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Link [$.'$openapi#Components'.links.''.'|'.0]", lpath_13 if path is not None else None))
        if not res:
            # $.'$openapi#Components'.links.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Components'.links.''.'|'.1]", lpath_13 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Components'.links.''.'|']", lpath_13 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_may_links ($.'$openapi#Components'.links)
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Components'.links
    res = _jm_obj_13(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Components'.links]", path))
    return res

# object $.'$openapi#Components'.models
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Components'.models]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Components'.models.''
        res = json_model_56(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Model [$.'$openapi#Components'.models.'']", lpath_14 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_may_models ($.'$openapi#Components'.models)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Components'.models
    res = _jm_obj_14(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Components'.models]", path))
    return res

# object $.'$openapi#Components'.parameters
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Components'.parameters]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Components'.parameters.''
        # $.'$openapi#Components'.parameters.''.'|'.0
        res = json_model_16(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Parameter [$.'$openapi#Components'.parameters.''.'|'.0]", lpath_15 if path is not None else None))
        if not res:
            # $.'$openapi#Components'.parameters.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Components'.parameters.''.'|'.1]", lpath_15 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Components'.parameters.''.'|']", lpath_15 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_may_parameters ($.'$openapi#Components'.parameters)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Components'.parameters
    res = _jm_obj_15(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Components'.parameters]", path))
    return res

# object $.'$openapi#Components'.pathItems
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Components'.pathItems]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Components'.pathItems.''
        # $.'$openapi#Components'.pathItems.''.'|'.0
        res = json_model_12(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $PathItem [$.'$openapi#Components'.pathItems.''.'|'.0]", lpath_16 if path is not None else None))
        if not res:
            # $.'$openapi#Components'.pathItems.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Components'.pathItems.''.'|'.1]", lpath_16 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Components'.pathItems.''.'|']", lpath_16 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_may_pathItems ($.'$openapi#Components'.pathItems)
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Components'.pathItems
    res = _jm_obj_16(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Components'.pathItems]", path))
    return res

# object $.'$openapi#Components'.requestBodies
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Components'.requestBodies]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Components'.requestBodies.''
        # $.'$openapi#Components'.requestBodies.''.'|'.0
        res = json_model_17(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $RequestBody [$.'$openapi#Components'.requestBodies.''.'|'.0]", lpath_17 if path is not None else None))
        if not res:
            # $.'$openapi#Components'.requestBodies.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Components'.requestBodies.''.'|'.1]", lpath_17 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Components'.requestBodies.''.'|']", lpath_17 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_may_requestBodies ($.'$openapi#Components'.requestBodies)
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Components'.requestBodies
    res = _jm_obj_17(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Components'.requestBodies]", path))
    return res

# object $.'$openapi#Components'.responses
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Components'.responses]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Components'.responses.''
        # $.'$openapi#Components'.responses.''.'|'.0
        res = json_model_21(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Response [$.'$openapi#Components'.responses.''.'|'.0]", lpath_18 if path is not None else None))
        if not res:
            # $.'$openapi#Components'.responses.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Components'.responses.''.'|'.1]", lpath_18 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Components'.responses.''.'|']", lpath_18 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_may_responses ($.'$openapi#Components'.responses)
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Components'.responses
    res = _jm_obj_18(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Components'.responses]", path))
    return res

# object $.'$openapi#Components'.securitySchemes
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Components'.securitySchemes]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Components'.securitySchemes.''
        # $.'$openapi#Components'.securitySchemes.''.'|'.0
        res = json_model_33(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $SecurityScheme [$.'$openapi#Components'.securitySchemes.''.'|'.0]", lpath_19 if path is not None else None))
        if not res:
            # $.'$openapi#Components'.securitySchemes.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Components'.securitySchemes.''.'|'.1]", lpath_19 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Components'.securitySchemes.''.'|']", lpath_19 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_may_securitySchemes ($.'$openapi#Components'.securitySchemes)
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Components'.securitySchemes
    res = _jm_obj_19(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Components'.securitySchemes]", path))
    return res


# object $.'$openapi#Components'
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Components']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_9_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_9 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#Components']", lpath_9 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Components'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Components'.'/^x\\\\-.*$/']", lpath_9 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Components']", lpath_9 if path is not None else None))
            return False
    return True

# check $openapi#Components ($.'$openapi#Components')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Components'
    res = _jm_obj_9(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Components']", path))
    return res


# object $.'$openapi#Paths'
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Paths']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_1(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Paths'.'/^//'
            res = json_model_12(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $PathItem [$.'$openapi#Paths'.'/^//']", lpath_20 if path is not None else None))
            if not res:
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Paths'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Paths'.'/^x\\\\-.*$/']", lpath_20 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Paths']", lpath_20 if path is not None else None))
            return False
    return True

# check $openapi#Paths ($.'$openapi#Paths')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Paths'
    res = _jm_obj_20(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Paths']", path))
    return res

# check _jm_obj_21_may_$ref ($.'$openapi#PathItem'.'$ref')
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#PathItem'.'$ref'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#PathItem'.'$ref']", path))
    return res

# check _jm_obj_21_may_description ($.'$openapi#PathItem'.description)
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#PathItem'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#PathItem'.description]", path))
    return res

# check _jm_obj_21_may_get ($.'$openapi#PathItem'.get)
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#PathItem'.get
    res = json_model_13(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [$.'$openapi#PathItem'.get]", path))
    return res

# check _jm_obj_21_may_head ($.'$openapi#PathItem'.head)
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#PathItem'.head
    res = json_model_13(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [$.'$openapi#PathItem'.head]", path))
    return res

# check _jm_obj_21_may_options ($.'$openapi#PathItem'.options)
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#PathItem'.options
    res = json_model_13(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [$.'$openapi#PathItem'.options]", path))
    return res

# object $.'$openapi#PathItem'.parameters
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#PathItem'.parameters]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#PathItem'.parameters.''
        # $.'$openapi#PathItem'.parameters.''.'|'.0
        res = json_model_16(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Parameter [$.'$openapi#PathItem'.parameters.''.'|'.0]", lpath_22 if path is not None else None))
        if not res:
            # $.'$openapi#PathItem'.parameters.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#PathItem'.parameters.''.'|'.1]", lpath_22 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#PathItem'.parameters.''.'|']", lpath_22 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_21_may_parameters ($.'$openapi#PathItem'.parameters)
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#PathItem'.parameters
    res = _jm_obj_22(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#PathItem'.parameters]", path))
    return res

# check _jm_obj_21_may_patch ($.'$openapi#PathItem'.patch)
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#PathItem'.patch
    res = json_model_13(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [$.'$openapi#PathItem'.patch]", path))
    return res

# check _jm_obj_21_may_post ($.'$openapi#PathItem'.post)
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#PathItem'.post
    res = json_model_13(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [$.'$openapi#PathItem'.post]", path))
    return res

# check _jm_obj_21_may_put ($.'$openapi#PathItem'.put)
def _jm_f_46(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#PathItem'.put
    res = json_model_13(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [$.'$openapi#PathItem'.put]", path))
    return res

# check _jm_obj_21_may_servers ($.'$openapi#PathItem'.servers)
def _jm_f_47(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#PathItem'.servers
    res = json_model_13(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [$.'$openapi#PathItem'.servers]", path))
    return res

# check _jm_obj_21_may_summary ($.'$openapi#PathItem'.summary)
def _jm_f_48(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#PathItem'.summary
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#PathItem'.summary]", path))
    return res

# check _jm_obj_21_may_trace ($.'$openapi#PathItem'.trace)
def _jm_f_49(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#PathItem'.trace
    res = json_model_13(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [$.'$openapi#PathItem'.trace]", path))
    return res


# object $.'$openapi#PathItem'
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#PathItem']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_21_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_21 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#PathItem']", lpath_21 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#PathItem'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#PathItem'.'/^x\\\\-.*$/']", lpath_21 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#PathItem']", lpath_21 if path is not None else None))
            return False
    return True

# check $openapi#PathItem ($.'$openapi#PathItem')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#PathItem'
    res = _jm_obj_21(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#PathItem']", path))
    return res

# object $.'$openapi#Operation'.callbacks
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Operation'.callbacks]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Operation'.callbacks.''
        # $.'$openapi#Operation'.callbacks.''.'|'.0
        res = json_model_22(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Callback [$.'$openapi#Operation'.callbacks.''.'|'.0]", lpath_24 if path is not None else None))
        if not res:
            # $.'$openapi#Operation'.callbacks.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Operation'.callbacks.''.'|'.1]", lpath_24 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Operation'.callbacks.''.'|']", lpath_24 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_23_may_callbacks ($.'$openapi#Operation'.callbacks)
def _jm_f_50(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Operation'.callbacks
    res = _jm_obj_24(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Operation'.callbacks]", path))
    return res

# check _jm_obj_23_may_deprecated ($.'$openapi#Operation'.deprecated)
def _jm_f_51(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Operation'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#Operation'.deprecated]", path))
    return res

# check _jm_obj_23_may_description ($.'$openapi#Operation'.description)
def _jm_f_52(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Operation'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Operation'.description]", path))
    return res

# check _jm_obj_23_may_externalDocs ($.'$openapi#Operation'.externalDocs)
def _jm_f_53(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Operation'.externalDocs
    res = json_model_14(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ExternalDocumentation [$.'$openapi#Operation'.externalDocs]", path))
    return res

# check _jm_obj_23_may_operationId ($.'$openapi#Operation'.operationId)
def _jm_f_54(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Operation'.operationId
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Operation'.operationId]", path))
    return res

# object $.'$openapi#Operation'.parameters
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Operation'.parameters]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Operation'.parameters.''
        # $.'$openapi#Operation'.parameters.''.'|'.0
        res = json_model_16(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Parameter [$.'$openapi#Operation'.parameters.''.'|'.0]", lpath_25 if path is not None else None))
        if not res:
            # $.'$openapi#Operation'.parameters.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Operation'.parameters.''.'|'.1]", lpath_25 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Operation'.parameters.''.'|']", lpath_25 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_23_may_parameters ($.'$openapi#Operation'.parameters)
def _jm_f_55(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Operation'.parameters
    res = _jm_obj_25(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Operation'.parameters]", path))
    return res

# object $.'$openapi#Operation'.requestBody
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Operation'.requestBody]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Operation'.requestBody.''
        # $.'$openapi#Operation'.requestBody.''.'|'.0
        res = json_model_17(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $RequestBody [$.'$openapi#Operation'.requestBody.''.'|'.0]", lpath_26 if path is not None else None))
        if not res:
            # $.'$openapi#Operation'.requestBody.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Operation'.requestBody.''.'|'.1]", lpath_26 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Operation'.requestBody.''.'|']", lpath_26 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_23_may_requestBody ($.'$openapi#Operation'.requestBody)
def _jm_f_56(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Operation'.requestBody
    res = _jm_obj_26(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Operation'.requestBody]", path))
    return res

# check _jm_obj_23_may_responses ($.'$openapi#Operation'.responses)
def _jm_f_57(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Operation'.responses
    res = json_model_20(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Responses [$.'$openapi#Operation'.responses]", path))
    return res

# check _jm_obj_23_may_security ($.'$openapi#Operation'.security)
def _jm_f_58(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Operation'.security
    res = isinstance(val, list)
    if res:
        for arr_3_idx, arr_3_item in enumerate(val):
            arr_3_lpath: Path = (path + [ arr_3_idx ]) if path is not None else None
            # $.'$openapi#Operation'.security.0
            res = json_model_36(arr_3_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $SecurityRequirement [$.'$openapi#Operation'.security.0]", arr_3_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$openapi#Operation'.security]", path))
    return res

# check _jm_obj_23_may_servers ($.'$openapi#Operation'.servers)
def _jm_f_59(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Operation'.servers
    res = isinstance(val, list)
    if res:
        for arr_4_idx, arr_4_item in enumerate(val):
            arr_4_lpath: Path = (path + [ arr_4_idx ]) if path is not None else None
            # $.'$openapi#Operation'.servers.0
            res = json_model_8(arr_4_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [$.'$openapi#Operation'.servers.0]", arr_4_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$openapi#Operation'.servers]", path))
    return res

# check _jm_obj_23_may_summary ($.'$openapi#Operation'.summary)
def _jm_f_60(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Operation'.summary
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Operation'.summary]", path))
    return res

# check _jm_obj_23_may_tags ($.'$openapi#Operation'.tags)
def _jm_f_61(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Operation'.tags
    res = isinstance(val, list)
    if res:
        for arr_5_idx, arr_5_item in enumerate(val):
            arr_5_lpath: Path = (path + [ arr_5_idx ]) if path is not None else None
            # $.'$openapi#Operation'.tags.0
            res = isinstance(arr_5_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#Operation'.tags.0]", arr_5_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$openapi#Operation'.tags]", path))
    return res


# object $.'$openapi#Operation'
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Operation']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_23_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_23 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#Operation']", lpath_23 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Operation'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Operation'.'/^x\\\\-.*$/']", lpath_23 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Operation']", lpath_23 if path is not None else None))
            return False
    return True

# check $openapi#Operation ($.'$openapi#Operation')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Operation'
    res = _jm_obj_23(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Operation']", path))
    return res

# object $.'$openapi#ExternalDocumentation'
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#ExternalDocumentation']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        if prop == "url":
            # handle one must property
            must_count += 1
            # $.'$openapi#ExternalDocumentation'.url
            res = is_valid_url(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [$.'$openapi#ExternalDocumentation'.url]", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$openapi#ExternalDocumentation'.url]", lpath_27 if path is not None else None))
                return False
        elif prop == "description":
            # handle one may property
            # $.'$openapi#ExternalDocumentation'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#ExternalDocumentation'.description]", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$openapi#ExternalDocumentation'.description]", lpath_27 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#ExternalDocumentation'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#ExternalDocumentation'.'/^x\\\\-.*$/']", lpath_27 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#ExternalDocumentation']", lpath_27 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$openapi#ExternalDocumentation']", path))
        return False
    return True

# check $openapi#ExternalDocumentation ($.'$openapi#ExternalDocumentation')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#ExternalDocumentation'
    res = _jm_obj_27(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#ExternalDocumentation']", path))
    return res


# check _jm_obj_28_must_in ($.'$openapi#Parameter'.in)
def _jm_f_62(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'.in
    res = (val is None or isinstance(val, (bool, int, float, str))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [$.'$openapi#Parameter'.in.'|']", path))
    return res

# check _jm_obj_28_must_name ($.'$openapi#Parameter'.name)
def _jm_f_63(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'.name
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Parameter'.name]", path))
    return res


# check _jm_obj_28_may_allowEmptyValue ($.'$openapi#Parameter'.allowEmptyValue)
def _jm_f_64(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'.allowEmptyValue
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#Parameter'.allowEmptyValue]", path))
    return res

# check _jm_obj_28_may_allowReserved ($.'$openapi#Parameter'.allowReserved)
def _jm_f_65(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#Parameter'.allowReserved]", path))
    return res

# object $.'$openapi#Parameter'.content
def _jm_obj_29(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Parameter'.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Parameter'.content.''
        res = json_model_18(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [$.'$openapi#Parameter'.content.'']", lpath_29 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_28_may_content ($.'$openapi#Parameter'.content)
def _jm_f_66(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'.content
    res = _jm_obj_29(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Parameter'.content]", path))
    return res

# check _jm_obj_28_may_deprecated ($.'$openapi#Parameter'.deprecated)
def _jm_f_67(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#Parameter'.deprecated]", path))
    return res

# check _jm_obj_28_may_description ($.'$openapi#Parameter'.description)
def _jm_f_68(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Parameter'.description]", path))
    return res

# check _jm_obj_28_may_example ($.'$openapi#Parameter'.example)
def _jm_f_69(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'.example
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$openapi#Parameter'.example]", path))
    return res

# object $.'$openapi#Parameter'.examples
def _jm_obj_30(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Parameter'.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Parameter'.examples.''
        # $.'$openapi#Parameter'.examples.''.'|'.0
        res = json_model_23(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [$.'$openapi#Parameter'.examples.''.'|'.0]", lpath_30 if path is not None else None))
        if not res:
            # $.'$openapi#Parameter'.examples.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Parameter'.examples.''.'|'.1]", lpath_30 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Parameter'.examples.''.'|']", lpath_30 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_28_may_examples ($.'$openapi#Parameter'.examples)
def _jm_f_70(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'.examples
    res = _jm_obj_30(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Parameter'.examples]", path))
    return res

# check _jm_obj_28_may_explode ($.'$openapi#Parameter'.explode)
def _jm_f_71(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#Parameter'.explode]", path))
    return res

# check _jm_obj_28_may_model ($.'$openapi#Parameter'.model)
def _jm_f_72(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'.model
    res = json_model_56(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [$.'$openapi#Parameter'.model]", path))
    return res

# check _jm_obj_28_may_required ($.'$openapi#Parameter'.required)
def _jm_f_73(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'.required
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#Parameter'.required]", path))
    return res


# check _jm_obj_28_may_style ($.'$openapi#Parameter'.style)
def _jm_f_74(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'.style
    res = (val is None or isinstance(val, (bool, int, float, str))) and val in _jm_cst_1
    if not res:
        rep is None or rep.append(("value not in enum [$.'$openapi#Parameter'.style.'|']", path))
    return res


# object $.'$openapi#Parameter'
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Parameter']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_28_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_28 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$openapi#Parameter']", lpath_28 if path is not None else None))
                    return False
        elif pfun := _jm_obj_28_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_28 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#Parameter']", lpath_28 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Parameter'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Parameter'.'/^x\\\\-.*$/']", lpath_28 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Parameter']", lpath_28 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'$openapi#Parameter']", path))
        return False
    return True

# check $openapi#Parameter ($.'$openapi#Parameter')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Parameter'
    res = _jm_obj_28(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Parameter']", path))
    return res

# object $.'$openapi#RequestBody'.content
def _jm_obj_32(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#RequestBody'.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#RequestBody'.content.''
        res = json_model_18(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [$.'$openapi#RequestBody'.content.'']", lpath_32 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_31_may_content ($.'$openapi#RequestBody'.content)
def _jm_f_75(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#RequestBody'.content
    res = _jm_obj_32(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#RequestBody'.content]", path))
    return res

# check _jm_obj_31_may_description ($.'$openapi#RequestBody'.description)
def _jm_f_76(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#RequestBody'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#RequestBody'.description]", path))
    return res

# check _jm_obj_31_may_required ($.'$openapi#RequestBody'.required)
def _jm_f_77(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#RequestBody'.required
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#RequestBody'.required]", path))
    return res


# object $.'$openapi#RequestBody'
def _jm_obj_31(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#RequestBody']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_31_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_31 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#RequestBody']", lpath_31 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#RequestBody'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#RequestBody'.'/^x\\\\-.*$/']", lpath_31 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#RequestBody']", lpath_31 if path is not None else None))
            return False
    return True

# check $openapi#RequestBody ($.'$openapi#RequestBody')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#RequestBody'
    res = _jm_obj_31(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#RequestBody']", path))
    return res

# object $.'$openapi#MediaType'.encoding
def _jm_obj_34(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#MediaType'.encoding]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#MediaType'.encoding.''
        res = json_model_19(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Encoding [$.'$openapi#MediaType'.encoding.'']", lpath_34 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_33_may_encoding ($.'$openapi#MediaType'.encoding)
def _jm_f_78(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#MediaType'.encoding
    res = _jm_obj_34(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#MediaType'.encoding]", path))
    return res

# check _jm_obj_33_may_example ($.'$openapi#MediaType'.example)
def _jm_f_79(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#MediaType'.example
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$openapi#MediaType'.example]", path))
    return res

# object $.'$openapi#MediaType'.examples
def _jm_obj_35(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#MediaType'.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#MediaType'.examples.''
        # $.'$openapi#MediaType'.examples.''.'|'.0
        res = json_model_23(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [$.'$openapi#MediaType'.examples.''.'|'.0]", lpath_35 if path is not None else None))
        if not res:
            # $.'$openapi#MediaType'.examples.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#MediaType'.examples.''.'|'.1]", lpath_35 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#MediaType'.examples.''.'|']", lpath_35 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_33_may_examples ($.'$openapi#MediaType'.examples)
def _jm_f_80(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#MediaType'.examples
    res = _jm_obj_35(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#MediaType'.examples]", path))
    return res

# check _jm_obj_33_may_model ($.'$openapi#MediaType'.model)
def _jm_f_81(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#MediaType'.model
    res = json_model_56(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [$.'$openapi#MediaType'.model]", path))
    return res


# object $.'$openapi#MediaType'
def _jm_obj_33(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#MediaType']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_33_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_33 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#MediaType']", lpath_33 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#MediaType'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#MediaType'.'/^x\\\\-.*$/']", lpath_33 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#MediaType']", lpath_33 if path is not None else None))
            return False
    return True

# check $openapi#MediaType ($.'$openapi#MediaType')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#MediaType'
    res = _jm_obj_33(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#MediaType']", path))
    return res

# check _jm_obj_36_may_allowReserved ($.'$openapi#Encoding'.allowReserved)
def _jm_f_82(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Encoding'.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#Encoding'.allowReserved]", path))
    return res

# check _jm_obj_36_may_contentType ($.'$openapi#Encoding'.contentType)
def _jm_f_83(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Encoding'.contentType
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Encoding'.contentType]", path))
    return res

# check _jm_obj_36_may_explode ($.'$openapi#Encoding'.explode)
def _jm_f_84(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Encoding'.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#Encoding'.explode]", path))
    return res

# object $.'$openapi#Encoding'.headers
def _jm_obj_37(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Encoding'.headers]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_37: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Encoding'.headers.''
        # $.'$openapi#Encoding'.headers.''.'|'.0
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Header [$.'$openapi#Encoding'.headers.''.'|'.0]", lpath_37 if path is not None else None))
        if not res:
            # $.'$openapi#Encoding'.headers.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Encoding'.headers.''.'|'.1]", lpath_37 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Encoding'.headers.''.'|']", lpath_37 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_36_may_headers ($.'$openapi#Encoding'.headers)
def _jm_f_85(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Encoding'.headers
    res = _jm_obj_37(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Encoding'.headers]", path))
    return res

# check _jm_obj_36_may_style ($.'$openapi#Encoding'.style)
def _jm_f_86(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Encoding'.style
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Encoding'.style]", path))
    return res


# object $.'$openapi#Encoding'
def _jm_obj_36(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Encoding']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_36: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_36_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_36 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#Encoding']", lpath_36 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Encoding'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Encoding'.'/^x\\\\-.*$/']", lpath_36 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Encoding']", lpath_36 if path is not None else None))
            return False
    return True

# check $openapi#Encoding ($.'$openapi#Encoding')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Encoding'
    res = _jm_obj_36(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Encoding']", path))
    return res


# object $.'$openapi#Responses'
def _jm_obj_38(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Responses']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_38: Path = (path + [ prop ]) if path is not None else None
        if prop == "default":
            # handle one may property
            # $.'$openapi#Responses'.default
            # $.'$openapi#Responses'.default.'|'.0
            res = json_model_21(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Response [$.'$openapi#Responses'.default.'|'.0]", lpath_38 if path is not None else None))
            if not res:
                # $.'$openapi#Responses'.default.'|'.1
                res = json_model_28(pval, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Reference [$.'$openapi#Responses'.default.'|'.1]", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("no model matched [$.'$openapi#Responses'.default.'|']", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$openapi#Responses'.default]", lpath_38 if path is not None else None))
                return False
        elif _jm_re_2(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'
            # $.'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.0
            res = json_model_21(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Response [$.'$openapi#Responses'.'/^[1-5](\\\\d\\\\d|XX)$/'.'|'.0]", lpath_38 if path is not None else None))
            if not res:
                # $.'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.1
                res = json_model_28(pval, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Reference [$.'$openapi#Responses'.'/^[1-5](\\\\d\\\\d|XX)$/'.'|'.1]", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("no model matched [$.'$openapi#Responses'.'/^[1-5](\\\\d\\\\d|XX)$/'.'|']", lpath_38 if path is not None else None))
            if not res:
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Responses'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Responses'.'/^x\\\\-.*$/']", lpath_38 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Responses']", lpath_38 if path is not None else None))
            return False
    return True

# check $openapi#Responses ($.'$openapi#Responses')
def json_model_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Responses'
    res = _jm_obj_38(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Responses']", path))
    return res

# object $.'$openapi#Response'.content
def _jm_obj_40(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Response'.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_40: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Response'.content.''
        res = json_model_18(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [$.'$openapi#Response'.content.'']", lpath_40 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_39_may_content ($.'$openapi#Response'.content)
def _jm_f_87(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Response'.content
    res = _jm_obj_40(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Response'.content]", path))
    return res

# check _jm_obj_39_may_description ($.'$openapi#Response'.description)
def _jm_f_88(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Response'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Response'.description]", path))
    return res

# object $.'$openapi#Response'.headers
def _jm_obj_41(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Response'.headers]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_41: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Response'.headers.''
        # $.'$openapi#Response'.headers.''.'|'.0
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Header [$.'$openapi#Response'.headers.''.'|'.0]", lpath_41 if path is not None else None))
        if not res:
            # $.'$openapi#Response'.headers.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Response'.headers.''.'|'.1]", lpath_41 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Response'.headers.''.'|']", lpath_41 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_39_may_headers ($.'$openapi#Response'.headers)
def _jm_f_89(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Response'.headers
    res = _jm_obj_41(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Response'.headers]", path))
    return res

# object $.'$openapi#Response'.links
def _jm_obj_42(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Response'.links]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_42: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#Response'.links.''
        # $.'$openapi#Response'.links.''.'|'.0
        res = json_model_25(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Link [$.'$openapi#Response'.links.''.'|'.0]", lpath_42 if path is not None else None))
        if not res:
            # $.'$openapi#Response'.links.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#Response'.links.''.'|'.1]", lpath_42 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Response'.links.''.'|']", lpath_42 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_39_may_links ($.'$openapi#Response'.links)
def _jm_f_90(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Response'.links
    res = _jm_obj_42(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Response'.links]", path))
    return res


# object $.'$openapi#Response'
def _jm_obj_39(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Response']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_39: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_39_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_39 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#Response']", lpath_39 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Response'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Response'.'/^x\\\\-.*$/']", lpath_39 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Response']", lpath_39 if path is not None else None))
            return False
    return True

# check $openapi#Response ($.'$openapi#Response')
def json_model_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Response'
    res = _jm_obj_39(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Response']", path))
    return res

# object $.'$openapi#Callback'
def _jm_obj_43(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Callback']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_43: Path = (path + [ prop ]) if path is not None else None
        if json_model_24(prop, lpath_43 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$openapi#Callback'.'$Expression'
            # $.'$openapi#Callback'.'$Expression'.'|'.0
            res = json_model_12(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $PathItem [$.'$openapi#Callback'.'$Expression'.'|'.0]", lpath_43 if path is not None else None))
            if not res:
                # $.'$openapi#Callback'.'$Expression'.'|'.1
                res = json_model_28(pval, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Reference [$.'$openapi#Callback'.'$Expression'.'|'.1]", lpath_43 if path is not None else None))
            if not res:
                rep is None or rep.append(("no model matched [$.'$openapi#Callback'.'$Expression'.'|']", lpath_43 if path is not None else None))
            if not res:
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Callback'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Callback'.'/^x\\\\-.*$/']", lpath_43 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Callback']", lpath_43 if path is not None else None))
            return False
    return True

# check $openapi#Callback ($.'$openapi#Callback')
def json_model_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Callback'
    res = _jm_obj_43(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Callback']", path))
    return res

# check _jm_obj_44_may_description ($.'$openapi#Example'.description)
def _jm_f_91(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Example'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Example'.description]", path))
    return res

# check _jm_obj_44_may_externalValue ($.'$openapi#Example'.externalValue)
def _jm_f_92(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Example'.externalValue
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Example'.externalValue]", path))
    return res

# check _jm_obj_44_may_summary ($.'$openapi#Example'.summary)
def _jm_f_93(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Example'.summary
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Example'.summary]", path))
    return res

# check _jm_obj_44_may_value ($.'$openapi#Example'.value)
def _jm_f_94(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Example'.value
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$openapi#Example'.value]", path))
    return res


# object $.'$openapi#Example'
def _jm_obj_44(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Example']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_44: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_44_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_44 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#Example']", lpath_44 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Example'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Example'.'/^x\\\\-.*$/']", lpath_44 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Example']", lpath_44 if path is not None else None))
            return False
    return True

# check $openapi#Example ($.'$openapi#Example')
def json_model_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Example'
    res = _jm_obj_44(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Example']", path))
    return res


# check $openapi#Expression ($.'$openapi#Expression')
def json_model_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Expression'
    # "/\\{.*\\}/"
    res = isinstance(val, str) and _jm_re_3(val)
    if not res:
        rep is None or rep.append(("unexpected REGEX [$.'$openapi#Expression']", path))
    return res

# check _jm_obj_45_may_description ($.'$openapi#Link'.'|'.1.description)
def _jm_f_95(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Link'.'|'.1.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Link'.'|'.1.description]", path))
    return res

# object $.'$openapi#Link'.'|'.1.parameters
def _jm_obj_46(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Link'.'|'.1.parameters]", path))
        return False
    # accept any object
    return True

# check _jm_obj_45_may_parameters ($.'$openapi#Link'.'|'.1.parameters)
def _jm_f_96(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Link'.'|'.1.parameters
    res = _jm_obj_46(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Link'.'|'.1.parameters]", path))
    return res

# check _jm_obj_45_may_requestBody ($.'$openapi#Link'.'|'.1.requestBody)
def _jm_f_97(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Link'.'|'.1.requestBody
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$openapi#Link'.'|'.1.requestBody]", path))
    return res

# check _jm_obj_45_may_server ($.'$openapi#Link'.'|'.1.server)
def _jm_f_98(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Link'.'|'.1.server
    res = json_model_8(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Server [$.'$openapi#Link'.'|'.1.server]", path))
    return res


# object $.'$openapi#Link'.'|'.1
def _jm_obj_45(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Link'.'|'.1]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_45: Path = (path + [ prop ]) if path is not None else None
        if prop == "operationId":
            # handle one must property
            must_count += 1
            # $.'$openapi#Link'.'|'.1.operationId
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#Link'.'|'.1.operationId]", lpath_45 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$openapi#Link'.'|'.1.operationId]", lpath_45 if path is not None else None))
                return False
        elif pfun := _jm_obj_45_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_45 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#Link'.'|'.1]", lpath_45 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Link'.'|'.1.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Link'.'|'.1.'/^x\\\\-.*$/']", lpath_45 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Link'.'|'.1]", lpath_45 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$openapi#Link'.'|'.1]", path))
        return False
    return True

# check _jm_obj_47_may_description ($.'$openapi#Link'.'|'.0.description)
def _jm_f_99(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Link'.'|'.0.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Link'.'|'.0.description]", path))
    return res

# object $.'$openapi#Link'.'|'.0.parameters
def _jm_obj_48(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Link'.'|'.0.parameters]", path))
        return False
    # accept any object
    return True

# check _jm_obj_47_may_parameters ($.'$openapi#Link'.'|'.0.parameters)
def _jm_f_100(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Link'.'|'.0.parameters
    res = _jm_obj_48(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Link'.'|'.0.parameters]", path))
    return res

# check _jm_obj_47_may_requestBody ($.'$openapi#Link'.'|'.0.requestBody)
def _jm_f_101(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Link'.'|'.0.requestBody
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$openapi#Link'.'|'.0.requestBody]", path))
    return res

# check _jm_obj_47_may_server ($.'$openapi#Link'.'|'.0.server)
def _jm_f_102(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Link'.'|'.0.server
    res = json_model_8(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Server [$.'$openapi#Link'.'|'.0.server]", path))
    return res


# object $.'$openapi#Link'.'|'.0
def _jm_obj_47(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Link'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_46: Path = (path + [ prop ]) if path is not None else None
        if prop == "operationRef":
            # handle one must property
            must_count += 1
            # $.'$openapi#Link'.'|'.0.operationRef
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#Link'.'|'.0.operationRef]", lpath_46 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$openapi#Link'.'|'.0.operationRef]", lpath_46 if path is not None else None))
                return False
        elif pfun := _jm_obj_47_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_46 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#Link'.'|'.0]", lpath_46 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Link'.'|'.0.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Link'.'|'.0.'/^x\\\\-.*$/']", lpath_46 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Link'.'|'.0]", lpath_46 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$openapi#Link'.'|'.0]", path))
        return False
    return True

# check $openapi#Link ($.'$openapi#Link')
def json_model_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Link'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'$openapi#Link'.'|']", path))
    if res:
        # $.'$openapi#Link'.'|'.0
        res = _jm_obj_47(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$openapi#Link'.'|'.0]", path))
        if not res:
            # $.'$openapi#Link'.'|'.1
            res = _jm_obj_45(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'$openapi#Link'.'|'.1]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#Link'.'|']", path))
    return res

# check $openapi#Header ($.'$openapi#Header')
def json_model_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Header'
    res = json_model_15(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $parameterShare [$.'$openapi#Header']", path))
    return res

# check _jm_obj_49_may_allowEmptyValue ($.'$openapi#parameterShare'.allowEmptyValue)
def _jm_f_103(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#parameterShare'.allowEmptyValue
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#parameterShare'.allowEmptyValue]", path))
    return res

# check _jm_obj_49_may_allowReserved ($.'$openapi#parameterShare'.allowReserved)
def _jm_f_104(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#parameterShare'.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#parameterShare'.allowReserved]", path))
    return res

# object $.'$openapi#parameterShare'.content
def _jm_obj_50(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#parameterShare'.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_48: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#parameterShare'.content.''
        res = json_model_18(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [$.'$openapi#parameterShare'.content.'']", lpath_48 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_49_may_content ($.'$openapi#parameterShare'.content)
def _jm_f_105(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#parameterShare'.content
    res = _jm_obj_50(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#parameterShare'.content]", path))
    return res

# check _jm_obj_49_may_deprecated ($.'$openapi#parameterShare'.deprecated)
def _jm_f_106(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#parameterShare'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#parameterShare'.deprecated]", path))
    return res

# check _jm_obj_49_may_description ($.'$openapi#parameterShare'.description)
def _jm_f_107(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#parameterShare'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#parameterShare'.description]", path))
    return res

# check _jm_obj_49_may_example ($.'$openapi#parameterShare'.example)
def _jm_f_108(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#parameterShare'.example
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$openapi#parameterShare'.example]", path))
    return res

# object $.'$openapi#parameterShare'.examples
def _jm_obj_51(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#parameterShare'.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_49: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#parameterShare'.examples.''
        # $.'$openapi#parameterShare'.examples.''.'|'.0
        res = json_model_23(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [$.'$openapi#parameterShare'.examples.''.'|'.0]", lpath_49 if path is not None else None))
        if not res:
            # $.'$openapi#parameterShare'.examples.''.'|'.1
            res = json_model_28(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [$.'$openapi#parameterShare'.examples.''.'|'.1]", lpath_49 if path is not None else None))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#parameterShare'.examples.''.'|']", lpath_49 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_49_may_examples ($.'$openapi#parameterShare'.examples)
def _jm_f_109(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#parameterShare'.examples
    res = _jm_obj_51(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#parameterShare'.examples]", path))
    return res

# check _jm_obj_49_may_explode ($.'$openapi#parameterShare'.explode)
def _jm_f_110(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#parameterShare'.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#parameterShare'.explode]", path))
    return res

# check _jm_obj_49_may_model ($.'$openapi#parameterShare'.model)
def _jm_f_111(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#parameterShare'.model
    res = json_model_56(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [$.'$openapi#parameterShare'.model]", path))
    return res

# check _jm_obj_49_may_required ($.'$openapi#parameterShare'.required)
def _jm_f_112(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#parameterShare'.required
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#parameterShare'.required]", path))
    return res


# check _jm_obj_49_may_style ($.'$openapi#parameterShare'.style)
def _jm_f_113(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#parameterShare'.style
    res = (val is None or isinstance(val, (bool, int, float, str))) and val in _jm_cst_2
    if not res:
        rep is None or rep.append(("value not in enum [$.'$openapi#parameterShare'.style.'|']", path))
    return res


# object $.'$openapi#parameterShare'
def _jm_obj_49(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#parameterShare']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_47: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_49_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_47 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#parameterShare']", lpath_47 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#parameterShare'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#parameterShare'.'/^x\\\\-.*$/']", lpath_47 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#parameterShare']", lpath_47 if path is not None else None))
            return False
    return True

# check $openapi#parameterShare ($.'$openapi#parameterShare')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#parameterShare'
    res = _jm_obj_49(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#parameterShare']", path))
    return res

# check _jm_obj_52_may_description ($.'$openapi#Tag'.description)
def _jm_f_114(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Tag'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Tag'.description]", path))
    return res

# check _jm_obj_52_may_externalDocs ($.'$openapi#Tag'.externalDocs)
def _jm_f_115(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Tag'.externalDocs
    res = json_model_14(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ExternalDocumentation [$.'$openapi#Tag'.externalDocs]", path))
    return res


# object $.'$openapi#Tag'
def _jm_obj_52(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Tag']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_50: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle one must property
            must_count += 1
            # $.'$openapi#Tag'.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#Tag'.name]", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$openapi#Tag'.name]", lpath_50 if path is not None else None))
                return False
        elif pfun := _jm_obj_52_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_50 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#Tag']", lpath_50 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#Tag'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#Tag'.'/^x\\\\-.*$/']", lpath_50 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Tag']", lpath_50 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$openapi#Tag']", path))
        return False
    return True

# check $openapi#Tag ($.'$openapi#Tag')
def json_model_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Tag'
    res = _jm_obj_52(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Tag']", path))
    return res

# check _jm_obj_53_may_description ($.'$openapi#Reference'.description)
def _jm_f_116(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Reference'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Reference'.description]", path))
    return res

# check _jm_obj_53_may_summary ($.'$openapi#Reference'.summary)
def _jm_f_117(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Reference'.summary
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#Reference'.summary]", path))
    return res


# object $.'$openapi#Reference'
def _jm_obj_53(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#Reference']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_51: Path = (path + [ prop ]) if path is not None else None
        if prop == "$ref":
            # handle one must property
            must_count += 1
            # $.'$openapi#Reference'.'$ref'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#Reference'.'$ref']", lpath_51 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$openapi#Reference'.$ref]", lpath_51 if path is not None else None))
                return False
        elif pfun := _jm_obj_53_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_51 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#Reference']", lpath_51 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#Reference']", lpath_51 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$openapi#Reference']", path))
        return False
    return True

# check $openapi#Reference ($.'$openapi#Reference')
def json_model_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Reference'
    res = _jm_obj_53(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#Reference']", path))
    return res

# check _jm_obj_54_must_flows ($.'$openapi#SecurityScheme'.flows)
def _jm_f_118(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#SecurityScheme'.flows
    res = json_model_34(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $OAuthFlows [$.'$openapi#SecurityScheme'.flows]", path))
    return res

# check _jm_obj_54_must_in ($.'$openapi#SecurityScheme'.in)
def _jm_f_119(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#SecurityScheme'.in
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#SecurityScheme'.in]", path))
    return res

# check _jm_obj_54_must_name ($.'$openapi#SecurityScheme'.name)
def _jm_f_120(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#SecurityScheme'.name
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#SecurityScheme'.name]", path))
    return res

# check _jm_obj_54_must_openIdConnectUrl ($.'$openapi#SecurityScheme'.openIdConnectUrl)
def _jm_f_121(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#SecurityScheme'.openIdConnectUrl
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#SecurityScheme'.openIdConnectUrl]", path))
    return res

# check _jm_obj_54_must_scheme ($.'$openapi#SecurityScheme'.scheme)
def _jm_f_122(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#SecurityScheme'.scheme
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#SecurityScheme'.scheme]", path))
    return res

# check _jm_obj_54_must_type ($.'$openapi#SecurityScheme'.type)
def _jm_f_123(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#SecurityScheme'.type
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#SecurityScheme'.type]", path))
    return res


# check _jm_obj_54_may_bearerFormat ($.'$openapi#SecurityScheme'.bearerFormat)
def _jm_f_124(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#SecurityScheme'.bearerFormat
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#SecurityScheme'.bearerFormat]", path))
    return res

# check _jm_obj_54_may_description ($.'$openapi#SecurityScheme'.description)
def _jm_f_125(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#SecurityScheme'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#SecurityScheme'.description]", path))
    return res


# object $.'$openapi#SecurityScheme'
def _jm_obj_54(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#SecurityScheme']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_52: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_54_must.get(prop):
            # handle 6 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_52 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$openapi#SecurityScheme']", lpath_52 if path is not None else None))
                    return False
        elif pfun := _jm_obj_54_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_52 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#SecurityScheme']", lpath_52 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#SecurityScheme'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#SecurityScheme'.'/^x\\\\-.*$/']", lpath_52 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#SecurityScheme']", lpath_52 if path is not None else None))
            return False
    if must_count != 6:
        rep is None or rep.append(("missing must prop [$.'$openapi#SecurityScheme']", path))
        return False
    return True

# check $openapi#SecurityScheme ($.'$openapi#SecurityScheme')
def json_model_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#SecurityScheme'
    res = _jm_obj_54(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#SecurityScheme']", path))
    return res

# check _jm_obj_55_may_authorizationCode ($.'$openapi#OAuthFlows'.authorizationCode)
def _jm_f_126(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OAuthFlows'.authorizationCode
    res = json_model_35(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $OAuthFlow [$.'$openapi#OAuthFlows'.authorizationCode]", path))
    return res

# check _jm_obj_55_may_clientCredentials ($.'$openapi#OAuthFlows'.clientCredentials)
def _jm_f_127(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OAuthFlows'.clientCredentials
    res = json_model_35(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $OAuthFlow [$.'$openapi#OAuthFlows'.clientCredentials]", path))
    return res

# check _jm_obj_55_may_implicit ($.'$openapi#OAuthFlows'.implicit)
def _jm_f_128(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OAuthFlows'.implicit
    res = json_model_35(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $OAuthFlow [$.'$openapi#OAuthFlows'.implicit]", path))
    return res

# check _jm_obj_55_may_password ($.'$openapi#OAuthFlows'.password)
def _jm_f_129(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OAuthFlows'.password
    res = json_model_35(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $OAuthFlow [$.'$openapi#OAuthFlows'.password]", path))
    return res


# object $.'$openapi#OAuthFlows'
def _jm_obj_55(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#OAuthFlows']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_53: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_55_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_53 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#OAuthFlows']", lpath_53 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#OAuthFlows'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#OAuthFlows'.'/^x\\\\-.*$/']", lpath_53 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#OAuthFlows']", lpath_53 if path is not None else None))
            return False
    return True

# check $openapi#OAuthFlows ($.'$openapi#OAuthFlows')
def json_model_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OAuthFlows'
    res = _jm_obj_55(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#OAuthFlows']", path))
    return res

# check _jm_obj_56_must_authorizationUrl ($.'$openapi#OAuthFlow'.authorizationUrl)
def _jm_f_130(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OAuthFlow'.authorizationUrl
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#OAuthFlow'.authorizationUrl]", path))
    return res

# object $.'$openapi#OAuthFlow'.scopes
def _jm_obj_57(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#OAuthFlow'.scopes]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_55: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#OAuthFlow'.scopes.''
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [$.'$openapi#OAuthFlow'.scopes.'']", lpath_55 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_56_must_scopes ($.'$openapi#OAuthFlow'.scopes)
def _jm_f_131(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OAuthFlow'.scopes
    res = _jm_obj_57(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#OAuthFlow'.scopes]", path))
    return res

# check _jm_obj_56_must_tokenUrl ($.'$openapi#OAuthFlow'.tokenUrl)
def _jm_f_132(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OAuthFlow'.tokenUrl
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#OAuthFlow'.tokenUrl]", path))
    return res


# object $.'$openapi#OAuthFlow'
def _jm_obj_56(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#OAuthFlow']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_54: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_56_must.get(prop):
            # handle 3 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_54 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$openapi#OAuthFlow']", lpath_54 if path is not None else None))
                    return False
        elif prop == "refreshUrl":
            # handle one may property
            # $.'$openapi#OAuthFlow'.refreshUrl
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#OAuthFlow'.refreshUrl]", lpath_54 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$openapi#OAuthFlow'.refreshUrl]", lpath_54 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$openapi#OAuthFlow'.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [$.'$openapi#OAuthFlow'.'/^x\\\\-.*$/']", lpath_54 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#OAuthFlow']", lpath_54 if path is not None else None))
            return False
    if must_count != 3:
        rep is None or rep.append(("missing must prop [$.'$openapi#OAuthFlow']", path))
        return False
    return True

# check $openapi#OAuthFlow ($.'$openapi#OAuthFlow')
def json_model_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#OAuthFlow'
    res = _jm_obj_56(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#OAuthFlow']", path))
    return res

# object $.'$openapi#SecurityRequirement'
def _jm_obj_58(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#SecurityRequirement']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_56: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$openapi#SecurityRequirement'.''
        res = isinstance(pval, list)
        if res:
            for arr_6_idx, arr_6_item in enumerate(pval):
                arr_6_lpath: Path = ((lpath_56 if path is not None else None) + [ arr_6_idx ]) if (lpath_56 if path is not None else None) is not None else None
                # $.'$openapi#SecurityRequirement'.''.0
                res = isinstance(arr_6_item, str)
                if not res:
                    rep is None or rep.append(("unexpected string [$.'$openapi#SecurityRequirement'.''.0]", arr_6_lpath if (lpath_56 if path is not None else None) is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [$.'$openapi#SecurityRequirement'.'']", lpath_56 if path is not None else None))
        if not res:
            return False
    return True

# check $openapi#SecurityRequirement ($.'$openapi#SecurityRequirement')
def json_model_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#SecurityRequirement'
    res = _jm_obj_58(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$openapi#SecurityRequirement']", path))
    return res

# check $openapi#Model ($.'$openapi#Model')
def json_model_56(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#Model'
    res = json_model_73(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $model#Model [$.'$openapi#Model']", path))
    return res

# check $openapi#model#Model ($.'$openapi#model#Model')
def json_model_73(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#model#Model'
    # $.'$openapi#model#Model'.'|'.0
    res = json_model_72(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Scalar [$.'$openapi#model#Model'.'|'.0]", path))
    if not res:
        # $.'$openapi#model#Model'.'|'.1
        res = json_model_63(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Array [$.'$openapi#model#Model'.'|'.1]", path))
        if not res:
            # $.'$openapi#model#Model'.'|'.2
            res = json_model_70(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Elem [$.'$openapi#model#Model'.'|'.2]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$openapi#model#Model'.'|']", path))
    return res

# check $openapi#model#Array ($.'$openapi#model#Array')
def json_model_63(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#model#Array'
    res = isinstance(val, list)
    if res:
        for arr_7_idx, arr_7_item in enumerate(val):
            arr_7_lpath: Path = (path + [ arr_7_idx ]) if path is not None else None
            # $.'$openapi#model#Array'.0
            res = json_model_73(arr_7_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$openapi#model#Array'.0]", arr_7_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$openapi#model#Array']", path))
    return res


# object $.'$openapi#model#Elem'.'|'.5
def _jm_obj_59(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#model#Elem'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_57: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle one may property
            # $.'$openapi#model#Elem'.'|'.5.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#model#Elem'.'|'.5.'#']", lpath_57 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$openapi#model#Elem'.'|'.5.#]", lpath_57 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$openapi#model#Elem'.'|'.5.'/^[@|&^+/*]$/'
            res = False
            if not res:
                rep is None or rep.append(("unexpected $NONE [$.'$openapi#model#Elem'.'|'.5.'/^[@|&^+/*]$/']", lpath_57 if path is not None else None))
            if not res:
                return False
        else:
            # handle other props
            # $.'$openapi#model#Elem'.'|'.5.''
            res = json_model_73(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$openapi#model#Elem'.'|'.5.'']", lpath_57 if path is not None else None))
            if not res:
                return False
    return True

# object $.'$openapi#model#Elem'.'|'.4
def _jm_obj_60(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#model#Elem'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_58: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle one must property
            must_count += 1
            # $.'$openapi#model#Elem'.'|'.4.'+'
            res = isinstance(pval, list)
            if res:
                for arr_8_idx, arr_8_item in enumerate(pval):
                    arr_8_lpath: Path = ((lpath_58 if path is not None else None) + [ arr_8_idx ]) if (lpath_58 if path is not None else None) is not None else None
                    # $.'$openapi#model#Elem'.'|'.4.'+'.0
                    res = json_model_73(arr_8_item, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [$.'$openapi#model#Elem'.'|'.4.'+'.0]", arr_8_lpath if (lpath_58 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [$.'$openapi#model#Elem'.'|'.4.'+']", lpath_58 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$openapi#model#Elem'.'|'.4.+]", lpath_58 if path is not None else None))
                return False
        elif prop == "#":
            # handle one may property
            # $.'$openapi#model#Elem'.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#model#Elem'.'|'.4.'#']", lpath_58 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$openapi#model#Elem'.'|'.4.#]", lpath_58 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#model#Elem'.'|'.4]", lpath_58 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$openapi#model#Elem'.'|'.4]", path))
        return False
    return True

# object $.'$openapi#model#Elem'.'|'.3
def _jm_obj_61(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#model#Elem'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_59: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle one must property
            must_count += 1
            # $.'$openapi#model#Elem'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_9_idx, arr_9_item in enumerate(pval):
                    arr_9_lpath: Path = ((lpath_59 if path is not None else None) + [ arr_9_idx ]) if (lpath_59 if path is not None else None) is not None else None
                    # $.'$openapi#model#Elem'.'|'.3.'^'.0
                    res = json_model_73(arr_9_item, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [$.'$openapi#model#Elem'.'|'.3.'^'.0]", arr_9_lpath if (lpath_59 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [$.'$openapi#model#Elem'.'|'.3.'^']", lpath_59 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$openapi#model#Elem'.'|'.3.^]", lpath_59 if path is not None else None))
                return False
        elif prop == "#":
            # handle one may property
            # $.'$openapi#model#Elem'.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#model#Elem'.'|'.3.'#']", lpath_59 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$openapi#model#Elem'.'|'.3.#]", lpath_59 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#model#Elem'.'|'.3]", lpath_59 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$openapi#model#Elem'.'|'.3]", path))
        return False
    return True

# object $.'$openapi#model#Elem'.'|'.2
def _jm_obj_62(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#model#Elem'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_60: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle one must property
            must_count += 1
            # $.'$openapi#model#Elem'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_10_idx, arr_10_item in enumerate(pval):
                    arr_10_lpath: Path = ((lpath_60 if path is not None else None) + [ arr_10_idx ]) if (lpath_60 if path is not None else None) is not None else None
                    # $.'$openapi#model#Elem'.'|'.2.'&'.0
                    res = json_model_73(arr_10_item, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [$.'$openapi#model#Elem'.'|'.2.'&'.0]", arr_10_lpath if (lpath_60 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [$.'$openapi#model#Elem'.'|'.2.'&']", lpath_60 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$openapi#model#Elem'.'|'.2.&]", lpath_60 if path is not None else None))
                return False
        elif prop == "#":
            # handle one may property
            # $.'$openapi#model#Elem'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#model#Elem'.'|'.2.'#']", lpath_60 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$openapi#model#Elem'.'|'.2.#]", lpath_60 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#model#Elem'.'|'.2]", lpath_60 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$openapi#model#Elem'.'|'.2]", path))
        return False
    return True

# object $.'$openapi#model#Elem'.'|'.1
def _jm_obj_63(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#model#Elem'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_61: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle one must property
            must_count += 1
            # $.'$openapi#model#Elem'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_11_idx, arr_11_item in enumerate(pval):
                    arr_11_lpath: Path = ((lpath_61 if path is not None else None) + [ arr_11_idx ]) if (lpath_61 if path is not None else None) is not None else None
                    # $.'$openapi#model#Elem'.'|'.1.'|'.0
                    res = json_model_73(arr_11_item, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [$.'$openapi#model#Elem'.'|'.1.'|'.0]", arr_11_lpath if (lpath_61 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [$.'$openapi#model#Elem'.'|'.1.'|']", lpath_61 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$openapi#model#Elem'.'|'.1.|]", lpath_61 if path is not None else None))
                return False
        elif prop == "#":
            # handle one may property
            # $.'$openapi#model#Elem'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$openapi#model#Elem'.'|'.1.'#']", lpath_61 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$openapi#model#Elem'.'|'.1.#]", lpath_61 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#model#Elem'.'|'.1]", lpath_61 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$openapi#model#Elem'.'|'.1]", path))
        return False
    return True

# check _jm_obj_64_may_! ($.'$openapi#model#Elem'.'|'.0.'!')
def _jm_f_133(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#model#Elem'.'|'.0.'!'
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$openapi#model#Elem'.'|'.0.'!']", path))
    return res

# check _jm_obj_64_may_# ($.'$openapi#model#Elem'.'|'.0.'#')
def _jm_f_134(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#model#Elem'.'|'.0.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$openapi#model#Elem'.'|'.0.'#']", path))
    return res




# object $.'$openapi#model#Elem'.'|'.0
def _jm_obj_64(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$openapi#model#Elem'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_62: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle one must property
            must_count += 1
            # $.'$openapi#model#Elem'.'|'.0.'@'
            res = json_model_73(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$openapi#model#Elem'.'|'.0.'@']", lpath_62 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$openapi#model#Elem'.'|'.0.@]", lpath_62 if path is not None else None))
                return False
        elif pfun := _jm_obj_64_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_62 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$openapi#model#Elem'.'|'.0]", lpath_62 if path is not None else None))
                return False
        elif _jm_re_5(prop):
            # handle {len(regs)} re props
            # $.'$openapi#model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$openapi#model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [$.'$openapi#model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]", lpath_62 if path is not None else None))
            if not res:
                # $.'$openapi#model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                res = isinstance(pval, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [$.'$openapi#model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]", lpath_62 if path is not None else None))
                if not res:
                    # $.'$openapi#model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    res = isinstance(pval, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [$.'$openapi#model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]", lpath_62 if path is not None else None))
            if not res:
                rep is None or rep.append(("no model matched [$.'$openapi#model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|']", lpath_62 if path is not None else None))
            if not res:
                return False
        elif _jm_re_6(prop):
            # handle {len(regs)} re props
            # $.'$openapi#model#Elem'.'|'.0.'/^(=|!=|≠)$/'
            res = json_model_59(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Val [$.'$openapi#model#Elem'.'|'.0.'/^(=|!=|≠)$/']", lpath_62 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$openapi#model#Elem'.'|'.0]", lpath_62 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$openapi#model#Elem'.'|'.0]", path))
        return False
    return True

# check $openapi#model#Elem ($.'$openapi#model#Elem')
def json_model_70(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#model#Elem'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'$openapi#model#Elem'.'|']", path))
    if res:
        # $.'$openapi#model#Elem'.'|'.0
        res = _jm_obj_64(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$openapi#model#Elem'.'|'.0]", path))
        if not res:
            # $.'$openapi#model#Elem'.'|'.1
            res = _jm_obj_63(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'$openapi#model#Elem'.'|'.1]", path))
            if not res:
                # $.'$openapi#model#Elem'.'|'.2
                res = _jm_obj_62(val, path, rep)
                if not res:
                    rep is None or rep.append(("not an expected object at [$.'$openapi#model#Elem'.'|'.2]", path))
                if not res:
                    # $.'$openapi#model#Elem'.'|'.3
                    res = _jm_obj_61(val, path, rep)
                    if not res:
                        rep is None or rep.append(("not an expected object at [$.'$openapi#model#Elem'.'|'.3]", path))
                    if not res:
                        # $.'$openapi#model#Elem'.'|'.4
                        res = _jm_obj_60(val, path, rep)
                        if not res:
                            rep is None or rep.append(("not an expected object at [$.'$openapi#model#Elem'.'|'.4]", path))
                        if not res:
                            # $.'$openapi#model#Elem'.'|'.5
                            res = _jm_obj_59(val, path, rep)
                            if not res:
                                rep is None or rep.append(("not an expected object at [$.'$openapi#model#Elem'.'|'.5]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'$openapi#model#Elem'.'|']", path))
    return res

# check $openapi#model#Val ($.'$openapi#model#Val')
def json_model_59(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#model#Val'
    # $.'$openapi#model#Val'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.'$openapi#model#Val'.'|'.0]", path))
    if not res:
        # $.'$openapi#model#Val'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [$.'$openapi#model#Val'.'|'.1]", path))
        if not res:
            # $.'$openapi#model#Val'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [$.'$openapi#model#Val'.'|'.2]", path))
            if not res:
                # $.'$openapi#model#Val'.'|'.3
                res = isinstance(val, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [$.'$openapi#model#Val'.'|'.3]", path))
                if not res:
                    # $.'$openapi#model#Val'.'|'.4
                    res = isinstance(val, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [$.'$openapi#model#Val'.'|'.4]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$openapi#model#Val'.'|']", path))
    return res

# check $openapi#model#Scalar ($.'$openapi#model#Scalar')
def json_model_72(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$openapi#model#Scalar'
    # $.'$openapi#model#Scalar'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.'$openapi#model#Scalar'.'|'.0]", path))
    if not res:
        # $.'$openapi#model#Scalar'.'|'.1
        res = isinstance(val, bool) and val == True
        if not res:
            rep is None or rep.append(("unexpected =true [$.'$openapi#model#Scalar'.'|'.1]", path))
        if not res:
            # $.'$openapi#model#Scalar'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool) and val == 0
            if not res:
                rep is None or rep.append(("unexpected =0 [$.'$openapi#model#Scalar'.'|'.2]", path))
            if not res:
                # $.'$openapi#model#Scalar'.'|'.3
                res = isinstance(val, int) and not isinstance(val, bool) and val == 1
                if not res:
                    rep is None or rep.append(("unexpected =1 [$.'$openapi#model#Scalar'.'|'.3]", path))
                if not res:
                    # $.'$openapi#model#Scalar'.'|'.4
                    res = isinstance(val, int) and not isinstance(val, bool) and val == -1
                    if not res:
                        rep is None or rep.append(("unexpected =-1 [$.'$openapi#model#Scalar'.'|'.4]", path))
                    if not res:
                        # $.'$openapi#model#Scalar'.'|'.5
                        res = isinstance(val, float) and val == 0.0
                        if not res:
                            rep is None or rep.append(("unexpected =0.0 [$.'$openapi#model#Scalar'.'|'.5]", path))
                        if not res:
                            # $.'$openapi#model#Scalar'.'|'.6
                            res = isinstance(val, float) and val == 1.0
                            if not res:
                                rep is None or rep.append(("unexpected =1.0 [$.'$openapi#model#Scalar'.'|'.6]", path))
                            if not res:
                                # $.'$openapi#model#Scalar'.'|'.7
                                res = isinstance(val, float) and val == -1.0
                                if not res:
                                    rep is None or rep.append(("unexpected =-1.0 [$.'$openapi#model#Scalar'.'|'.7]", path))
                                if not res:
                                    # $.'$openapi#model#Scalar'.'|'.8
                                    res = isinstance(val, str)
                                    if not res:
                                        rep is None or rep.append(("unexpected string [$.'$openapi#model#Scalar'.'|'.8]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$openapi#model#Scalar'.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_obj_0_must
        _jm_obj_0_must = {
            "info": _jm_f_0,
            "openapi": _jm_f_1,
        }
        global _jm_obj_0_may
        _jm_obj_0_may = {
            "component": _jm_f_2,
            "externalDocs": _jm_f_3,
            "jsonSchemaDialect": _jm_f_4,
            "paths": _jm_f_5,
            "security": _jm_f_6,
            "servers": _jm_f_7,
            "tags": _jm_f_8,
            "webhooks": _jm_f_9,
        }
        global _jm_re_0_search, _jm_re_0
        _jm_re_0_search = re.compile("^x\\-.*$").search
        _jm_re_0 = lambda s: _jm_re_0_search(s) is not None
        global _jm_obj_2_must
        _jm_obj_2_must = {
            "title": _jm_f_10,
            "version": _jm_f_11,
        }
        global _jm_obj_2_may
        _jm_obj_2_may = {
            "contact": _jm_f_12,
            "description": _jm_f_13,
            "license": _jm_f_14,
            "summary": _jm_f_15,
            "termsOfService": _jm_f_16,
        }
        global _jm_obj_3_may
        _jm_obj_3_may = {
            "email": _jm_f_17,
            "name": _jm_f_18,
            "url": _jm_f_19,
        }
        global _jm_obj_4_must
        _jm_obj_4_must = {
            "name": _jm_f_20,
            "url": _jm_f_21,
        }
        global _jm_obj_5_must
        _jm_obj_5_must = {
            "identifier": _jm_f_22,
            "name": _jm_f_23,
        }
        global _jm_obj_6_may
        _jm_obj_6_may = {
            "description": _jm_f_24,
            "variables": _jm_f_25,
        }
        global _jm_obj_8_may
        _jm_obj_8_may = {
            "description": _jm_f_26,
            "enum": _jm_f_27,
        }
        global _jm_obj_9_may
        _jm_obj_9_may = {
            "callbacks": _jm_f_28,
            "examples": _jm_f_29,
            "headers": _jm_f_30,
            "links": _jm_f_31,
            "models": _jm_f_32,
            "parameters": _jm_f_33,
            "pathItems": _jm_f_34,
            "requestBodies": _jm_f_35,
            "responses": _jm_f_36,
            "securitySchemes": _jm_f_37,
        }
        global _jm_re_1_search, _jm_re_1
        _jm_re_1_search = re.compile("^/").search
        _jm_re_1 = lambda s: _jm_re_1_search(s) is not None
        global _jm_obj_21_may
        _jm_obj_21_may = {
            "$ref": _jm_f_38,
            "description": _jm_f_39,
            "get": _jm_f_40,
            "head": _jm_f_41,
            "options": _jm_f_42,
            "parameters": _jm_f_43,
            "patch": _jm_f_44,
            "post": _jm_f_45,
            "put": _jm_f_46,
            "servers": _jm_f_47,
            "summary": _jm_f_48,
            "trace": _jm_f_49,
        }
        global _jm_obj_23_may
        _jm_obj_23_may = {
            "callbacks": _jm_f_50,
            "deprecated": _jm_f_51,
            "description": _jm_f_52,
            "externalDocs": _jm_f_53,
            "operationId": _jm_f_54,
            "parameters": _jm_f_55,
            "requestBody": _jm_f_56,
            "responses": _jm_f_57,
            "security": _jm_f_58,
            "servers": _jm_f_59,
            "summary": _jm_f_60,
            "tags": _jm_f_61,
        }
        global _jm_cst_0
        _jm_cst_0 = {'cookie', 'header', 'path', 'query'}
        global _jm_obj_28_must
        _jm_obj_28_must = {
            "in": _jm_f_62,
            "name": _jm_f_63,
        }
        global _jm_cst_1
        _jm_cst_1 = {'deepObject', 'form', 'label', 'matrix', 'pipeDelimited', 'simple', 'spaceDelimited'}
        global _jm_obj_28_may
        _jm_obj_28_may = {
            "allowEmptyValue": _jm_f_64,
            "allowReserved": _jm_f_65,
            "content": _jm_f_66,
            "deprecated": _jm_f_67,
            "description": _jm_f_68,
            "example": _jm_f_69,
            "examples": _jm_f_70,
            "explode": _jm_f_71,
            "model": _jm_f_72,
            "required": _jm_f_73,
            "style": _jm_f_74,
        }
        global _jm_obj_31_may
        _jm_obj_31_may = {
            "content": _jm_f_75,
            "description": _jm_f_76,
            "required": _jm_f_77,
        }
        global _jm_obj_33_may
        _jm_obj_33_may = {
            "encoding": _jm_f_78,
            "example": _jm_f_79,
            "examples": _jm_f_80,
            "model": _jm_f_81,
        }
        global _jm_obj_36_may
        _jm_obj_36_may = {
            "allowReserved": _jm_f_82,
            "contentType": _jm_f_83,
            "explode": _jm_f_84,
            "headers": _jm_f_85,
            "style": _jm_f_86,
        }
        global _jm_re_2_search, _jm_re_2
        _jm_re_2_search = re.compile("^[1-5](\\d\\d|XX)$").search
        _jm_re_2 = lambda s: _jm_re_2_search(s) is not None
        global _jm_obj_39_may
        _jm_obj_39_may = {
            "content": _jm_f_87,
            "description": _jm_f_88,
            "headers": _jm_f_89,
            "links": _jm_f_90,
        }
        global _jm_obj_44_may
        _jm_obj_44_may = {
            "description": _jm_f_91,
            "externalValue": _jm_f_92,
            "summary": _jm_f_93,
            "value": _jm_f_94,
        }
        global _jm_re_3_search, _jm_re_3
        _jm_re_3_search = re.compile("\\{.*\\}").search
        _jm_re_3 = lambda s: _jm_re_3_search(s) is not None
        global _jm_obj_45_may
        _jm_obj_45_may = {
            "description": _jm_f_95,
            "parameters": _jm_f_96,
            "requestBody": _jm_f_97,
            "server": _jm_f_98,
        }
        global _jm_obj_47_may
        _jm_obj_47_may = {
            "description": _jm_f_99,
            "parameters": _jm_f_100,
            "requestBody": _jm_f_101,
            "server": _jm_f_102,
        }
        global _jm_cst_2
        _jm_cst_2 = {'deepObject', 'form', 'label', 'matrix', 'pipeDelimited', 'simple', 'spaceDelimited'}
        global _jm_obj_49_may
        _jm_obj_49_may = {
            "allowEmptyValue": _jm_f_103,
            "allowReserved": _jm_f_104,
            "content": _jm_f_105,
            "deprecated": _jm_f_106,
            "description": _jm_f_107,
            "example": _jm_f_108,
            "examples": _jm_f_109,
            "explode": _jm_f_110,
            "model": _jm_f_111,
            "required": _jm_f_112,
            "style": _jm_f_113,
        }
        global _jm_obj_52_may
        _jm_obj_52_may = {
            "description": _jm_f_114,
            "externalDocs": _jm_f_115,
        }
        global _jm_obj_53_may
        _jm_obj_53_may = {
            "description": _jm_f_116,
            "summary": _jm_f_117,
        }
        global _jm_obj_54_must
        _jm_obj_54_must = {
            "flows": _jm_f_118,
            "in": _jm_f_119,
            "name": _jm_f_120,
            "openIdConnectUrl": _jm_f_121,
            "scheme": _jm_f_122,
            "type": _jm_f_123,
        }
        global _jm_obj_54_may
        _jm_obj_54_may = {
            "bearerFormat": _jm_f_124,
            "description": _jm_f_125,
        }
        global _jm_obj_55_may
        _jm_obj_55_may = {
            "authorizationCode": _jm_f_126,
            "clientCredentials": _jm_f_127,
            "implicit": _jm_f_128,
            "password": _jm_f_129,
        }
        global _jm_obj_56_must
        _jm_obj_56_must = {
            "authorizationUrl": _jm_f_130,
            "scopes": _jm_f_131,
            "tokenUrl": _jm_f_132,
        }
        global _jm_re_4_search, _jm_re_4
        _jm_re_4_search = re.compile("^[@|&^+/*]$").search
        _jm_re_4 = lambda s: _jm_re_4_search(s) is not None
        global _jm_obj_64_may
        _jm_obj_64_may = {
            "!": _jm_f_133,
            "#": _jm_f_134,
        }
        global _jm_re_5_search, _jm_re_5
        _jm_re_5_search = re.compile("^(<=|>=|<|>|≥|≤)$").search
        _jm_re_5 = lambda s: _jm_re_5_search(s) is not None
        global _jm_re_6_search, _jm_re_6
        _jm_re_6_search = re.compile("^(=|!=|≠)$").search
        _jm_re_6 = lambda s: _jm_re_6_search(s) is not None
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "openapi": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_search, _jm_re_0
        _jm_re_0_search = None
        _jm_re_0 = None
        global _jm_re_1_search, _jm_re_1
        _jm_re_1_search = None
        _jm_re_1 = None
        global _jm_re_2_search, _jm_re_2
        _jm_re_2_search = None
        _jm_re_2 = None
        global _jm_re_3_search, _jm_re_3
        _jm_re_3_search = None
        _jm_re_3 = None
        global _jm_re_4_search, _jm_re_4
        _jm_re_4_search = None
        _jm_re_4 = None
        global _jm_re_5_search, _jm_re_5
        _jm_re_5_search = None
        _jm_re_5 = None
        global _jm_re_6_search, _jm_re_6
        _jm_re_6_search = None
        _jm_re_6 = None


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
