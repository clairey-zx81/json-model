#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_2($$$);
sub json_model_3($$$);
sub json_model_4($$$);
sub json_model_1($$$);
my %check_model_map;

# object .'$Oo0'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'a')
        {
            # handle must a property
            $must_count++;
            # .'$Oo0'.a
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'b')
        {
            # handle must b property
            $must_count++;
            # .'$Oo0'.b
            $res = jm_is_integer($pval) && $pval >= 0;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'c')
        {
            # handle must c property
            $must_count++;
            # .'$Oo0'.c
            $res = !defined($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'd')
        {
            # handle must d property
            $must_count++;
            # .'$Oo0'.d
            $res = jm_is_numeric($pval) && $pval >= 0.0;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            # handle other props
            # .'$Oo0'.''
            $res = jm_is_string($pval) && jm_is_valid_date($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
    }
    if ($must_count != 4)
    {
        return 0;
    }
    return 1;
}

# check $Oo0 (.'$Oo0')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Oo0'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# object .'$Oo1'
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'z')
        {
            # handle must z property
            $must_count++;
            # .'$Oo1'.z
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'a')
        {
            # handle may a property
            # .'$Oo1'.a
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'b')
        {
            # handle may b property
            # .'$Oo1'.b
            $res = jm_is_integer($pval) && $pval >= 0;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'c')
        {
            # handle may c property
            # .'$Oo1'.c
            $res = !defined($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'd')
        {
            # handle may d property
            # .'$Oo1'.d
            $res = jm_is_numeric($pval) && $pval >= 0.0;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Oo1 (.'$Oo1')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Oo1'
    $res = _jm_obj_1($val, $path, $rep);
    return $res;
}

# object .'$Oo2'
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'a')
        {
            # handle must a property
            $must_count++;
            # .'$Oo2'.a
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'b')
        {
            # handle must b property
            $must_count++;
            # .'$Oo2'.b
            $res = jm_is_integer($pval) && $pval >= 0;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'c')
        {
            # handle must c property
            $must_count++;
            # .'$Oo2'.c
            $res = !defined($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'd')
        {
            # handle must d property
            $must_count++;
            # .'$Oo2'.d
            $res = jm_is_numeric($pval) && $pval >= 0.0;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'y')
        {
            # handle may y property
            # .'$Oo2'.y
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 4)
    {
        return 0;
    }
    return 1;
}

# check $Oo2 (.'$Oo2')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Oo2'
    $res = _jm_obj_2($val, $path, $rep);
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    # .'|'.0
    $res = json_model_2($val, $path, $rep);
    if (! $res)
    {
        # .'|'.1
        $res = json_model_3($val, $path, $rep);
        if (! $res)
        {
            # .'|'.2
            $res = json_model_4($val, $path, $rep);
        }
    }
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&json_model_1,
            'Oo0' => \&json_model_2,
            'Oo1' => \&json_model_3,
            'Oo2' => \&json_model_4,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
