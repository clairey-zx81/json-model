#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_obj_0_mup: PropMap
_jm_obj_1_map: PropMap
_jm_obj_2_mup: PropMap
check_model_map: PropMap

# check _jm_obj_0_mup_a ($.'$O0'.a)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O0'.a
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$O0'.a]", path))
    return res

# check _jm_obj_0_mup_b ($.'$O0'.b)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O0'.b
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$O0'.b]", path))
    return res

# check _jm_obj_0_mup_c ($.'$O0'.c)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O0'.c
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.'$O0'.c]", path))
    return res

# check _jm_obj_0_mup_d ($.'$O0'.d)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O0'.d
    res = isinstance(val, float) and val >= 0.0
    if not res:
        rep is None or rep.append(("not a 0.0 strict float [$.'$O0'.d]", path))
    return res


# object $.'$O0'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$O0']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_mup.get(prop):
            # handle 4 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_0 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$O0']", lpath_0 if path is not None else None))
                    return False
        else:
            # handle other props
            # $.'$O0'.''
            res = is_valid_date(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $DATE [$.'$O0'.'']", lpath_0 if path is not None else None))
            if not res:
                return False
    if must_count != 4:
        rep is None or rep.append(("missing must prop [$.'$O0'.'']", path))
        return False
    return True

# check $O0 ($.'$O0')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O0'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$O0']", path))
    return res

# check _jm_obj_1_map_a ($.'$O1'.a)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O1'.a
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$O1'.a]", path))
    return res

# check _jm_obj_1_map_b ($.'$O1'.b)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O1'.b
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$O1'.b]", path))
    return res

# check _jm_obj_1_map_c ($.'$O1'.c)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O1'.c
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.'$O1'.c]", path))
    return res

# check _jm_obj_1_map_d ($.'$O1'.d)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O1'.d
    res = isinstance(val, float) and val >= 0.0
    if not res:
        rep is None or rep.append(("not a 0.0 strict float [$.'$O1'.d]", path))
    return res


# object $.'$O1'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$O1']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "z":
            # handle must z property
            must_count += 1
            # $.'$O1'.z
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$O1'.z]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$O1'.z]", lpath_1 if path is not None else None))
                return False
        elif pfun := _jm_obj_1_map.get(prop):
            # handle 4 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_1 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$O1']", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$O1']", lpath_1 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$O1']", path))
        return False
    return True

# check $O1 ($.'$O1')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O1'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$O1']", path))
    return res

# check _jm_obj_2_mup_a ($.'$O2'.a)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O2'.a
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$O2'.a]", path))
    return res

# check _jm_obj_2_mup_b ($.'$O2'.b)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O2'.b
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$O2'.b]", path))
    return res

# check _jm_obj_2_mup_c ($.'$O2'.c)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O2'.c
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.'$O2'.c]", path))
    return res

# check _jm_obj_2_mup_d ($.'$O2'.d)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O2'.d
    res = isinstance(val, float) and val >= 0.0
    if not res:
        rep is None or rep.append(("not a 0.0 strict float [$.'$O2'.d]", path))
    return res


# object $.'$O2'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$O2']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_2_mup.get(prop):
            # handle 4 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_2 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$O2']", lpath_2 if path is not None else None))
                    return False
        elif prop == "y":
            # handle may y property
            # $.'$O2'.y
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$O2'.y]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$O2'.y]", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$O2']", lpath_2 if path is not None else None))
            return False
    if must_count != 4:
        rep is None or rep.append(("missing must prop [$.'$O2']", path))
        return False
    return True

# check $O2 ($.'$O2')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O2'
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$O2']", path))
    return res

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    # $.'|'.0
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $O0 [$.'|'.0]", path))
    if not res:
        # $.'|'.1
        res = json_model_3(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $O1 [$.'|'.1]", path))
        if not res:
            # $.'|'.2
            res = json_model_4(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $O2 [$.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [$.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_obj_0_mup
        _jm_obj_0_mup = {
            "a": _jm_f_0,
            "b": _jm_f_1,
            "c": _jm_f_2,
            "d": _jm_f_3,
        }
        global _jm_obj_1_map
        _jm_obj_1_map = {
            "a": _jm_f_4,
            "b": _jm_f_5,
            "c": _jm_f_6,
            "d": _jm_f_7,
        }
        global _jm_obj_2_mup
        _jm_obj_2_mup = {
            "a": _jm_f_8,
            "b": _jm_f_9,
            "c": _jm_f_10,
            "d": _jm_f_11,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "O0": json_model_2,
            "O1": json_model_3,
            "O2": json_model_4,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
