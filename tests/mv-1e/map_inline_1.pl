#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub _jm_obj_0($$$);
sub json_model_1($$$);
my %check_model_map;

# object .
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'mu1')
        {
            # handle must mu1 property
            $must_count++;
            # .mu1
            $res = !defined($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'mu2')
        {
            # handle must mu2 property
            $must_count++;
            # .mu2
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'mu3')
        {
            # handle must mu3 property
            $must_count++;
            # .mu3
            $res = jm_is_integer($pval) && $pval >= 0;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'ma1')
        {
            # handle may ma1 property
            # .ma1
            $res = jm_is_numeric($pval) && $pval >= 0.0;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'ma2')
        {
            # handle may ma2 property
            # .ma2
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'ma3')
        {
            # handle may ma3 property
            # .ma3
            $res = jm_is_string($pval) && jm_is_valid_date($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 3)
    {
        return 0;
    }
    return 1;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # inline up to 3 must/may properties
    # .
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&_jm_obj_0,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
