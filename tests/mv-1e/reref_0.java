//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class reref_0 extends ModelChecker
{
    static public final String VERSION = "2";

    Set<Object> _jm_cst_0_set;
    public Pattern _jm_xre_0_re_pat = null;
    public Map<String, Checker> reref_0_map_pmap;


    // check $character (.'$character')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        // .'$character'
        boolean res = json.isScalar(val) && _jm_cst_0_set.contains(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("value not in enum [.'$character'.'|']", path);
        }
        return res;
    }

    public boolean _jm_xre_0_re(String val, Path path, Report rep)
    {
        return _jm_xre_0_re_pat.matcher(val).find();
    }

    public boolean _jm_xre_0(String val, Path path, Report rep)
    {
        Matcher _jm_xre_0_re_match;
        boolean match = (_jm_xre_0_re_match = _jm_xre_0_re_pat.matcher(val)).find();
        if (! match)
        {
            return false;
        }
        String extract = _jm_xre_0_re_match.group("s1");
        if (! json_model_2(json.strToJSON(extract), path, rep))
        {
            return false;
        }
        extract = _jm_xre_0_re_match.group("s2");
        if (! json_model_2(json.strToJSON(extract), path, rep))
        {
            return false;
        }
        return true;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // .
        // "/'($character:\\w+)'.*'($character:\\w+)'/X"
        boolean res = json.isString(val) && _jm_xre_0(json.asString(val), path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected /'($character:\\w+)'.*'($character:\\w+)'/X [.]", path);
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_cst_0_set = new HashSet<Object>();
            _jm_cst_0_set.add(json.safeJSON("\"Susie\""));
            _jm_cst_0_set.add(json.safeJSON("\"Calvin\""));
            _jm_cst_0_set.add(json.safeJSON("\"Hobbes\""));
            _jm_xre_0_re_pat = Pattern.compile("'(?<s1>\\w+)'.*'(?<s2>\\w+)'");
            reref_0_map_pmap = new HashMap<String, Checker>();
            reref_0_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            reref_0_map_pmap.put("character", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_cst_0_set = null;
            _jm_xre_0_re_pat = null;
            reref_0_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return reref_0_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return reref_0_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new reref_0();
        Main.main("reref_0", checker, VERSION, args);
    }
}
