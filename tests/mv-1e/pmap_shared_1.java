//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class pmap_shared_1 extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> pmap_shared_1_map_pmap;

    // object .'$Oo0'
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Oo0']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (prop.compareTo("a") == 0)
            {
                // handle must a property
                must_count += 1;
                // .'$Oo0'.a
                res = json.isBoolean(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a bool [.'$Oo0'.a]", (path != null ? lpath_0 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Oo0'.a]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("b") == 0)
            {
                // handle must b property
                must_count += 1;
                // .'$Oo0'.b
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.'$Oo0'.b]", (path != null ? lpath_0 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Oo0'.b]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("c") == 0)
            {
                // handle must c property
                must_count += 1;
                // .'$Oo0'.c
                res = json.isNull(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not null [.'$Oo0'.c]", (path != null ? lpath_0 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Oo0'.c]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("d") == 0)
            {
                // handle must d property
                must_count += 1;
                // .'$Oo0'.d
                res = json.isDouble(pval) && json.asDouble(pval) >= 0.0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0.0 strict float [.'$Oo0'.d]", (path != null ? lpath_0 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Oo0'.d]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else
            {
                // handle other props
                // .'$Oo0'.''
                res = json.isString(pval) && rt.is_valid_date(json.asString(pval));
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $DATE [.'$Oo0'.'']", (path != null ? lpath_0 : null));
                    return false;
                }
            }
        }
        if (must_count != 4)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "a"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <a> [.'$Oo0'.'']", path);
                }
                if (! json.objectHasProp(val, "b"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <b> [.'$Oo0'.'']", path);
                }
                if (! json.objectHasProp(val, "c"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <c> [.'$Oo0'.'']", path);
                }
                if (! json.objectHasProp(val, "d"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <d> [.'$Oo0'.'']", path);
                }
            }
            return false;
        }
        return true;
    }

    // check $Oo0 (.'$Oo0')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Oo0'
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$Oo0']", path);
        }
        return res;
    }

    // object .'$Oo1'
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Oo1']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            if (prop.compareTo("z") == 0)
            {
                // handle must z property
                must_count += 1;
                // .'$Oo1'.z
                res = json.isBoolean(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a bool [.'$Oo1'.z]", (path != null ? lpath_1 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Oo1'.z]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("a") == 0)
            {
                // handle may a property
                // .'$Oo1'.a
                res = json.isBoolean(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a bool [.'$Oo1'.a]", (path != null ? lpath_1 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Oo1'.a]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("b") == 0)
            {
                // handle may b property
                // .'$Oo1'.b
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.'$Oo1'.b]", (path != null ? lpath_1 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Oo1'.b]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("c") == 0)
            {
                // handle may c property
                // .'$Oo1'.c
                res = json.isNull(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not null [.'$Oo1'.c]", (path != null ? lpath_1 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Oo1'.c]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("d") == 0)
            {
                // handle may d property
                // .'$Oo1'.d
                res = json.isDouble(pval) && json.asDouble(pval) >= 0.0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0.0 strict float [.'$Oo1'.d]", (path != null ? lpath_1 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Oo1'.d]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$Oo1']", (path != null ? lpath_1 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "z"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <z> [.'$Oo1']", path);
                }
            }
            return false;
        }
        return true;
    }

    // check $Oo1 (.'$Oo1')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Oo1'
        res = _jm_obj_1(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$Oo1']", path);
        }
        return res;
    }

    // object .'$Oo2'
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Oo2']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_2 = new Path(prop, path);
            if (prop.compareTo("a") == 0)
            {
                // handle must a property
                must_count += 1;
                // .'$Oo2'.a
                res = json.isBoolean(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a bool [.'$Oo2'.a]", (path != null ? lpath_2 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Oo2'.a]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("b") == 0)
            {
                // handle must b property
                must_count += 1;
                // .'$Oo2'.b
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.'$Oo2'.b]", (path != null ? lpath_2 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Oo2'.b]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("c") == 0)
            {
                // handle must c property
                must_count += 1;
                // .'$Oo2'.c
                res = json.isNull(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not null [.'$Oo2'.c]", (path != null ? lpath_2 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Oo2'.c]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("d") == 0)
            {
                // handle must d property
                must_count += 1;
                // .'$Oo2'.d
                res = json.isDouble(pval) && json.asDouble(pval) >= 0.0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0.0 strict float [.'$Oo2'.d]", (path != null ? lpath_2 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Oo2'.d]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("y") == 0)
            {
                // handle may y property
                // .'$Oo2'.y
                res = json.isBoolean(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a bool [.'$Oo2'.y]", (path != null ? lpath_2 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Oo2'.y]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$Oo2']", (path != null ? lpath_2 : null));
                return false;
            }
        }
        if (must_count != 4)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "a"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <a> [.'$Oo2']", path);
                }
                if (! json.objectHasProp(val, "b"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <b> [.'$Oo2']", path);
                }
                if (! json.objectHasProp(val, "c"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <c> [.'$Oo2']", path);
                }
                if (! json.objectHasProp(val, "d"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <d> [.'$Oo2']", path);
                }
            }
            return false;
        }
        return true;
    }

    // check $Oo2 (.'$Oo2')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Oo2'
        res = _jm_obj_2(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$Oo2']", path);
        }
        return res;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        // .'|'.0
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $Oo0 [.'|'.0]", path);
        }
        if (! res)
        {
            // .'|'.1
            res = _jm_obj_1(val, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Oo1 [.'|'.1]", path);
            }
            if (! res)
            {
                // .'|'.2
                res = _jm_obj_2(val, path, rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $Oo2 [.'|'.2]", path);
                }
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'|']", path);
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            pmap_shared_1_map_pmap = new HashMap<String, Checker>();
            pmap_shared_1_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            pmap_shared_1_map_pmap.put("Oo0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_0(o, p, r);} });
            pmap_shared_1_map_pmap.put("Oo1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_1(o, p, r);} });
            pmap_shared_1_map_pmap.put("Oo2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_2(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            pmap_shared_1_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return pmap_shared_1_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return pmap_shared_1_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new pmap_shared_1();
        Main.main("pmap_shared_1", checker, VERSION, args);
    }
}
