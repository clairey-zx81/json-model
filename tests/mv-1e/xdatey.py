#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_xre_0_re_reco: object
_jm_xre_0_re: RegexFun
_jm_xre_0: RegexFun
check_model_map: PropMap

def _jm_xre_0(val: str) -> bool:
    path, rep = None, None
    match = _jm_xre_0_re_reco.search(val)
    if not match:
        return False
    extract: str
    extract = match.groupdict()["s0"]
    if not is_valid_date(extract, path, rep):
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    # "/^X-($DATE)-Y$/X"
    res = isinstance(val, str) and _jm_xre_0(val)
    if not res:
        rep is None or rep.append(("unexpected /^X-($DATE)-Y$/X [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_xre_0_re_reco, _jm_xre_0_re
        _jm_xre_0_re_reco = re.compile("^X-(?<s0>.*)-Y$")
        _jm_xre_0_re = lambda s: _jm_xre_0_re_reco.search(s) is not None
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_xre_0_re_reco, _jm_xre_0_re
        _jm_xre_0_re_reco = None
        _jm_xre_0_re = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
