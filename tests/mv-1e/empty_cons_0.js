#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2.0b0
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2.0b0";

var check_model_map = new Map()

// check $n0 (.'$n0')
function json_model_2(val, path, rep)
{
    let res;
    // .'$n0'
    res = false;
    if (! res)
    {
        rep !== null && rep.push(["unexpected $NONE [.'$n0']", path])
    }
    return res;
}

// check $n1 (.'$n1')
function json_model_3(val, path, rep)
{
    let res;
    // .'$n1'
    res = false;
    if (! res)
    {
        rep !== null && rep.push(["unexpected $NONE [.'$n1']", path])
    }
    return res;
}

// check $n2 (.'$n2')
function json_model_4(val, path, rep)
{
    let res;
    // .'$n2'
    res = false;
    if (! res)
    {
        rep !== null && rep.push(["unexpected $NONE [.'$n2']", path])
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = false;
    if (! res)
    {
        rep !== null && rep.push(["unexpected $NONE [.]", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_1)
        check_model_map.set("n0", json_model_2)
        check_model_map.set("n1", json_model_3)
        check_model_map.set("n2", json_model_4)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
