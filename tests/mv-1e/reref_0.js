#! /bin/env node
//
// Generated by JSON Model Compiler version 2.0a0
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2.0a0";

let _jm_cst_0 = new Set()
const _jm_xre_0_re_re = new RegExp("'(?<s0>\\w+)'.*'(?<s1>\\w+)'", "")
var check_model_map = new Map()

// check $character (.'$character')
function json_model_2(val, path, rep)
{
    let res;
    // .'$character'
    res = ((val === null || (typeof val === 'number' || val instanceof Number) || (typeof val === 'boolean' || val instanceof Boolean) || (typeof val === 'string' || val instanceof String))) && _jm_cst_0.has(val);
    if (! res)
    {
        rep !== null && rep.push(["value not in enum [.'$character'.'|']", path])
    }
    return res;
}

const _jm_xre_0_re = (s) => _jm_xre_0_re_re.exec(s) !== null

function _jm_xre_0(val, path, rep)
{
    let match = _jm_xre_0_re_re.exec(val);
    if (! match)
    {
        return false;
    }
    let extract = val;
    extract = match.groups["s0"]
    if (! json_model_2(extract, path, rep))
    {
        return false;
    }
    extract = match.groups["s1"]
    if (! json_model_2(extract, path, rep))
    {
        return false;
    }
    return true;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    // "/'($character:\\w+)'.*'($character:\\w+)'/X"
    res = ((typeof val === 'string' || val instanceof String)) && _jm_xre_0(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected /'($character:\\w+)'.*'($character:\\w+)'/X [.]", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        _jm_cst_0.add("Susie")
        _jm_cst_0.add("Calvin")
        _jm_cst_0.add("Hobbes")
        check_model_map.set("", json_model_1)
        check_model_map.set("character", json_model_2)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
