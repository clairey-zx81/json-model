//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class loose_strict extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> loose_strict_map_pmap;

    // check $loose (.'$loose')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        // JSON_MODEL_LOOSE_INT
        // .'$loose'
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$loose']", path);
            return false;
        }
        if (json.objectSize(val) != 1)
        {
            if (rep != null) rep.addEntry("bad property count [.'$loose']", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "li")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <li> [.'$loose']", path);
            return false;
        }
        lpath = new Path("li", path);
        // .'$loose'.li
        res = ((json.isInteger(pval) || (json.isDouble(pval) && json.asDouble(pval) == ((long) json.asDouble(pval))))) && json.asNumber(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 loose int [.'$loose'.li]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <li> [.'$loose']", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check $strict (.'$strict')
    public boolean json_model_6(Object val, Path path, Report rep)
    {
        // JSON_MODEL_STRICT_INT
        // .'$strict'
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$strict']", path);
            return false;
        }
        if (json.objectSize(val) != 1)
        {
            if (rep != null) rep.addEntry("bad property count [.'$strict']", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "si")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <si> [.'$strict']", path);
            return false;
        }
        lpath = new Path("si", path);
        // .'$strict'.si
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$strict'.si]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <si> [.'$strict']", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check $combined (.'$combined')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        // .'$combined'
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$combined']", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'$combined']", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "li")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <li> [.'$combined']", path);
            return false;
        }
        lpath = new Path("li", path);
        // .'$combined'.li
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$combined'.li]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <li> [.'$combined']", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "si")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <si> [.'$combined']", path);
            return false;
        }
        lpath = new Path("si", path);
        // .'$combined'.si
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$combined'.si]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <si> [.'$combined']", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = json_model_4(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $combined [.]", path);
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            loose_strict_map_pmap = new HashMap<String, Checker>();
            loose_strict_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            loose_strict_map_pmap.put("loose", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
            loose_strict_map_pmap.put("strict", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_6(o, p, r);} });
            loose_strict_map_pmap.put("combined", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            loose_strict_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return loose_strict_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return loose_strict_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new loose_strict();
        Main.main("loose_strict", checker, VERSION, args);
    }
}
