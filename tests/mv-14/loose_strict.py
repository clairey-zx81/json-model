#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $loose (.'$loose')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # JSON_MODEL_LOOSE_INT
    # .'$loose'
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$loose']", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$loose']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("li", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <li> [.'$loose']", path))
        return False
    lpath = (path + [ "li" ]) if path is not None else None
    # .'$loose'.li
    res = ((isinstance(pval, int) and not isinstance(pval, bool) or isinstance(pval, float) and pval == int(pval))) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$loose'.li]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <li> [.'$loose']", lpath if path is not None else None))
        return False
    return True

# check $strict (.'$strict')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # JSON_MODEL_STRICT_INT
    # .'$strict'
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$strict']", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$strict']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("si", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <si> [.'$strict']", path))
        return False
    lpath = (path + [ "si" ]) if path is not None else None
    # .'$strict'.si
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$strict'.si]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <si> [.'$strict']", lpath if path is not None else None))
        return False
    return True

# check $combined (.'$combined')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$combined'
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$combined']", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'$combined']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("li", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <li> [.'$combined']", path))
        return False
    lpath = (path + [ "li" ]) if path is not None else None
    # .'$combined'.li
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$combined'.li]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <li> [.'$combined']", lpath if path is not None else None))
        return False
    if not ((pval := val.get("si", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <si> [.'$combined']", path))
        return False
    lpath = (path + [ "si" ]) if path is not None else None
    # .'$combined'.si
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$combined'.si]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <si> [.'$combined']", lpath if path is not None else None))
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .
    res: bool = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $combined [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_4,
            "loose": json_model_5,
            "strict": json_model_6,
            "combined": json_model_4,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
