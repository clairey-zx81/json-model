--
-- Generated by JSON Model Compiler version 2
-- see https://github.com/clairey-zx81/json-model
--
-- JSON_MODEL_VERSION is 2
CREATE EXTENSION IF NOT EXISTS json_model;

-- check $position (.'$position')
CREATE OR REPLACE FUNCTION json_model_2(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  arr_0_idx INT8;
  arr_0_item JSONB;
  ival_0 int;
BEGIN
  -- .'$position'
  -- .'$position'.'@'
  res := JSONB_TYPEOF(val) = 'array';
  IF res THEN
    FOR arr_0_idx IN 0 .. JSONB_ARRAY_LENGTH(val) - 1 LOOP
      arr_0_item := val -> arr_0_idx;
      -- .'$position'.'@'.0
      res := JSONB_TYPEOF(arr_0_item) = 'number';
      IF NOT res THEN
        EXIT;
      END IF;
    END LOOP;
  END IF;
  IF res THEN
    ival_0 := JSONB_ARRAY_LENGTH(val);
    res := ival_0 <= 3 AND ival_0 >= 2;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $coord_array (.'$coord_array')
CREATE OR REPLACE FUNCTION json_model_3(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  arr_1_idx INT8;
  arr_1_item JSONB;
  ival_1 int;
BEGIN
  -- .'$coord_array'
  -- .'$coord_array'.'@'
  res := JSONB_TYPEOF(val) = 'array';
  IF res THEN
    FOR arr_1_idx IN 0 .. JSONB_ARRAY_LENGTH(val) - 1 LOOP
      arr_1_item := val -> arr_1_idx;
      -- .'$coord_array'.'@'.0
      res := json_model_2(arr_1_item, NULL, NULL);
      IF NOT res THEN
        EXIT;
      END IF;
    END LOOP;
  END IF;
  IF res THEN
    ival_1 := JSONB_ARRAY_LENGTH(val);
    res := ival_1 >= 2;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $linear_ring (.'$linear_ring')
CREATE OR REPLACE FUNCTION json_model_4(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  arr_2_idx INT8;
  arr_2_item JSONB;
  ival_2 int;
BEGIN
  -- .'$linear_ring'
  -- .'$linear_ring'.'@'
  res := JSONB_TYPEOF(val) = 'array';
  IF res THEN
    FOR arr_2_idx IN 0 .. JSONB_ARRAY_LENGTH(val) - 1 LOOP
      arr_2_item := val -> arr_2_idx;
      -- .'$linear_ring'.'@'.0
      res := json_model_2(arr_2_item, NULL, NULL);
      IF NOT res THEN
        EXIT;
      END IF;
    END LOOP;
  END IF;
  IF res THEN
    ival_2 := JSONB_ARRAY_LENGTH(val);
    res := ival_2 >= 4;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $Point (.'$Point')
CREATE OR REPLACE FUNCTION json_model_5(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_3_idx INT8;
  arr_3_item JSONB;
BEGIN
  -- .'$Point'
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = 'type' THEN
      -- handle must type property
      must_count := must_count + 1;
      -- .'$Point'.type
      res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 'Point';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'coordinates' THEN
      -- handle must coordinates property
      must_count := must_count + 1;
      -- .'$Point'.coordinates
      res := json_model_2(pval, NULL, NULL);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'bbox' THEN
      -- handle may bbox property
      -- .'$Point'.bbox
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_3_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_3_item := pval -> arr_3_idx;
          -- .'$Point'.bbox.0
          res := JSONB_TYPEOF(arr_3_item) = 'number';
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      -- accept any other props
      NULL;
    END IF;
  END LOOP;
  RETURN must_count = 2;
END;
$$ LANGUAGE PLpgSQL;

-- check $MultiPoint (.'$MultiPoint')
CREATE OR REPLACE FUNCTION json_model_6(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_4_idx INT8;
  arr_4_item JSONB;
  arr_5_idx INT8;
  arr_5_item JSONB;
BEGIN
  -- .'$MultiPoint'
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = 'type' THEN
      -- handle must type property
      must_count := must_count + 1;
      -- .'$MultiPoint'.type
      res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 'MultiPoint';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'coordinates' THEN
      -- handle must coordinates property
      must_count := must_count + 1;
      -- .'$MultiPoint'.coordinates
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_4_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_4_item := pval -> arr_4_idx;
          -- .'$MultiPoint'.coordinates.0
          res := json_model_2(arr_4_item, NULL, NULL);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'bbox' THEN
      -- handle may bbox property
      -- .'$MultiPoint'.bbox
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_5_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_5_item := pval -> arr_5_idx;
          -- .'$MultiPoint'.bbox.0
          res := JSONB_TYPEOF(arr_5_item) = 'number';
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      -- accept any other props
      NULL;
    END IF;
  END LOOP;
  RETURN must_count = 2;
END;
$$ LANGUAGE PLpgSQL;

-- check $LineString (.'$LineString')
CREATE OR REPLACE FUNCTION json_model_7(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_6_idx INT8;
  arr_6_item JSONB;
BEGIN
  -- .'$LineString'
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = 'type' THEN
      -- handle must type property
      must_count := must_count + 1;
      -- .'$LineString'.type
      res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 'LineString';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'coordinates' THEN
      -- handle must coordinates property
      must_count := must_count + 1;
      -- .'$LineString'.coordinates
      res := json_model_3(pval, NULL, NULL);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'bbox' THEN
      -- handle may bbox property
      -- .'$LineString'.bbox
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_6_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_6_item := pval -> arr_6_idx;
          -- .'$LineString'.bbox.0
          res := JSONB_TYPEOF(arr_6_item) = 'number';
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      -- accept any other props
      NULL;
    END IF;
  END LOOP;
  RETURN must_count = 2;
END;
$$ LANGUAGE PLpgSQL;

-- check $MultiLineString (.'$MultiLineString')
CREATE OR REPLACE FUNCTION json_model_8(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_7_idx INT8;
  arr_7_item JSONB;
  arr_8_idx INT8;
  arr_8_item JSONB;
BEGIN
  -- .'$MultiLineString'
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = 'type' THEN
      -- handle must type property
      must_count := must_count + 1;
      -- .'$MultiLineString'.type
      res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 'MultiLineString';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'coordinates' THEN
      -- handle must coordinates property
      must_count := must_count + 1;
      -- .'$MultiLineString'.coordinates
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_7_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_7_item := pval -> arr_7_idx;
          -- .'$MultiLineString'.coordinates.0
          res := json_model_3(arr_7_item, NULL, NULL);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'bbox' THEN
      -- handle may bbox property
      -- .'$MultiLineString'.bbox
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_8_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_8_item := pval -> arr_8_idx;
          -- .'$MultiLineString'.bbox.0
          res := JSONB_TYPEOF(arr_8_item) = 'number';
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      -- accept any other props
      NULL;
    END IF;
  END LOOP;
  RETURN must_count = 2;
END;
$$ LANGUAGE PLpgSQL;

-- check $Polygon (.'$Polygon')
CREATE OR REPLACE FUNCTION json_model_9(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_9_idx INT8;
  arr_9_item JSONB;
  arr_10_idx INT8;
  arr_10_item JSONB;
BEGIN
  -- .'$Polygon'
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = 'type' THEN
      -- handle must type property
      must_count := must_count + 1;
      -- .'$Polygon'.type
      res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 'Polygon';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'coordinates' THEN
      -- handle must coordinates property
      must_count := must_count + 1;
      -- .'$Polygon'.coordinates
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_9_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_9_item := pval -> arr_9_idx;
          -- .'$Polygon'.coordinates.0
          res := json_model_4(arr_9_item, NULL, NULL);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'bbox' THEN
      -- handle may bbox property
      -- .'$Polygon'.bbox
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_10_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_10_item := pval -> arr_10_idx;
          -- .'$Polygon'.bbox.0
          res := JSONB_TYPEOF(arr_10_item) = 'number';
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      -- accept any other props
      NULL;
    END IF;
  END LOOP;
  RETURN must_count = 2;
END;
$$ LANGUAGE PLpgSQL;

-- check $MultiPolygon (.'$MultiPolygon')
CREATE OR REPLACE FUNCTION json_model_10(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_11_idx INT8;
  arr_11_item JSONB;
  arr_12_idx INT8;
  arr_12_item JSONB;
  arr_13_idx INT8;
  arr_13_item JSONB;
BEGIN
  -- .'$MultiPolygon'
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = 'type' THEN
      -- handle must type property
      must_count := must_count + 1;
      -- .'$MultiPolygon'.type
      res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 'MultiPolygon';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'coordinates' THEN
      -- handle must coordinates property
      must_count := must_count + 1;
      -- .'$MultiPolygon'.coordinates
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_11_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_11_item := pval -> arr_11_idx;
          -- .'$MultiPolygon'.coordinates.0
          res := JSONB_TYPEOF(arr_11_item) = 'array';
          IF res THEN
            FOR arr_12_idx IN 0 .. JSONB_ARRAY_LENGTH(arr_11_item) - 1 LOOP
              arr_12_item := arr_11_item -> arr_12_idx;
              -- .'$MultiPolygon'.coordinates.0.0
              res := json_model_4(arr_12_item, NULL, NULL);
              IF NOT res THEN
                EXIT;
              END IF;
            END LOOP;
          END IF;
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'bbox' THEN
      -- handle may bbox property
      -- .'$MultiPolygon'.bbox
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_13_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_13_item := pval -> arr_13_idx;
          -- .'$MultiPolygon'.bbox.0
          res := JSONB_TYPEOF(arr_13_item) = 'number';
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      -- accept any other props
      NULL;
    END IF;
  END LOOP;
  RETURN must_count = 2;
END;
$$ LANGUAGE PLpgSQL;


-- check $geometry (.'$geometry')
CREATE OR REPLACE FUNCTION json_model_11(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  iso_0 bool;
  tag_0 JSONB;
  fun_0 TEXT;
BEGIN
  -- .'$geometry'
  iso_0 := JSONB_TYPEOF(val) = 'object';
  res := iso_0;
  IF res THEN
    IF val ? 'type' THEN
      tag_0 := val -> 'type';
      fun_0 := jm_cmap_get('_jm_map_0', tag_0);
      res := fun_0 IS NOT NULL AND jm_call(fun_0, val, NULL, NULL);
    ELSE
      res := FALSE;
    END IF;
  ELSE
    NULL;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $GeometryCollection (.'$GeometryCollection')
CREATE OR REPLACE FUNCTION json_model_12(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_14_idx INT8;
  arr_14_item JSONB;
  arr_15_idx INT8;
  arr_15_item JSONB;
BEGIN
  -- .'$GeometryCollection'
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = 'type' THEN
      -- handle must type property
      must_count := must_count + 1;
      -- .'$GeometryCollection'.type
      res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 'GeometryCollection';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'geometries' THEN
      -- handle must geometries property
      must_count := must_count + 1;
      -- .'$GeometryCollection'.geometries
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_14_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_14_item := pval -> arr_14_idx;
          -- .'$GeometryCollection'.geometries.0
          res := json_model_11(arr_14_item, NULL, NULL);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'bbox' THEN
      -- handle may bbox property
      -- .'$GeometryCollection'.bbox
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_15_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_15_item := pval -> arr_15_idx;
          -- .'$GeometryCollection'.bbox.0
          res := JSONB_TYPEOF(arr_15_item) = 'number';
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      -- accept any other props
      NULL;
    END IF;
  END LOOP;
  RETURN must_count = 2;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Feature'.properties.'|'.1
CREATE OR REPLACE FUNCTION _jm_obj_0(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- accept any object
  RETURN JSONB_TYPEOF(val) = 'object';
END;
$$ LANGUAGE PLpgSQL;

-- check $Feature (.'$Feature')
CREATE OR REPLACE FUNCTION json_model_13(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_16_idx INT8;
  arr_16_item JSONB;
BEGIN
  -- .'$Feature'
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = 'type' THEN
      -- handle must type property
      must_count := must_count + 1;
      -- .'$Feature'.type
      res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 'Feature';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'geometry' THEN
      -- handle must geometry property
      must_count := must_count + 1;
      -- .'$Feature'.geometry
      -- .'$Feature'.geometry.'|'.0
      -- .'$Feature'.geometry.'|'.1
      -- .'$Feature'.geometry.'|'.2
      res := JSONB_TYPEOF(pval) = 'null' OR json_model_11(pval, NULL, NULL) OR json_model_12(pval, NULL, NULL);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'properties' THEN
      -- handle must properties property
      must_count := must_count + 1;
      -- .'$Feature'.properties
      -- .'$Feature'.properties.'|'.0
      -- .'$Feature'.properties.'|'.1
      res := JSONB_TYPEOF(pval) = 'null' OR _jm_obj_0(pval, NULL, NULL);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'id' THEN
      -- handle may id property
      -- .'$Feature'.id
      -- .'$Feature'.id.'|'.0
      -- .'$Feature'.id.'|'.1
      res := JSONB_TYPEOF(pval) = 'string' OR JSONB_TYPEOF(pval) = 'number';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'bbox' THEN
      -- handle may bbox property
      -- .'$Feature'.bbox
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_16_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_16_item := pval -> arr_16_idx;
          -- .'$Feature'.bbox.0
          res := JSONB_TYPEOF(arr_16_item) = 'number';
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      -- accept any other props
      NULL;
    END IF;
  END LOOP;
  RETURN must_count = 3;
END;
$$ LANGUAGE PLpgSQL;

-- check $FeatureCollection (.'$FeatureCollection')
CREATE OR REPLACE FUNCTION json_model_14(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_17_idx INT8;
  arr_17_item JSONB;
  arr_18_idx INT8;
  arr_18_item JSONB;
BEGIN
  -- .'$FeatureCollection'
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = 'type' THEN
      -- handle must type property
      must_count := must_count + 1;
      -- .'$FeatureCollection'.type
      res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 'FeatureCollection';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'features' THEN
      -- handle must features property
      must_count := must_count + 1;
      -- .'$FeatureCollection'.features
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_17_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_17_item := pval -> arr_17_idx;
          -- .'$FeatureCollection'.features.0
          res := json_model_13(arr_17_item, NULL, NULL);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = 'bbox' THEN
      -- handle may bbox property
      -- .'$FeatureCollection'.bbox
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_18_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_18_item := pval -> arr_18_idx;
          -- .'$FeatureCollection'.bbox.0
          res := JSONB_TYPEOF(arr_18_item) = 'number';
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      -- accept any other props
      NULL;
    END IF;
  END LOOP;
  RETURN must_count = 2;
END;
$$ LANGUAGE PLpgSQL;


-- check $ (.)
CREATE OR REPLACE FUNCTION json_model_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  iso_1 bool;
  tag_1 JSONB;
  fun_1 TEXT;
BEGIN
  -- Easy Geo JSON Model JSON_MODEL_LOOSE_FLOAT
  -- .
  iso_1 := JSONB_TYPEOF(val) = 'object';
  res := iso_1;
  IF res THEN
    IF val ? 'type' THEN
      tag_1 := val -> 'type';
      fun_1 := jm_cmap_get('_jm_map_1', tag_1);
      res := fun_1 IS NOT NULL AND jm_call(fun_1, val, NULL, NULL);
    ELSE
      res := FALSE;
    END IF;
  ELSE
    NULL;
  END IF;
  RETURN res OR json_model_11(val, NULL, NULL);
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION check_model_map(name TEXT)
RETURNS TEXT STRICT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  map JSONB := JSONB '{"":"json_model_1","position":"json_model_2","coord_array":"json_model_3","linear_ring":"json_model_4","Point":"json_model_5","MultiPoint":"json_model_6","LineString":"json_model_7","MultiLineString":"json_model_8","Polygon":"json_model_9","MultiPolygon":"json_model_10","geometry":"json_model_11","GeometryCollection":"json_model_12","Feature":"json_model_13","FeatureCollection":"json_model_14"}';
BEGIN
  RETURN map->>name;
END;
$$ LANGUAGE plpgsql;

--
-- constant maps initialization
--
TRUNCATE jm_constant_maps;
INSERT INTO jm_constant_maps(mapname, tagval, value) VALUES
  ('_jm_map_0', JSONB '"Point"', 'json_model_5'),
  ('_jm_map_0', JSONB '"MultiPoint"', 'json_model_6'),
  ('_jm_map_0', JSONB '"LineString"', 'json_model_7'),
  ('_jm_map_0', JSONB '"MultiLineString"', 'json_model_8'),
  ('_jm_map_0', JSONB '"Polygon"', 'json_model_9'),
  ('_jm_map_0', JSONB '"MultiPolygon"', 'json_model_10')
;
INSERT INTO jm_constant_maps(mapname, tagval, value) VALUES
  ('_jm_map_1', JSONB '"GeometryCollection"', 'json_model_12'),
  ('_jm_map_1', JSONB '"Feature"', 'json_model_13'),
  ('_jm_map_1', JSONB '"FeatureCollection"', 'json_model_14')
;

--
-- JSON Model checking entry point
--
-- TODO INOUT rep?
CREATE OR REPLACE FUNCTION check_model(val JSONB, name TEXT, rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  fun TEXT;
BEGIN
  fun := check_model_map(name);
  IF fun IS NULL THEN
    RAISE EXCEPTION 'model for % not found', name;
  END IF;
  RETURN jm_call(fun, val, NULL, rep);
END;
$$ LANGUAGE plpgsql;
