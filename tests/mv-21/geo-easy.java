//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class geo_easy extends ModelChecker
{
    static public final String VERSION = "2";

    Map<Object, Checker> _jm_map_0_cmap;
    public Map<String, Checker> geo_easy_map_pmap;

    // check $position (.'$position')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$position'
        // .'$position'.'@'
        res = json.isArray(val);
        if (res)
        {
            int arr_0_idx = -1;
            Iterator<Object> arr_0_item_loop = json.arrayIterator(val);
            while (arr_0_item_loop.hasNext())
            {
                arr_0_idx++;
                Object arr_0_item = arr_0_item_loop.next();
                Path arr_0_lpath = new Path(arr_0_idx, path);
                // .'$position'.'@'.0
                res = json.isNumber(arr_0_item);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a -1.0 loose float [.'$position'.'@'.0]", (path != null ? arr_0_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$position'.'@']", path);
        }
        if (res)
        {
            long ival_0 = json.arrayLength(val);
            res = ival_0 <= 3 && ival_0 >= 2;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.'$position']", path);
            }
        }
        return res;
    }

    // check $coord_array (.'$coord_array')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$coord_array'
        // .'$coord_array'.'@'
        res = json.isArray(val);
        if (res)
        {
            int arr_1_idx = -1;
            Iterator<Object> arr_1_item_loop = json.arrayIterator(val);
            while (arr_1_item_loop.hasNext())
            {
                arr_1_idx++;
                Object arr_1_item = arr_1_item_loop.next();
                Path arr_1_lpath = new Path(arr_1_idx, path);
                // .'$coord_array'.'@'.0
                res = json_model_2(arr_1_item, (path != null ? arr_1_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $position [.'$coord_array'.'@'.0]", (path != null ? arr_1_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$coord_array'.'@']", path);
        }
        if (res)
        {
            long ival_1 = json.arrayLength(val);
            res = ival_1 >= 2;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.'$coord_array']", path);
            }
        }
        return res;
    }

    // check $linear_ring (.'$linear_ring')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$linear_ring'
        // .'$linear_ring'.'@'
        res = json.isArray(val);
        if (res)
        {
            int arr_2_idx = -1;
            Iterator<Object> arr_2_item_loop = json.arrayIterator(val);
            while (arr_2_item_loop.hasNext())
            {
                arr_2_idx++;
                Object arr_2_item = arr_2_item_loop.next();
                Path arr_2_lpath = new Path(arr_2_idx, path);
                // .'$linear_ring'.'@'.0
                res = json_model_2(arr_2_item, (path != null ? arr_2_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $position [.'$linear_ring'.'@'.0]", (path != null ? arr_2_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$linear_ring'.'@']", path);
        }
        if (res)
        {
            long ival_2 = json.arrayLength(val);
            res = ival_2 >= 4;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.'$linear_ring']", path);
            }
        }
        return res;
    }

    // object .'$Point'
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Point']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Point']", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$Point'.type
        res = json.isString(pval) && json.asString(pval).compareTo("Point") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected Point [.'$Point'.type]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$Point']", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$Point']", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$Point'.coordinates
        res = json_model_2(pval, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $position [.'$Point'.coordinates]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$Point']", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$Point'.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_3_idx = -1;
                Iterator<Object> arr_3_item_loop = json.arrayIterator(pval);
                while (arr_3_item_loop.hasNext())
                {
                    arr_3_idx++;
                    Object arr_3_item = arr_3_item_loop.next();
                    Path arr_3_lpath = new Path(arr_3_idx, path);
                    // .'$Point'.bbox.0
                    res = json.isNumber(arr_3_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Point'.bbox.0]", (path != null ? arr_3_lpath : null));
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$Point'.bbox]", path);
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$Point']", path);
                return false;
            }
        }
        return true;
    }

    // check $Point (.'$Point')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Point'
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$Point']", path);
        }
        return res;
    }

    // object .'$MultiPoint'
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$MultiPoint']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$MultiPoint']", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$MultiPoint'.type
        res = json.isString(pval) && json.asString(pval).compareTo("MultiPoint") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected MultiPoint [.'$MultiPoint'.type]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$MultiPoint']", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$MultiPoint']", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$MultiPoint'.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_4_idx = -1;
            Iterator<Object> arr_4_item_loop = json.arrayIterator(pval);
            while (arr_4_item_loop.hasNext())
            {
                arr_4_idx++;
                Object arr_4_item = arr_4_item_loop.next();
                Path arr_4_lpath = new Path(arr_4_idx, path);
                // .'$MultiPoint'.coordinates.0
                res = json_model_2(arr_4_item, (path != null ? arr_4_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $position [.'$MultiPoint'.coordinates.0]", (path != null ? arr_4_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiPoint'.coordinates]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$MultiPoint']", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$MultiPoint'.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_5_idx = -1;
                Iterator<Object> arr_5_item_loop = json.arrayIterator(pval);
                while (arr_5_item_loop.hasNext())
                {
                    arr_5_idx++;
                    Object arr_5_item = arr_5_item_loop.next();
                    Path arr_5_lpath = new Path(arr_5_idx, path);
                    // .'$MultiPoint'.bbox.0
                    res = json.isNumber(arr_5_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$MultiPoint'.bbox.0]", (path != null ? arr_5_lpath : null));
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiPoint'.bbox]", path);
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$MultiPoint']", path);
                return false;
            }
        }
        return true;
    }

    // check $MultiPoint (.'$MultiPoint')
    public boolean json_model_6(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$MultiPoint'
        res = _jm_obj_1(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$MultiPoint']", path);
        }
        return res;
    }

    // object .'$LineString'
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$LineString']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$LineString']", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$LineString'.type
        res = json.isString(pval) && json.asString(pval).compareTo("LineString") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected LineString [.'$LineString'.type]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$LineString']", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$LineString']", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$LineString'.coordinates
        res = json_model_3(pval, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $coord_array [.'$LineString'.coordinates]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$LineString']", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$LineString'.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_6_idx = -1;
                Iterator<Object> arr_6_item_loop = json.arrayIterator(pval);
                while (arr_6_item_loop.hasNext())
                {
                    arr_6_idx++;
                    Object arr_6_item = arr_6_item_loop.next();
                    Path arr_6_lpath = new Path(arr_6_idx, path);
                    // .'$LineString'.bbox.0
                    res = json.isNumber(arr_6_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$LineString'.bbox.0]", (path != null ? arr_6_lpath : null));
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$LineString'.bbox]", path);
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$LineString']", path);
                return false;
            }
        }
        return true;
    }

    // check $LineString (.'$LineString')
    public boolean json_model_7(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$LineString'
        res = _jm_obj_2(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$LineString']", path);
        }
        return res;
    }

    // object .'$MultiLineString'
    public boolean _jm_obj_3(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$MultiLineString']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$MultiLineString']", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$MultiLineString'.type
        res = json.isString(pval) && json.asString(pval).compareTo("MultiLineString") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected MultiLineString [.'$MultiLineString'.type]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$MultiLineString']", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$MultiLineString']", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$MultiLineString'.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_7_idx = -1;
            Iterator<Object> arr_7_item_loop = json.arrayIterator(pval);
            while (arr_7_item_loop.hasNext())
            {
                arr_7_idx++;
                Object arr_7_item = arr_7_item_loop.next();
                Path arr_7_lpath = new Path(arr_7_idx, path);
                // .'$MultiLineString'.coordinates.0
                res = json_model_3(arr_7_item, (path != null ? arr_7_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $coord_array [.'$MultiLineString'.coordinates.0]", (path != null ? arr_7_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiLineString'.coordinates]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$MultiLineString']", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$MultiLineString'.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_8_idx = -1;
                Iterator<Object> arr_8_item_loop = json.arrayIterator(pval);
                while (arr_8_item_loop.hasNext())
                {
                    arr_8_idx++;
                    Object arr_8_item = arr_8_item_loop.next();
                    Path arr_8_lpath = new Path(arr_8_idx, path);
                    // .'$MultiLineString'.bbox.0
                    res = json.isNumber(arr_8_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$MultiLineString'.bbox.0]", (path != null ? arr_8_lpath : null));
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiLineString'.bbox]", path);
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$MultiLineString']", path);
                return false;
            }
        }
        return true;
    }

    // check $MultiLineString (.'$MultiLineString')
    public boolean json_model_8(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$MultiLineString'
        res = _jm_obj_3(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$MultiLineString']", path);
        }
        return res;
    }

    // object .'$Polygon'
    public boolean _jm_obj_4(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Polygon']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Polygon']", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$Polygon'.type
        res = json.isString(pval) && json.asString(pval).compareTo("Polygon") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected Polygon [.'$Polygon'.type]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$Polygon']", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$Polygon']", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$Polygon'.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_9_idx = -1;
            Iterator<Object> arr_9_item_loop = json.arrayIterator(pval);
            while (arr_9_item_loop.hasNext())
            {
                arr_9_idx++;
                Object arr_9_item = arr_9_item_loop.next();
                Path arr_9_lpath = new Path(arr_9_idx, path);
                // .'$Polygon'.coordinates.0
                res = json_model_4(arr_9_item, (path != null ? arr_9_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $linear_ring [.'$Polygon'.coordinates.0]", (path != null ? arr_9_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$Polygon'.coordinates]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$Polygon']", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$Polygon'.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_10_idx = -1;
                Iterator<Object> arr_10_item_loop = json.arrayIterator(pval);
                while (arr_10_item_loop.hasNext())
                {
                    arr_10_idx++;
                    Object arr_10_item = arr_10_item_loop.next();
                    Path arr_10_lpath = new Path(arr_10_idx, path);
                    // .'$Polygon'.bbox.0
                    res = json.isNumber(arr_10_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Polygon'.bbox.0]", (path != null ? arr_10_lpath : null));
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$Polygon'.bbox]", path);
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$Polygon']", path);
                return false;
            }
        }
        return true;
    }

    // check $Polygon (.'$Polygon')
    public boolean json_model_9(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Polygon'
        res = _jm_obj_4(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$Polygon']", path);
        }
        return res;
    }

    // object .'$MultiPolygon'
    public boolean _jm_obj_5(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$MultiPolygon']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$MultiPolygon']", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$MultiPolygon'.type
        res = json.isString(pval) && json.asString(pval).compareTo("MultiPolygon") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected MultiPolygon [.'$MultiPolygon'.type]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$MultiPolygon']", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$MultiPolygon']", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$MultiPolygon'.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_11_idx = -1;
            Iterator<Object> arr_11_item_loop = json.arrayIterator(pval);
            while (arr_11_item_loop.hasNext())
            {
                arr_11_idx++;
                Object arr_11_item = arr_11_item_loop.next();
                Path arr_11_lpath = new Path(arr_11_idx, path);
                // .'$MultiPolygon'.coordinates.0
                res = json.isArray(arr_11_item);
                if (res)
                {
                    int arr_12_idx = -1;
                    Iterator<Object> arr_12_item_loop = json.arrayIterator(arr_11_item);
                    while (arr_12_item_loop.hasNext())
                    {
                        arr_12_idx++;
                        Object arr_12_item = arr_12_item_loop.next();
                        Path arr_12_lpath = new Path(arr_12_idx, (path != null ? arr_11_lpath : null));
                        // .'$MultiPolygon'.coordinates.0.0
                        res = json_model_4(arr_12_item, ((path != null ? arr_11_lpath : null) != null ? arr_12_lpath : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $linear_ring [.'$MultiPolygon'.coordinates.0.0]", ((path != null ? arr_11_lpath : null) != null ? arr_12_lpath : null));
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiPolygon'.coordinates.0]", (path != null ? arr_11_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiPolygon'.coordinates]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$MultiPolygon']", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$MultiPolygon'.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_13_idx = -1;
                Iterator<Object> arr_13_item_loop = json.arrayIterator(pval);
                while (arr_13_item_loop.hasNext())
                {
                    arr_13_idx++;
                    Object arr_13_item = arr_13_item_loop.next();
                    Path arr_13_lpath = new Path(arr_13_idx, path);
                    // .'$MultiPolygon'.bbox.0
                    res = json.isNumber(arr_13_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$MultiPolygon'.bbox.0]", (path != null ? arr_13_lpath : null));
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiPolygon'.bbox]", path);
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$MultiPolygon']", path);
                return false;
            }
        }
        return true;
    }

    // check $MultiPolygon (.'$MultiPolygon')
    public boolean json_model_10(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$MultiPolygon'
        res = _jm_obj_5(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$MultiPolygon']", path);
        }
        return res;
    }


    // check $geometry (.'$geometry')
    public boolean json_model_11(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$geometry'
        boolean iso_0 = json.isObject(val);
        res = iso_0;
        if (res)
        {
            if (json.objectHasProp(val, "type"))
            {
                Object tag_0 = json.objectValue(val, "type");
                Checker fun_0 = _jm_map_0_cmap.get(tag_0);
                if (fun_0 != null)
                {
                    res = fun_0.call(val, path, rep);
                }
                else
                {
                    res = false;
                    if (rep != null) rep.addEntry("tag <type> value not found [.'$geometry'.'|']", path);
                }
            }
            else
            {
                res = false;
                if (rep != null) rep.addEntry("tag prop <type> is missing [.'$geometry'.'|']", path);
            }
        }
        else
        {
            if (rep != null) rep.addEntry("value is not an object [.'$geometry'.'|']", path);
        }
        return res;
    }

    // object .'$GeometryCollection'
    public boolean _jm_obj_6(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$GeometryCollection']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$GeometryCollection']", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$GeometryCollection'.type
        res = json.isString(pval) && json.asString(pval).compareTo("GeometryCollection") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected GeometryCollection [.'$GeometryCollection'.type]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$GeometryCollection']", path);
            return false;
        }
        if (! json.objectHasProp(val, "geometries"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <geometries> [.'$GeometryCollection']", path);
            return false;
        }
        pval = json.objectValue(val, "geometries");
        // .'$GeometryCollection'.geometries
        res = json.isArray(pval);
        if (res)
        {
            int arr_14_idx = -1;
            Iterator<Object> arr_14_item_loop = json.arrayIterator(pval);
            while (arr_14_item_loop.hasNext())
            {
                arr_14_idx++;
                Object arr_14_item = arr_14_item_loop.next();
                Path arr_14_lpath = new Path(arr_14_idx, path);
                // .'$GeometryCollection'.geometries.0
                res = json_model_11(arr_14_item, (path != null ? arr_14_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $geometry [.'$GeometryCollection'.geometries.0]", (path != null ? arr_14_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$GeometryCollection'.geometries]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <geometries> [.'$GeometryCollection']", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$GeometryCollection'.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_15_idx = -1;
                Iterator<Object> arr_15_item_loop = json.arrayIterator(pval);
                while (arr_15_item_loop.hasNext())
                {
                    arr_15_idx++;
                    Object arr_15_item = arr_15_item_loop.next();
                    Path arr_15_lpath = new Path(arr_15_idx, path);
                    // .'$GeometryCollection'.bbox.0
                    res = json.isNumber(arr_15_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$GeometryCollection'.bbox.0]", (path != null ? arr_15_lpath : null));
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$GeometryCollection'.bbox]", path);
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$GeometryCollection']", path);
                return false;
            }
        }
        return true;
    }

    // check $GeometryCollection (.'$GeometryCollection')
    public boolean json_model_12(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$GeometryCollection'
        res = _jm_obj_6(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$GeometryCollection']", path);
        }
        return res;
    }

    // object .'$Feature'.properties.'|'.1
    public boolean _jm_obj_8(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Feature'.properties.'|'.1]", path);
            return false;
        }
        // accept any object
        return true;
    }

    // object .'$Feature'
    public boolean _jm_obj_7(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Feature']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Feature']", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$Feature'.type
        res = json.isString(pval) && json.asString(pval).compareTo("Feature") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected Feature [.'$Feature'.type]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$Feature']", path);
            return false;
        }
        if (! json.objectHasProp(val, "geometry"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <geometry> [.'$Feature']", path);
            return false;
        }
        pval = json.objectValue(val, "geometry");
        // .'$Feature'.geometry
        // .'$Feature'.geometry.'|'.0
        res = json.isNull(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("not null [.'$Feature'.geometry.'|'.0]", path);
        }
        if (! res)
        {
            // .'$Feature'.geometry.'|'.1
            res = json_model_11(pval, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $geometry [.'$Feature'.geometry.'|'.1]", path);
            }
            if (! res)
            {
                // .'$Feature'.geometry.'|'.2
                res = json_model_12(pval, path, rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $GeometryCollection [.'$Feature'.geometry.'|'.2]", path);
                }
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'$Feature'.geometry.'|']", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <geometry> [.'$Feature']", path);
            return false;
        }
        if (! json.objectHasProp(val, "properties"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <properties> [.'$Feature']", path);
            return false;
        }
        pval = json.objectValue(val, "properties");
        // .'$Feature'.properties
        // .'$Feature'.properties.'|'.0
        res = json.isNull(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("not null [.'$Feature'.properties.'|'.0]", path);
        }
        if (! res)
        {
            // .'$Feature'.properties.'|'.1
            res = _jm_obj_8(pval, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected element [.'$Feature'.properties.'|'.1]", path);
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'$Feature'.properties.'|']", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <properties> [.'$Feature']", path);
            return false;
        }
        if (json.objectHasProp(val, "id"))
        {
            pval = json.objectValue(val, "id");
            // .'$Feature'.id
            // .'$Feature'.id.'|'.0
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$Feature'.id.'|'.0]", path);
            }
            if (! res)
            {
                // .'$Feature'.id.'|'.1
                res = json.isNumber(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Feature'.id.'|'.1]", path);
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$Feature'.id.'|']", path);
                if (rep != null) rep.addEntry("unexpected value for optional prop <id> [.'$Feature']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$Feature'.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_16_idx = -1;
                Iterator<Object> arr_16_item_loop = json.arrayIterator(pval);
                while (arr_16_item_loop.hasNext())
                {
                    arr_16_idx++;
                    Object arr_16_item = arr_16_item_loop.next();
                    Path arr_16_lpath = new Path(arr_16_idx, path);
                    // .'$Feature'.bbox.0
                    res = json.isNumber(arr_16_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Feature'.bbox.0]", (path != null ? arr_16_lpath : null));
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.bbox]", path);
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$Feature']", path);
                return false;
            }
        }
        return true;
    }

    // check $Feature (.'$Feature')
    public boolean json_model_13(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Feature'
        res = _jm_obj_7(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$Feature']", path);
        }
        return res;
    }

    // object .'$FeatureCollection'
    public boolean _jm_obj_9(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$FeatureCollection']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$FeatureCollection']", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$FeatureCollection'.type
        res = json.isString(pval) && json.asString(pval).compareTo("FeatureCollection") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected FeatureCollection [.'$FeatureCollection'.type]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$FeatureCollection']", path);
            return false;
        }
        if (! json.objectHasProp(val, "features"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <features> [.'$FeatureCollection']", path);
            return false;
        }
        pval = json.objectValue(val, "features");
        // .'$FeatureCollection'.features
        res = json.isArray(pval);
        if (res)
        {
            int arr_17_idx = -1;
            Iterator<Object> arr_17_item_loop = json.arrayIterator(pval);
            while (arr_17_item_loop.hasNext())
            {
                arr_17_idx++;
                Object arr_17_item = arr_17_item_loop.next();
                Path arr_17_lpath = new Path(arr_17_idx, path);
                // .'$FeatureCollection'.features.0
                res = json_model_13(arr_17_item, (path != null ? arr_17_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $Feature [.'$FeatureCollection'.features.0]", (path != null ? arr_17_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$FeatureCollection'.features]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <features> [.'$FeatureCollection']", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$FeatureCollection'.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_18_idx = -1;
                Iterator<Object> arr_18_item_loop = json.arrayIterator(pval);
                while (arr_18_item_loop.hasNext())
                {
                    arr_18_idx++;
                    Object arr_18_item = arr_18_item_loop.next();
                    Path arr_18_lpath = new Path(arr_18_idx, path);
                    // .'$FeatureCollection'.bbox.0
                    res = json.isNumber(arr_18_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$FeatureCollection'.bbox.0]", (path != null ? arr_18_lpath : null));
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$FeatureCollection'.bbox]", path);
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$FeatureCollection']", path);
                return false;
            }
        }
        return true;
    }

    // check $FeatureCollection (.'$FeatureCollection')
    public boolean json_model_14(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$FeatureCollection'
        res = _jm_obj_9(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$FeatureCollection']", path);
        }
        return res;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // Easy Geo JSON Model JSON_MODEL_LOOSE_FLOAT
        // .
        // generic xor list
        long xc_0 = 0;
        boolean xr_0;
        // .'^'.0
        xr_0 = json_model_11(val, path, rep);
        if (xr_0)
        {
            xc_0 += 1;
        }
        else
        {
            if (rep != null) rep.addEntry("unexpected $geometry [.'^'.0]", path);
        }
        // .'^'.1
        xr_0 = json_model_12(val, path, rep);
        if (xr_0)
        {
            xc_0 += 1;
        }
        else
        {
            if (rep != null) rep.addEntry("unexpected $GeometryCollection [.'^'.1]", path);
        }
        if (xc_0 <= 1)
        {
            // .'^'.2
            xr_0 = json_model_13(val, path, rep);
            if (xr_0)
            {
                xc_0 += 1;
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected $Feature [.'^'.2]", path);
            }
        }
        if (xc_0 <= 1)
        {
            // .'^'.3
            xr_0 = json_model_14(val, path, rep);
            if (xr_0)
            {
                xc_0 += 1;
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected $FeatureCollection [.'^'.3]", path);
            }
        }
        res = xc_0 == 1;
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("not one model match [.'^']", path);
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_map_0_cmap = new HashMap<Object, Checker>();
            _jm_map_0_cmap.put(json.safeJSON("\"Point\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"MultiPoint\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_6(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"LineString\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_7(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"MultiLineString\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_8(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"Polygon\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_9(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"MultiPolygon\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_10(o, p, r);} });
            geo_easy_map_pmap = new HashMap<String, Checker>();
            geo_easy_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            geo_easy_map_pmap.put("position", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            geo_easy_map_pmap.put("coord_array", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            geo_easy_map_pmap.put("linear_ring", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            geo_easy_map_pmap.put("Point", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_0(o, p, r);} });
            geo_easy_map_pmap.put("MultiPoint", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_1(o, p, r);} });
            geo_easy_map_pmap.put("LineString", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_2(o, p, r);} });
            geo_easy_map_pmap.put("MultiLineString", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_3(o, p, r);} });
            geo_easy_map_pmap.put("Polygon", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_4(o, p, r);} });
            geo_easy_map_pmap.put("MultiPolygon", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_5(o, p, r);} });
            geo_easy_map_pmap.put("geometry", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_11(o, p, r);} });
            geo_easy_map_pmap.put("GeometryCollection", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_6(o, p, r);} });
            geo_easy_map_pmap.put("Feature", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_7(o, p, r);} });
            geo_easy_map_pmap.put("FeatureCollection", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_9(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_map_0_cmap = null;
            geo_easy_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return geo_easy_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return geo_easy_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new geo_easy();
        Main.main("geo_easy", checker, VERSION, args);
    }
}
