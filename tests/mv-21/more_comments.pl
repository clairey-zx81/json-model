#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2.0b1
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


my %check_model_map;

# check $P (.'$P')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$P'
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check $Q (.'$Q')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Q'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$Q'.0
            $res = json_model_2($arr_0_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# object .o
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'p')
        {
            # handle may p property
            # .o.p
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'q')
        {
            # handle may q property
            # .o.q
            $res = json_model_3($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 't')
        {
            # handle may t property
            # .o.t
            $res = jm_is_array($pval) && scalar @$pval == 2;
            if ($res)
            {
                # .o.t.0
                $res = jm_is_boolean($$pval[0]);
                if ($res)
                {
                    # .o.t.1
                    $res = jm_is_integer($$pval[1]) && $$pval[1] >= 0;
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'o')
        {
            # handle may o property
            # an object
            # .o
            $res = _jm_obj_1($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # trivial and non trivial comments
    # .
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&json_model_1,
            'P' => \&json_model_2,
            'Q' => \&json_model_3,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
