#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
check_model_map: PropMap

# check $u1 (.'$u1')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$u1'
    res = isinstance(val, str) and (val == "https://json-model.org/models/json-model")
    if not res:
        rep is None or rep.append(("unexpected https://json-model.org/models/json-model [.'$u1']", path))
    return res

# check $u2 (.'$u2')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$u2'
    res = isinstance(val, str) and val == "file://./url_looking.model.json"
    if not res:
        rep is None or rep.append(("unexpected file://./url_looking.model.json [.'$u2']", path))
    return res


# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # trigger a warning on url-looking definitions
    # .
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'file://./url_looking.model.json', 'https://json-model.org/models/json-model'}
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "u1": json_model_2,
            "u2": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
