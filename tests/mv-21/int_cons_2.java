//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//
import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class int_cons_2 extends ModelChecker
{
    static public final String VERSION = "2.0b1";

    public Map<String, Checker> int_cons_2_map_pmap;

    // check $forty-two (.'$forty-two')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$forty-two'
        res = json.isInteger(val) && json.asLong(val) == 42;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =42 [.'$forty-two']", path);
        }
        return res;
    }
    
    // check $positif (.'$positif')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$positif'
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$positif']", path);
        }
        return res;
    }
    
    // object .
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.]", path);
            return false;
        }
        if (json.objectSize(val) == 0)
        {
            return true;
        }
        else
        {
            if (rep != null) rep.addEntry("expecting empty object [.]", path);
            return false;
        }
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.]", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            int_cons_2_map_pmap = new HashMap<String, Checker>();
            int_cons_2_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            int_cons_2_map_pmap.put("forty-two", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            int_cons_2_map_pmap.put("positif", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            int_cons_2_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return int_cons_2_map_pmap.get(name);
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new int_cons_2();
        Main.main("int_cons_2", checker, VERSION, args);
    }
}
