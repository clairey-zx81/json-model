#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_2($$$);
sub json_model_3($$$);
my %_jm_cst_0;
sub json_model_4($$$);
sub json_model_5($$$);
sub json_model_6($$$);
my %_jm_cst_1;
sub json_model_7($$$);
sub _jm_obj_0($$$);
sub _jm_obj_1($$$);
sub json_model_8($$$);
sub json_model_9($$$);
sub json_model_10($$$);
sub json_model_11($$$);
sub json_model_12($$$);
my %_jm_cst_2;
sub json_model_13($$$);
my %_jm_cst_3;
sub json_model_14($$$);
sub json_model_15($$$);
sub _jm_obj_2($$$);
sub json_model_16($$$);
sub _jm_obj_3($$$);
sub _jm_obj_4($$$);
sub _jm_obj_5($$$);
sub _jm_obj_6($$$);
sub json_model_1($$$);
my %check_model_map;

sub _jm_re_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /./;
    return $res;
}

# check $neStr (.'$neStr')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$neStr'
    # "/./"
    return jm_is_string($val) && _jm_re_0($val, undef, undef);
}

# check $neStrList (.'$neStrList')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$neStrList'
    # .'$neStrList'.'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$neStrList'.'@'.0
            $res = json_model_2($arr_0_item, undef, undef);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_0 = scalar @$val;
        $res = jm_is_unique_array($val, undef, undef) && $ival_0 >= 1;
    }
    return $res;
}


# check $License (.'$License')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$License'
    return jm_is_string($val) && exists $_jm_cst_0{$val};
}

# check $LicenseList (.'$LicenseList')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$LicenseList'
    # .'$LicenseList'.'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_1_idx (0 .. $#$val)
        {
            my $arr_1_item = $$val[$arr_1_idx];
            # .'$LicenseList'.'@'.0
            $res = json_model_4($arr_1_item, undef, undef);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_1 = scalar @$val;
        $res = jm_is_unique_array($val, undef, undef) && $ival_1 >= 1;
    }
    return $res;
}

sub _jm_re_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[Xx]_/;
    return $res;
}

# check $Provide (.'$Provide')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Provide'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'file')
        {
            # handle must file property
            $must_count++;
            # .'$Provide'.file
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'version')
        {
            # handle must version property
            $must_count++;
            # .'$Provide'.version
            $res = json_model_10($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'docfile')
        {
            # handle may docfile property
            # .'$Provide'.docfile
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'abstract')
        {
            # handle may abstract property
            # .'$Provide'.abstract
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, undef, undef))
        {
            # handle 1 re props
            # .'$Provide'.'/^[Xx]_/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}


# check $Status (.'$Status')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Status'
    return jm_is_string($val) && exists $_jm_cst_1{$val};
}

# object .'$Resources'.bugtracker
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'web')
        {
            # handle may web property
            # .'$Resources'.bugtracker.web
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'mailto')
        {
            # handle may mailto property
            # .'$Resources'.bugtracker.mailto
            $res = jm_is_string($pval) && jm_is_valid_email($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, undef, undef))
        {
            # handle 1 re props
            # .'$Resources'.bugtracker.'/^[Xx]_/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Resources'.repository
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'url')
        {
            # handle may url property
            # .'$Resources'.repository.url
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'web')
        {
            # handle may web property
            # .'$Resources'.repository.web
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'type')
        {
            # handle may type property
            # .'$Resources'.repository.type
            # "/./"
            $res = jm_is_string($pval) && _jm_re_0($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Resources (.'$Resources')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Resources'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'homepage')
        {
            # handle may homepage property
            # .'$Resources'.homepage
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'bugtracker')
        {
            # handle may bugtracker property
            # .'$Resources'.bugtracker
            $res = _jm_obj_0($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'repository')
        {
            # handle may repository property
            # .'$Resources'.repository
            $res = _jm_obj_1($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

sub _jm_re_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\d+\.\d+\.\d+[-_A-Za-z0-9]*$/;
    return $res;
}

# check $SemVer (.'$SemVer')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$SemVer'
    # "/^\\d+\\.\\d+\\.\\d+[-_A-Za-z0-9]*$/"
    return jm_is_string($val) && _jm_re_2($val, undef, undef);
}

# check $Version (.'$Version')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Version'
    # .'$Version'.'|'.0
    # .'$Version'.'|'.1
    return json_model_9($val, undef, undef) || jm_is_integer($val) && $val == 0;
}

sub _jm_re_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^(<=|<|>=|>|!=|==)$/;
    return $res;
}

# check $Ops (.'$Ops')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Ops'
    # "/^(<=|<|>=|>|!=|==)$/"
    return jm_is_string($val) && _jm_re_3($val, undef, undef);
}

sub _jm_re_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\s*(<=|<|>=|>|!=|==)\s*(\d+\.\d+\.\d+[-_A-Za-z0-9]*)\s*(,\s*(<=|<|>=|>|!=|==)\s*(\d+\.\d+\.\d+[-_A-Za-z0-9]*))*\s*$/;
    return $res;
}

# check $VersionRange (.'$VersionRange')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$VersionRange'
    # "/^\\s*(<=|<|>=|>|!=|==)\\s*(\\d+\\.\\d+\\.\\d+[-_A-Za-z0-9]*)\\s*(,\\s*(<=|<|>=|>|!=|==)\\s*(\\d+\\.\\d+\\.\\d+[-_A-Za-z0-9]*))*\\s*$/"
    return jm_is_string($val) && _jm_re_4($val, undef, undef);
}


# check $Phase (.'$Phase')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Phase'
    return jm_is_string($val) && exists $_jm_cst_2{$val};
}


# check $Relation (.'$Relation')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Relation'
    return jm_is_string($val) && exists $_jm_cst_3{$val};
}

# check $Prereq (.'$Prereq')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Prereq'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Prereq'.''
        # .'$Prereq'.''.'|'.0
        # .'$Prereq'.''.'|'.1
        $res = json_model_10($pval, undef, undef) || json_model_12($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Prereqs'.'$Phase'
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (json_model_14($prop, undef, undef))
        {
            # handle 1 key props
            # .'$Prereqs'.'$Phase'.'$Relation'
            $res = json_model_15($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, undef, undef))
        {
            # handle 1 re props
            # .'$Prereqs'.'$Phase'.'/^[Xx]_/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Prereqs (.'$Prereqs')
sub json_model_16($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Prereqs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (json_model_13($prop, undef, undef))
        {
            # handle 1 key props
            # .'$Prereqs'.'$Phase'
            $res = _jm_obj_2($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, undef, undef))
        {
            # handle 1 re props
            # .'$Prereqs'.'/^[Xx]_/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .license.'|'.2
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .license.'|'.2.''
        $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .provides
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .provides.''
        $res = json_model_6($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'meta-spec'
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'version')
        {
            # handle must version property
            $must_count++;
            # .'meta-spec'.version
            $res = jm_is_string($pval) && $pval eq '1.0.0';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'url')
        {
            # handle may url property
            # .'meta-spec'.url
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, undef, undef))
        {
            # handle 1 re props
            # .'meta-spec'.'/^[Xx]_/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# object .no_index
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'file')
        {
            # handle may file property
            # .no_index.file
            $res = json_model_3($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'directory')
        {
            # handle may directory property
            # .no_index.directory
            $res = json_model_3($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .name
            $res = json_model_2($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'license')
        {
            # handle must license property
            $must_count++;
            # .license
            # .license.'|'.0
            # .license.'|'.1
            # .license.'|'.2
            $res = json_model_4($pval, undef, undef) || json_model_5($pval, undef, undef) || _jm_obj_3($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'version')
        {
            # handle must version property
            $must_count++;
            # .version
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'abstract')
        {
            # handle must abstract property
            $must_count++;
            # .abstract
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'provides')
        {
            # handle must provides property
            $must_count++;
            # .provides
            $res = _jm_obj_4($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'meta-spec')
        {
            # handle must meta-spec property
            $must_count++;
            # .'meta-spec'
            $res = _jm_obj_5($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'maintainer')
        {
            # handle must maintainer property
            $must_count++;
            # .maintainer
            # .maintainer.'|'.0
            # .maintainer.'|'.1
            $res = json_model_2($pval, undef, undef) || json_model_3($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'url')
        {
            # handle may url property
            # .url
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'tags')
        {
            # handle may tags property
            # .tags
            $res = json_model_3($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'prereqs')
        {
            # handle may prereqs property
            # .prereqs
            $res = json_model_16($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'no_index')
        {
            # handle may no_index property
            # .no_index
            $res = _jm_obj_6($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'resources')
        {
            # handle may resources property
            # .resources
            $res = json_model_8($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'generated_by')
        {
            # handle may generated_by property
            # .generated_by
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'release_status')
        {
            # handle may release_status property
            # .release_status
            $res = json_model_7($pval, undef, undef);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, undef, undef))
        {
            # handle 1 re props
            # .'/^[Xx]_/'
            $res = 1;
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 7;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            'agpl_3' => 1,
            'apache_1_1' => 1,
            'apache_2_0' => 1,
            'artistic_1' => 1,
            'artistic_2' => 1,
            'bsd' => 1,
            'freebsd' => 1,
            'gfdl_1_2' => 1,
            'gfdl_1_3' => 1,
            'gpl_1' => 1,
            'gpl_2' => 1,
            'gpl_3' => 1,
            'lgpl_2_1' => 1,
            'lgpl_3_0' => 1,
            'mit' => 1,
            'mozilla_1_0' => 1,
            'mozilla_1_1' => 1,
            'openssl' => 1,
            'perl_5' => 1,
            'postgresql' => 1,
            'qpl_1_0' => 1,
            'ssleay' => 1,
            'sun' => 1,
            'zlib' => 1,
            'open_source' => 1,
            'restricted' => 1,
            'unrestricted' => 1,
            'unknown' => 1,
        );
        %_jm_cst_1 = (
            'stable' => 1,
            'testing' => 1,
            'unstable' => 1,
        );
        %_jm_cst_2 = (
            'configure' => 1,
            'build' => 1,
            'test' => 1,
            'runtime' => 1,
            'develop' => 1,
        );
        %_jm_cst_3 = (
            'requires' => 1,
            'recommends' => 1,
            'suggests' => 1,
            'conflicts' => 1,
        );
        %check_model_map = (
            '' => \&json_model_1,
            'neStr' => \&json_model_2,
            'neStrList' => \&json_model_3,
            'License' => \&json_model_4,
            'LicenseList' => \&json_model_5,
            'Provide' => \&json_model_6,
            'Status' => \&json_model_7,
            'Resources' => \&json_model_8,
            'SemVer' => \&json_model_9,
            'Version' => \&json_model_10,
            'Ops' => \&json_model_11,
            'VersionRange' => \&json_model_12,
            'Phase' => \&json_model_13,
            'Relation' => \&json_model_14,
            'Prereq' => \&json_model_15,
            'Prereqs' => \&json_model_16,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %_jm_cst_1 = ();
        %_jm_cst_2 = ();
        %_jm_cst_3 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
