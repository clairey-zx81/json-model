#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0b1
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0b1"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_re_0_reco: object
_jm_re_0: RegexFun
_jm_cst_0: set[str]
_jm_re_1_reco: object
_jm_re_1: RegexFun
_jm_cst_1: set[str]
_jm_re_2_reco: object
_jm_re_2: RegexFun
_jm_re_3_reco: object
_jm_re_3: RegexFun
_jm_re_4_reco: object
_jm_re_4: RegexFun
_jm_cst_2: set[str]
_jm_cst_3: set[str]
_jm_obj_7_mup: PropMap
_jm_obj_7_map: PropMap
check_model_map: PropMap

# check $neStr (.'$neStr')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$neStr'
    # "/./"
    res = isinstance(val, str) and _jm_re_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /./ [.'$neStr']", path))
    return res

# check $neStrList (.'$neStrList')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$neStrList'
    # .'$neStrList'.'@'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$neStrList'.'@'.0
            res = json_model_2(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $neStr [.'$neStrList'.'@'.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$neStrList'.'@']", path))
    if res:
        ival_0: int = len(val)
        res = is_unique_array(val, path, rep) and ival_0 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$neStrList']", path))
    return res


# check $License (.'$License')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$License'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$License'.'|']", path))
    return res

# check $LicenseList (.'$LicenseList')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$LicenseList'
    # .'$LicenseList'.'@'
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$LicenseList'.'@'.0
            res = json_model_4(arr_1_item, arr_1_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $License [.'$LicenseList'.'@'.0]", arr_1_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$LicenseList'.'@']", path))
    if res:
        ival_1: int = len(val)
        res = is_unique_array(val, path, rep) and ival_1 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$LicenseList']", path))
    return res


# object .'$Provide'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Provide']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "file":
            # handle must file property
            must_count += 1
            # .'$Provide'.file
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Provide'.file]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Provide'.file]", lpath_0 if path is not None else None))
                return False
        elif prop == "version":
            # handle must version property
            must_count += 1
            # .'$Provide'.version
            res = json_model_10(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Version [.'$Provide'.version]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Provide'.version]", lpath_0 if path is not None else None))
                return False
        elif prop == "abstract":
            # handle may abstract property
            # .'$Provide'.abstract
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Provide'.abstract]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Provide'.abstract]", lpath_0 if path is not None else None))
                return False
        elif prop == "docfile":
            # handle may docfile property
            # .'$Provide'.docfile
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Provide'.docfile]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Provide'.docfile]", lpath_0 if path is not None else None))
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .'$Provide'.'/^[Xx]_/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Provide'.'/^[Xx]_/']", lpath_0 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Provide']", lpath_0 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "file" in val:
                rep is None or rep.append(("missing mandatory prop <file> [.'$Provide']", path))
            if not "version" in val:
                rep is None or rep.append(("missing mandatory prop <version> [.'$Provide']", path))
        return False
    return True

# check $Provide (.'$Provide')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Provide'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Provide']", path))
    return res


# check $Status (.'$Status')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Status'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_1
    if not res:
        rep is None or rep.append(("value not in enum [.'$Status'.'|']", path))
    return res

# object .'$Resources'.bugtracker
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Resources'.bugtracker]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "web":
            # handle may web property
            # .'$Resources'.bugtracker.web
            res = is_valid_url(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$Resources'.bugtracker.web]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Resources'.bugtracker.web]", lpath_2 if path is not None else None))
                return False
        elif prop == "mailto":
            # handle may mailto property
            # .'$Resources'.bugtracker.mailto
            res = is_valid_email(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EMAIL [.'$Resources'.bugtracker.mailto]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Resources'.bugtracker.mailto]", lpath_2 if path is not None else None))
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .'$Resources'.bugtracker.'/^[Xx]_/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Resources'.bugtracker.'/^[Xx]_/']", lpath_2 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Resources'.bugtracker]", lpath_2 if path is not None else None))
            return False
    return True

# object .'$Resources'.repository
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Resources'.repository]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "url":
            # handle may url property
            # .'$Resources'.repository.url
            res = is_valid_url(pval, lpath_3 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$Resources'.repository.url]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Resources'.repository.url]", lpath_3 if path is not None else None))
                return False
        elif prop == "web":
            # handle may web property
            # .'$Resources'.repository.web
            res = is_valid_url(pval, lpath_3 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$Resources'.repository.web]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Resources'.repository.web]", lpath_3 if path is not None else None))
                return False
        elif prop == "type":
            # handle may type property
            # .'$Resources'.repository.type
            # "/./"
            res = isinstance(pval, str) and _jm_re_0(pval, lpath_3 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /./ [.'$Resources'.repository.type]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Resources'.repository.type]", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Resources'.repository]", lpath_3 if path is not None else None))
            return False
    return True

# object .'$Resources'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Resources']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "homepage":
            # handle may homepage property
            # .'$Resources'.homepage
            res = is_valid_url(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$Resources'.homepage]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Resources'.homepage]", lpath_1 if path is not None else None))
                return False
        elif prop == "bugtracker":
            # handle may bugtracker property
            # .'$Resources'.bugtracker
            res = _jm_obj_2(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Resources'.bugtracker]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Resources'.bugtracker]", lpath_1 if path is not None else None))
                return False
        elif prop == "repository":
            # handle may repository property
            # .'$Resources'.repository
            res = _jm_obj_3(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Resources'.repository]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Resources'.repository]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Resources']", lpath_1 if path is not None else None))
            return False
    return True

# check $Resources (.'$Resources')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Resources'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Resources']", path))
    return res


# check $SemVer (.'$SemVer')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$SemVer'
    # "/^\\d+\\.\\d+\\.\\d+[-_A-Za-z0-9]*$/"
    res = isinstance(val, str) and _jm_re_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^\\d+\\.\\d+\\.\\d+[-_A-Za-z0-9]*$/ [.'$SemVer']", path))
    return res

# check $Version (.'$Version')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Version'
    # .'$Version'.'|'.0
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $SemVer [.'$Version'.'|'.0]", path))
    if not res:
        # .'$Version'.'|'.1
        res = isinstance(val, int) and not isinstance(val, bool) and val == 0
        if not res:
            rep is None or rep.append(("unexpected =0 [.'$Version'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Version'.'|']", path))
    return res


# check $Ops (.'$Ops')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Ops'
    # "/^(<=|<|>=|>|!=|==)$/"
    res = isinstance(val, str) and _jm_re_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^(<=|<|>=|>|!=|==)$/ [.'$Ops']", path))
    return res


# check $VersionRange (.'$VersionRange')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$VersionRange'
    # "/^\\s*(<=|<|>=|>|!=|==)\\s*(\\d+\\.\\d+\\.\\d+[-_A-Za-z0-9]*)\\s*(,\\s*(<=|<|>=|>|!=|==)\\s*(\\d+\\.\\d+\\.\\d+[-_A-Za-z0-9]*))*\\s*$/"
    res = isinstance(val, str) and _jm_re_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^\\s*(<=|<|>=|>|!=|==)\\s*(\\d+\\.\\d+\\.\\d+[-_A-Za-z0-9]*)\\s*(,\\s*(<=|<|>=|>|!=|==)\\s*(\\d+\\.\\d+\\.\\d+[-_A-Za-z0-9]*))*\\s*$/ [.'$VersionRange']", path))
    return res


# check $Phase (.'$Phase')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Phase'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_2
    if not res:
        rep is None or rep.append(("value not in enum [.'$Phase'.'|']", path))
    return res


# check $Relation (.'$Relation')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Relation'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_3
    if not res:
        rep is None or rep.append(("value not in enum [.'$Relation'.'|']", path))
    return res

# object .'$Prereq'
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prereq']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Prereq'.''
        # .'$Prereq'.''.'|'.0
        res = json_model_10(pval, lpath_4 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Version [.'$Prereq'.''.'|'.0]", lpath_4 if path is not None else None))
        if not res:
            # .'$Prereq'.''.'|'.1
            res = json_model_12(pval, lpath_4 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $VersionRange [.'$Prereq'.''.'|'.1]", lpath_4 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Prereq'.''.'|']", lpath_4 if path is not None else None))
        if not res:
            return False
    return True

# check $Prereq (.'$Prereq')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Prereq'
    res = _jm_obj_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Prereq']", path))
    return res

# object .'$Prereqs'.'$Phase'
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prereqs'.'$Phase']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if json_model_14(prop, lpath_6 if path is not None else None, rep):
            # handle 1 key props
            # .'$Prereqs'.'$Phase'.'$Relation'
            res = json_model_15(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Prereq [.'$Prereqs'.'$Phase'.'$Relation']", lpath_6 if path is not None else None))
            if not res:
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .'$Prereqs'.'$Phase'.'/^[Xx]_/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Prereqs'.'$Phase'.'/^[Xx]_/']", lpath_6 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Prereqs'.'$Phase']", lpath_6 if path is not None else None))
            return False
    return True

# object .'$Prereqs'
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Prereqs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if json_model_13(prop, lpath_5 if path is not None else None, rep):
            # handle 1 key props
            # .'$Prereqs'.'$Phase'
            res = _jm_obj_6(pval, lpath_5 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Prereqs'.'$Phase']", lpath_5 if path is not None else None))
            if not res:
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .'$Prereqs'.'/^[Xx]_/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Prereqs'.'/^[Xx]_/']", lpath_5 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Prereqs']", lpath_5 if path is not None else None))
            return False
    return True

# check $Prereqs (.'$Prereqs')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Prereqs'
    res = _jm_obj_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Prereqs']", path))
    return res

# check _jm_obj_7_mup_abstract (.abstract)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .abstract
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.abstract]", path))
    return res

# object .license.'^'.2
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.license.'^'.2]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .license.'^'.2.''
        res = is_valid_url(pval, lpath_8 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $URL [.license.'^'.2.'']", lpath_8 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_7_mup_license (.license)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .license
    # generic xor list
    xc_0: int = 0
    xr_0: bool
    # .license.'^'.0
    xr_0 = json_model_4(val, path, rep)
    if not xr_0:
        rep is None or rep.append(("unexpected $License [.license.'^'.0]", path))
    if xr_0:
        xc_0 += 1
    # .license.'^'.1
    xr_0 = json_model_5(val, path, rep)
    if not xr_0:
        rep is None or rep.append(("unexpected $LicenseList [.license.'^'.1]", path))
    if xr_0:
        xc_0 += 1
    if xc_0 <= 1:
        # .license.'^'.2
        xr_0 = _jm_obj_8(val, path, rep)
        if not xr_0:
            rep is None or rep.append(("unexpected element [.license.'^'.2]", path))
        if xr_0:
            xc_0 += 1
    res = xc_0 == 1
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not one model match [.license.'^']", path))
    return res

# check _jm_obj_7_mup_maintainer (.maintainer)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .maintainer
    # .maintainer.'|'.0
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $neStr [.maintainer.'|'.0]", path))
    if not res:
        # .maintainer.'|'.1
        res = json_model_3(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $neStrList [.maintainer.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.maintainer.'|']", path))
    return res

# object .'meta-spec'
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'meta-spec']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if prop == "version":
            # handle must version property
            must_count += 1
            # .'meta-spec'.version
            res = isinstance(pval, str) and pval == "1.0.0"
            if not res:
                rep is None or rep.append(("unexpected _1.0.0 [.'meta-spec'.version]", lpath_9 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'meta-spec'.version]", lpath_9 if path is not None else None))
                return False
        elif prop == "url":
            # handle may url property
            # .'meta-spec'.url
            res = is_valid_url(pval, lpath_9 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'meta-spec'.url]", lpath_9 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'meta-spec'.url]", lpath_9 if path is not None else None))
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .'meta-spec'.'/^[Xx]_/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'meta-spec'.'/^[Xx]_/']", lpath_9 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'meta-spec']", lpath_9 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "version" in val:
                rep is None or rep.append(("missing mandatory prop <version> [.'meta-spec']", path))
        return False
    return True

# check _jm_obj_7_mup_meta-spec (.'meta-spec')
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'meta-spec'
    res = _jm_obj_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'meta-spec']", path))
    return res

# check _jm_obj_7_mup_name (.name)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .name
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $neStr [.name]", path))
    return res

# object .provides
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.provides]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .provides.''
        res = json_model_6(pval, lpath_10 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Provide [.provides.'']", lpath_10 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_7_mup_provides (.provides)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .provides
    res = _jm_obj_10(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.provides]", path))
    return res

# check _jm_obj_7_mup_version (.version)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .version
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.version]", path))
    return res


# check _jm_obj_7_map_description (.description)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.description]", path))
    return res

# check _jm_obj_7_map_generated_by (.generated_by)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .generated_by
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.generated_by]", path))
    return res

# object .no_index
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.no_index]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        if prop == "file":
            # handle may file property
            # .no_index.file
            res = json_model_3(pval, lpath_11 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $neStrList [.no_index.file]", lpath_11 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.no_index.file]", lpath_11 if path is not None else None))
                return False
        elif prop == "directory":
            # handle may directory property
            # .no_index.directory
            res = json_model_3(pval, lpath_11 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $neStrList [.no_index.directory]", lpath_11 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.no_index.directory]", lpath_11 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.no_index]", lpath_11 if path is not None else None))
            return False
    return True

# check _jm_obj_7_map_no_index (.no_index)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .no_index
    res = _jm_obj_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.no_index]", path))
    return res

# check _jm_obj_7_map_prereqs (.prereqs)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .prereqs
    res = json_model_16(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Prereqs [.prereqs]", path))
    return res

# check _jm_obj_7_map_release_status (.release_status)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .release_status
    res = json_model_7(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Status [.release_status]", path))
    return res

# check _jm_obj_7_map_resources (.resources)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .resources
    res = json_model_8(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Resources [.resources]", path))
    return res

# check _jm_obj_7_map_tags (.tags)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .tags
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $neStrList [.tags]", path))
    return res

# check _jm_obj_7_map_url (.url)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .url
    res = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URL [.url]", path))
    return res


# object .
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_7_mup.get(prop):
            # handle 7 mandatory props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_7 if path is not None else None, rep):
                    rep is None or rep.append(("invalid mandatory prop value [.]", lpath_7 if path is not None else None))
                    return False
        elif pfun := _jm_obj_7_map.get(prop):
            # handle 8 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_7 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.]", lpath_7 if path is not None else None))
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .'/^[Xx]_/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'/^[Xx]_/']", lpath_7 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.]", lpath_7 if path is not None else None))
            return False
    if must_count != 7:
        if rep is not None:
            if not "abstract" in val:
                rep is None or rep.append(("missing mandatory prop <abstract> [.]", path))
            if not "license" in val:
                rep is None or rep.append(("missing mandatory prop <license> [.]", path))
            if not "maintainer" in val:
                rep is None or rep.append(("missing mandatory prop <maintainer> [.]", path))
            if not "meta-spec" in val:
                rep is None or rep.append(("missing mandatory prop <meta-spec> [.]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.]", path))
            if not "provides" in val:
                rep is None or rep.append(("missing mandatory prop <provides> [.]", path))
            if not "version" in val:
                rep is None or rep.append(("missing mandatory prop <version> [.]", path))
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = _jm_obj_7(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile(".")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global _jm_cst_0
        _jm_cst_0 = {'agpl_3', 'apache_1_1', 'apache_2_0', 'artistic_1', 'artistic_2', 'bsd', 'freebsd', 'gfdl_1_2', 'gfdl_1_3', 'gpl_1', 'gpl_2', 'gpl_3', 'lgpl_2_1', 'lgpl_3_0', 'mit', 'mozilla_1_0', 'mozilla_1_1', 'open_source', 'openssl', 'perl_5', 'postgresql', 'qpl_1_0', 'restricted', 'ssleay', 'sun', 'unknown', 'unrestricted', 'zlib'}
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = re.compile("^[Xx]_")
        _jm_re_1 = lambda s, p, r: _jm_re_1_reco.search(s) is not None
        global _jm_cst_1
        _jm_cst_1 = {'stable', 'testing', 'unstable'}
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = re.compile("^\\d+\\.\\d+\\.\\d+[-_A-Za-z0-9]*$")
        _jm_re_2 = lambda s, p, r: _jm_re_2_reco.search(s) is not None
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = re.compile("^(<=|<|>=|>|!=|==)$")
        _jm_re_3 = lambda s, p, r: _jm_re_3_reco.search(s) is not None
        global _jm_re_4_reco, _jm_re_4
        _jm_re_4_reco = re.compile("^\\s*(<=|<|>=|>|!=|==)\\s*(\\d+\\.\\d+\\.\\d+[-_A-Za-z0-9]*)\\s*(,\\s*(<=|<|>=|>|!=|==)\\s*(\\d+\\.\\d+\\.\\d+[-_A-Za-z0-9]*))*\\s*$")
        _jm_re_4 = lambda s, p, r: _jm_re_4_reco.search(s) is not None
        global _jm_cst_2
        _jm_cst_2 = {'build', 'configure', 'develop', 'runtime', 'test'}
        global _jm_cst_3
        _jm_cst_3 = {'conflicts', 'recommends', 'requires', 'suggests'}
        global _jm_obj_7_mup
        _jm_obj_7_mup = {
            "abstract": _jm_f_0,
            "license": _jm_f_1,
            "maintainer": _jm_f_2,
            "meta-spec": _jm_f_3,
            "name": _jm_f_4,
            "provides": _jm_f_5,
            "version": _jm_f_6,
        }
        global _jm_obj_7_map
        _jm_obj_7_map = {
            "description": _jm_f_7,
            "generated_by": _jm_f_8,
            "no_index": _jm_f_9,
            "prereqs": _jm_f_10,
            "release_status": _jm_f_11,
            "resources": _jm_f_12,
            "tags": _jm_f_13,
            "url": _jm_f_14,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "neStr": json_model_2,
            "neStrList": json_model_3,
            "License": json_model_4,
            "LicenseList": json_model_5,
            "Provide": json_model_6,
            "Status": json_model_7,
            "Resources": json_model_8,
            "SemVer": json_model_9,
            "Version": json_model_10,
            "Ops": json_model_11,
            "VersionRange": json_model_12,
            "Phase": json_model_13,
            "Relation": json_model_14,
            "Prereq": json_model_15,
            "Prereqs": json_model_16,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = None
        _jm_re_1 = None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = None
        _jm_re_2 = None
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = None
        _jm_re_3 = None
        global _jm_re_4_reco, _jm_re_4
        _jm_re_4_reco = None
        _jm_re_4 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
