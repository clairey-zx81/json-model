//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class url_look extends ModelChecker
{
    static public final String VERSION = "2";

    Set<Object> _jm_cst_0_set;
    public Map<String, Checker> url_look_map_pmap;

    // check $u1 (.'$u1')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$u1'
        res = json.isString(val) && json.asString(val).compareTo("https://json-model.org/models/json-model") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected https://json-model.org/models/json-model [.'$u1']", path);
        }
        return res;
    }
    
    // check $u2 (.'$u2')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$u2'
        res = json.isString(val) && json.asString(val).compareTo("file://./url_looking.model.json") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected file://./url_looking.model.json [.'$u2']", path);
        }
        return res;
    }
    
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // trigger a warning on url-looking definitions
        // .
        res = json.isScalar(val) && _jm_cst_0_set.contains(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("value not in enum [.'|']", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_cst_0_set = new HashSet<Object>();
            _jm_cst_0_set.add(json.safeJSON("\"https://json-model.org/models/json-model\""));
            _jm_cst_0_set.add(json.safeJSON("\"file://./url_looking.model.json\""));
            url_look_map_pmap = new HashMap<String, Checker>();
            url_look_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            url_look_map_pmap.put("u1", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            url_look_map_pmap.put("u2", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_cst_0_set = null;
            url_look_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return url_look_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return url_look_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new url_look();
        Main.main("url_look", checker, VERSION, args);
    }
}
