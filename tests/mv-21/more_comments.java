//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class more_comments extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> more_comments_map_pmap;

    // check $P (.'$P')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$P'
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$P']", path);
        }
        return res;
    }
    
    // check $Q (.'$Q')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Q'
        res = json.isArray(val);
        if (res)
        {
            int arr_0_idx = -1;
            Iterator<Object> arr_0_item_loop = json.arrayIterator(val);
            while (arr_0_item_loop.hasNext())
            {
                arr_0_idx++;
                Object arr_0_item = arr_0_item_loop.next();
                Path arr_0_lpath = new Path(arr_0_idx, path);
                // .'$Q'.0
                res = json_model_2(arr_0_item, (path != null ? arr_0_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $P [.'$Q'.0]", (path != null ? arr_0_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$Q']", path);
        }
        return res;
    }
    
    // object .o
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.o]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            if (prop.compareTo("p") == 0)
            {
                // handle may p property
                // .o.p
                res = json_model_2(pval, (path != null ? lpath_1 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $P [.o.p]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.o.p]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("q") == 0)
            {
                // handle may q property
                // .o.q
                res = json_model_3(pval, (path != null ? lpath_1 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $Q [.o.q]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.o.q]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("t") == 0)
            {
                // handle may t property
                // .o.t
                res = json.isArray(pval) && json.arrayLength(pval) == 2;
                if (res)
                {
                    Path lpath_2 = new Path(0, (path != null ? lpath_1 : null));
                    // .o.t.0
                    res = json.isBoolean(json.arrayItem(pval, 0));
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a bool [.o.t.0]", ((path != null ? lpath_1 : null) != null ? lpath_2 : null));
                    }
                    if (res)
                    {
                        lpath_2 = new Path(1, (path != null ? lpath_1 : null));
                        // .o.t.1
                        res = json.isInteger(json.arrayItem(pval, 1)) && json.asLong(json.arrayItem(pval, 1)) >= 0;
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not a 0 strict int [.o.t.1]", ((path != null ? lpath_1 : null) != null ? lpath_2 : null));
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.o.t]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.o.t]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.o]", (path != null ? lpath_1 : null));
                return false;
            }
        }
        return true;
    }
    
    // object .
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (prop.compareTo("o") == 0)
            {
                // handle may o property
                // an object
                // .o
                res = _jm_obj_1(pval, (path != null ? lpath_0 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected element [.o]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.o]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.]", (path != null ? lpath_0 : null));
                return false;
            }
        }
        return true;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // trivial and non trivial comments
        // .
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.]", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            more_comments_map_pmap = new HashMap<String, Checker>();
            more_comments_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            more_comments_map_pmap.put("P", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            more_comments_map_pmap.put("Q", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            more_comments_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return more_comments_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return more_comments_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new more_comments();
        Main.main("more_comments", checker, VERSION, args);
    }
}
