#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

var check_model_map = new Map()

// check $Pp (.'$Pp')
function json_model_2(val, path, rep)
{
    let res;
    // .'$Pp'
    res = ((typeof val === 'number' || val instanceof Number) && Number.isInteger(val)) && val >= 0;
    if (! res)
    {
        rep !== null && rep.push(["not a 0 strict int [.'$Pp']", path])
    }
    return res;
}

// check $Qq (.'$Qq')
function json_model_3(val, path, rep)
{
    let res;
    // .'$Qq'
    res = Array.isArray(val);
    if (res)
    {
        for (let arr_0_idx = 0; arr_0_idx < val.length; arr_0_idx++)
        {
            let arr_0_item = val[arr_0_idx]
            let arr_0_lpath = path ? path.concat([arr_0_idx]) : null;
            // .'$Qq'.0
            res = json_model_2(arr_0_item, (path ? arr_0_lpath : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $Pp [.'$Qq'.0]", (path ? arr_0_lpath : null)])
                break;
            }
        }
    }
    if (! res)
    {
        rep !== null && rep.push(["not array or unexpected array [.'$Qq']", path])
    }
    return res;
}

// object .o
function _jm_obj_1(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.o]", path])
        return false;
    }
    let res;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_1 = path ? path.concat([prop]) : null;
        if (prop == "p")
        {
            // handle may p property
            // .o.p
            res = json_model_2(pval, (path ? lpath_1 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $Pp [.o.p]", (path ? lpath_1 : null)])
                rep !== null && rep.push(["invalid optional prop value [.o.p]", (path ? lpath_1 : null)])
                return false;
            }
        }
        else if (prop == "q")
        {
            // handle may q property
            // .o.q
            res = json_model_3(pval, (path ? lpath_1 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $Qq [.o.q]", (path ? lpath_1 : null)])
                rep !== null && rep.push(["invalid optional prop value [.o.q]", (path ? lpath_1 : null)])
                return false;
            }
        }
        else if (prop == "t")
        {
            // handle may t property
            // .o.t
            res = Array.isArray(pval) && pval.length == 2;
            if (res)
            {
                let lpath_2 = (path ? lpath_1 : null) ? (path ? lpath_1 : null).concat([0]) : null;
                // .o.t.0
                res = (typeof pval[0] === 'boolean' || pval[0] instanceof Boolean);
                if (! res)
                {
                    rep !== null && rep.push(["not a bool [.o.t.0]", ((path ? lpath_1 : null) ? lpath_2 : null)])
                }
                if (res)
                {
                    lpath_2 = (path ? lpath_1 : null) ? (path ? lpath_1 : null).concat([1]) : null;
                    // .o.t.1
                    res = ((typeof pval[1] === 'number' || pval[1] instanceof Number) && Number.isInteger(pval[1])) && pval[1] >= 0;
                    if (! res)
                    {
                        rep !== null && rep.push(["not a 0 strict int [.o.t.1]", ((path ? lpath_1 : null) ? lpath_2 : null)])
                    }
                }
            }
            if (! res)
            {
                rep !== null && rep.push(["not array or unexpected array [.o.t]", (path ? lpath_1 : null)])
                rep !== null && rep.push(["invalid optional prop value [.o.t]", (path ? lpath_1 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.o]", (path ? lpath_1 : null)])
            return false;
        }
    }
    return true;
}

// object .
function _jm_obj_0(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.]", path])
        return false;
    }
    let res;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_0 = path ? path.concat([prop]) : null;
        if (prop == "o")
        {
            // handle may o property
            // an object
            // .o
            res = _jm_obj_1(pval, (path ? lpath_0 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected element [.o]", (path ? lpath_0 : null)])
                rep !== null && rep.push(["invalid optional prop value [.o]", (path ? lpath_0 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.]", (path ? lpath_0 : null)])
            return false;
        }
    }
    return true;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // trivial and non trivial comments
    // .
    res = _jm_obj_0(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected element [.]", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_1)
        check_model_map.set("Pp", json_model_2)
        check_model_map.set("Qq", json_model_3)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
