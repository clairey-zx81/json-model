#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


my %_jm_cst_0;
sub json_model_2($$$);
sub json_model_3($$$);
sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
sub _jm_f_6($$$);
sub _jm_f_7($$$);
sub _jm_f_8($$$);
sub _jm_f_9($$$);
sub _jm_f_10($$$);
sub _jm_f_11($$$);
sub _jm_f_12($$$);
my %_jm_cst_1;
sub _jm_f_13($$$);
sub _jm_f_14($$$);
sub _jm_f_15($$$);
sub _jm_f_16($$$);
sub _jm_f_17($$$);
sub _jm_f_18($$$);
sub _jm_f_19($$$);
sub _jm_f_20($$$);
sub _jm_f_21($$$);
sub _jm_f_22($$$);
sub _jm_f_23($$$);
sub _jm_f_24($$$);
sub _jm_f_25($$$);
sub _jm_f_26($$$);
sub _jm_f_27($$$);
sub _jm_f_28($$$);
my %json_model_1_map;
sub json_model_1($$$);
my %check_model_map;


# check $allTypes (.'$allTypes')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$allTypes'
    return jm_is_string($val) && exists $_jm_cst_0{$val};
}

# check $distinctSchemaArray (.'$distinctSchemaArray')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$distinctSchemaArray'
    # .'$distinctSchemaArray'.'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$distinctSchemaArray'.'@'.0
            # .'$distinctSchemaArray'.'@'.0.'|'.0
            # .'$distinctSchemaArray'.'@'.0.'|'.1
            $res = jm_is_string($arr_0_item) || json_model_1($arr_0_item, undef, undef);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        $res = jm_is_unique_array($val, undef, undef);
    }
    return $res;
}

# check json_model_1_map_$ref (.'$ref')
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$ref'
    return jm_is_string($val);
}

# check json_model_1_map_$schema (.'$schema')
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema'
    return jm_is_string($val);
}

# check json_model_1_map_additionalItems (.additionalItems)
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    # .additionalItems
    # .additionalItems.'|'.0
    # .additionalItems.'|'.1
    return jm_is_boolean($val) || json_model_1($val, undef, undef);
}

# check json_model_1_map_additionalProperties (.additionalProperties)
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .additionalProperties
    # .additionalProperties.'|'.0
    # .additionalProperties.'|'.1
    return jm_is_boolean($val) || json_model_1($val, undef, undef);
}

# check json_model_1_map_default (.default)
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .default
    return 1;
}

# check json_model_1_map_dependencies (.dependencies)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    # .dependencies
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .dependencies.''
        # .dependencies.''.'|'.0
        $res = jm_is_string($pval);
        if (! $res)
        {
            # .dependencies.''.'|'.1
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_1_idx (0 .. $#$pval)
                {
                    my $arr_1_item = $$pval[$arr_1_idx];
                    # .dependencies.''.'|'.1.0
                    $res = jm_is_string($arr_1_item);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                # .dependencies.''.'|'.2
                $res = json_model_1($pval, undef, undef);
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_1_map_description (.description)
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    # .description
    return jm_is_string($val);
}

# check json_model_1_map_disallow (.disallow)
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    # .disallow
    # .disallow.'|'.0
    # .disallow.'|'.1
    return jm_is_string($val) || json_model_3($val, undef, undef);
}

# check json_model_1_map_divisibleBy (.divisibleBy)
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    # .divisibleBy
    return jm_is_numeric($val) && $val > 0.0;
}

# check json_model_1_map_enum (.enum)
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    # .enum
    # .enum.'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        my $ival_0 = scalar @$val;
        $res = jm_is_unique_array($val, undef, undef) && $ival_0 >= 1;
    }
    return $res;
}

# check json_model_1_map_exclusiveMaximum (.exclusiveMaximum)
sub _jm_f_10($$$)
{
    my ($val, $path, $rep) = @_;
    # .exclusiveMaximum
    return jm_is_boolean($val);
}

# check json_model_1_map_exclusiveMinimum (.exclusiveMinimum)
sub _jm_f_11($$$)
{
    my ($val, $path, $rep) = @_;
    # .exclusiveMinimum
    return jm_is_boolean($val);
}

# check json_model_1_map_extends (.extends)
sub _jm_f_12($$$)
{
    my ($val, $path, $rep) = @_;
    # .extends
    # .extends.'|'.0
    my $res = json_model_1($val, undef, undef);
    if (! $res)
    {
        # .extends.'|'.1
        $res = jm_is_array($val);
        if ($res)
        {
            for my $arr_2_idx (0 .. $#$val)
            {
                my $arr_2_item = $$val[$arr_2_idx];
                # .extends.'|'.1.0
                $res = json_model_1($arr_2_item, undef, undef);
                if (! $res)
                {
                    last;
                }
            }
        }
    }
    return $res;
}


# check json_model_1_map_format (.format)
sub _jm_f_13($$$)
{
    my ($val, $path, $rep) = @_;
    # .format
    return jm_is_string($val) && exists $_jm_cst_1{$val};
}

# check json_model_1_map_id (.id)
sub _jm_f_14($$$)
{
    my ($val, $path, $rep) = @_;
    # .id
    return jm_is_string($val);
}

# check json_model_1_map_items (.items)
sub _jm_f_15($$$)
{
    my ($val, $path, $rep) = @_;
    # .items
    # .items.'|'.0
    my $res = json_model_1($val, undef, undef);
    if (! $res)
    {
        # .items.'|'.1
        $res = jm_is_array($val);
        if ($res)
        {
            for my $arr_3_idx (0 .. $#$val)
            {
                my $arr_3_item = $$val[$arr_3_idx];
                # .items.'|'.1.0
                $res = json_model_1($arr_3_item, undef, undef);
                if (! $res)
                {
                    last;
                }
            }
        }
    }
    return $res;
}

# check json_model_1_map_maxItems (.maxItems)
sub _jm_f_16($$$)
{
    my ($val, $path, $rep) = @_;
    # .maxItems
    return jm_is_integer($val) && $val >= 0;
}

# check json_model_1_map_maxLength (.maxLength)
sub _jm_f_17($$$)
{
    my ($val, $path, $rep) = @_;
    # .maxLength
    return jm_is_integer($val) && $val >= 0;
}

# check json_model_1_map_maximum (.maximum)
sub _jm_f_18($$$)
{
    my ($val, $path, $rep) = @_;
    # .maximum
    return jm_is_numeric($val);
}

# check json_model_1_map_minItems (.minItems)
sub _jm_f_19($$$)
{
    my ($val, $path, $rep) = @_;
    # .minItems
    return jm_is_integer($val) && $val >= 0;
}

# check json_model_1_map_minLength (.minLength)
sub _jm_f_20($$$)
{
    my ($val, $path, $rep) = @_;
    # .minLength
    return jm_is_integer($val) && $val >= 0;
}

# check json_model_1_map_minimum (.minimum)
sub _jm_f_21($$$)
{
    my ($val, $path, $rep) = @_;
    # .minimum
    return jm_is_numeric($val);
}

# check json_model_1_map_pattern (.pattern)
sub _jm_f_22($$$)
{
    my ($val, $path, $rep) = @_;
    # .pattern
    return jm_is_string($val) && jm_is_valid_regex($val, undef, undef);
}

# check json_model_1_map_patternProperties (.patternProperties)
sub _jm_f_23($$$)
{
    my ($val, $path, $rep) = @_;
    # .patternProperties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .patternProperties.''
        $res = json_model_1($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_1_map_properties (.properties)
sub _jm_f_24($$$)
{
    my ($val, $path, $rep) = @_;
    # .properties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .properties.''
        $res = json_model_1($pval, undef, undef);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_1_map_required (.required)
sub _jm_f_25($$$)
{
    my ($val, $path, $rep) = @_;
    # .required
    return jm_is_boolean($val);
}

# check json_model_1_map_title (.title)
sub _jm_f_26($$$)
{
    my ($val, $path, $rep) = @_;
    # .title
    return jm_is_string($val);
}

# check json_model_1_map_type (.type)
sub _jm_f_27($$$)
{
    my ($val, $path, $rep) = @_;
    # .type
    # .type.'|'.0
    my $res = json_model_2($val, undef, undef);
    if (! $res)
    {
        # .type.'|'.1
        $res = jm_is_array($val);
        if ($res)
        {
            for my $arr_4_idx (0 .. $#$val)
            {
                my $arr_4_item = $$val[$arr_4_idx];
                # .type.'|'.1.0
                # .type.'|'.1.0.'|'.0
                # .type.'|'.1.0.'|'.1
                $res = jm_is_string($arr_4_item) || json_model_1($arr_4_item, undef, undef);
                if (! $res)
                {
                    last;
                }
            }
        }
    }
    return $res;
}

# check json_model_1_map_uniqueItems (.uniqueItems)
sub _jm_f_28($$$)
{
    my ($val, $path, $rep) = @_;
    # .uniqueItems
    return jm_is_boolean($val);
}


# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    # JSON Model for JSON Schema Draft 03 [JSON_MODEL_STRICT_INT, JSON_MODEL_LOOSE_FLOAT]
    # .
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_1_map{$prop}))
        {
            # handle 29 may props
            if (defined($pfun) && ! &$pfun($pval, undef, undef))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            'null' => 1,
            'boolean' => 1,
            'integer' => 1,
            'number' => 1,
            'string' => 1,
            'array' => 1,
            'object' => 1,
            'any' => 1,
        );
        %_jm_cst_1 = (
            'date-time' => 1,
            'date' => 1,
            'time' => 1,
            'utc-millisec' => 1,
            'regex' => 1,
            'color' => 1,
            'style' => 1,
            'phone' => 1,
            'uri' => 1,
            'email' => 1,
            'ip-address' => 1,
            'ipv6' => 1,
            'host-name' => 1,
        );
        %json_model_1_map = (
            '$ref' => \&_jm_f_0,
            '$schema' => \&_jm_f_1,
            'additionalItems' => \&_jm_f_2,
            'additionalProperties' => \&_jm_f_3,
            'default' => \&_jm_f_4,
            'dependencies' => \&_jm_f_5,
            'description' => \&_jm_f_6,
            'disallow' => \&_jm_f_7,
            'divisibleBy' => \&_jm_f_8,
            'enum' => \&_jm_f_9,
            'exclusiveMaximum' => \&_jm_f_10,
            'exclusiveMinimum' => \&_jm_f_11,
            'extends' => \&_jm_f_12,
            'format' => \&_jm_f_13,
            'id' => \&_jm_f_14,
            'items' => \&_jm_f_15,
            'maxItems' => \&_jm_f_16,
            'maxLength' => \&_jm_f_17,
            'maximum' => \&_jm_f_18,
            'minItems' => \&_jm_f_19,
            'minLength' => \&_jm_f_20,
            'minimum' => \&_jm_f_21,
            'pattern' => \&_jm_f_22,
            'patternProperties' => \&_jm_f_23,
            'properties' => \&_jm_f_24,
            'required' => \&_jm_f_25,
            'title' => \&_jm_f_26,
            'type' => \&_jm_f_27,
            'uniqueItems' => \&_jm_f_28,
        );
        %check_model_map = (
            '' => \&json_model_1,
            'allTypes' => \&json_model_2,
            'distinctSchemaArray' => \&json_model_3,
            'Schema' => \&json_model_1,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %_jm_cst_1 = ();
        %json_model_1_map = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
