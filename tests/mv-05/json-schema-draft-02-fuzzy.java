//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class json_schema_draft_02_fuzzy extends ModelChecker
{
    static public final String VERSION = "2";

    Set<Object> _jm_cst_0_set;
    public Map<String, Checker> json_schema_draft_02_fuzzy_map_pmap;

    // object .'$schema'.properties
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$schema'.properties]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            // handle other props
            // .'$schema'.properties.''
            res = json_model_3(pval, (path != null ? lpath_0 : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.properties.'']", (path != null ? lpath_0 : null));
            }
            if (! res)
            {
                return false;
            }
        }
        return true;
    }
    
    // object .'$schema'
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$schema']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (json.objectHasProp(val, "type"))
        {
            pval = json.objectValue(val, "type");
            // .'$schema'.type
            // .'$schema'.type.'|'.0
            res = json_model_4(pval, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $allTypes [.'$schema'.type.'|'.0]", path);
            }
            if (! res)
            {
                // .'$schema'.type.'|'.1
                res = json.isArray(pval);
                if (res)
                {
                    int arr_0_idx = -1;
                    Iterator<Object> arr_0_item_loop = json.arrayIterator(pval);
                    while (arr_0_item_loop.hasNext())
                    {
                        arr_0_idx++;
                        Object arr_0_item = arr_0_item_loop.next();
                        Path arr_0_lpath = new Path(arr_0_idx, path);
                        // .'$schema'.type.'|'.1.0
                        // .'$schema'.type.'|'.1.0.'|'.0
                        res = json.isString(arr_0_item);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected string [.'$schema'.type.'|'.1.0.'|'.0]", (path != null ? arr_0_lpath : null));
                        }
                        if (! res)
                        {
                            // .'$schema'.type.'|'.1.0.'|'.1
                            res = json_model_3(arr_0_item, (path != null ? arr_0_lpath : null), rep);
                            if (! res)
                            {
                                if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.type.'|'.1.0.'|'.1]", (path != null ? arr_0_lpath : null));
                            }
                        }
                        if (res)
                        {
                            if (rep != null) rep.clearEntries();
                        }
                        else
                        {
                            if (rep != null) rep.addEntry("no model matched [.'$schema'.type.'|'.1.0.'|']", (path != null ? arr_0_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$schema'.type.'|'.1]", path);
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$schema'.type.'|']", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <type> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "properties"))
        {
            pval = json.objectValue(val, "properties");
            // .'$schema'.properties
            res = _jm_obj_1(pval, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected element [.'$schema'.properties]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <properties> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "items"))
        {
            pval = json.objectValue(val, "items");
            // .'$schema'.items
            // .'$schema'.items.'|'.0
            res = json_model_3(pval, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.items.'|'.0]", path);
            }
            if (! res)
            {
                // .'$schema'.items.'|'.1
                res = json.isArray(pval);
                if (res)
                {
                    int arr_1_idx = -1;
                    Iterator<Object> arr_1_item_loop = json.arrayIterator(pval);
                    while (arr_1_item_loop.hasNext())
                    {
                        arr_1_idx++;
                        Object arr_1_item = arr_1_item_loop.next();
                        Path arr_1_lpath = new Path(arr_1_idx, path);
                        // .'$schema'.items.'|'.1.0
                        res = json_model_3(arr_1_item, (path != null ? arr_1_lpath : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.items.'|'.1.0]", (path != null ? arr_1_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$schema'.items.'|'.1]", path);
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$schema'.items.'|']", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <items> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "optional"))
        {
            pval = json.objectValue(val, "optional");
            // .'$schema'.optional
            res = json.isBoolean(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a bool [.'$schema'.optional]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <optional> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "additionalProperties"))
        {
            pval = json.objectValue(val, "additionalProperties");
            // .'$schema'.additionalProperties
            // .'$schema'.additionalProperties.'|'.0
            res = json.isBoolean(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a bool [.'$schema'.additionalProperties.'|'.0]", path);
            }
            if (! res)
            {
                // .'$schema'.additionalProperties.'|'.1
                res = json_model_3(pval, path, rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.additionalProperties.'|'.1]", path);
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$schema'.additionalProperties.'|']", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <additionalProperties> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "requires"))
        {
            pval = json.objectValue(val, "requires");
            // .'$schema'.requires
            // .'$schema'.requires.'|'.0
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.requires.'|'.0]", path);
            }
            if (! res)
            {
                // .'$schema'.requires.'|'.1
                res = json_model_3(pval, path, rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.requires.'|'.1]", path);
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$schema'.requires.'|']", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <requires> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "minimum"))
        {
            pval = json.objectValue(val, "minimum");
            // .'$schema'.minimum
            res = json.isNumber(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a -1.0 loose float [.'$schema'.minimum]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <minimum> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "maximum"))
        {
            pval = json.objectValue(val, "maximum");
            // .'$schema'.maximum
            res = json.isNumber(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a -1.0 loose float [.'$schema'.maximum]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <maximum> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "minimumCanEqual"))
        {
            pval = json.objectValue(val, "minimumCanEqual");
            // .'$schema'.minimumCanEqual
            res = json.isBoolean(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a bool [.'$schema'.minimumCanEqual]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <minimumCanEqual> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "maximumCanEqual"))
        {
            pval = json.objectValue(val, "maximumCanEqual");
            // .'$schema'.maximumCanEqual
            res = json.isBoolean(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a bool [.'$schema'.maximumCanEqual]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <maximumCanEqual> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "minItems"))
        {
            pval = json.objectValue(val, "minItems");
            // .'$schema'.minItems
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 0 strict int [.'$schema'.minItems]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <minItems> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "maxItems"))
        {
            pval = json.objectValue(val, "maxItems");
            // .'$schema'.maxItems
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 0 strict int [.'$schema'.maxItems]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <maxItems> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "pattern"))
        {
            pval = json.objectValue(val, "pattern");
            // .'$schema'.pattern
            res = json.isString(pval) && rt.is_valid_regex(json.asString(pval));
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $REGEX [.'$schema'.pattern]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <pattern> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "minLength"))
        {
            pval = json.objectValue(val, "minLength");
            // .'$schema'.minLength
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 0 strict int [.'$schema'.minLength]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <minLength> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "maxLength"))
        {
            pval = json.objectValue(val, "maxLength");
            // .'$schema'.maxLength
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 0 strict int [.'$schema'.maxLength]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <maxLength> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "enum"))
        {
            pval = json.objectValue(val, "enum");
            // .'$schema'.enum
            // .'$schema'.enum.'@'
            res = json.isArray(pval);
            if (res)
            {
                // accept any array
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$schema'.enum.'@']", path);
            }
            if (res)
            {
                long ival_0 = json.arrayLength(pval);
                res = rt.array_is_unique(pval, path, rep) && ival_0 >= 1;
                if (! res)
                {
                    if (rep != null) rep.addEntry("constraints failed [.'$schema'.enum]", path);
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <enum> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "uniqueItems"))
        {
            pval = json.objectValue(val, "uniqueItems");
            // .'$schema'.uniqueItems
            res = json.isBoolean(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a bool [.'$schema'.uniqueItems]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <uniqueItems> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "title"))
        {
            pval = json.objectValue(val, "title");
            // .'$schema'.title
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.title]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <title> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "description"))
        {
            pval = json.objectValue(val, "description");
            // .'$schema'.description
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.description]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <description> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "format"))
        {
            pval = json.objectValue(val, "format");
            // .'$schema'.format
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.format]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <format> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "contentEncoding"))
        {
            pval = json.objectValue(val, "contentEncoding");
            // .'$schema'.contentEncoding
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.contentEncoding]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <contentEncoding> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "divisibleBy"))
        {
            pval = json.objectValue(val, "divisibleBy");
            // .'$schema'.divisibleBy
            res = json.isNumber(pval) && json.asNumber(pval) > 0.0;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 1.0 loose float [.'$schema'.divisibleBy]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <divisibleBy> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "disallow"))
        {
            pval = json.objectValue(val, "disallow");
            // .'$schema'.disallow
            // .'$schema'.disallow.'|'.0
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.disallow.'|'.0]", path);
            }
            if (! res)
            {
                // .'$schema'.disallow.'|'.1
                res = json_model_5(pval, path, rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $distinctStringArray [.'$schema'.disallow.'|'.1]", path);
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$schema'.disallow.'|']", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <disallow> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "extends"))
        {
            pval = json.objectValue(val, "extends");
            // .'$schema'.extends
            // .'$schema'.extends.'|'.0
            res = json_model_3(pval, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.extends.'|'.0]", path);
            }
            if (! res)
            {
                // .'$schema'.extends.'|'.1
                res = json.isArray(pval);
                if (res)
                {
                    int arr_2_idx = -1;
                    Iterator<Object> arr_2_item_loop = json.arrayIterator(pval);
                    while (arr_2_item_loop.hasNext())
                    {
                        arr_2_idx++;
                        Object arr_2_item = arr_2_item_loop.next();
                        Path arr_2_lpath = new Path(arr_2_idx, path);
                        // .'$schema'.extends.'|'.1.0
                        res = json_model_3(arr_2_item, (path != null ? arr_2_lpath : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.extends.'|'.1.0]", (path != null ? arr_2_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$schema'.extends.'|'.1]", path);
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$schema'.extends.'|']", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <extends> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "id"))
        {
            pval = json.objectValue(val, "id");
            // .'$schema'.id
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.id]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <id> [.'$schema']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "$schema"))
        {
            pval = json.objectValue(val, "$schema");
            // .'$schema'.'$schema'
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.'$schema']", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <$schema> [.'$schema']", path);
                return false;
            }
        }
        return true;
    }
    
    // check $schema (.'$schema')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // JSON Model for JSON Schema Draft 02 [JSON_MODEL_STRICT_INT, JSON_MODEL_LOOSE_FLOAT]
        // .'$schema'
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$schema']", path);
        }
        return res;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = json_model_3(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $schema [.]", path);
        }
        return res;
    }
    
    
    // check $schema#allTypes (.'$schema#allTypes')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$schema#allTypes'
        res = json.isScalar(val) && _jm_cst_0_set.contains(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("value not in enum [.'$schema#allTypes'.'|']", path);
        }
        return res;
    }
    
    // check $schema#distinctStringArray (.'$schema#distinctStringArray')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$schema#distinctStringArray'
        // .'$schema#distinctStringArray'.'@'
        res = json.isArray(val);
        if (res)
        {
            int arr_3_idx = -1;
            Iterator<Object> arr_3_item_loop = json.arrayIterator(val);
            while (arr_3_item_loop.hasNext())
            {
                arr_3_idx++;
                Object arr_3_item = arr_3_item_loop.next();
                Path arr_3_lpath = new Path(arr_3_idx, path);
                // .'$schema#distinctStringArray'.'@'.0
                res = json.isString(arr_3_item);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$schema#distinctStringArray'.'@'.0]", (path != null ? arr_3_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$schema#distinctStringArray'.'@']", path);
        }
        if (res)
        {
            res = rt.array_is_unique(val, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.'$schema#distinctStringArray']", path);
            }
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_cst_0_set = new HashSet<Object>();
            _jm_cst_0_set.add(json.safeJSON("\"null\""));
            _jm_cst_0_set.add(json.safeJSON("\"boolean\""));
            _jm_cst_0_set.add(json.safeJSON("\"integer\""));
            _jm_cst_0_set.add(json.safeJSON("\"number\""));
            _jm_cst_0_set.add(json.safeJSON("\"string\""));
            _jm_cst_0_set.add(json.safeJSON("\"array\""));
            _jm_cst_0_set.add(json.safeJSON("\"object\""));
            _jm_cst_0_set.add(json.safeJSON("\"any\""));
            json_schema_draft_02_fuzzy_map_pmap = new HashMap<String, Checker>();
            json_schema_draft_02_fuzzy_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            json_schema_draft_02_fuzzy_map_pmap.put("schema", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_cst_0_set = null;
            json_schema_draft_02_fuzzy_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return json_schema_draft_02_fuzzy_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return json_schema_draft_02_fuzzy_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new json_schema_draft_02_fuzzy();
        Main.main("json_schema_draft_02_fuzzy", checker, VERSION, args);
    }
}
