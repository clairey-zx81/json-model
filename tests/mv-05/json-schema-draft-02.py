#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
_jm_obj_0_map: PropMap
check_model_map: PropMap

# check $allTypes ($.'$allTypes')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$allTypes'
    res = (val is None or isinstance(val, (bool, int, float, str))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [$.'$allTypes'.'|']", path))
    return res

# check $distinctStringArray ($.'$distinctStringArray')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$distinctStringArray'
    # $.'$distinctStringArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # $.'$distinctStringArray'.'@'.0
            res = isinstance(arr_0_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$distinctStringArray'.'@'.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$distinctStringArray'.'@']", path))
    if res:
        res = is_unique_array(val, path, rep)
    if not res:
        rep is None or rep.append(("constraints failed at [$.'$distinctStringArray']", path))
    return res

# check _jm_obj_0_map_$schema ($.'$schema')
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$schema']", path))
    return res

# check _jm_obj_0_map_additionalProperties ($.additionalProperties)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.additionalProperties
    # $.additionalProperties.'|'.0
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.additionalProperties.'|'.0]", path))
    if not res:
        # $.additionalProperties.'|'.1
        res = json_model_1(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.additionalProperties.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.additionalProperties.'|']", path))
    return res

# check _jm_obj_0_map_contentEncoding ($.contentEncoding)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.contentEncoding
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.contentEncoding]", path))
    return res

# check _jm_obj_0_map_default ($.default)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.default]", path))
    return res

# check _jm_obj_0_map_description ($.description)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.description]", path))
    return res

# check _jm_obj_0_map_disallow ($.disallow)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.disallow
    # $.disallow.'|'.0
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.disallow.'|'.0]", path))
    if not res:
        # $.disallow.'|'.1
        res = json_model_3(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $distinctStringArray [$.disallow.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.disallow.'|']", path))
    return res

# check _jm_obj_0_map_divisibleBy ($.divisibleBy)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.divisibleBy
    res = isinstance(val, (int, float)) and not isinstance(val, bool) and val > 0.0
    if not res:
        rep is None or rep.append(("not a 1.0 loose float [$.divisibleBy]", path))
    return res

# check _jm_obj_0_map_enum ($.enum)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.enum
    # $.enum.'@'
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.enum.'@']", path))
    if res:
        ival_0: int = len(val)
        res = is_unique_array(val, path, rep) and ival_0 >= 1
    if not res:
        rep is None or rep.append(("constraints failed at [$.enum]", path))
    return res

# check _jm_obj_0_map_extends ($.extends)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.extends
    # $.extends.'|'.0
    res = json_model_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [$.extends.'|'.0]", path))
    if not res:
        # $.extends.'|'.1
        res = isinstance(val, list)
        if res:
            for arr_1_idx, arr_1_item in enumerate(val):
                arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
                # $.extends.'|'.1.0
                res = json_model_1(arr_1_item, arr_1_lpath if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Schema [$.extends.'|'.1.0]", arr_1_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [$.extends.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.extends.'|']", path))
    return res

# check _jm_obj_0_map_format ($.format)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.format
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.format]", path))
    return res

# check _jm_obj_0_map_id ($.id)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.id]", path))
    return res

# check _jm_obj_0_map_items ($.items)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.items
    # $.items.'|'.0
    res = json_model_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [$.items.'|'.0]", path))
    if not res:
        # $.items.'|'.1
        res = isinstance(val, list)
        if res:
            for arr_2_idx, arr_2_item in enumerate(val):
                arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
                # $.items.'|'.1.0
                res = json_model_1(arr_2_item, arr_2_lpath if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Schema [$.items.'|'.1.0]", arr_2_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [$.items.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.items.'|']", path))
    return res

# check _jm_obj_0_map_maxItems ($.maxItems)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.maxItems
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.maxItems]", path))
    return res

# check _jm_obj_0_map_maxLength ($.maxLength)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.maxLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.maxLength]", path))
    return res

# check _jm_obj_0_map_maximum ($.maximum)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.maximum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [$.maximum]", path))
    return res

# check _jm_obj_0_map_maximumCanEqual ($.maximumCanEqual)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.maximumCanEqual
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.maximumCanEqual]", path))
    return res

# check _jm_obj_0_map_minItems ($.minItems)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.minItems
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.minItems]", path))
    return res

# check _jm_obj_0_map_minLength ($.minLength)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.minLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.minLength]", path))
    return res

# check _jm_obj_0_map_minimum ($.minimum)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.minimum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [$.minimum]", path))
    return res

# check _jm_obj_0_map_minimumCanEqual ($.minimumCanEqual)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.minimumCanEqual
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.minimumCanEqual]", path))
    return res

# check _jm_obj_0_map_optional ($.optional)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.optional
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.optional]", path))
    return res

# check _jm_obj_0_map_pattern ($.pattern)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.pattern
    res = is_valid_regex(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $REGEX [$.pattern]", path))
    return res

# object $.properties
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.properties.''
        res = json_model_1(pval, lpath_1 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.properties.'']", lpath_1 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_0_map_properties ($.properties)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.properties
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.properties]", path))
    return res

# check _jm_obj_0_map_requires ($.requires)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.requires
    # $.requires.'|'.0
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.requires.'|'.0]", path))
    if not res:
        # $.requires.'|'.1
        res = json_model_1(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.requires.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.requires.'|']", path))
    return res

# check _jm_obj_0_map_title ($.title)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.title]", path))
    return res

# check _jm_obj_0_map_type ($.type)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.type
    # $.type.'|'.0
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $allTypes [$.type.'|'.0]", path))
    if not res:
        # $.type.'|'.1
        res = isinstance(val, list)
        if res:
            for arr_3_idx, arr_3_item in enumerate(val):
                arr_3_lpath: Path = (path + [ arr_3_idx ]) if path is not None else None
                # $.type.'|'.1.0
                # $.type.'|'.1.0.'|'.0
                res = isinstance(arr_3_item, str)
                if not res:
                    rep is None or rep.append(("unexpected string [$.type.'|'.1.0.'|'.0]", arr_3_lpath if path is not None else None))
                if not res:
                    # $.type.'|'.1.0.'|'.1
                    res = json_model_1(arr_3_item, arr_3_lpath if path is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Schema [$.type.'|'.1.0.'|'.1]", arr_3_lpath if path is not None else None))
                if not res:
                    rep is None or rep.append(("no model matched [$.type.'|'.1.0.'|']", arr_3_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [$.type.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.type.'|']", path))
    return res

# check _jm_obj_0_map_uniqueItems ($.uniqueItems)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.uniqueItems
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.uniqueItems]", path))
    return res


# object $
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_map.get(prop):
            # handle 27 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$]", lpath_0 if path is not None else None))
            return False
    return True

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'any', 'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global _jm_obj_0_map
        _jm_obj_0_map = {
            "$schema": _jm_f_0,
            "additionalProperties": _jm_f_1,
            "contentEncoding": _jm_f_2,
            "default": _jm_f_3,
            "description": _jm_f_4,
            "disallow": _jm_f_5,
            "divisibleBy": _jm_f_6,
            "enum": _jm_f_7,
            "extends": _jm_f_8,
            "format": _jm_f_9,
            "id": _jm_f_10,
            "items": _jm_f_11,
            "maxItems": _jm_f_12,
            "maxLength": _jm_f_13,
            "maximum": _jm_f_14,
            "maximumCanEqual": _jm_f_15,
            "minItems": _jm_f_16,
            "minLength": _jm_f_17,
            "minimum": _jm_f_18,
            "minimumCanEqual": _jm_f_19,
            "optional": _jm_f_20,
            "pattern": _jm_f_21,
            "properties": _jm_f_22,
            "requires": _jm_f_23,
            "title": _jm_f_24,
            "type": _jm_f_25,
            "uniqueItems": _jm_f_26,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "allTypes": json_model_2,
            "distinctStringArray": json_model_3,
            "Schema": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
