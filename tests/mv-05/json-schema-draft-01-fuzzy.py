#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
check_model_map: PropMap

# object .'$schema'.properties
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema'.properties.''
        res = json_model_3(pval, lpath_0 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.properties.'']", lpath_0 if path is not None else None))
            return False
    return True

# check $schema (.'$schema')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # JSON Model for JSON Schema Draft 01 [JSON_MODEL_STRICT_INT, JSON_MODEL_LOOSE_FLOAT]
    # .'$schema'
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if (pval := val.get("type", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "type" ]) if path is not None else None
        # .'$schema'.type
        # .'$schema'.type.'|'.0
        res = json_model_4(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $allTypes [.'$schema'.type.'|'.0]", lpath if path is not None else None))
        if not res:
            # .'$schema'.type.'|'.1
            res = isinstance(pval, list)
            if res:
                for arr_0_idx, arr_0_item in enumerate(pval):
                    arr_0_lpath: Path = ((lpath if path is not None else None) + [ arr_0_idx ]) if (lpath if path is not None else None) is not None else None
                    # .'$schema'.type.'|'.1.0
                    # .'$schema'.type.'|'.1.0.'|'.0
                    res = isinstance(arr_0_item, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$schema'.type.'|'.1.0.'|'.0]", arr_0_lpath if (lpath if path is not None else None) is not None else None))
                    if not res:
                        # .'$schema'.type.'|'.1.0.'|'.1
                        res = json_model_3(arr_0_item, arr_0_lpath if (lpath if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Schema [.'$schema'.type.'|'.1.0.'|'.1]", arr_0_lpath if (lpath if path is not None else None) is not None else None))
                    if res:
                        rep is None or rep.clear()
                    else:
                        rep is None or rep.append(("no model matched [.'$schema'.type.'|'.1.0.'|']", arr_0_lpath if (lpath if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$schema'.type.'|'.1]", lpath if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema'.type.'|']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <type> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("properties", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "properties" ]) if path is not None else None
        # .'$schema'.properties
        res = _jm_obj_0(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$schema'.properties]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <properties> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("items", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "items" ]) if path is not None else None
        # .'$schema'.items
        # .'$schema'.items.'|'.0
        res = json_model_3(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.items.'|'.0]", lpath if path is not None else None))
        if not res:
            # .'$schema'.items.'|'.1
            res = isinstance(pval, list)
            if res:
                for arr_1_idx, arr_1_item in enumerate(pval):
                    arr_1_lpath: Path = ((lpath if path is not None else None) + [ arr_1_idx ]) if (lpath if path is not None else None) is not None else None
                    # .'$schema'.items.'|'.1.0
                    res = json_model_3(arr_1_item, arr_1_lpath if (lpath if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Schema [.'$schema'.items.'|'.1.0]", arr_1_lpath if (lpath if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$schema'.items.'|'.1]", lpath if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema'.items.'|']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <items> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("optional", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "optional" ]) if path is not None else None
        # .'$schema'.optional
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema'.optional]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <optional> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("additionalProperties", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "additionalProperties" ]) if path is not None else None
        # .'$schema'.additionalProperties
        # .'$schema'.additionalProperties.'|'.0
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema'.additionalProperties.'|'.0]", lpath if path is not None else None))
        if not res:
            # .'$schema'.additionalProperties.'|'.1
            res = json_model_3(pval, lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schema'.additionalProperties.'|'.1]", lpath if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema'.additionalProperties.'|']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <additionalProperties> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("requires", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "requires" ]) if path is not None else None
        # .'$schema'.requires
        # .'$schema'.requires.'|'.0
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.requires.'|'.0]", lpath if path is not None else None))
        if not res:
            # .'$schema'.requires.'|'.1
            res = json_model_3(pval, lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schema'.requires.'|'.1]", lpath if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema'.requires.'|']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <requires> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("minimum", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "minimum" ]) if path is not None else None
        # .'$schema'.minimum
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a -1.0 loose float [.'$schema'.minimum]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <minimum> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("maximum", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "maximum" ]) if path is not None else None
        # .'$schema'.maximum
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a -1.0 loose float [.'$schema'.maximum]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <maximum> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("minimumCanEqual", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "minimumCanEqual" ]) if path is not None else None
        # .'$schema'.minimumCanEqual
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema'.minimumCanEqual]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <minimumCanEqual> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("maximumCanEqual", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "maximumCanEqual" ]) if path is not None else None
        # .'$schema'.maximumCanEqual
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema'.maximumCanEqual]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <maximumCanEqual> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("minItems", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "minItems" ]) if path is not None else None
        # .'$schema'.minItems
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 strict int [.'$schema'.minItems]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <minItems> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("maxItems", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "maxItems" ]) if path is not None else None
        # .'$schema'.maxItems
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 strict int [.'$schema'.maxItems]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <maxItems> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("pattern", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "pattern" ]) if path is not None else None
        # .'$schema'.pattern
        res = is_valid_regex(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $REGEX [.'$schema'.pattern]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <pattern> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("minLength", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "minLength" ]) if path is not None else None
        # .'$schema'.minLength
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 strict int [.'$schema'.minLength]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <minLength> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("maxLength", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "maxLength" ]) if path is not None else None
        # .'$schema'.maxLength
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 strict int [.'$schema'.maxLength]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <maxLength> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("enum", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "enum" ]) if path is not None else None
        # .'$schema'.enum
        # .'$schema'.enum.'@'
        res = isinstance(pval, list)
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$schema'.enum.'@']", lpath if path is not None else None))
        if res:
            ival_0: int = len(pval)
            res = ival_0 >= 1
            if not res:
                rep is None or rep.append(("constraints failed [.'$schema'.enum]", lpath if path is not None else None))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <enum> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("title", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "title" ]) if path is not None else None
        # .'$schema'.title
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.title]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <title> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("description", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "description" ]) if path is not None else None
        # .'$schema'.description
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.description]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <description> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("format", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "format" ]) if path is not None else None
        # .'$schema'.format
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.format]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <format> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("contentEncoding", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "contentEncoding" ]) if path is not None else None
        # .'$schema'.contentEncoding
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.contentEncoding]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <contentEncoding> [.'$schema']", lpath if path is not None else None))
            return False
    # ignored .'$schema'.default
    if (pval := val.get("maxDecimal", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "maxDecimal" ]) if path is not None else None
        # .'$schema'.maxDecimal
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 strict int [.'$schema'.maxDecimal]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <maxDecimal> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("disallow", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "disallow" ]) if path is not None else None
        # .'$schema'.disallow
        # .'$schema'.disallow.'|'.0
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.disallow.'|'.0]", lpath if path is not None else None))
        if not res:
            # .'$schema'.disallow.'|'.1
            res = isinstance(pval, list)
            if res:
                for arr_2_idx, arr_2_item in enumerate(pval):
                    arr_2_lpath: Path = ((lpath if path is not None else None) + [ arr_2_idx ]) if (lpath if path is not None else None) is not None else None
                    # .'$schema'.disallow.'|'.1.0
                    res = isinstance(arr_2_item, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$schema'.disallow.'|'.1.0]", arr_2_lpath if (lpath if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$schema'.disallow.'|'.1]", lpath if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema'.disallow.'|']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <disallow> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("extends", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "extends" ]) if path is not None else None
        # .'$schema'.extends
        # .'$schema'.extends.'|'.0
        res = json_model_3(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.extends.'|'.0]", lpath if path is not None else None))
        if not res:
            # .'$schema'.extends.'|'.1
            res = isinstance(pval, list)
            if res:
                for arr_3_idx, arr_3_item in enumerate(pval):
                    arr_3_lpath: Path = ((lpath if path is not None else None) + [ arr_3_idx ]) if (lpath if path is not None else None) is not None else None
                    # .'$schema'.extends.'|'.1.0
                    res = json_model_3(arr_3_item, arr_3_lpath if (lpath if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Schema [.'$schema'.extends.'|'.1.0]", arr_3_lpath if (lpath if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$schema'.extends.'|'.1]", lpath if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema'.extends.'|']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <extends> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("id", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "id" ]) if path is not None else None
        # .'$schema'.id
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.id]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <id> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("$schema", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "$schema" ]) if path is not None else None
        # .'$schema'.'$schema'
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.'$schema']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <$schema> [.'$schema']", lpath if path is not None else None))
            return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .
    res: bool = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema [.]", path))
    return res


# check $schema#allTypes (.'$schema#allTypes')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#allTypes'
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$schema#allTypes'.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'any', 'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global check_model_map
        check_model_map = {
            "": json_model_3,
            "schema": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
