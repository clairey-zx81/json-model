--
-- Generated by JSON Model Compiler version 2
-- see https://github.com/clairey-zx81/json-model
--
-- JSON_MODEL_VERSION is 2
CREATE EXTENSION IF NOT EXISTS json_model;

-- object .'$schema'.properties
CREATE OR REPLACE FUNCTION _jm_obj_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    -- handle other props
    -- .'$schema'.properties.''
    res := json_model_3(pval, NULL, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$schema'
CREATE OR REPLACE FUNCTION _jm_obj_0(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
  arr_0_idx INT8;
  arr_0_item JSONB;
  arr_1_idx INT8;
  arr_1_item JSONB;
  ival_0 int;
  arr_2_idx INT8;
  arr_2_item JSONB;
  arr_3_idx INT8;
  arr_3_item JSONB;
BEGIN
  -- check must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF val ? 'type' THEN
    pval := val -> 'type';
    -- .'$schema'.type
    -- .'$schema'.type.'|'.0
    res := json_model_4(pval, path, rep);
    IF NOT res THEN
      -- .'$schema'.type.'|'.1
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_0_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_0_item := pval -> arr_0_idx;
          -- .'$schema'.type.'|'.1.0
          -- .'$schema'.type.'|'.1.0.'|'.0
          res := JSONB_TYPEOF(arr_0_item) = 'string';
          IF NOT res THEN
            -- .'$schema'.type.'|'.1.0.'|'.1
            res := json_model_3(arr_0_item, NULL, rep);
          END IF;
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
    END IF;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'properties' THEN
    pval := val -> 'properties';
    -- .'$schema'.properties
    res := _jm_obj_1(pval, path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'items' THEN
    pval := val -> 'items';
    -- .'$schema'.items
    -- .'$schema'.items.'|'.0
    res := json_model_3(pval, path, rep);
    IF NOT res THEN
      -- .'$schema'.items.'|'.1
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_1_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_1_item := pval -> arr_1_idx;
          -- .'$schema'.items.'|'.1.0
          res := json_model_3(arr_1_item, NULL, rep);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
    END IF;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'optional' THEN
    pval := val -> 'optional';
    -- .'$schema'.optional
    res := JSONB_TYPEOF(pval) = 'boolean';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'additionalProperties' THEN
    pval := val -> 'additionalProperties';
    -- .'$schema'.additionalProperties
    -- .'$schema'.additionalProperties.'|'.0
    res := JSONB_TYPEOF(pval) = 'boolean';
    IF NOT res THEN
      -- .'$schema'.additionalProperties.'|'.1
      res := json_model_3(pval, path, rep);
    END IF;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'requires' THEN
    pval := val -> 'requires';
    -- .'$schema'.requires
    -- .'$schema'.requires.'|'.0
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      -- .'$schema'.requires.'|'.1
      res := json_model_3(pval, path, rep);
    END IF;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'minimum' THEN
    pval := val -> 'minimum';
    -- .'$schema'.minimum
    res := JSONB_TYPEOF(pval) = 'number';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'maximum' THEN
    pval := val -> 'maximum';
    -- .'$schema'.maximum
    res := JSONB_TYPEOF(pval) = 'number';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'minimumCanEqual' THEN
    pval := val -> 'minimumCanEqual';
    -- .'$schema'.minimumCanEqual
    res := JSONB_TYPEOF(pval) = 'boolean';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'maximumCanEqual' THEN
    pval := val -> 'maximumCanEqual';
    -- .'$schema'.maximumCanEqual
    res := JSONB_TYPEOF(pval) = 'boolean';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'minItems' THEN
    pval := val -> 'minItems';
    -- .'$schema'.minItems
    res := JSONB_TYPEOF(pval) = 'number' AND (pval)::INT8 = (pval)::FLOAT8 AND (pval)::INT8 >= 0;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'maxItems' THEN
    pval := val -> 'maxItems';
    -- .'$schema'.maxItems
    res := JSONB_TYPEOF(pval) = 'number' AND (pval)::INT8 = (pval)::FLOAT8 AND (pval)::INT8 >= 0;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'pattern' THEN
    pval := val -> 'pattern';
    -- .'$schema'.pattern
    res := JSONB_TYPEOF(pval) = 'string' AND jm_is_valid_regex(JSON_VALUE(pval, '$' RETURNING TEXT), path, rep);
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'minLength' THEN
    pval := val -> 'minLength';
    -- .'$schema'.minLength
    res := JSONB_TYPEOF(pval) = 'number' AND (pval)::INT8 = (pval)::FLOAT8 AND (pval)::INT8 >= 0;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'maxLength' THEN
    pval := val -> 'maxLength';
    -- .'$schema'.maxLength
    res := JSONB_TYPEOF(pval) = 'number' AND (pval)::INT8 = (pval)::FLOAT8 AND (pval)::INT8 >= 0;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'enum' THEN
    pval := val -> 'enum';
    -- .'$schema'.enum
    -- .'$schema'.enum.'@'
    res := JSONB_TYPEOF(pval) = 'array';
    IF res THEN
      ival_0 := JSONB_ARRAY_LENGTH(pval);
      res := ival_0 >= 1;
    END IF;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'title' THEN
    pval := val -> 'title';
    -- .'$schema'.title
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'description' THEN
    pval := val -> 'description';
    -- .'$schema'.description
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'format' THEN
    pval := val -> 'format';
    -- .'$schema'.format
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'contentEncoding' THEN
    pval := val -> 'contentEncoding';
    -- .'$schema'.contentEncoding
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'maxDecimal' THEN
    pval := val -> 'maxDecimal';
    -- .'$schema'.maxDecimal
    res := JSONB_TYPEOF(pval) = 'number' AND (pval)::INT8 = (pval)::FLOAT8 AND (pval)::INT8 >= 0;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'disallow' THEN
    pval := val -> 'disallow';
    -- .'$schema'.disallow
    -- .'$schema'.disallow.'|'.0
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      -- .'$schema'.disallow.'|'.1
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_2_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_2_item := pval -> arr_2_idx;
          -- .'$schema'.disallow.'|'.1.0
          res := JSONB_TYPEOF(arr_2_item) = 'string';
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
    END IF;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'extends' THEN
    pval := val -> 'extends';
    -- .'$schema'.extends
    -- .'$schema'.extends.'|'.0
    res := json_model_3(pval, path, rep);
    IF NOT res THEN
      -- .'$schema'.extends.'|'.1
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_3_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_3_item := pval -> arr_3_idx;
          -- .'$schema'.extends.'|'.1.0
          res := json_model_3(arr_3_item, NULL, rep);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
    END IF;
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? 'id' THEN
    pval := val -> 'id';
    -- .'$schema'.id
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  IF val ? '$schema' THEN
    pval := val -> '$schema';
    -- .'$schema'.'$schema'
    res := JSONB_TYPEOF(pval) = 'string';
    IF NOT res THEN
      RETURN FALSE;
    END IF;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- check $schema (.'$schema')
CREATE OR REPLACE FUNCTION json_model_3(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- JSON Model for JSON Schema Draft 01 [JSON_MODEL_STRICT_INT, JSON_MODEL_LOOSE_FLOAT]
  -- .'$schema'
  res := _jm_obj_0(val, path, rep);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $ (.)
CREATE OR REPLACE FUNCTION json_model_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .
  res := json_model_3(val, path, rep);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION _jm_cst_0(value JSONB)
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  constants JSONB = JSONB '["null","boolean","integer","number","string","array","object","any"]';
BEGIN
  RETURN constants @> value;
END;
$$ LANGUAGE plpgsql;

-- check $schema#allTypes (.'$schema#allTypes')
CREATE OR REPLACE FUNCTION json_model_4(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$schema#allTypes'
  res := JSONB_TYPEOF(val) IN ('null', 'boolean', 'number', 'string') AND _jm_cst_0(val);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION check_model_map(name TEXT)
RETURNS TEXT STRICT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  map JSONB := JSONB '{"":"_jm_obj_0","schema":"_jm_obj_0"}';
BEGIN
  RETURN map->>name;
END;
$$ LANGUAGE plpgsql;

--
-- constant maps initialization
--
TRUNCATE jm_constant_maps;

--
-- JSON Model checking entry point
--
-- TODO INOUT rep?
CREATE OR REPLACE FUNCTION check_model(val JSONB, name TEXT, rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  fun TEXT;
BEGIN
  fun := check_model_map(name);
  IF fun IS NULL THEN
    RAISE EXCEPTION 'model for % not found', name;
  END IF;
  RETURN jm_call(fun, val, NULL, rep);
END;
$$ LANGUAGE plpgsql;
