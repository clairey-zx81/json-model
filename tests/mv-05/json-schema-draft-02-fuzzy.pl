#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_3($$$);
sub json_model_1($$$);
my %_jm_cst_0;
sub json_model_4($$$);
sub json_model_5($$$);
my %check_model_map;

# object .'$schema'.properties
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema'.properties.''
        $res = json_model_3($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$schema'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    # check must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'type'})
    {
        $pval = $$val{'type'};
        # .'$schema'.type
        # .'$schema'.type.'|'.0
        $res = json_model_4($pval, $path, $rep);
        if (! $res)
        {
            # .'$schema'.type.'|'.1
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_0_idx (0 .. $#$pval)
                {
                    my $arr_0_item = $$pval[$arr_0_idx];
                    # .'$schema'.type.'|'.1.0
                    # .'$schema'.type.'|'.1.0.'|'.0
                    $res = jm_is_string($arr_0_item);
                    if (! $res)
                    {
                        # .'$schema'.type.'|'.1.0.'|'.1
                        $res = json_model_3($arr_0_item, undef, $rep);
                    }
                    if (! $res)
                    {
                        last;
                    }
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'properties'})
    {
        $pval = $$val{'properties'};
        # .'$schema'.properties
        $res = _jm_obj_1($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'items'})
    {
        $pval = $$val{'items'};
        # .'$schema'.items
        # .'$schema'.items.'|'.0
        $res = json_model_3($pval, $path, $rep);
        if (! $res)
        {
            # .'$schema'.items.'|'.1
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_1_idx (0 .. $#$pval)
                {
                    my $arr_1_item = $$pval[$arr_1_idx];
                    # .'$schema'.items.'|'.1.0
                    $res = json_model_3($arr_1_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'optional'})
    {
        $pval = $$val{'optional'};
        # .'$schema'.optional
        $res = jm_is_boolean($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'additionalProperties'})
    {
        $pval = $$val{'additionalProperties'};
        # .'$schema'.additionalProperties
        # .'$schema'.additionalProperties.'|'.0
        $res = jm_is_boolean($pval);
        if (! $res)
        {
            # .'$schema'.additionalProperties.'|'.1
            $res = json_model_3($pval, $path, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'requires'})
    {
        $pval = $$val{'requires'};
        # .'$schema'.requires
        # .'$schema'.requires.'|'.0
        $res = jm_is_string($pval);
        if (! $res)
        {
            # .'$schema'.requires.'|'.1
            $res = json_model_3($pval, $path, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minimum'})
    {
        $pval = $$val{'minimum'};
        # .'$schema'.minimum
        $res = jm_is_numeric($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maximum'})
    {
        $pval = $$val{'maximum'};
        # .'$schema'.maximum
        $res = jm_is_numeric($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minimumCanEqual'})
    {
        $pval = $$val{'minimumCanEqual'};
        # .'$schema'.minimumCanEqual
        $res = jm_is_boolean($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maximumCanEqual'})
    {
        $pval = $$val{'maximumCanEqual'};
        # .'$schema'.maximumCanEqual
        $res = jm_is_boolean($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minItems'})
    {
        $pval = $$val{'minItems'};
        # .'$schema'.minItems
        $res = jm_is_integer($pval) && $pval >= 0;
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maxItems'})
    {
        $pval = $$val{'maxItems'};
        # .'$schema'.maxItems
        $res = jm_is_integer($pval) && $pval >= 0;
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'pattern'})
    {
        $pval = $$val{'pattern'};
        # .'$schema'.pattern
        $res = jm_is_string($pval) && jm_is_valid_regex($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minLength'})
    {
        $pval = $$val{'minLength'};
        # .'$schema'.minLength
        $res = jm_is_integer($pval) && $pval >= 0;
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maxLength'})
    {
        $pval = $$val{'maxLength'};
        # .'$schema'.maxLength
        $res = jm_is_integer($pval) && $pval >= 0;
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'enum'})
    {
        $pval = $$val{'enum'};
        # .'$schema'.enum
        # .'$schema'.enum.'@'
        $res = jm_is_array($pval);
        if ($res)
        {
            # accept any array
            ;
        }
        if ($res)
        {
            my $ival_0 = scalar @$pval;
            $res = jm_is_unique_array($pval, $path, $rep) && $ival_0 >= 1;
        }
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'uniqueItems'})
    {
        $pval = $$val{'uniqueItems'};
        # .'$schema'.uniqueItems
        $res = jm_is_boolean($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'title'})
    {
        $pval = $$val{'title'};
        # .'$schema'.title
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'description'})
    {
        $pval = $$val{'description'};
        # .'$schema'.description
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'format'})
    {
        $pval = $$val{'format'};
        # .'$schema'.format
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'contentEncoding'})
    {
        $pval = $$val{'contentEncoding'};
        # .'$schema'.contentEncoding
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'divisibleBy'})
    {
        $pval = $$val{'divisibleBy'};
        # .'$schema'.divisibleBy
        $res = jm_is_numeric($pval) && $pval > 0.0;
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'disallow'})
    {
        $pval = $$val{'disallow'};
        # .'$schema'.disallow
        # .'$schema'.disallow.'|'.0
        $res = jm_is_string($pval);
        if (! $res)
        {
            # .'$schema'.disallow.'|'.1
            $res = json_model_5($pval, $path, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'extends'})
    {
        $pval = $$val{'extends'};
        # .'$schema'.extends
        # .'$schema'.extends.'|'.0
        $res = json_model_3($pval, $path, $rep);
        if (! $res)
        {
            # .'$schema'.extends.'|'.1
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_2_idx (0 .. $#$pval)
                {
                    my $arr_2_item = $$pval[$arr_2_idx];
                    # .'$schema'.extends.'|'.1.0
                    $res = json_model_3($arr_2_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'id'})
    {
        $pval = $$val{'id'};
        # .'$schema'.id
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$schema'})
    {
        $pval = $$val{'$schema'};
        # .'$schema'.'$schema'
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $schema (.'$schema')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # JSON Model for JSON Schema Draft 02 [JSON_MODEL_STRICT_INT, JSON_MODEL_LOOSE_FLOAT]
    # .'$schema'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_3($val, $path, $rep);
    return $res;
}


# check $schema#allTypes (.'$schema#allTypes')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#allTypes'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_0{$val};
    return $res;
}

# check $schema#distinctStringArray (.'$schema#distinctStringArray')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#distinctStringArray'
    # .'$schema#distinctStringArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_3_idx (0 .. $#$val)
        {
            my $arr_3_item = $$val[$arr_3_idx];
            # .'$schema#distinctStringArray'.'@'.0
            $res = jm_is_string($arr_3_item);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        $res = jm_is_unique_array($val, $path, $rep);
    }
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            'null' => 1,
            'boolean' => 1,
            'integer' => 1,
            'number' => 1,
            'string' => 1,
            'array' => 1,
            'object' => 1,
            'any' => 1,
        );
        %check_model_map = (
            '' => \&json_model_3,
            'schema' => \&json_model_3,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
