--
-- Generated by JSON Model Compiler version 2
-- see https://github.com/clairey-zx81/json-model
--
-- JSON_MODEL_VERSION is 2
CREATE EXTENSION IF NOT EXISTS json_model;

-- check $foo (.'$foo')
CREATE OR REPLACE FUNCTION json_model_3(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- .'$foo'
  RETURN json_model_5(val, NULL, NULL);
END;
$$ LANGUAGE PLpgSQL;

-- check $ (.)
CREATE OR REPLACE FUNCTION json_model_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- .
  RETURN json_model_5(val, NULL, NULL);
END;
$$ LANGUAGE PLpgSQL;

-- check $foo#Foo (.'$foo#Foo')
CREATE OR REPLACE FUNCTION json_model_5(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- .'$foo#Foo'
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 1 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'rt' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'rt';
  -- .'$foo#Foo'.rt
  RETURN json_model_12(pval, NULL, NULL);
END;
$$ LANGUAGE PLpgSQL;

-- check $foo#root#root#Root (.'$foo#root#root#Root')
CREATE OR REPLACE FUNCTION json_model_12(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- .'$foo#root#root#Root'
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 2 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'id' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'id';
  -- .'$foo#root#root#Root'.id
  res := JSONB_TYPEOF(pval) = 'number' AND (pval)::INT8 = (pval)::FLOAT8 AND (pval)::INT8 = 1;
  IF NOT res THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'name' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'name';
  -- .'$foo#root#root#Root'.name
  RETURN JSONB_TYPEOF(pval) = 'string';
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION check_model_map(name TEXT)
RETURNS TEXT STRICT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  map JSONB := JSONB '{"":"json_model_5","foo":"json_model_5"}';
BEGIN
  RETURN map->>name;
END;
$$ LANGUAGE plpgsql;

--
-- constant maps initialization
--
TRUNCATE jm_constant_maps;

--
-- JSON Model checking entry point
--
-- TODO INOUT rep?
CREATE OR REPLACE FUNCTION check_model(val JSONB, name TEXT, rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  fun TEXT;
BEGIN
  fun := check_model_map(name);
  IF fun IS NULL THEN
    RAISE EXCEPTION 'model for % not found', name;
  END IF;
  RETURN jm_call(fun, val, NULL, rep);
END;
$$ LANGUAGE plpgsql;
