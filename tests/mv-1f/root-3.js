#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

var check_model_map = new Map()

// check $foo (.'$foo')
function json_model_3(val, path, rep)
{
    let res;
    // .'$foo'
    res = _jm_obj_0(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected $Foo [.'$foo']", path])
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = _jm_obj_0(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected $foo#Foo [.]", path])
    }
    return res;
}

// object .'$foo#Foo'
function _jm_obj_0(val, path, rep)
{
    // check close must only props
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'$foo#Foo']", path])
        return false;
    }
    if (Object.keys(val).length != 1)
    {
        rep !== null && rep.push(["bad property count [.'$foo#Foo']", path])
        return false;
    }
    let pval;
    let res;
    if (! val.hasOwnProperty("rt"))
    {
        rep !== null && rep.push(["missing mandatory prop <rt> [.'$foo#Foo']", path])
        return false;
    }
    pval = val["rt"];
    // .'$foo#Foo'.rt
    res = _jm_obj_1(pval, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected $root#Root [.'$foo#Foo'.rt]", path])
        rep !== null && rep.push(["unexpected value for mandatory prop <rt> [.'$foo#Foo']", path])
        return false;
    }
    return true;
}

// check $foo#Foo (.'$foo#Foo')
function json_model_5(val, path, rep)
{
    let res;
    // .'$foo#Foo'
    res = _jm_obj_0(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected element [.'$foo#Foo']", path])
    }
    return res;
}

// object .'$foo#root#root#Root'
function _jm_obj_1(val, path, rep)
{
    // check close must only props
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'$foo#root#root#Root']", path])
        return false;
    }
    if (Object.keys(val).length != 2)
    {
        rep !== null && rep.push(["bad property count [.'$foo#root#root#Root']", path])
        return false;
    }
    let pval;
    let res;
    if (! val.hasOwnProperty("id"))
    {
        rep !== null && rep.push(["missing mandatory prop <id> [.'$foo#root#root#Root']", path])
        return false;
    }
    pval = val["id"];
    // .'$foo#root#root#Root'.id
    res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval == 1;
    if (! res)
    {
        rep !== null && rep.push(["unexpected =1 [.'$foo#root#root#Root'.id]", path])
        rep !== null && rep.push(["unexpected value for mandatory prop <id> [.'$foo#root#root#Root']", path])
        return false;
    }
    if (! val.hasOwnProperty("name"))
    {
        rep !== null && rep.push(["missing mandatory prop <name> [.'$foo#root#root#Root']", path])
        return false;
    }
    pval = val["name"];
    // .'$foo#root#root#Root'.name
    res = (typeof pval === 'string' || pval instanceof String);
    if (! res)
    {
        rep !== null && rep.push(["unexpected string [.'$foo#root#root#Root'.name]", path])
        rep !== null && rep.push(["unexpected value for mandatory prop <name> [.'$foo#root#root#Root']", path])
        return false;
    }
    return true;
}

// check $foo#root#root#Root (.'$foo#root#root#Root')
function json_model_12(val, path, rep)
{
    let res;
    // .'$foo#root#root#Root'
    res = _jm_obj_1(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected element [.'$foo#root#root#Root']", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", _jm_obj_0)
        check_model_map.set("foo", _jm_obj_0)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
