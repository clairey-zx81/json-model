#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $root (.'$root')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$root'
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Root [.'$root']", path))
    return res

# check $Root (.'$Root')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Root'
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $root#Root [.'$Root']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Root [.]", path))
    return res

# check $root#Root (.'$root#Root')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$root#Root'
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$root#Root']", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'$root#Root']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("id", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <id> [.'$root#Root']", path))
        return False
    lpath = (path + [ "id" ]) if path is not None else None
    # .'$root#Root'.id
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval == 1
    if not res:
        rep is None or rep.append(("unexpected =1 [.'$root#Root'.id]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <id> [.'$root#Root']", lpath if path is not None else None))
        return False
    if not ((pval := val.get("name", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <name> [.'$root#Root']", path))
        return False
    lpath = (path + [ "name" ]) if path is not None else None
    # .'$root#Root'.name
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$root#Root'.name]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <name> [.'$root#Root']", lpath if path is not None else None))
        return False
    return True


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_5,
            "root": json_model_5,
            "Root": json_model_5,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
