//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class alts_1 extends ModelChecker
{
    static public final String VERSION = "2";

    Set<Object> _jm_cst_0_set;
    Map<Object, Checker> _jm_map_0_cmap;
    Set<Object> _jm_cst_1_set;
    public Map<String, Checker> alts_1_map_pmap;

    // object .'$oA'
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        // check open must/may only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$oA']", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "v")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <v> [.'$oA']", path);
            return false;
        }
        lpath = new Path("v", path);
        // .'$oA'.v
        res = json.isInteger(pval) && json.asLong(pval) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.'$oA'.v]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <v> [.'$oA']", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'$oA']", path);
            return false;
        }
        lpath = new Path("t", path);
        // .'$oA'.t
        res = json.isString(pval) && json.asString(pval).compareTo("a") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _a [.'$oA'.t]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'$oA']", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check $oA (.'$oA')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$oA'
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$oA']", path);
        }
        return res;
    }


    // object .'$oB'
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        // check open must/may only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$oB']", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "v")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <v> [.'$oB']", path);
            return false;
        }
        lpath = new Path("v", path);
        // .'$oB'.v
        res = json.isInteger(pval) && json.asLong(pval) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.'$oB'.v]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <v> [.'$oB']", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'$oB']", path);
            return false;
        }
        lpath = new Path("t", path);
        // .'$oB'.t
        res = json.isScalar(pval) && _jm_cst_0_set.contains(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("value not in enum [.'$oB'.t.'|']", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'$oB']", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check $oB (.'$oB')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$oB'
        res = _jm_obj_1(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$oB']", path);
        }
        return res;
    }


    // check $oC (.'$oC')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$oC'
        boolean iso_0 = json.isObject(val);
        res = iso_0;
        if (res)
        {
            if (json.objectHasProp(val, "t"))
            {
                Object tag_0 = json.objectValue(val, "t");
                Checker fun_0 = _jm_map_0_cmap.get(tag_0);
                if (fun_0 != null)
                {
                    res = fun_0.call(val, path, rep);
                }
                else
                {
                    res = false;
                    if (rep != null) rep.addEntry("tag <t> value not found [.'$oC'.'|']", path);
                }
            }
            else
            {
                res = false;
                if (rep != null) rep.addEntry("tag prop <t> is missing [.'$oC'.'|']", path);
            }
        }
        else
        {
            if (rep != null) rep.addEntry("value is not an object [.'$oC'.'|']", path);
        }
        return res;
    }

    // object .'$oL'
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        // check open must/may only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$oL']", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "v")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <v> [.'$oL']", path);
            return false;
        }
        lpath = new Path("v", path);
        // .'$oL'.v
        res = json.isInteger(pval) && json.asLong(pval) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.'$oL'.v]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <v> [.'$oL']", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'$oL']", path);
            return false;
        }
        lpath = new Path("t", path);
        // .'$oL'.t
        res = json.isString(pval) && json.asString(pval).compareTo("d") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected _d [.'$oL'.t]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'$oL']", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check $oL (.'$oL')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$oL'
        res = _jm_obj_2(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$oL']", path);
        }
        return res;
    }


    // object .'$oX'
    public boolean _jm_obj_3(Object val, Path path, Report rep)
    {
        // check open must/may only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$oX']", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "v")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <v> [.'$oX']", path);
            return false;
        }
        lpath = new Path("v", path);
        // .'$oX'.v
        res = json.isInteger(pval) && json.asLong(pval) >= 1;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 1 strict int [.'$oX'.v]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <v> [.'$oX']", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'$oX']", path);
            return false;
        }
        lpath = new Path("t", path);
        // .'$oX'.t
        res = json.isScalar(pval) && _jm_cst_1_set.contains(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("value not in enum [.'$oX'.t.'|']", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'$oX']", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check $oX (.'$oX')
    public boolean json_model_6(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$oX'
        res = _jm_obj_3(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$oX']", path);
        }
        return res;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        // generic xor list
        long xc_0 = 0;
        boolean xr_0;
        // .'^'.0
        xr_0 = _jm_obj_0(val, path, rep);
        if (xr_0)
        {
            xc_0 += 1;
        }
        else
        {
            if (rep != null) rep.addEntry("unexpected $oA [.'^'.0]", path);
        }
        // .'^'.1
        xr_0 = _jm_obj_1(val, path, rep);
        if (xr_0)
        {
            xc_0 += 1;
        }
        else
        {
            if (rep != null) rep.addEntry("unexpected $oB [.'^'.1]", path);
        }
        if (xc_0 <= 1)
        {
            // .'^'.2
            xr_0 = json_model_4(val, path, rep);
            if (xr_0)
            {
                xc_0 += 1;
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected $oC [.'^'.2]", path);
            }
        }
        res = xc_0 == 1;
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("not one model match [.'^']", path);
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_cst_0_set = new HashSet<Object>();
            _jm_cst_0_set.add(json.safeJSON("\"b\""));
            _jm_cst_0_set.add(json.safeJSON("\"c\""));
            _jm_map_0_cmap = new HashMap<Object, Checker>();
            _jm_map_0_cmap.put(json.safeJSON("\"e\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_3(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"f\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_3(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"d\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_2(o, p, r);} });
            _jm_cst_1_set = new HashSet<Object>();
            _jm_cst_1_set.add(json.safeJSON("\"e\""));
            _jm_cst_1_set.add(json.safeJSON("\"f\""));
            alts_1_map_pmap = new HashMap<String, Checker>();
            alts_1_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            alts_1_map_pmap.put("oA", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_0(o, p, r);} });
            alts_1_map_pmap.put("oB", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_1(o, p, r);} });
            alts_1_map_pmap.put("oC", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            alts_1_map_pmap.put("oL", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_2(o, p, r);} });
            alts_1_map_pmap.put("oX", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_3(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_cst_0_set = null;
            _jm_map_0_cmap = null;
            _jm_cst_1_set = null;
            alts_1_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return alts_1_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return alts_1_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new alts_1();
        Main.main("alts_1", checker, VERSION, args);
    }
}
