#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
_jm_cst_1: set[str]
_jm_map_0: dict[str, str]
_jm_cst_2: set[str]
_jm_cst_3: set[str]
_jm_cst_4: set[str]
_jm_map_1: dict[str, str]
check_model_map: PropMap

# object .'$oA'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$oA']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not "v" in val:
        rep is None or rep.append(("missing mandatory prop <v> [.'$oA']", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    pval = val.get("v", UNDEFINED)
    # .'$oA'.v
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'$oA'.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'$oA']", lpath if path is not None else None))
        return False
    if not "t" in val:
        rep is None or rep.append(("missing mandatory prop <t> [.'$oA']", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    pval = val.get("t", UNDEFINED)
    # .'$oA'.t
    res = isinstance(pval, str) and pval == "a"
    if not res:
        rep is None or rep.append(("unexpected _a [.'$oA'.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'$oA']", lpath if path is not None else None))
        return False
    return True

# check $oA (.'$oA')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$oA'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$oA']", path))
    return res


# object .'$oB'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$oB']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not "v" in val:
        rep is None or rep.append(("missing mandatory prop <v> [.'$oB']", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    pval = val.get("v", UNDEFINED)
    # .'$oB'.v
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'$oB'.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'$oB']", lpath if path is not None else None))
        return False
    if not "t" in val:
        rep is None or rep.append(("missing mandatory prop <t> [.'$oB']", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    pval = val.get("t", UNDEFINED)
    # .'$oB'.t
    res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$oB'.t.'|']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'$oB']", lpath if path is not None else None))
        return False
    return True

# check $oB (.'$oB')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$oB'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$oB']", path))
    return res


# object .'$oC'.'|'.0
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$oC'.'|'.0]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not "v" in val:
        rep is None or rep.append(("missing mandatory prop <v> [.'$oC'.'|'.0]", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    pval = val.get("v", UNDEFINED)
    # .'$oC'.'|'.0.v
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'$oC'.'|'.0.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'$oC'.'|'.0]", lpath if path is not None else None))
        return False
    if not "t" in val:
        rep is None or rep.append(("missing mandatory prop <t> [.'$oC'.'|'.0]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    pval = val.get("t", UNDEFINED)
    # .'$oC'.'|'.0.t
    res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_1
    if not res:
        rep is None or rep.append(("value not in enum [.'$oC'.'|'.0.t.'|']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'$oC'.'|'.0]", lpath if path is not None else None))
        return False
    return True

# object .'$oC'.'|'.1
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$oC'.'|'.1]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not "v" in val:
        rep is None or rep.append(("missing mandatory prop <v> [.'$oC'.'|'.1]", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    pval = val.get("v", UNDEFINED)
    # .'$oC'.'|'.1.v
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'$oC'.'|'.1.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'$oC'.'|'.1]", lpath if path is not None else None))
        return False
    if not "t" in val:
        rep is None or rep.append(("missing mandatory prop <t> [.'$oC'.'|'.1]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    pval = val.get("t", UNDEFINED)
    # .'$oC'.'|'.1.t
    res = isinstance(pval, str) and pval == "d"
    if not res:
        rep is None or rep.append(("unexpected _d [.'$oC'.'|'.1.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'$oC'.'|'.1]", lpath if path is not None else None))
        return False
    return True


# check $oC (.'$oC')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$oC'
    iso_0: bool = isinstance(val, dict)
    res = iso_0
    if res:
        if "t" in val:
            tag_0: Jsonable = val.get("t", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <t> value not found [.'$oC'.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <t> is missing [.'$oC'.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'$oC'.'|']", path))
    return res

# object .'$oL'
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$oL']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not "v" in val:
        rep is None or rep.append(("missing mandatory prop <v> [.'$oL']", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    pval = val.get("v", UNDEFINED)
    # .'$oL'.v
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'$oL'.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'$oL']", lpath if path is not None else None))
        return False
    if not "t" in val:
        rep is None or rep.append(("missing mandatory prop <t> [.'$oL']", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    pval = val.get("t", UNDEFINED)
    # .'$oL'.t
    res = isinstance(pval, str) and pval == "d"
    if not res:
        rep is None or rep.append(("unexpected _d [.'$oL'.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'$oL']", lpath if path is not None else None))
        return False
    return True

# check $oL (.'$oL')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$oL'
    res = _jm_obj_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$oL']", path))
    return res


# object .'$oX'
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$oX']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not "v" in val:
        rep is None or rep.append(("missing mandatory prop <v> [.'$oX']", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    pval = val.get("v", UNDEFINED)
    # .'$oX'.v
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'$oX'.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'$oX']", lpath if path is not None else None))
        return False
    if not "t" in val:
        rep is None or rep.append(("missing mandatory prop <t> [.'$oX']", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    pval = val.get("t", UNDEFINED)
    # .'$oX'.t
    res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_2
    if not res:
        rep is None or rep.append(("value not in enum [.'$oX'.t.'|']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'$oX']", lpath if path is not None else None))
        return False
    return True

# check $oX (.'$oX')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$oX'
    res = _jm_obj_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$oX']", path))
    return res

# object .'|'.0
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.0]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not "v" in val:
        rep is None or rep.append(("missing mandatory prop <v> [.'|'.0]", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    pval = val.get("v", UNDEFINED)
    # .'|'.0.v
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'|'.0.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'|'.0]", lpath if path is not None else None))
        return False
    if not "t" in val:
        rep is None or rep.append(("missing mandatory prop <t> [.'|'.0]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    pval = val.get("t", UNDEFINED)
    # .'|'.0.t
    res = isinstance(pval, str) and pval == "a"
    if not res:
        rep is None or rep.append(("unexpected _a [.'|'.0.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'|'.0]", lpath if path is not None else None))
        return False
    return True


# object .'|'.1
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.1]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not "v" in val:
        rep is None or rep.append(("missing mandatory prop <v> [.'|'.1]", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    pval = val.get("v", UNDEFINED)
    # .'|'.1.v
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'|'.1.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'|'.1]", lpath if path is not None else None))
        return False
    if not "t" in val:
        rep is None or rep.append(("missing mandatory prop <t> [.'|'.1]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    pval = val.get("t", UNDEFINED)
    # .'|'.1.t
    res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_3
    if not res:
        rep is None or rep.append(("value not in enum [.'|'.1.t.'|']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'|'.1]", lpath if path is not None else None))
        return False
    return True


# object .'|'.2
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.2]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not "v" in val:
        rep is None or rep.append(("missing mandatory prop <v> [.'|'.2]", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    pval = val.get("v", UNDEFINED)
    # .'|'.2.v
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'|'.2.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'|'.2]", lpath if path is not None else None))
        return False
    if not "t" in val:
        rep is None or rep.append(("missing mandatory prop <t> [.'|'.2]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    pval = val.get("t", UNDEFINED)
    # .'|'.2.t
    res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_4
    if not res:
        rep is None or rep.append(("value not in enum [.'|'.2.t.'|']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'|'.2]", lpath if path is not None else None))
        return False
    return True

# object .'|'.3
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.3]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not "v" in val:
        rep is None or rep.append(("missing mandatory prop <v> [.'|'.3]", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    pval = val.get("v", UNDEFINED)
    # .'|'.3.v
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'|'.3.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'|'.3]", lpath if path is not None else None))
        return False
    if not "t" in val:
        rep is None or rep.append(("missing mandatory prop <t> [.'|'.3]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    pval = val.get("t", UNDEFINED)
    # .'|'.3.t
    res = isinstance(pval, str) and pval == "d"
    if not res:
        rep is None or rep.append(("unexpected _d [.'|'.3.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'|'.3]", lpath if path is not None else None))
        return False
    return True


# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    iso_1: bool = isinstance(val, dict)
    res = iso_1
    if res:
        if "t" in val:
            tag_1: Jsonable = val.get("t", UNDEFINED)
            fun_1: CheckFun = _jm_map_1.get(tag_1, UNDEFINED)
            if fun_1 != UNDEFINED:
                res = fun_1(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <t> value not found [.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <t> is missing [.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'b', 'c'}
        global _jm_cst_1
        _jm_cst_1 = {'e', 'f'}
        global _jm_map_0
        _jm_map_0 = {
            "e": _jm_obj_2,
            "f": _jm_obj_2,
            "d": _jm_obj_3,
        }
        global _jm_cst_2
        _jm_cst_2 = {'e', 'f'}
        global _jm_cst_3
        _jm_cst_3 = {'b', 'c'}
        global _jm_cst_4
        _jm_cst_4 = {'e', 'f'}
        global _jm_map_1
        _jm_map_1 = {
            "a": _jm_obj_6,
            "b": _jm_obj_7,
            "c": _jm_obj_7,
            "e": _jm_obj_8,
            "f": _jm_obj_8,
            "d": _jm_obj_9,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "oA": _jm_obj_0,
            "oB": _jm_obj_1,
            "oC": json_model_4,
            "oL": _jm_obj_4,
            "oX": _jm_obj_5,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
