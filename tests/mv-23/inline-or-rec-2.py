#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_map_0: dict[str, str]
_jm_map_1: dict[str, str]
check_model_map: PropMap

# object .'$ab'.'|'.0
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ab'.'|'.0]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'$ab'.'|'.0]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <t> [.'$ab'.'|'.0]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    # .'$ab'.'|'.0.t
    res = isinstance(pval, str) and pval == "a"
    if not res:
        rep is None or rep.append(("unexpected a [.'$ab'.'|'.0.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'$ab'.'|'.0]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("a", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <a> [.'$ab'.'|'.0]", path))
        return False
    lpath = (path + [ "a" ]) if path is not None else None
    # .'$ab'.'|'.0.a
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'$ab'.'|'.0.a]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <a> [.'$ab'.'|'.0]", lpath if path is not None else None))
        return False
    return True

# object .'$ab'.'|'.1
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ab'.'|'.1]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'$ab'.'|'.1]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <t> [.'$ab'.'|'.1]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    # .'$ab'.'|'.1.t
    res = isinstance(pval, str) and pval == "b"
    if not res:
        rep is None or rep.append(("unexpected b [.'$ab'.'|'.1.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'$ab'.'|'.1]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("b", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <b> [.'$ab'.'|'.1]", path))
        return False
    lpath = (path + [ "b" ]) if path is not None else None
    # .'$ab'.'|'.1.b
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'$ab'.'|'.1.b]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <b> [.'$ab'.'|'.1]", lpath if path is not None else None))
        return False
    return True


# check $ab (.'$ab')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ab'
    iso_0: bool = isinstance(val, dict)
    res = iso_0
    if res:
        if "t" in val:
            tag_0: Jsonable = val.get("t", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <t> value not found [.'$ab'.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <t> is missing [.'$ab'.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'$ab'.'|']", path))
    return res

# object .'$cd'.'|'.0
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$cd'.'|'.0]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'$cd'.'|'.0]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <t> [.'$cd'.'|'.0]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    # .'$cd'.'|'.0.t
    res = isinstance(pval, str) and pval == "c"
    if not res:
        rep is None or rep.append(("unexpected c [.'$cd'.'|'.0.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'$cd'.'|'.0]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("c", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <c> [.'$cd'.'|'.0]", path))
        return False
    lpath = (path + [ "c" ]) if path is not None else None
    # .'$cd'.'|'.0.c
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'$cd'.'|'.0.c]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <c> [.'$cd'.'|'.0]", lpath if path is not None else None))
        return False
    return True

# object .'$cd'.'|'.1
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$cd'.'|'.1]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'$cd'.'|'.1]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <t> [.'$cd'.'|'.1]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    # .'$cd'.'|'.1.t
    res = isinstance(pval, str) and pval == "d"
    if not res:
        rep is None or rep.append(("unexpected d [.'$cd'.'|'.1.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'$cd'.'|'.1]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("d", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <d> [.'$cd'.'|'.1]", path))
        return False
    lpath = (path + [ "d" ]) if path is not None else None
    # .'$cd'.'|'.1.d
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [.'$cd'.'|'.1.d]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <d> [.'$cd'.'|'.1]", lpath if path is not None else None))
        return False
    return True


# check $cd (.'$cd')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$cd'
    iso_1: bool = isinstance(val, dict)
    res = iso_1
    if res:
        if "t" in val:
            tag_1: Jsonable = val.get("t", UNDEFINED)
            fun_1: CheckFun = _jm_map_1.get(tag_1, UNDEFINED)
            if fun_1 != UNDEFINED:
                res = fun_1(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <t> value not found [.'$cd'.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <t> is missing [.'$cd'.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'$cd'.'|']", path))
    if not res:
        res = json_model_2(val, path, rep)
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $cd [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_map_0
        _jm_map_0 = {
            "a": _jm_obj_0,
            "b": _jm_obj_1,
        }
        global _jm_map_1
        _jm_map_1 = {
            "c": _jm_obj_2,
            "d": _jm_obj_3,
        }
        global check_model_map
        check_model_map = {
            "": json_model_3,
            "ab": json_model_2,
            "cd": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
