# Generated for model: ./obj_03.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_date(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            datetime.date.fromisoformat(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False


# define "$foo" ($.foo)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.foo
    result = json_model_2(value, path)
    return result

# define "$./obj_02" ($.'$./obj_02')
def json_model_2(value: Jsonable, path: str) -> bool:
    # $.'$./obj_02'
    # $.'$./obj_02'.'|'.0
    result = json_model_3(value, path)
    if not result:
        # $.'$./obj_02'.'|'.1
        result = json_model_4(value, path)
        if not result:
            # $.'$./obj_02'.'|'.2
            result = json_model_5(value, path)
            if not result:
                # $.'$./obj_02'.'|'.3
                result = json_model_6(value, path)
    return result

# define "$#foo#li0" ($.'$#foo#li0')
def json_model_3(value: Jsonable, path: str) -> bool:
    # $.'$#foo#li0'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_0_idx, array_0_item in enumerate(value):
            # $.'$#foo#li0'.0
            result = isinstance(array_0_item, int) and not isinstance(array_0_item, bool) and array_0_item >= 0
            if not result: break
    return result

# define "$#foo#ls0" ($.'$#foo#ls0')
def json_model_4(value: Jsonable, path: str) -> bool:
    # $.'$#foo#ls0'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_1_idx, array_1_item in enumerate(value):
            # $.'$#foo#ls0'.0
            result = is_valid_date(array_1_item, path)
            if not result: break
    return result

# define "$#foo#lb0" ($.'$#foo#lb0')
def json_model_5(value: Jsonable, path: str) -> bool:
    # $.'$#foo#lb0'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_2_idx, array_2_item in enumerate(value):
            # $.'$#foo#lb0'.0
            result = isinstance(array_2_item, bool)
            if not result: break
    return result

# define "$#foo#lf0" ($.'$#foo#lf0')
def json_model_6(value: Jsonable, path: str) -> bool:
    # $.'$#foo#lf0'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_3_idx, array_3_item in enumerate(value):
            # $.'$#foo#lf0'.0
            result = isinstance(array_3_item, float) and array_3_item >= 0.0
            if not result: break
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = json_model_4(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


