#! /bin/env python
#
# Model: ./obj_03.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False


def _is_valid_url(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except Exception as e:
            rep is None or re.append(f"invalid url at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for url at {path}: {_tname(value)}")
    return False

# define "$foo" ($.'$foo')
def json_model_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$foo'
    # $.'$foo'.'|'.0
    result = json_model_9(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $li0 at {path} [$.'$foo'.'|'.0]")
    if not result:
        # $.'$foo'.'|'.1
        result = json_model_10(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $ls0 at {path} [$.'$foo'.'|'.1]")
        if not result:
            # $.'$foo'.'|'.2
            result = json_model_11(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $lb0 at {path} [$.'$foo'.'|'.2]")
            if not result:
                # $.'$foo'.'|'.3
                result = json_model_12(value, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected $lf0 at {path} [$.'$foo'.'|'.3]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$foo'.'|']")
    return result

# define "$foo#li0" ($.'$foo#li0')
def json_model_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$foo#li0'
    result = isinstance(value, list)
    if result:
        for array_0_idx, array_0_item in enumerate(value):
            lpath = path + '.' + str(array_0_idx)
            # $.'$foo#li0'.0
            result = isinstance(array_0_item, int) and not isinstance(array_0_item, bool) and array_0_item >= 0
            if not result:
                rep is None or rep.append(f"not a 0 int at {lpath} [$.'$foo#li0'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$foo#li0']")
    return result

# define "$foo#ls0" ($.'$foo#ls0')
def json_model_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$foo#ls0'
    result = isinstance(value, list)
    if result:
        for array_1_idx, array_1_item in enumerate(value):
            lpath = path + '.' + str(array_1_idx)
            # $.'$foo#ls0'.0
            result = _is_valid_url(array_1_item, path, rep) or _rep(f"invalid $URL at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $URL at {lpath} [$.'$foo#ls0'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$foo#ls0']")
    return result

# define "$foo#lb0" ($.'$foo#lb0')
def json_model_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$foo#lb0'
    result = isinstance(value, list)
    if result:
        for array_2_idx, array_2_item in enumerate(value):
            lpath = path + '.' + str(array_2_idx)
            # $.'$foo#lb0'.0
            result = isinstance(array_2_item, bool) or _rep(f"invalid $BOOL at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $BOOL at {lpath} [$.'$foo#lb0'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$foo#lb0']")
    return result

# define "$foo#lf0" ($.'$foo#lf0')
def json_model_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$foo#lf0'
    result = isinstance(value, list)
    if result:
        for array_3_idx, array_3_item in enumerate(value):
            lpath = path + '.' + str(array_3_idx)
            # $.'$foo#lf0'.0
            result = isinstance(array_3_item, float) and array_3_item >= 0.0
            if not result:
                rep is None or rep.append(f"not a 0.0 float at {lpath} [$.'$foo#lf0'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$foo#lf0']")
    return result

# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = json_model_10(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $foo#ls0 at {path} [$]")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

