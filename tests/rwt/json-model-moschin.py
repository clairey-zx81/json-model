# Generated for model: ./json-model-moschin.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

jm_obj_0_must: PropMap
jm_obj_0_may: PropMap
# regex "/^(<=|>=|<|>|\u2265|\u2264)$/"
jm_re_0 = re.compile("^(<=|>=|<|>|\u2265|\u2264)$").search
# regex "/^(=|!=|\u2260)$/"
jm_re_1 = re.compile("^(=|!=|\u2260)$").search
jm_obj_1_must: PropMap
jm_obj_1_may: PropMap
jm_obj_2_must: PropMap
jm_obj_2_may: PropMap
jm_obj_3_must: PropMap
jm_obj_3_may: PropMap
jm_obj_4_must: PropMap
jm_obj_4_may: PropMap
jm_obj_5_may: PropMap
# regex "/^[@|&^+/*]$/"
jm_re_2 = re.compile("^[@|&^+/*]$").search
jm_obj_7_must: PropMap
jm_obj_7_may: PropMap
jm_f_22_may: PropMap
# regex "/.+/"
jm_re_3 = re.compile(".+").search
jm_f_26_may: PropMap
# regex "/^\\..*$/"
jm_re_4 = re.compile("^\\..*$").search
# regex "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
jm_re_5 = re.compile("^([#|&^+/*@~<>=!$%]|<=|>=|!=)$").search
# regex "/^\\$.*$/"
jm_re_6 = re.compile("^\\$.*$").search
jm_obj_8_must: PropMap
jm_obj_8_may: PropMap
jm_f_36_may: PropMap
jm_f_40_may: PropMap
jm_obj_9_must: PropMap
jm_obj_9_may: PropMap
jm_f_47_may: PropMap
jm_f_51_may: PropMap
jm_obj_10_must: PropMap
jm_obj_10_may: PropMap
jm_f_58_may: PropMap
jm_f_62_may: PropMap
jm_obj_11_must: PropMap
jm_obj_11_may: PropMap
jm_f_69_may: PropMap
jm_f_73_may: PropMap
jm_obj_12_may: PropMap
jm_f_79_may: PropMap
jm_f_83_may: PropMap
# regex "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
jm_re_7 = re.compile("^((file|https?)://.+|\\./.*|\\.\\./.*)$").search
jm_obj_13_must: PropMap
jm_obj_13_may: PropMap
jm_obj_15_must: PropMap
jm_obj_15_may: PropMap

# define "jm_obj_0_must_@" ($.'$#Model#Elem'.'|'.0.'@')
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.0.'@'
    result = json_model_40(value, path)
    return result

# define "jm_obj_0_may_#" ($.'$#Model#Elem'.'|'.0.'#')
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.0.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_0_may_!" ($.'$#Model#Elem'.'|'.0.'!')
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.0.'!'
    result = isinstance(value, bool)
    return result

# define "jm_obj_0_may_.mo" ($.'$#Model#Elem'.'|'.0.'.mo')
def jm_f_4(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.0.'.mo'
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 1
    return result

# define "jm_obj_0_may_.in" ($.'$#Model#Elem'.'|'.0.'.in')
def jm_f_5(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.0.'.in'
    result = json_model_40(value, path)
    return result

# define "jm_obj_1_must_|" ($.'$#Model#Elem'.'|'.1.'|')
def jm_f_6(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.1.'|'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_1_idx, array_1_item in enumerate(value):
            # $.'$#Model#Elem'.'|'.1.'|'.0
            result = json_model_40(array_1_item, path)
            if not result: break
    return result

# define "jm_obj_1_may_#" ($.'$#Model#Elem'.'|'.1.'#')
def jm_f_7(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.1.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_2_must_&" ($.'$#Model#Elem'.'|'.2.'&')
def jm_f_9(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.2.'&'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_2_idx, array_2_item in enumerate(value):
            # $.'$#Model#Elem'.'|'.2.'&'.0
            result = json_model_40(array_2_item, path)
            if not result: break
    return result

# define "jm_obj_2_may_#" ($.'$#Model#Elem'.'|'.2.'#')
def jm_f_10(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.2.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_3_must_^" ($.'$#Model#Elem'.'|'.3.'^')
def jm_f_12(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.3.'^'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_3_idx, array_3_item in enumerate(value):
            # $.'$#Model#Elem'.'|'.3.'^'.0
            result = json_model_40(array_3_item, path)
            if not result: break
    return result

# define "jm_obj_3_may_#" ($.'$#Model#Elem'.'|'.3.'#')
def jm_f_13(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.3.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_4_must_+" ($.'$#Model#Elem'.'|'.4.'+')
def jm_f_15(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.4.'+'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_4_idx, array_4_item in enumerate(value):
            # $.'$#Model#Elem'.'|'.4.'+'.0
            result = json_model_40(array_4_item, path)
            if not result: break
    return result

# define "jm_obj_4_may_#" ($.'$#Model#Elem'.'|'.4.'#')
def jm_f_16(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.4.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_5_may_#" ($.'$#Model#Elem'.'|'.5.'#')
def jm_f_18(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'.'|'.5.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_7_must_@" ($.'$#Model#Root'.'|'.0.'@')
def jm_f_20(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.0.'@'
    result = json_model_40(value, path)
    return result

# define "jm_obj_7_may_~" ($.'$#Model#Root'.'|'.0.'~')
def jm_f_21(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.0.'~'
    result = json_model_25(value, path)
    return result

# define "jm_f_22_may_#" ($.'$#Model#Root'.'|'.0.'$'.'#')
def jm_f_23(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.0.'$'.'#'
    result = isinstance(value, str)
    return result



# define "jm_f_22_may_" ($.'$#Model#Root'.'|'.0.'$'.'')
def jm_f_25(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.0.'$'.''
    result = json_model_25(value, path)
    return result



# define "jm_f_26_may_#" ($.'$#Model#Root'.'|'.0.'%'.'#')
def jm_f_27(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.0.'%'.'#'
    result = isinstance(value, str)
    return result





# define "jm_obj_7_may_#" ($.'$#Model#Root'.'|'.0.'#')
def jm_f_29(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.0.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_7_may_!" ($.'$#Model#Root'.'|'.0.'!')
def jm_f_31(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.0.'!'
    result = isinstance(value, bool)
    return result

# define "jm_obj_7_may_.mo" ($.'$#Model#Root'.'|'.0.'.mo')
def jm_f_32(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.0.'.mo'
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 1
    return result

# define "jm_obj_7_may_.in" ($.'$#Model#Root'.'|'.0.'.in')
def jm_f_33(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.0.'.in'
    result = json_model_40(value, path)
    return result

# define "jm_obj_8_must_|" ($.'$#Model#Root'.'|'.1.'|')
def jm_f_34(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.1.'|'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_6_idx, array_6_item in enumerate(value):
            # $.'$#Model#Root'.'|'.1.'|'.0
            result = json_model_40(array_6_item, path)
            if not result: break
    return result

# define "jm_obj_8_may_~" ($.'$#Model#Root'.'|'.1.'~')
def jm_f_35(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.1.'~'
    result = json_model_25(value, path)
    return result

# define "jm_f_36_may_#" ($.'$#Model#Root'.'|'.1.'$'.'#')
def jm_f_37(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.1.'$'.'#'
    result = isinstance(value, str)
    return result



# define "jm_f_36_may_" ($.'$#Model#Root'.'|'.1.'$'.'')
def jm_f_39(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.1.'$'.''
    result = json_model_25(value, path)
    return result



# define "jm_f_40_may_#" ($.'$#Model#Root'.'|'.1.'%'.'#')
def jm_f_41(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.1.'%'.'#'
    result = isinstance(value, str)
    return result





# define "jm_obj_8_may_#" ($.'$#Model#Root'.'|'.1.'#')
def jm_f_43(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.1.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_9_must_&" ($.'$#Model#Root'.'|'.2.'&')
def jm_f_45(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.2.'&'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_7_idx, array_7_item in enumerate(value):
            # $.'$#Model#Root'.'|'.2.'&'.0
            result = json_model_40(array_7_item, path)
            if not result: break
    return result

# define "jm_obj_9_may_~" ($.'$#Model#Root'.'|'.2.'~')
def jm_f_46(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.2.'~'
    result = json_model_25(value, path)
    return result

# define "jm_f_47_may_#" ($.'$#Model#Root'.'|'.2.'$'.'#')
def jm_f_48(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.2.'$'.'#'
    result = isinstance(value, str)
    return result



# define "jm_f_47_may_" ($.'$#Model#Root'.'|'.2.'$'.'')
def jm_f_50(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.2.'$'.''
    result = json_model_25(value, path)
    return result



# define "jm_f_51_may_#" ($.'$#Model#Root'.'|'.2.'%'.'#')
def jm_f_52(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.2.'%'.'#'
    result = isinstance(value, str)
    return result





# define "jm_obj_9_may_#" ($.'$#Model#Root'.'|'.2.'#')
def jm_f_54(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.2.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_10_must_^" ($.'$#Model#Root'.'|'.3.'^')
def jm_f_56(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.3.'^'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_8_idx, array_8_item in enumerate(value):
            # $.'$#Model#Root'.'|'.3.'^'.0
            result = json_model_40(array_8_item, path)
            if not result: break
    return result

# define "jm_obj_10_may_~" ($.'$#Model#Root'.'|'.3.'~')
def jm_f_57(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.3.'~'
    result = json_model_25(value, path)
    return result

# define "jm_f_58_may_#" ($.'$#Model#Root'.'|'.3.'$'.'#')
def jm_f_59(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.3.'$'.'#'
    result = isinstance(value, str)
    return result



# define "jm_f_58_may_" ($.'$#Model#Root'.'|'.3.'$'.'')
def jm_f_61(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.3.'$'.''
    result = json_model_25(value, path)
    return result



# define "jm_f_62_may_#" ($.'$#Model#Root'.'|'.3.'%'.'#')
def jm_f_63(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.3.'%'.'#'
    result = isinstance(value, str)
    return result





# define "jm_obj_10_may_#" ($.'$#Model#Root'.'|'.3.'#')
def jm_f_65(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.3.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_11_must_+" ($.'$#Model#Root'.'|'.4.'+')
def jm_f_67(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.4.'+'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_9_idx, array_9_item in enumerate(value):
            # $.'$#Model#Root'.'|'.4.'+'.0
            result = json_model_40(array_9_item, path)
            if not result: break
    return result

# define "jm_obj_11_may_~" ($.'$#Model#Root'.'|'.4.'~')
def jm_f_68(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.4.'~'
    result = json_model_25(value, path)
    return result

# define "jm_f_69_may_#" ($.'$#Model#Root'.'|'.4.'$'.'#')
def jm_f_70(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.4.'$'.'#'
    result = isinstance(value, str)
    return result



# define "jm_f_69_may_" ($.'$#Model#Root'.'|'.4.'$'.'')
def jm_f_72(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.4.'$'.''
    result = json_model_25(value, path)
    return result



# define "jm_f_73_may_#" ($.'$#Model#Root'.'|'.4.'%'.'#')
def jm_f_74(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.4.'%'.'#'
    result = isinstance(value, str)
    return result





# define "jm_obj_11_may_#" ($.'$#Model#Root'.'|'.4.'#')
def jm_f_76(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.4.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_12_may_~" ($.'$#Model#Root'.'|'.5.'~')
def jm_f_78(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.5.'~'
    result = json_model_25(value, path)
    return result

# define "jm_f_79_may_#" ($.'$#Model#Root'.'|'.5.'$'.'#')
def jm_f_80(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.5.'$'.'#'
    result = isinstance(value, str)
    return result



# define "jm_f_79_may_" ($.'$#Model#Root'.'|'.5.'$'.'')
def jm_f_82(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.5.'$'.''
    result = json_model_25(value, path)
    return result



# define "jm_f_83_may_#" ($.'$#Model#Root'.'|'.5.'%'.'#')
def jm_f_84(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.5.'%'.'#'
    result = isinstance(value, str)
    return result





# define "jm_obj_12_may_#" ($.'$#Model#Root'.'|'.5.'#')
def jm_f_86(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'.'|'.5.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_13_must_/" ($.'$#Model#Trafo'.'|'.1.'/')
def jm_f_88(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Trafo'.'|'.1.'/'
    # $.'$#Model#Trafo'.'|'.1.'/'.'|'.0
    result = json_model_27(value, path)
    if not result:
        # $.'$#Model#Trafo'.'|'.1.'/'.'|'.1
        result = isinstance(value, list)
        if result:
            assert isinstance(value, list)  # pyright helper
            for array_10_idx, array_10_item in enumerate(value):
                # $.'$#Model#Trafo'.'|'.1.'/'.'|'.1.0
                result = json_model_27(array_10_item, path)
                if not result: break
    return result

# define "jm_obj_13_may_#" ($.'$#Model#Trafo'.'|'.1.'#')
def jm_f_89(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Trafo'.'|'.1.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_13_may_*" ($.'$#Model#Trafo'.'|'.1.'*')
def jm_f_91(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Trafo'.'|'.1.'*'
    # $.'$#Model#Trafo'.'|'.1.'*'.'|'.0
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_11_idx, array_11_item in enumerate(value):
            # $.'$#Model#Trafo'.'|'.1.'*'.'|'.0.0
            result = json_model_27(array_11_item, path)
            if not result: break
    if not result:
        # $.'$#Model#Trafo'.'|'.1.'*'.'|'.1
        result = jm_obj_14(value, path)
    return result

# define "jm_obj_15_must_*" ($.'$#Model#Trafo'.'|'.2.'*')
def jm_f_92(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Trafo'.'|'.2.'*'
    # $.'$#Model#Trafo'.'|'.2.'*'.'|'.0
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_12_idx, array_12_item in enumerate(value):
            # $.'$#Model#Trafo'.'|'.2.'*'.'|'.0.0
            result = json_model_27(array_12_item, path)
            if not result: break
    if not result:
        # $.'$#Model#Trafo'.'|'.2.'*'.'|'.1
        result = jm_obj_16(value, path)
    return result

# define "jm_obj_15_may_#" ($.'$#Model#Trafo'.'|'.2.'#')
def jm_f_93(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Trafo'.'|'.2.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_15_may_/" ($.'$#Model#Trafo'.'|'.2.'/')
def jm_f_95(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Trafo'.'|'.2.'/'
    # $.'$#Model#Trafo'.'|'.2.'/'.'|'.0
    result = json_model_27(value, path)
    if not result:
        # $.'$#Model#Trafo'.'|'.2.'/'.'|'.1
        result = isinstance(value, list)
        if result:
            assert isinstance(value, list)  # pyright helper
            for array_13_idx, array_13_item in enumerate(value):
                # $.'$#Model#Trafo'.'|'.2.'/'.'|'.1.0
                result = json_model_27(array_13_item, path)
                if not result: break
    return result


# define "$Model" ($.Model)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.Model
    result = json_model_24(value, path)
    return result

# define "$#Model" ($.'$#Model')
def json_model_24(value: Jsonable, path: str) -> bool:
    # $.'$#Model'
    result = json_model_45(value, path)
    return result

# define "$#Model#RootModel" ($.'$#Model#RootModel')
def json_model_45(value: Jsonable, path: str) -> bool:
    # $.'$#Model#RootModel'
    # $.'$#Model#RootModel'.'|'.0
    result = json_model_39(value, path)
    if not result:
        # $.'$#Model#RootModel'.'|'.1
        result = json_model_30(value, path)
        if not result:
            # $.'$#Model#RootModel'.'|'.2
            result = json_model_44(value, path)
    return result

# define "$#Model#Array" ($.'$#Model#Array')
def json_model_30(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Array'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_0_idx, array_0_item in enumerate(value):
            # $.'$#Model#Array'.0
            result = json_model_40(array_0_item, path)
            if not result: break
    return result

# define "$#Model#Scalar" ($.'$#Model#Scalar')
def json_model_39(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Scalar'
    # $.'$#Model#Scalar'.'|'.0
    result = value is None
    if not result:
        # $.'$#Model#Scalar'.'|'.1
        result = isinstance(value, bool) and value == True
        if not result:
            # $.'$#Model#Scalar'.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool) and value == 0
            if not result:
                # $.'$#Model#Scalar'.'|'.3
                result = isinstance(value, int) and not isinstance(value, bool) and value == 1
                if not result:
                    # $.'$#Model#Scalar'.'|'.4
                    result = isinstance(value, int) and not isinstance(value, bool) and value == -1
                    if not result:
                        # $.'$#Model#Scalar'.'|'.5
                        result = isinstance(value, float) and value == 0.0
                        if not result:
                            # $.'$#Model#Scalar'.'|'.6
                            result = isinstance(value, float) and value == 1.0
                            if not result:
                                # $.'$#Model#Scalar'.'|'.7
                                result = isinstance(value, float) and value == -1.0
                                if not result:
                                    # $.'$#Model#Scalar'.'|'.8
                                    result = isinstance(value, str)
    return result

# define "$#Model#Model" ($.'$#Model#Model')
def json_model_40(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Model'
    # $.'$#Model#Model'.'|'.0
    result = json_model_39(value, path)
    if not result:
        # $.'$#Model#Model'.'|'.1
        result = json_model_30(value, path)
        if not result:
            # $.'$#Model#Model'.'|'.2
            result = json_model_37(value, path)
    return result


# object $.'$#Model#Elem'.'|'.0.'.schema'
def jm_f_2(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Elem'.'|'.0.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Elem'.'|'.0
def jm_obj_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_0_must:  # must
            must_count += 1
            if not jm_obj_0_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_0_may:  # may
            if not jm_obj_0_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^(<=|>=|<|>|≥|≤)$/
            # $.'$#Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$#Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            result = isinstance(model, int) and not isinstance(model, bool)
            if not result:
                # $.'$#Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                result = isinstance(model, float)
                if not result:
                    # $.'$#Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    result = isinstance(model, str)
            if not result: return False
        elif jm_re_1(prop) is not None:  # /^(=|!=|≠)$/
            # $.'$#Model#Elem'.'|'.0.'/^(=|!=|≠)$/'
            result = json_model_26(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#Model#Elem'.'|'.1.'.schema'
def jm_f_8(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Elem'.'|'.1.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Elem'.'|'.1
def jm_obj_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_1_must:  # must
            must_count += 1
            if not jm_obj_1_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_1_may:  # may
            if not jm_obj_1_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#Model#Elem'.'|'.2.'.schema'
def jm_f_11(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Elem'.'|'.2.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Elem'.'|'.2
def jm_obj_2(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_2_must:  # must
            must_count += 1
            if not jm_obj_2_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_2_may:  # may
            if not jm_obj_2_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#Model#Elem'.'|'.3.'.schema'
def jm_f_14(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Elem'.'|'.3.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Elem'.'|'.3
def jm_obj_3(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_3_must:  # must
            must_count += 1
            if not jm_obj_3_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_3_may:  # may
            if not jm_obj_3_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#Model#Elem'.'|'.4.'.schema'
def jm_f_17(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Elem'.'|'.4.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Elem'.'|'.4
def jm_obj_4(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_4_must:  # must
            must_count += 1
            if not jm_obj_4_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_4_may:  # may
            if not jm_obj_4_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#Model#Elem'.'|'.5.'.schema'
def jm_f_19(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Elem'.'|'.5.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Elem'.'|'.5
def jm_obj_5(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_5_may:  # may
            if not jm_obj_5_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_2(prop) is not None:  # /^[@|&^+/*]$/
            # $.'$#Model#Elem'.'|'.5.'/^[@|&^+/*]$/'
            result = False
            if not result: return False
        else:  # catch all
            # $.'$#Model#Elem'.'|'.5.''
            result = json_model_40(model, path)
            if not result: return False
    return True

# define "$#Model#Elem" ($.'$#Model#Elem')
def json_model_37(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Elem'
    result = isinstance(value, dict)
    if result:
        # $.'$#Model#Elem'.'|'.0
        result = jm_obj_0(value, path)
        if not result:
            # $.'$#Model#Elem'.'|'.1
            result = jm_obj_1(value, path)
            if not result:
                # $.'$#Model#Elem'.'|'.2
                result = jm_obj_2(value, path)
                if not result:
                    # $.'$#Model#Elem'.'|'.3
                    result = jm_obj_3(value, path)
                    if not result:
                        # $.'$#Model#Elem'.'|'.4
                        result = jm_obj_4(value, path)
                        if not result:
                            # $.'$#Model#Elem'.'|'.5
                            result = jm_obj_5(value, path)
    return result

# define "$#Model#Val" ($.'$#Model#Val')
def json_model_26(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Val'
    # $.'$#Model#Val'.'|'.0
    result = value is None
    if not result:
        # $.'$#Model#Val'.'|'.1
        result = isinstance(value, bool)
        if not result:
            # $.'$#Model#Val'.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool)
            if not result:
                # $.'$#Model#Val'.'|'.3
                result = isinstance(value, float)
                if not result:
                    # $.'$#Model#Val'.'|'.4
                    result = isinstance(value, str)
    return result


# object $.'$#Model#Any'.'|'.2
def jm_obj_6(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Any'.'|'.2.''
        result = json_model_27(model, path)
        if not result: return False
    return True

# define "$#Model#Any" ($.'$#Model#Any')
def json_model_27(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Any'
    # $.'$#Model#Any'.'|'.0
    result = json_model_26(value, path)
    if not result:
        # $.'$#Model#Any'.'|'.1
        result = isinstance(value, list)
        if result:
            assert isinstance(value, list)  # pyright helper
            for array_5_idx, array_5_item in enumerate(value):
                # $.'$#Model#Any'.'|'.1.0
                result = json_model_27(array_5_item, path)
                if not result: break
        if not result:
            # $.'$#Model#Any'.'|'.2
            result = jm_obj_6(value, path)
    return result


# object $.'$#Model#Root'.'|'.0.'$'.'.schema'
def jm_f_24(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.0.'$'.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.0.'$'
def jm_f_22(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_22_may:  # may
            if not jm_f_22_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_3(prop) is not None:  # /.+/
            # $.'$#Model#Root'.'|'.0.'$'.'/.+/'
            result = json_model_40(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#Model#Root'.'|'.0.'%'.'.schema'
def jm_f_28(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.0.'%'.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.0.'%'
def jm_f_26(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_26_may:  # may
            if not jm_f_26_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /^\..*$/
            # $.'$#Model#Root'.'|'.0.'%'.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_5(model) is not None
            if not result: return False
        elif jm_re_6(prop) is not None:  # /^\$.*$/
            # $.'$#Model#Root'.'|'.0.'%'.'/^\$.*$/'
            result = json_model_38(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#Model#Root'.'|'.0.'.schema'
def jm_f_30(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.0.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.0
def jm_obj_7(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_7_must:  # must
            must_count += 1
            if not jm_obj_7_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_7_may:  # may
            if not jm_obj_7_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^(<=|>=|<|>|≥|≤)$/
            # $.'$#Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$#Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            result = isinstance(model, int) and not isinstance(model, bool)
            if not result:
                # $.'$#Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                result = isinstance(model, float)
                if not result:
                    # $.'$#Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    result = isinstance(model, str)
            if not result: return False
        elif jm_re_1(prop) is not None:  # /^(=|!=|≠)$/
            # $.'$#Model#Root'.'|'.0.'/^(=|!=|≠)$/'
            result = json_model_26(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#Model#Root'.'|'.1.'$'.'.schema'
def jm_f_38(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.1.'$'.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.1.'$'
def jm_f_36(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_36_may:  # may
            if not jm_f_36_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_3(prop) is not None:  # /.+/
            # $.'$#Model#Root'.'|'.1.'$'.'/.+/'
            result = json_model_40(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#Model#Root'.'|'.1.'%'.'.schema'
def jm_f_42(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.1.'%'.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.1.'%'
def jm_f_40(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_40_may:  # may
            if not jm_f_40_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /^\..*$/
            # $.'$#Model#Root'.'|'.1.'%'.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_5(model) is not None
            if not result: return False
        elif jm_re_6(prop) is not None:  # /^\$.*$/
            # $.'$#Model#Root'.'|'.1.'%'.'/^\$.*$/'
            result = json_model_38(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#Model#Root'.'|'.1.'.schema'
def jm_f_44(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.1.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.1
def jm_obj_8(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_8_must:  # must
            must_count += 1
            if not jm_obj_8_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_8_may:  # may
            if not jm_obj_8_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#Model#Root'.'|'.2.'$'.'.schema'
def jm_f_49(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.2.'$'.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.2.'$'
def jm_f_47(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_47_may:  # may
            if not jm_f_47_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_3(prop) is not None:  # /.+/
            # $.'$#Model#Root'.'|'.2.'$'.'/.+/'
            result = json_model_40(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#Model#Root'.'|'.2.'%'.'.schema'
def jm_f_53(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.2.'%'.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.2.'%'
def jm_f_51(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_51_may:  # may
            if not jm_f_51_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /^\..*$/
            # $.'$#Model#Root'.'|'.2.'%'.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_5(model) is not None
            if not result: return False
        elif jm_re_6(prop) is not None:  # /^\$.*$/
            # $.'$#Model#Root'.'|'.2.'%'.'/^\$.*$/'
            result = json_model_38(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#Model#Root'.'|'.2.'.schema'
def jm_f_55(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.2.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.2
def jm_obj_9(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_9_must:  # must
            must_count += 1
            if not jm_obj_9_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_9_may:  # may
            if not jm_obj_9_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#Model#Root'.'|'.3.'$'.'.schema'
def jm_f_60(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.3.'$'.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.3.'$'
def jm_f_58(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_58_may:  # may
            if not jm_f_58_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_3(prop) is not None:  # /.+/
            # $.'$#Model#Root'.'|'.3.'$'.'/.+/'
            result = json_model_40(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#Model#Root'.'|'.3.'%'.'.schema'
def jm_f_64(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.3.'%'.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.3.'%'
def jm_f_62(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_62_may:  # may
            if not jm_f_62_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /^\..*$/
            # $.'$#Model#Root'.'|'.3.'%'.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_5(model) is not None
            if not result: return False
        elif jm_re_6(prop) is not None:  # /^\$.*$/
            # $.'$#Model#Root'.'|'.3.'%'.'/^\$.*$/'
            result = json_model_38(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#Model#Root'.'|'.3.'.schema'
def jm_f_66(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.3.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.3
def jm_obj_10(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_10_must:  # must
            must_count += 1
            if not jm_obj_10_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_10_may:  # may
            if not jm_obj_10_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#Model#Root'.'|'.4.'$'.'.schema'
def jm_f_71(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.4.'$'.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.4.'$'
def jm_f_69(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_69_may:  # may
            if not jm_f_69_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_3(prop) is not None:  # /.+/
            # $.'$#Model#Root'.'|'.4.'$'.'/.+/'
            result = json_model_40(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#Model#Root'.'|'.4.'%'.'.schema'
def jm_f_75(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.4.'%'.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.4.'%'
def jm_f_73(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_73_may:  # may
            if not jm_f_73_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /^\..*$/
            # $.'$#Model#Root'.'|'.4.'%'.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_5(model) is not None
            if not result: return False
        elif jm_re_6(prop) is not None:  # /^\$.*$/
            # $.'$#Model#Root'.'|'.4.'%'.'/^\$.*$/'
            result = json_model_38(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#Model#Root'.'|'.4.'.schema'
def jm_f_77(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.4.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.4
def jm_obj_11(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_11_must:  # must
            must_count += 1
            if not jm_obj_11_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_11_may:  # may
            if not jm_obj_11_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#Model#Root'.'|'.5.'$'.'.schema'
def jm_f_81(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.5.'$'.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.5.'$'
def jm_f_79(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_79_may:  # may
            if not jm_f_79_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_3(prop) is not None:  # /.+/
            # $.'$#Model#Root'.'|'.5.'$'.'/.+/'
            result = json_model_40(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#Model#Root'.'|'.5.'%'.'.schema'
def jm_f_85(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.5.'%'.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.5.'%'
def jm_f_83(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_83_may:  # may
            if not jm_f_83_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /^\..*$/
            # $.'$#Model#Root'.'|'.5.'%'.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_5(model) is not None
            if not result: return False
        elif jm_re_6(prop) is not None:  # /^\$.*$/
            # $.'$#Model#Root'.'|'.5.'%'.'/^\$.*$/'
            result = json_model_38(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#Model#Root'.'|'.5.'.schema'
def jm_f_87(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Root'.'|'.5.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Root'.'|'.5
def jm_obj_12(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_12_may:  # may
            if not jm_obj_12_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_2(prop) is not None:  # /^[@|&^+/*]$/
            # $.'$#Model#Root'.'|'.5.'/^[@|&^+/*]$/'
            result = False
            if not result: return False
        else:  # catch all
            # $.'$#Model#Root'.'|'.5.''
            result = json_model_40(model, path)
            if not result: return False
    return True

# define "$#Model#Root" ($.'$#Model#Root')
def json_model_44(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Root'
    result = isinstance(value, dict)
    if result:
        # $.'$#Model#Root'.'|'.0
        result = jm_obj_7(value, path)
        if not result:
            # $.'$#Model#Root'.'|'.1
            result = jm_obj_8(value, path)
            if not result:
                # $.'$#Model#Root'.'|'.2
                result = jm_obj_9(value, path)
                if not result:
                    # $.'$#Model#Root'.'|'.3
                    result = jm_obj_10(value, path)
                    if not result:
                        # $.'$#Model#Root'.'|'.4
                        result = jm_obj_11(value, path)
                        if not result:
                            # $.'$#Model#Root'.'|'.5
                            result = jm_obj_12(value, path)
    return result

# define "$#Model#Url" ($.'$#Model#Url')
def json_model_25(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    result = isinstance(value, str) and jm_re_7(value) is not None
    return result


# object $.'$#Model#Trafo'.'|'.1.'.schema'
def jm_f_90(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Trafo'.'|'.1.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Trafo'.'|'.1.'*'.'|'.1
def jm_obj_14(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Trafo'.'|'.1.'*'.'|'.1.''
        result = json_model_40(model, path)
        if not result: return False
    return True


# object $.'$#Model#Trafo'.'|'.1
def jm_obj_13(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_13_must:  # must
            must_count += 1
            if not jm_obj_13_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_13_may:  # may
            if not jm_obj_13_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#Model#Trafo'.'|'.2.'*'.'|'.1
def jm_obj_16(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Trafo'.'|'.2.'*'.'|'.1.''
        result = json_model_40(model, path)
        if not result: return False
    return True


# object $.'$#Model#Trafo'.'|'.2.'.schema'
def jm_f_94(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#Model#Trafo'.'|'.2.'.schema'.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.'$#Model#Trafo'.'|'.2
def jm_obj_15(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_15_must:  # must
            must_count += 1
            if not jm_obj_15_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_15_may:  # may
            if not jm_obj_15_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1

# define "$#Model#Trafo" ($.'$#Model#Trafo')
def json_model_38(value: Jsonable, path: str) -> bool:
    # $.'$#Model#Trafo'
    # $.'$#Model#Trafo'.'|'.0
    result = json_model_40(value, path)
    if not result:
        # $.'$#Model#Trafo'.'|'.1
        result = jm_obj_13(value, path)
        if not result:
            # $.'$#Model#Trafo'.'|'.2
            result = jm_obj_15(value, path)
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = json_model_24(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
jm_obj_0_must = {
    "@": jm_f_0,
}
jm_obj_0_may = {
    "#": jm_f_1,
    ".schema": jm_f_2,
    "!": jm_f_3,
    ".mo": jm_f_4,
    ".in": jm_f_5,
}
jm_obj_1_must = {
    "|": jm_f_6,
}
jm_obj_1_may = {
    "#": jm_f_7,
    ".schema": jm_f_8,
}
jm_obj_2_must = {
    "&": jm_f_9,
}
jm_obj_2_may = {
    "#": jm_f_10,
    ".schema": jm_f_11,
}
jm_obj_3_must = {
    "^": jm_f_12,
}
jm_obj_3_may = {
    "#": jm_f_13,
    ".schema": jm_f_14,
}
jm_obj_4_must = {
    "+": jm_f_15,
}
jm_obj_4_may = {
    "#": jm_f_16,
    ".schema": jm_f_17,
}
jm_obj_5_may = {
    "#": jm_f_18,
    ".schema": jm_f_19,
}
jm_obj_7_must = {
    "@": jm_f_20,
}
jm_obj_7_may = {
    "~": jm_f_21,
    "$": jm_f_22,
    "%": jm_f_26,
    "#": jm_f_29,
    ".schema": jm_f_30,
    "!": jm_f_31,
    ".mo": jm_f_32,
    ".in": jm_f_33,
}
jm_f_22_may = {
    "#": jm_f_23,
    ".schema": jm_f_24,
    "": jm_f_25,
}
jm_f_26_may = {
    "#": jm_f_27,
    ".schema": jm_f_28,
}
jm_obj_8_must = {
    "|": jm_f_34,
}
jm_obj_8_may = {
    "~": jm_f_35,
    "$": jm_f_36,
    "%": jm_f_40,
    "#": jm_f_43,
    ".schema": jm_f_44,
}
jm_f_36_may = {
    "#": jm_f_37,
    ".schema": jm_f_38,
    "": jm_f_39,
}
jm_f_40_may = {
    "#": jm_f_41,
    ".schema": jm_f_42,
}
jm_obj_9_must = {
    "&": jm_f_45,
}
jm_obj_9_may = {
    "~": jm_f_46,
    "$": jm_f_47,
    "%": jm_f_51,
    "#": jm_f_54,
    ".schema": jm_f_55,
}
jm_f_47_may = {
    "#": jm_f_48,
    ".schema": jm_f_49,
    "": jm_f_50,
}
jm_f_51_may = {
    "#": jm_f_52,
    ".schema": jm_f_53,
}
jm_obj_10_must = {
    "^": jm_f_56,
}
jm_obj_10_may = {
    "~": jm_f_57,
    "$": jm_f_58,
    "%": jm_f_62,
    "#": jm_f_65,
    ".schema": jm_f_66,
}
jm_f_58_may = {
    "#": jm_f_59,
    ".schema": jm_f_60,
    "": jm_f_61,
}
jm_f_62_may = {
    "#": jm_f_63,
    ".schema": jm_f_64,
}
jm_obj_11_must = {
    "+": jm_f_67,
}
jm_obj_11_may = {
    "~": jm_f_68,
    "$": jm_f_69,
    "%": jm_f_73,
    "#": jm_f_76,
    ".schema": jm_f_77,
}
jm_f_69_may = {
    "#": jm_f_70,
    ".schema": jm_f_71,
    "": jm_f_72,
}
jm_f_73_may = {
    "#": jm_f_74,
    ".schema": jm_f_75,
}
jm_obj_12_may = {
    "~": jm_f_78,
    "$": jm_f_79,
    "%": jm_f_83,
    "#": jm_f_86,
    ".schema": jm_f_87,
}
jm_f_79_may = {
    "#": jm_f_80,
    ".schema": jm_f_81,
    "": jm_f_82,
}
jm_f_83_may = {
    "#": jm_f_84,
    ".schema": jm_f_85,
}
jm_obj_13_must = {
    "/": jm_f_88,
}
jm_obj_13_may = {
    "#": jm_f_89,
    ".schema": jm_f_90,
    "*": jm_f_91,
}
jm_obj_15_must = {
    "*": jm_f_92,
}
jm_obj_15_may = {
    "#": jm_f_93,
    ".schema": jm_f_94,
    "/": jm_f_95,
}


