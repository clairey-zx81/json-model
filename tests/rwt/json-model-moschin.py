#! /bin/env python
#
# Model: ./json-model-moschin.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

_jm_obj_0_must: PropMap
_jm_obj_0_may: PropMap
# regex "/^(<=|>=|<|>|\u2265|\u2264)$/"
_jm_re_0 = re.compile("^(<=|>=|<|>|\u2265|\u2264)$").search
# regex "/^(=|!=|\u2260)$/"
_jm_re_1 = re.compile("^(=|!=|\u2260)$").search
_jm_obj_1_must: PropMap
_jm_obj_1_may: PropMap
_jm_obj_2_must: PropMap
_jm_obj_2_may: PropMap
_jm_obj_3_must: PropMap
_jm_obj_3_may: PropMap
_jm_obj_4_must: PropMap
_jm_obj_4_may: PropMap
_jm_obj_5_may: PropMap
# regex "/^[@|&^+/*]$/"
_jm_re_2 = re.compile("^[@|&^+/*]$").search
_jm_obj_6_must: PropMap
_jm_obj_6_may: PropMap
_jm_f_14_may: PropMap
# regex "/.+/"
_jm_re_3 = re.compile(".+").search
_jm_f_17_may: PropMap
# regex "/^\\..+$/"
_jm_re_4 = re.compile("^\\..+$").search
# regex "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
_jm_re_5 = re.compile("^([#|&^+/*@~=$%]|[<>!]=?)$").search
# regex "/^\\$.*$/"
_jm_re_6 = re.compile("^\\$.*$").search
_jm_obj_7_must: PropMap
_jm_obj_7_may: PropMap
_jm_f_23_may: PropMap
_jm_f_26_may: PropMap
_jm_obj_8_must: PropMap
_jm_obj_8_may: PropMap
_jm_f_31_may: PropMap
_jm_f_34_may: PropMap
_jm_obj_9_must: PropMap
_jm_obj_9_may: PropMap
_jm_f_39_may: PropMap
_jm_f_42_may: PropMap
_jm_obj_10_must: PropMap
_jm_obj_10_may: PropMap
_jm_f_47_may: PropMap
_jm_f_50_may: PropMap
_jm_obj_11_may: PropMap
_jm_f_54_may: PropMap
_jm_f_57_may: PropMap
# regex "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
_jm_re_7 = re.compile("^((file|https?)://.+|\\./.*|\\.\\./.*)$").search
_jm_obj_12_must: PropMap
_jm_obj_12_may: PropMap
_jm_obj_14_must: PropMap
_jm_obj_14_may: PropMap

# define "_jm_obj_0_must_@" ($.'$Model#Elem'.'|'.0.'@')
def _jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Elem'.'|'.0.'@'
    result = json_model_65(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Model at {path} [$.'$Model#Elem'.'|'.0.'@']")
    return result

# define "_jm_obj_0_may_#" ($.'$Model#Elem'.'|'.0.'#')
def _jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Elem'.'|'.0.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Elem'.'|'.0.'#']")
    return result

# define "_jm_obj_0_may_!" ($.'$Model#Elem'.'|'.0.'!')
def _jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Elem'.'|'.0.'!'
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Model#Elem'.'|'.0.'!']")
    return result

# define "_jm_obj_1_must_|" ($.'$Model#Elem'.'|'.1.'|')
def _jm_f_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Elem'.'|'.1.'|'
    result = isinstance(value, list)
    if result:
        for array_1_idx, array_1_item in enumerate(value):
            lpath = path + '.' + str(array_1_idx)
            # $.'$Model#Elem'.'|'.1.'|'.0
            result = json_model_65(array_1_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Elem'.'|'.1.'|'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Model#Elem'.'|'.1.'|']")
    return result

# define "_jm_obj_1_may_#" ($.'$Model#Elem'.'|'.1.'#')
def _jm_f_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Elem'.'|'.1.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Elem'.'|'.1.'#']")
    return result

# define "_jm_obj_2_must_&" ($.'$Model#Elem'.'|'.2.'&')
def _jm_f_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Elem'.'|'.2.'&'
    result = isinstance(value, list)
    if result:
        for array_2_idx, array_2_item in enumerate(value):
            lpath = path + '.' + str(array_2_idx)
            # $.'$Model#Elem'.'|'.2.'&'.0
            result = json_model_65(array_2_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Elem'.'|'.2.'&'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Model#Elem'.'|'.2.'&']")
    return result

# define "_jm_obj_2_may_#" ($.'$Model#Elem'.'|'.2.'#')
def _jm_f_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Elem'.'|'.2.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Elem'.'|'.2.'#']")
    return result

# define "_jm_obj_3_must_^" ($.'$Model#Elem'.'|'.3.'^')
def _jm_f_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Elem'.'|'.3.'^'
    result = isinstance(value, list)
    if result:
        for array_3_idx, array_3_item in enumerate(value):
            lpath = path + '.' + str(array_3_idx)
            # $.'$Model#Elem'.'|'.3.'^'.0
            result = json_model_65(array_3_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Elem'.'|'.3.'^'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Model#Elem'.'|'.3.'^']")
    return result

# define "_jm_obj_3_may_#" ($.'$Model#Elem'.'|'.3.'#')
def _jm_f_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Elem'.'|'.3.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Elem'.'|'.3.'#']")
    return result

# define "_jm_obj_4_must_+" ($.'$Model#Elem'.'|'.4.'+')
def _jm_f_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Elem'.'|'.4.'+'
    result = isinstance(value, list)
    if result:
        for array_4_idx, array_4_item in enumerate(value):
            lpath = path + '.' + str(array_4_idx)
            # $.'$Model#Elem'.'|'.4.'+'.0
            result = json_model_65(array_4_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Elem'.'|'.4.'+'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Model#Elem'.'|'.4.'+']")
    return result

# define "_jm_obj_4_may_#" ($.'$Model#Elem'.'|'.4.'#')
def _jm_f_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Elem'.'|'.4.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Elem'.'|'.4.'#']")
    return result

# define "_jm_obj_5_may_#" ($.'$Model#Elem'.'|'.5.'#')
def _jm_f_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Elem'.'|'.5.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Elem'.'|'.5.'#']")
    return result

# define "_jm_obj_6_must_@" ($.'$Model#Root'.'|'.0.'@')
def _jm_f_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.0.'@'
    result = json_model_65(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Model at {path} [$.'$Model#Root'.'|'.0.'@']")
    return result

# define "_jm_obj_6_may_~" ($.'$Model#Root'.'|'.0.'~')
def _jm_f_13(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.0.'~'
    result = json_model_50(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Model#Root'.'|'.0.'~']")
    return result

# define "_jm_f_14_may_#" ($.'$Model#Root'.'|'.0.'$'.'#')
def _jm_f_15(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.0.'$'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.0.'$'.'#']")
    return result

# define "_jm_f_14_may_" ($.'$Model#Root'.'|'.0.'$'.'')
def _jm_f_16(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.0.'$'.''
    result = json_model_50(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Model#Root'.'|'.0.'$'.'']")
    return result



# define "_jm_f_17_may_#" ($.'$Model#Root'.'|'.0.'%'.'#')
def _jm_f_18(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.0.'%'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.0.'%'.'#']")
    return result



# define "_jm_obj_6_may_#" ($.'$Model#Root'.'|'.0.'#')
def _jm_f_19(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.0.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.0.'#']")
    return result

# define "_jm_obj_6_may_!" ($.'$Model#Root'.'|'.0.'!')
def _jm_f_20(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.0.'!'
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Model#Root'.'|'.0.'!']")
    return result

# define "_jm_obj_7_must_|" ($.'$Model#Root'.'|'.1.'|')
def _jm_f_21(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.1.'|'
    result = isinstance(value, list)
    if result:
        for array_5_idx, array_5_item in enumerate(value):
            lpath = path + '.' + str(array_5_idx)
            # $.'$Model#Root'.'|'.1.'|'.0
            result = json_model_65(array_5_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Root'.'|'.1.'|'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Model#Root'.'|'.1.'|']")
    return result

# define "_jm_obj_7_may_~" ($.'$Model#Root'.'|'.1.'~')
def _jm_f_22(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.1.'~'
    result = json_model_50(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Model#Root'.'|'.1.'~']")
    return result

# define "_jm_f_23_may_#" ($.'$Model#Root'.'|'.1.'$'.'#')
def _jm_f_24(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.1.'$'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.1.'$'.'#']")
    return result

# define "_jm_f_23_may_" ($.'$Model#Root'.'|'.1.'$'.'')
def _jm_f_25(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.1.'$'.''
    result = json_model_50(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Model#Root'.'|'.1.'$'.'']")
    return result



# define "_jm_f_26_may_#" ($.'$Model#Root'.'|'.1.'%'.'#')
def _jm_f_27(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.1.'%'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.1.'%'.'#']")
    return result



# define "_jm_obj_7_may_#" ($.'$Model#Root'.'|'.1.'#')
def _jm_f_28(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.1.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.1.'#']")
    return result

# define "_jm_obj_8_must_&" ($.'$Model#Root'.'|'.2.'&')
def _jm_f_29(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.2.'&'
    result = isinstance(value, list)
    if result:
        for array_6_idx, array_6_item in enumerate(value):
            lpath = path + '.' + str(array_6_idx)
            # $.'$Model#Root'.'|'.2.'&'.0
            result = json_model_65(array_6_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Root'.'|'.2.'&'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Model#Root'.'|'.2.'&']")
    return result

# define "_jm_obj_8_may_~" ($.'$Model#Root'.'|'.2.'~')
def _jm_f_30(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.2.'~'
    result = json_model_50(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Model#Root'.'|'.2.'~']")
    return result

# define "_jm_f_31_may_#" ($.'$Model#Root'.'|'.2.'$'.'#')
def _jm_f_32(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.2.'$'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.2.'$'.'#']")
    return result

# define "_jm_f_31_may_" ($.'$Model#Root'.'|'.2.'$'.'')
def _jm_f_33(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.2.'$'.''
    result = json_model_50(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Model#Root'.'|'.2.'$'.'']")
    return result



# define "_jm_f_34_may_#" ($.'$Model#Root'.'|'.2.'%'.'#')
def _jm_f_35(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.2.'%'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.2.'%'.'#']")
    return result



# define "_jm_obj_8_may_#" ($.'$Model#Root'.'|'.2.'#')
def _jm_f_36(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.2.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.2.'#']")
    return result

# define "_jm_obj_9_must_^" ($.'$Model#Root'.'|'.3.'^')
def _jm_f_37(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.3.'^'
    result = isinstance(value, list)
    if result:
        for array_7_idx, array_7_item in enumerate(value):
            lpath = path + '.' + str(array_7_idx)
            # $.'$Model#Root'.'|'.3.'^'.0
            result = json_model_65(array_7_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Root'.'|'.3.'^'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Model#Root'.'|'.3.'^']")
    return result

# define "_jm_obj_9_may_~" ($.'$Model#Root'.'|'.3.'~')
def _jm_f_38(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.3.'~'
    result = json_model_50(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Model#Root'.'|'.3.'~']")
    return result

# define "_jm_f_39_may_#" ($.'$Model#Root'.'|'.3.'$'.'#')
def _jm_f_40(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.3.'$'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.3.'$'.'#']")
    return result

# define "_jm_f_39_may_" ($.'$Model#Root'.'|'.3.'$'.'')
def _jm_f_41(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.3.'$'.''
    result = json_model_50(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Model#Root'.'|'.3.'$'.'']")
    return result



# define "_jm_f_42_may_#" ($.'$Model#Root'.'|'.3.'%'.'#')
def _jm_f_43(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.3.'%'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.3.'%'.'#']")
    return result



# define "_jm_obj_9_may_#" ($.'$Model#Root'.'|'.3.'#')
def _jm_f_44(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.3.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.3.'#']")
    return result

# define "_jm_obj_10_must_+" ($.'$Model#Root'.'|'.4.'+')
def _jm_f_45(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.4.'+'
    result = isinstance(value, list)
    if result:
        for array_8_idx, array_8_item in enumerate(value):
            lpath = path + '.' + str(array_8_idx)
            # $.'$Model#Root'.'|'.4.'+'.0
            result = json_model_65(array_8_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Root'.'|'.4.'+'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Model#Root'.'|'.4.'+']")
    return result

# define "_jm_obj_10_may_~" ($.'$Model#Root'.'|'.4.'~')
def _jm_f_46(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.4.'~'
    result = json_model_50(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Model#Root'.'|'.4.'~']")
    return result

# define "_jm_f_47_may_#" ($.'$Model#Root'.'|'.4.'$'.'#')
def _jm_f_48(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.4.'$'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.4.'$'.'#']")
    return result

# define "_jm_f_47_may_" ($.'$Model#Root'.'|'.4.'$'.'')
def _jm_f_49(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.4.'$'.''
    result = json_model_50(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Model#Root'.'|'.4.'$'.'']")
    return result



# define "_jm_f_50_may_#" ($.'$Model#Root'.'|'.4.'%'.'#')
def _jm_f_51(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.4.'%'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.4.'%'.'#']")
    return result



# define "_jm_obj_10_may_#" ($.'$Model#Root'.'|'.4.'#')
def _jm_f_52(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.4.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.4.'#']")
    return result

# define "_jm_obj_11_may_~" ($.'$Model#Root'.'|'.5.'~')
def _jm_f_53(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.5.'~'
    result = json_model_50(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Model#Root'.'|'.5.'~']")
    return result

# define "_jm_f_54_may_#" ($.'$Model#Root'.'|'.5.'$'.'#')
def _jm_f_55(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.5.'$'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.5.'$'.'#']")
    return result

# define "_jm_f_54_may_" ($.'$Model#Root'.'|'.5.'$'.'')
def _jm_f_56(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.5.'$'.''
    result = json_model_50(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Model#Root'.'|'.5.'$'.'']")
    return result



# define "_jm_f_57_may_#" ($.'$Model#Root'.'|'.5.'%'.'#')
def _jm_f_58(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.5.'%'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.5.'%'.'#']")
    return result



# define "_jm_obj_11_may_#" ($.'$Model#Root'.'|'.5.'#')
def _jm_f_59(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'.'|'.5.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Root'.'|'.5.'#']")
    return result

# define "_jm_obj_12_must_/" ($.'$Model#Trafo'.'|'.1.'/')
def _jm_f_60(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Trafo'.'|'.1.'/'
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$Model#Trafo'.'|'.1.'/']")
    return result

# define "_jm_obj_12_may_#" ($.'$Model#Trafo'.'|'.1.'#')
def _jm_f_61(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Trafo'.'|'.1.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Trafo'.'|'.1.'#']")
    return result

# define "_jm_obj_12_may_*" ($.'$Model#Trafo'.'|'.1.'*')
def _jm_f_62(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Trafo'.'|'.1.'*'
    # $.'$Model#Trafo'.'|'.1.'*'.'|'.0
    result = isinstance(value, list)
    if result:
        for array_9_idx, array_9_item in enumerate(value):
            lpath = path + '.' + str(array_9_idx)
            # $.'$Model#Trafo'.'|'.1.'*'.'|'.0.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Model#Trafo'.'|'.1.'*'.'|'.0.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Model#Trafo'.'|'.1.'*'.'|'.0]")
    if not result:
        # $.'$Model#Trafo'.'|'.1.'*'.'|'.1
        result = _jm_obj_13(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Trafo'.'|'.1.'*'.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Model#Trafo'.'|'.1.'*'.'|']")
    return result

# define "_jm_obj_14_must_*" ($.'$Model#Trafo'.'|'.2.'*')
def _jm_f_63(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Trafo'.'|'.2.'*'
    # $.'$Model#Trafo'.'|'.2.'*'.'|'.0
    result = isinstance(value, list)
    if result:
        for array_10_idx, array_10_item in enumerate(value):
            lpath = path + '.' + str(array_10_idx)
            # $.'$Model#Trafo'.'|'.2.'*'.'|'.0.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Model#Trafo'.'|'.2.'*'.'|'.0.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Model#Trafo'.'|'.2.'*'.'|'.0]")
    if not result:
        # $.'$Model#Trafo'.'|'.2.'*'.'|'.1
        result = _jm_obj_15(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Trafo'.'|'.2.'*'.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Model#Trafo'.'|'.2.'*'.'|']")
    return result

# define "_jm_obj_14_may_#" ($.'$Model#Trafo'.'|'.2.'#')
def _jm_f_64(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Trafo'.'|'.2.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Trafo'.'|'.2.'#']")
    return result

# define "_jm_obj_14_may_/" ($.'$Model#Trafo'.'|'.2.'/')
def _jm_f_65(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Trafo'.'|'.2.'/'
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$Model#Trafo'.'|'.2.'/']")
    return result


# define "$Model" ($.'$Model')
def json_model_49(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model'
    result = json_model_71(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $RootModel at {path} [$.'$Model']")
    return result

# define "$Model#RootModel" ($.'$Model#RootModel')
def json_model_71(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#RootModel'
    # $.'$Model#RootModel'.'|'.0
    result = json_model_64(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Scalar at {path} [$.'$Model#RootModel'.'|'.0]")
    if not result:
        # $.'$Model#RootModel'.'|'.1
        result = json_model_55(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Array at {path} [$.'$Model#RootModel'.'|'.1]")
        if not result:
            # $.'$Model#RootModel'.'|'.2
            result = json_model_70(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Root at {path} [$.'$Model#RootModel'.'|'.2]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Model#RootModel'.'|']")
    return result

# define "$Model#Array" ($.'$Model#Array')
def json_model_55(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Array'
    result = isinstance(value, list)
    if result:
        for array_0_idx, array_0_item in enumerate(value):
            lpath = path + '.' + str(array_0_idx)
            # $.'$Model#Array'.0
            result = json_model_65(array_0_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Array'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Model#Array']")
    return result

# define "$Model#Scalar" ($.'$Model#Scalar')
def json_model_64(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Scalar'
    # $.'$Model#Scalar'.'|'.0
    result = value is None
    if not result:
        rep is None or rep.append(f"not an expected =null at {path} [$.'$Model#Scalar'.'|'.0]")
    if not result:
        # $.'$Model#Scalar'.'|'.1
        result = isinstance(value, bool) and value == True
        if not result:
            rep is None or rep.append(f"not an expected =true at {path} [$.'$Model#Scalar'.'|'.1]")
        if not result:
            # $.'$Model#Scalar'.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool) and value == 0
            if not result:
                rep is None or rep.append(f"not an expected =0 at {path} [$.'$Model#Scalar'.'|'.2]")
            if not result:
                # $.'$Model#Scalar'.'|'.3
                result = isinstance(value, int) and not isinstance(value, bool) and value == 1
                if not result:
                    rep is None or rep.append(f"not an expected =1 at {path} [$.'$Model#Scalar'.'|'.3]")
                if not result:
                    # $.'$Model#Scalar'.'|'.4
                    result = isinstance(value, int) and not isinstance(value, bool) and value == -1
                    if not result:
                        rep is None or rep.append(f"not an expected =-1 at {path} [$.'$Model#Scalar'.'|'.4]")
                    if not result:
                        # $.'$Model#Scalar'.'|'.5
                        result = isinstance(value, float) and value == 0.0
                        if not result:
                            rep is None or rep.append(f"not an expected =0.0 at {path} [$.'$Model#Scalar'.'|'.5]")
                        if not result:
                            # $.'$Model#Scalar'.'|'.6
                            result = isinstance(value, float) and value == 1.0
                            if not result:
                                rep is None or rep.append(f"not an expected =1.0 at {path} [$.'$Model#Scalar'.'|'.6]")
                            if not result:
                                # $.'$Model#Scalar'.'|'.7
                                result = isinstance(value, float) and value == -1.0
                                if not result:
                                    rep is None or rep.append(f"not an expected =-1.0 at {path} [$.'$Model#Scalar'.'|'.7]")
                                if not result:
                                    # $.'$Model#Scalar'.'|'.8
                                    result = isinstance(value, str)
                                    if not result:
                                        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Scalar'.'|'.8]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Model#Scalar'.'|']")
    return result

# define "$Model#Model" ($.'$Model#Model')
def json_model_65(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Model'
    # $.'$Model#Model'.'|'.0
    result = json_model_64(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Scalar at {path} [$.'$Model#Model'.'|'.0]")
    if not result:
        # $.'$Model#Model'.'|'.1
        result = json_model_55(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Array at {path} [$.'$Model#Model'.'|'.1]")
        if not result:
            # $.'$Model#Model'.'|'.2
            result = json_model_62(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Elem at {path} [$.'$Model#Model'.'|'.2]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Model#Model'.'|']")
    return result


# object $.'$Model#Elem'.'|'.0
def _jm_obj_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Elem'.'|'.0]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_0_must:  # must
            must_count += 1
            if not _jm_obj_0_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Model#Elem'.'|'.0.{prop}]")
                return False
        elif prop in _jm_obj_0_may:  # may
            if not _jm_obj_0_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Elem'.'|'.0.{prop}]")
                return False
        elif _jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^(<=|>=|<|>|≥|≤)$/
            # $.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            result = isinstance(val, int) and not isinstance(val, bool)
            if not result:
                rep is None or rep.append(f"not a -1 int at {lpath} [$.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]")
            if not result:
                # $.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                result = isinstance(val, float)
                if not result:
                    rep is None or rep.append(f"not a -1.0 float at {lpath} [$.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]")
                if not result:
                    # $.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    result = isinstance(val, str)
                    if not result:
                        rep is None or rep.append(f"not an expected string at {lpath} [$.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]")
            if not result:
                rep is None or rep.append(f"not any model match at {lpath} [$.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|']")
            if not result:
                return False
        elif _jm_re_1(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^(=|!=|≠)$/
            # $.'$Model#Elem'.'|'.0.'/^(=|!=|≠)$/'
            result = json_model_51(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Val at {lpath} [$.'$Model#Elem'.'|'.0.'/^(=|!=|≠)$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Elem'.'|'.0]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Model#Elem'.'|'.0]")
    return result


# object $.'$Model#Elem'.'|'.1
def _jm_obj_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Elem'.'|'.1]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_1_must:  # must
            must_count += 1
            if not _jm_obj_1_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Model#Elem'.'|'.1.{prop}]")
                return False
        elif prop in _jm_obj_1_may:  # may
            if not _jm_obj_1_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Elem'.'|'.1.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Elem'.'|'.1]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Model#Elem'.'|'.1]")
    return result


# object $.'$Model#Elem'.'|'.2
def _jm_obj_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Elem'.'|'.2]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_2_must:  # must
            must_count += 1
            if not _jm_obj_2_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Model#Elem'.'|'.2.{prop}]")
                return False
        elif prop in _jm_obj_2_may:  # may
            if not _jm_obj_2_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Elem'.'|'.2.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Elem'.'|'.2]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Model#Elem'.'|'.2]")
    return result


# object $.'$Model#Elem'.'|'.3
def _jm_obj_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Elem'.'|'.3]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_3_must:  # must
            must_count += 1
            if not _jm_obj_3_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Model#Elem'.'|'.3.{prop}]")
                return False
        elif prop in _jm_obj_3_may:  # may
            if not _jm_obj_3_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Elem'.'|'.3.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Elem'.'|'.3]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Model#Elem'.'|'.3]")
    return result


# object $.'$Model#Elem'.'|'.4
def _jm_obj_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Elem'.'|'.4]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_4_must:  # must
            must_count += 1
            if not _jm_obj_4_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Model#Elem'.'|'.4.{prop}]")
                return False
        elif prop in _jm_obj_4_may:  # may
            if not _jm_obj_4_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Elem'.'|'.4.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Elem'.'|'.4]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Model#Elem'.'|'.4]")
    return result


# object $.'$Model#Elem'.'|'.5
def _jm_obj_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Elem'.'|'.5]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_5_may:  # may
            if not _jm_obj_5_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Elem'.'|'.5.{prop}]")
                return False
        elif _jm_re_2(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^[@|&^+/*]$/
            # $.'$Model#Elem'.'|'.5.'/^[@|&^+/*]$/'
            result = False or _rep(f"invalid $NONE at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $NONE at {lpath} [$.'$Model#Elem'.'|'.5.'/^[@|&^+/*]$/']")
            if not result:
                return False
        else:  # catch all
            # $.'$Model#Elem'.'|'.5.''
            result = json_model_65(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Elem'.'|'.5.'']")
            if not result:
                rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Model#Elem'.'|'.5.'']")
                return False
    return True

# define "$Model#Elem" ($.'$Model#Elem')
def json_model_62(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Elem'
    result = isinstance(value, dict)
    if result:
        # $.'$Model#Elem'.'|'.0
        result = _jm_obj_0(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Elem'.'|'.0]")
        if not result:
            # $.'$Model#Elem'.'|'.1
            result = _jm_obj_1(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Elem'.'|'.1]")
            if not result:
                # $.'$Model#Elem'.'|'.2
                result = _jm_obj_2(value, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Elem'.'|'.2]")
                if not result:
                    # $.'$Model#Elem'.'|'.3
                    result = _jm_obj_3(value, path, rep)
                    if not result:
                        rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Elem'.'|'.3]")
                    if not result:
                        # $.'$Model#Elem'.'|'.4
                        result = _jm_obj_4(value, path, rep)
                        if not result:
                            rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Elem'.'|'.4]")
                        if not result:
                            # $.'$Model#Elem'.'|'.5
                            result = _jm_obj_5(value, path, rep)
                            if not result:
                                rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Elem'.'|'.5]")
        if not result:
            rep is None or rep.append(f"not any model match at {path} [$.'$Model#Elem'.'|']")
    return result

# define "$Model#Val" ($.'$Model#Val')
def json_model_51(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Val'
    # $.'$Model#Val'.'|'.0
    result = value is None
    if not result:
        rep is None or rep.append(f"not null at {path} [$.'$Model#Val'.'|'.0]")
    if not result:
        # $.'$Model#Val'.'|'.1
        result = isinstance(value, bool)
        if not result:
            rep is None or rep.append(f"not a bool at {path} [$.'$Model#Val'.'|'.1]")
        if not result:
            # $.'$Model#Val'.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool)
            if not result:
                rep is None or rep.append(f"not a -1 int at {path} [$.'$Model#Val'.'|'.2]")
            if not result:
                # $.'$Model#Val'.'|'.3
                result = isinstance(value, float)
                if not result:
                    rep is None or rep.append(f"not a -1.0 float at {path} [$.'$Model#Val'.'|'.3]")
                if not result:
                    # $.'$Model#Val'.'|'.4
                    result = isinstance(value, str)
                    if not result:
                        rep is None or rep.append(f"not an expected string at {path} [$.'$Model#Val'.'|'.4]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Model#Val'.'|']")
    return result


# object $.'$Model#Root'.'|'.0.'$'
def _jm_f_14(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.0.'$']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_14_may:  # may
            if not _jm_f_14_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.0.'$'.{prop}]")
                return False
        elif _jm_re_3(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$Model#Root'.'|'.0.'$'.'/.+/'
            result = json_model_65(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Root'.'|'.0.'$'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.0.'$']")
            return False
    return True


# object $.'$Model#Root'.'|'.0.'%'
def _jm_f_17(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.0.'%']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_17_may:  # may
            if not _jm_f_17_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.0.'%'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$Model#Root'.'|'.0.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_5(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$Model#Root'.'|'.0.'%'.'/^\\..+$/']")
            if not result:
                return False
        elif _jm_re_6(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$Model#Root'.'|'.0.'%'.'/^\\$.*$/'
            result = json_model_63(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$Model#Root'.'|'.0.'%'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.0.'%']")
            return False
    return True


# object $.'$Model#Root'.'|'.0
def _jm_obj_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.0]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_6_must:  # must
            must_count += 1
            if not _jm_obj_6_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Model#Root'.'|'.0.{prop}]")
                return False
        elif prop in _jm_obj_6_may:  # may
            if not _jm_obj_6_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.0.{prop}]")
                return False
        elif _jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^(<=|>=|<|>|≥|≤)$/
            # $.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            result = isinstance(val, int) and not isinstance(val, bool)
            if not result:
                rep is None or rep.append(f"not a -1 int at {lpath} [$.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]")
            if not result:
                # $.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                result = isinstance(val, float)
                if not result:
                    rep is None or rep.append(f"not a -1.0 float at {lpath} [$.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]")
                if not result:
                    # $.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    result = isinstance(val, str)
                    if not result:
                        rep is None or rep.append(f"not an expected string at {lpath} [$.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]")
            if not result:
                rep is None or rep.append(f"not any model match at {lpath} [$.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|']")
            if not result:
                return False
        elif _jm_re_1(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^(=|!=|≠)$/
            # $.'$Model#Root'.'|'.0.'/^(=|!=|≠)$/'
            result = json_model_51(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Val at {lpath} [$.'$Model#Root'.'|'.0.'/^(=|!=|≠)$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.0]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Model#Root'.'|'.0]")
    return result


# object $.'$Model#Root'.'|'.1.'$'
def _jm_f_23(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.1.'$']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_23_may:  # may
            if not _jm_f_23_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.1.'$'.{prop}]")
                return False
        elif _jm_re_3(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$Model#Root'.'|'.1.'$'.'/.+/'
            result = json_model_65(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Root'.'|'.1.'$'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.1.'$']")
            return False
    return True


# object $.'$Model#Root'.'|'.1.'%'
def _jm_f_26(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.1.'%']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_26_may:  # may
            if not _jm_f_26_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.1.'%'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$Model#Root'.'|'.1.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_5(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$Model#Root'.'|'.1.'%'.'/^\\..+$/']")
            if not result:
                return False
        elif _jm_re_6(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$Model#Root'.'|'.1.'%'.'/^\\$.*$/'
            result = json_model_63(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$Model#Root'.'|'.1.'%'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.1.'%']")
            return False
    return True


# object $.'$Model#Root'.'|'.1
def _jm_obj_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.1]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_7_must:  # must
            must_count += 1
            if not _jm_obj_7_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Model#Root'.'|'.1.{prop}]")
                return False
        elif prop in _jm_obj_7_may:  # may
            if not _jm_obj_7_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.1.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.1]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Model#Root'.'|'.1]")
    return result


# object $.'$Model#Root'.'|'.2.'$'
def _jm_f_31(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.2.'$']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_31_may:  # may
            if not _jm_f_31_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.2.'$'.{prop}]")
                return False
        elif _jm_re_3(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$Model#Root'.'|'.2.'$'.'/.+/'
            result = json_model_65(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Root'.'|'.2.'$'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.2.'$']")
            return False
    return True


# object $.'$Model#Root'.'|'.2.'%'
def _jm_f_34(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.2.'%']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_34_may:  # may
            if not _jm_f_34_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.2.'%'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$Model#Root'.'|'.2.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_5(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$Model#Root'.'|'.2.'%'.'/^\\..+$/']")
            if not result:
                return False
        elif _jm_re_6(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$Model#Root'.'|'.2.'%'.'/^\\$.*$/'
            result = json_model_63(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$Model#Root'.'|'.2.'%'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.2.'%']")
            return False
    return True


# object $.'$Model#Root'.'|'.2
def _jm_obj_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.2]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_8_must:  # must
            must_count += 1
            if not _jm_obj_8_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Model#Root'.'|'.2.{prop}]")
                return False
        elif prop in _jm_obj_8_may:  # may
            if not _jm_obj_8_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.2.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.2]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Model#Root'.'|'.2]")
    return result


# object $.'$Model#Root'.'|'.3.'$'
def _jm_f_39(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.3.'$']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_39_may:  # may
            if not _jm_f_39_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.3.'$'.{prop}]")
                return False
        elif _jm_re_3(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$Model#Root'.'|'.3.'$'.'/.+/'
            result = json_model_65(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Root'.'|'.3.'$'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.3.'$']")
            return False
    return True


# object $.'$Model#Root'.'|'.3.'%'
def _jm_f_42(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.3.'%']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_42_may:  # may
            if not _jm_f_42_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.3.'%'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$Model#Root'.'|'.3.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_5(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$Model#Root'.'|'.3.'%'.'/^\\..+$/']")
            if not result:
                return False
        elif _jm_re_6(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$Model#Root'.'|'.3.'%'.'/^\\$.*$/'
            result = json_model_63(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$Model#Root'.'|'.3.'%'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.3.'%']")
            return False
    return True


# object $.'$Model#Root'.'|'.3
def _jm_obj_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.3]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_9_must:  # must
            must_count += 1
            if not _jm_obj_9_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Model#Root'.'|'.3.{prop}]")
                return False
        elif prop in _jm_obj_9_may:  # may
            if not _jm_obj_9_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.3.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.3]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Model#Root'.'|'.3]")
    return result


# object $.'$Model#Root'.'|'.4.'$'
def _jm_f_47(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.4.'$']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_47_may:  # may
            if not _jm_f_47_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.4.'$'.{prop}]")
                return False
        elif _jm_re_3(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$Model#Root'.'|'.4.'$'.'/.+/'
            result = json_model_65(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Root'.'|'.4.'$'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.4.'$']")
            return False
    return True


# object $.'$Model#Root'.'|'.4.'%'
def _jm_f_50(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.4.'%']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_50_may:  # may
            if not _jm_f_50_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.4.'%'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$Model#Root'.'|'.4.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_5(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$Model#Root'.'|'.4.'%'.'/^\\..+$/']")
            if not result:
                return False
        elif _jm_re_6(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$Model#Root'.'|'.4.'%'.'/^\\$.*$/'
            result = json_model_63(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$Model#Root'.'|'.4.'%'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.4.'%']")
            return False
    return True


# object $.'$Model#Root'.'|'.4
def _jm_obj_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.4]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_10_must:  # must
            must_count += 1
            if not _jm_obj_10_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Model#Root'.'|'.4.{prop}]")
                return False
        elif prop in _jm_obj_10_may:  # may
            if not _jm_obj_10_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.4.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.4]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Model#Root'.'|'.4]")
    return result


# object $.'$Model#Root'.'|'.5.'$'
def _jm_f_54(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.5.'$']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_54_may:  # may
            if not _jm_f_54_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.5.'$'.{prop}]")
                return False
        elif _jm_re_3(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$Model#Root'.'|'.5.'$'.'/.+/'
            result = json_model_65(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Root'.'|'.5.'$'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.5.'$']")
            return False
    return True


# object $.'$Model#Root'.'|'.5.'%'
def _jm_f_57(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.5.'%']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_57_may:  # may
            if not _jm_f_57_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.5.'%'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$Model#Root'.'|'.5.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_5(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$Model#Root'.'|'.5.'%'.'/^\\..+$/']")
            if not result:
                return False
        elif _jm_re_6(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$Model#Root'.'|'.5.'%'.'/^\\$.*$/'
            result = json_model_63(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$Model#Root'.'|'.5.'%'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Root'.'|'.5.'%']")
            return False
    return True


# object $.'$Model#Root'.'|'.5
def _jm_obj_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Root'.'|'.5]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_11_may:  # may
            if not _jm_obj_11_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Root'.'|'.5.{prop}]")
                return False
        elif _jm_re_2(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^[@|&^+/*]$/
            # $.'$Model#Root'.'|'.5.'/^[@|&^+/*]$/'
            result = False or _rep(f"invalid $NONE at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $NONE at {lpath} [$.'$Model#Root'.'|'.5.'/^[@|&^+/*]$/']")
            if not result:
                return False
        else:  # catch all
            # $.'$Model#Root'.'|'.5.''
            result = json_model_65(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Root'.'|'.5.'']")
            if not result:
                rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Model#Root'.'|'.5.'']")
                return False
    return True

# define "$Model#Root" ($.'$Model#Root')
def json_model_70(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Root'
    result = isinstance(value, dict)
    if result:
        # $.'$Model#Root'.'|'.0
        result = _jm_obj_6(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Root'.'|'.0]")
        if not result:
            # $.'$Model#Root'.'|'.1
            result = _jm_obj_7(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Root'.'|'.1]")
            if not result:
                # $.'$Model#Root'.'|'.2
                result = _jm_obj_8(value, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Root'.'|'.2]")
                if not result:
                    # $.'$Model#Root'.'|'.3
                    result = _jm_obj_9(value, path, rep)
                    if not result:
                        rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Root'.'|'.3]")
                    if not result:
                        # $.'$Model#Root'.'|'.4
                        result = _jm_obj_10(value, path, rep)
                        if not result:
                            rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Root'.'|'.4]")
                        if not result:
                            # $.'$Model#Root'.'|'.5
                            result = _jm_obj_11(value, path, rep)
                            if not result:
                                rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Root'.'|'.5]")
        if not result:
            rep is None or rep.append(f"not any model match at {path} [$.'$Model#Root'.'|']")
    return result

# define "$Model#Url" ($.'$Model#Url')
def json_model_50(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    result = isinstance(value, str) and _jm_re_7(value) is not None or _rep(f"does not match FESC at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected REGEX at {path} [$.'$Model#Url']")
    return result


# object $.'$Model#Trafo'.'|'.1.'*'.'|'.1
def _jm_obj_13(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Trafo'.'|'.1.'*'.'|'.1]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Model#Trafo'.'|'.1.'*'.'|'.1.''
        result = json_model_65(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Trafo'.'|'.1.'*'.'|'.1.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Model#Trafo'.'|'.1.'*'.'|'.1.'']")
            return False
    return True


# object $.'$Model#Trafo'.'|'.1
def _jm_obj_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Trafo'.'|'.1]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_12_must:  # must
            must_count += 1
            if not _jm_obj_12_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Model#Trafo'.'|'.1.{prop}]")
                return False
        elif prop in _jm_obj_12_may:  # may
            if not _jm_obj_12_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Trafo'.'|'.1.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Trafo'.'|'.1]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Model#Trafo'.'|'.1]")
    return result


# object $.'$Model#Trafo'.'|'.2.'*'.'|'.1
def _jm_obj_15(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Trafo'.'|'.2.'*'.'|'.1]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Model#Trafo'.'|'.2.'*'.'|'.1.''
        result = json_model_65(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Model#Trafo'.'|'.2.'*'.'|'.1.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Model#Trafo'.'|'.2.'*'.'|'.1.'']")
            return False
    return True


# object $.'$Model#Trafo'.'|'.2
def _jm_obj_14(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Model#Trafo'.'|'.2]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_14_must:  # must
            must_count += 1
            if not _jm_obj_14_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Model#Trafo'.'|'.2.{prop}]")
                return False
        elif prop in _jm_obj_14_may:  # may
            if not _jm_obj_14_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Model#Trafo'.'|'.2.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Model#Trafo'.'|'.2]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Model#Trafo'.'|'.2]")
    return result

# define "$Model#Trafo" ($.'$Model#Trafo')
def json_model_63(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model#Trafo'
    # $.'$Model#Trafo'.'|'.0
    result = json_model_65(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Model at {path} [$.'$Model#Trafo'.'|'.0]")
    if not result:
        # $.'$Model#Trafo'.'|'.1
        result = _jm_obj_12(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Trafo'.'|'.1]")
        if not result:
            # $.'$Model#Trafo'.'|'.2
            result = _jm_obj_14(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected object at {path} [$.'$Model#Trafo'.'|'.2]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Model#Trafo'.'|']")
    return result

# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = json_model_49(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Model at {path} [$]")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
_jm_obj_0_must = {
    "@": _jm_f_0,
}
_jm_obj_0_may = {
    "#": _jm_f_1,
    "!": _jm_f_2,
}
_jm_obj_1_must = {
    "|": _jm_f_3,
}
_jm_obj_1_may = {
    "#": _jm_f_4,
}
_jm_obj_2_must = {
    "&": _jm_f_5,
}
_jm_obj_2_may = {
    "#": _jm_f_6,
}
_jm_obj_3_must = {
    "^": _jm_f_7,
}
_jm_obj_3_may = {
    "#": _jm_f_8,
}
_jm_obj_4_must = {
    "+": _jm_f_9,
}
_jm_obj_4_may = {
    "#": _jm_f_10,
}
_jm_obj_5_may = {
    "#": _jm_f_11,
}
_jm_obj_6_must = {
    "@": _jm_f_12,
}
_jm_obj_6_may = {
    "~": _jm_f_13,
    "$": _jm_f_14,
    "%": _jm_f_17,
    "#": _jm_f_19,
    "!": _jm_f_20,
}
_jm_f_14_may = {
    "#": _jm_f_15,
    "": _jm_f_16,
}
_jm_f_17_may = {
    "#": _jm_f_18,
}
_jm_obj_7_must = {
    "|": _jm_f_21,
}
_jm_obj_7_may = {
    "~": _jm_f_22,
    "$": _jm_f_23,
    "%": _jm_f_26,
    "#": _jm_f_28,
}
_jm_f_23_may = {
    "#": _jm_f_24,
    "": _jm_f_25,
}
_jm_f_26_may = {
    "#": _jm_f_27,
}
_jm_obj_8_must = {
    "&": _jm_f_29,
}
_jm_obj_8_may = {
    "~": _jm_f_30,
    "$": _jm_f_31,
    "%": _jm_f_34,
    "#": _jm_f_36,
}
_jm_f_31_may = {
    "#": _jm_f_32,
    "": _jm_f_33,
}
_jm_f_34_may = {
    "#": _jm_f_35,
}
_jm_obj_9_must = {
    "^": _jm_f_37,
}
_jm_obj_9_may = {
    "~": _jm_f_38,
    "$": _jm_f_39,
    "%": _jm_f_42,
    "#": _jm_f_44,
}
_jm_f_39_may = {
    "#": _jm_f_40,
    "": _jm_f_41,
}
_jm_f_42_may = {
    "#": _jm_f_43,
}
_jm_obj_10_must = {
    "+": _jm_f_45,
}
_jm_obj_10_may = {
    "~": _jm_f_46,
    "$": _jm_f_47,
    "%": _jm_f_50,
    "#": _jm_f_52,
}
_jm_f_47_may = {
    "#": _jm_f_48,
    "": _jm_f_49,
}
_jm_f_50_may = {
    "#": _jm_f_51,
}
_jm_obj_11_may = {
    "~": _jm_f_53,
    "$": _jm_f_54,
    "%": _jm_f_57,
    "#": _jm_f_59,
}
_jm_f_54_may = {
    "#": _jm_f_55,
    "": _jm_f_56,
}
_jm_f_57_may = {
    "#": _jm_f_58,
}
_jm_obj_12_must = {
    "/": _jm_f_60,
}
_jm_obj_12_may = {
    "#": _jm_f_61,
    "*": _jm_f_62,
}
_jm_obj_14_must = {
    "*": _jm_f_63,
}
_jm_obj_14_may = {
    "#": _jm_f_64,
    "/": _jm_f_65,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

