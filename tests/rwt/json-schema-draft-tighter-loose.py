#! /bin/env python
#
# Model: ./json-schema-draft-tighter-loose.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

_jm_obj_0_must: PropMap
json_model_218_may: PropMap
json_model_219_must: PropMap
json_model_219_may: PropMap
json_model_220_must: PropMap
json_model_220_may: PropMap
json_model_221_must: PropMap
json_model_221_may: PropMap
json_model_222_must: PropMap
json_model_222_may: PropMap
json_model_223_must: PropMap
json_model_223_may: PropMap
json_model_224_must: PropMap
json_model_224_may: PropMap
json_model_225_must: PropMap
json_model_225_may: PropMap
json_model_226_must: PropMap
json_model_226_may: PropMap
json_model_227_must: PropMap
json_model_227_may: PropMap
json_model_228_must: PropMap
json_model_228_may: PropMap
json_model_229_must: PropMap
json_model_229_may: PropMap
json_model_230_must: PropMap
json_model_230_may: PropMap
json_model_231_must: PropMap
json_model_231_may: PropMap

def _is_valid_re(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except Exception as e:
            rep is None or rep.append(f"regex compile error at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for regex at {path}: {_tname(value)}")
    return False

def _is_valid_url(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except Exception as e:
            rep is None or re.append(f"invalid url at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for url at {path}: {_tname(value)}")
    return False

# define "_jm_obj_0_must_$schema" ($.'$tight#RootSchema'.'&'.0.'$schema')
def _jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#RootSchema'.'&'.0.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#RootSchema'.'&'.0.'$schema']")
    return result

# define "json_model_218_may_$schema" ($.'$tight#metas'.'$schema')
def _jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#metas'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#metas'.'$schema']")
    return result

# define "json_model_218_may_$id" ($.'$tight#metas'.'$id')
def _jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#metas'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#metas'.'$id']")
    return result

# define "json_model_218_may_id" ($.'$tight#metas'.id)
def _jm_f_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#metas'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#metas'.id]")
    return result

# define "json_model_218_may_$comment" ($.'$tight#metas'.'$comment')
def _jm_f_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#metas'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#metas'.'$comment']")
    return result

# define "json_model_218_may_title" ($.'$tight#metas'.title)
def _jm_f_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#metas'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#metas'.title]")
    return result

# define "json_model_218_may_default" ($.'$tight#metas'.default)
def _jm_f_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#metas'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#metas'.default]")
    return result

# define "json_model_218_may_examples" ($.'$tight#metas'.examples)
def _jm_f_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#metas'.examples
    result = isinstance(value, list)
    if result:
        for array_0_idx, array_0_item in enumerate(value):
            lpath = path + '.' + str(array_0_idx)
            # $.'$tight#metas'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#metas'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#metas'.examples]")
    return result

# define "json_model_218_may_description" ($.'$tight#metas'.description)
def _jm_f_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#metas'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#metas'.description]")
    return result





# define "json_model_219_must_type" ($.'$tight#String'.type)
def _jm_f_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#String'.type
    result = isinstance(value, str) and value == "string"
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#String'.type]")
    return result

# define "json_model_219_may_$schema" ($.'$tight#String'.'$schema')
def _jm_f_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#String'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#String'.'$schema']")
    return result

# define "json_model_219_may_$id" ($.'$tight#String'.'$id')
def _jm_f_13(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#String'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#String'.'$id']")
    return result

# define "json_model_219_may_id" ($.'$tight#String'.id)
def _jm_f_14(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#String'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#String'.id]")
    return result

# define "json_model_219_may_$comment" ($.'$tight#String'.'$comment')
def _jm_f_15(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#String'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#String'.'$comment']")
    return result

# define "json_model_219_may_title" ($.'$tight#String'.title)
def _jm_f_16(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#String'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#String'.title]")
    return result

# define "json_model_219_may_default" ($.'$tight#String'.default)
def _jm_f_17(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#String'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#String'.default]")
    return result

# define "json_model_219_may_examples" ($.'$tight#String'.examples)
def _jm_f_18(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#String'.examples
    result = isinstance(value, list)
    if result:
        for array_1_idx, array_1_item in enumerate(value):
            lpath = path + '.' + str(array_1_idx)
            # $.'$tight#String'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#String'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#String'.examples]")
    return result

# define "json_model_219_may_description" ($.'$tight#String'.description)
def _jm_f_19(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#String'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#String'.description]")
    return result





# define "json_model_219_may_pattern" ($.'$tight#String'.pattern)
def _jm_f_22(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#String'.pattern
    result = _is_valid_re(value, path, rep) or _rep(f"invalid $REGEX at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $REGEX at {path} [$.'$tight#String'.pattern]")
    return result

# define "json_model_219_may_minLength" ($.'$tight#String'.minLength)
def _jm_f_23(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#String'.minLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$tight#String'.minLength]")
    return result

# define "json_model_219_may_maxLength" ($.'$tight#String'.maxLength)
def _jm_f_24(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#String'.maxLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$tight#String'.maxLength]")
    return result

# define "json_model_219_may_format" ($.'$tight#String'.format)
def _jm_f_25(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#String'.format
    result = not isinstance(value, (list, dict)) and value in {'byte', 'date', 'date-time', 'double', 'duration', 'email', 'hostname', 'idn-email', 'idn-hostname', 'int', 'int32', 'int64', 'ipv4', 'ipv6', 'iri', 'iri-reference', 'json-pointer', 'mime-type', 'regex', 'relative-json-pointer', 'time', 'uint', 'uint32', 'uint64', 'uri', 'uri-reference', 'uuid'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$tight#String'.format.'|']")
    return result

# define "json_model_220_must_type" ($.'$tight#Array'.type)
def _jm_f_26(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.type
    result = isinstance(value, str) and value == "array"
    if not result:
        rep is None or rep.append(f"not an expected array at {path} [$.'$tight#Array'.type]")
    return result

# define "json_model_220_may_$schema" ($.'$tight#Array'.'$schema')
def _jm_f_27(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Array'.'$schema']")
    return result

# define "json_model_220_may_$id" ($.'$tight#Array'.'$id')
def _jm_f_28(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Array'.'$id']")
    return result

# define "json_model_220_may_id" ($.'$tight#Array'.id)
def _jm_f_29(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Array'.id]")
    return result

# define "json_model_220_may_$comment" ($.'$tight#Array'.'$comment')
def _jm_f_30(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Array'.'$comment']")
    return result

# define "json_model_220_may_title" ($.'$tight#Array'.title)
def _jm_f_31(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Array'.title]")
    return result

# define "json_model_220_may_default" ($.'$tight#Array'.default)
def _jm_f_32(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#Array'.default]")
    return result

# define "json_model_220_may_examples" ($.'$tight#Array'.examples)
def _jm_f_33(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.examples
    result = isinstance(value, list)
    if result:
        for array_2_idx, array_2_item in enumerate(value):
            lpath = path + '.' + str(array_2_idx)
            # $.'$tight#Array'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#Array'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#Array'.examples]")
    return result

# define "json_model_220_may_description" ($.'$tight#Array'.description)
def _jm_f_34(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Array'.description]")
    return result





# define "json_model_220_may_prefixItems" ($.'$tight#Array'.prefixItems)
def _jm_f_37(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.prefixItems
    result = json_model_213(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$tight#Array'.prefixItems]")
    return result

# define "json_model_220_may_items" ($.'$tight#Array'.items)
def _jm_f_38(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.items
    # $.'$tight#Array'.items.'|'.0
    result = json_model_233(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$tight#Array'.items.'|'.0]")
    if not result:
        # $.'$tight#Array'.items.'|'.1
        result = json_model_213(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$tight#Array'.items.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$tight#Array'.items.'|']")
    return result

# define "json_model_220_may_additionalItems" ($.'$tight#Array'.additionalItems)
def _jm_f_39(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.additionalItems
    result = json_model_233(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$tight#Array'.additionalItems]")
    return result

# define "json_model_220_may_minItems" ($.'$tight#Array'.minItems)
def _jm_f_40(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.minItems
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$tight#Array'.minItems]")
    return result

# define "json_model_220_may_maxItems" ($.'$tight#Array'.maxItems)
def _jm_f_41(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.maxItems
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$tight#Array'.maxItems]")
    return result

# define "json_model_220_may_uniqueItems" ($.'$tight#Array'.uniqueItems)
def _jm_f_42(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Array'.uniqueItems
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$tight#Array'.uniqueItems]")
    return result

# define "json_model_221_must_type" ($.'$tight#Object'.type)
def _jm_f_43(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Object'.type
    result = isinstance(value, str) and value == "object"
    if not result:
        rep is None or rep.append(f"not an expected object at {path} [$.'$tight#Object'.type]")
    return result

# define "json_model_221_may_$schema" ($.'$tight#Object'.'$schema')
def _jm_f_44(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Object'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Object'.'$schema']")
    return result

# define "json_model_221_may_$id" ($.'$tight#Object'.'$id')
def _jm_f_45(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Object'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Object'.'$id']")
    return result

# define "json_model_221_may_id" ($.'$tight#Object'.id)
def _jm_f_46(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Object'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Object'.id]")
    return result

# define "json_model_221_may_$comment" ($.'$tight#Object'.'$comment')
def _jm_f_47(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Object'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Object'.'$comment']")
    return result

# define "json_model_221_may_title" ($.'$tight#Object'.title)
def _jm_f_48(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Object'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Object'.title]")
    return result

# define "json_model_221_may_default" ($.'$tight#Object'.default)
def _jm_f_49(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Object'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#Object'.default]")
    return result

# define "json_model_221_may_examples" ($.'$tight#Object'.examples)
def _jm_f_50(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Object'.examples
    result = isinstance(value, list)
    if result:
        for array_4_idx, array_4_item in enumerate(value):
            lpath = path + '.' + str(array_4_idx)
            # $.'$tight#Object'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#Object'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#Object'.examples]")
    return result

# define "json_model_221_may_description" ($.'$tight#Object'.description)
def _jm_f_51(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Object'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Object'.description]")
    return result







# define "json_model_221_may_required" ($.'$tight#Object'.required)
def _jm_f_55(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Object'.required
    result = isinstance(value, list)
    if result:
        for array_5_idx, array_5_item in enumerate(value):
            lpath = path + '.' + str(array_5_idx)
            # $.'$tight#Object'.required.0
            result = isinstance(array_5_item, str)
            if not result:
                rep is None or rep.append(f"not an expected string at {lpath} [$.'$tight#Object'.required.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#Object'.required]")
    return result

# define "json_model_221_may_additionalProperties" ($.'$tight#Object'.additionalProperties)
def _jm_f_56(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Object'.additionalProperties
    result = json_model_233(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$tight#Object'.additionalProperties]")
    return result



# define "json_model_222_must_type" ($.'$tight#Integer'.type)
def _jm_f_58(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Integer'.type
    result = isinstance(value, str) and value == "integer"
    if not result:
        rep is None or rep.append(f"not an expected integer at {path} [$.'$tight#Integer'.type]")
    return result

# define "json_model_222_may_$schema" ($.'$tight#Integer'.'$schema')
def _jm_f_59(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Integer'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Integer'.'$schema']")
    return result

# define "json_model_222_may_$id" ($.'$tight#Integer'.'$id')
def _jm_f_60(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Integer'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Integer'.'$id']")
    return result

# define "json_model_222_may_id" ($.'$tight#Integer'.id)
def _jm_f_61(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Integer'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Integer'.id]")
    return result

# define "json_model_222_may_$comment" ($.'$tight#Integer'.'$comment')
def _jm_f_62(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Integer'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Integer'.'$comment']")
    return result

# define "json_model_222_may_title" ($.'$tight#Integer'.title)
def _jm_f_63(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Integer'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Integer'.title]")
    return result

# define "json_model_222_may_default" ($.'$tight#Integer'.default)
def _jm_f_64(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Integer'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#Integer'.default]")
    return result

# define "json_model_222_may_examples" ($.'$tight#Integer'.examples)
def _jm_f_65(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Integer'.examples
    result = isinstance(value, list)
    if result:
        for array_6_idx, array_6_item in enumerate(value):
            lpath = path + '.' + str(array_6_idx)
            # $.'$tight#Integer'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#Integer'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#Integer'.examples]")
    return result

# define "json_model_222_may_description" ($.'$tight#Integer'.description)
def _jm_f_66(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Integer'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Integer'.description]")
    return result





# define "json_model_222_may_minimum" ($.'$tight#Integer'.minimum)
def _jm_f_69(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Integer'.minimum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$tight#Integer'.minimum]")
    return result

# define "json_model_222_may_maximum" ($.'$tight#Integer'.maximum)
def _jm_f_70(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Integer'.maximum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$tight#Integer'.maximum]")
    return result

# define "json_model_223_must_type" ($.'$tight#Number'.type)
def _jm_f_71(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Number'.type
    result = isinstance(value, str) and value == "number"
    if not result:
        rep is None or rep.append(f"not an expected number at {path} [$.'$tight#Number'.type]")
    return result

# define "json_model_223_may_$schema" ($.'$tight#Number'.'$schema')
def _jm_f_72(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Number'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Number'.'$schema']")
    return result

# define "json_model_223_may_$id" ($.'$tight#Number'.'$id')
def _jm_f_73(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Number'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Number'.'$id']")
    return result

# define "json_model_223_may_id" ($.'$tight#Number'.id)
def _jm_f_74(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Number'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Number'.id]")
    return result

# define "json_model_223_may_$comment" ($.'$tight#Number'.'$comment')
def _jm_f_75(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Number'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Number'.'$comment']")
    return result

# define "json_model_223_may_title" ($.'$tight#Number'.title)
def _jm_f_76(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Number'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Number'.title]")
    return result

# define "json_model_223_may_default" ($.'$tight#Number'.default)
def _jm_f_77(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Number'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#Number'.default]")
    return result

# define "json_model_223_may_examples" ($.'$tight#Number'.examples)
def _jm_f_78(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Number'.examples
    result = isinstance(value, list)
    if result:
        for array_7_idx, array_7_item in enumerate(value):
            lpath = path + '.' + str(array_7_idx)
            # $.'$tight#Number'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#Number'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#Number'.examples]")
    return result

# define "json_model_223_may_description" ($.'$tight#Number'.description)
def _jm_f_79(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Number'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Number'.description]")
    return result





# define "json_model_223_may_minimum" ($.'$tight#Number'.minimum)
def _jm_f_82(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Number'.minimum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$tight#Number'.minimum]")
    return result

# define "json_model_223_may_maximum" ($.'$tight#Number'.maximum)
def _jm_f_83(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Number'.maximum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$tight#Number'.maximum]")
    return result

# define "json_model_224_must_type" ($.'$tight#Bool'.type)
def _jm_f_84(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Bool'.type
    result = isinstance(value, str) and value == "boolean"
    if not result:
        rep is None or rep.append(f"not an expected boolean at {path} [$.'$tight#Bool'.type]")
    return result

# define "json_model_224_may_$schema" ($.'$tight#Bool'.'$schema')
def _jm_f_85(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Bool'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Bool'.'$schema']")
    return result

# define "json_model_224_may_$id" ($.'$tight#Bool'.'$id')
def _jm_f_86(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Bool'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Bool'.'$id']")
    return result

# define "json_model_224_may_id" ($.'$tight#Bool'.id)
def _jm_f_87(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Bool'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Bool'.id]")
    return result

# define "json_model_224_may_$comment" ($.'$tight#Bool'.'$comment')
def _jm_f_88(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Bool'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Bool'.'$comment']")
    return result

# define "json_model_224_may_title" ($.'$tight#Bool'.title)
def _jm_f_89(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Bool'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Bool'.title]")
    return result

# define "json_model_224_may_default" ($.'$tight#Bool'.default)
def _jm_f_90(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Bool'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#Bool'.default]")
    return result

# define "json_model_224_may_examples" ($.'$tight#Bool'.examples)
def _jm_f_91(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Bool'.examples
    result = isinstance(value, list)
    if result:
        for array_8_idx, array_8_item in enumerate(value):
            lpath = path + '.' + str(array_8_idx)
            # $.'$tight#Bool'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#Bool'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#Bool'.examples]")
    return result

# define "json_model_224_may_description" ($.'$tight#Bool'.description)
def _jm_f_92(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Bool'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Bool'.description]")
    return result





# define "json_model_225_must_type" ($.'$tight#Null'.type)
def _jm_f_95(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Null'.type
    result = isinstance(value, str) and value == "null"
    if not result:
        rep is None or rep.append(f"not an expected null at {path} [$.'$tight#Null'.type]")
    return result

# define "json_model_225_may_$schema" ($.'$tight#Null'.'$schema')
def _jm_f_96(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Null'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Null'.'$schema']")
    return result

# define "json_model_225_may_$id" ($.'$tight#Null'.'$id')
def _jm_f_97(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Null'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Null'.'$id']")
    return result

# define "json_model_225_may_id" ($.'$tight#Null'.id)
def _jm_f_98(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Null'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Null'.id]")
    return result

# define "json_model_225_may_$comment" ($.'$tight#Null'.'$comment')
def _jm_f_99(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Null'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Null'.'$comment']")
    return result

# define "json_model_225_may_title" ($.'$tight#Null'.title)
def _jm_f_100(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Null'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Null'.title]")
    return result

# define "json_model_225_may_default" ($.'$tight#Null'.default)
def _jm_f_101(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Null'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#Null'.default]")
    return result

# define "json_model_225_may_examples" ($.'$tight#Null'.examples)
def _jm_f_102(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Null'.examples
    result = isinstance(value, list)
    if result:
        for array_9_idx, array_9_item in enumerate(value):
            lpath = path + '.' + str(array_9_idx)
            # $.'$tight#Null'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#Null'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#Null'.examples]")
    return result

# define "json_model_225_may_description" ($.'$tight#Null'.description)
def _jm_f_103(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Null'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Null'.description]")
    return result





# define "json_model_226_must_allOf" ($.'$tight#AllOf'.allOf)
def _jm_f_106(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AllOf'.allOf
    result = json_model_213(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$tight#AllOf'.allOf]")
    return result

# define "json_model_226_may_$schema" ($.'$tight#AllOf'.'$schema')
def _jm_f_107(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AllOf'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#AllOf'.'$schema']")
    return result

# define "json_model_226_may_$id" ($.'$tight#AllOf'.'$id')
def _jm_f_108(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AllOf'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#AllOf'.'$id']")
    return result

# define "json_model_226_may_id" ($.'$tight#AllOf'.id)
def _jm_f_109(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AllOf'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#AllOf'.id]")
    return result

# define "json_model_226_may_$comment" ($.'$tight#AllOf'.'$comment')
def _jm_f_110(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AllOf'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#AllOf'.'$comment']")
    return result

# define "json_model_226_may_title" ($.'$tight#AllOf'.title)
def _jm_f_111(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AllOf'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#AllOf'.title]")
    return result

# define "json_model_226_may_default" ($.'$tight#AllOf'.default)
def _jm_f_112(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AllOf'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#AllOf'.default]")
    return result

# define "json_model_226_may_examples" ($.'$tight#AllOf'.examples)
def _jm_f_113(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AllOf'.examples
    result = isinstance(value, list)
    if result:
        for array_10_idx, array_10_item in enumerate(value):
            lpath = path + '.' + str(array_10_idx)
            # $.'$tight#AllOf'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#AllOf'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#AllOf'.examples]")
    return result

# define "json_model_226_may_description" ($.'$tight#AllOf'.description)
def _jm_f_114(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AllOf'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#AllOf'.description]")
    return result





# define "json_model_227_must_anyOf" ($.'$tight#AnyOf'.anyOf)
def _jm_f_117(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AnyOf'.anyOf
    result = json_model_213(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$tight#AnyOf'.anyOf]")
    return result

# define "json_model_227_may_$schema" ($.'$tight#AnyOf'.'$schema')
def _jm_f_118(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AnyOf'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#AnyOf'.'$schema']")
    return result

# define "json_model_227_may_$id" ($.'$tight#AnyOf'.'$id')
def _jm_f_119(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AnyOf'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#AnyOf'.'$id']")
    return result

# define "json_model_227_may_id" ($.'$tight#AnyOf'.id)
def _jm_f_120(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AnyOf'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#AnyOf'.id]")
    return result

# define "json_model_227_may_$comment" ($.'$tight#AnyOf'.'$comment')
def _jm_f_121(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AnyOf'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#AnyOf'.'$comment']")
    return result

# define "json_model_227_may_title" ($.'$tight#AnyOf'.title)
def _jm_f_122(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AnyOf'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#AnyOf'.title]")
    return result

# define "json_model_227_may_default" ($.'$tight#AnyOf'.default)
def _jm_f_123(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AnyOf'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#AnyOf'.default]")
    return result

# define "json_model_227_may_examples" ($.'$tight#AnyOf'.examples)
def _jm_f_124(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AnyOf'.examples
    result = isinstance(value, list)
    if result:
        for array_11_idx, array_11_item in enumerate(value):
            lpath = path + '.' + str(array_11_idx)
            # $.'$tight#AnyOf'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#AnyOf'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#AnyOf'.examples]")
    return result

# define "json_model_227_may_description" ($.'$tight#AnyOf'.description)
def _jm_f_125(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#AnyOf'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#AnyOf'.description]")
    return result





# define "json_model_228_must_oneOf" ($.'$tight#OneOf'.oneOf)
def _jm_f_128(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#OneOf'.oneOf
    result = json_model_213(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$tight#OneOf'.oneOf]")
    return result

# define "json_model_228_may_$schema" ($.'$tight#OneOf'.'$schema')
def _jm_f_129(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#OneOf'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#OneOf'.'$schema']")
    return result

# define "json_model_228_may_$id" ($.'$tight#OneOf'.'$id')
def _jm_f_130(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#OneOf'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#OneOf'.'$id']")
    return result

# define "json_model_228_may_id" ($.'$tight#OneOf'.id)
def _jm_f_131(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#OneOf'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#OneOf'.id]")
    return result

# define "json_model_228_may_$comment" ($.'$tight#OneOf'.'$comment')
def _jm_f_132(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#OneOf'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#OneOf'.'$comment']")
    return result

# define "json_model_228_may_title" ($.'$tight#OneOf'.title)
def _jm_f_133(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#OneOf'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#OneOf'.title]")
    return result

# define "json_model_228_may_default" ($.'$tight#OneOf'.default)
def _jm_f_134(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#OneOf'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#OneOf'.default]")
    return result

# define "json_model_228_may_examples" ($.'$tight#OneOf'.examples)
def _jm_f_135(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#OneOf'.examples
    result = isinstance(value, list)
    if result:
        for array_12_idx, array_12_item in enumerate(value):
            lpath = path + '.' + str(array_12_idx)
            # $.'$tight#OneOf'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#OneOf'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#OneOf'.examples]")
    return result

# define "json_model_228_may_description" ($.'$tight#OneOf'.description)
def _jm_f_136(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#OneOf'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#OneOf'.description]")
    return result





# define "json_model_229_must_enum" ($.'$tight#Enum'.enum)
def _jm_f_139(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Enum'.enum
    result = json_model_212(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $enum at {path} [$.'$tight#Enum'.enum]")
    return result

# define "json_model_229_may_$schema" ($.'$tight#Enum'.'$schema')
def _jm_f_140(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Enum'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Enum'.'$schema']")
    return result

# define "json_model_229_may_$id" ($.'$tight#Enum'.'$id')
def _jm_f_141(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Enum'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Enum'.'$id']")
    return result

# define "json_model_229_may_id" ($.'$tight#Enum'.id)
def _jm_f_142(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Enum'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Enum'.id]")
    return result

# define "json_model_229_may_$comment" ($.'$tight#Enum'.'$comment')
def _jm_f_143(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Enum'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Enum'.'$comment']")
    return result

# define "json_model_229_may_title" ($.'$tight#Enum'.title)
def _jm_f_144(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Enum'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Enum'.title]")
    return result

# define "json_model_229_may_default" ($.'$tight#Enum'.default)
def _jm_f_145(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Enum'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#Enum'.default]")
    return result

# define "json_model_229_may_examples" ($.'$tight#Enum'.examples)
def _jm_f_146(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Enum'.examples
    result = isinstance(value, list)
    if result:
        for array_13_idx, array_13_item in enumerate(value):
            lpath = path + '.' + str(array_13_idx)
            # $.'$tight#Enum'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#Enum'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#Enum'.examples]")
    return result

# define "json_model_229_may_description" ($.'$tight#Enum'.description)
def _jm_f_147(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Enum'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Enum'.description]")
    return result





# define "json_model_230_must_const" ($.'$tight#Const'.const)
def _jm_f_150(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Const'.const
    result = json_model_211(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $const at {path} [$.'$tight#Const'.const]")
    return result

# define "json_model_230_may_$schema" ($.'$tight#Const'.'$schema')
def _jm_f_151(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Const'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Const'.'$schema']")
    return result

# define "json_model_230_may_$id" ($.'$tight#Const'.'$id')
def _jm_f_152(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Const'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Const'.'$id']")
    return result

# define "json_model_230_may_id" ($.'$tight#Const'.id)
def _jm_f_153(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Const'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Const'.id]")
    return result

# define "json_model_230_may_$comment" ($.'$tight#Const'.'$comment')
def _jm_f_154(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Const'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Const'.'$comment']")
    return result

# define "json_model_230_may_title" ($.'$tight#Const'.title)
def _jm_f_155(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Const'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Const'.title]")
    return result

# define "json_model_230_may_default" ($.'$tight#Const'.default)
def _jm_f_156(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Const'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#Const'.default]")
    return result

# define "json_model_230_may_examples" ($.'$tight#Const'.examples)
def _jm_f_157(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Const'.examples
    result = isinstance(value, list)
    if result:
        for array_17_idx, array_17_item in enumerate(value):
            lpath = path + '.' + str(array_17_idx)
            # $.'$tight#Const'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#Const'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#Const'.examples]")
    return result

# define "json_model_230_may_description" ($.'$tight#Const'.description)
def _jm_f_158(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Const'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Const'.description]")
    return result





# define "json_model_231_must_$ref" ($.'$tight#Ref'.'$ref')
def _jm_f_161(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Ref'.'$ref'
    result = _is_valid_url(value, path, rep) or _rep(f"invalid $URL at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $URL at {path} [$.'$tight#Ref'.'$ref']")
    return result

# define "json_model_231_may_$schema" ($.'$tight#Ref'.'$schema')
def _jm_f_162(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Ref'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Ref'.'$schema']")
    return result

# define "json_model_231_may_$id" ($.'$tight#Ref'.'$id')
def _jm_f_163(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Ref'.'$id'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Ref'.'$id']")
    return result

# define "json_model_231_may_id" ($.'$tight#Ref'.id)
def _jm_f_164(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Ref'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Ref'.id]")
    return result

# define "json_model_231_may_$comment" ($.'$tight#Ref'.'$comment')
def _jm_f_165(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Ref'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Ref'.'$comment']")
    return result

# define "json_model_231_may_title" ($.'$tight#Ref'.title)
def _jm_f_166(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Ref'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Ref'.title]")
    return result

# define "json_model_231_may_default" ($.'$tight#Ref'.default)
def _jm_f_167(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Ref'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$tight#Ref'.default]")
    return result

# define "json_model_231_may_examples" ($.'$tight#Ref'.examples)
def _jm_f_168(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Ref'.examples
    result = isinstance(value, list)
    if result:
        for array_18_idx, array_18_item in enumerate(value):
            lpath = path + '.' + str(array_18_idx)
            # $.'$tight#Ref'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#Ref'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#Ref'.examples]")
    return result

# define "json_model_231_may_description" ($.'$tight#Ref'.description)
def _jm_f_169(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Ref'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#Ref'.description]")
    return result






# define "$tight" ($.'$tight')
def json_model_210(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight'
    result = json_model_234(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $RootSchema at {path} [$.'$tight']")
    return result


# object $.'$tight#RootSchema'.'&'.0
def _jm_obj_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#RootSchema'.'&'.0]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_0_must:  # must
            must_count += 1
            if not _jm_obj_0_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#RootSchema'.'&'.0.{prop}]")
                return False
        else:  # catch all
            # $.'$tight#RootSchema'.'&'.0.''
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$tight#RootSchema'.'&'.0.'']")
            if not result:
                rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#RootSchema'.'&'.0.'']")
                return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#RootSchema'.'&'.0]")
    return result

# define "$tight#RootSchema" ($.'$tight#RootSchema')
def json_model_234(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#RootSchema'
    # $.'$tight#RootSchema'.'&'.0
    result = _jm_obj_0(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected object at {path} [$.'$tight#RootSchema'.'&'.0]")
    if result:
        # $.'$tight#RootSchema'.'&'.1
        result = json_model_232(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $ObjectSchema at {path} [$.'$tight#RootSchema'.'&'.1]")
    if not result:
        rep is None or rep.append(f"not all model match at {path} [$.'$tight#RootSchema'.'&']")
    return result

# define "$tight#ObjectSchema" ($.'$tight#ObjectSchema')
def json_model_232(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#ObjectSchema'
    # $.'$tight#ObjectSchema'.'|'.0
    result = json_model_225(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Null at {path} [$.'$tight#ObjectSchema'.'|'.0]")
    if not result:
        # $.'$tight#ObjectSchema'.'|'.1
        result = json_model_224(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Bool at {path} [$.'$tight#ObjectSchema'.'|'.1]")
        if not result:
            # $.'$tight#ObjectSchema'.'|'.2
            result = json_model_230(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Const at {path} [$.'$tight#ObjectSchema'.'|'.2]")
            if not result:
                # $.'$tight#ObjectSchema'.'|'.3
                result = json_model_229(value, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected $Enum at {path} [$.'$tight#ObjectSchema'.'|'.3]")
                if not result:
                    # $.'$tight#ObjectSchema'.'|'.4
                    result = json_model_222(value, path, rep)
                    if not result:
                        rep is None or rep.append(f"not an expected $Integer at {path} [$.'$tight#ObjectSchema'.'|'.4]")
                    if not result:
                        # $.'$tight#ObjectSchema'.'|'.5
                        result = json_model_223(value, path, rep)
                        if not result:
                            rep is None or rep.append(f"not an expected $Number at {path} [$.'$tight#ObjectSchema'.'|'.5]")
                        if not result:
                            # $.'$tight#ObjectSchema'.'|'.6
                            result = json_model_219(value, path, rep)
                            if not result:
                                rep is None or rep.append(f"not an expected $String at {path} [$.'$tight#ObjectSchema'.'|'.6]")
                            if not result:
                                # $.'$tight#ObjectSchema'.'|'.7
                                result = json_model_220(value, path, rep)
                                if not result:
                                    rep is None or rep.append(f"not an expected $Array at {path} [$.'$tight#ObjectSchema'.'|'.7]")
                                if not result:
                                    # $.'$tight#ObjectSchema'.'|'.8
                                    result = json_model_221(value, path, rep)
                                    if not result:
                                        rep is None or rep.append(f"not an expected $Object at {path} [$.'$tight#ObjectSchema'.'|'.8]")
                                    if not result:
                                        # $.'$tight#ObjectSchema'.'|'.9
                                        result = json_model_226(value, path, rep)
                                        if not result:
                                            rep is None or rep.append(f"not an expected $AllOf at {path} [$.'$tight#ObjectSchema'.'|'.9]")
                                        if not result:
                                            # $.'$tight#ObjectSchema'.'|'.10
                                            result = json_model_227(value, path, rep)
                                            if not result:
                                                rep is None or rep.append(f"not an expected $AnyOf at {path} [$.'$tight#ObjectSchema'.'|'.10]")
                                            if not result:
                                                # $.'$tight#ObjectSchema'.'|'.11
                                                result = json_model_228(value, path, rep)
                                                if not result:
                                                    rep is None or rep.append(f"not an expected $OneOf at {path} [$.'$tight#ObjectSchema'.'|'.11]")
                                                if not result:
                                                    # $.'$tight#ObjectSchema'.'|'.12
                                                    result = json_model_231(value, path, rep)
                                                    if not result:
                                                        rep is None or rep.append(f"not an expected $Ref at {path} [$.'$tight#ObjectSchema'.'|'.12]")
                                                    if not result:
                                                        # $.'$tight#ObjectSchema'.'|'.13
                                                        result = json_model_218(value, path, rep)
                                                        if not result:
                                                            rep is None or rep.append(f"not an expected $metas at {path} [$.'$tight#ObjectSchema'.'|'.13]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$tight#ObjectSchema'.'|']")
    return result


# object $.'$tight#metas'.'$defs'
def _jm_f_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#metas'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#metas'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#metas'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#metas'.'$defs'.'']")
            return False
    return True


# object $.'$tight#metas'.definitions
def _jm_f_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#metas'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#metas'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#metas'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#metas'.definitions.'']")
            return False
    return True


# object $.'$tight#metas'
def json_model_218(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#metas']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_218_may:  # may
            if not json_model_218_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#metas'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#metas']")
            return False
    return True




# object $.'$tight#String'.'$defs'
def _jm_f_20(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#String'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#String'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#String'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#String'.'$defs'.'']")
            return False
    return True


# object $.'$tight#String'.definitions
def _jm_f_21(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#String'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#String'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#String'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#String'.definitions.'']")
            return False
    return True


# object $.'$tight#String'
def json_model_219(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#String']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_219_must:  # must
            must_count += 1
            if not json_model_219_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#String'.{prop}]")
                return False
        elif prop in json_model_219_may:  # may
            if not json_model_219_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#String'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#String']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#String']")
    return result




# object $.'$tight#Array'.'$defs'
def _jm_f_35(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Array'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Array'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Array'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Array'.'$defs'.'']")
            return False
    return True


# object $.'$tight#Array'.definitions
def _jm_f_36(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Array'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Array'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Array'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Array'.definitions.'']")
            return False
    return True


# object $.'$tight#Array'
def json_model_220(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Array']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_220_must:  # must
            must_count += 1
            if not json_model_220_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#Array'.{prop}]")
                return False
        elif prop in json_model_220_may:  # may
            if not json_model_220_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#Array'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#Array']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#Array']")
    return result



# define "$tight#schemaArray" ($.'$tight#schemaArray')
def json_model_213(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#schemaArray'
    result = isinstance(value, list)
    if result:
        for array_3_idx, array_3_item in enumerate(value):
            lpath = path + '.' + str(array_3_idx)
            # $.'$tight#schemaArray'.0
            result = json_model_233(array_3_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#schemaArray'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#schemaArray']")
    return result


# object $.'$tight#Object'.'$defs'
def _jm_f_52(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Object'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Object'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Object'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Object'.'$defs'.'']")
            return False
    return True


# object $.'$tight#Object'.definitions
def _jm_f_53(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Object'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Object'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Object'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Object'.definitions.'']")
            return False
    return True


# object $.'$tight#Object'.properties
def _jm_f_54(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Object'.properties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Object'.properties.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Object'.properties.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Object'.properties.'']")
            return False
    return True


# object $.'$tight#Object'.patternProperties
def _jm_f_57(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Object'.patternProperties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if _is_valid_re(prop, path, rep) or _rep(f"invalid $REGEX at {path}", rep) or _rep(f"prop {prop} does not match $REGEX at {path}", rep):  # $REGEX
            # $.'$tight#Object'.patternProperties.'$REGEX'
            result = json_model_233(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Object'.patternProperties.'$REGEX']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#Object'.patternProperties]")
            return False
    return True


# object $.'$tight#Object'
def json_model_221(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Object']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_221_must:  # must
            must_count += 1
            if not json_model_221_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#Object'.{prop}]")
                return False
        elif prop in json_model_221_may:  # may
            if not json_model_221_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#Object'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#Object']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#Object']")
    return result




# object $.'$tight#Integer'.'$defs'
def _jm_f_67(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Integer'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Integer'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Integer'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Integer'.'$defs'.'']")
            return False
    return True


# object $.'$tight#Integer'.definitions
def _jm_f_68(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Integer'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Integer'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Integer'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Integer'.definitions.'']")
            return False
    return True


# object $.'$tight#Integer'
def json_model_222(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Integer']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_222_must:  # must
            must_count += 1
            if not json_model_222_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#Integer'.{prop}]")
                return False
        elif prop in json_model_222_may:  # may
            if not json_model_222_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#Integer'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#Integer']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#Integer']")
    return result




# object $.'$tight#Number'.'$defs'
def _jm_f_80(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Number'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Number'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Number'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Number'.'$defs'.'']")
            return False
    return True


# object $.'$tight#Number'.definitions
def _jm_f_81(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Number'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Number'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Number'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Number'.definitions.'']")
            return False
    return True


# object $.'$tight#Number'
def json_model_223(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Number']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_223_must:  # must
            must_count += 1
            if not json_model_223_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#Number'.{prop}]")
                return False
        elif prop in json_model_223_may:  # may
            if not json_model_223_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#Number'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#Number']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#Number']")
    return result




# object $.'$tight#Bool'.'$defs'
def _jm_f_93(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Bool'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Bool'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Bool'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Bool'.'$defs'.'']")
            return False
    return True


# object $.'$tight#Bool'.definitions
def _jm_f_94(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Bool'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Bool'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Bool'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Bool'.definitions.'']")
            return False
    return True


# object $.'$tight#Bool'
def json_model_224(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Bool']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_224_must:  # must
            must_count += 1
            if not json_model_224_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#Bool'.{prop}]")
                return False
        elif prop in json_model_224_may:  # may
            if not json_model_224_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#Bool'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#Bool']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#Bool']")
    return result




# object $.'$tight#Null'.'$defs'
def _jm_f_104(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Null'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Null'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Null'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Null'.'$defs'.'']")
            return False
    return True


# object $.'$tight#Null'.definitions
def _jm_f_105(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Null'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Null'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Null'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Null'.definitions.'']")
            return False
    return True


# object $.'$tight#Null'
def json_model_225(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Null']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_225_must:  # must
            must_count += 1
            if not json_model_225_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#Null'.{prop}]")
                return False
        elif prop in json_model_225_may:  # may
            if not json_model_225_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#Null'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#Null']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#Null']")
    return result




# object $.'$tight#AllOf'.'$defs'
def _jm_f_115(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#AllOf'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#AllOf'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#AllOf'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#AllOf'.'$defs'.'']")
            return False
    return True


# object $.'$tight#AllOf'.definitions
def _jm_f_116(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#AllOf'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#AllOf'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#AllOf'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#AllOf'.definitions.'']")
            return False
    return True


# object $.'$tight#AllOf'
def json_model_226(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#AllOf']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_226_must:  # must
            must_count += 1
            if not json_model_226_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#AllOf'.{prop}]")
                return False
        elif prop in json_model_226_may:  # may
            if not json_model_226_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#AllOf'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#AllOf']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#AllOf']")
    return result




# object $.'$tight#AnyOf'.'$defs'
def _jm_f_126(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#AnyOf'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#AnyOf'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#AnyOf'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#AnyOf'.'$defs'.'']")
            return False
    return True


# object $.'$tight#AnyOf'.definitions
def _jm_f_127(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#AnyOf'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#AnyOf'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#AnyOf'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#AnyOf'.definitions.'']")
            return False
    return True


# object $.'$tight#AnyOf'
def json_model_227(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#AnyOf']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_227_must:  # must
            must_count += 1
            if not json_model_227_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#AnyOf'.{prop}]")
                return False
        elif prop in json_model_227_may:  # may
            if not json_model_227_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#AnyOf'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#AnyOf']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#AnyOf']")
    return result




# object $.'$tight#OneOf'.'$defs'
def _jm_f_137(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#OneOf'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#OneOf'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#OneOf'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#OneOf'.'$defs'.'']")
            return False
    return True


# object $.'$tight#OneOf'.definitions
def _jm_f_138(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#OneOf'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#OneOf'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#OneOf'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#OneOf'.definitions.'']")
            return False
    return True


# object $.'$tight#OneOf'
def json_model_228(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#OneOf']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_228_must:  # must
            must_count += 1
            if not json_model_228_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#OneOf'.{prop}]")
                return False
        elif prop in json_model_228_may:  # may
            if not json_model_228_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#OneOf'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#OneOf']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#OneOf']")
    return result




# object $.'$tight#Enum'.'$defs'
def _jm_f_148(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Enum'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Enum'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Enum'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Enum'.'$defs'.'']")
            return False
    return True


# object $.'$tight#Enum'.definitions
def _jm_f_149(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Enum'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Enum'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Enum'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Enum'.definitions.'']")
            return False
    return True


# object $.'$tight#Enum'
def json_model_229(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Enum']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_229_must:  # must
            must_count += 1
            if not json_model_229_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#Enum'.{prop}]")
                return False
        elif prop in json_model_229_may:  # may
            if not json_model_229_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#Enum'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#Enum']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#Enum']")
    return result



# define "$tight#enum" ($.'$tight#enum')
def json_model_212(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#enum'
    result = isinstance(value, list)
    if result:
        # $.'$tight#enum'.'|'.0
        if True:
            for array_14_idx, array_14_item in enumerate(value):
                lpath = path + '.' + str(array_14_idx)
                # $.'$tight#enum'.'|'.0.0
                result = isinstance(array_14_item, str)
                if not result:
                    rep is None or rep.append(f"not an expected string at {lpath} [$.'$tight#enum'.'|'.0.0]")
                if not result:
                    break
        if not result:
            rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#enum'.'|'.0]")
        if not result:
            # $.'$tight#enum'.'|'.1
            if True:
                for array_15_idx, array_15_item in enumerate(value):
                    lpath = path + '.' + str(array_15_idx)
                    # $.'$tight#enum'.'|'.1.0
                    result = isinstance(array_15_item, int) and not isinstance(array_15_item, bool)
                    if not result:
                        rep is None or rep.append(f"not a -1 int at {lpath} [$.'$tight#enum'.'|'.1.0]")
                    if not result:
                        break
            if not result:
                rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#enum'.'|'.1]")
            if not result:
                # $.'$tight#enum'.'|'.2
                if True:
                    for array_16_idx, array_16_item in enumerate(value):
                        lpath = path + '.' + str(array_16_idx)
                        # $.'$tight#enum'.'|'.2.0
                        result = isinstance(array_16_item, bool)
                        if not result:
                            rep is None or rep.append(f"not a bool at {lpath} [$.'$tight#enum'.'|'.2.0]")
                        if not result:
                            break
                if not result:
                    rep is None or rep.append(f"not array or unexpected array at {path} [$.'$tight#enum'.'|'.2]")
        if not result:
            rep is None or rep.append(f"not any model match at {path} [$.'$tight#enum'.'|']")
    return result


# object $.'$tight#Const'.'$defs'
def _jm_f_159(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Const'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Const'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Const'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Const'.'$defs'.'']")
            return False
    return True


# object $.'$tight#Const'.definitions
def _jm_f_160(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Const'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Const'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Const'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Const'.definitions.'']")
            return False
    return True


# object $.'$tight#Const'
def json_model_230(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Const']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_230_must:  # must
            must_count += 1
            if not json_model_230_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#Const'.{prop}]")
                return False
        elif prop in json_model_230_may:  # may
            if not json_model_230_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#Const'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#Const']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#Const']")
    return result



# define "$tight#const" ($.'$tight#const')
def json_model_211(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#const'
    # $.'$tight#const'.'|'.0
    result = value is None
    if not result:
        rep is None or rep.append(f"not null at {path} [$.'$tight#const'.'|'.0]")
    if not result:
        # $.'$tight#const'.'|'.1
        result = isinstance(value, bool)
        if not result:
            rep is None or rep.append(f"not a bool at {path} [$.'$tight#const'.'|'.1]")
        if not result:
            # $.'$tight#const'.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool)
            if not result:
                rep is None or rep.append(f"not a -1 int at {path} [$.'$tight#const'.'|'.2]")
            if not result:
                # $.'$tight#const'.'|'.3
                result = isinstance(value, float)
                if not result:
                    rep is None or rep.append(f"not a -1.0 float at {path} [$.'$tight#const'.'|'.3]")
                if not result:
                    # $.'$tight#const'.'|'.4
                    result = isinstance(value, str)
                    if not result:
                        rep is None or rep.append(f"not an expected string at {path} [$.'$tight#const'.'|'.4]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$tight#const'.'|']")
    return result


# object $.'$tight#Ref'.'$defs'
def _jm_f_170(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Ref'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Ref'.'$defs'.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Ref'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Ref'.'$defs'.'']")
            return False
    return True


# object $.'$tight#Ref'.definitions
def _jm_f_171(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Ref'.definitions]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$tight#Ref'.definitions.''
        result = json_model_233(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$tight#Ref'.definitions.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$tight#Ref'.definitions.'']")
            return False
    return True


# object $.'$tight#Ref'
def json_model_231(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$tight#Ref']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_231_must:  # must
            must_count += 1
            if not json_model_231_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$tight#Ref'.{prop}]")
                return False
        elif prop in json_model_231_may:  # may
            if not json_model_231_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$tight#Ref'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$tight#Ref']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$tight#Ref']")
    return result



# define "$tight#Schema" ($.'$tight#Schema')
def json_model_233(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$tight#Schema'
    # $.'$tight#Schema'.'|'.0
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$tight#Schema'.'|'.0]")
    if not result:
        # $.'$tight#Schema'.'|'.1
        result = json_model_232(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $ObjectSchema at {path} [$.'$tight#Schema'.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$tight#Schema'.'|']")
    return result

# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = json_model_234(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $tight#RootSchema at {path} [$]")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
_jm_obj_0_must = {
    "$schema": _jm_f_0,
}
json_model_218_may = {
    "$schema": _jm_f_1,
    "$id": _jm_f_2,
    "id": _jm_f_3,
    "$comment": _jm_f_4,
    "title": _jm_f_5,
    "default": _jm_f_6,
    "examples": _jm_f_7,
    "description": _jm_f_8,
    "$defs": _jm_f_9,
    "definitions": _jm_f_10,
}
json_model_219_must = {
    "type": _jm_f_11,
}
json_model_219_may = {
    "$schema": _jm_f_12,
    "$id": _jm_f_13,
    "id": _jm_f_14,
    "$comment": _jm_f_15,
    "title": _jm_f_16,
    "default": _jm_f_17,
    "examples": _jm_f_18,
    "description": _jm_f_19,
    "$defs": _jm_f_20,
    "definitions": _jm_f_21,
    "pattern": _jm_f_22,
    "minLength": _jm_f_23,
    "maxLength": _jm_f_24,
    "format": _jm_f_25,
}
json_model_220_must = {
    "type": _jm_f_26,
}
json_model_220_may = {
    "$schema": _jm_f_27,
    "$id": _jm_f_28,
    "id": _jm_f_29,
    "$comment": _jm_f_30,
    "title": _jm_f_31,
    "default": _jm_f_32,
    "examples": _jm_f_33,
    "description": _jm_f_34,
    "$defs": _jm_f_35,
    "definitions": _jm_f_36,
    "prefixItems": _jm_f_37,
    "items": _jm_f_38,
    "additionalItems": _jm_f_39,
    "minItems": _jm_f_40,
    "maxItems": _jm_f_41,
    "uniqueItems": _jm_f_42,
}
json_model_221_must = {
    "type": _jm_f_43,
}
json_model_221_may = {
    "$schema": _jm_f_44,
    "$id": _jm_f_45,
    "id": _jm_f_46,
    "$comment": _jm_f_47,
    "title": _jm_f_48,
    "default": _jm_f_49,
    "examples": _jm_f_50,
    "description": _jm_f_51,
    "$defs": _jm_f_52,
    "definitions": _jm_f_53,
    "properties": _jm_f_54,
    "required": _jm_f_55,
    "additionalProperties": _jm_f_56,
    "patternProperties": _jm_f_57,
}
json_model_222_must = {
    "type": _jm_f_58,
}
json_model_222_may = {
    "$schema": _jm_f_59,
    "$id": _jm_f_60,
    "id": _jm_f_61,
    "$comment": _jm_f_62,
    "title": _jm_f_63,
    "default": _jm_f_64,
    "examples": _jm_f_65,
    "description": _jm_f_66,
    "$defs": _jm_f_67,
    "definitions": _jm_f_68,
    "minimum": _jm_f_69,
    "maximum": _jm_f_70,
}
json_model_223_must = {
    "type": _jm_f_71,
}
json_model_223_may = {
    "$schema": _jm_f_72,
    "$id": _jm_f_73,
    "id": _jm_f_74,
    "$comment": _jm_f_75,
    "title": _jm_f_76,
    "default": _jm_f_77,
    "examples": _jm_f_78,
    "description": _jm_f_79,
    "$defs": _jm_f_80,
    "definitions": _jm_f_81,
    "minimum": _jm_f_82,
    "maximum": _jm_f_83,
}
json_model_224_must = {
    "type": _jm_f_84,
}
json_model_224_may = {
    "$schema": _jm_f_85,
    "$id": _jm_f_86,
    "id": _jm_f_87,
    "$comment": _jm_f_88,
    "title": _jm_f_89,
    "default": _jm_f_90,
    "examples": _jm_f_91,
    "description": _jm_f_92,
    "$defs": _jm_f_93,
    "definitions": _jm_f_94,
}
json_model_225_must = {
    "type": _jm_f_95,
}
json_model_225_may = {
    "$schema": _jm_f_96,
    "$id": _jm_f_97,
    "id": _jm_f_98,
    "$comment": _jm_f_99,
    "title": _jm_f_100,
    "default": _jm_f_101,
    "examples": _jm_f_102,
    "description": _jm_f_103,
    "$defs": _jm_f_104,
    "definitions": _jm_f_105,
}
json_model_226_must = {
    "allOf": _jm_f_106,
}
json_model_226_may = {
    "$schema": _jm_f_107,
    "$id": _jm_f_108,
    "id": _jm_f_109,
    "$comment": _jm_f_110,
    "title": _jm_f_111,
    "default": _jm_f_112,
    "examples": _jm_f_113,
    "description": _jm_f_114,
    "$defs": _jm_f_115,
    "definitions": _jm_f_116,
}
json_model_227_must = {
    "anyOf": _jm_f_117,
}
json_model_227_may = {
    "$schema": _jm_f_118,
    "$id": _jm_f_119,
    "id": _jm_f_120,
    "$comment": _jm_f_121,
    "title": _jm_f_122,
    "default": _jm_f_123,
    "examples": _jm_f_124,
    "description": _jm_f_125,
    "$defs": _jm_f_126,
    "definitions": _jm_f_127,
}
json_model_228_must = {
    "oneOf": _jm_f_128,
}
json_model_228_may = {
    "$schema": _jm_f_129,
    "$id": _jm_f_130,
    "id": _jm_f_131,
    "$comment": _jm_f_132,
    "title": _jm_f_133,
    "default": _jm_f_134,
    "examples": _jm_f_135,
    "description": _jm_f_136,
    "$defs": _jm_f_137,
    "definitions": _jm_f_138,
}
json_model_229_must = {
    "enum": _jm_f_139,
}
json_model_229_may = {
    "$schema": _jm_f_140,
    "$id": _jm_f_141,
    "id": _jm_f_142,
    "$comment": _jm_f_143,
    "title": _jm_f_144,
    "default": _jm_f_145,
    "examples": _jm_f_146,
    "description": _jm_f_147,
    "$defs": _jm_f_148,
    "definitions": _jm_f_149,
}
json_model_230_must = {
    "const": _jm_f_150,
}
json_model_230_may = {
    "$schema": _jm_f_151,
    "$id": _jm_f_152,
    "id": _jm_f_153,
    "$comment": _jm_f_154,
    "title": _jm_f_155,
    "default": _jm_f_156,
    "examples": _jm_f_157,
    "description": _jm_f_158,
    "$defs": _jm_f_159,
    "definitions": _jm_f_160,
}
json_model_231_must = {
    "$ref": _jm_f_161,
}
json_model_231_may = {
    "$schema": _jm_f_162,
    "$id": _jm_f_163,
    "id": _jm_f_164,
    "$comment": _jm_f_165,
    "title": _jm_f_166,
    "default": _jm_f_167,
    "examples": _jm_f_168,
    "description": _jm_f_169,
    "$defs": _jm_f_170,
    "definitions": _jm_f_171,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

