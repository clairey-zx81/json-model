#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
_jm_obj_0_may: PropMap
_jm_obj_1_may: PropMap
_jm_obj_2_may: PropMap
_jm_obj_5_may: PropMap
_jm_obj_6_may: PropMap
_jm_obj_10_must: PropMap
_jm_cst_1: set[str]
_jm_obj_10_may: PropMap
_jm_obj_14_must: PropMap
_jm_obj_14_may: PropMap
_jm_obj_18_must: PropMap
_jm_obj_18_may: PropMap
_jm_obj_24_must: PropMap
_jm_obj_24_may: PropMap
_jm_obj_28_must: PropMap
_jm_obj_28_may: PropMap
_jm_obj_32_must: PropMap
_jm_obj_32_may: PropMap
_jm_obj_36_must: PropMap
_jm_obj_36_may: PropMap
_jm_obj_40_must: PropMap
_jm_obj_40_may: PropMap
_jm_obj_44_must: PropMap
_jm_obj_44_may: PropMap
_jm_obj_48_must: PropMap
_jm_obj_48_may: PropMap
_jm_obj_52_must: PropMap
_jm_obj_52_may: PropMap
_jm_obj_56_must: PropMap
_jm_obj_56_may: PropMap
_jm_obj_60_must: PropMap
_jm_obj_60_may: PropMap
_jm_obj_64_must: PropMap
_jm_obj_64_may: PropMap
_jm_obj_68_must: PropMap
check_model_map: PropMap

# check $URI ($.'$URI')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$URI'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$URI']", path))
    return res

# check $const ($.'$const')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$const'
    # $.'$const'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.'$const'.'|'.0]", path))
    if not res:
        # $.'$const'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [$.'$const'.'|'.1]", path))
        if not res:
            # $.'$const'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [$.'$const'.'|'.2]", path))
            if not res:
                # $.'$const'.'|'.3
                res = isinstance(val, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [$.'$const'.'|'.3]", path))
                if not res:
                    # $.'$const'.'|'.4
                    res = isinstance(val, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [$.'$const'.'|'.4]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$const'.'|']", path))
    return res

# check $enum ($.'$enum')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$enum'
    res = isinstance(val, list)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'$enum'.'|']", path))
    if res:
        # $.'$enum'.'|'.0
        res = True
        if res:
            for arr_2_idx, arr_2_item in enumerate(val):
                arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
                # $.'$enum'.'|'.0.0
                res = isinstance(arr_2_item, str)
                if not res:
                    rep is None or rep.append(("unexpected string [$.'$enum'.'|'.0.0]", arr_2_lpath if path is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [$.'$enum'.'|'.0]", path))
        if not res:
            # $.'$enum'.'|'.1
            res = True
            if res:
                for arr_1_idx, arr_1_item in enumerate(val):
                    arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
                    # $.'$enum'.'|'.1.0
                    res = isinstance(arr_1_item, int) and not isinstance(arr_1_item, bool)
                    if not res:
                        rep is None or rep.append(("not a -1 strict int [$.'$enum'.'|'.1.0]", arr_1_lpath if path is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [$.'$enum'.'|'.1]", path))
            if not res:
                # $.'$enum'.'|'.2
                res = True
                if res:
                    for arr_0_idx, arr_0_item in enumerate(val):
                        arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
                        # $.'$enum'.'|'.2.0
                        res = isinstance(arr_0_item, bool)
                        if not res:
                            rep is None or rep.append(("not a bool [$.'$enum'.'|'.2.0]", arr_0_lpath if path is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [$.'$enum'.'|'.2]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'$enum'.'|']", path))
    return res

# check $schemaArray ($.'$schemaArray')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schemaArray'
    res = isinstance(val, list)
    if res:
        for arr_3_idx, arr_3_item in enumerate(val):
            arr_3_lpath: Path = (path + [ arr_3_idx ]) if path is not None else None
            # $.'$schemaArray'.0
            res = json_model_26(arr_3_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [$.'$schemaArray'.0]", arr_3_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$schemaArray']", path))
    return res


# check _jm_obj_0_may_format ($.'$stringKeywords'.format)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$stringKeywords'.format
    res = (val is None or isinstance(val, (bool, int, float, str))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [$.'$stringKeywords'.format.'|']", path))
    return res

# check _jm_obj_0_may_maxLength ($.'$stringKeywords'.maxLength)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$stringKeywords'.maxLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$stringKeywords'.maxLength]", path))
    return res

# check _jm_obj_0_may_minLength ($.'$stringKeywords'.minLength)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$stringKeywords'.minLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$stringKeywords'.minLength]", path))
    return res

# check _jm_obj_0_may_pattern ($.'$stringKeywords'.pattern)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$stringKeywords'.pattern
    res = is_valid_regex(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $REGEX [$.'$stringKeywords'.pattern]", path))
    return res


# object $.'$stringKeywords'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$stringKeywords']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$stringKeywords']", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$stringKeywords']", lpath_0 if path is not None else None))
            return False
    return True

# check $stringKeywords ($.'$stringKeywords')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$stringKeywords'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$stringKeywords']", path))
    return res

# check _jm_obj_1_may_additionalItems ($.'$arrayKeywords'.additionalItems)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$arrayKeywords'.additionalItems
    res = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [$.'$arrayKeywords'.additionalItems]", path))
    return res

# check _jm_obj_1_may_items ($.'$arrayKeywords'.items)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$arrayKeywords'.items
    # $.'$arrayKeywords'.items.'|'.0
    res = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [$.'$arrayKeywords'.items.'|'.0]", path))
    if not res:
        # $.'$arrayKeywords'.items.'|'.1
        res = json_model_5(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [$.'$arrayKeywords'.items.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$arrayKeywords'.items.'|']", path))
    return res

# check _jm_obj_1_may_maxItems ($.'$arrayKeywords'.maxItems)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$arrayKeywords'.maxItems
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$arrayKeywords'.maxItems]", path))
    return res

# check _jm_obj_1_may_minItems ($.'$arrayKeywords'.minItems)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$arrayKeywords'.minItems
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$arrayKeywords'.minItems]", path))
    return res

# check _jm_obj_1_may_prefixItems ($.'$arrayKeywords'.prefixItems)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$arrayKeywords'.prefixItems
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [$.'$arrayKeywords'.prefixItems]", path))
    return res

# check _jm_obj_1_may_unevaluatedItems ($.'$arrayKeywords'.unevaluatedItems)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$arrayKeywords'.unevaluatedItems
    res = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [$.'$arrayKeywords'.unevaluatedItems]", path))
    return res

# check _jm_obj_1_may_uniqueItems ($.'$arrayKeywords'.uniqueItems)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$arrayKeywords'.uniqueItems
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$arrayKeywords'.uniqueItems]", path))
    return res


# object $.'$arrayKeywords'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$arrayKeywords']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_1_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_1 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$arrayKeywords']", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$arrayKeywords']", lpath_1 if path is not None else None))
            return False
    return True

# check $arrayKeywords ($.'$arrayKeywords')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$arrayKeywords'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$arrayKeywords']", path))
    return res

# check _jm_obj_2_may_additionalProperties ($.'$objectKeywords'.additionalProperties)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$objectKeywords'.additionalProperties
    res = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [$.'$objectKeywords'.additionalProperties]", path))
    return res

# check _jm_obj_2_may_maxProperties ($.'$objectKeywords'.maxProperties)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$objectKeywords'.maxProperties
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$objectKeywords'.maxProperties]", path))
    return res

# check _jm_obj_2_may_minProperties ($.'$objectKeywords'.minProperties)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$objectKeywords'.minProperties
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$objectKeywords'.minProperties]", path))
    return res

# object $.'$objectKeywords'.patternProperties
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$objectKeywords'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if is_valid_regex(prop, lpath_3 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$objectKeywords'.patternProperties.'$REGEX'
            res = json_model_26(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [$.'$objectKeywords'.patternProperties.'$REGEX']", lpath_3 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$objectKeywords'.patternProperties]", lpath_3 if path is not None else None))
            return False
    return True

# check _jm_obj_2_may_patternProperties ($.'$objectKeywords'.patternProperties)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$objectKeywords'.patternProperties
    res = _jm_obj_3(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$objectKeywords'.patternProperties]", path))
    return res

# object $.'$objectKeywords'.properties
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$objectKeywords'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$objectKeywords'.properties.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$objectKeywords'.properties.'']", lpath_4 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_2_may_properties ($.'$objectKeywords'.properties)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$objectKeywords'.properties
    res = _jm_obj_4(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$objectKeywords'.properties]", path))
    return res

# check _jm_obj_2_may_propertyNames ($.'$objectKeywords'.propertyNames)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$objectKeywords'.propertyNames
    res = json_model_25(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ObjectSchema [$.'$objectKeywords'.propertyNames]", path))
    return res

# check _jm_obj_2_may_required ($.'$objectKeywords'.required)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$objectKeywords'.required
    res = isinstance(val, list)
    if res:
        for arr_4_idx, arr_4_item in enumerate(val):
            arr_4_lpath: Path = (path + [ arr_4_idx ]) if path is not None else None
            # $.'$objectKeywords'.required.0
            res = isinstance(arr_4_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$objectKeywords'.required.0]", arr_4_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$objectKeywords'.required]", path))
    return res

# check _jm_obj_2_may_unevaluatedProperties ($.'$objectKeywords'.unevaluatedProperties)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$objectKeywords'.unevaluatedProperties
    res = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [$.'$objectKeywords'.unevaluatedProperties]", path))
    return res


# object $.'$objectKeywords'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$objectKeywords']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_2_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_2 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$objectKeywords']", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$objectKeywords']", lpath_2 if path is not None else None))
            return False
    return True

# check $objectKeywords ($.'$objectKeywords')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$objectKeywords'
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$objectKeywords']", path))
    return res

# check _jm_obj_5_may_maximum ($.'$numberKeywords'.maximum)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$numberKeywords'.maximum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [$.'$numberKeywords'.maximum]", path))
    return res

# check _jm_obj_5_may_minimum ($.'$numberKeywords'.minimum)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$numberKeywords'.minimum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [$.'$numberKeywords'.minimum]", path))
    return res


# object $.'$numberKeywords'
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$numberKeywords']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_5_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_5 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$numberKeywords']", lpath_5 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$numberKeywords']", lpath_5 if path is not None else None))
            return False
    return True

# check $numberKeywords ($.'$numberKeywords')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$numberKeywords'
    res = _jm_obj_5(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$numberKeywords']", path))
    return res

# check _jm_obj_6_may_$anchor ($.'$metas'.'$anchor')
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$metas'.'$anchor']", path))
    return res

# check _jm_obj_6_may_$comment ($.'$metas'.'$comment')
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$metas'.'$comment']", path))
    return res

# object $.'$metas'.'$defs'
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$metas'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$metas'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$metas'.'$defs'.'']", lpath_7 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_6_may_$defs ($.'$metas'.'$defs')
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.'$defs'
    res = _jm_obj_7(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$metas'.'$defs']", path))
    return res

# check _jm_obj_6_may_$dynamicAnchor ($.'$metas'.'$dynamicAnchor')
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$metas'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_6_may_$id ($.'$metas'.'$id')
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$metas'.'$id']", path))
    return res

# check _jm_obj_6_may_$schema ($.'$metas'.'$schema')
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$metas'.'$schema']", path))
    return res

# object $.'$metas'.'$vocabulary'
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$metas'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_8 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$metas'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$metas'.'$vocabulary'.'$URI']", lpath_8 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$metas'.'$vocabulary']", lpath_8 if path is not None else None))
            return False
    return True

# check _jm_obj_6_may_$vocabulary ($.'$metas'.'$vocabulary')
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.'$vocabulary'
    res = _jm_obj_8(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$metas'.'$vocabulary']", path))
    return res

# check _jm_obj_6_may_default ($.'$metas'.default)
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$metas'.default]", path))
    return res

# object $.'$metas'.definitions
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$metas'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$metas'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$metas'.definitions.'']", lpath_9 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_6_may_definitions ($.'$metas'.definitions)
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.definitions
    res = _jm_obj_9(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$metas'.definitions]", path))
    return res

# check _jm_obj_6_may_deprecated ($.'$metas'.deprecated)
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$metas'.deprecated]", path))
    return res

# check _jm_obj_6_may_description ($.'$metas'.description)
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$metas'.description]", path))
    return res

# check _jm_obj_6_may_examples ($.'$metas'.examples)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$metas'.examples]", path))
    return res

# check _jm_obj_6_may_id ($.'$metas'.id)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$metas'.id]", path))
    return res

# check _jm_obj_6_may_readOnly ($.'$metas'.readOnly)
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$metas'.readOnly]", path))
    return res

# check _jm_obj_6_may_title ($.'$metas'.title)
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$metas'.title]", path))
    return res

# check _jm_obj_6_may_writeOnly ($.'$metas'.writeOnly)
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$metas'.writeOnly]", path))
    return res


# object $.'$metas'
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$metas']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_6_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_6 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$metas']", lpath_6 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$metas']", lpath_6 if path is not None else None))
            return False
    return True

# check $metas ($.'$metas')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$metas'
    res = _jm_obj_6(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$metas']", path))
    return res

# check _jm_obj_10_must_type ($.'$String'.type)
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.type
    res = isinstance(val, str) and val == "string"
    if not res:
        rep is None or rep.append(("unexpected string [$.'$String'.type]", path))
    return res


# check _jm_obj_10_may_$anchor ($.'$String'.'$anchor')
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$String'.'$anchor']", path))
    return res

# check _jm_obj_10_may_$comment ($.'$String'.'$comment')
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$String'.'$comment']", path))
    return res

# object $.'$String'.'$defs'
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$String'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$String'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$String'.'$defs'.'']", lpath_11 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_10_may_$defs ($.'$String'.'$defs')
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.'$defs'
    res = _jm_obj_11(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$String'.'$defs']", path))
    return res

# check _jm_obj_10_may_$dynamicAnchor ($.'$String'.'$dynamicAnchor')
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$String'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_10_may_$id ($.'$String'.'$id')
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$String'.'$id']", path))
    return res

# check _jm_obj_10_may_$schema ($.'$String'.'$schema')
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$String'.'$schema']", path))
    return res

# object $.'$String'.'$vocabulary'
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$String'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_12 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$String'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$String'.'$vocabulary'.'$URI']", lpath_12 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$String'.'$vocabulary']", lpath_12 if path is not None else None))
            return False
    return True

# check _jm_obj_10_may_$vocabulary ($.'$String'.'$vocabulary')
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.'$vocabulary'
    res = _jm_obj_12(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$String'.'$vocabulary']", path))
    return res

# check _jm_obj_10_may_default ($.'$String'.default)
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$String'.default]", path))
    return res

# object $.'$String'.definitions
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$String'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$String'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$String'.definitions.'']", lpath_13 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_10_may_definitions ($.'$String'.definitions)
def _jm_f_46(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.definitions
    res = _jm_obj_13(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$String'.definitions]", path))
    return res

# check _jm_obj_10_may_deprecated ($.'$String'.deprecated)
def _jm_f_47(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$String'.deprecated]", path))
    return res

# check _jm_obj_10_may_description ($.'$String'.description)
def _jm_f_48(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$String'.description]", path))
    return res

# check _jm_obj_10_may_examples ($.'$String'.examples)
def _jm_f_49(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$String'.examples]", path))
    return res


# check _jm_obj_10_may_format ($.'$String'.format)
def _jm_f_50(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.format
    res = (val is None or isinstance(val, (bool, int, float, str))) and val in _jm_cst_1
    if not res:
        rep is None or rep.append(("value not in enum [$.'$String'.format.'|']", path))
    return res

# check _jm_obj_10_may_id ($.'$String'.id)
def _jm_f_51(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$String'.id]", path))
    return res

# check _jm_obj_10_may_maxLength ($.'$String'.maxLength)
def _jm_f_52(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.maxLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$String'.maxLength]", path))
    return res

# check _jm_obj_10_may_minLength ($.'$String'.minLength)
def _jm_f_53(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.minLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$String'.minLength]", path))
    return res

# check _jm_obj_10_may_pattern ($.'$String'.pattern)
def _jm_f_54(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.pattern
    res = is_valid_regex(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $REGEX [$.'$String'.pattern]", path))
    return res

# check _jm_obj_10_may_readOnly ($.'$String'.readOnly)
def _jm_f_55(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$String'.readOnly]", path))
    return res

# check _jm_obj_10_may_title ($.'$String'.title)
def _jm_f_56(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$String'.title]", path))
    return res

# check _jm_obj_10_may_writeOnly ($.'$String'.writeOnly)
def _jm_f_57(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$String'.writeOnly]", path))
    return res


# object $.'$String'
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$String']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_10_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_10 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$String']", lpath_10 if path is not None else None))
                    return False
        elif pfun := _jm_obj_10_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_10 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$String']", lpath_10 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$String']", lpath_10 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$String']", path))
        return False
    return True

# check $String ($.'$String')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$String'
    res = _jm_obj_10(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$String']", path))
    return res

# check _jm_obj_14_must_type ($.'$Array'.type)
def _jm_f_58(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.type
    res = isinstance(val, str) and val == "array"
    if not res:
        rep is None or rep.append(("unexpected array [$.'$Array'.type]", path))
    return res


# check _jm_obj_14_may_$anchor ($.'$Array'.'$anchor')
def _jm_f_59(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Array'.'$anchor']", path))
    return res

# check _jm_obj_14_may_$comment ($.'$Array'.'$comment')
def _jm_f_60(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Array'.'$comment']", path))
    return res

# object $.'$Array'.'$defs'
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Array'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Array'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Array'.'$defs'.'']", lpath_15 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_14_may_$defs ($.'$Array'.'$defs')
def _jm_f_61(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.'$defs'
    res = _jm_obj_15(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Array'.'$defs']", path))
    return res

# check _jm_obj_14_may_$dynamicAnchor ($.'$Array'.'$dynamicAnchor')
def _jm_f_62(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Array'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_14_may_$id ($.'$Array'.'$id')
def _jm_f_63(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Array'.'$id']", path))
    return res

# check _jm_obj_14_may_$schema ($.'$Array'.'$schema')
def _jm_f_64(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Array'.'$schema']", path))
    return res

# object $.'$Array'.'$vocabulary'
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Array'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_16 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$Array'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$Array'.'$vocabulary'.'$URI']", lpath_16 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Array'.'$vocabulary']", lpath_16 if path is not None else None))
            return False
    return True

# check _jm_obj_14_may_$vocabulary ($.'$Array'.'$vocabulary')
def _jm_f_65(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.'$vocabulary'
    res = _jm_obj_16(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Array'.'$vocabulary']", path))
    return res

# check _jm_obj_14_may_additionalItems ($.'$Array'.additionalItems)
def _jm_f_66(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.additionalItems
    res = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [$.'$Array'.additionalItems]", path))
    return res

# check _jm_obj_14_may_default ($.'$Array'.default)
def _jm_f_67(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Array'.default]", path))
    return res

# object $.'$Array'.definitions
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Array'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Array'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Array'.definitions.'']", lpath_17 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_14_may_definitions ($.'$Array'.definitions)
def _jm_f_68(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.definitions
    res = _jm_obj_17(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Array'.definitions]", path))
    return res

# check _jm_obj_14_may_deprecated ($.'$Array'.deprecated)
def _jm_f_69(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Array'.deprecated]", path))
    return res

# check _jm_obj_14_may_description ($.'$Array'.description)
def _jm_f_70(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Array'.description]", path))
    return res

# check _jm_obj_14_may_examples ($.'$Array'.examples)
def _jm_f_71(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Array'.examples]", path))
    return res

# check _jm_obj_14_may_id ($.'$Array'.id)
def _jm_f_72(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Array'.id]", path))
    return res

# check _jm_obj_14_may_items ($.'$Array'.items)
def _jm_f_73(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.items
    # $.'$Array'.items.'|'.0
    res = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [$.'$Array'.items.'|'.0]", path))
    if not res:
        # $.'$Array'.items.'|'.1
        res = json_model_5(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [$.'$Array'.items.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Array'.items.'|']", path))
    return res

# check _jm_obj_14_may_maxItems ($.'$Array'.maxItems)
def _jm_f_74(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.maxItems
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$Array'.maxItems]", path))
    return res

# check _jm_obj_14_may_minItems ($.'$Array'.minItems)
def _jm_f_75(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.minItems
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$Array'.minItems]", path))
    return res

# check _jm_obj_14_may_prefixItems ($.'$Array'.prefixItems)
def _jm_f_76(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.prefixItems
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [$.'$Array'.prefixItems]", path))
    return res

# check _jm_obj_14_may_readOnly ($.'$Array'.readOnly)
def _jm_f_77(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Array'.readOnly]", path))
    return res

# check _jm_obj_14_may_title ($.'$Array'.title)
def _jm_f_78(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Array'.title]", path))
    return res

# check _jm_obj_14_may_unevaluatedItems ($.'$Array'.unevaluatedItems)
def _jm_f_79(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.unevaluatedItems
    res = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [$.'$Array'.unevaluatedItems]", path))
    return res

# check _jm_obj_14_may_uniqueItems ($.'$Array'.uniqueItems)
def _jm_f_80(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.uniqueItems
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Array'.uniqueItems]", path))
    return res

# check _jm_obj_14_may_writeOnly ($.'$Array'.writeOnly)
def _jm_f_81(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Array'.writeOnly]", path))
    return res


# object $.'$Array'
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Array']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_14_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_14 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Array']", lpath_14 if path is not None else None))
                    return False
        elif pfun := _jm_obj_14_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_14 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Array']", lpath_14 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Array']", lpath_14 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Array']", path))
        return False
    return True

# check $Array ($.'$Array')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'
    res = _jm_obj_14(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Array']", path))
    return res

# check _jm_obj_18_must_type ($.'$Object'.type)
def _jm_f_82(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.type
    res = isinstance(val, str) and val == "object"
    if not res:
        rep is None or rep.append(("unexpected object [$.'$Object'.type]", path))
    return res


# check _jm_obj_18_may_$anchor ($.'$Object'.'$anchor')
def _jm_f_83(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Object'.'$anchor']", path))
    return res

# check _jm_obj_18_may_$comment ($.'$Object'.'$comment')
def _jm_f_84(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Object'.'$comment']", path))
    return res

# object $.'$Object'.'$defs'
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Object'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Object'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Object'.'$defs'.'']", lpath_19 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_18_may_$defs ($.'$Object'.'$defs')
def _jm_f_85(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.'$defs'
    res = _jm_obj_19(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Object'.'$defs']", path))
    return res

# check _jm_obj_18_may_$dynamicAnchor ($.'$Object'.'$dynamicAnchor')
def _jm_f_86(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Object'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_18_may_$id ($.'$Object'.'$id')
def _jm_f_87(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Object'.'$id']", path))
    return res

# check _jm_obj_18_may_$schema ($.'$Object'.'$schema')
def _jm_f_88(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Object'.'$schema']", path))
    return res

# object $.'$Object'.'$vocabulary'
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Object'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_20 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$Object'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$Object'.'$vocabulary'.'$URI']", lpath_20 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Object'.'$vocabulary']", lpath_20 if path is not None else None))
            return False
    return True

# check _jm_obj_18_may_$vocabulary ($.'$Object'.'$vocabulary')
def _jm_f_89(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.'$vocabulary'
    res = _jm_obj_20(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Object'.'$vocabulary']", path))
    return res

# check _jm_obj_18_may_additionalProperties ($.'$Object'.additionalProperties)
def _jm_f_90(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.additionalProperties
    res = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [$.'$Object'.additionalProperties]", path))
    return res

# check _jm_obj_18_may_default ($.'$Object'.default)
def _jm_f_91(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Object'.default]", path))
    return res

# object $.'$Object'.definitions
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Object'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Object'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Object'.definitions.'']", lpath_21 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_18_may_definitions ($.'$Object'.definitions)
def _jm_f_92(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.definitions
    res = _jm_obj_21(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Object'.definitions]", path))
    return res

# check _jm_obj_18_may_deprecated ($.'$Object'.deprecated)
def _jm_f_93(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Object'.deprecated]", path))
    return res

# check _jm_obj_18_may_description ($.'$Object'.description)
def _jm_f_94(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Object'.description]", path))
    return res

# check _jm_obj_18_may_examples ($.'$Object'.examples)
def _jm_f_95(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Object'.examples]", path))
    return res

# check _jm_obj_18_may_id ($.'$Object'.id)
def _jm_f_96(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Object'.id]", path))
    return res

# check _jm_obj_18_may_maxProperties ($.'$Object'.maxProperties)
def _jm_f_97(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.maxProperties
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$Object'.maxProperties]", path))
    return res

# check _jm_obj_18_may_minProperties ($.'$Object'.minProperties)
def _jm_f_98(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.minProperties
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'$Object'.minProperties]", path))
    return res

# object $.'$Object'.patternProperties
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Object'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        if is_valid_regex(prop, lpath_22 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$Object'.patternProperties.'$REGEX'
            res = json_model_26(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [$.'$Object'.patternProperties.'$REGEX']", lpath_22 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Object'.patternProperties]", lpath_22 if path is not None else None))
            return False
    return True

# check _jm_obj_18_may_patternProperties ($.'$Object'.patternProperties)
def _jm_f_99(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.patternProperties
    res = _jm_obj_22(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Object'.patternProperties]", path))
    return res

# object $.'$Object'.properties
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Object'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Object'.properties.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Object'.properties.'']", lpath_23 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_18_may_properties ($.'$Object'.properties)
def _jm_f_100(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.properties
    res = _jm_obj_23(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Object'.properties]", path))
    return res

# check _jm_obj_18_may_propertyNames ($.'$Object'.propertyNames)
def _jm_f_101(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.propertyNames
    res = json_model_25(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ObjectSchema [$.'$Object'.propertyNames]", path))
    return res

# check _jm_obj_18_may_readOnly ($.'$Object'.readOnly)
def _jm_f_102(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Object'.readOnly]", path))
    return res

# check _jm_obj_18_may_required ($.'$Object'.required)
def _jm_f_103(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.required
    res = isinstance(val, list)
    if res:
        for arr_5_idx, arr_5_item in enumerate(val):
            arr_5_lpath: Path = (path + [ arr_5_idx ]) if path is not None else None
            # $.'$Object'.required.0
            res = isinstance(arr_5_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [$.'$Object'.required.0]", arr_5_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Object'.required]", path))
    return res

# check _jm_obj_18_may_title ($.'$Object'.title)
def _jm_f_104(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Object'.title]", path))
    return res

# check _jm_obj_18_may_unevaluatedProperties ($.'$Object'.unevaluatedProperties)
def _jm_f_105(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.unevaluatedProperties
    res = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [$.'$Object'.unevaluatedProperties]", path))
    return res

# check _jm_obj_18_may_writeOnly ($.'$Object'.writeOnly)
def _jm_f_106(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Object'.writeOnly]", path))
    return res


# object $.'$Object'
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Object']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_18_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_18 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Object']", lpath_18 if path is not None else None))
                    return False
        elif pfun := _jm_obj_18_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_18 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Object']", lpath_18 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Object']", lpath_18 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Object']", path))
        return False
    return True

# check $Object ($.'$Object')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Object'
    res = _jm_obj_18(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Object']", path))
    return res

# check _jm_obj_24_must_type ($.'$Integer'.type)
def _jm_f_107(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.type
    res = isinstance(val, str) and val == "integer"
    if not res:
        rep is None or rep.append(("unexpected integer [$.'$Integer'.type]", path))
    return res


# check _jm_obj_24_may_$anchor ($.'$Integer'.'$anchor')
def _jm_f_108(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Integer'.'$anchor']", path))
    return res

# check _jm_obj_24_may_$comment ($.'$Integer'.'$comment')
def _jm_f_109(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Integer'.'$comment']", path))
    return res

# object $.'$Integer'.'$defs'
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Integer'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Integer'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Integer'.'$defs'.'']", lpath_25 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_24_may_$defs ($.'$Integer'.'$defs')
def _jm_f_110(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.'$defs'
    res = _jm_obj_25(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Integer'.'$defs']", path))
    return res

# check _jm_obj_24_may_$dynamicAnchor ($.'$Integer'.'$dynamicAnchor')
def _jm_f_111(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Integer'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_24_may_$id ($.'$Integer'.'$id')
def _jm_f_112(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Integer'.'$id']", path))
    return res

# check _jm_obj_24_may_$schema ($.'$Integer'.'$schema')
def _jm_f_113(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Integer'.'$schema']", path))
    return res

# object $.'$Integer'.'$vocabulary'
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Integer'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_26 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$Integer'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$Integer'.'$vocabulary'.'$URI']", lpath_26 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Integer'.'$vocabulary']", lpath_26 if path is not None else None))
            return False
    return True

# check _jm_obj_24_may_$vocabulary ($.'$Integer'.'$vocabulary')
def _jm_f_114(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.'$vocabulary'
    res = _jm_obj_26(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Integer'.'$vocabulary']", path))
    return res

# check _jm_obj_24_may_default ($.'$Integer'.default)
def _jm_f_115(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Integer'.default]", path))
    return res

# object $.'$Integer'.definitions
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Integer'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Integer'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Integer'.definitions.'']", lpath_27 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_24_may_definitions ($.'$Integer'.definitions)
def _jm_f_116(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.definitions
    res = _jm_obj_27(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Integer'.definitions]", path))
    return res

# check _jm_obj_24_may_deprecated ($.'$Integer'.deprecated)
def _jm_f_117(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Integer'.deprecated]", path))
    return res

# check _jm_obj_24_may_description ($.'$Integer'.description)
def _jm_f_118(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Integer'.description]", path))
    return res

# check _jm_obj_24_may_examples ($.'$Integer'.examples)
def _jm_f_119(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Integer'.examples]", path))
    return res

# check _jm_obj_24_may_id ($.'$Integer'.id)
def _jm_f_120(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Integer'.id]", path))
    return res

# check _jm_obj_24_may_maximum ($.'$Integer'.maximum)
def _jm_f_121(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.maximum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [$.'$Integer'.maximum]", path))
    return res

# check _jm_obj_24_may_minimum ($.'$Integer'.minimum)
def _jm_f_122(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.minimum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [$.'$Integer'.minimum]", path))
    return res

# check _jm_obj_24_may_readOnly ($.'$Integer'.readOnly)
def _jm_f_123(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Integer'.readOnly]", path))
    return res

# check _jm_obj_24_may_title ($.'$Integer'.title)
def _jm_f_124(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Integer'.title]", path))
    return res

# check _jm_obj_24_may_writeOnly ($.'$Integer'.writeOnly)
def _jm_f_125(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Integer'.writeOnly]", path))
    return res


# object $.'$Integer'
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Integer']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_24_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_24 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Integer']", lpath_24 if path is not None else None))
                    return False
        elif pfun := _jm_obj_24_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_24 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Integer']", lpath_24 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Integer']", lpath_24 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Integer']", path))
        return False
    return True

# check $Integer ($.'$Integer')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Integer'
    res = _jm_obj_24(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Integer']", path))
    return res

# check _jm_obj_28_must_type ($.'$Number'.type)
def _jm_f_126(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.type
    res = isinstance(val, str) and val == "number"
    if not res:
        rep is None or rep.append(("unexpected number [$.'$Number'.type]", path))
    return res


# check _jm_obj_28_may_$anchor ($.'$Number'.'$anchor')
def _jm_f_127(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Number'.'$anchor']", path))
    return res

# check _jm_obj_28_may_$comment ($.'$Number'.'$comment')
def _jm_f_128(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Number'.'$comment']", path))
    return res

# object $.'$Number'.'$defs'
def _jm_obj_29(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Number'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Number'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Number'.'$defs'.'']", lpath_29 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_28_may_$defs ($.'$Number'.'$defs')
def _jm_f_129(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.'$defs'
    res = _jm_obj_29(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Number'.'$defs']", path))
    return res

# check _jm_obj_28_may_$dynamicAnchor ($.'$Number'.'$dynamicAnchor')
def _jm_f_130(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Number'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_28_may_$id ($.'$Number'.'$id')
def _jm_f_131(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Number'.'$id']", path))
    return res

# check _jm_obj_28_may_$schema ($.'$Number'.'$schema')
def _jm_f_132(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Number'.'$schema']", path))
    return res

# object $.'$Number'.'$vocabulary'
def _jm_obj_30(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Number'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_30 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$Number'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$Number'.'$vocabulary'.'$URI']", lpath_30 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Number'.'$vocabulary']", lpath_30 if path is not None else None))
            return False
    return True

# check _jm_obj_28_may_$vocabulary ($.'$Number'.'$vocabulary')
def _jm_f_133(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.'$vocabulary'
    res = _jm_obj_30(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Number'.'$vocabulary']", path))
    return res

# check _jm_obj_28_may_default ($.'$Number'.default)
def _jm_f_134(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Number'.default]", path))
    return res

# object $.'$Number'.definitions
def _jm_obj_31(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Number'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Number'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Number'.definitions.'']", lpath_31 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_28_may_definitions ($.'$Number'.definitions)
def _jm_f_135(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.definitions
    res = _jm_obj_31(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Number'.definitions]", path))
    return res

# check _jm_obj_28_may_deprecated ($.'$Number'.deprecated)
def _jm_f_136(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Number'.deprecated]", path))
    return res

# check _jm_obj_28_may_description ($.'$Number'.description)
def _jm_f_137(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Number'.description]", path))
    return res

# check _jm_obj_28_may_examples ($.'$Number'.examples)
def _jm_f_138(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Number'.examples]", path))
    return res

# check _jm_obj_28_may_id ($.'$Number'.id)
def _jm_f_139(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Number'.id]", path))
    return res

# check _jm_obj_28_may_maximum ($.'$Number'.maximum)
def _jm_f_140(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.maximum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [$.'$Number'.maximum]", path))
    return res

# check _jm_obj_28_may_minimum ($.'$Number'.minimum)
def _jm_f_141(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.minimum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [$.'$Number'.minimum]", path))
    return res

# check _jm_obj_28_may_readOnly ($.'$Number'.readOnly)
def _jm_f_142(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Number'.readOnly]", path))
    return res

# check _jm_obj_28_may_title ($.'$Number'.title)
def _jm_f_143(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Number'.title]", path))
    return res

# check _jm_obj_28_may_writeOnly ($.'$Number'.writeOnly)
def _jm_f_144(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Number'.writeOnly]", path))
    return res


# object $.'$Number'
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Number']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_28_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_28 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Number']", lpath_28 if path is not None else None))
                    return False
        elif pfun := _jm_obj_28_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_28 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Number']", lpath_28 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Number']", lpath_28 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Number']", path))
        return False
    return True

# check $Number ($.'$Number')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Number'
    res = _jm_obj_28(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Number']", path))
    return res

# check _jm_obj_32_must_type ($.'$Bool'.type)
def _jm_f_145(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.type
    res = isinstance(val, str) and val == "boolean"
    if not res:
        rep is None or rep.append(("unexpected boolean [$.'$Bool'.type]", path))
    return res


# check _jm_obj_32_may_$anchor ($.'$Bool'.'$anchor')
def _jm_f_146(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Bool'.'$anchor']", path))
    return res

# check _jm_obj_32_may_$comment ($.'$Bool'.'$comment')
def _jm_f_147(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Bool'.'$comment']", path))
    return res

# object $.'$Bool'.'$defs'
def _jm_obj_33(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Bool'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Bool'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Bool'.'$defs'.'']", lpath_33 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_32_may_$defs ($.'$Bool'.'$defs')
def _jm_f_148(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.'$defs'
    res = _jm_obj_33(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Bool'.'$defs']", path))
    return res

# check _jm_obj_32_may_$dynamicAnchor ($.'$Bool'.'$dynamicAnchor')
def _jm_f_149(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Bool'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_32_may_$id ($.'$Bool'.'$id')
def _jm_f_150(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Bool'.'$id']", path))
    return res

# check _jm_obj_32_may_$schema ($.'$Bool'.'$schema')
def _jm_f_151(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Bool'.'$schema']", path))
    return res

# object $.'$Bool'.'$vocabulary'
def _jm_obj_34(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Bool'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_34 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$Bool'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$Bool'.'$vocabulary'.'$URI']", lpath_34 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Bool'.'$vocabulary']", lpath_34 if path is not None else None))
            return False
    return True

# check _jm_obj_32_may_$vocabulary ($.'$Bool'.'$vocabulary')
def _jm_f_152(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.'$vocabulary'
    res = _jm_obj_34(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Bool'.'$vocabulary']", path))
    return res

# check _jm_obj_32_may_default ($.'$Bool'.default)
def _jm_f_153(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Bool'.default]", path))
    return res

# object $.'$Bool'.definitions
def _jm_obj_35(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Bool'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Bool'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Bool'.definitions.'']", lpath_35 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_32_may_definitions ($.'$Bool'.definitions)
def _jm_f_154(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.definitions
    res = _jm_obj_35(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Bool'.definitions]", path))
    return res

# check _jm_obj_32_may_deprecated ($.'$Bool'.deprecated)
def _jm_f_155(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Bool'.deprecated]", path))
    return res

# check _jm_obj_32_may_description ($.'$Bool'.description)
def _jm_f_156(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Bool'.description]", path))
    return res

# check _jm_obj_32_may_examples ($.'$Bool'.examples)
def _jm_f_157(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Bool'.examples]", path))
    return res

# check _jm_obj_32_may_id ($.'$Bool'.id)
def _jm_f_158(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Bool'.id]", path))
    return res

# check _jm_obj_32_may_readOnly ($.'$Bool'.readOnly)
def _jm_f_159(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Bool'.readOnly]", path))
    return res

# check _jm_obj_32_may_title ($.'$Bool'.title)
def _jm_f_160(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Bool'.title]", path))
    return res

# check _jm_obj_32_may_writeOnly ($.'$Bool'.writeOnly)
def _jm_f_161(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Bool'.writeOnly]", path))
    return res


# object $.'$Bool'
def _jm_obj_32(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Bool']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_32_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_32 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Bool']", lpath_32 if path is not None else None))
                    return False
        elif pfun := _jm_obj_32_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_32 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Bool']", lpath_32 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Bool']", lpath_32 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Bool']", path))
        return False
    return True

# check $Bool ($.'$Bool')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Bool'
    res = _jm_obj_32(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Bool']", path))
    return res

# check _jm_obj_36_must_type ($.'$Null'.type)
def _jm_f_162(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.type
    res = isinstance(val, str) and val == "null"
    if not res:
        rep is None or rep.append(("unexpected null [$.'$Null'.type]", path))
    return res


# check _jm_obj_36_may_$anchor ($.'$Null'.'$anchor')
def _jm_f_163(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Null'.'$anchor']", path))
    return res

# check _jm_obj_36_may_$comment ($.'$Null'.'$comment')
def _jm_f_164(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Null'.'$comment']", path))
    return res

# object $.'$Null'.'$defs'
def _jm_obj_37(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Null'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_37: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Null'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Null'.'$defs'.'']", lpath_37 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_36_may_$defs ($.'$Null'.'$defs')
def _jm_f_165(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.'$defs'
    res = _jm_obj_37(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Null'.'$defs']", path))
    return res

# check _jm_obj_36_may_$dynamicAnchor ($.'$Null'.'$dynamicAnchor')
def _jm_f_166(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Null'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_36_may_$id ($.'$Null'.'$id')
def _jm_f_167(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Null'.'$id']", path))
    return res

# check _jm_obj_36_may_$schema ($.'$Null'.'$schema')
def _jm_f_168(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Null'.'$schema']", path))
    return res

# object $.'$Null'.'$vocabulary'
def _jm_obj_38(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Null'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_38: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_38 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$Null'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$Null'.'$vocabulary'.'$URI']", lpath_38 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Null'.'$vocabulary']", lpath_38 if path is not None else None))
            return False
    return True

# check _jm_obj_36_may_$vocabulary ($.'$Null'.'$vocabulary')
def _jm_f_169(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.'$vocabulary'
    res = _jm_obj_38(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Null'.'$vocabulary']", path))
    return res

# check _jm_obj_36_may_default ($.'$Null'.default)
def _jm_f_170(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Null'.default]", path))
    return res

# object $.'$Null'.definitions
def _jm_obj_39(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Null'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_39: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Null'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Null'.definitions.'']", lpath_39 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_36_may_definitions ($.'$Null'.definitions)
def _jm_f_171(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.definitions
    res = _jm_obj_39(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Null'.definitions]", path))
    return res

# check _jm_obj_36_may_deprecated ($.'$Null'.deprecated)
def _jm_f_172(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Null'.deprecated]", path))
    return res

# check _jm_obj_36_may_description ($.'$Null'.description)
def _jm_f_173(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Null'.description]", path))
    return res

# check _jm_obj_36_may_examples ($.'$Null'.examples)
def _jm_f_174(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Null'.examples]", path))
    return res

# check _jm_obj_36_may_id ($.'$Null'.id)
def _jm_f_175(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Null'.id]", path))
    return res

# check _jm_obj_36_may_readOnly ($.'$Null'.readOnly)
def _jm_f_176(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Null'.readOnly]", path))
    return res

# check _jm_obj_36_may_title ($.'$Null'.title)
def _jm_f_177(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Null'.title]", path))
    return res

# check _jm_obj_36_may_writeOnly ($.'$Null'.writeOnly)
def _jm_f_178(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Null'.writeOnly]", path))
    return res


# object $.'$Null'
def _jm_obj_36(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Null']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_36: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_36_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_36 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Null']", lpath_36 if path is not None else None))
                    return False
        elif pfun := _jm_obj_36_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_36 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Null']", lpath_36 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Null']", lpath_36 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Null']", path))
        return False
    return True

# check $Null ($.'$Null')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Null'
    res = _jm_obj_36(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Null']", path))
    return res

# check _jm_obj_40_must_allOf ($.'$AllOf'.allOf)
def _jm_f_179(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.allOf
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [$.'$AllOf'.allOf]", path))
    return res


# check _jm_obj_40_may_$anchor ($.'$AllOf'.'$anchor')
def _jm_f_180(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AllOf'.'$anchor']", path))
    return res

# check _jm_obj_40_may_$comment ($.'$AllOf'.'$comment')
def _jm_f_181(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AllOf'.'$comment']", path))
    return res

# object $.'$AllOf'.'$defs'
def _jm_obj_41(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$AllOf'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_41: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$AllOf'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$AllOf'.'$defs'.'']", lpath_41 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_40_may_$defs ($.'$AllOf'.'$defs')
def _jm_f_182(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.'$defs'
    res = _jm_obj_41(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$AllOf'.'$defs']", path))
    return res

# check _jm_obj_40_may_$dynamicAnchor ($.'$AllOf'.'$dynamicAnchor')
def _jm_f_183(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AllOf'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_40_may_$id ($.'$AllOf'.'$id')
def _jm_f_184(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AllOf'.'$id']", path))
    return res

# check _jm_obj_40_may_$schema ($.'$AllOf'.'$schema')
def _jm_f_185(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AllOf'.'$schema']", path))
    return res

# object $.'$AllOf'.'$vocabulary'
def _jm_obj_42(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$AllOf'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_42: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_42 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$AllOf'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$AllOf'.'$vocabulary'.'$URI']", lpath_42 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$AllOf'.'$vocabulary']", lpath_42 if path is not None else None))
            return False
    return True

# check _jm_obj_40_may_$vocabulary ($.'$AllOf'.'$vocabulary')
def _jm_f_186(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.'$vocabulary'
    res = _jm_obj_42(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$AllOf'.'$vocabulary']", path))
    return res

# check _jm_obj_40_may_default ($.'$AllOf'.default)
def _jm_f_187(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$AllOf'.default]", path))
    return res

# object $.'$AllOf'.definitions
def _jm_obj_43(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$AllOf'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_43: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$AllOf'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$AllOf'.definitions.'']", lpath_43 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_40_may_definitions ($.'$AllOf'.definitions)
def _jm_f_188(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.definitions
    res = _jm_obj_43(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$AllOf'.definitions]", path))
    return res

# check _jm_obj_40_may_deprecated ($.'$AllOf'.deprecated)
def _jm_f_189(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$AllOf'.deprecated]", path))
    return res

# check _jm_obj_40_may_description ($.'$AllOf'.description)
def _jm_f_190(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AllOf'.description]", path))
    return res

# check _jm_obj_40_may_examples ($.'$AllOf'.examples)
def _jm_f_191(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$AllOf'.examples]", path))
    return res

# check _jm_obj_40_may_id ($.'$AllOf'.id)
def _jm_f_192(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AllOf'.id]", path))
    return res

# check _jm_obj_40_may_readOnly ($.'$AllOf'.readOnly)
def _jm_f_193(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$AllOf'.readOnly]", path))
    return res

# check _jm_obj_40_may_title ($.'$AllOf'.title)
def _jm_f_194(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AllOf'.title]", path))
    return res

# check _jm_obj_40_may_writeOnly ($.'$AllOf'.writeOnly)
def _jm_f_195(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$AllOf'.writeOnly]", path))
    return res


# object $.'$AllOf'
def _jm_obj_40(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$AllOf']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_40: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_40_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_40 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$AllOf']", lpath_40 if path is not None else None))
                    return False
        elif pfun := _jm_obj_40_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_40 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$AllOf']", lpath_40 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$AllOf']", lpath_40 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$AllOf']", path))
        return False
    return True

# check $AllOf ($.'$AllOf')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AllOf'
    res = _jm_obj_40(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$AllOf']", path))
    return res

# check _jm_obj_44_must_anyOf ($.'$AnyOf'.anyOf)
def _jm_f_196(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.anyOf
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [$.'$AnyOf'.anyOf]", path))
    return res


# check _jm_obj_44_may_$anchor ($.'$AnyOf'.'$anchor')
def _jm_f_197(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AnyOf'.'$anchor']", path))
    return res

# check _jm_obj_44_may_$comment ($.'$AnyOf'.'$comment')
def _jm_f_198(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AnyOf'.'$comment']", path))
    return res

# object $.'$AnyOf'.'$defs'
def _jm_obj_45(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$AnyOf'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_45: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$AnyOf'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$AnyOf'.'$defs'.'']", lpath_45 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_44_may_$defs ($.'$AnyOf'.'$defs')
def _jm_f_199(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.'$defs'
    res = _jm_obj_45(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$AnyOf'.'$defs']", path))
    return res

# check _jm_obj_44_may_$dynamicAnchor ($.'$AnyOf'.'$dynamicAnchor')
def _jm_f_200(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AnyOf'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_44_may_$id ($.'$AnyOf'.'$id')
def _jm_f_201(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AnyOf'.'$id']", path))
    return res

# check _jm_obj_44_may_$schema ($.'$AnyOf'.'$schema')
def _jm_f_202(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AnyOf'.'$schema']", path))
    return res

# object $.'$AnyOf'.'$vocabulary'
def _jm_obj_46(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$AnyOf'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_46: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_46 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$AnyOf'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$AnyOf'.'$vocabulary'.'$URI']", lpath_46 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$AnyOf'.'$vocabulary']", lpath_46 if path is not None else None))
            return False
    return True

# check _jm_obj_44_may_$vocabulary ($.'$AnyOf'.'$vocabulary')
def _jm_f_203(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.'$vocabulary'
    res = _jm_obj_46(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$AnyOf'.'$vocabulary']", path))
    return res

# check _jm_obj_44_may_default ($.'$AnyOf'.default)
def _jm_f_204(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$AnyOf'.default]", path))
    return res

# object $.'$AnyOf'.definitions
def _jm_obj_47(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$AnyOf'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_47: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$AnyOf'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$AnyOf'.definitions.'']", lpath_47 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_44_may_definitions ($.'$AnyOf'.definitions)
def _jm_f_205(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.definitions
    res = _jm_obj_47(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$AnyOf'.definitions]", path))
    return res

# check _jm_obj_44_may_deprecated ($.'$AnyOf'.deprecated)
def _jm_f_206(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$AnyOf'.deprecated]", path))
    return res

# check _jm_obj_44_may_description ($.'$AnyOf'.description)
def _jm_f_207(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AnyOf'.description]", path))
    return res

# check _jm_obj_44_may_examples ($.'$AnyOf'.examples)
def _jm_f_208(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$AnyOf'.examples]", path))
    return res

# check _jm_obj_44_may_id ($.'$AnyOf'.id)
def _jm_f_209(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AnyOf'.id]", path))
    return res

# check _jm_obj_44_may_readOnly ($.'$AnyOf'.readOnly)
def _jm_f_210(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$AnyOf'.readOnly]", path))
    return res

# check _jm_obj_44_may_title ($.'$AnyOf'.title)
def _jm_f_211(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$AnyOf'.title]", path))
    return res

# check _jm_obj_44_may_writeOnly ($.'$AnyOf'.writeOnly)
def _jm_f_212(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$AnyOf'.writeOnly]", path))
    return res


# object $.'$AnyOf'
def _jm_obj_44(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$AnyOf']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_44: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_44_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_44 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$AnyOf']", lpath_44 if path is not None else None))
                    return False
        elif pfun := _jm_obj_44_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_44 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$AnyOf']", lpath_44 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$AnyOf']", lpath_44 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$AnyOf']", path))
        return False
    return True

# check $AnyOf ($.'$AnyOf')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$AnyOf'
    res = _jm_obj_44(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$AnyOf']", path))
    return res

# check _jm_obj_48_must_oneOf ($.'$OneOf'.oneOf)
def _jm_f_213(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.oneOf
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [$.'$OneOf'.oneOf]", path))
    return res


# check _jm_obj_48_may_$anchor ($.'$OneOf'.'$anchor')
def _jm_f_214(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$OneOf'.'$anchor']", path))
    return res

# check _jm_obj_48_may_$comment ($.'$OneOf'.'$comment')
def _jm_f_215(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$OneOf'.'$comment']", path))
    return res

# object $.'$OneOf'.'$defs'
def _jm_obj_49(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$OneOf'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_49: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$OneOf'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$OneOf'.'$defs'.'']", lpath_49 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_48_may_$defs ($.'$OneOf'.'$defs')
def _jm_f_216(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.'$defs'
    res = _jm_obj_49(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$OneOf'.'$defs']", path))
    return res

# check _jm_obj_48_may_$dynamicAnchor ($.'$OneOf'.'$dynamicAnchor')
def _jm_f_217(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$OneOf'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_48_may_$id ($.'$OneOf'.'$id')
def _jm_f_218(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$OneOf'.'$id']", path))
    return res

# check _jm_obj_48_may_$schema ($.'$OneOf'.'$schema')
def _jm_f_219(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$OneOf'.'$schema']", path))
    return res

# object $.'$OneOf'.'$vocabulary'
def _jm_obj_50(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$OneOf'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_50: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_50 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$OneOf'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$OneOf'.'$vocabulary'.'$URI']", lpath_50 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$OneOf'.'$vocabulary']", lpath_50 if path is not None else None))
            return False
    return True

# check _jm_obj_48_may_$vocabulary ($.'$OneOf'.'$vocabulary')
def _jm_f_220(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.'$vocabulary'
    res = _jm_obj_50(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$OneOf'.'$vocabulary']", path))
    return res

# check _jm_obj_48_may_default ($.'$OneOf'.default)
def _jm_f_221(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$OneOf'.default]", path))
    return res

# object $.'$OneOf'.definitions
def _jm_obj_51(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$OneOf'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_51: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$OneOf'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$OneOf'.definitions.'']", lpath_51 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_48_may_definitions ($.'$OneOf'.definitions)
def _jm_f_222(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.definitions
    res = _jm_obj_51(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$OneOf'.definitions]", path))
    return res

# check _jm_obj_48_may_deprecated ($.'$OneOf'.deprecated)
def _jm_f_223(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$OneOf'.deprecated]", path))
    return res

# check _jm_obj_48_may_description ($.'$OneOf'.description)
def _jm_f_224(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$OneOf'.description]", path))
    return res

# check _jm_obj_48_may_examples ($.'$OneOf'.examples)
def _jm_f_225(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$OneOf'.examples]", path))
    return res

# check _jm_obj_48_may_id ($.'$OneOf'.id)
def _jm_f_226(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$OneOf'.id]", path))
    return res

# check _jm_obj_48_may_readOnly ($.'$OneOf'.readOnly)
def _jm_f_227(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$OneOf'.readOnly]", path))
    return res

# check _jm_obj_48_may_title ($.'$OneOf'.title)
def _jm_f_228(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$OneOf'.title]", path))
    return res

# check _jm_obj_48_may_writeOnly ($.'$OneOf'.writeOnly)
def _jm_f_229(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$OneOf'.writeOnly]", path))
    return res


# object $.'$OneOf'
def _jm_obj_48(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$OneOf']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_48: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_48_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_48 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$OneOf']", lpath_48 if path is not None else None))
                    return False
        elif pfun := _jm_obj_48_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_48 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$OneOf']", lpath_48 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$OneOf']", lpath_48 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$OneOf']", path))
        return False
    return True

# check $OneOf ($.'$OneOf')
def json_model_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OneOf'
    res = _jm_obj_48(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$OneOf']", path))
    return res

# check _jm_obj_52_must_enum ($.'$Enum'.enum)
def _jm_f_230(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.enum
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $enum [$.'$Enum'.enum]", path))
    return res


# check _jm_obj_52_may_$anchor ($.'$Enum'.'$anchor')
def _jm_f_231(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Enum'.'$anchor']", path))
    return res

# check _jm_obj_52_may_$comment ($.'$Enum'.'$comment')
def _jm_f_232(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Enum'.'$comment']", path))
    return res

# object $.'$Enum'.'$defs'
def _jm_obj_53(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Enum'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_53: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Enum'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Enum'.'$defs'.'']", lpath_53 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_52_may_$defs ($.'$Enum'.'$defs')
def _jm_f_233(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.'$defs'
    res = _jm_obj_53(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Enum'.'$defs']", path))
    return res

# check _jm_obj_52_may_$dynamicAnchor ($.'$Enum'.'$dynamicAnchor')
def _jm_f_234(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Enum'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_52_may_$id ($.'$Enum'.'$id')
def _jm_f_235(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Enum'.'$id']", path))
    return res

# check _jm_obj_52_may_$schema ($.'$Enum'.'$schema')
def _jm_f_236(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Enum'.'$schema']", path))
    return res

# object $.'$Enum'.'$vocabulary'
def _jm_obj_54(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Enum'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_54: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_54 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$Enum'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$Enum'.'$vocabulary'.'$URI']", lpath_54 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Enum'.'$vocabulary']", lpath_54 if path is not None else None))
            return False
    return True

# check _jm_obj_52_may_$vocabulary ($.'$Enum'.'$vocabulary')
def _jm_f_237(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.'$vocabulary'
    res = _jm_obj_54(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Enum'.'$vocabulary']", path))
    return res

# check _jm_obj_52_may_default ($.'$Enum'.default)
def _jm_f_238(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Enum'.default]", path))
    return res

# object $.'$Enum'.definitions
def _jm_obj_55(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Enum'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_55: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Enum'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Enum'.definitions.'']", lpath_55 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_52_may_definitions ($.'$Enum'.definitions)
def _jm_f_239(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.definitions
    res = _jm_obj_55(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Enum'.definitions]", path))
    return res

# check _jm_obj_52_may_deprecated ($.'$Enum'.deprecated)
def _jm_f_240(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Enum'.deprecated]", path))
    return res

# check _jm_obj_52_may_description ($.'$Enum'.description)
def _jm_f_241(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Enum'.description]", path))
    return res

# check _jm_obj_52_may_examples ($.'$Enum'.examples)
def _jm_f_242(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Enum'.examples]", path))
    return res

# check _jm_obj_52_may_id ($.'$Enum'.id)
def _jm_f_243(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Enum'.id]", path))
    return res

# check _jm_obj_52_may_readOnly ($.'$Enum'.readOnly)
def _jm_f_244(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Enum'.readOnly]", path))
    return res

# check _jm_obj_52_may_title ($.'$Enum'.title)
def _jm_f_245(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Enum'.title]", path))
    return res

# check _jm_obj_52_may_writeOnly ($.'$Enum'.writeOnly)
def _jm_f_246(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Enum'.writeOnly]", path))
    return res


# object $.'$Enum'
def _jm_obj_52(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Enum']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_52: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_52_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_52 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Enum']", lpath_52 if path is not None else None))
                    return False
        elif pfun := _jm_obj_52_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_52 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Enum']", lpath_52 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Enum']", lpath_52 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Enum']", path))
        return False
    return True

# check $Enum ($.'$Enum')
def json_model_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Enum'
    res = _jm_obj_52(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Enum']", path))
    return res

# check _jm_obj_56_must_const ($.'$Const'.const)
def _jm_f_247(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.const
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $const [$.'$Const'.const]", path))
    return res


# check _jm_obj_56_may_$anchor ($.'$Const'.'$anchor')
def _jm_f_248(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Const'.'$anchor']", path))
    return res

# check _jm_obj_56_may_$comment ($.'$Const'.'$comment')
def _jm_f_249(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Const'.'$comment']", path))
    return res

# object $.'$Const'.'$defs'
def _jm_obj_57(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Const'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_57: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Const'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Const'.'$defs'.'']", lpath_57 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_56_may_$defs ($.'$Const'.'$defs')
def _jm_f_250(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.'$defs'
    res = _jm_obj_57(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Const'.'$defs']", path))
    return res

# check _jm_obj_56_may_$dynamicAnchor ($.'$Const'.'$dynamicAnchor')
def _jm_f_251(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Const'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_56_may_$id ($.'$Const'.'$id')
def _jm_f_252(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Const'.'$id']", path))
    return res

# check _jm_obj_56_may_$schema ($.'$Const'.'$schema')
def _jm_f_253(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Const'.'$schema']", path))
    return res

# object $.'$Const'.'$vocabulary'
def _jm_obj_58(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Const'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_58: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_58 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$Const'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$Const'.'$vocabulary'.'$URI']", lpath_58 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Const'.'$vocabulary']", lpath_58 if path is not None else None))
            return False
    return True

# check _jm_obj_56_may_$vocabulary ($.'$Const'.'$vocabulary')
def _jm_f_254(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.'$vocabulary'
    res = _jm_obj_58(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Const'.'$vocabulary']", path))
    return res

# check _jm_obj_56_may_default ($.'$Const'.default)
def _jm_f_255(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Const'.default]", path))
    return res

# object $.'$Const'.definitions
def _jm_obj_59(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Const'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_59: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Const'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Const'.definitions.'']", lpath_59 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_56_may_definitions ($.'$Const'.definitions)
def _jm_f_256(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.definitions
    res = _jm_obj_59(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Const'.definitions]", path))
    return res

# check _jm_obj_56_may_deprecated ($.'$Const'.deprecated)
def _jm_f_257(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Const'.deprecated]", path))
    return res

# check _jm_obj_56_may_description ($.'$Const'.description)
def _jm_f_258(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Const'.description]", path))
    return res

# check _jm_obj_56_may_examples ($.'$Const'.examples)
def _jm_f_259(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Const'.examples]", path))
    return res

# check _jm_obj_56_may_id ($.'$Const'.id)
def _jm_f_260(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Const'.id]", path))
    return res

# check _jm_obj_56_may_readOnly ($.'$Const'.readOnly)
def _jm_f_261(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Const'.readOnly]", path))
    return res

# check _jm_obj_56_may_title ($.'$Const'.title)
def _jm_f_262(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Const'.title]", path))
    return res

# check _jm_obj_56_may_writeOnly ($.'$Const'.writeOnly)
def _jm_f_263(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Const'.writeOnly]", path))
    return res


# object $.'$Const'
def _jm_obj_56(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Const']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_56: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_56_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_56 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Const']", lpath_56 if path is not None else None))
                    return False
        elif pfun := _jm_obj_56_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_56 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Const']", lpath_56 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Const']", lpath_56 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Const']", path))
        return False
    return True

# check $Const ($.'$Const')
def json_model_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Const'
    res = _jm_obj_56(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Const']", path))
    return res

# check _jm_obj_60_must_$ref ($.'$Ref'.'$ref')
def _jm_f_264(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.'$ref'
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI [$.'$Ref'.'$ref']", path))
    return res


# check _jm_obj_60_may_$anchor ($.'$Ref'.'$anchor')
def _jm_f_265(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Ref'.'$anchor']", path))
    return res

# check _jm_obj_60_may_$comment ($.'$Ref'.'$comment')
def _jm_f_266(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Ref'.'$comment']", path))
    return res

# object $.'$Ref'.'$defs'
def _jm_obj_61(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Ref'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_61: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Ref'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Ref'.'$defs'.'']", lpath_61 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_60_may_$defs ($.'$Ref'.'$defs')
def _jm_f_267(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.'$defs'
    res = _jm_obj_61(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Ref'.'$defs']", path))
    return res

# check _jm_obj_60_may_$dynamicAnchor ($.'$Ref'.'$dynamicAnchor')
def _jm_f_268(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Ref'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_60_may_$id ($.'$Ref'.'$id')
def _jm_f_269(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Ref'.'$id']", path))
    return res

# check _jm_obj_60_may_$schema ($.'$Ref'.'$schema')
def _jm_f_270(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Ref'.'$schema']", path))
    return res

# object $.'$Ref'.'$vocabulary'
def _jm_obj_62(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Ref'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_62: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_62 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$Ref'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$Ref'.'$vocabulary'.'$URI']", lpath_62 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Ref'.'$vocabulary']", lpath_62 if path is not None else None))
            return False
    return True

# check _jm_obj_60_may_$vocabulary ($.'$Ref'.'$vocabulary')
def _jm_f_271(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.'$vocabulary'
    res = _jm_obj_62(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Ref'.'$vocabulary']", path))
    return res

# check _jm_obj_60_may_default ($.'$Ref'.default)
def _jm_f_272(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Ref'.default]", path))
    return res

# object $.'$Ref'.definitions
def _jm_obj_63(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Ref'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_63: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Ref'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$Ref'.definitions.'']", lpath_63 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_60_may_definitions ($.'$Ref'.definitions)
def _jm_f_273(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.definitions
    res = _jm_obj_63(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Ref'.definitions]", path))
    return res

# check _jm_obj_60_may_deprecated ($.'$Ref'.deprecated)
def _jm_f_274(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Ref'.deprecated]", path))
    return res

# check _jm_obj_60_may_description ($.'$Ref'.description)
def _jm_f_275(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Ref'.description]", path))
    return res

# check _jm_obj_60_may_examples ($.'$Ref'.examples)
def _jm_f_276(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Ref'.examples]", path))
    return res

# check _jm_obj_60_may_id ($.'$Ref'.id)
def _jm_f_277(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Ref'.id]", path))
    return res

# check _jm_obj_60_may_readOnly ($.'$Ref'.readOnly)
def _jm_f_278(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Ref'.readOnly]", path))
    return res

# check _jm_obj_60_may_title ($.'$Ref'.title)
def _jm_f_279(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Ref'.title]", path))
    return res

# check _jm_obj_60_may_writeOnly ($.'$Ref'.writeOnly)
def _jm_f_280(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Ref'.writeOnly]", path))
    return res


# object $.'$Ref'
def _jm_obj_60(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Ref']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_60: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_60_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_60 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Ref']", lpath_60 if path is not None else None))
                    return False
        elif pfun := _jm_obj_60_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_60 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Ref']", lpath_60 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Ref']", lpath_60 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Ref']", path))
        return False
    return True

# check $Ref ($.'$Ref')
def json_model_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Ref'
    res = _jm_obj_60(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Ref']", path))
    return res

# check _jm_obj_64_must_$dynamicRef ($.'$DynRef'.'$dynamicRef')
def _jm_f_281(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.'$dynamicRef'
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI [$.'$DynRef'.'$dynamicRef']", path))
    return res


# check _jm_obj_64_may_$anchor ($.'$DynRef'.'$anchor')
def _jm_f_282(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.'$anchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$DynRef'.'$anchor']", path))
    return res

# check _jm_obj_64_may_$comment ($.'$DynRef'.'$comment')
def _jm_f_283(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$DynRef'.'$comment']", path))
    return res

# object $.'$DynRef'.'$defs'
def _jm_obj_65(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$DynRef'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_65: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$DynRef'.'$defs'.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$DynRef'.'$defs'.'']", lpath_65 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_64_may_$defs ($.'$DynRef'.'$defs')
def _jm_f_284(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.'$defs'
    res = _jm_obj_65(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$DynRef'.'$defs']", path))
    return res

# check _jm_obj_64_may_$dynamicAnchor ($.'$DynRef'.'$dynamicAnchor')
def _jm_f_285(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.'$dynamicAnchor'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$DynRef'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_64_may_$id ($.'$DynRef'.'$id')
def _jm_f_286(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$DynRef'.'$id']", path))
    return res

# check _jm_obj_64_may_$schema ($.'$DynRef'.'$schema')
def _jm_f_287(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$DynRef'.'$schema']", path))
    return res

# object $.'$DynRef'.'$vocabulary'
def _jm_obj_66(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$DynRef'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_66: Path = (path + [ prop ]) if path is not None else None
        if json_model_2(prop, lpath_66 if path is not None else None, rep):
            # handle {len(defs)} key props
            # $.'$DynRef'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [$.'$DynRef'.'$vocabulary'.'$URI']", lpath_66 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$DynRef'.'$vocabulary']", lpath_66 if path is not None else None))
            return False
    return True

# check _jm_obj_64_may_$vocabulary ($.'$DynRef'.'$vocabulary')
def _jm_f_288(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.'$vocabulary'
    res = _jm_obj_66(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$DynRef'.'$vocabulary']", path))
    return res

# check _jm_obj_64_may_default ($.'$DynRef'.default)
def _jm_f_289(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$DynRef'.default]", path))
    return res

# object $.'$DynRef'.definitions
def _jm_obj_67(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$DynRef'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_67: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$DynRef'.definitions.''
        res = json_model_26(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [$.'$DynRef'.definitions.'']", lpath_67 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_64_may_definitions ($.'$DynRef'.definitions)
def _jm_f_290(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.definitions
    res = _jm_obj_67(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$DynRef'.definitions]", path))
    return res

# check _jm_obj_64_may_deprecated ($.'$DynRef'.deprecated)
def _jm_f_291(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$DynRef'.deprecated]", path))
    return res

# check _jm_obj_64_may_description ($.'$DynRef'.description)
def _jm_f_292(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$DynRef'.description]", path))
    return res

# check _jm_obj_64_may_examples ($.'$DynRef'.examples)
def _jm_f_293(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$DynRef'.examples]", path))
    return res

# check _jm_obj_64_may_id ($.'$DynRef'.id)
def _jm_f_294(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$DynRef'.id]", path))
    return res

# check _jm_obj_64_may_readOnly ($.'$DynRef'.readOnly)
def _jm_f_295(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$DynRef'.readOnly]", path))
    return res

# check _jm_obj_64_may_title ($.'$DynRef'.title)
def _jm_f_296(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$DynRef'.title]", path))
    return res

# check _jm_obj_64_may_writeOnly ($.'$DynRef'.writeOnly)
def _jm_f_297(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$DynRef'.writeOnly]", path))
    return res


# object $.'$DynRef'
def _jm_obj_64(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$DynRef']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_64: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_64_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_64 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$DynRef']", lpath_64 if path is not None else None))
                    return False
        elif pfun := _jm_obj_64_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_64 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$DynRef']", lpath_64 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$DynRef']", lpath_64 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$DynRef']", path))
        return False
    return True

# check $DynRef ($.'$DynRef')
def json_model_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$DynRef'
    res = _jm_obj_64(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$DynRef']", path))
    return res

# check $ObjectSchema ($.'$ObjectSchema')
def json_model_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$ObjectSchema'
    # $.'$ObjectSchema'.'|'.0
    res = json_model_17(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Null [$.'$ObjectSchema'.'|'.0]", path))
    if not res:
        # $.'$ObjectSchema'.'|'.1
        res = json_model_16(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Bool [$.'$ObjectSchema'.'|'.1]", path))
        if not res:
            # $.'$ObjectSchema'.'|'.2
            res = json_model_22(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Const [$.'$ObjectSchema'.'|'.2]", path))
            if not res:
                # $.'$ObjectSchema'.'|'.3
                res = json_model_21(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Enum [$.'$ObjectSchema'.'|'.3]", path))
                if not res:
                    # $.'$ObjectSchema'.'|'.4
                    res = json_model_14(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Integer [$.'$ObjectSchema'.'|'.4]", path))
                    if not res:
                        # $.'$ObjectSchema'.'|'.5
                        res = json_model_15(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Number [$.'$ObjectSchema'.'|'.5]", path))
                        if not res:
                            # $.'$ObjectSchema'.'|'.6
                            res = json_model_11(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected $String [$.'$ObjectSchema'.'|'.6]", path))
                            if not res:
                                # $.'$ObjectSchema'.'|'.7
                                res = json_model_12(val, path, rep)
                                if not res:
                                    rep is None or rep.append(("unexpected $Array [$.'$ObjectSchema'.'|'.7]", path))
                                if not res:
                                    # $.'$ObjectSchema'.'|'.8
                                    res = json_model_13(val, path, rep)
                                    if not res:
                                        rep is None or rep.append(("unexpected $Object [$.'$ObjectSchema'.'|'.8]", path))
                                    if not res:
                                        # $.'$ObjectSchema'.'|'.9
                                        res = json_model_18(val, path, rep)
                                        if not res:
                                            rep is None or rep.append(("unexpected $AllOf [$.'$ObjectSchema'.'|'.9]", path))
                                        if not res:
                                            # $.'$ObjectSchema'.'|'.10
                                            res = json_model_19(val, path, rep)
                                            if not res:
                                                rep is None or rep.append(("unexpected $AnyOf [$.'$ObjectSchema'.'|'.10]", path))
                                            if not res:
                                                # $.'$ObjectSchema'.'|'.11
                                                res = json_model_20(val, path, rep)
                                                if not res:
                                                    rep is None or rep.append(("unexpected $OneOf [$.'$ObjectSchema'.'|'.11]", path))
                                                if not res:
                                                    # $.'$ObjectSchema'.'|'.12
                                                    res = json_model_23(val, path, rep)
                                                    if not res:
                                                        rep is None or rep.append(("unexpected $Ref [$.'$ObjectSchema'.'|'.12]", path))
                                                    if not res:
                                                        # $.'$ObjectSchema'.'|'.13
                                                        res = json_model_24(val, path, rep)
                                                        if not res:
                                                            rep is None or rep.append(("unexpected $DynRef [$.'$ObjectSchema'.'|'.13]", path))
                                                        if not res:
                                                            # $.'$ObjectSchema'.'|'.14
                                                            res = json_model_10(val, path, rep)
                                                            if not res:
                                                                rep is None or rep.append(("unexpected $metas [$.'$ObjectSchema'.'|'.14]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$ObjectSchema'.'|']", path))
    return res

# check $Schema ($.'$Schema')
def json_model_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'
    # $.'$Schema'.'|'.0
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Schema'.'|'.0]", path))
    if not res:
        # $.'$Schema'.'|'.1
        res = json_model_25(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ObjectSchema [$.'$Schema'.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Schema'.'|']", path))
    return res

# check _jm_obj_68_must_$schema ($.'$RootSchema'.'&'.0.'$schema')
def _jm_f_298(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$RootSchema'.'&'.0.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$RootSchema'.'&'.0.'$schema']", path))
    return res


# object $.'$RootSchema'.'&'.0
def _jm_obj_68(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$RootSchema'.'&'.0]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_68: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_68_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_68 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$RootSchema'.'&'.0]", lpath_68 if path is not None else None))
                    return False
        else:
            # accept any other props
            pass
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$RootSchema'.'&'.0.'']", path))
        return False
    return True

# check $RootSchema ($.'$RootSchema')
def json_model_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$RootSchema'
    res = True
    if res:
        # $.'$RootSchema'.'&'.0
        res = _jm_obj_68(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$RootSchema'.'&'.0]", path))
        if res:
            # $.'$RootSchema'.'&'.1
            res = json_model_25(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $ObjectSchema [$.'$RootSchema'.'&'.1]", path))
    if not res:
        rep is None or rep.append(("not all model match [$.'$RootSchema'.'&']", path))
    return res

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = json_model_27(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $RootSchema [$]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'byte', 'date', 'date-time', 'double', 'duration', 'email', 'hostname', 'idn-email', 'idn-hostname', 'int', 'int32', 'int64', 'ipv4', 'ipv6', 'iri', 'iri-reference', 'json-pointer', 'mime-type', 'regex', 'relative-json-pointer', 'time', 'uint', 'uint32', 'uint64', 'uri', 'uri-reference', 'uuid'}
        global _jm_obj_0_may
        _jm_obj_0_may = {
            "format": _jm_f_0,
            "maxLength": _jm_f_1,
            "minLength": _jm_f_2,
            "pattern": _jm_f_3,
        }
        global _jm_obj_1_may
        _jm_obj_1_may = {
            "additionalItems": _jm_f_4,
            "items": _jm_f_5,
            "maxItems": _jm_f_6,
            "minItems": _jm_f_7,
            "prefixItems": _jm_f_8,
            "unevaluatedItems": _jm_f_9,
            "uniqueItems": _jm_f_10,
        }
        global _jm_obj_2_may
        _jm_obj_2_may = {
            "additionalProperties": _jm_f_11,
            "maxProperties": _jm_f_12,
            "minProperties": _jm_f_13,
            "patternProperties": _jm_f_14,
            "properties": _jm_f_15,
            "propertyNames": _jm_f_16,
            "required": _jm_f_17,
            "unevaluatedProperties": _jm_f_18,
        }
        global _jm_obj_5_may
        _jm_obj_5_may = {
            "maximum": _jm_f_19,
            "minimum": _jm_f_20,
        }
        global _jm_obj_6_may
        _jm_obj_6_may = {
            "$anchor": _jm_f_21,
            "$comment": _jm_f_22,
            "$defs": _jm_f_23,
            "$dynamicAnchor": _jm_f_24,
            "$id": _jm_f_25,
            "$schema": _jm_f_26,
            "$vocabulary": _jm_f_27,
            "default": _jm_f_28,
            "definitions": _jm_f_29,
            "deprecated": _jm_f_30,
            "description": _jm_f_31,
            "examples": _jm_f_32,
            "id": _jm_f_33,
            "readOnly": _jm_f_34,
            "title": _jm_f_35,
            "writeOnly": _jm_f_36,
        }
        global _jm_obj_10_must
        _jm_obj_10_must = {
            "type": _jm_f_37,
        }
        global _jm_cst_1
        _jm_cst_1 = {'byte', 'date', 'date-time', 'double', 'duration', 'email', 'hostname', 'idn-email', 'idn-hostname', 'int', 'int32', 'int64', 'ipv4', 'ipv6', 'iri', 'iri-reference', 'json-pointer', 'mime-type', 'regex', 'relative-json-pointer', 'time', 'uint', 'uint32', 'uint64', 'uri', 'uri-reference', 'uuid'}
        global _jm_obj_10_may
        _jm_obj_10_may = {
            "$anchor": _jm_f_38,
            "$comment": _jm_f_39,
            "$defs": _jm_f_40,
            "$dynamicAnchor": _jm_f_41,
            "$id": _jm_f_42,
            "$schema": _jm_f_43,
            "$vocabulary": _jm_f_44,
            "default": _jm_f_45,
            "definitions": _jm_f_46,
            "deprecated": _jm_f_47,
            "description": _jm_f_48,
            "examples": _jm_f_49,
            "format": _jm_f_50,
            "id": _jm_f_51,
            "maxLength": _jm_f_52,
            "minLength": _jm_f_53,
            "pattern": _jm_f_54,
            "readOnly": _jm_f_55,
            "title": _jm_f_56,
            "writeOnly": _jm_f_57,
        }
        global _jm_obj_14_must
        _jm_obj_14_must = {
            "type": _jm_f_58,
        }
        global _jm_obj_14_may
        _jm_obj_14_may = {
            "$anchor": _jm_f_59,
            "$comment": _jm_f_60,
            "$defs": _jm_f_61,
            "$dynamicAnchor": _jm_f_62,
            "$id": _jm_f_63,
            "$schema": _jm_f_64,
            "$vocabulary": _jm_f_65,
            "additionalItems": _jm_f_66,
            "default": _jm_f_67,
            "definitions": _jm_f_68,
            "deprecated": _jm_f_69,
            "description": _jm_f_70,
            "examples": _jm_f_71,
            "id": _jm_f_72,
            "items": _jm_f_73,
            "maxItems": _jm_f_74,
            "minItems": _jm_f_75,
            "prefixItems": _jm_f_76,
            "readOnly": _jm_f_77,
            "title": _jm_f_78,
            "unevaluatedItems": _jm_f_79,
            "uniqueItems": _jm_f_80,
            "writeOnly": _jm_f_81,
        }
        global _jm_obj_18_must
        _jm_obj_18_must = {
            "type": _jm_f_82,
        }
        global _jm_obj_18_may
        _jm_obj_18_may = {
            "$anchor": _jm_f_83,
            "$comment": _jm_f_84,
            "$defs": _jm_f_85,
            "$dynamicAnchor": _jm_f_86,
            "$id": _jm_f_87,
            "$schema": _jm_f_88,
            "$vocabulary": _jm_f_89,
            "additionalProperties": _jm_f_90,
            "default": _jm_f_91,
            "definitions": _jm_f_92,
            "deprecated": _jm_f_93,
            "description": _jm_f_94,
            "examples": _jm_f_95,
            "id": _jm_f_96,
            "maxProperties": _jm_f_97,
            "minProperties": _jm_f_98,
            "patternProperties": _jm_f_99,
            "properties": _jm_f_100,
            "propertyNames": _jm_f_101,
            "readOnly": _jm_f_102,
            "required": _jm_f_103,
            "title": _jm_f_104,
            "unevaluatedProperties": _jm_f_105,
            "writeOnly": _jm_f_106,
        }
        global _jm_obj_24_must
        _jm_obj_24_must = {
            "type": _jm_f_107,
        }
        global _jm_obj_24_may
        _jm_obj_24_may = {
            "$anchor": _jm_f_108,
            "$comment": _jm_f_109,
            "$defs": _jm_f_110,
            "$dynamicAnchor": _jm_f_111,
            "$id": _jm_f_112,
            "$schema": _jm_f_113,
            "$vocabulary": _jm_f_114,
            "default": _jm_f_115,
            "definitions": _jm_f_116,
            "deprecated": _jm_f_117,
            "description": _jm_f_118,
            "examples": _jm_f_119,
            "id": _jm_f_120,
            "maximum": _jm_f_121,
            "minimum": _jm_f_122,
            "readOnly": _jm_f_123,
            "title": _jm_f_124,
            "writeOnly": _jm_f_125,
        }
        global _jm_obj_28_must
        _jm_obj_28_must = {
            "type": _jm_f_126,
        }
        global _jm_obj_28_may
        _jm_obj_28_may = {
            "$anchor": _jm_f_127,
            "$comment": _jm_f_128,
            "$defs": _jm_f_129,
            "$dynamicAnchor": _jm_f_130,
            "$id": _jm_f_131,
            "$schema": _jm_f_132,
            "$vocabulary": _jm_f_133,
            "default": _jm_f_134,
            "definitions": _jm_f_135,
            "deprecated": _jm_f_136,
            "description": _jm_f_137,
            "examples": _jm_f_138,
            "id": _jm_f_139,
            "maximum": _jm_f_140,
            "minimum": _jm_f_141,
            "readOnly": _jm_f_142,
            "title": _jm_f_143,
            "writeOnly": _jm_f_144,
        }
        global _jm_obj_32_must
        _jm_obj_32_must = {
            "type": _jm_f_145,
        }
        global _jm_obj_32_may
        _jm_obj_32_may = {
            "$anchor": _jm_f_146,
            "$comment": _jm_f_147,
            "$defs": _jm_f_148,
            "$dynamicAnchor": _jm_f_149,
            "$id": _jm_f_150,
            "$schema": _jm_f_151,
            "$vocabulary": _jm_f_152,
            "default": _jm_f_153,
            "definitions": _jm_f_154,
            "deprecated": _jm_f_155,
            "description": _jm_f_156,
            "examples": _jm_f_157,
            "id": _jm_f_158,
            "readOnly": _jm_f_159,
            "title": _jm_f_160,
            "writeOnly": _jm_f_161,
        }
        global _jm_obj_36_must
        _jm_obj_36_must = {
            "type": _jm_f_162,
        }
        global _jm_obj_36_may
        _jm_obj_36_may = {
            "$anchor": _jm_f_163,
            "$comment": _jm_f_164,
            "$defs": _jm_f_165,
            "$dynamicAnchor": _jm_f_166,
            "$id": _jm_f_167,
            "$schema": _jm_f_168,
            "$vocabulary": _jm_f_169,
            "default": _jm_f_170,
            "definitions": _jm_f_171,
            "deprecated": _jm_f_172,
            "description": _jm_f_173,
            "examples": _jm_f_174,
            "id": _jm_f_175,
            "readOnly": _jm_f_176,
            "title": _jm_f_177,
            "writeOnly": _jm_f_178,
        }
        global _jm_obj_40_must
        _jm_obj_40_must = {
            "allOf": _jm_f_179,
        }
        global _jm_obj_40_may
        _jm_obj_40_may = {
            "$anchor": _jm_f_180,
            "$comment": _jm_f_181,
            "$defs": _jm_f_182,
            "$dynamicAnchor": _jm_f_183,
            "$id": _jm_f_184,
            "$schema": _jm_f_185,
            "$vocabulary": _jm_f_186,
            "default": _jm_f_187,
            "definitions": _jm_f_188,
            "deprecated": _jm_f_189,
            "description": _jm_f_190,
            "examples": _jm_f_191,
            "id": _jm_f_192,
            "readOnly": _jm_f_193,
            "title": _jm_f_194,
            "writeOnly": _jm_f_195,
        }
        global _jm_obj_44_must
        _jm_obj_44_must = {
            "anyOf": _jm_f_196,
        }
        global _jm_obj_44_may
        _jm_obj_44_may = {
            "$anchor": _jm_f_197,
            "$comment": _jm_f_198,
            "$defs": _jm_f_199,
            "$dynamicAnchor": _jm_f_200,
            "$id": _jm_f_201,
            "$schema": _jm_f_202,
            "$vocabulary": _jm_f_203,
            "default": _jm_f_204,
            "definitions": _jm_f_205,
            "deprecated": _jm_f_206,
            "description": _jm_f_207,
            "examples": _jm_f_208,
            "id": _jm_f_209,
            "readOnly": _jm_f_210,
            "title": _jm_f_211,
            "writeOnly": _jm_f_212,
        }
        global _jm_obj_48_must
        _jm_obj_48_must = {
            "oneOf": _jm_f_213,
        }
        global _jm_obj_48_may
        _jm_obj_48_may = {
            "$anchor": _jm_f_214,
            "$comment": _jm_f_215,
            "$defs": _jm_f_216,
            "$dynamicAnchor": _jm_f_217,
            "$id": _jm_f_218,
            "$schema": _jm_f_219,
            "$vocabulary": _jm_f_220,
            "default": _jm_f_221,
            "definitions": _jm_f_222,
            "deprecated": _jm_f_223,
            "description": _jm_f_224,
            "examples": _jm_f_225,
            "id": _jm_f_226,
            "readOnly": _jm_f_227,
            "title": _jm_f_228,
            "writeOnly": _jm_f_229,
        }
        global _jm_obj_52_must
        _jm_obj_52_must = {
            "enum": _jm_f_230,
        }
        global _jm_obj_52_may
        _jm_obj_52_may = {
            "$anchor": _jm_f_231,
            "$comment": _jm_f_232,
            "$defs": _jm_f_233,
            "$dynamicAnchor": _jm_f_234,
            "$id": _jm_f_235,
            "$schema": _jm_f_236,
            "$vocabulary": _jm_f_237,
            "default": _jm_f_238,
            "definitions": _jm_f_239,
            "deprecated": _jm_f_240,
            "description": _jm_f_241,
            "examples": _jm_f_242,
            "id": _jm_f_243,
            "readOnly": _jm_f_244,
            "title": _jm_f_245,
            "writeOnly": _jm_f_246,
        }
        global _jm_obj_56_must
        _jm_obj_56_must = {
            "const": _jm_f_247,
        }
        global _jm_obj_56_may
        _jm_obj_56_may = {
            "$anchor": _jm_f_248,
            "$comment": _jm_f_249,
            "$defs": _jm_f_250,
            "$dynamicAnchor": _jm_f_251,
            "$id": _jm_f_252,
            "$schema": _jm_f_253,
            "$vocabulary": _jm_f_254,
            "default": _jm_f_255,
            "definitions": _jm_f_256,
            "deprecated": _jm_f_257,
            "description": _jm_f_258,
            "examples": _jm_f_259,
            "id": _jm_f_260,
            "readOnly": _jm_f_261,
            "title": _jm_f_262,
            "writeOnly": _jm_f_263,
        }
        global _jm_obj_60_must
        _jm_obj_60_must = {
            "$ref": _jm_f_264,
        }
        global _jm_obj_60_may
        _jm_obj_60_may = {
            "$anchor": _jm_f_265,
            "$comment": _jm_f_266,
            "$defs": _jm_f_267,
            "$dynamicAnchor": _jm_f_268,
            "$id": _jm_f_269,
            "$schema": _jm_f_270,
            "$vocabulary": _jm_f_271,
            "default": _jm_f_272,
            "definitions": _jm_f_273,
            "deprecated": _jm_f_274,
            "description": _jm_f_275,
            "examples": _jm_f_276,
            "id": _jm_f_277,
            "readOnly": _jm_f_278,
            "title": _jm_f_279,
            "writeOnly": _jm_f_280,
        }
        global _jm_obj_64_must
        _jm_obj_64_must = {
            "$dynamicRef": _jm_f_281,
        }
        global _jm_obj_64_may
        _jm_obj_64_may = {
            "$anchor": _jm_f_282,
            "$comment": _jm_f_283,
            "$defs": _jm_f_284,
            "$dynamicAnchor": _jm_f_285,
            "$id": _jm_f_286,
            "$schema": _jm_f_287,
            "$vocabulary": _jm_f_288,
            "default": _jm_f_289,
            "definitions": _jm_f_290,
            "deprecated": _jm_f_291,
            "description": _jm_f_292,
            "examples": _jm_f_293,
            "id": _jm_f_294,
            "readOnly": _jm_f_295,
            "title": _jm_f_296,
            "writeOnly": _jm_f_297,
        }
        global _jm_obj_68_must
        _jm_obj_68_must = {
            "$schema": _jm_f_298,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "URI": json_model_2,
            "const": json_model_3,
            "enum": json_model_4,
            "schemaArray": json_model_5,
            "stringKeywords": json_model_6,
            "arrayKeywords": json_model_7,
            "objectKeywords": json_model_8,
            "numberKeywords": json_model_9,
            "metas": json_model_10,
            "String": json_model_11,
            "Array": json_model_12,
            "Object": json_model_13,
            "Integer": json_model_14,
            "Number": json_model_15,
            "Bool": json_model_16,
            "Null": json_model_17,
            "AllOf": json_model_18,
            "AnyOf": json_model_19,
            "OneOf": json_model_20,
            "Enum": json_model_21,
            "Const": json_model_22,
            "Ref": json_model_23,
            "DynRef": json_model_24,
            "ObjectSchema": json_model_25,
            "Schema": json_model_26,
            "RootSchema": json_model_27,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
