#! /bin/env python
#
# Model: ./json-schema-draft-03-fuzzy.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

json_model_8_may: PropMap

def _is_valid_re(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except Exception as e:
            rep is None or rep.append(f"regex compile error at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for regex at {path}: {_tname(value)}")
    return False

def _is_valid_url(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except Exception as e:
            rep is None or re.append(f"invalid url at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for url at {path}: {_tname(value)}")
    return False

# define "json_model_8_may_type" ($.'$schema'.type)
def _jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.type
    # $.'$schema'.type.'|'.0
    result = json_model_10(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $allTypes at {path} [$.'$schema'.type.'|'.0]")
    if not result:
        # $.'$schema'.type.'|'.1
        result = isinstance(value, list)
        if result:
            for array_0_idx, array_0_item in enumerate(value):
                lpath = path + '.' + str(array_0_idx)
                # $.'$schema'.type.'|'.1.0
                # $.'$schema'.type.'|'.1.0.'|'.0
                result = isinstance(array_0_item, str)
                if not result:
                    rep is None or rep.append(f"not an expected string at {lpath} [$.'$schema'.type.'|'.1.0.'|'.0]")
                if not result:
                    # $.'$schema'.type.'|'.1.0.'|'.1
                    result = json_model_8(array_0_item, path, rep)
                    if not result:
                        rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$schema'.type.'|'.1.0.'|'.1]")
                if not result:
                    rep is None or rep.append(f"not any model match at {lpath} [$.'$schema'.type.'|'.1.0.'|']")
                if not result:
                    break
        if not result:
            rep is None or rep.append(f"not array or unexpected array at {path} [$.'$schema'.type.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$schema'.type.'|']")
    return result





# define "json_model_8_may_additionalProperties" ($.'$schema'.additionalProperties)
def _jm_f_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.additionalProperties
    # $.'$schema'.additionalProperties.'|'.0
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$schema'.additionalProperties.'|'.0]")
    if not result:
        # $.'$schema'.additionalProperties.'|'.1
        result = json_model_8(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema'.additionalProperties.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$schema'.additionalProperties.'|']")
    return result

# define "json_model_8_may_items" ($.'$schema'.items)
def _jm_f_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.items
    # $.'$schema'.items.'|'.0
    result = json_model_8(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema'.items.'|'.0]")
    if not result:
        # $.'$schema'.items.'|'.1
        result = isinstance(value, list)
        if result:
            for array_1_idx, array_1_item in enumerate(value):
                lpath = path + '.' + str(array_1_idx)
                # $.'$schema'.items.'|'.1.0
                result = json_model_8(array_1_item, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$schema'.items.'|'.1.0]")
                if not result:
                    break
        if not result:
            rep is None or rep.append(f"not array or unexpected array at {path} [$.'$schema'.items.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$schema'.items.'|']")
    return result

# define "json_model_8_may_additionalItems" ($.'$schema'.additionalItems)
def _jm_f_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.additionalItems
    # $.'$schema'.additionalItems.'|'.0
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$schema'.additionalItems.'|'.0]")
    if not result:
        # $.'$schema'.additionalItems.'|'.1
        result = json_model_8(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema'.additionalItems.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$schema'.additionalItems.'|']")
    return result



# define "json_model_8_may_required" ($.'$schema'.required)
def _jm_f_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.required
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$schema'.required]")
    return result

# define "json_model_8_may_minimum" ($.'$schema'.minimum)
def _jm_f_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.minimum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$schema'.minimum]")
    return result

# define "json_model_8_may_maximum" ($.'$schema'.maximum)
def _jm_f_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.maximum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$schema'.maximum]")
    return result

# define "json_model_8_may_exclusiveMaximum" ($.'$schema'.exclusiveMaximum)
def _jm_f_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.exclusiveMaximum
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$schema'.exclusiveMaximum]")
    return result

# define "json_model_8_may_exclusiveMinimum" ($.'$schema'.exclusiveMinimum)
def _jm_f_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.exclusiveMinimum
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$schema'.exclusiveMinimum]")
    return result

# define "json_model_8_may_minItems" ($.'$schema'.minItems)
def _jm_f_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.minItems
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$schema'.minItems]")
    return result

# define "json_model_8_may_maxItems" ($.'$schema'.maxItems)
def _jm_f_13(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.maxItems
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$schema'.maxItems]")
    return result

# define "json_model_8_may_pattern" ($.'$schema'.pattern)
def _jm_f_14(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.pattern
    result = _is_valid_re(value, path, rep) or _rep(f"invalid $REGEX at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $REGEX at {path} [$.'$schema'.pattern]")
    return result

# define "json_model_8_may_minLength" ($.'$schema'.minLength)
def _jm_f_15(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.minLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$schema'.minLength]")
    return result

# define "json_model_8_may_maxLength" ($.'$schema'.maxLength)
def _jm_f_16(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.maxLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$schema'.maxLength]")
    return result

# define "json_model_8_may_enum" ($.'$schema'.enum)
def _jm_f_17(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.enum
    # $.'$schema'.enum.'@'
    result = isinstance(value, list)
    if result:
        for array_3_idx, array_3_item in enumerate(value):
            lpath = path + '.' + str(array_3_idx)
            # $.'$schema'.enum.'@'.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$schema'.enum.'@'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$schema'.enum.'@']")
    result &= len(set(value)) == len(value)
    result &= len(value) >= 1
    if not result:
        rep is None or rep.append(f"invalid type or constraints at {path} [$.'$schema'.enum]")
    return result

# define "json_model_8_may_uniqueItems" ($.'$schema'.uniqueItems)
def _jm_f_18(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.uniqueItems
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$schema'.uniqueItems]")
    return result

# define "json_model_8_may_title" ($.'$schema'.title)
def _jm_f_19(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$schema'.title]")
    return result

# define "json_model_8_may_description" ($.'$schema'.description)
def _jm_f_20(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$schema'.description]")
    return result

# define "json_model_8_may_format" ($.'$schema'.format)
def _jm_f_21(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.format
    result = not isinstance(value, (list, dict)) and value in {'color', 'date', 'date-time', 'email', 'host-name', 'ip-address', 'ipv6', 'phone', 'regex', 'style', 'time', 'uri', 'utc-millisec'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$schema'.format.'|']")
    return result

# define "json_model_8_may_default" ($.'$schema'.default)
def _jm_f_22(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$schema'.default]")
    return result

# define "json_model_8_may_divisibleBy" ($.'$schema'.divisibleBy)
def _jm_f_23(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.divisibleBy
    result = isinstance(value, float) and value > 0.0
    if not result:
        rep is None or rep.append(f"not a 1.0 float at {path} [$.'$schema'.divisibleBy]")
    return result

# define "json_model_8_may_disallow" ($.'$schema'.disallow)
def _jm_f_24(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.disallow
    # $.'$schema'.disallow.'|'.0
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$schema'.disallow.'|'.0]")
    if not result:
        # $.'$schema'.disallow.'|'.1
        result = json_model_11(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $distinctSchemaArray at {path} [$.'$schema'.disallow.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$schema'.disallow.'|']")
    return result

# define "json_model_8_may_extends" ($.'$schema'.extends)
def _jm_f_25(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.extends
    # $.'$schema'.extends.'|'.0
    result = json_model_8(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema'.extends.'|'.0]")
    if not result:
        # $.'$schema'.extends.'|'.1
        result = isinstance(value, list)
        if result:
            for array_4_idx, array_4_item in enumerate(value):
                lpath = path + '.' + str(array_4_idx)
                # $.'$schema'.extends.'|'.1.0
                result = json_model_8(array_4_item, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$schema'.extends.'|'.1.0]")
                if not result:
                    break
        if not result:
            rep is None or rep.append(f"not array or unexpected array at {path} [$.'$schema'.extends.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$schema'.extends.'|']")
    return result

# define "json_model_8_may_id" ($.'$schema'.id)
def _jm_f_26(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.id
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$schema'.id]")
    return result

# define "json_model_8_may_$schema" ($.'$schema'.'$schema')
def _jm_f_27(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.'$schema'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$schema'.'$schema']")
    return result

# define "json_model_8_may_$ref" ($.'$schema'.'$ref')
def _jm_f_28(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'.'$ref'
    result = _is_valid_url(value, path, rep) or _rep(f"invalid $URL at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $URL at {path} [$.'$schema'.'$ref']")
    return result



# object $.'$schema'.properties
def _jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$schema'.properties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$schema'.properties.''
        result = json_model_8(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$schema'.properties.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$schema'.properties.'']")
            return False
    return True


# object $.'$schema'.patternProperties
def _jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$schema'.patternProperties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$schema'.patternProperties.''
        result = json_model_8(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$schema'.patternProperties.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$schema'.patternProperties.'']")
            return False
    return True


# object $.'$schema'.dependencies
def _jm_f_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$schema'.dependencies]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$schema'.dependencies.''
        # $.'$schema'.dependencies.''.'|'.0
        result = isinstance(val, str)
        if not result:
            rep is None or rep.append(f"not an expected string at {lpath} [$.'$schema'.dependencies.''.'|'.0]")
        if not result:
            # $.'$schema'.dependencies.''.'|'.1
            result = isinstance(val, list)
            if result:
                for array_2_idx, array_2_item in enumerate(val):
                    lpath = lpath + '.' + str(array_2_idx)
                    # $.'$schema'.dependencies.''.'|'.1.0
                    result = isinstance(array_2_item, str)
                    if not result:
                        rep is None or rep.append(f"not an expected string at {lpath} [$.'$schema'.dependencies.''.'|'.1.0]")
                    if not result:
                        break
            if not result:
                rep is None or rep.append(f"not array or unexpected array at {lpath} [$.'$schema'.dependencies.''.'|'.1]")
            if not result:
                # $.'$schema'.dependencies.''.'|'.2
                result = json_model_8(val, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$schema'.dependencies.''.'|'.2]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$schema'.dependencies.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$schema'.dependencies.'']")
            return False
    return True


# object $.'$schema'
def json_model_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$schema']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_8_may:  # may
            if not json_model_8_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$schema'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$schema']")
            return False
    return True



# define "$schema#allTypes" ($.'$schema#allTypes')
def json_model_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#allTypes'
    result = not isinstance(value, (list, dict)) and value in {'any', 'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$schema#allTypes'.'|']")
    return result

# define "$schema#distinctSchemaArray" ($.'$schema#distinctSchemaArray')
def json_model_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#distinctSchemaArray'
    # $.'$schema#distinctSchemaArray'.'@'
    result = isinstance(value, list)
    if result:
        for array_5_idx, array_5_item in enumerate(value):
            lpath = path + '.' + str(array_5_idx)
            # $.'$schema#distinctSchemaArray'.'@'.0
            # $.'$schema#distinctSchemaArray'.'@'.0.'|'.0
            result = isinstance(array_5_item, str)
            if not result:
                rep is None or rep.append(f"not an expected string at {lpath} [$.'$schema#distinctSchemaArray'.'@'.0.'|'.0]")
            if not result:
                # $.'$schema#distinctSchemaArray'.'@'.0.'|'.1
                result = json_model_8(array_5_item, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$schema#distinctSchemaArray'.'@'.0.'|'.1]")
            if not result:
                rep is None or rep.append(f"not any model match at {lpath} [$.'$schema#distinctSchemaArray'.'@'.0.'|']")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$schema#distinctSchemaArray'.'@']")
    result &= len(set(value)) == len(value)
    if not result:
        rep is None or rep.append(f"invalid type or constraints at {path} [$.'$schema#distinctSchemaArray']")
    return result

# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = json_model_8(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema at {path} [$]")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
json_model_8_may = {
    "type": _jm_f_0,
    "properties": _jm_f_1,
    "patternProperties": _jm_f_2,
    "additionalProperties": _jm_f_3,
    "items": _jm_f_4,
    "additionalItems": _jm_f_5,
    "dependencies": _jm_f_6,
    "required": _jm_f_7,
    "minimum": _jm_f_8,
    "maximum": _jm_f_9,
    "exclusiveMaximum": _jm_f_10,
    "exclusiveMinimum": _jm_f_11,
    "minItems": _jm_f_12,
    "maxItems": _jm_f_13,
    "pattern": _jm_f_14,
    "minLength": _jm_f_15,
    "maxLength": _jm_f_16,
    "enum": _jm_f_17,
    "uniqueItems": _jm_f_18,
    "title": _jm_f_19,
    "description": _jm_f_20,
    "format": _jm_f_21,
    "default": _jm_f_22,
    "divisibleBy": _jm_f_23,
    "disallow": _jm_f_24,
    "extends": _jm_f_25,
    "id": _jm_f_26,
    "$schema": _jm_f_27,
    "$ref": _jm_f_28,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

