# Generated for model: ./l10n.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

json_model_0_must: PropMap
jm_f_0_must: PropMap
jm_f_0_may: PropMap
# regex "/^\\./"
jm_re_0 = re.compile("^\\.").search
# regex "/^([#~$%@|&+^/*=!]|[<>!]=)$/"
jm_re_1 = re.compile("^([#~$%@|&+^/*=!]|[<>!]=)$").search
json_model_0_may: PropMap

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False

# define "jm_f_0_must_Model" ($.'$'.Model)
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.'$'.Model
    result = isinstance(value, str) and value == "$https://json-model.org/models/json-model"
    return result

# define "jm_f_0_may_" ($.'$'.'')
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.'$'.''
    result = is_valid_url(value, path)
    return result



# define "json_model_0_must_~" ($.'~')
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.'~'
    result = isinstance(value, str) and value == "https://json-model.org/models/l10n"
    return result



# define "json_model_0_must_@" ($.'@')
def jm_f_5(value: Jsonable, path: str) -> bool:
    # $.'@'
    result = isinstance(value, str) and value == "$Model"
    return result

# define "json_model_0_may_#" ($.'#')
def jm_f_6(value: Jsonable, path: str) -> bool:
    # $.'#'
    result = isinstance(value, str)
    return result



# object $.'$'
def jm_f_0(value: Jsonable, path: str = "$") -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_0_must:  # must
            must_count += 1
            if not jm_f_0_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_f_0_may:  # may
            if not jm_f_0_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'%'
def jm_f_4(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if jm_re_0(prop) is not None:  # /^\./
            # $.'%'.'/^\./'
            # "/^([#~$%@|&+^/*=!]|[<>!]=)$/"
            result = isinstance(model, str) and jm_re_1(model) is not None
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $
def json_model_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_0_must:  # must
            must_count += 1
            if not json_model_0_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_0_may:  # may
            if not json_model_0_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 4



# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_0_must = {
    "$": jm_f_0,
    "~": jm_f_3,
    "%": jm_f_4,
    "@": jm_f_5,
}
jm_f_0_must = {
    "Model": jm_f_1,
}
jm_f_0_may = {
    "": jm_f_2,
}
json_model_0_may = {
    "#": jm_f_6,
}


