#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_obj_1_must: PropMap
_jm_obj_1_may: PropMap
_jm_re_0_search: Callable
_jm_re_0: RegexFun
_jm_re_1_search: Callable
_jm_re_1: RegexFun
_jm_obj_0_must: PropMap
_jm_obj_0_may: PropMap
check_model_map: PropMap

# check _jm_obj_1_must_Model ($.'$'.Model)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$'.Model
    res = isinstance(val, str) and val == "$https://json-model.org/models/json-model"
    if not res:
        rep is None or rep.append(("unexpected _$https://json-model.org/models/json-model [$.'$'.Model]", path))
    return res


# check _jm_obj_1_may_ ($.'$'.'')
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$'.''
    res = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URL [$.'$'.'']", path))
    return res


# object $.'$'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_1_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_1 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$']", lpath_1 if path is not None else None))
                    return False
        elif pfun := _jm_obj_1_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_1 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$']", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$']", lpath_1 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$']", path))
        return False
    return True

# check _jm_obj_0_must_$ ($.'$')
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$']", path))
    return res



# object $.'%'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'%'.'/^\\..+$/'
            # "/^([#~$%@|&+^/*=]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_1(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'%'.'/^\\\\..+$/']", lpath_2 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'%']", lpath_2 if path is not None else None))
            return False
    return True

# check _jm_obj_0_must_% ($.'%')
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'%'
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'%']", path))
    return res

# check _jm_obj_0_must_@ ($.'@')
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'@'
    res = isinstance(val, str) and val == "$Model"
    if not res:
        rep is None or rep.append(("unexpected _$Model [$.'@']", path))
    return res

# check _jm_obj_0_must_~ ($.'~')
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'~'
    res = isinstance(val, str) and val == "https://json-model.org/models/l10n"
    if not res:
        rep is None or rep.append(("unexpected _https://json-model.org/models/l10n [$.'~']", path))
    return res


# check _jm_obj_0_may_# ($.'#')
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'#']", path))
    return res


# object $
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_must.get(prop):
            # handle 4 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_0 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$]", lpath_0 if path is not None else None))
                    return False
        elif pfun := _jm_obj_0_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$]", lpath_0 if path is not None else None))
            return False
    if must_count != 4:
        rep is None or rep.append(("missing must prop [$]", path))
        return False
    return True

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_obj_1_must
        _jm_obj_1_must = {
            "Model": _jm_f_1,
        }
        global _jm_obj_1_may
        _jm_obj_1_may = {
            "": _jm_f_2,
        }
        global _jm_re_0_search, _jm_re_0
        _jm_re_0_search = re.compile("^\\..+$").search
        _jm_re_0 = lambda s: _jm_re_0_search(s) is not None
        global _jm_re_1_search, _jm_re_1
        _jm_re_1_search = re.compile("^([#~$%@|&+^/*=]|[<>!]=?)$").search
        _jm_re_1 = lambda s: _jm_re_1_search(s) is not None
        global _jm_obj_0_must
        _jm_obj_0_must = {
            "$": _jm_f_0,
            "%": _jm_f_3,
            "@": _jm_f_4,
            "~": _jm_f_5,
        }
        global _jm_obj_0_may
        _jm_obj_0_may = {
            "#": _jm_f_6,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_search, _jm_re_0
        _jm_re_0_search = None
        _jm_re_0 = None
        global _jm_re_1_search, _jm_re_1
        _jm_re_1_search = None
        _jm_re_1 = None


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
