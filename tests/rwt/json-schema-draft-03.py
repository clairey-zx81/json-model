# Generated for model: ./json-schema-draft-03.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

json_model_0_may: PropMap

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False

# define "json_model_0_may_type" ($.type)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.type
    # $.type.'|'.0
    result = json_model_2(value, path)
    if not result:
        # $.type.'|'.1
        result = isinstance(value, list)
        if result:
            assert isinstance(value, list)  # pyright helper
            for array_1_idx, array_1_item in enumerate(value):
                # $.type.'|'.1.0
                # $.type.'|'.1.0.'|'.0
                result = isinstance(array_1_item, str)
                if not result:
                    # $.type.'|'.1.0.'|'.1
                    result = json_model_0(array_1_item, path)
                if not result: break
    return result





# define "json_model_0_may_additionalProperties" ($.additionalProperties)
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.additionalProperties
    # $.additionalProperties.'|'.0
    result = isinstance(value, bool)
    if not result:
        # $.additionalProperties.'|'.1
        result = json_model_0(value, path)
    return result

# define "json_model_0_may_items" ($.items)
def jm_f_4(value: Jsonable, path: str) -> bool:
    # $.items
    # $.items.'|'.0
    result = json_model_0(value, path)
    if not result:
        # $.items.'|'.1
        result = isinstance(value, list)
        if result:
            assert isinstance(value, list)  # pyright helper
            for array_2_idx, array_2_item in enumerate(value):
                # $.items.'|'.1.0
                result = json_model_0(array_2_item, path)
                if not result: break
    return result

# define "json_model_0_may_additionalItems" ($.additionalItems)
def jm_f_5(value: Jsonable, path: str) -> bool:
    # $.additionalItems
    # $.additionalItems.'|'.0
    result = isinstance(value, bool)
    if not result:
        # $.additionalItems.'|'.1
        result = json_model_0(value, path)
    return result



# define "json_model_0_may_required" ($.required)
def jm_f_7(value: Jsonable, path: str) -> bool:
    # $.required
    result = isinstance(value, bool)
    return result

# define "json_model_0_may_minimum" ($.minimum)
def jm_f_8(value: Jsonable, path: str) -> bool:
    # $.minimum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_0_may_maximum" ($.maximum)
def jm_f_9(value: Jsonable, path: str) -> bool:
    # $.maximum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_0_may_exclusiveMaximum" ($.exclusiveMaximum)
def jm_f_10(value: Jsonable, path: str) -> bool:
    # $.exclusiveMaximum
    result = isinstance(value, bool)
    return result

# define "json_model_0_may_exclusiveMinimum" ($.exclusiveMinimum)
def jm_f_11(value: Jsonable, path: str) -> bool:
    # $.exclusiveMinimum
    result = isinstance(value, bool)
    return result

# define "json_model_0_may_minItems" ($.minItems)
def jm_f_12(value: Jsonable, path: str) -> bool:
    # $.minItems
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_0_may_maxItems" ($.maxItems)
def jm_f_13(value: Jsonable, path: str) -> bool:
    # $.maxItems
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_0_may_pattern" ($.pattern)
def jm_f_14(value: Jsonable, path: str) -> bool:
    # $.pattern
    result = is_valid_re(value, path)
    return result

# define "json_model_0_may_minLength" ($.minLength)
def jm_f_15(value: Jsonable, path: str) -> bool:
    # $.minLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_0_may_maxLength" ($.maxLength)
def jm_f_16(value: Jsonable, path: str) -> bool:
    # $.maxLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_0_may_enum" ($.enum)
def jm_f_17(value: Jsonable, path: str) -> bool:
    # $.enum
    # $.enum.'@'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_4_idx, array_4_item in enumerate(value):
            # $.enum.'@'.0
            result = True
            if not result: break
    result &= len(set(value)) == len(value)
    result &= len(value) >= 1
    return result

# define "json_model_0_may_uniqueItems" ($.uniqueItems)
def jm_f_18(value: Jsonable, path: str) -> bool:
    # $.uniqueItems
    result = isinstance(value, bool)
    return result

# define "json_model_0_may_title" ($.title)
def jm_f_19(value: Jsonable, path: str) -> bool:
    # $.title
    result = isinstance(value, str)
    return result

# define "json_model_0_may_description" ($.description)
def jm_f_20(value: Jsonable, path: str) -> bool:
    # $.description
    result = isinstance(value, str)
    return result

# define "json_model_0_may_format" ($.format)
def jm_f_21(value: Jsonable, path: str) -> bool:
    # $.format
    result = not isinstance(value, (list, dict)) and value in {'color', 'date', 'date-time', 'email', 'host-name', 'ip-address', 'ipv6', 'phone', 'regex', 'style', 'time', 'uri', 'utc-millisec'}
    return result

# define "json_model_0_may_default" ($.default)
def jm_f_22(value: Jsonable, path: str) -> bool:
    # $.default
    result = True
    return result

# define "json_model_0_may_divisibleBy" ($.divisibleBy)
def jm_f_23(value: Jsonable, path: str) -> bool:
    # $.divisibleBy
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool)) and value > 0.0
    return result

# define "json_model_0_may_disallow" ($.disallow)
def jm_f_24(value: Jsonable, path: str) -> bool:
    # $.disallow
    # $.disallow.'|'.0
    result = isinstance(value, str)
    if not result:
        # $.disallow.'|'.1
        result = json_model_3(value, path)
    return result

# define "json_model_0_may_extends" ($.extends)
def jm_f_25(value: Jsonable, path: str) -> bool:
    # $.extends
    # $.extends.'|'.0
    result = json_model_0(value, path)
    if not result:
        # $.extends.'|'.1
        result = isinstance(value, list)
        if result:
            assert isinstance(value, list)  # pyright helper
            for array_5_idx, array_5_item in enumerate(value):
                # $.extends.'|'.1.0
                result = json_model_0(array_5_item, path)
                if not result: break
    return result

# define "json_model_0_may_id" ($.id)
def jm_f_26(value: Jsonable, path: str) -> bool:
    # $.id
    result = isinstance(value, str)
    return result

# define "json_model_0_may_$schema" ($.'$schema')
def jm_f_27(value: Jsonable, path: str) -> bool:
    # $.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_0_may_$ref" ($.'$ref')
def jm_f_28(value: Jsonable, path: str) -> bool:
    # $.'$ref'
    result = is_valid_url(value, path)
    return result


# define "$URI" ($.URI)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.URI
    result = is_valid_url(value, path)
    return result

# define "$allTypes" ($.allTypes)
def json_model_2(value: Jsonable, path: str) -> bool:
    # $.allTypes
    result = not isinstance(value, (list, dict)) and value in {'any', 'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
    return result

# define "$distinctSchemaArray" ($.distinctSchemaArray)
def json_model_3(value: Jsonable, path: str) -> bool:
    # $.distinctSchemaArray
    # $.distinctSchemaArray.'@'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_0_idx, array_0_item in enumerate(value):
            # $.distinctSchemaArray.'@'.0
            # $.distinctSchemaArray.'@'.0.'|'.0
            result = isinstance(array_0_item, str)
            if not result:
                # $.distinctSchemaArray.'@'.0.'|'.1
                result = json_model_0(array_0_item, path)
            if not result: break
    result &= len(set(value)) == len(value)
    return result

# define "$Schema" ($.Schema)
def json_model_4(value: Jsonable, path: str) -> bool:
    # $.Schema
    result = json_model_0(value, path)
    return result


# object $.properties
def jm_f_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.properties.''
        result = json_model_0(model, path)
        if not result: return False
    return True


# object $.patternProperties
def jm_f_2(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.patternProperties.''
        result = json_model_0(model, path)
        if not result: return False
    return True


# object $.dependencies
def jm_f_6(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.dependencies.''
        # $.dependencies.''.'|'.0
        result = isinstance(model, str)
        if not result:
            # $.dependencies.''.'|'.1
            result = isinstance(model, list)
            if result:
                assert isinstance(model, list)  # pyright helper
                for array_3_idx, array_3_item in enumerate(model):
                    # $.dependencies.''.'|'.1.0
                    result = isinstance(array_3_item, str)
                    if not result: break
            if not result:
                # $.dependencies.''.'|'.2
                result = json_model_0(model, path)
        if not result: return False
    return True


# object $
def json_model_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_0_may:  # may
            if not json_model_0_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True



# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_0_may = {
    "type": jm_f_0,
    "properties": jm_f_1,
    "patternProperties": jm_f_2,
    "additionalProperties": jm_f_3,
    "items": jm_f_4,
    "additionalItems": jm_f_5,
    "dependencies": jm_f_6,
    "required": jm_f_7,
    "minimum": jm_f_8,
    "maximum": jm_f_9,
    "exclusiveMaximum": jm_f_10,
    "exclusiveMinimum": jm_f_11,
    "minItems": jm_f_12,
    "maxItems": jm_f_13,
    "pattern": jm_f_14,
    "minLength": jm_f_15,
    "maxLength": jm_f_16,
    "enum": jm_f_17,
    "uniqueItems": jm_f_18,
    "title": jm_f_19,
    "description": jm_f_20,
    "format": jm_f_21,
    "default": jm_f_22,
    "divisibleBy": jm_f_23,
    "disallow": jm_f_24,
    "extends": jm_f_25,
    "id": jm_f_26,
    "$schema": jm_f_27,
    "$ref": jm_f_28,
}


