# Generated for model: ./json-model-preprocessed-v2.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_date(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            datetime.date.fromisoformat(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False

jm_obj_0_must: PropMap
jm_obj_0_may: PropMap
# regex "/^(<=|>=|<|>|\u2265|\u2264)$/"
jm_re_0 = re.compile("^(<=|>=|<|>|\u2265|\u2264)$").search
# regex "/^(=|!=|\u2260)$/"
jm_re_1 = re.compile("^(=|!=|\u2260)$").search
jm_obj_1_must: PropMap
jm_obj_1_may: PropMap
jm_obj_2_must: PropMap
jm_obj_2_may: PropMap
jm_obj_3_must: PropMap
jm_obj_3_may: PropMap
jm_obj_4_may: PropMap
# regex "/^[@|&^+/*]$/"
jm_re_2 = re.compile("^[@|&^+/*]$").search
jm_obj_5_must: PropMap
jm_obj_5_may: PropMap
jm_f_12_may: PropMap
# regex "/.+/"
jm_re_3 = re.compile(".+").search
jm_f_15_may: PropMap
# regex "/^\\..*$/"
jm_re_4 = re.compile("^\\..*$").search
# regex "/^([|&^+/*@~<>=!$%]|<=|>=|!=)$/"
jm_re_5 = re.compile("^([|&^+/*@~<>=!$%]|<=|>=|!=)$").search
jm_obj_6_must: PropMap
jm_obj_6_may: PropMap
jm_f_21_may: PropMap
jm_f_24_may: PropMap
jm_obj_7_must: PropMap
jm_obj_7_may: PropMap
jm_f_29_may: PropMap
jm_f_32_may: PropMap
jm_obj_8_must: PropMap
jm_obj_8_may: PropMap
jm_f_37_may: PropMap
jm_f_40_may: PropMap
jm_obj_9_may: PropMap
jm_f_44_may: PropMap
jm_f_47_may: PropMap
# regex "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
jm_re_6 = re.compile("^((file|https?)://.+|\\./.*|\\.\\./.*)$").search

# define "jm_obj_0_must_@" ($.'$#model#Elem'.'|'.0.'@')
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.'$#model#Elem'.'|'.0.'@'
    result = json_model_40(value, path)
    return result

# define "jm_obj_0_may_#" ($.'$#model#Elem'.'|'.0.'#')
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.'$#model#Elem'.'|'.0.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_0_may_!" ($.'$#model#Elem'.'|'.0.'!')
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.'$#model#Elem'.'|'.0.'!'
    result = isinstance(value, bool)
    return result

# define "jm_obj_1_must_|" ($.'$#model#Elem'.'|'.1.'|')
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.'$#model#Elem'.'|'.1.'|'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_1_idx, array_1_item in enumerate(value):
            # $.'$#model#Elem'.'|'.1.'|'.0
            result = json_model_40(array_1_item, path)
            if not result: break
    return result

# define "jm_obj_1_may_#" ($.'$#model#Elem'.'|'.1.'#')
def jm_f_4(value: Jsonable, path: str) -> bool:
    # $.'$#model#Elem'.'|'.1.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_2_must_&" ($.'$#model#Elem'.'|'.2.'&')
def jm_f_5(value: Jsonable, path: str) -> bool:
    # $.'$#model#Elem'.'|'.2.'&'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_2_idx, array_2_item in enumerate(value):
            # $.'$#model#Elem'.'|'.2.'&'.0
            result = json_model_40(array_2_item, path)
            if not result: break
    return result

# define "jm_obj_2_may_#" ($.'$#model#Elem'.'|'.2.'#')
def jm_f_6(value: Jsonable, path: str) -> bool:
    # $.'$#model#Elem'.'|'.2.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_3_must_^" ($.'$#model#Elem'.'|'.3.'^')
def jm_f_7(value: Jsonable, path: str) -> bool:
    # $.'$#model#Elem'.'|'.3.'^'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_3_idx, array_3_item in enumerate(value):
            # $.'$#model#Elem'.'|'.3.'^'.0
            result = json_model_40(array_3_item, path)
            if not result: break
    return result

# define "jm_obj_3_may_#" ($.'$#model#Elem'.'|'.3.'#')
def jm_f_8(value: Jsonable, path: str) -> bool:
    # $.'$#model#Elem'.'|'.3.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_4_may_#" ($.'$#model#Elem'.'|'.4.'#')
def jm_f_9(value: Jsonable, path: str) -> bool:
    # $.'$#model#Elem'.'|'.4.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_5_must_@" ($.'$#model#Root'.'|'.0.'@')
def jm_f_10(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.0.'@'
    result = json_model_40(value, path)
    return result

# define "jm_obj_5_may_~" ($.'$#model#Root'.'|'.0.'~')
def jm_f_11(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.0.'~'
    result = json_model_25(value, path)
    return result

# define "jm_f_12_may_#" ($.'$#model#Root'.'|'.0.'$'.'#')
def jm_f_13(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.0.'$'.'#'
    result = isinstance(value, str)
    return result

# define "jm_f_12_may_" ($.'$#model#Root'.'|'.0.'$'.'')
def jm_f_14(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.0.'$'.''
    result = json_model_25(value, path)
    return result



# define "jm_f_15_may_#" ($.'$#model#Root'.'|'.0.'%'.'#')
def jm_f_16(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.0.'%'.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_5_may_#" ($.'$#model#Root'.'|'.0.'#')
def jm_f_17(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.0.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_5_may_!" ($.'$#model#Root'.'|'.0.'!')
def jm_f_18(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.0.'!'
    result = isinstance(value, bool)
    return result

# define "jm_obj_6_must_|" ($.'$#model#Root'.'|'.1.'|')
def jm_f_19(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.1.'|'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_4_idx, array_4_item in enumerate(value):
            # $.'$#model#Root'.'|'.1.'|'.0
            result = json_model_40(array_4_item, path)
            if not result: break
    return result

# define "jm_obj_6_may_~" ($.'$#model#Root'.'|'.1.'~')
def jm_f_20(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.1.'~'
    result = json_model_25(value, path)
    return result

# define "jm_f_21_may_#" ($.'$#model#Root'.'|'.1.'$'.'#')
def jm_f_22(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.1.'$'.'#'
    result = isinstance(value, str)
    return result

# define "jm_f_21_may_" ($.'$#model#Root'.'|'.1.'$'.'')
def jm_f_23(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.1.'$'.''
    result = json_model_25(value, path)
    return result



# define "jm_f_24_may_#" ($.'$#model#Root'.'|'.1.'%'.'#')
def jm_f_25(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.1.'%'.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_6_may_#" ($.'$#model#Root'.'|'.1.'#')
def jm_f_26(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.1.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_7_must_&" ($.'$#model#Root'.'|'.2.'&')
def jm_f_27(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.2.'&'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_5_idx, array_5_item in enumerate(value):
            # $.'$#model#Root'.'|'.2.'&'.0
            result = json_model_40(array_5_item, path)
            if not result: break
    return result

# define "jm_obj_7_may_~" ($.'$#model#Root'.'|'.2.'~')
def jm_f_28(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.2.'~'
    result = json_model_25(value, path)
    return result

# define "jm_f_29_may_#" ($.'$#model#Root'.'|'.2.'$'.'#')
def jm_f_30(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.2.'$'.'#'
    result = isinstance(value, str)
    return result

# define "jm_f_29_may_" ($.'$#model#Root'.'|'.2.'$'.'')
def jm_f_31(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.2.'$'.''
    result = json_model_25(value, path)
    return result



# define "jm_f_32_may_#" ($.'$#model#Root'.'|'.2.'%'.'#')
def jm_f_33(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.2.'%'.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_7_may_#" ($.'$#model#Root'.'|'.2.'#')
def jm_f_34(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.2.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_8_must_^" ($.'$#model#Root'.'|'.3.'^')
def jm_f_35(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.3.'^'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_6_idx, array_6_item in enumerate(value):
            # $.'$#model#Root'.'|'.3.'^'.0
            result = json_model_40(array_6_item, path)
            if not result: break
    return result

# define "jm_obj_8_may_~" ($.'$#model#Root'.'|'.3.'~')
def jm_f_36(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.3.'~'
    result = json_model_25(value, path)
    return result

# define "jm_f_37_may_#" ($.'$#model#Root'.'|'.3.'$'.'#')
def jm_f_38(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.3.'$'.'#'
    result = isinstance(value, str)
    return result

# define "jm_f_37_may_" ($.'$#model#Root'.'|'.3.'$'.'')
def jm_f_39(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.3.'$'.''
    result = json_model_25(value, path)
    return result



# define "jm_f_40_may_#" ($.'$#model#Root'.'|'.3.'%'.'#')
def jm_f_41(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.3.'%'.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_8_may_#" ($.'$#model#Root'.'|'.3.'#')
def jm_f_42(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.3.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_9_may_~" ($.'$#model#Root'.'|'.4.'~')
def jm_f_43(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.4.'~'
    result = json_model_25(value, path)
    return result

# define "jm_f_44_may_#" ($.'$#model#Root'.'|'.4.'$'.'#')
def jm_f_45(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.4.'$'.'#'
    result = isinstance(value, str)
    return result

# define "jm_f_44_may_" ($.'$#model#Root'.'|'.4.'$'.'')
def jm_f_46(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.4.'$'.''
    result = json_model_25(value, path)
    return result



# define "jm_f_47_may_#" ($.'$#model#Root'.'|'.4.'%'.'#')
def jm_f_48(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.4.'%'.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_9_may_#" ($.'$#model#Root'.'|'.4.'#')
def jm_f_49(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'.'|'.4.'#'
    result = isinstance(value, str)
    return result


# define "$model" ($.model)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.model
    result = json_model_24(value, path)
    return result

# define "$#model" ($.'$#model')
def json_model_24(value: Jsonable, path: str) -> bool:
    # $.'$#model'
    result = json_model_45(value, path)
    return result

# define "$#model#RootModel" ($.'$#model#RootModel')
def json_model_45(value: Jsonable, path: str) -> bool:
    # $.'$#model#RootModel'
    # $.'$#model#RootModel'.'|'.0
    result = json_model_39(value, path)
    if not result:
        # $.'$#model#RootModel'.'|'.1
        result = json_model_30(value, path)
        if not result:
            # $.'$#model#RootModel'.'|'.2
            result = json_model_44(value, path)
    return result

# define "$#model#Array" ($.'$#model#Array')
def json_model_30(value: Jsonable, path: str) -> bool:
    # $.'$#model#Array'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_0_idx, array_0_item in enumerate(value):
            # $.'$#model#Array'.0
            result = json_model_40(array_0_item, path)
            if not result: break
    return result

# define "$#model#Scalar" ($.'$#model#Scalar')
def json_model_39(value: Jsonable, path: str) -> bool:
    # $.'$#model#Scalar'
    # $.'$#model#Scalar'.'|'.0
    result = value is None
    if not result:
        # $.'$#model#Scalar'.'|'.1
        result = isinstance(value, bool) and value == True
        if not result:
            # $.'$#model#Scalar'.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool) and value == 0
            if not result:
                # $.'$#model#Scalar'.'|'.3
                result = isinstance(value, int) and not isinstance(value, bool) and value == 1
                if not result:
                    # $.'$#model#Scalar'.'|'.4
                    result = isinstance(value, int) and not isinstance(value, bool) and value == -1
                    if not result:
                        # $.'$#model#Scalar'.'|'.5
                        result = isinstance(value, float) and value == 0.0
                        if not result:
                            # $.'$#model#Scalar'.'|'.6
                            result = isinstance(value, float) and value == 1.0
                            if not result:
                                # $.'$#model#Scalar'.'|'.7
                                result = isinstance(value, float) and value == -1.0
                                if not result:
                                    # $.'$#model#Scalar'.'|'.8
                                    result = isinstance(value, str)
    return result

# define "$#model#Model" ($.'$#model#Model')
def json_model_40(value: Jsonable, path: str) -> bool:
    # $.'$#model#Model'
    # $.'$#model#Model'.'|'.0
    result = json_model_39(value, path)
    if not result:
        # $.'$#model#Model'.'|'.1
        result = json_model_30(value, path)
        if not result:
            # $.'$#model#Model'.'|'.2
            result = json_model_37(value, path)
    return result


# object $.'$#model#Elem'.'|'.0
def jm_obj_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_0_must:  # must
            must_count += 1
            if not jm_obj_0_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_0_may:  # may
            if not jm_obj_0_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^(<=|>=|<|>|≥|≤)$/
            # $.'$#model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$#model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            result = isinstance(model, int) and not isinstance(model, bool)
            if not result:
                # $.'$#model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                result = isinstance(model, float)
                if not result:
                    # $.'$#model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    result = isinstance(model, str)
            if not result: return False
        elif jm_re_1(prop) is not None:  # /^(=|!=|≠)$/
            # $.'$#model#Elem'.'|'.0.'/^(=|!=|≠)$/'
            result = json_model_26(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#model#Elem'.'|'.1
def jm_obj_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_1_must:  # must
            must_count += 1
            if not jm_obj_1_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_1_may:  # may
            if not jm_obj_1_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#model#Elem'.'|'.2
def jm_obj_2(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_2_must:  # must
            must_count += 1
            if not jm_obj_2_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_2_may:  # may
            if not jm_obj_2_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#model#Elem'.'|'.3
def jm_obj_3(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_3_must:  # must
            must_count += 1
            if not jm_obj_3_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_3_may:  # may
            if not jm_obj_3_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#model#Elem'.'|'.4
def jm_obj_4(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_4_may:  # may
            if not jm_obj_4_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_2(prop) is not None:  # /^[@|&^+/*]$/
            # $.'$#model#Elem'.'|'.4.'/^[@|&^+/*]$/'
            result = False
            if not result: return False
        else:  # catch all
            # $.'$#model#Elem'.'|'.4.''
            result = json_model_40(model, path)
            if not result: return False
    return True

# define "$#model#Elem" ($.'$#model#Elem')
def json_model_37(value: Jsonable, path: str) -> bool:
    # $.'$#model#Elem'
    result = isinstance(value, dict)
    if result:
        # $.'$#model#Elem'.'|'.0
        result = jm_obj_0(value, path)
        if not result:
            # $.'$#model#Elem'.'|'.1
            result = jm_obj_1(value, path)
            if not result:
                # $.'$#model#Elem'.'|'.2
                result = jm_obj_2(value, path)
                if not result:
                    # $.'$#model#Elem'.'|'.3
                    result = jm_obj_3(value, path)
                    if not result:
                        # $.'$#model#Elem'.'|'.4
                        result = jm_obj_4(value, path)
    return result

# define "$#model#Val" ($.'$#model#Val')
def json_model_26(value: Jsonable, path: str) -> bool:
    # $.'$#model#Val'
    # $.'$#model#Val'.'|'.0
    result = value is None
    if not result:
        # $.'$#model#Val'.'|'.1
        result = isinstance(value, bool)
        if not result:
            # $.'$#model#Val'.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool)
            if not result:
                # $.'$#model#Val'.'|'.3
                result = isinstance(value, float)
                if not result:
                    # $.'$#model#Val'.'|'.4
                    result = isinstance(value, str)
    return result


# object $.'$#model#Root'.'|'.0.'$'
def jm_f_12(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_12_may:  # may
            if not jm_f_12_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_3(prop) is not None:  # /.+/
            # $.'$#model#Root'.'|'.0.'$'.'/.+/'
            result = json_model_40(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#model#Root'.'|'.0.'%'
def jm_f_15(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_15_may:  # may
            if not jm_f_15_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /^\..*$/
            # $.'$#model#Root'.'|'.0.'%'.'/^\..*$/'
            # "/^([|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_5(model) is not None
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#model#Root'.'|'.0
def jm_obj_5(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_5_must:  # must
            must_count += 1
            if not jm_obj_5_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_5_may:  # may
            if not jm_obj_5_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^(<=|>=|<|>|≥|≤)$/
            # $.'$#model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$#model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            result = isinstance(model, int) and not isinstance(model, bool)
            if not result:
                # $.'$#model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                result = isinstance(model, float)
                if not result:
                    # $.'$#model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    result = isinstance(model, str)
            if not result: return False
        elif jm_re_1(prop) is not None:  # /^(=|!=|≠)$/
            # $.'$#model#Root'.'|'.0.'/^(=|!=|≠)$/'
            result = json_model_26(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#model#Root'.'|'.1.'$'
def jm_f_21(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_21_may:  # may
            if not jm_f_21_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_3(prop) is not None:  # /.+/
            # $.'$#model#Root'.'|'.1.'$'.'/.+/'
            result = json_model_40(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#model#Root'.'|'.1.'%'
def jm_f_24(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_24_may:  # may
            if not jm_f_24_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /^\..*$/
            # $.'$#model#Root'.'|'.1.'%'.'/^\..*$/'
            # "/^([|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_5(model) is not None
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#model#Root'.'|'.1
def jm_obj_6(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_6_must:  # must
            must_count += 1
            if not jm_obj_6_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_6_may:  # may
            if not jm_obj_6_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#model#Root'.'|'.2.'$'
def jm_f_29(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_29_may:  # may
            if not jm_f_29_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_3(prop) is not None:  # /.+/
            # $.'$#model#Root'.'|'.2.'$'.'/.+/'
            result = json_model_40(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#model#Root'.'|'.2.'%'
def jm_f_32(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_32_may:  # may
            if not jm_f_32_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /^\..*$/
            # $.'$#model#Root'.'|'.2.'%'.'/^\..*$/'
            # "/^([|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_5(model) is not None
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#model#Root'.'|'.2
def jm_obj_7(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_7_must:  # must
            must_count += 1
            if not jm_obj_7_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_7_may:  # may
            if not jm_obj_7_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#model#Root'.'|'.3.'$'
def jm_f_37(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_37_may:  # may
            if not jm_f_37_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_3(prop) is not None:  # /.+/
            # $.'$#model#Root'.'|'.3.'$'.'/.+/'
            result = json_model_40(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#model#Root'.'|'.3.'%'
def jm_f_40(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_40_may:  # may
            if not jm_f_40_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /^\..*$/
            # $.'$#model#Root'.'|'.3.'%'.'/^\..*$/'
            # "/^([|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_5(model) is not None
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#model#Root'.'|'.3
def jm_obj_8(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_8_must:  # must
            must_count += 1
            if not jm_obj_8_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_8_may:  # may
            if not jm_obj_8_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.'$#model#Root'.'|'.4.'$'
def jm_f_44(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_44_may:  # may
            if not jm_f_44_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_3(prop) is not None:  # /.+/
            # $.'$#model#Root'.'|'.4.'$'.'/.+/'
            result = json_model_40(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#model#Root'.'|'.4.'%'
def jm_f_47(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_47_may:  # may
            if not jm_f_47_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /^\..*$/
            # $.'$#model#Root'.'|'.4.'%'.'/^\..*$/'
            # "/^([|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_5(model) is not None
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#model#Root'.'|'.4
def jm_obj_9(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_9_may:  # may
            if not jm_obj_9_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_2(prop) is not None:  # /^[@|&^+/*]$/
            # $.'$#model#Root'.'|'.4.'/^[@|&^+/*]$/'
            result = False
            if not result: return False
        else:  # catch all
            # $.'$#model#Root'.'|'.4.''
            result = json_model_40(model, path)
            if not result: return False
    return True

# define "$#model#Root" ($.'$#model#Root')
def json_model_44(value: Jsonable, path: str) -> bool:
    # $.'$#model#Root'
    result = isinstance(value, dict)
    if result:
        # $.'$#model#Root'.'|'.0
        result = jm_obj_5(value, path)
        if not result:
            # $.'$#model#Root'.'|'.1
            result = jm_obj_6(value, path)
            if not result:
                # $.'$#model#Root'.'|'.2
                result = jm_obj_7(value, path)
                if not result:
                    # $.'$#model#Root'.'|'.3
                    result = jm_obj_8(value, path)
                    if not result:
                        # $.'$#model#Root'.'|'.4
                        result = jm_obj_9(value, path)
    return result

# define "$#model#Url" ($.'$#model#Url')
def json_model_25(value: Jsonable, path: str) -> bool:
    # $.'$#model#Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    result = isinstance(value, str) and jm_re_6(value) is not None
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = json_model_24(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
jm_obj_0_must = {
    "@": jm_f_0,
}
jm_obj_0_may = {
    "#": jm_f_1,
    "!": jm_f_2,
}
jm_obj_1_must = {
    "|": jm_f_3,
}
jm_obj_1_may = {
    "#": jm_f_4,
}
jm_obj_2_must = {
    "&": jm_f_5,
}
jm_obj_2_may = {
    "#": jm_f_6,
}
jm_obj_3_must = {
    "^": jm_f_7,
}
jm_obj_3_may = {
    "#": jm_f_8,
}
jm_obj_4_may = {
    "#": jm_f_9,
}
jm_obj_5_must = {
    "@": jm_f_10,
}
jm_obj_5_may = {
    "~": jm_f_11,
    "$": jm_f_12,
    "%": jm_f_15,
    "#": jm_f_17,
    "!": jm_f_18,
}
jm_f_12_may = {
    "#": jm_f_13,
    "": jm_f_14,
}
jm_f_15_may = {
    "#": jm_f_16,
}
jm_obj_6_must = {
    "|": jm_f_19,
}
jm_obj_6_may = {
    "~": jm_f_20,
    "$": jm_f_21,
    "%": jm_f_24,
    "#": jm_f_26,
}
jm_f_21_may = {
    "#": jm_f_22,
    "": jm_f_23,
}
jm_f_24_may = {
    "#": jm_f_25,
}
jm_obj_7_must = {
    "&": jm_f_27,
}
jm_obj_7_may = {
    "~": jm_f_28,
    "$": jm_f_29,
    "%": jm_f_32,
    "#": jm_f_34,
}
jm_f_29_may = {
    "#": jm_f_30,
    "": jm_f_31,
}
jm_f_32_may = {
    "#": jm_f_33,
}
jm_obj_8_must = {
    "^": jm_f_35,
}
jm_obj_8_may = {
    "~": jm_f_36,
    "$": jm_f_37,
    "%": jm_f_40,
    "#": jm_f_42,
}
jm_f_37_may = {
    "#": jm_f_38,
    "": jm_f_39,
}
jm_f_40_may = {
    "#": jm_f_41,
}
jm_obj_9_may = {
    "~": jm_f_43,
    "$": jm_f_44,
    "%": jm_f_47,
    "#": jm_f_49,
}
jm_f_44_may = {
    "#": jm_f_45,
    "": jm_f_46,
}
jm_f_47_may = {
    "#": jm_f_48,
}


