#! /bin/env python
#
# Model: ./json-schema-draft-2019-09.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

json_model_5_may: PropMap
json_model_6_may: PropMap
json_model_7_may: PropMap
json_model_8_may: PropMap
json_model_13_may: PropMap
json_model_15_may: PropMap
json_model_16_may: PropMap

def _is_valid_re(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except Exception as e:
            rep is None or rep.append(f"regex compile error at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for regex at {path}: {_tname(value)}")
    return False

def _is_valid_url(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except Exception as e:
            rep is None or re.append(f"invalid url at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for url at {path}: {_tname(value)}")
    return False

# define "json_model_5_may_$id" ($.'$core'.'$id')
def _jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$core'.'$id'
    result = json_model_4(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $id at {path} [$.'$core'.'$id']")
    return result

# define "json_model_5_may_$schema" ($.'$core'.'$schema')
def _jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$core'.'$schema'
    result = isinstance(value, str) and value == "https://json-schema.org/draft/2019-09/schema"
    if not result:
        rep is None or rep.append(f"not an expected _https://json-schema.org/draft/2019-09/schema at {path} [$.'$core'.'$schema']")
    return result

# define "json_model_5_may_$ref" ($.'$core'.'$ref')
def _jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$core'.'$ref'
    result = json_model_3(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$core'.'$ref']")
    return result

# define "json_model_5_may_$anchor" ($.'$core'.'$anchor')
def _jm_f_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$core'.'$anchor'
    result = json_model_3(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$core'.'$anchor']")
    return result

# define "json_model_5_may_$recursiveRef" ($.'$core'.'$recursiveRef')
def _jm_f_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$core'.'$recursiveRef'
    result = json_model_3(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$core'.'$recursiveRef']")
    return result

# define "json_model_5_may_$recursiveAnchor" ($.'$core'.'$recursiveAnchor')
def _jm_f_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$core'.'$recursiveAnchor'
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$core'.'$recursiveAnchor']")
    return result



# define "json_model_5_may_$comment" ($.'$core'.'$comment')
def _jm_f_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$core'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$core'.'$comment']")
    return result



# define "json_model_6_may_title" ($.'$meta'.title)
def _jm_f_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$meta'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$meta'.title]")
    return result

# define "json_model_6_may_description" ($.'$meta'.description)
def _jm_f_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$meta'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$meta'.description]")
    return result

# define "json_model_6_may_default" ($.'$meta'.default)
def _jm_f_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$meta'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$meta'.default]")
    return result

# define "json_model_6_may_deprecated" ($.'$meta'.deprecated)
def _jm_f_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$meta'.deprecated
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$meta'.deprecated]")
    return result

# define "json_model_6_may_readOnly" ($.'$meta'.readOnly)
def _jm_f_13(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$meta'.readOnly
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$meta'.readOnly]")
    return result

# define "json_model_6_may_writeOnly" ($.'$meta'.writeOnly)
def _jm_f_14(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$meta'.writeOnly
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$meta'.writeOnly]")
    return result

# define "json_model_6_may_examples" ($.'$meta'.examples)
def _jm_f_15(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$meta'.examples
    result = isinstance(value, list)
    if result:
        for array_0_idx, array_0_item in enumerate(value):
            lpath = path + '.' + str(array_0_idx)
            # $.'$meta'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$meta'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$meta'.examples]")
    return result

# define "json_model_7_may_contentEncoding" ($.'$content'.contentEncoding)
def _jm_f_16(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$content'.contentEncoding
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$content'.contentEncoding]")
    return result

# define "json_model_7_may_contentMediaType" ($.'$content'.contentMediaType)
def _jm_f_17(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$content'.contentMediaType
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$content'.contentMediaType]")
    return result

# define "json_model_7_may_contentSchema" ($.'$content'.contentSchema)
def _jm_f_18(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$content'.contentSchema
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$content'.contentSchema]")
    return result

# define "json_model_8_may_format" ($.'$format'.format)
def _jm_f_19(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$format'.format
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$format'.format]")
    return result

# define "json_model_13_may_type" ($.'$validation'.type)
def _jm_f_20(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.type
    # $.'$validation'.type.'|'.0
    result = json_model_9(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $simpleTypes at {path} [$.'$validation'.type.'|'.0]")
    if not result:
        # $.'$validation'.type.'|'.1
        result = json_model_10(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $simpleTypesArray at {path} [$.'$validation'.type.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$validation'.type.'|']")
    return result

# define "json_model_13_may_const" ($.'$validation'.const)
def _jm_f_21(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.const
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$validation'.const]")
    return result

# define "json_model_13_may_enum" ($.'$validation'.enum)
def _jm_f_22(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.enum
    result = isinstance(value, list)
    if result:
        for array_3_idx, array_3_item in enumerate(value):
            lpath = path + '.' + str(array_3_idx)
            # $.'$validation'.enum.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$validation'.enum.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$validation'.enum]")
    return result

# define "json_model_13_may_multipleOf" ($.'$validation'.multipleOf)
def _jm_f_23(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.multipleOf
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool)) and value > 0.0
    if not result:
        rep is None or rep.append(f"not a 1.0 float at {path} [$.'$validation'.multipleOf]")
    return result

# define "json_model_13_may_maximum" ($.'$validation'.maximum)
def _jm_f_24(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.maximum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$validation'.maximum]")
    return result

# define "json_model_13_may_exclusiveMaximum" ($.'$validation'.exclusiveMaximum)
def _jm_f_25(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.exclusiveMaximum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$validation'.exclusiveMaximum]")
    return result

# define "json_model_13_may_minimum" ($.'$validation'.minimum)
def _jm_f_26(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.minimum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$validation'.minimum]")
    return result

# define "json_model_13_may_exclusiveMinimum" ($.'$validation'.exclusiveMinimum)
def _jm_f_27(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.exclusiveMinimum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$validation'.exclusiveMinimum]")
    return result

# define "json_model_13_may_maxLength" ($.'$validation'.maxLength)
def _jm_f_28(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.maxLength
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$validation'.maxLength]")
    return result

# define "json_model_13_may_minLength" ($.'$validation'.minLength)
def _jm_f_29(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.minLength
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$validation'.minLength]")
    return result

# define "json_model_13_may_pattern" ($.'$validation'.pattern)
def _jm_f_30(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.pattern
    result = _is_valid_re(value, path, rep) or _rep(f"invalid $REGEX at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $REGEX at {path} [$.'$validation'.pattern]")
    return result

# define "json_model_13_may_maxItems" ($.'$validation'.maxItems)
def _jm_f_31(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.maxItems
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$validation'.maxItems]")
    return result

# define "json_model_13_may_minItems" ($.'$validation'.minItems)
def _jm_f_32(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.minItems
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$validation'.minItems]")
    return result

# define "json_model_13_may_uniqueItems" ($.'$validation'.uniqueItems)
def _jm_f_33(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.uniqueItems
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$validation'.uniqueItems]")
    return result

# define "json_model_13_may_maxContains" ($.'$validation'.maxContains)
def _jm_f_34(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.maxContains
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$validation'.maxContains]")
    return result

# define "json_model_13_may_minContains" ($.'$validation'.minContains)
def _jm_f_35(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.minContains
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$validation'.minContains]")
    return result

# define "json_model_13_may_maxProperties" ($.'$validation'.maxProperties)
def _jm_f_36(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.maxProperties
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$validation'.maxProperties]")
    return result

# define "json_model_13_may_minProperties" ($.'$validation'.minProperties)
def _jm_f_37(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.minProperties
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$validation'.minProperties]")
    return result

# define "json_model_13_may_required" ($.'$validation'.required)
def _jm_f_38(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$validation'.required
    result = json_model_11(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $stringArray at {path} [$.'$validation'.required]")
    return result



# define "json_model_15_may_items" ($.'$applicator'.items)
def _jm_f_40(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.items
    # $.'$applicator'.items.'|'.0
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$applicator'.items.'|'.0]")
    if not result:
        # $.'$applicator'.items.'|'.1
        result = json_model_14(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$applicator'.items.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$applicator'.items.'|']")
    return result

# define "json_model_15_may_contains" ($.'$applicator'.contains)
def _jm_f_41(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.contains
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$applicator'.contains]")
    return result

# define "json_model_15_may_additionalItems" ($.'$applicator'.additionalItems)
def _jm_f_42(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.additionalItems
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$applicator'.additionalItems]")
    return result

# define "json_model_15_may_additionalProperties" ($.'$applicator'.additionalProperties)
def _jm_f_43(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.additionalProperties
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$applicator'.additionalProperties]")
    return result







# define "json_model_15_may_propertyNames" ($.'$applicator'.propertyNames)
def _jm_f_47(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.propertyNames
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$applicator'.propertyNames]")
    return result

# define "json_model_15_may_unevaluatedItems" ($.'$applicator'.unevaluatedItems)
def _jm_f_48(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.unevaluatedItems
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$applicator'.unevaluatedItems]")
    return result

# define "json_model_15_may_unevaluatedProperties" ($.'$applicator'.unevaluatedProperties)
def _jm_f_49(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.unevaluatedProperties
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$applicator'.unevaluatedProperties]")
    return result

# define "json_model_15_may_if" ($.'$applicator'.if)
def _jm_f_50(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.if
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$applicator'.if]")
    return result

# define "json_model_15_may_then" ($.'$applicator'.then)
def _jm_f_51(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.then
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$applicator'.then]")
    return result

# define "json_model_15_may_else" ($.'$applicator'.else)
def _jm_f_52(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.else
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$applicator'.else]")
    return result

# define "json_model_15_may_not" ($.'$applicator'.not)
def _jm_f_53(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.not
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$applicator'.not]")
    return result

# define "json_model_15_may_allOf" ($.'$applicator'.allOf)
def _jm_f_54(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.allOf
    result = json_model_14(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$applicator'.allOf]")
    return result

# define "json_model_15_may_anyOf" ($.'$applicator'.anyOf)
def _jm_f_55(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.anyOf
    result = json_model_14(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$applicator'.anyOf]")
    return result

# define "json_model_15_may_oneOf" ($.'$applicator'.oneOf)
def _jm_f_56(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$applicator'.oneOf
    result = json_model_14(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$applicator'.oneOf]")
    return result

# define "json_model_16_may_$id" ($.'$ObjectSchema'.'$id')
def _jm_f_57(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.'$id'
    result = json_model_4(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $id at {path} [$.'$ObjectSchema'.'$id']")
    return result

# define "json_model_16_may_$schema" ($.'$ObjectSchema'.'$schema')
def _jm_f_58(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.'$schema'
    result = isinstance(value, str) and value == "https://json-schema.org/draft/2019-09/schema"
    if not result:
        rep is None or rep.append(f"not an expected _https://json-schema.org/draft/2019-09/schema at {path} [$.'$ObjectSchema'.'$schema']")
    return result

# define "json_model_16_may_$ref" ($.'$ObjectSchema'.'$ref')
def _jm_f_59(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.'$ref'
    result = json_model_3(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$ObjectSchema'.'$ref']")
    return result

# define "json_model_16_may_$anchor" ($.'$ObjectSchema'.'$anchor')
def _jm_f_60(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.'$anchor'
    result = json_model_3(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$ObjectSchema'.'$anchor']")
    return result

# define "json_model_16_may_$recursiveRef" ($.'$ObjectSchema'.'$recursiveRef')
def _jm_f_61(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.'$recursiveRef'
    result = json_model_3(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$ObjectSchema'.'$recursiveRef']")
    return result

# define "json_model_16_may_$recursiveAnchor" ($.'$ObjectSchema'.'$recursiveAnchor')
def _jm_f_62(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.'$recursiveAnchor'
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$ObjectSchema'.'$recursiveAnchor']")
    return result



# define "json_model_16_may_$comment" ($.'$ObjectSchema'.'$comment')
def _jm_f_64(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$ObjectSchema'.'$comment']")
    return result



# define "json_model_16_may_items" ($.'$ObjectSchema'.items)
def _jm_f_66(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.items
    # $.'$ObjectSchema'.items.'|'.0
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$ObjectSchema'.items.'|'.0]")
    if not result:
        # $.'$ObjectSchema'.items.'|'.1
        result = json_model_14(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$ObjectSchema'.items.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$ObjectSchema'.items.'|']")
    return result

# define "json_model_16_may_contains" ($.'$ObjectSchema'.contains)
def _jm_f_67(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.contains
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$ObjectSchema'.contains]")
    return result

# define "json_model_16_may_additionalItems" ($.'$ObjectSchema'.additionalItems)
def _jm_f_68(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.additionalItems
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$ObjectSchema'.additionalItems]")
    return result

# define "json_model_16_may_additionalProperties" ($.'$ObjectSchema'.additionalProperties)
def _jm_f_69(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.additionalProperties
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$ObjectSchema'.additionalProperties]")
    return result







# define "json_model_16_may_propertyNames" ($.'$ObjectSchema'.propertyNames)
def _jm_f_73(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.propertyNames
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$ObjectSchema'.propertyNames]")
    return result

# define "json_model_16_may_unevaluatedItems" ($.'$ObjectSchema'.unevaluatedItems)
def _jm_f_74(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.unevaluatedItems
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$ObjectSchema'.unevaluatedItems]")
    return result

# define "json_model_16_may_unevaluatedProperties" ($.'$ObjectSchema'.unevaluatedProperties)
def _jm_f_75(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.unevaluatedProperties
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$ObjectSchema'.unevaluatedProperties]")
    return result

# define "json_model_16_may_if" ($.'$ObjectSchema'.if)
def _jm_f_76(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.if
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$ObjectSchema'.if]")
    return result

# define "json_model_16_may_then" ($.'$ObjectSchema'.then)
def _jm_f_77(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.then
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$ObjectSchema'.then]")
    return result

# define "json_model_16_may_else" ($.'$ObjectSchema'.else)
def _jm_f_78(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.else
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$ObjectSchema'.else]")
    return result

# define "json_model_16_may_not" ($.'$ObjectSchema'.not)
def _jm_f_79(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.not
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$ObjectSchema'.not]")
    return result

# define "json_model_16_may_allOf" ($.'$ObjectSchema'.allOf)
def _jm_f_80(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.allOf
    result = json_model_14(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$ObjectSchema'.allOf]")
    return result

# define "json_model_16_may_anyOf" ($.'$ObjectSchema'.anyOf)
def _jm_f_81(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.anyOf
    result = json_model_14(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$ObjectSchema'.anyOf]")
    return result

# define "json_model_16_may_oneOf" ($.'$ObjectSchema'.oneOf)
def _jm_f_82(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.oneOf
    result = json_model_14(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$ObjectSchema'.oneOf]")
    return result

# define "json_model_16_may_type" ($.'$ObjectSchema'.type)
def _jm_f_83(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.type
    # $.'$ObjectSchema'.type.'|'.0
    result = json_model_9(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $simpleTypes at {path} [$.'$ObjectSchema'.type.'|'.0]")
    if not result:
        # $.'$ObjectSchema'.type.'|'.1
        result = json_model_10(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $simpleTypesArray at {path} [$.'$ObjectSchema'.type.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$ObjectSchema'.type.'|']")
    return result

# define "json_model_16_may_const" ($.'$ObjectSchema'.const)
def _jm_f_84(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.const
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$ObjectSchema'.const]")
    return result

# define "json_model_16_may_enum" ($.'$ObjectSchema'.enum)
def _jm_f_85(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.enum
    result = isinstance(value, list)
    if result:
        for array_5_idx, array_5_item in enumerate(value):
            lpath = path + '.' + str(array_5_idx)
            # $.'$ObjectSchema'.enum.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$ObjectSchema'.enum.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$ObjectSchema'.enum]")
    return result

# define "json_model_16_may_multipleOf" ($.'$ObjectSchema'.multipleOf)
def _jm_f_86(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.multipleOf
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool)) and value > 0.0
    if not result:
        rep is None or rep.append(f"not a 1.0 float at {path} [$.'$ObjectSchema'.multipleOf]")
    return result

# define "json_model_16_may_maximum" ($.'$ObjectSchema'.maximum)
def _jm_f_87(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.maximum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$ObjectSchema'.maximum]")
    return result

# define "json_model_16_may_exclusiveMaximum" ($.'$ObjectSchema'.exclusiveMaximum)
def _jm_f_88(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.exclusiveMaximum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$ObjectSchema'.exclusiveMaximum]")
    return result

# define "json_model_16_may_minimum" ($.'$ObjectSchema'.minimum)
def _jm_f_89(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.minimum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$ObjectSchema'.minimum]")
    return result

# define "json_model_16_may_exclusiveMinimum" ($.'$ObjectSchema'.exclusiveMinimum)
def _jm_f_90(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.exclusiveMinimum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$ObjectSchema'.exclusiveMinimum]")
    return result

# define "json_model_16_may_maxLength" ($.'$ObjectSchema'.maxLength)
def _jm_f_91(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.maxLength
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$ObjectSchema'.maxLength]")
    return result

# define "json_model_16_may_minLength" ($.'$ObjectSchema'.minLength)
def _jm_f_92(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.minLength
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$ObjectSchema'.minLength]")
    return result

# define "json_model_16_may_pattern" ($.'$ObjectSchema'.pattern)
def _jm_f_93(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.pattern
    result = _is_valid_re(value, path, rep) or _rep(f"invalid $REGEX at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $REGEX at {path} [$.'$ObjectSchema'.pattern]")
    return result

# define "json_model_16_may_maxItems" ($.'$ObjectSchema'.maxItems)
def _jm_f_94(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.maxItems
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$ObjectSchema'.maxItems]")
    return result

# define "json_model_16_may_minItems" ($.'$ObjectSchema'.minItems)
def _jm_f_95(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.minItems
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$ObjectSchema'.minItems]")
    return result

# define "json_model_16_may_uniqueItems" ($.'$ObjectSchema'.uniqueItems)
def _jm_f_96(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.uniqueItems
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$ObjectSchema'.uniqueItems]")
    return result

# define "json_model_16_may_maxContains" ($.'$ObjectSchema'.maxContains)
def _jm_f_97(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.maxContains
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$ObjectSchema'.maxContains]")
    return result

# define "json_model_16_may_minContains" ($.'$ObjectSchema'.minContains)
def _jm_f_98(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.minContains
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$ObjectSchema'.minContains]")
    return result

# define "json_model_16_may_maxProperties" ($.'$ObjectSchema'.maxProperties)
def _jm_f_99(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.maxProperties
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$ObjectSchema'.maxProperties]")
    return result

# define "json_model_16_may_minProperties" ($.'$ObjectSchema'.minProperties)
def _jm_f_100(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.minProperties
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$ObjectSchema'.minProperties]")
    return result

# define "json_model_16_may_required" ($.'$ObjectSchema'.required)
def _jm_f_101(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.required
    result = json_model_11(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $stringArray at {path} [$.'$ObjectSchema'.required]")
    return result



# define "json_model_16_may_title" ($.'$ObjectSchema'.title)
def _jm_f_103(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$ObjectSchema'.title]")
    return result

# define "json_model_16_may_description" ($.'$ObjectSchema'.description)
def _jm_f_104(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$ObjectSchema'.description]")
    return result

# define "json_model_16_may_default" ($.'$ObjectSchema'.default)
def _jm_f_105(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$ObjectSchema'.default]")
    return result

# define "json_model_16_may_deprecated" ($.'$ObjectSchema'.deprecated)
def _jm_f_106(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.deprecated
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$ObjectSchema'.deprecated]")
    return result

# define "json_model_16_may_readOnly" ($.'$ObjectSchema'.readOnly)
def _jm_f_107(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.readOnly
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$ObjectSchema'.readOnly]")
    return result

# define "json_model_16_may_writeOnly" ($.'$ObjectSchema'.writeOnly)
def _jm_f_108(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.writeOnly
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$ObjectSchema'.writeOnly]")
    return result

# define "json_model_16_may_examples" ($.'$ObjectSchema'.examples)
def _jm_f_109(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.examples
    result = isinstance(value, list)
    if result:
        for array_6_idx, array_6_item in enumerate(value):
            lpath = path + '.' + str(array_6_idx)
            # $.'$ObjectSchema'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$ObjectSchema'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$ObjectSchema'.examples]")
    return result

# define "json_model_16_may_format" ($.'$ObjectSchema'.format)
def _jm_f_110(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.format
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$ObjectSchema'.format]")
    return result

# define "json_model_16_may_contentEncoding" ($.'$ObjectSchema'.contentEncoding)
def _jm_f_111(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.contentEncoding
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$ObjectSchema'.contentEncoding]")
    return result

# define "json_model_16_may_contentMediaType" ($.'$ObjectSchema'.contentMediaType)
def _jm_f_112(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.contentMediaType
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$ObjectSchema'.contentMediaType]")
    return result

# define "json_model_16_may_contentSchema" ($.'$ObjectSchema'.contentSchema)
def _jm_f_113(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ObjectSchema'.contentSchema
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$ObjectSchema'.contentSchema]")
    return result


# define "$URI" ($.'$URI')
def json_model_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$URI'
    result = _is_valid_url(value, path, rep) or _rep(f"invalid $URL at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $URL at {path} [$.'$URI']")
    return result

# define "$URI-REFERENCE" ($.'$URI-REFERENCE')
def json_model_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$URI-REFERENCE'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$URI-REFERENCE']")
    return result

# define "$id" ($.'$id')
def json_model_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$id'
    result = json_model_3(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$id']")
    return result


# object $.'$core'.'$vocabulary'
def _jm_f_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$core'.'$vocabulary']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if _is_valid_url(prop, path, rep) or _rep(f"invalid $URL at {path}", rep) or _rep(f"prop {prop} does not match $URL at {path}", rep):  # $URL
            # $.'$core'.'$vocabulary'.'$URL'
            result = isinstance(val, bool)
            if not result:
                rep is None or rep.append(f"not a bool at {lpath} [$.'$core'.'$vocabulary'.'$URL']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$core'.'$vocabulary']")
            return False
    return True


# object $.'$core'.'$defs'
def _jm_f_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$core'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$core'.'$defs'.''
        result = json_model_17(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$core'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$core'.'$defs'.'']")
            return False
    return True


# object $.'$core'
def json_model_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$core']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_5_may:  # may
            if not json_model_5_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$core'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$core']")
            return False
    return True




# object $.'$meta'
def json_model_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$meta']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_6_may:  # may
            if not json_model_6_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$meta'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$meta']")
            return False
    return True




# object $.'$content'
def json_model_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$content']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_7_may:  # may
            if not json_model_7_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$content'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$content']")
            return False
    return True




# object $.'$format'
def json_model_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$format']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_8_may:  # may
            if not json_model_8_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$format'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$format']")
            return False
    return True



# define "$simpleTypes" ($.'$simpleTypes')
def json_model_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$simpleTypes'
    result = not isinstance(value, (list, dict)) and value in {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$simpleTypes'.'|']")
    return result

# define "$simpleTypesArray" ($.'$simpleTypesArray')
def json_model_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$simpleTypesArray'
    # $.'$simpleTypesArray'.'@'
    result = isinstance(value, list)
    if result:
        for array_1_idx, array_1_item in enumerate(value):
            lpath = path + '.' + str(array_1_idx)
            # $.'$simpleTypesArray'.'@'.0
            result = json_model_9(array_1_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $simpleTypes at {lpath} [$.'$simpleTypesArray'.'@'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$simpleTypesArray'.'@']")
    result &= len(set(value)) == len(value)
    result &= len(value) >= 1
    if not result:
        rep is None or rep.append(f"invalid type or constraints at {path} [$.'$simpleTypesArray']")
    return result

# define "$stringArray" ($.'$stringArray')
def json_model_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$stringArray'
    # $.'$stringArray'.'@'
    result = isinstance(value, list)
    if result:
        for array_2_idx, array_2_item in enumerate(value):
            lpath = path + '.' + str(array_2_idx)
            # $.'$stringArray'.'@'.0
            result = isinstance(array_2_item, str)
            if not result:
                rep is None or rep.append(f"not an expected string at {lpath} [$.'$stringArray'.'@'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$stringArray'.'@']")
    result &= len(set(value)) == len(value)
    if not result:
        rep is None or rep.append(f"invalid type or constraints at {path} [$.'$stringArray']")
    return result

# define "$nonNegativeInteger" ($.'$nonNegativeInteger')
def json_model_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$nonNegativeInteger'
    result = ((isinstance(value, int) and not isinstance(value, bool)) or (isinstance(value, float) and int(value) == value)) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$nonNegativeInteger']")
    return result


# object $.'$validation'.dependentRequired
def _jm_f_39(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$validation'.dependentRequired]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$validation'.dependentRequired.''
        result = json_model_11(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $stringArray at {lpath} [$.'$validation'.dependentRequired.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$validation'.dependentRequired.'']")
            return False
    return True


# object $.'$validation'
def json_model_13(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$validation']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_13_may:  # may
            if not json_model_13_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$validation'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$validation']")
            return False
    return True



# define "$schemaArray" ($.'$schemaArray')
def json_model_14(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schemaArray'
    # $.'$schemaArray'.'@'
    result = isinstance(value, list)
    if result:
        for array_4_idx, array_4_item in enumerate(value):
            lpath = path + '.' + str(array_4_idx)
            # $.'$schemaArray'.'@'.0
            result = json_model_17(array_4_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$schemaArray'.'@'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$schemaArray'.'@']")
    result &= len(value) >= 1
    if not result:
        rep is None or rep.append(f"invalid type or constraints at {path} [$.'$schemaArray']")
    return result


# object $.'$applicator'.properties
def _jm_f_44(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$applicator'.properties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$applicator'.properties.''
        result = json_model_17(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$applicator'.properties.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$applicator'.properties.'']")
            return False
    return True


# object $.'$applicator'.patternProperties
def _jm_f_45(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$applicator'.patternProperties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if _is_valid_re(prop, path, rep) or _rep(f"invalid $REGEX at {path}", rep) or _rep(f"prop {prop} does not match $REGEX at {path}", rep):  # $REGEX
            # $.'$applicator'.patternProperties.'$REGEX'
            result = json_model_17(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$applicator'.patternProperties.'$REGEX']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$applicator'.patternProperties]")
            return False
    return True


# object $.'$applicator'.dependentSchemas
def _jm_f_46(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$applicator'.dependentSchemas]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$applicator'.dependentSchemas.''
        result = json_model_17(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$applicator'.dependentSchemas.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$applicator'.dependentSchemas.'']")
            return False
    return True


# object $.'$applicator'
def json_model_15(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$applicator']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_15_may:  # may
            if not json_model_15_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$applicator'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$applicator']")
            return False
    return True




# object $.'$ObjectSchema'.'$vocabulary'
def _jm_f_63(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$ObjectSchema'.'$vocabulary']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if _is_valid_url(prop, path, rep) or _rep(f"invalid $URL at {path}", rep) or _rep(f"prop {prop} does not match $URL at {path}", rep):  # $URL
            # $.'$ObjectSchema'.'$vocabulary'.'$URL'
            result = isinstance(val, bool)
            if not result:
                rep is None or rep.append(f"not a bool at {lpath} [$.'$ObjectSchema'.'$vocabulary'.'$URL']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$ObjectSchema'.'$vocabulary']")
            return False
    return True


# object $.'$ObjectSchema'.'$defs'
def _jm_f_65(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$ObjectSchema'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$ObjectSchema'.'$defs'.''
        result = json_model_17(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$ObjectSchema'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$ObjectSchema'.'$defs'.'']")
            return False
    return True


# object $.'$ObjectSchema'.properties
def _jm_f_70(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$ObjectSchema'.properties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$ObjectSchema'.properties.''
        result = json_model_17(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$ObjectSchema'.properties.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$ObjectSchema'.properties.'']")
            return False
    return True


# object $.'$ObjectSchema'.patternProperties
def _jm_f_71(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$ObjectSchema'.patternProperties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if _is_valid_re(prop, path, rep) or _rep(f"invalid $REGEX at {path}", rep) or _rep(f"prop {prop} does not match $REGEX at {path}", rep):  # $REGEX
            # $.'$ObjectSchema'.patternProperties.'$REGEX'
            result = json_model_17(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$ObjectSchema'.patternProperties.'$REGEX']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$ObjectSchema'.patternProperties]")
            return False
    return True


# object $.'$ObjectSchema'.dependentSchemas
def _jm_f_72(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$ObjectSchema'.dependentSchemas]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$ObjectSchema'.dependentSchemas.''
        result = json_model_17(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$ObjectSchema'.dependentSchemas.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$ObjectSchema'.dependentSchemas.'']")
            return False
    return True


# object $.'$ObjectSchema'.dependentRequired
def _jm_f_102(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$ObjectSchema'.dependentRequired]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$ObjectSchema'.dependentRequired.''
        result = json_model_11(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $stringArray at {lpath} [$.'$ObjectSchema'.dependentRequired.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$ObjectSchema'.dependentRequired.'']")
            return False
    return True


# object $.'$ObjectSchema'
def json_model_16(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$ObjectSchema']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_16_may:  # may
            if not json_model_16_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$ObjectSchema'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$ObjectSchema']")
            return False
    return True



# define "$Schema" ($.'$Schema')
def json_model_17(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'
    # $.'$Schema'.'|'.0
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Schema'.'|'.0]")
    if not result:
        # $.'$Schema'.'|'.1
        result = json_model_16(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $ObjectSchema at {path} [$.'$Schema'.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Schema'.'|']")
    return result

# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    # $.'@'
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'@']")
    if not result:
        rep is None or rep.append(f"invalid type or constraints at {path} [$]")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
json_model_5_may = {
    "$id": _jm_f_0,
    "$schema": _jm_f_1,
    "$ref": _jm_f_2,
    "$anchor": _jm_f_3,
    "$recursiveRef": _jm_f_4,
    "$recursiveAnchor": _jm_f_5,
    "$vocabulary": _jm_f_6,
    "$comment": _jm_f_7,
    "$defs": _jm_f_8,
}
json_model_6_may = {
    "title": _jm_f_9,
    "description": _jm_f_10,
    "default": _jm_f_11,
    "deprecated": _jm_f_12,
    "readOnly": _jm_f_13,
    "writeOnly": _jm_f_14,
    "examples": _jm_f_15,
}
json_model_7_may = {
    "contentEncoding": _jm_f_16,
    "contentMediaType": _jm_f_17,
    "contentSchema": _jm_f_18,
}
json_model_8_may = {
    "format": _jm_f_19,
}
json_model_13_may = {
    "type": _jm_f_20,
    "const": _jm_f_21,
    "enum": _jm_f_22,
    "multipleOf": _jm_f_23,
    "maximum": _jm_f_24,
    "exclusiveMaximum": _jm_f_25,
    "minimum": _jm_f_26,
    "exclusiveMinimum": _jm_f_27,
    "maxLength": _jm_f_28,
    "minLength": _jm_f_29,
    "pattern": _jm_f_30,
    "maxItems": _jm_f_31,
    "minItems": _jm_f_32,
    "uniqueItems": _jm_f_33,
    "maxContains": _jm_f_34,
    "minContains": _jm_f_35,
    "maxProperties": _jm_f_36,
    "minProperties": _jm_f_37,
    "required": _jm_f_38,
    "dependentRequired": _jm_f_39,
}
json_model_15_may = {
    "items": _jm_f_40,
    "contains": _jm_f_41,
    "additionalItems": _jm_f_42,
    "additionalProperties": _jm_f_43,
    "properties": _jm_f_44,
    "patternProperties": _jm_f_45,
    "dependentSchemas": _jm_f_46,
    "propertyNames": _jm_f_47,
    "unevaluatedItems": _jm_f_48,
    "unevaluatedProperties": _jm_f_49,
    "if": _jm_f_50,
    "then": _jm_f_51,
    "else": _jm_f_52,
    "not": _jm_f_53,
    "allOf": _jm_f_54,
    "anyOf": _jm_f_55,
    "oneOf": _jm_f_56,
}
json_model_16_may = {
    "$id": _jm_f_57,
    "$schema": _jm_f_58,
    "$ref": _jm_f_59,
    "$anchor": _jm_f_60,
    "$recursiveRef": _jm_f_61,
    "$recursiveAnchor": _jm_f_62,
    "$vocabulary": _jm_f_63,
    "$comment": _jm_f_64,
    "$defs": _jm_f_65,
    "items": _jm_f_66,
    "contains": _jm_f_67,
    "additionalItems": _jm_f_68,
    "additionalProperties": _jm_f_69,
    "properties": _jm_f_70,
    "patternProperties": _jm_f_71,
    "dependentSchemas": _jm_f_72,
    "propertyNames": _jm_f_73,
    "unevaluatedItems": _jm_f_74,
    "unevaluatedProperties": _jm_f_75,
    "if": _jm_f_76,
    "then": _jm_f_77,
    "else": _jm_f_78,
    "not": _jm_f_79,
    "allOf": _jm_f_80,
    "anyOf": _jm_f_81,
    "oneOf": _jm_f_82,
    "type": _jm_f_83,
    "const": _jm_f_84,
    "enum": _jm_f_85,
    "multipleOf": _jm_f_86,
    "maximum": _jm_f_87,
    "exclusiveMaximum": _jm_f_88,
    "minimum": _jm_f_89,
    "exclusiveMinimum": _jm_f_90,
    "maxLength": _jm_f_91,
    "minLength": _jm_f_92,
    "pattern": _jm_f_93,
    "maxItems": _jm_f_94,
    "minItems": _jm_f_95,
    "uniqueItems": _jm_f_96,
    "maxContains": _jm_f_97,
    "minContains": _jm_f_98,
    "maxProperties": _jm_f_99,
    "minProperties": _jm_f_100,
    "required": _jm_f_101,
    "dependentRequired": _jm_f_102,
    "title": _jm_f_103,
    "description": _jm_f_104,
    "default": _jm_f_105,
    "deprecated": _jm_f_106,
    "readOnly": _jm_f_107,
    "writeOnly": _jm_f_108,
    "examples": _jm_f_109,
    "format": _jm_f_110,
    "contentEncoding": _jm_f_111,
    "contentMediaType": _jm_f_112,
    "contentSchema": _jm_f_113,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

