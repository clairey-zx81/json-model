# Generated for model: ./json-schema-draft-2019-09.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

json_model_4_may: PropMap
json_model_5_may: PropMap
json_model_6_may: PropMap
json_model_7_may: PropMap
json_model_12_may: PropMap
json_model_14_may: PropMap
json_model_15_may: PropMap

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False

# define "json_model_4_may_$id" ($.core.'$id')
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.core.'$id'
    result = json_model_3(value, path)
    return result

# define "json_model_4_may_$schema" ($.core.'$schema')
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.core.'$schema'
    result = isinstance(value, str) and value == "https://json-schema.org/draft/2019-09/schema"
    return result

# define "json_model_4_may_$ref" ($.core.'$ref')
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.core.'$ref'
    result = json_model_2(value, path)
    return result

# define "json_model_4_may_$anchor" ($.core.'$anchor')
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.core.'$anchor'
    result = json_model_2(value, path)
    return result

# define "json_model_4_may_$recursiveRef" ($.core.'$recursiveRef')
def jm_f_4(value: Jsonable, path: str) -> bool:
    # $.core.'$recursiveRef'
    result = json_model_2(value, path)
    return result

# define "json_model_4_may_$recursiveAnchor" ($.core.'$recursiveAnchor')
def jm_f_5(value: Jsonable, path: str) -> bool:
    # $.core.'$recursiveAnchor'
    result = isinstance(value, bool)
    return result



# define "json_model_4_may_$comment" ($.core.'$comment')
def jm_f_7(value: Jsonable, path: str) -> bool:
    # $.core.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_5_may_title" ($.meta.title)
def jm_f_9(value: Jsonable, path: str) -> bool:
    # $.meta.title
    result = isinstance(value, str)
    return result

# define "json_model_5_may_description" ($.meta.description)
def jm_f_10(value: Jsonable, path: str) -> bool:
    # $.meta.description
    result = isinstance(value, str)
    return result

# define "json_model_5_may_default" ($.meta.default)
def jm_f_11(value: Jsonable, path: str) -> bool:
    # $.meta.default
    result = True
    return result

# define "json_model_5_may_deprecated" ($.meta.deprecated)
def jm_f_12(value: Jsonable, path: str) -> bool:
    # $.meta.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_5_may_readOnly" ($.meta.readOnly)
def jm_f_13(value: Jsonable, path: str) -> bool:
    # $.meta.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_5_may_writeOnly" ($.meta.writeOnly)
def jm_f_14(value: Jsonable, path: str) -> bool:
    # $.meta.writeOnly
    result = isinstance(value, bool)
    return result

# define "json_model_5_may_examples" ($.meta.examples)
def jm_f_15(value: Jsonable, path: str) -> bool:
    # $.meta.examples
    result = isinstance(value, list)
    if result:
        for array_0_idx, array_0_item in enumerate(value):
            # $.meta.examples.0
            result = True
            if not result: break
    return result

# define "json_model_6_may_contentEncoding" ($.content.contentEncoding)
def jm_f_16(value: Jsonable, path: str) -> bool:
    # $.content.contentEncoding
    result = isinstance(value, str)
    return result

# define "json_model_6_may_contentMediaType" ($.content.contentMediaType)
def jm_f_17(value: Jsonable, path: str) -> bool:
    # $.content.contentMediaType
    result = isinstance(value, str)
    return result

# define "json_model_6_may_contentSchema" ($.content.contentSchema)
def jm_f_18(value: Jsonable, path: str) -> bool:
    # $.content.contentSchema
    result = json_model_16(value, path)
    return result

# define "json_model_7_may_format" ($.format.format)
def jm_f_19(value: Jsonable, path: str) -> bool:
    # $.format.format
    result = isinstance(value, str)
    return result

# define "json_model_12_may_type" ($.validation.type)
def jm_f_20(value: Jsonable, path: str) -> bool:
    # $.validation.type
    # $.validation.type.'|'.0
    result = json_model_8(value, path)
    if not result:
        # $.validation.type.'|'.1
        result = json_model_9(value, path)
    return result

# define "json_model_12_may_const" ($.validation.const)
def jm_f_21(value: Jsonable, path: str) -> bool:
    # $.validation.const
    result = True
    return result

# define "json_model_12_may_enum" ($.validation.enum)
def jm_f_22(value: Jsonable, path: str) -> bool:
    # $.validation.enum
    result = isinstance(value, list)
    if result:
        for array_3_idx, array_3_item in enumerate(value):
            # $.validation.enum.0
            result = True
            if not result: break
    return result

# define "json_model_12_may_multipleOf" ($.validation.multipleOf)
def jm_f_23(value: Jsonable, path: str) -> bool:
    # $.validation.multipleOf
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool)) and value > 0.0
    return result

# define "json_model_12_may_maximum" ($.validation.maximum)
def jm_f_24(value: Jsonable, path: str) -> bool:
    # $.validation.maximum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_12_may_exclusiveMaximum" ($.validation.exclusiveMaximum)
def jm_f_25(value: Jsonable, path: str) -> bool:
    # $.validation.exclusiveMaximum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_12_may_minimum" ($.validation.minimum)
def jm_f_26(value: Jsonable, path: str) -> bool:
    # $.validation.minimum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_12_may_exclusiveMinimum" ($.validation.exclusiveMinimum)
def jm_f_27(value: Jsonable, path: str) -> bool:
    # $.validation.exclusiveMinimum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_12_may_maxLength" ($.validation.maxLength)
def jm_f_28(value: Jsonable, path: str) -> bool:
    # $.validation.maxLength
    result = json_model_11(value, path)
    return result

# define "json_model_12_may_minLength" ($.validation.minLength)
def jm_f_29(value: Jsonable, path: str) -> bool:
    # $.validation.minLength
    result = json_model_11(value, path)
    return result

# define "json_model_12_may_pattern" ($.validation.pattern)
def jm_f_30(value: Jsonable, path: str) -> bool:
    # $.validation.pattern
    result = is_valid_re(value, path)
    return result

# define "json_model_12_may_maxItems" ($.validation.maxItems)
def jm_f_31(value: Jsonable, path: str) -> bool:
    # $.validation.maxItems
    result = json_model_11(value, path)
    return result

# define "json_model_12_may_minItems" ($.validation.minItems)
def jm_f_32(value: Jsonable, path: str) -> bool:
    # $.validation.minItems
    result = json_model_11(value, path)
    return result

# define "json_model_12_may_uniqueItems" ($.validation.uniqueItems)
def jm_f_33(value: Jsonable, path: str) -> bool:
    # $.validation.uniqueItems
    result = isinstance(value, bool)
    return result

# define "json_model_12_may_maxContains" ($.validation.maxContains)
def jm_f_34(value: Jsonable, path: str) -> bool:
    # $.validation.maxContains
    result = json_model_11(value, path)
    return result

# define "json_model_12_may_minContains" ($.validation.minContains)
def jm_f_35(value: Jsonable, path: str) -> bool:
    # $.validation.minContains
    result = json_model_11(value, path)
    return result

# define "json_model_12_may_maxProperties" ($.validation.maxProperties)
def jm_f_36(value: Jsonable, path: str) -> bool:
    # $.validation.maxProperties
    result = json_model_11(value, path)
    return result

# define "json_model_12_may_minProperties" ($.validation.minProperties)
def jm_f_37(value: Jsonable, path: str) -> bool:
    # $.validation.minProperties
    result = json_model_11(value, path)
    return result

# define "json_model_12_may_required" ($.validation.required)
def jm_f_38(value: Jsonable, path: str) -> bool:
    # $.validation.required
    result = json_model_10(value, path)
    return result



# define "json_model_14_may_items" ($.applicator.items)
def jm_f_40(value: Jsonable, path: str) -> bool:
    # $.applicator.items
    # $.applicator.items.'|'.0
    result = json_model_16(value, path)
    if not result:
        # $.applicator.items.'|'.1
        result = json_model_13(value, path)
    return result

# define "json_model_14_may_contains" ($.applicator.contains)
def jm_f_41(value: Jsonable, path: str) -> bool:
    # $.applicator.contains
    result = json_model_16(value, path)
    return result

# define "json_model_14_may_additionalItems" ($.applicator.additionalItems)
def jm_f_42(value: Jsonable, path: str) -> bool:
    # $.applicator.additionalItems
    result = json_model_16(value, path)
    return result

# define "json_model_14_may_additionalProperties" ($.applicator.additionalProperties)
def jm_f_43(value: Jsonable, path: str) -> bool:
    # $.applicator.additionalProperties
    result = json_model_16(value, path)
    return result







# define "json_model_14_may_propertyNames" ($.applicator.propertyNames)
def jm_f_47(value: Jsonable, path: str) -> bool:
    # $.applicator.propertyNames
    result = json_model_16(value, path)
    return result

# define "json_model_14_may_unevaluatedItems" ($.applicator.unevaluatedItems)
def jm_f_48(value: Jsonable, path: str) -> bool:
    # $.applicator.unevaluatedItems
    result = json_model_16(value, path)
    return result

# define "json_model_14_may_unevaluatedProperties" ($.applicator.unevaluatedProperties)
def jm_f_49(value: Jsonable, path: str) -> bool:
    # $.applicator.unevaluatedProperties
    result = json_model_16(value, path)
    return result

# define "json_model_14_may_if" ($.applicator.if)
def jm_f_50(value: Jsonable, path: str) -> bool:
    # $.applicator.if
    result = json_model_16(value, path)
    return result

# define "json_model_14_may_then" ($.applicator.then)
def jm_f_51(value: Jsonable, path: str) -> bool:
    # $.applicator.then
    result = json_model_16(value, path)
    return result

# define "json_model_14_may_else" ($.applicator.else)
def jm_f_52(value: Jsonable, path: str) -> bool:
    # $.applicator.else
    result = json_model_16(value, path)
    return result

# define "json_model_14_may_not" ($.applicator.not)
def jm_f_53(value: Jsonable, path: str) -> bool:
    # $.applicator.not
    result = json_model_16(value, path)
    return result

# define "json_model_14_may_allOf" ($.applicator.allOf)
def jm_f_54(value: Jsonable, path: str) -> bool:
    # $.applicator.allOf
    result = json_model_13(value, path)
    return result

# define "json_model_14_may_anyOf" ($.applicator.anyOf)
def jm_f_55(value: Jsonable, path: str) -> bool:
    # $.applicator.anyOf
    result = json_model_13(value, path)
    return result

# define "json_model_14_may_oneOf" ($.applicator.oneOf)
def jm_f_56(value: Jsonable, path: str) -> bool:
    # $.applicator.oneOf
    result = json_model_13(value, path)
    return result

# define "json_model_15_may_$id" ($.ObjectSchema.'$id')
def jm_f_57(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.'$id'
    result = json_model_3(value, path)
    return result

# define "json_model_15_may_$schema" ($.ObjectSchema.'$schema')
def jm_f_58(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.'$schema'
    result = isinstance(value, str) and value == "https://json-schema.org/draft/2019-09/schema"
    return result

# define "json_model_15_may_$ref" ($.ObjectSchema.'$ref')
def jm_f_59(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.'$ref'
    result = json_model_2(value, path)
    return result

# define "json_model_15_may_$anchor" ($.ObjectSchema.'$anchor')
def jm_f_60(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.'$anchor'
    result = json_model_2(value, path)
    return result

# define "json_model_15_may_$recursiveRef" ($.ObjectSchema.'$recursiveRef')
def jm_f_61(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.'$recursiveRef'
    result = json_model_2(value, path)
    return result

# define "json_model_15_may_$recursiveAnchor" ($.ObjectSchema.'$recursiveAnchor')
def jm_f_62(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.'$recursiveAnchor'
    result = isinstance(value, bool)
    return result



# define "json_model_15_may_$comment" ($.ObjectSchema.'$comment')
def jm_f_64(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_15_may_items" ($.ObjectSchema.items)
def jm_f_66(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.items
    # $.ObjectSchema.items.'|'.0
    result = json_model_16(value, path)
    if not result:
        # $.ObjectSchema.items.'|'.1
        result = json_model_13(value, path)
    return result

# define "json_model_15_may_contains" ($.ObjectSchema.contains)
def jm_f_67(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.contains
    result = json_model_16(value, path)
    return result

# define "json_model_15_may_additionalItems" ($.ObjectSchema.additionalItems)
def jm_f_68(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.additionalItems
    result = json_model_16(value, path)
    return result

# define "json_model_15_may_additionalProperties" ($.ObjectSchema.additionalProperties)
def jm_f_69(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.additionalProperties
    result = json_model_16(value, path)
    return result







# define "json_model_15_may_propertyNames" ($.ObjectSchema.propertyNames)
def jm_f_73(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.propertyNames
    result = json_model_16(value, path)
    return result

# define "json_model_15_may_unevaluatedItems" ($.ObjectSchema.unevaluatedItems)
def jm_f_74(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.unevaluatedItems
    result = json_model_16(value, path)
    return result

# define "json_model_15_may_unevaluatedProperties" ($.ObjectSchema.unevaluatedProperties)
def jm_f_75(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.unevaluatedProperties
    result = json_model_16(value, path)
    return result

# define "json_model_15_may_if" ($.ObjectSchema.if)
def jm_f_76(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.if
    result = json_model_16(value, path)
    return result

# define "json_model_15_may_then" ($.ObjectSchema.then)
def jm_f_77(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.then
    result = json_model_16(value, path)
    return result

# define "json_model_15_may_else" ($.ObjectSchema.else)
def jm_f_78(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.else
    result = json_model_16(value, path)
    return result

# define "json_model_15_may_not" ($.ObjectSchema.not)
def jm_f_79(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.not
    result = json_model_16(value, path)
    return result

# define "json_model_15_may_allOf" ($.ObjectSchema.allOf)
def jm_f_80(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.allOf
    result = json_model_13(value, path)
    return result

# define "json_model_15_may_anyOf" ($.ObjectSchema.anyOf)
def jm_f_81(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.anyOf
    result = json_model_13(value, path)
    return result

# define "json_model_15_may_oneOf" ($.ObjectSchema.oneOf)
def jm_f_82(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.oneOf
    result = json_model_13(value, path)
    return result

# define "json_model_15_may_type" ($.ObjectSchema.type)
def jm_f_83(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.type
    # $.ObjectSchema.type.'|'.0
    result = json_model_8(value, path)
    if not result:
        # $.ObjectSchema.type.'|'.1
        result = json_model_9(value, path)
    return result

# define "json_model_15_may_const" ($.ObjectSchema.const)
def jm_f_84(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.const
    result = True
    return result

# define "json_model_15_may_enum" ($.ObjectSchema.enum)
def jm_f_85(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.enum
    result = isinstance(value, list)
    if result:
        for array_5_idx, array_5_item in enumerate(value):
            # $.ObjectSchema.enum.0
            result = True
            if not result: break
    return result

# define "json_model_15_may_multipleOf" ($.ObjectSchema.multipleOf)
def jm_f_86(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.multipleOf
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool)) and value > 0.0
    return result

# define "json_model_15_may_maximum" ($.ObjectSchema.maximum)
def jm_f_87(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.maximum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_15_may_exclusiveMaximum" ($.ObjectSchema.exclusiveMaximum)
def jm_f_88(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.exclusiveMaximum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_15_may_minimum" ($.ObjectSchema.minimum)
def jm_f_89(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.minimum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_15_may_exclusiveMinimum" ($.ObjectSchema.exclusiveMinimum)
def jm_f_90(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.exclusiveMinimum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_15_may_maxLength" ($.ObjectSchema.maxLength)
def jm_f_91(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.maxLength
    result = json_model_11(value, path)
    return result

# define "json_model_15_may_minLength" ($.ObjectSchema.minLength)
def jm_f_92(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.minLength
    result = json_model_11(value, path)
    return result

# define "json_model_15_may_pattern" ($.ObjectSchema.pattern)
def jm_f_93(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.pattern
    result = is_valid_re(value, path)
    return result

# define "json_model_15_may_maxItems" ($.ObjectSchema.maxItems)
def jm_f_94(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.maxItems
    result = json_model_11(value, path)
    return result

# define "json_model_15_may_minItems" ($.ObjectSchema.minItems)
def jm_f_95(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.minItems
    result = json_model_11(value, path)
    return result

# define "json_model_15_may_uniqueItems" ($.ObjectSchema.uniqueItems)
def jm_f_96(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.uniqueItems
    result = isinstance(value, bool)
    return result

# define "json_model_15_may_maxContains" ($.ObjectSchema.maxContains)
def jm_f_97(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.maxContains
    result = json_model_11(value, path)
    return result

# define "json_model_15_may_minContains" ($.ObjectSchema.minContains)
def jm_f_98(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.minContains
    result = json_model_11(value, path)
    return result

# define "json_model_15_may_maxProperties" ($.ObjectSchema.maxProperties)
def jm_f_99(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.maxProperties
    result = json_model_11(value, path)
    return result

# define "json_model_15_may_minProperties" ($.ObjectSchema.minProperties)
def jm_f_100(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.minProperties
    result = json_model_11(value, path)
    return result

# define "json_model_15_may_required" ($.ObjectSchema.required)
def jm_f_101(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.required
    result = json_model_10(value, path)
    return result



# define "json_model_15_may_title" ($.ObjectSchema.title)
def jm_f_103(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.title
    result = isinstance(value, str)
    return result

# define "json_model_15_may_description" ($.ObjectSchema.description)
def jm_f_104(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.description
    result = isinstance(value, str)
    return result

# define "json_model_15_may_default" ($.ObjectSchema.default)
def jm_f_105(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.default
    result = True
    return result

# define "json_model_15_may_deprecated" ($.ObjectSchema.deprecated)
def jm_f_106(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_15_may_readOnly" ($.ObjectSchema.readOnly)
def jm_f_107(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_15_may_writeOnly" ($.ObjectSchema.writeOnly)
def jm_f_108(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.writeOnly
    result = isinstance(value, bool)
    return result

# define "json_model_15_may_examples" ($.ObjectSchema.examples)
def jm_f_109(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.examples
    result = isinstance(value, list)
    if result:
        for array_6_idx, array_6_item in enumerate(value):
            # $.ObjectSchema.examples.0
            result = True
            if not result: break
    return result

# define "json_model_15_may_format" ($.ObjectSchema.format)
def jm_f_110(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.format
    result = isinstance(value, str)
    return result

# define "json_model_15_may_contentEncoding" ($.ObjectSchema.contentEncoding)
def jm_f_111(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.contentEncoding
    result = isinstance(value, str)
    return result

# define "json_model_15_may_contentMediaType" ($.ObjectSchema.contentMediaType)
def jm_f_112(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.contentMediaType
    result = isinstance(value, str)
    return result

# define "json_model_15_may_contentSchema" ($.ObjectSchema.contentSchema)
def jm_f_113(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.contentSchema
    result = json_model_16(value, path)
    return result


# define "$URI" ($.URI)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.URI
    result = is_valid_url(value, path)
    return result

# define "$URI-REFERENCE" ($.'URI-REFERENCE')
def json_model_2(value: Jsonable, path: str) -> bool:
    # $.'URI-REFERENCE'
    result = isinstance(value, str)
    return result

# define "$id" ($.id)
def json_model_3(value: Jsonable, path: str) -> bool:
    # $.id
    result = json_model_2(value, path)
    return result


# object $.core.'$vocabulary'
def jm_f_6(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if is_valid_url(prop, path):  # $URL
            # $.core.'$vocabulary'.URL
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.core.'$defs'
def jm_f_8(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.core.'$defs'.''
        result = json_model_16(model, path)
        if not result: return False
    return True


# object $.core
def json_model_4(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_4_may:  # may
            if not json_model_4_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True




# object $.meta
def json_model_5(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_5_may:  # may
            if not json_model_5_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True




# object $.content
def json_model_6(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_6_may:  # may
            if not json_model_6_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True




# object $.format
def json_model_7(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_7_may:  # may
            if not json_model_7_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True



# define "$simpleTypes" ($.simpleTypes)
def json_model_8(value: Jsonable, path: str) -> bool:
    # $.simpleTypes
    result = not isinstance(value, (list, dict)) and value in {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
    return result

# define "$simpleTypesArray" ($.simpleTypesArray)
def json_model_9(value: Jsonable, path: str) -> bool:
    # $.simpleTypesArray
    # $.simpleTypesArray.'@'
    result = isinstance(value, list)
    if result:
        for array_1_idx, array_1_item in enumerate(value):
            # $.simpleTypesArray.'@'.0
            result = json_model_8(array_1_item, path)
            if not result: break
    result &= len(set(value)) == len(value)
    result &= len(value) >= 1
    return result

# define "$stringArray" ($.stringArray)
def json_model_10(value: Jsonable, path: str) -> bool:
    # $.stringArray
    # $.stringArray.'@'
    result = isinstance(value, list)
    if result:
        for array_2_idx, array_2_item in enumerate(value):
            # $.stringArray.'@'.0
            result = isinstance(array_2_item, str)
            if not result: break
    result &= len(set(value)) == len(value)
    return result

# define "$nonNegativeInteger" ($.nonNegativeInteger)
def json_model_11(value: Jsonable, path: str) -> bool:
    # $.nonNegativeInteger
    result = ((isinstance(value, int) and not isinstance(value, bool)) or (isinstance(value, float) and int(value) == value)) and value >= 0
    return result


# object $.validation.dependentRequired
def jm_f_39(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.validation.dependentRequired.''
        result = json_model_10(model, path)
        if not result: return False
    return True


# object $.validation
def json_model_12(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_12_may:  # may
            if not json_model_12_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True



# define "$schemaArray" ($.schemaArray)
def json_model_13(value: Jsonable, path: str) -> bool:
    # $.schemaArray
    # $.schemaArray.'@'
    result = isinstance(value, list)
    if result:
        for array_4_idx, array_4_item in enumerate(value):
            # $.schemaArray.'@'.0
            result = json_model_16(array_4_item, path)
            if not result: break
    result &= len(value) >= 1
    return result


# object $.applicator.properties
def jm_f_44(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.applicator.properties.''
        result = json_model_16(model, path)
        if not result: return False
    return True


# object $.applicator.patternProperties
def jm_f_45(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if is_valid_re(prop, path):  # $REGEX
            # $.applicator.patternProperties.REGEX
            result = json_model_16(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.applicator.dependentSchemas
def jm_f_46(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.applicator.dependentSchemas.''
        result = json_model_16(model, path)
        if not result: return False
    return True


# object $.applicator
def json_model_14(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_14_may:  # may
            if not json_model_14_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True




# object $.ObjectSchema.'$vocabulary'
def jm_f_63(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if is_valid_url(prop, path):  # $URL
            # $.ObjectSchema.'$vocabulary'.URL
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.ObjectSchema.'$defs'
def jm_f_65(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.ObjectSchema.'$defs'.''
        result = json_model_16(model, path)
        if not result: return False
    return True


# object $.ObjectSchema.properties
def jm_f_70(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.ObjectSchema.properties.''
        result = json_model_16(model, path)
        if not result: return False
    return True


# object $.ObjectSchema.patternProperties
def jm_f_71(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if is_valid_re(prop, path):  # $REGEX
            # $.ObjectSchema.patternProperties.REGEX
            result = json_model_16(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.ObjectSchema.dependentSchemas
def jm_f_72(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.ObjectSchema.dependentSchemas.''
        result = json_model_16(model, path)
        if not result: return False
    return True


# object $.ObjectSchema.dependentRequired
def jm_f_102(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.ObjectSchema.dependentRequired.''
        result = json_model_10(model, path)
        if not result: return False
    return True


# object $.ObjectSchema
def json_model_15(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_15_may:  # may
            if not json_model_15_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True



# define "$Schema" ($.Schema)
def json_model_16(value: Jsonable, path: str) -> bool:
    # $.Schema
    # $.Schema.'|'.0
    result = isinstance(value, bool)
    if not result:
        # $.Schema.'|'.1
        result = json_model_15(value, path)
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    # $.'@'
    result = json_model_16(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_4_may = {
    "$id": jm_f_0,
    "$schema": jm_f_1,
    "$ref": jm_f_2,
    "$anchor": jm_f_3,
    "$recursiveRef": jm_f_4,
    "$recursiveAnchor": jm_f_5,
    "$vocabulary": jm_f_6,
    "$comment": jm_f_7,
    "$defs": jm_f_8,
}
json_model_5_may = {
    "title": jm_f_9,
    "description": jm_f_10,
    "default": jm_f_11,
    "deprecated": jm_f_12,
    "readOnly": jm_f_13,
    "writeOnly": jm_f_14,
    "examples": jm_f_15,
}
json_model_6_may = {
    "contentEncoding": jm_f_16,
    "contentMediaType": jm_f_17,
    "contentSchema": jm_f_18,
}
json_model_7_may = {
    "format": jm_f_19,
}
json_model_12_may = {
    "type": jm_f_20,
    "const": jm_f_21,
    "enum": jm_f_22,
    "multipleOf": jm_f_23,
    "maximum": jm_f_24,
    "exclusiveMaximum": jm_f_25,
    "minimum": jm_f_26,
    "exclusiveMinimum": jm_f_27,
    "maxLength": jm_f_28,
    "minLength": jm_f_29,
    "pattern": jm_f_30,
    "maxItems": jm_f_31,
    "minItems": jm_f_32,
    "uniqueItems": jm_f_33,
    "maxContains": jm_f_34,
    "minContains": jm_f_35,
    "maxProperties": jm_f_36,
    "minProperties": jm_f_37,
    "required": jm_f_38,
    "dependentRequired": jm_f_39,
}
json_model_14_may = {
    "items": jm_f_40,
    "contains": jm_f_41,
    "additionalItems": jm_f_42,
    "additionalProperties": jm_f_43,
    "properties": jm_f_44,
    "patternProperties": jm_f_45,
    "dependentSchemas": jm_f_46,
    "propertyNames": jm_f_47,
    "unevaluatedItems": jm_f_48,
    "unevaluatedProperties": jm_f_49,
    "if": jm_f_50,
    "then": jm_f_51,
    "else": jm_f_52,
    "not": jm_f_53,
    "allOf": jm_f_54,
    "anyOf": jm_f_55,
    "oneOf": jm_f_56,
}
json_model_15_may = {
    "$id": jm_f_57,
    "$schema": jm_f_58,
    "$ref": jm_f_59,
    "$anchor": jm_f_60,
    "$recursiveRef": jm_f_61,
    "$recursiveAnchor": jm_f_62,
    "$vocabulary": jm_f_63,
    "$comment": jm_f_64,
    "$defs": jm_f_65,
    "items": jm_f_66,
    "contains": jm_f_67,
    "additionalItems": jm_f_68,
    "additionalProperties": jm_f_69,
    "properties": jm_f_70,
    "patternProperties": jm_f_71,
    "dependentSchemas": jm_f_72,
    "propertyNames": jm_f_73,
    "unevaluatedItems": jm_f_74,
    "unevaluatedProperties": jm_f_75,
    "if": jm_f_76,
    "then": jm_f_77,
    "else": jm_f_78,
    "not": jm_f_79,
    "allOf": jm_f_80,
    "anyOf": jm_f_81,
    "oneOf": jm_f_82,
    "type": jm_f_83,
    "const": jm_f_84,
    "enum": jm_f_85,
    "multipleOf": jm_f_86,
    "maximum": jm_f_87,
    "exclusiveMaximum": jm_f_88,
    "minimum": jm_f_89,
    "exclusiveMinimum": jm_f_90,
    "maxLength": jm_f_91,
    "minLength": jm_f_92,
    "pattern": jm_f_93,
    "maxItems": jm_f_94,
    "minItems": jm_f_95,
    "uniqueItems": jm_f_96,
    "maxContains": jm_f_97,
    "minContains": jm_f_98,
    "maxProperties": jm_f_99,
    "minProperties": jm_f_100,
    "required": jm_f_101,
    "dependentRequired": jm_f_102,
    "title": jm_f_103,
    "description": jm_f_104,
    "default": jm_f_105,
    "deprecated": jm_f_106,
    "readOnly": jm_f_107,
    "writeOnly": jm_f_108,
    "examples": jm_f_109,
    "format": jm_f_110,
    "contentEncoding": jm_f_111,
    "contentMediaType": jm_f_112,
    "contentSchema": jm_f_113,
}


