# Generated for model: ./scp_01.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_date(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            datetime.date.fromisoformat(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False

json_model_0_must: PropMap
json_model_4_must: PropMap

# define "json_model_0_must_RA" ($.RA)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.RA
    result = json_model_4(value, path)
    return result



# define "json_model_0_must_a" ($.a)
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.a
    result = json_model_6(value, path)
    return result

# define "json_model_4_must_a" ($.'$#R'.a)
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.'$#R'.a
    result = json_model_6(value, path)
    return result


# define "$b" ($.b)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.b
    result = isinstance(value, str) and value == "b"
    return result

# define "$B" ($.B)
def json_model_2(value: Jsonable, path: str) -> bool:
    # $.B
    result = isinstance(value, str)
    return result

# define "$R" ($.R)
def json_model_3(value: Jsonable, path: str) -> bool:
    # $.R
    result = json_model_4(value, path)
    return result


# object $
def json_model_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_0_must:  # must
            must_count += 1
            if not json_model_0_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 3


# object $.'$#R'
def json_model_4(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_4_must:  # must
            must_count += 1
            if not json_model_4_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1



# define "$#R#A" ($.'$#R#A')
def json_model_6(value: Jsonable, path: str) -> bool:
    # $.'$#R#A'
    result = isinstance(value, str)
    return result



# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_0_must = {
    "RA": jm_f_0,
    "b": json_model_1,
    "a": jm_f_1,
}
json_model_4_must = {
    "a": jm_f_2,
}


