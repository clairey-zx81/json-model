#! /bin/env python
#
# Model: ./openapi-310-models.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

json_model_370_must: PropMap
json_model_370_may: PropMap
# regex "/^x\\-.*$/"
jm_re_0 = re.compile("^x\\-.*$").search
json_model_371_must: PropMap
json_model_371_may: PropMap
json_model_372_may: PropMap
jm_obj_0_must: PropMap
jm_obj_1_must: PropMap
json_model_374_must: PropMap
json_model_374_may: PropMap
json_model_375_must: PropMap
json_model_375_may: PropMap
json_model_376_may: PropMap
# regex "/^//"
jm_re_1 = re.compile("^/").search
json_model_378_may: PropMap
json_model_379_may: PropMap
json_model_380_must: PropMap
json_model_380_may: PropMap
json_model_382_must: PropMap
json_model_382_may: PropMap
json_model_383_may: PropMap
json_model_384_may: PropMap
json_model_385_may: PropMap
json_model_386_may: PropMap
# regex "/^[1-5](\\d\\d|XX)$/"
jm_re_2 = re.compile("^[1-5](\\d\\d|XX)$").search
json_model_387_may: PropMap
json_model_389_may: PropMap
# regex "/\\{.*\\}/"
jm_re_3 = re.compile("\\{.*\\}").search
jm_obj_2_must: PropMap
jm_obj_2_may: PropMap
jm_obj_3_must: PropMap
jm_obj_3_may: PropMap
json_model_381_may: PropMap
json_model_393_must: PropMap
json_model_393_may: PropMap
json_model_394_must: PropMap
json_model_394_may: PropMap
json_model_396_may: PropMap
json_model_397_must: PropMap
json_model_397_may: PropMap
json_model_398_may: PropMap
json_model_399_must: PropMap
json_model_399_may: PropMap
json_model_400_may: PropMap
json_model_401_must: PropMap
json_model_401_may: PropMap
json_model_419_may: PropMap

def is_valid_re(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except Exception as e:
            rep is None or rep.append(f"regex compile error at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for regex at {path}: {_tname(value)}")
    return False

def is_valid_url(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except Exception as e:
            rep is None or re.append(f"invalid url at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for url at {path}: {_tname(value)}")
    return False

# define "json_model_370_must_openapi" ($.'$openapi#OpenAPI'.openapi)
def jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OpenAPI'.openapi
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#OpenAPI'.openapi]")
    return result

# define "json_model_370_must_info" ($.'$openapi#OpenAPI'.info)
def jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OpenAPI'.info
    result = json_model_371(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Info at {path} [$.'$openapi#OpenAPI'.info]")
    return result

# define "json_model_370_may_jsonSchemaDialect" ($.'$openapi#OpenAPI'.jsonSchemaDialect)
def jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OpenAPI'.jsonSchemaDialect
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#OpenAPI'.jsonSchemaDialect]")
    return result

# define "json_model_370_may_servers" ($.'$openapi#OpenAPI'.servers)
def jm_f_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OpenAPI'.servers
    result = isinstance(value, list)
    if result:
        for array_0_idx, array_0_item in enumerate(value):
            lpath = path + '.' + str(array_0_idx)
            # $.'$openapi#OpenAPI'.servers.0
            result = json_model_374(array_0_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Server at {lpath} [$.'$openapi#OpenAPI'.servers.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$openapi#OpenAPI'.servers]")
    return result

# define "json_model_370_may_paths" ($.'$openapi#OpenAPI'.paths)
def jm_f_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OpenAPI'.paths
    result = json_model_377(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Paths at {path} [$.'$openapi#OpenAPI'.paths]")
    return result



# define "json_model_370_may_component" ($.'$openapi#OpenAPI'.component)
def jm_f_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OpenAPI'.component
    result = json_model_376(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Components at {path} [$.'$openapi#OpenAPI'.component]")
    return result

# define "json_model_370_may_security" ($.'$openapi#OpenAPI'.security)
def jm_f_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OpenAPI'.security
    result = json_model_402(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $SecurityRequirement at {path} [$.'$openapi#OpenAPI'.security]")
    return result

# define "json_model_370_may_tags" ($.'$openapi#OpenAPI'.tags)
def jm_f_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OpenAPI'.tags
    result = isinstance(value, list)
    if result:
        for array_1_idx, array_1_item in enumerate(value):
            lpath = path + '.' + str(array_1_idx)
            # $.'$openapi#OpenAPI'.tags.0
            result = json_model_393(array_1_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Tag at {lpath} [$.'$openapi#OpenAPI'.tags.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$openapi#OpenAPI'.tags]")
    return result

# define "json_model_370_may_externalDocs" ($.'$openapi#OpenAPI'.externalDocs)
def jm_f_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OpenAPI'.externalDocs
    result = json_model_380(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $ExternalDocumentation at {path} [$.'$openapi#OpenAPI'.externalDocs]")
    return result

# define "json_model_371_must_title" ($.'$openapi#Info'.title)
def jm_f_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Info'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Info'.title]")
    return result

# define "json_model_371_must_version" ($.'$openapi#Info'.version)
def jm_f_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Info'.version
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Info'.version]")
    return result

# define "json_model_371_may_summary" ($.'$openapi#Info'.summary)
def jm_f_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Info'.summary
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Info'.summary]")
    return result

# define "json_model_371_may_description" ($.'$openapi#Info'.description)
def jm_f_13(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Info'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Info'.description]")
    return result

# define "json_model_371_may_termsOfService" ($.'$openapi#Info'.termsOfService)
def jm_f_14(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Info'.termsOfService
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Info'.termsOfService]")
    return result

# define "json_model_371_may_contact" ($.'$openapi#Info'.contact)
def jm_f_15(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Info'.contact
    result = json_model_372(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Contact at {path} [$.'$openapi#Info'.contact]")
    return result

# define "json_model_371_may_license" ($.'$openapi#Info'.license)
def jm_f_16(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Info'.license
    result = json_model_373(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $License at {path} [$.'$openapi#Info'.license]")
    return result

# define "json_model_372_may_name" ($.'$openapi#Contact'.name)
def jm_f_17(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Contact'.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Contact'.name]")
    return result

# define "json_model_372_may_url" ($.'$openapi#Contact'.url)
def jm_f_18(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Contact'.url
    result = is_valid_url(value, path, rep) or _rep(f"invalid $URL at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $URL at {path} [$.'$openapi#Contact'.url]")
    return result

# define "json_model_372_may_email" ($.'$openapi#Contact'.email)
def jm_f_19(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Contact'.email
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Contact'.email]")
    return result

# define "jm_obj_0_must_name" ($.'$openapi#License'.'|'.0.name)
def jm_f_20(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#License'.'|'.0.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#License'.'|'.0.name]")
    return result

# define "jm_obj_0_must_identifier" ($.'$openapi#License'.'|'.0.identifier)
def jm_f_21(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#License'.'|'.0.identifier
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#License'.'|'.0.identifier]")
    return result

# define "jm_obj_1_must_name" ($.'$openapi#License'.'|'.1.name)
def jm_f_22(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#License'.'|'.1.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#License'.'|'.1.name]")
    return result

# define "jm_obj_1_must_url" ($.'$openapi#License'.'|'.1.url)
def jm_f_23(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#License'.'|'.1.url
    result = is_valid_url(value, path, rep) or _rep(f"invalid $URL at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $URL at {path} [$.'$openapi#License'.'|'.1.url]")
    return result

# define "json_model_374_must_url" ($.'$openapi#Server'.url)
def jm_f_24(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Server'.url
    result = is_valid_url(value, path, rep) or _rep(f"invalid $URL at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $URL at {path} [$.'$openapi#Server'.url]")
    return result

# define "json_model_374_may_description" ($.'$openapi#Server'.description)
def jm_f_25(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Server'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Server'.description]")
    return result



# define "json_model_375_must_default" ($.'$openapi#ServerVariable'.default)
def jm_f_27(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#ServerVariable'.default
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#ServerVariable'.default]")
    return result

# define "json_model_375_may_enum" ($.'$openapi#ServerVariable'.enum)
def jm_f_28(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#ServerVariable'.enum
    result = isinstance(value, list)
    if result:
        for array_2_idx, array_2_item in enumerate(value):
            lpath = path + '.' + str(array_2_idx)
            # $.'$openapi#ServerVariable'.enum.0
            result = isinstance(array_2_item, str)
            if not result:
                rep is None or rep.append(f"not an expected string at {lpath} [$.'$openapi#ServerVariable'.enum.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$openapi#ServerVariable'.enum]")
    return result

# define "json_model_375_may_description" ($.'$openapi#ServerVariable'.description)
def jm_f_29(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#ServerVariable'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#ServerVariable'.description]")
    return result





















# define "json_model_378_may_$ref" ($.'$openapi#PathItem'.'$ref')
def jm_f_40(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#PathItem'.'$ref'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#PathItem'.'$ref']")
    return result

# define "json_model_378_may_summary" ($.'$openapi#PathItem'.summary)
def jm_f_41(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#PathItem'.summary
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#PathItem'.summary]")
    return result

# define "json_model_378_may_description" ($.'$openapi#PathItem'.description)
def jm_f_42(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#PathItem'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#PathItem'.description]")
    return result

# define "json_model_378_may_get" ($.'$openapi#PathItem'.get)
def jm_f_43(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#PathItem'.get
    result = json_model_379(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$openapi#PathItem'.get]")
    return result

# define "json_model_378_may_put" ($.'$openapi#PathItem'.put)
def jm_f_44(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#PathItem'.put
    result = json_model_379(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$openapi#PathItem'.put]")
    return result

# define "json_model_378_may_post" ($.'$openapi#PathItem'.post)
def jm_f_45(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#PathItem'.post
    result = json_model_379(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$openapi#PathItem'.post]")
    return result

# define "json_model_378_may_options" ($.'$openapi#PathItem'.options)
def jm_f_46(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#PathItem'.options
    result = json_model_379(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$openapi#PathItem'.options]")
    return result

# define "json_model_378_may_head" ($.'$openapi#PathItem'.head)
def jm_f_47(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#PathItem'.head
    result = json_model_379(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$openapi#PathItem'.head]")
    return result

# define "json_model_378_may_patch" ($.'$openapi#PathItem'.patch)
def jm_f_48(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#PathItem'.patch
    result = json_model_379(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$openapi#PathItem'.patch]")
    return result

# define "json_model_378_may_trace" ($.'$openapi#PathItem'.trace)
def jm_f_49(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#PathItem'.trace
    result = json_model_379(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$openapi#PathItem'.trace]")
    return result

# define "json_model_378_may_servers" ($.'$openapi#PathItem'.servers)
def jm_f_50(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#PathItem'.servers
    result = json_model_379(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$openapi#PathItem'.servers]")
    return result



# define "json_model_379_may_tags" ($.'$openapi#Operation'.tags)
def jm_f_52(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Operation'.tags
    result = isinstance(value, list)
    if result:
        for array_3_idx, array_3_item in enumerate(value):
            lpath = path + '.' + str(array_3_idx)
            # $.'$openapi#Operation'.tags.0
            result = isinstance(array_3_item, str)
            if not result:
                rep is None or rep.append(f"not an expected string at {lpath} [$.'$openapi#Operation'.tags.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$openapi#Operation'.tags]")
    return result

# define "json_model_379_may_summary" ($.'$openapi#Operation'.summary)
def jm_f_53(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Operation'.summary
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Operation'.summary]")
    return result

# define "json_model_379_may_description" ($.'$openapi#Operation'.description)
def jm_f_54(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Operation'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Operation'.description]")
    return result

# define "json_model_379_may_externalDocs" ($.'$openapi#Operation'.externalDocs)
def jm_f_55(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Operation'.externalDocs
    result = json_model_380(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $ExternalDocumentation at {path} [$.'$openapi#Operation'.externalDocs]")
    return result

# define "json_model_379_may_operationId" ($.'$openapi#Operation'.operationId)
def jm_f_56(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Operation'.operationId
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Operation'.operationId]")
    return result





# define "json_model_379_may_responses" ($.'$openapi#Operation'.responses)
def jm_f_59(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Operation'.responses
    result = json_model_386(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Responses at {path} [$.'$openapi#Operation'.responses]")
    return result



# define "json_model_379_may_deprecated" ($.'$openapi#Operation'.deprecated)
def jm_f_61(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Operation'.deprecated
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#Operation'.deprecated]")
    return result

# define "json_model_379_may_security" ($.'$openapi#Operation'.security)
def jm_f_62(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Operation'.security
    result = isinstance(value, list)
    if result:
        for array_4_idx, array_4_item in enumerate(value):
            lpath = path + '.' + str(array_4_idx)
            # $.'$openapi#Operation'.security.0
            result = json_model_402(array_4_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $SecurityRequirement at {lpath} [$.'$openapi#Operation'.security.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$openapi#Operation'.security]")
    return result

# define "json_model_379_may_servers" ($.'$openapi#Operation'.servers)
def jm_f_63(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Operation'.servers
    result = isinstance(value, list)
    if result:
        for array_5_idx, array_5_item in enumerate(value):
            lpath = path + '.' + str(array_5_idx)
            # $.'$openapi#Operation'.servers.0
            result = json_model_374(array_5_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Server at {lpath} [$.'$openapi#Operation'.servers.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$openapi#Operation'.servers]")
    return result

# define "json_model_380_must_url" ($.'$openapi#ExternalDocumentation'.url)
def jm_f_64(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#ExternalDocumentation'.url
    result = is_valid_url(value, path, rep) or _rep(f"invalid $URL at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $URL at {path} [$.'$openapi#ExternalDocumentation'.url]")
    return result

# define "json_model_380_may_description" ($.'$openapi#ExternalDocumentation'.description)
def jm_f_65(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#ExternalDocumentation'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#ExternalDocumentation'.description]")
    return result

# define "json_model_382_must_name" ($.'$openapi#Parameter'.name)
def jm_f_66(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Parameter'.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Parameter'.name]")
    return result

# define "json_model_382_must_in" ($.'$openapi#Parameter'.in)
def jm_f_67(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Parameter'.in
    result = not isinstance(value, (list, dict)) and value in {'cookie', 'header', 'path', 'query'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$openapi#Parameter'.in.'|']")
    return result

# define "json_model_382_may_description" ($.'$openapi#Parameter'.description)
def jm_f_68(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Parameter'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Parameter'.description]")
    return result

# define "json_model_382_may_required" ($.'$openapi#Parameter'.required)
def jm_f_69(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Parameter'.required
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#Parameter'.required]")
    return result

# define "json_model_382_may_deprecated" ($.'$openapi#Parameter'.deprecated)
def jm_f_70(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Parameter'.deprecated
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#Parameter'.deprecated]")
    return result

# define "json_model_382_may_allowEmptyValue" ($.'$openapi#Parameter'.allowEmptyValue)
def jm_f_71(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Parameter'.allowEmptyValue
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#Parameter'.allowEmptyValue]")
    return result

# define "json_model_382_may_style" ($.'$openapi#Parameter'.style)
def jm_f_72(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Parameter'.style
    result = not isinstance(value, (list, dict)) and value in {'deepObject', 'form', 'label', 'matrix', 'pipeDelimited', 'simple', 'spaceDelimited'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$openapi#Parameter'.style.'|']")
    return result

# define "json_model_382_may_explode" ($.'$openapi#Parameter'.explode)
def jm_f_73(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Parameter'.explode
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#Parameter'.explode]")
    return result

# define "json_model_382_may_allowReserved" ($.'$openapi#Parameter'.allowReserved)
def jm_f_74(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Parameter'.allowReserved
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#Parameter'.allowReserved]")
    return result

# define "json_model_382_may_schema" ($.'$openapi#Parameter'.schema)
def jm_f_75(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Parameter'.schema
    result = json_model_396(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#Parameter'.schema]")
    return result

# define "json_model_382_may_example" ($.'$openapi#Parameter'.example)
def jm_f_76(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Parameter'.example
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$openapi#Parameter'.example]")
    return result





# define "json_model_383_may_description" ($.'$openapi#RequestBody'.description)
def jm_f_79(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#RequestBody'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#RequestBody'.description]")
    return result



# define "json_model_383_may_required" ($.'$openapi#RequestBody'.required)
def jm_f_81(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#RequestBody'.required
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#RequestBody'.required]")
    return result

# define "json_model_384_may_schema" ($.'$openapi#MediaType'.schema)
def jm_f_82(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#MediaType'.schema
    result = json_model_396(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#MediaType'.schema]")
    return result

# define "json_model_384_may_example" ($.'$openapi#MediaType'.example)
def jm_f_83(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#MediaType'.example
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$openapi#MediaType'.example]")
    return result





# define "json_model_385_may_contentType" ($.'$openapi#Encoding'.contentType)
def jm_f_86(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Encoding'.contentType
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Encoding'.contentType]")
    return result



# define "json_model_385_may_style" ($.'$openapi#Encoding'.style)
def jm_f_88(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Encoding'.style
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Encoding'.style]")
    return result

# define "json_model_385_may_explode" ($.'$openapi#Encoding'.explode)
def jm_f_89(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Encoding'.explode
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#Encoding'.explode]")
    return result

# define "json_model_385_may_allowReserved" ($.'$openapi#Encoding'.allowReserved)
def jm_f_90(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Encoding'.allowReserved
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#Encoding'.allowReserved]")
    return result

# define "json_model_386_may_default" ($.'$openapi#Responses'.default)
def jm_f_91(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Responses'.default
    # $.'$openapi#Responses'.default.'|'.0
    result = json_model_387(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Response at {path} [$.'$openapi#Responses'.default.'|'.0]")
    if not result:
        # $.'$openapi#Responses'.default.'|'.1
        result = json_model_394(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Reference at {path} [$.'$openapi#Responses'.default.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$openapi#Responses'.default.'|']")
    return result

# define "json_model_387_may_description" ($.'$openapi#Response'.description)
def jm_f_92(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Response'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Response'.description]")
    return result







# define "json_model_389_may_summary" ($.'$openapi#Example'.summary)
def jm_f_96(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Example'.summary
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Example'.summary]")
    return result

# define "json_model_389_may_description" ($.'$openapi#Example'.description)
def jm_f_97(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Example'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Example'.description]")
    return result

# define "json_model_389_may_value" ($.'$openapi#Example'.value)
def jm_f_98(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Example'.value
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$openapi#Example'.value]")
    return result

# define "json_model_389_may_externalValue" ($.'$openapi#Example'.externalValue)
def jm_f_99(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Example'.externalValue
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Example'.externalValue]")
    return result

# define "jm_obj_2_must_operationRef" ($.'$openapi#Link'.'|'.0.operationRef)
def jm_f_100(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Link'.'|'.0.operationRef
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Link'.'|'.0.operationRef]")
    return result



# define "jm_obj_2_may_requestBody" ($.'$openapi#Link'.'|'.0.requestBody)
def jm_f_102(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Link'.'|'.0.requestBody
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$openapi#Link'.'|'.0.requestBody]")
    return result

# define "jm_obj_2_may_description" ($.'$openapi#Link'.'|'.0.description)
def jm_f_103(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Link'.'|'.0.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Link'.'|'.0.description]")
    return result

# define "jm_obj_2_may_server" ($.'$openapi#Link'.'|'.0.server)
def jm_f_104(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Link'.'|'.0.server
    result = json_model_374(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Server at {path} [$.'$openapi#Link'.'|'.0.server]")
    return result

# define "jm_obj_3_must_operationId" ($.'$openapi#Link'.'|'.1.operationId)
def jm_f_105(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Link'.'|'.1.operationId
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Link'.'|'.1.operationId]")
    return result



# define "jm_obj_3_may_requestBody" ($.'$openapi#Link'.'|'.1.requestBody)
def jm_f_107(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Link'.'|'.1.requestBody
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$openapi#Link'.'|'.1.requestBody]")
    return result

# define "jm_obj_3_may_description" ($.'$openapi#Link'.'|'.1.description)
def jm_f_108(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Link'.'|'.1.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Link'.'|'.1.description]")
    return result

# define "jm_obj_3_may_server" ($.'$openapi#Link'.'|'.1.server)
def jm_f_109(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Link'.'|'.1.server
    result = json_model_374(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Server at {path} [$.'$openapi#Link'.'|'.1.server]")
    return result

# define "json_model_381_may_description" ($.'$openapi#parameterShare'.description)
def jm_f_110(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#parameterShare'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#parameterShare'.description]")
    return result

# define "json_model_381_may_required" ($.'$openapi#parameterShare'.required)
def jm_f_111(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#parameterShare'.required
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#parameterShare'.required]")
    return result

# define "json_model_381_may_deprecated" ($.'$openapi#parameterShare'.deprecated)
def jm_f_112(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#parameterShare'.deprecated
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#parameterShare'.deprecated]")
    return result

# define "json_model_381_may_allowEmptyValue" ($.'$openapi#parameterShare'.allowEmptyValue)
def jm_f_113(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#parameterShare'.allowEmptyValue
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#parameterShare'.allowEmptyValue]")
    return result

# define "json_model_381_may_style" ($.'$openapi#parameterShare'.style)
def jm_f_114(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#parameterShare'.style
    result = not isinstance(value, (list, dict)) and value in {'deepObject', 'form', 'label', 'matrix', 'pipeDelimited', 'simple', 'spaceDelimited'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$openapi#parameterShare'.style.'|']")
    return result

# define "json_model_381_may_explode" ($.'$openapi#parameterShare'.explode)
def jm_f_115(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#parameterShare'.explode
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#parameterShare'.explode]")
    return result

# define "json_model_381_may_allowReserved" ($.'$openapi#parameterShare'.allowReserved)
def jm_f_116(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#parameterShare'.allowReserved
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#parameterShare'.allowReserved]")
    return result

# define "json_model_381_may_schema" ($.'$openapi#parameterShare'.schema)
def jm_f_117(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#parameterShare'.schema
    result = json_model_396(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#parameterShare'.schema]")
    return result

# define "json_model_381_may_example" ($.'$openapi#parameterShare'.example)
def jm_f_118(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#parameterShare'.example
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$openapi#parameterShare'.example]")
    return result





# define "json_model_393_must_name" ($.'$openapi#Tag'.name)
def jm_f_121(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Tag'.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Tag'.name]")
    return result

# define "json_model_393_may_description" ($.'$openapi#Tag'.description)
def jm_f_122(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Tag'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Tag'.description]")
    return result

# define "json_model_393_may_externalDocs" ($.'$openapi#Tag'.externalDocs)
def jm_f_123(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Tag'.externalDocs
    result = json_model_380(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $ExternalDocumentation at {path} [$.'$openapi#Tag'.externalDocs]")
    return result

# define "json_model_394_must_$ref" ($.'$openapi#Reference'.'$ref')
def jm_f_124(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Reference'.'$ref'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Reference'.'$ref']")
    return result

# define "json_model_394_may_summary" ($.'$openapi#Reference'.summary)
def jm_f_125(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Reference'.summary
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Reference'.summary]")
    return result

# define "json_model_394_may_description" ($.'$openapi#Reference'.description)
def jm_f_126(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Reference'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Reference'.description]")
    return result

# define "json_model_396_may_$id" ($.'$openapi#Schema'.'$id')
def jm_f_127(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.'$id'
    result = json_model_405(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#URI-REFERENCE at {path} [$.'$openapi#Schema'.'$id']")
    return result

# define "json_model_396_may_$schema" ($.'$openapi#Schema'.'$schema')
def jm_f_128(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.'$schema'
    result = isinstance(value, str) and value == "https://json-schema.org/draft/2020-12/schema"
    if not result:
        rep is None or rep.append(f"not an expected _https://json-schema.org/draft/2020-12/schema at {path} [$.'$openapi#Schema'.'$schema']")
    return result

# define "json_model_396_may_$ref" ($.'$openapi#Schema'.'$ref')
def jm_f_129(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.'$ref'
    result = json_model_405(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#URI-REFERENCE at {path} [$.'$openapi#Schema'.'$ref']")
    return result

# define "json_model_396_may_$anchor" ($.'$openapi#Schema'.'$anchor')
def jm_f_130(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.'$anchor'
    result = json_model_405(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#URI-REFERENCE at {path} [$.'$openapi#Schema'.'$anchor']")
    return result

# define "json_model_396_may_$dynamicRef" ($.'$openapi#Schema'.'$dynamicRef')
def jm_f_131(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.'$dynamicRef'
    result = json_model_405(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#URI-REFERENCE at {path} [$.'$openapi#Schema'.'$dynamicRef']")
    return result

# define "json_model_396_may_$dynamicAnchor" ($.'$openapi#Schema'.'$dynamicAnchor')
def jm_f_132(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.'$dynamicAnchor'
    result = json_model_405(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#URI-REFERENCE at {path} [$.'$openapi#Schema'.'$dynamicAnchor']")
    return result



# define "json_model_396_may_$comment" ($.'$openapi#Schema'.'$comment')
def jm_f_134(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Schema'.'$comment']")
    return result



# define "json_model_396_may_prefixItems" ($.'$openapi#Schema'.prefixItems)
def jm_f_136(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.prefixItems
    result = json_model_417(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#schemaArray at {path} [$.'$openapi#Schema'.prefixItems]")
    return result

# define "json_model_396_may_items" ($.'$openapi#Schema'.items)
def jm_f_137(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.items
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#Schema at {path} [$.'$openapi#Schema'.items]")
    return result

# define "json_model_396_may_contains" ($.'$openapi#Schema'.contains)
def jm_f_138(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.contains
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#Schema at {path} [$.'$openapi#Schema'.contains]")
    return result

# define "json_model_396_may_additionalProperties" ($.'$openapi#Schema'.additionalProperties)
def jm_f_139(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.additionalProperties
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#Schema at {path} [$.'$openapi#Schema'.additionalProperties]")
    return result







# define "json_model_396_may_propertyNames" ($.'$openapi#Schema'.propertyNames)
def jm_f_143(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.propertyNames
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#Schema at {path} [$.'$openapi#Schema'.propertyNames]")
    return result

# define "json_model_396_may_if" ($.'$openapi#Schema'.if)
def jm_f_144(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.if
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#Schema at {path} [$.'$openapi#Schema'.if]")
    return result

# define "json_model_396_may_then" ($.'$openapi#Schema'.then)
def jm_f_145(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.then
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#Schema at {path} [$.'$openapi#Schema'.then]")
    return result

# define "json_model_396_may_else" ($.'$openapi#Schema'.else)
def jm_f_146(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.else
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#Schema at {path} [$.'$openapi#Schema'.else]")
    return result

# define "json_model_396_may_not" ($.'$openapi#Schema'.not)
def jm_f_147(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.not
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#Schema at {path} [$.'$openapi#Schema'.not]")
    return result

# define "json_model_396_may_allOf" ($.'$openapi#Schema'.allOf)
def jm_f_148(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.allOf
    result = json_model_417(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#schemaArray at {path} [$.'$openapi#Schema'.allOf]")
    return result

# define "json_model_396_may_anyOf" ($.'$openapi#Schema'.anyOf)
def jm_f_149(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.anyOf
    result = json_model_417(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#schemaArray at {path} [$.'$openapi#Schema'.anyOf]")
    return result

# define "json_model_396_may_oneOf" ($.'$openapi#Schema'.oneOf)
def jm_f_150(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.oneOf
    result = json_model_417(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#schemaArray at {path} [$.'$openapi#Schema'.oneOf]")
    return result

# define "json_model_396_may_unevaluatedItems" ($.'$openapi#Schema'.unevaluatedItems)
def jm_f_151(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.unevaluatedItems
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#Schema at {path} [$.'$openapi#Schema'.unevaluatedItems]")
    return result

# define "json_model_396_may_unevaluatedProperties" ($.'$openapi#Schema'.unevaluatedProperties)
def jm_f_152(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.unevaluatedProperties
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#Schema at {path} [$.'$openapi#Schema'.unevaluatedProperties]")
    return result

# define "json_model_396_may_type" ($.'$openapi#Schema'.type)
def jm_f_153(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.type
    # $.'$openapi#Schema'.type.'|'.0
    result = json_model_412(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#simpleTypes at {path} [$.'$openapi#Schema'.type.'|'.0]")
    if not result:
        # $.'$openapi#Schema'.type.'|'.1
        result = json_model_413(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $openapi#schema#simpleTypesArray at {path} [$.'$openapi#Schema'.type.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$openapi#Schema'.type.'|']")
    return result

# define "json_model_396_may_const" ($.'$openapi#Schema'.const)
def jm_f_154(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.const
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$openapi#Schema'.const]")
    return result

# define "json_model_396_may_enum" ($.'$openapi#Schema'.enum)
def jm_f_155(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.enum
    result = isinstance(value, list)
    if result:
        for array_6_idx, array_6_item in enumerate(value):
            lpath = path + '.' + str(array_6_idx)
            # $.'$openapi#Schema'.enum.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Schema'.enum.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$openapi#Schema'.enum]")
    return result

# define "json_model_396_may_multipleOf" ($.'$openapi#Schema'.multipleOf)
def jm_f_156(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.multipleOf
    result = isinstance(value, float) and value > 0.0
    if not result:
        rep is None or rep.append(f"not a 1.0 float at {path} [$.'$openapi#Schema'.multipleOf]")
    return result

# define "json_model_396_may_maximum" ($.'$openapi#Schema'.maximum)
def jm_f_157(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.maximum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$openapi#Schema'.maximum]")
    return result

# define "json_model_396_may_exclusiveMaximum" ($.'$openapi#Schema'.exclusiveMaximum)
def jm_f_158(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.exclusiveMaximum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$openapi#Schema'.exclusiveMaximum]")
    return result

# define "json_model_396_may_minimum" ($.'$openapi#Schema'.minimum)
def jm_f_159(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.minimum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$openapi#Schema'.minimum]")
    return result

# define "json_model_396_may_exclusiveMinimum" ($.'$openapi#Schema'.exclusiveMinimum)
def jm_f_160(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.exclusiveMinimum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$openapi#Schema'.exclusiveMinimum]")
    return result

# define "json_model_396_may_maxLength" ($.'$openapi#Schema'.maxLength)
def jm_f_161(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.maxLength
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#nonNegativeInteger at {path} [$.'$openapi#Schema'.maxLength]")
    return result

# define "json_model_396_may_minLength" ($.'$openapi#Schema'.minLength)
def jm_f_162(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.minLength
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#nonNegativeInteger at {path} [$.'$openapi#Schema'.minLength]")
    return result

# define "json_model_396_may_pattern" ($.'$openapi#Schema'.pattern)
def jm_f_163(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.pattern
    result = is_valid_re(value, path, rep) or _rep(f"invalid $REGEX at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $REGEX at {path} [$.'$openapi#Schema'.pattern]")
    return result

# define "json_model_396_may_maxItems" ($.'$openapi#Schema'.maxItems)
def jm_f_164(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.maxItems
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#nonNegativeInteger at {path} [$.'$openapi#Schema'.maxItems]")
    return result

# define "json_model_396_may_minItems" ($.'$openapi#Schema'.minItems)
def jm_f_165(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.minItems
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#nonNegativeInteger at {path} [$.'$openapi#Schema'.minItems]")
    return result

# define "json_model_396_may_uniqueItems" ($.'$openapi#Schema'.uniqueItems)
def jm_f_166(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.uniqueItems
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#Schema'.uniqueItems]")
    return result

# define "json_model_396_may_maxContains" ($.'$openapi#Schema'.maxContains)
def jm_f_167(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.maxContains
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#nonNegativeInteger at {path} [$.'$openapi#Schema'.maxContains]")
    return result

# define "json_model_396_may_minContains" ($.'$openapi#Schema'.minContains)
def jm_f_168(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.minContains
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#nonNegativeInteger at {path} [$.'$openapi#Schema'.minContains]")
    return result

# define "json_model_396_may_maxProperties" ($.'$openapi#Schema'.maxProperties)
def jm_f_169(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.maxProperties
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#nonNegativeInteger at {path} [$.'$openapi#Schema'.maxProperties]")
    return result

# define "json_model_396_may_minProperties" ($.'$openapi#Schema'.minProperties)
def jm_f_170(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.minProperties
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#nonNegativeInteger at {path} [$.'$openapi#Schema'.minProperties]")
    return result

# define "json_model_396_may_required" ($.'$openapi#Schema'.required)
def jm_f_171(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.required
    result = json_model_414(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#stringArray at {path} [$.'$openapi#Schema'.required]")
    return result



# define "json_model_396_may_title" ($.'$openapi#Schema'.title)
def jm_f_173(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Schema'.title]")
    return result

# define "json_model_396_may_description" ($.'$openapi#Schema'.description)
def jm_f_174(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Schema'.description]")
    return result

# define "json_model_396_may_default" ($.'$openapi#Schema'.default)
def jm_f_175(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$openapi#Schema'.default]")
    return result

# define "json_model_396_may_deprecated" ($.'$openapi#Schema'.deprecated)
def jm_f_176(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.deprecated
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#Schema'.deprecated]")
    return result

# define "json_model_396_may_readOnly" ($.'$openapi#Schema'.readOnly)
def jm_f_177(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.readOnly
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#Schema'.readOnly]")
    return result

# define "json_model_396_may_writeOnly" ($.'$openapi#Schema'.writeOnly)
def jm_f_178(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.writeOnly
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#Schema'.writeOnly]")
    return result

# define "json_model_396_may_examples" ($.'$openapi#Schema'.examples)
def jm_f_179(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.examples
    result = isinstance(value, list)
    if result:
        for array_7_idx, array_7_item in enumerate(value):
            lpath = path + '.' + str(array_7_idx)
            # $.'$openapi#Schema'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Schema'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$openapi#Schema'.examples]")
    return result

# define "json_model_396_may_format" ($.'$openapi#Schema'.format)
def jm_f_180(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.format
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Schema'.format]")
    return result

# define "json_model_396_may_contentEncoding" ($.'$openapi#Schema'.contentEncoding)
def jm_f_181(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.contentEncoding
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Schema'.contentEncoding]")
    return result

# define "json_model_396_may_contentMediaType" ($.'$openapi#Schema'.contentMediaType)
def jm_f_182(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.contentMediaType
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Schema'.contentMediaType]")
    return result

# define "json_model_396_may_contentSchema" ($.'$openapi#Schema'.contentSchema)
def jm_f_183(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.contentSchema
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi#schema#Schema at {path} [$.'$openapi#Schema'.contentSchema]")
    return result

# define "json_model_396_may_discriminator" ($.'$openapi#Schema'.discriminator)
def jm_f_184(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.discriminator
    result = json_model_397(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Discriminator at {path} [$.'$openapi#Schema'.discriminator]")
    return result

# define "json_model_396_may_externalDocs" ($.'$openapi#Schema'.externalDocs)
def jm_f_185(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.externalDocs
    result = json_model_380(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $ExternalDocumentation at {path} [$.'$openapi#Schema'.externalDocs]")
    return result

# define "json_model_396_may_xml" ($.'$openapi#Schema'.xml)
def jm_f_186(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Schema'.xml
    result = json_model_398(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $XML at {path} [$.'$openapi#Schema'.xml]")
    return result

# define "json_model_397_must_propertyName" ($.'$openapi#Discriminator'.propertyName)
def jm_f_187(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Discriminator'.propertyName
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#Discriminator'.propertyName]")
    return result



# define "json_model_398_may_name" ($.'$openapi#XML'.name)
def jm_f_189(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#XML'.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#XML'.name]")
    return result

# define "json_model_398_may_namespace" ($.'$openapi#XML'.namespace)
def jm_f_190(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#XML'.namespace
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#XML'.namespace]")
    return result

# define "json_model_398_may_prefix" ($.'$openapi#XML'.prefix)
def jm_f_191(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#XML'.prefix
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#XML'.prefix]")
    return result

# define "json_model_398_may_attribute" ($.'$openapi#XML'.attribute)
def jm_f_192(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#XML'.attribute
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#XML'.attribute]")
    return result

# define "json_model_398_may_wrapped" ($.'$openapi#XML'.wrapped)
def jm_f_193(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#XML'.wrapped
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#XML'.wrapped]")
    return result

# define "json_model_399_must_type" ($.'$openapi#SecurityScheme'.type)
def jm_f_194(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#SecurityScheme'.type
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#SecurityScheme'.type]")
    return result

# define "json_model_399_must_name" ($.'$openapi#SecurityScheme'.name)
def jm_f_195(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#SecurityScheme'.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#SecurityScheme'.name]")
    return result

# define "json_model_399_must_in" ($.'$openapi#SecurityScheme'.in)
def jm_f_196(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#SecurityScheme'.in
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#SecurityScheme'.in]")
    return result

# define "json_model_399_must_scheme" ($.'$openapi#SecurityScheme'.scheme)
def jm_f_197(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#SecurityScheme'.scheme
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#SecurityScheme'.scheme]")
    return result

# define "json_model_399_must_flows" ($.'$openapi#SecurityScheme'.flows)
def jm_f_198(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#SecurityScheme'.flows
    result = json_model_400(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $OAuthFlows at {path} [$.'$openapi#SecurityScheme'.flows]")
    return result

# define "json_model_399_must_openIdConnectUrl" ($.'$openapi#SecurityScheme'.openIdConnectUrl)
def jm_f_199(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#SecurityScheme'.openIdConnectUrl
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#SecurityScheme'.openIdConnectUrl]")
    return result

# define "json_model_399_may_description" ($.'$openapi#SecurityScheme'.description)
def jm_f_200(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#SecurityScheme'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#SecurityScheme'.description]")
    return result

# define "json_model_399_may_bearerFormat" ($.'$openapi#SecurityScheme'.bearerFormat)
def jm_f_201(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#SecurityScheme'.bearerFormat
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#SecurityScheme'.bearerFormat]")
    return result

# define "json_model_400_may_implicit" ($.'$openapi#OAuthFlows'.implicit)
def jm_f_202(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OAuthFlows'.implicit
    result = json_model_401(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $OAuthFlow at {path} [$.'$openapi#OAuthFlows'.implicit]")
    return result

# define "json_model_400_may_password" ($.'$openapi#OAuthFlows'.password)
def jm_f_203(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OAuthFlows'.password
    result = json_model_401(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $OAuthFlow at {path} [$.'$openapi#OAuthFlows'.password]")
    return result

# define "json_model_400_may_clientCredentials" ($.'$openapi#OAuthFlows'.clientCredentials)
def jm_f_204(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OAuthFlows'.clientCredentials
    result = json_model_401(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $OAuthFlow at {path} [$.'$openapi#OAuthFlows'.clientCredentials]")
    return result

# define "json_model_400_may_authorizationCode" ($.'$openapi#OAuthFlows'.authorizationCode)
def jm_f_205(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OAuthFlows'.authorizationCode
    result = json_model_401(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $OAuthFlow at {path} [$.'$openapi#OAuthFlows'.authorizationCode]")
    return result

# define "json_model_401_must_authorizationUrl" ($.'$openapi#OAuthFlow'.authorizationUrl)
def jm_f_206(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OAuthFlow'.authorizationUrl
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#OAuthFlow'.authorizationUrl]")
    return result

# define "json_model_401_must_tokenUrl" ($.'$openapi#OAuthFlow'.tokenUrl)
def jm_f_207(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OAuthFlow'.tokenUrl
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#OAuthFlow'.tokenUrl]")
    return result



# define "json_model_401_may_refreshUrl" ($.'$openapi#OAuthFlow'.refreshUrl)
def jm_f_209(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#OAuthFlow'.refreshUrl
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#OAuthFlow'.refreshUrl]")
    return result

# define "json_model_419_may_$id" ($.'$openapi#schema#ObjectSchema'.'$id')
def jm_f_210(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.'$id'
    result = json_model_405(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$openapi#schema#ObjectSchema'.'$id']")
    return result

# define "json_model_419_may_$schema" ($.'$openapi#schema#ObjectSchema'.'$schema')
def jm_f_211(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.'$schema'
    result = isinstance(value, str) and value == "https://json-schema.org/draft/2020-12/schema"
    if not result:
        rep is None or rep.append(f"not an expected _https://json-schema.org/draft/2020-12/schema at {path} [$.'$openapi#schema#ObjectSchema'.'$schema']")
    return result

# define "json_model_419_may_$ref" ($.'$openapi#schema#ObjectSchema'.'$ref')
def jm_f_212(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.'$ref'
    result = json_model_405(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$openapi#schema#ObjectSchema'.'$ref']")
    return result

# define "json_model_419_may_$anchor" ($.'$openapi#schema#ObjectSchema'.'$anchor')
def jm_f_213(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.'$anchor'
    result = json_model_405(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$openapi#schema#ObjectSchema'.'$anchor']")
    return result

# define "json_model_419_may_$dynamicRef" ($.'$openapi#schema#ObjectSchema'.'$dynamicRef')
def jm_f_214(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.'$dynamicRef'
    result = json_model_405(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$openapi#schema#ObjectSchema'.'$dynamicRef']")
    return result

# define "json_model_419_may_$dynamicAnchor" ($.'$openapi#schema#ObjectSchema'.'$dynamicAnchor')
def jm_f_215(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.'$dynamicAnchor'
    result = json_model_405(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$openapi#schema#ObjectSchema'.'$dynamicAnchor']")
    return result



# define "json_model_419_may_$comment" ($.'$openapi#schema#ObjectSchema'.'$comment')
def jm_f_217(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#schema#ObjectSchema'.'$comment']")
    return result



# define "json_model_419_may_prefixItems" ($.'$openapi#schema#ObjectSchema'.prefixItems)
def jm_f_219(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.prefixItems
    result = json_model_417(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$openapi#schema#ObjectSchema'.prefixItems]")
    return result

# define "json_model_419_may_items" ($.'$openapi#schema#ObjectSchema'.items)
def jm_f_220(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.items
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#schema#ObjectSchema'.items]")
    return result

# define "json_model_419_may_contains" ($.'$openapi#schema#ObjectSchema'.contains)
def jm_f_221(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.contains
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#schema#ObjectSchema'.contains]")
    return result

# define "json_model_419_may_additionalProperties" ($.'$openapi#schema#ObjectSchema'.additionalProperties)
def jm_f_222(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.additionalProperties
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#schema#ObjectSchema'.additionalProperties]")
    return result







# define "json_model_419_may_propertyNames" ($.'$openapi#schema#ObjectSchema'.propertyNames)
def jm_f_226(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.propertyNames
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#schema#ObjectSchema'.propertyNames]")
    return result

# define "json_model_419_may_if" ($.'$openapi#schema#ObjectSchema'.if)
def jm_f_227(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.if
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#schema#ObjectSchema'.if]")
    return result

# define "json_model_419_may_then" ($.'$openapi#schema#ObjectSchema'.then)
def jm_f_228(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.then
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#schema#ObjectSchema'.then]")
    return result

# define "json_model_419_may_else" ($.'$openapi#schema#ObjectSchema'.else)
def jm_f_229(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.else
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#schema#ObjectSchema'.else]")
    return result

# define "json_model_419_may_not" ($.'$openapi#schema#ObjectSchema'.not)
def jm_f_230(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.not
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#schema#ObjectSchema'.not]")
    return result

# define "json_model_419_may_allOf" ($.'$openapi#schema#ObjectSchema'.allOf)
def jm_f_231(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.allOf
    result = json_model_417(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$openapi#schema#ObjectSchema'.allOf]")
    return result

# define "json_model_419_may_anyOf" ($.'$openapi#schema#ObjectSchema'.anyOf)
def jm_f_232(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.anyOf
    result = json_model_417(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$openapi#schema#ObjectSchema'.anyOf]")
    return result

# define "json_model_419_may_oneOf" ($.'$openapi#schema#ObjectSchema'.oneOf)
def jm_f_233(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.oneOf
    result = json_model_417(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$openapi#schema#ObjectSchema'.oneOf]")
    return result

# define "json_model_419_may_unevaluatedItems" ($.'$openapi#schema#ObjectSchema'.unevaluatedItems)
def jm_f_234(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.unevaluatedItems
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#schema#ObjectSchema'.unevaluatedItems]")
    return result

# define "json_model_419_may_unevaluatedProperties" ($.'$openapi#schema#ObjectSchema'.unevaluatedProperties)
def jm_f_235(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.unevaluatedProperties
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#schema#ObjectSchema'.unevaluatedProperties]")
    return result

# define "json_model_419_may_type" ($.'$openapi#schema#ObjectSchema'.type)
def jm_f_236(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.type
    # $.'$openapi#schema#ObjectSchema'.type.'|'.0
    result = json_model_412(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $simpleTypes at {path} [$.'$openapi#schema#ObjectSchema'.type.'|'.0]")
    if not result:
        # $.'$openapi#schema#ObjectSchema'.type.'|'.1
        result = json_model_413(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $simpleTypesArray at {path} [$.'$openapi#schema#ObjectSchema'.type.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$openapi#schema#ObjectSchema'.type.'|']")
    return result

# define "json_model_419_may_const" ($.'$openapi#schema#ObjectSchema'.const)
def jm_f_237(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.const
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$openapi#schema#ObjectSchema'.const]")
    return result

# define "json_model_419_may_enum" ($.'$openapi#schema#ObjectSchema'.enum)
def jm_f_238(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.enum
    result = isinstance(value, list)
    if result:
        for array_12_idx, array_12_item in enumerate(value):
            lpath = path + '.' + str(array_12_idx)
            # $.'$openapi#schema#ObjectSchema'.enum.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#schema#ObjectSchema'.enum.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$openapi#schema#ObjectSchema'.enum]")
    return result

# define "json_model_419_may_multipleOf" ($.'$openapi#schema#ObjectSchema'.multipleOf)
def jm_f_239(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.multipleOf
    result = isinstance(value, float) and value > 0.0
    if not result:
        rep is None or rep.append(f"not a 1.0 float at {path} [$.'$openapi#schema#ObjectSchema'.multipleOf]")
    return result

# define "json_model_419_may_maximum" ($.'$openapi#schema#ObjectSchema'.maximum)
def jm_f_240(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.maximum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$openapi#schema#ObjectSchema'.maximum]")
    return result

# define "json_model_419_may_exclusiveMaximum" ($.'$openapi#schema#ObjectSchema'.exclusiveMaximum)
def jm_f_241(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.exclusiveMaximum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$openapi#schema#ObjectSchema'.exclusiveMaximum]")
    return result

# define "json_model_419_may_minimum" ($.'$openapi#schema#ObjectSchema'.minimum)
def jm_f_242(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.minimum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$openapi#schema#ObjectSchema'.minimum]")
    return result

# define "json_model_419_may_exclusiveMinimum" ($.'$openapi#schema#ObjectSchema'.exclusiveMinimum)
def jm_f_243(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.exclusiveMinimum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$openapi#schema#ObjectSchema'.exclusiveMinimum]")
    return result

# define "json_model_419_may_maxLength" ($.'$openapi#schema#ObjectSchema'.maxLength)
def jm_f_244(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.maxLength
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$openapi#schema#ObjectSchema'.maxLength]")
    return result

# define "json_model_419_may_minLength" ($.'$openapi#schema#ObjectSchema'.minLength)
def jm_f_245(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.minLength
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$openapi#schema#ObjectSchema'.minLength]")
    return result

# define "json_model_419_may_pattern" ($.'$openapi#schema#ObjectSchema'.pattern)
def jm_f_246(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.pattern
    result = is_valid_re(value, path, rep) or _rep(f"invalid $REGEX at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $REGEX at {path} [$.'$openapi#schema#ObjectSchema'.pattern]")
    return result

# define "json_model_419_may_maxItems" ($.'$openapi#schema#ObjectSchema'.maxItems)
def jm_f_247(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.maxItems
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$openapi#schema#ObjectSchema'.maxItems]")
    return result

# define "json_model_419_may_minItems" ($.'$openapi#schema#ObjectSchema'.minItems)
def jm_f_248(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.minItems
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$openapi#schema#ObjectSchema'.minItems]")
    return result

# define "json_model_419_may_uniqueItems" ($.'$openapi#schema#ObjectSchema'.uniqueItems)
def jm_f_249(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.uniqueItems
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#schema#ObjectSchema'.uniqueItems]")
    return result

# define "json_model_419_may_maxContains" ($.'$openapi#schema#ObjectSchema'.maxContains)
def jm_f_250(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.maxContains
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$openapi#schema#ObjectSchema'.maxContains]")
    return result

# define "json_model_419_may_minContains" ($.'$openapi#schema#ObjectSchema'.minContains)
def jm_f_251(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.minContains
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$openapi#schema#ObjectSchema'.minContains]")
    return result

# define "json_model_419_may_maxProperties" ($.'$openapi#schema#ObjectSchema'.maxProperties)
def jm_f_252(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.maxProperties
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$openapi#schema#ObjectSchema'.maxProperties]")
    return result

# define "json_model_419_may_minProperties" ($.'$openapi#schema#ObjectSchema'.minProperties)
def jm_f_253(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.minProperties
    result = json_model_415(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$openapi#schema#ObjectSchema'.minProperties]")
    return result

# define "json_model_419_may_required" ($.'$openapi#schema#ObjectSchema'.required)
def jm_f_254(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.required
    result = json_model_414(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $stringArray at {path} [$.'$openapi#schema#ObjectSchema'.required]")
    return result



# define "json_model_419_may_title" ($.'$openapi#schema#ObjectSchema'.title)
def jm_f_256(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#schema#ObjectSchema'.title]")
    return result

# define "json_model_419_may_description" ($.'$openapi#schema#ObjectSchema'.description)
def jm_f_257(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#schema#ObjectSchema'.description]")
    return result

# define "json_model_419_may_default" ($.'$openapi#schema#ObjectSchema'.default)
def jm_f_258(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$openapi#schema#ObjectSchema'.default]")
    return result

# define "json_model_419_may_deprecated" ($.'$openapi#schema#ObjectSchema'.deprecated)
def jm_f_259(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.deprecated
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#schema#ObjectSchema'.deprecated]")
    return result

# define "json_model_419_may_readOnly" ($.'$openapi#schema#ObjectSchema'.readOnly)
def jm_f_260(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.readOnly
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#schema#ObjectSchema'.readOnly]")
    return result

# define "json_model_419_may_writeOnly" ($.'$openapi#schema#ObjectSchema'.writeOnly)
def jm_f_261(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.writeOnly
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#schema#ObjectSchema'.writeOnly]")
    return result

# define "json_model_419_may_examples" ($.'$openapi#schema#ObjectSchema'.examples)
def jm_f_262(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.examples
    result = isinstance(value, list)
    if result:
        for array_13_idx, array_13_item in enumerate(value):
            lpath = path + '.' + str(array_13_idx)
            # $.'$openapi#schema#ObjectSchema'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#schema#ObjectSchema'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$openapi#schema#ObjectSchema'.examples]")
    return result

# define "json_model_419_may_format" ($.'$openapi#schema#ObjectSchema'.format)
def jm_f_263(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.format
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#schema#ObjectSchema'.format]")
    return result

# define "json_model_419_may_contentEncoding" ($.'$openapi#schema#ObjectSchema'.contentEncoding)
def jm_f_264(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.contentEncoding
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#schema#ObjectSchema'.contentEncoding]")
    return result

# define "json_model_419_may_contentMediaType" ($.'$openapi#schema#ObjectSchema'.contentMediaType)
def jm_f_265(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.contentMediaType
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#schema#ObjectSchema'.contentMediaType]")
    return result

# define "json_model_419_may_contentSchema" ($.'$openapi#schema#ObjectSchema'.contentSchema)
def jm_f_266(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#ObjectSchema'.contentSchema
    result = json_model_420(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$openapi#schema#ObjectSchema'.contentSchema]")
    return result


# define "$openapi" ($.'$openapi')
def json_model_369(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi'
    result = json_model_370(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $OpenAPI at {path} [$.'$openapi']")
    return result


# object $.'$openapi#OpenAPI'.webhooks
def jm_f_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#OpenAPI'.webhooks]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#OpenAPI'.webhooks.''
        # $.'$openapi#OpenAPI'.webhooks.''.'|'.0
        result = json_model_378(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $PathItem at {lpath} [$.'$openapi#OpenAPI'.webhooks.''.'|'.0]")
        if not result:
            # $.'$openapi#OpenAPI'.webhooks.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#OpenAPI'.webhooks.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#OpenAPI'.webhooks.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#OpenAPI'.webhooks.'']")
            return False
    return True


# object $.'$openapi#OpenAPI'
def json_model_370(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#OpenAPI']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_370_must:  # must
            must_count += 1
            if not json_model_370_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#OpenAPI'.{prop}]")
                return False
        elif prop in json_model_370_may:  # may
            if not json_model_370_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#OpenAPI'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#OpenAPI'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#OpenAPI'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#OpenAPI']")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#OpenAPI']")
    return result




# object $.'$openapi#Info'
def json_model_371(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Info']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_371_must:  # must
            must_count += 1
            if not json_model_371_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#Info'.{prop}]")
                return False
        elif prop in json_model_371_may:  # may
            if not json_model_371_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Info'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Info'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Info'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Info']")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#Info']")
    return result




# object $.'$openapi#Contact'
def json_model_372(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Contact']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_372_may:  # may
            if not json_model_372_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Contact'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Contact'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Contact'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Contact']")
            return False
    return True




# object $.'$openapi#License'.'|'.0
def jm_obj_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#License'.'|'.0]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in jm_obj_0_must:  # must
            must_count += 1
            if not jm_obj_0_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#License'.'|'.0.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#License'.'|'.0.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#License'.'|'.0.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#License'.'|'.0]")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#License'.'|'.0]")
    return result


# object $.'$openapi#License'.'|'.1
def jm_obj_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#License'.'|'.1]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in jm_obj_1_must:  # must
            must_count += 1
            if not jm_obj_1_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#License'.'|'.1.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#License'.'|'.1.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#License'.'|'.1.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#License'.'|'.1]")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#License'.'|'.1]")
    return result

# define "$openapi#License" ($.'$openapi#License')
def json_model_373(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#License'
    result = isinstance(value, dict)
    if result:
        # $.'$openapi#License'.'|'.0
        result = jm_obj_0(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$openapi#License'.'|'.0]")
        if not result:
            # $.'$openapi#License'.'|'.1
            result = jm_obj_1(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected object at {path} [$.'$openapi#License'.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {path} [$.'$openapi#License'.'|']")
    return result


# object $.'$openapi#Server'.variables
def jm_f_26(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Server'.variables]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Server'.variables.''
        result = json_model_375(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $ServerVariable at {lpath} [$.'$openapi#Server'.variables.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Server'.variables.'']")
            return False
    return True


# object $.'$openapi#Server'
def json_model_374(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Server']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_374_must:  # must
            must_count += 1
            if not json_model_374_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#Server'.{prop}]")
                return False
        elif prop in json_model_374_may:  # may
            if not json_model_374_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Server'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Server'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Server'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Server']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#Server']")
    return result




# object $.'$openapi#ServerVariable'
def json_model_375(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#ServerVariable']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_375_must:  # must
            must_count += 1
            if not json_model_375_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#ServerVariable'.{prop}]")
                return False
        elif prop in json_model_375_may:  # may
            if not json_model_375_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#ServerVariable'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#ServerVariable'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#ServerVariable'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#ServerVariable']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#ServerVariable']")
    return result




# object $.'$openapi#Components'.schemas
def jm_f_30(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Components'.schemas]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Components'.schemas.''
        result = json_model_396(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$openapi#Components'.schemas.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Components'.schemas.'']")
            return False
    return True


# object $.'$openapi#Components'.responses
def jm_f_31(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Components'.responses]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Components'.responses.''
        # $.'$openapi#Components'.responses.''.'|'.0
        result = json_model_387(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Response at {lpath} [$.'$openapi#Components'.responses.''.'|'.0]")
        if not result:
            # $.'$openapi#Components'.responses.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Components'.responses.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Components'.responses.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Components'.responses.'']")
            return False
    return True


# object $.'$openapi#Components'.parameters
def jm_f_32(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Components'.parameters]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Components'.parameters.''
        # $.'$openapi#Components'.parameters.''.'|'.0
        result = json_model_382(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Parameter at {lpath} [$.'$openapi#Components'.parameters.''.'|'.0]")
        if not result:
            # $.'$openapi#Components'.parameters.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Components'.parameters.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Components'.parameters.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Components'.parameters.'']")
            return False
    return True


# object $.'$openapi#Components'.examples
def jm_f_33(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Components'.examples]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Components'.examples.''
        # $.'$openapi#Components'.examples.''.'|'.0
        result = json_model_389(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Example at {lpath} [$.'$openapi#Components'.examples.''.'|'.0]")
        if not result:
            # $.'$openapi#Components'.examples.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Components'.examples.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Components'.examples.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Components'.examples.'']")
            return False
    return True


# object $.'$openapi#Components'.requestBodies
def jm_f_34(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Components'.requestBodies]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Components'.requestBodies.''
        # $.'$openapi#Components'.requestBodies.''.'|'.0
        result = json_model_383(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $RequestBody at {lpath} [$.'$openapi#Components'.requestBodies.''.'|'.0]")
        if not result:
            # $.'$openapi#Components'.requestBodies.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Components'.requestBodies.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Components'.requestBodies.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Components'.requestBodies.'']")
            return False
    return True


# object $.'$openapi#Components'.headers
def jm_f_35(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Components'.headers]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Components'.headers.''
        # $.'$openapi#Components'.headers.''.'|'.0
        result = json_model_392(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Header at {lpath} [$.'$openapi#Components'.headers.''.'|'.0]")
        if not result:
            # $.'$openapi#Components'.headers.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Components'.headers.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Components'.headers.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Components'.headers.'']")
            return False
    return True


# object $.'$openapi#Components'.securitySchemes
def jm_f_36(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Components'.securitySchemes]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Components'.securitySchemes.''
        # $.'$openapi#Components'.securitySchemes.''.'|'.0
        result = json_model_399(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $SecurityScheme at {lpath} [$.'$openapi#Components'.securitySchemes.''.'|'.0]")
        if not result:
            # $.'$openapi#Components'.securitySchemes.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Components'.securitySchemes.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Components'.securitySchemes.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Components'.securitySchemes.'']")
            return False
    return True


# object $.'$openapi#Components'.links
def jm_f_37(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Components'.links]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Components'.links.''
        # $.'$openapi#Components'.links.''.'|'.0
        result = json_model_391(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Link at {lpath} [$.'$openapi#Components'.links.''.'|'.0]")
        if not result:
            # $.'$openapi#Components'.links.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Components'.links.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Components'.links.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Components'.links.'']")
            return False
    return True


# object $.'$openapi#Components'.callbacks
def jm_f_38(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Components'.callbacks]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Components'.callbacks.''
        # $.'$openapi#Components'.callbacks.''.'|'.0
        result = json_model_388(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Callback at {lpath} [$.'$openapi#Components'.callbacks.''.'|'.0]")
        if not result:
            # $.'$openapi#Components'.callbacks.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Components'.callbacks.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Components'.callbacks.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Components'.callbacks.'']")
            return False
    return True


# object $.'$openapi#Components'.pathItems
def jm_f_39(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Components'.pathItems]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Components'.pathItems.''
        # $.'$openapi#Components'.pathItems.''.'|'.0
        result = json_model_378(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $PathItem at {lpath} [$.'$openapi#Components'.pathItems.''.'|'.0]")
        if not result:
            # $.'$openapi#Components'.pathItems.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Components'.pathItems.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Components'.pathItems.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Components'.pathItems.'']")
            return False
    return True


# object $.'$openapi#Components'
def json_model_376(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Components']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_376_may:  # may
            if not json_model_376_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Components'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Components'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Components'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Components']")
            return False
    return True




# object $.'$openapi#Paths'
def json_model_377(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Paths']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if jm_re_1(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^//
            # $.'$openapi#Paths'.'/^//'
            result = json_model_378(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $PathItem at {lpath} [$.'$openapi#Paths'.'/^//']")
            if not result:
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Paths'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Paths'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Paths']")
            return False
    return True




# object $.'$openapi#PathItem'.parameters
def jm_f_51(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#PathItem'.parameters]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#PathItem'.parameters.''
        # $.'$openapi#PathItem'.parameters.''.'|'.0
        result = json_model_382(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Parameter at {lpath} [$.'$openapi#PathItem'.parameters.''.'|'.0]")
        if not result:
            # $.'$openapi#PathItem'.parameters.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#PathItem'.parameters.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#PathItem'.parameters.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#PathItem'.parameters.'']")
            return False
    return True


# object $.'$openapi#PathItem'
def json_model_378(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#PathItem']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_378_may:  # may
            if not json_model_378_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#PathItem'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#PathItem'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#PathItem'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#PathItem']")
            return False
    return True




# object $.'$openapi#Operation'.parameters
def jm_f_57(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Operation'.parameters]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Operation'.parameters.''
        # $.'$openapi#Operation'.parameters.''.'|'.0
        result = json_model_382(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Parameter at {lpath} [$.'$openapi#Operation'.parameters.''.'|'.0]")
        if not result:
            # $.'$openapi#Operation'.parameters.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Operation'.parameters.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Operation'.parameters.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Operation'.parameters.'']")
            return False
    return True


# object $.'$openapi#Operation'.requestBody
def jm_f_58(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Operation'.requestBody]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Operation'.requestBody.''
        # $.'$openapi#Operation'.requestBody.''.'|'.0
        result = json_model_383(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $RequestBody at {lpath} [$.'$openapi#Operation'.requestBody.''.'|'.0]")
        if not result:
            # $.'$openapi#Operation'.requestBody.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Operation'.requestBody.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Operation'.requestBody.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Operation'.requestBody.'']")
            return False
    return True


# object $.'$openapi#Operation'.callbacks
def jm_f_60(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Operation'.callbacks]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Operation'.callbacks.''
        # $.'$openapi#Operation'.callbacks.''.'|'.0
        result = json_model_388(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Callback at {lpath} [$.'$openapi#Operation'.callbacks.''.'|'.0]")
        if not result:
            # $.'$openapi#Operation'.callbacks.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Operation'.callbacks.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Operation'.callbacks.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Operation'.callbacks.'']")
            return False
    return True


# object $.'$openapi#Operation'
def json_model_379(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Operation']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_379_may:  # may
            if not json_model_379_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Operation'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Operation'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Operation'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Operation']")
            return False
    return True




# object $.'$openapi#ExternalDocumentation'
def json_model_380(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#ExternalDocumentation']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_380_must:  # must
            must_count += 1
            if not json_model_380_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#ExternalDocumentation'.{prop}]")
                return False
        elif prop in json_model_380_may:  # may
            if not json_model_380_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#ExternalDocumentation'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#ExternalDocumentation'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#ExternalDocumentation'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#ExternalDocumentation']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#ExternalDocumentation']")
    return result




# object $.'$openapi#Parameter'.examples
def jm_f_77(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Parameter'.examples]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Parameter'.examples.''
        # $.'$openapi#Parameter'.examples.''.'|'.0
        result = json_model_389(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Example at {lpath} [$.'$openapi#Parameter'.examples.''.'|'.0]")
        if not result:
            # $.'$openapi#Parameter'.examples.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Parameter'.examples.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Parameter'.examples.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Parameter'.examples.'']")
            return False
    return True


# object $.'$openapi#Parameter'.content
def jm_f_78(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Parameter'.content]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Parameter'.content.''
        result = json_model_384(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $MediaType at {lpath} [$.'$openapi#Parameter'.content.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Parameter'.content.'']")
            return False
    return True


# object $.'$openapi#Parameter'
def json_model_382(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Parameter']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_382_must:  # must
            must_count += 1
            if not json_model_382_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#Parameter'.{prop}]")
                return False
        elif prop in json_model_382_may:  # may
            if not json_model_382_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Parameter'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Parameter'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Parameter'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Parameter']")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#Parameter']")
    return result




# object $.'$openapi#RequestBody'.content
def jm_f_80(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#RequestBody'.content]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#RequestBody'.content.''
        result = json_model_384(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $MediaType at {lpath} [$.'$openapi#RequestBody'.content.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#RequestBody'.content.'']")
            return False
    return True


# object $.'$openapi#RequestBody'
def json_model_383(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#RequestBody']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_383_may:  # may
            if not json_model_383_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#RequestBody'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#RequestBody'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#RequestBody'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#RequestBody']")
            return False
    return True




# object $.'$openapi#MediaType'.examples
def jm_f_84(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#MediaType'.examples]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#MediaType'.examples.''
        # $.'$openapi#MediaType'.examples.''.'|'.0
        result = json_model_389(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Example at {lpath} [$.'$openapi#MediaType'.examples.''.'|'.0]")
        if not result:
            # $.'$openapi#MediaType'.examples.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#MediaType'.examples.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#MediaType'.examples.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#MediaType'.examples.'']")
            return False
    return True


# object $.'$openapi#MediaType'.encoding
def jm_f_85(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#MediaType'.encoding]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#MediaType'.encoding.''
        result = json_model_385(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Encoding at {lpath} [$.'$openapi#MediaType'.encoding.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#MediaType'.encoding.'']")
            return False
    return True


# object $.'$openapi#MediaType'
def json_model_384(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#MediaType']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_384_may:  # may
            if not json_model_384_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#MediaType'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#MediaType'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#MediaType'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#MediaType']")
            return False
    return True




# object $.'$openapi#Encoding'.headers
def jm_f_87(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Encoding'.headers]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Encoding'.headers.''
        # $.'$openapi#Encoding'.headers.''.'|'.0
        result = json_model_392(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Header at {lpath} [$.'$openapi#Encoding'.headers.''.'|'.0]")
        if not result:
            # $.'$openapi#Encoding'.headers.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Encoding'.headers.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Encoding'.headers.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Encoding'.headers.'']")
            return False
    return True


# object $.'$openapi#Encoding'
def json_model_385(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Encoding']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_385_may:  # may
            if not json_model_385_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Encoding'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Encoding'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Encoding'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Encoding']")
            return False
    return True




# object $.'$openapi#Responses'
def json_model_386(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Responses']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_386_may:  # may
            if not json_model_386_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Responses'.{prop}]")
                return False
        elif jm_re_2(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^[1-5](\d\d|XX)$/
            # $.'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'
            # $.'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.0
            result = json_model_387(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Response at {lpath} [$.'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.0]")
            if not result:
                # $.'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.1
                result = json_model_394(val, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.1]")
            if not result:
                rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Responses'.'/^[1-5](\\d\\d|XX)$/'.'|']")
            if not result:
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Responses'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Responses'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Responses']")
            return False
    return True




# object $.'$openapi#Response'.headers
def jm_f_93(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Response'.headers]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Response'.headers.''
        # $.'$openapi#Response'.headers.''.'|'.0
        result = json_model_392(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Header at {lpath} [$.'$openapi#Response'.headers.''.'|'.0]")
        if not result:
            # $.'$openapi#Response'.headers.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Response'.headers.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Response'.headers.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Response'.headers.'']")
            return False
    return True


# object $.'$openapi#Response'.content
def jm_f_94(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Response'.content]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Response'.content.''
        result = json_model_384(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $MediaType at {lpath} [$.'$openapi#Response'.content.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Response'.content.'']")
            return False
    return True


# object $.'$openapi#Response'.links
def jm_f_95(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Response'.links]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Response'.links.''
        # $.'$openapi#Response'.links.''.'|'.0
        result = json_model_391(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Link at {lpath} [$.'$openapi#Response'.links.''.'|'.0]")
        if not result:
            # $.'$openapi#Response'.links.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Response'.links.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Response'.links.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Response'.links.'']")
            return False
    return True


# object $.'$openapi#Response'
def json_model_387(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Response']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_387_may:  # may
            if not json_model_387_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Response'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Response'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Response'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Response']")
            return False
    return True




# object $.'$openapi#Callback'
def json_model_388(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Callback']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if json_model_390(prop, path, rep) or _rep(f"prop {prop} does not match $Expression at {path}", rep):  # $Expression
            # $.'$openapi#Callback'.'$Expression'
            # $.'$openapi#Callback'.'$Expression'.'|'.0
            result = json_model_378(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $PathItem at {lpath} [$.'$openapi#Callback'.'$Expression'.'|'.0]")
            if not result:
                # $.'$openapi#Callback'.'$Expression'.'|'.1
                result = json_model_394(val, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#Callback'.'$Expression'.'|'.1]")
            if not result:
                rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#Callback'.'$Expression'.'|']")
            if not result:
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Callback'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Callback'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Callback']")
            return False
    return True




# object $.'$openapi#Example'
def json_model_389(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Example']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_389_may:  # may
            if not json_model_389_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Example'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Example'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Example'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Example']")
            return False
    return True



# define "$openapi#Expression" ($.'$openapi#Expression')
def json_model_390(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Expression'
    # "/\\{.*\\}/"
    result = isinstance(value, str) and jm_re_3(value) is not None or _rep(f"does not match FESC at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected REGEX at {path} [$.'$openapi#Expression']")
    return result


# object $.'$openapi#Link'.'|'.0.parameters
def jm_f_101(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Link'.'|'.0.parameters]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Link'.'|'.0.parameters.''
        result = True or _rep(f"invalid $ANY at {path}", rep)
        if not result:
            rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Link'.'|'.0.parameters.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Link'.'|'.0.parameters.'']")
            return False
    return True


# object $.'$openapi#Link'.'|'.0
def jm_obj_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Link'.'|'.0]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in jm_obj_2_must:  # must
            must_count += 1
            if not jm_obj_2_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#Link'.'|'.0.{prop}]")
                return False
        elif prop in jm_obj_2_may:  # may
            if not jm_obj_2_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Link'.'|'.0.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Link'.'|'.0.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Link'.'|'.0.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Link'.'|'.0]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#Link'.'|'.0]")
    return result


# object $.'$openapi#Link'.'|'.1.parameters
def jm_f_106(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Link'.'|'.1.parameters]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Link'.'|'.1.parameters.''
        result = True or _rep(f"invalid $ANY at {path}", rep)
        if not result:
            rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Link'.'|'.1.parameters.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Link'.'|'.1.parameters.'']")
            return False
    return True


# object $.'$openapi#Link'.'|'.1
def jm_obj_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Link'.'|'.1]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in jm_obj_3_must:  # must
            must_count += 1
            if not jm_obj_3_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#Link'.'|'.1.{prop}]")
                return False
        elif prop in jm_obj_3_may:  # may
            if not jm_obj_3_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Link'.'|'.1.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Link'.'|'.1.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Link'.'|'.1.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Link'.'|'.1]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#Link'.'|'.1]")
    return result

# define "$openapi#Link" ($.'$openapi#Link')
def json_model_391(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Link'
    result = isinstance(value, dict)
    if result:
        # $.'$openapi#Link'.'|'.0
        result = jm_obj_2(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$openapi#Link'.'|'.0]")
        if not result:
            # $.'$openapi#Link'.'|'.1
            result = jm_obj_3(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected object at {path} [$.'$openapi#Link'.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {path} [$.'$openapi#Link'.'|']")
    return result

# define "$openapi#Header" ($.'$openapi#Header')
def json_model_392(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#Header'
    result = json_model_381(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $parameterShare at {path} [$.'$openapi#Header']")
    return result


# object $.'$openapi#parameterShare'.examples
def jm_f_119(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#parameterShare'.examples]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#parameterShare'.examples.''
        # $.'$openapi#parameterShare'.examples.''.'|'.0
        result = json_model_389(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Example at {lpath} [$.'$openapi#parameterShare'.examples.''.'|'.0]")
        if not result:
            # $.'$openapi#parameterShare'.examples.''.'|'.1
            result = json_model_394(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$openapi#parameterShare'.examples.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$openapi#parameterShare'.examples.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#parameterShare'.examples.'']")
            return False
    return True


# object $.'$openapi#parameterShare'.content
def jm_f_120(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#parameterShare'.content]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#parameterShare'.content.''
        result = json_model_384(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $MediaType at {lpath} [$.'$openapi#parameterShare'.content.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#parameterShare'.content.'']")
            return False
    return True


# object $.'$openapi#parameterShare'
def json_model_381(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#parameterShare']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_381_may:  # may
            if not json_model_381_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#parameterShare'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#parameterShare'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#parameterShare'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#parameterShare']")
            return False
    return True




# object $.'$openapi#Tag'
def json_model_393(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Tag']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_393_must:  # must
            must_count += 1
            if not json_model_393_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#Tag'.{prop}]")
                return False
        elif prop in json_model_393_may:  # may
            if not json_model_393_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Tag'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Tag'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Tag'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Tag']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#Tag']")
    return result




# object $.'$openapi#Reference'
def json_model_394(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Reference']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_394_must:  # must
            must_count += 1
            if not json_model_394_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#Reference'.{prop}]")
                return False
        elif prop in json_model_394_may:  # may
            if not json_model_394_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Reference'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Reference']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#Reference']")
    return result




# object $.'$openapi#Schema'.'$vocabulary'
def jm_f_133(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Schema'.'$vocabulary']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if is_valid_url(prop, path, rep) or _rep(f"invalid $URL at {path}", rep) or _rep(f"prop {prop} does not match $URL at {path}", rep):  # $URL
            # $.'$openapi#Schema'.'$vocabulary'.'$URL'
            result = isinstance(val, bool)
            if not result:
                rep is None or rep.append(f"not a bool at {lpath} [$.'$openapi#Schema'.'$vocabulary'.'$URL']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Schema'.'$vocabulary']")
            return False
    return True


# object $.'$openapi#Schema'.'$defs'
def jm_f_135(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Schema'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Schema'.'$defs'.''
        result = json_model_420(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $openapi#schema#Schema at {lpath} [$.'$openapi#Schema'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Schema'.'$defs'.'']")
            return False
    return True


# object $.'$openapi#Schema'.properties
def jm_f_140(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Schema'.properties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Schema'.properties.''
        result = json_model_420(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $openapi#schema#Schema at {lpath} [$.'$openapi#Schema'.properties.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Schema'.properties.'']")
            return False
    return True


# object $.'$openapi#Schema'.patternProperties
def jm_f_141(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Schema'.patternProperties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if is_valid_re(prop, path, rep) or _rep(f"invalid $REGEX at {path}", rep) or _rep(f"prop {prop} does not match $REGEX at {path}", rep):  # $REGEX
            # $.'$openapi#Schema'.patternProperties.'$REGEX'
            result = json_model_420(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $openapi#schema#Schema at {lpath} [$.'$openapi#Schema'.patternProperties.'$REGEX']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Schema'.patternProperties]")
            return False
    return True


# object $.'$openapi#Schema'.dependentSchemas
def jm_f_142(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Schema'.dependentSchemas]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Schema'.dependentSchemas.''
        result = json_model_420(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $openapi#schema#Schema at {lpath} [$.'$openapi#Schema'.dependentSchemas.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Schema'.dependentSchemas.'']")
            return False
    return True


# object $.'$openapi#Schema'.dependentRequired
def jm_f_172(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Schema'.dependentRequired]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Schema'.dependentRequired.''
        result = json_model_414(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $openapi#schema#stringArray at {lpath} [$.'$openapi#Schema'.dependentRequired.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Schema'.dependentRequired.'']")
            return False
    return True


# object $.'$openapi#Schema'
def json_model_396(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Schema']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_396_may:  # may
            if not json_model_396_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Schema'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Schema']")
            return False
    return True




# object $.'$openapi#Discriminator'.mapping
def jm_f_188(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Discriminator'.mapping]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#Discriminator'.mapping.''
        result = isinstance(val, str)
        if not result:
            rep is None or rep.append(f"not an expected string at {lpath} [$.'$openapi#Discriminator'.mapping.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#Discriminator'.mapping.'']")
            return False
    return True


# object $.'$openapi#Discriminator'
def json_model_397(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#Discriminator']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_397_must:  # must
            must_count += 1
            if not json_model_397_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#Discriminator'.{prop}]")
                return False
        elif prop in json_model_397_may:  # may
            if not json_model_397_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#Discriminator'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#Discriminator'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#Discriminator'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#Discriminator']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#Discriminator']")
    return result




# object $.'$openapi#XML'
def json_model_398(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#XML']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_398_may:  # may
            if not json_model_398_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#XML'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#XML'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#XML'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#XML']")
            return False
    return True




# object $.'$openapi#SecurityScheme'
def json_model_399(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#SecurityScheme']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_399_must:  # must
            must_count += 1
            if not json_model_399_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#SecurityScheme'.{prop}]")
                return False
        elif prop in json_model_399_may:  # may
            if not json_model_399_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#SecurityScheme'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#SecurityScheme'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#SecurityScheme'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#SecurityScheme']")
            return False
    result = must_count == 6
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#SecurityScheme']")
    return result




# object $.'$openapi#OAuthFlows'
def json_model_400(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#OAuthFlows']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_400_may:  # may
            if not json_model_400_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#OAuthFlows'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#OAuthFlows'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#OAuthFlows'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#OAuthFlows']")
            return False
    return True




# object $.'$openapi#OAuthFlow'.scopes
def jm_f_208(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#OAuthFlow'.scopes]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#OAuthFlow'.scopes.''
        result = isinstance(val, str)
        if not result:
            rep is None or rep.append(f"not an expected string at {lpath} [$.'$openapi#OAuthFlow'.scopes.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#OAuthFlow'.scopes.'']")
            return False
    return True


# object $.'$openapi#OAuthFlow'
def json_model_401(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#OAuthFlow']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_401_must:  # must
            must_count += 1
            if not json_model_401_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$openapi#OAuthFlow'.{prop}]")
                return False
        elif prop in json_model_401_may:  # may
            if not json_model_401_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#OAuthFlow'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$openapi#OAuthFlow'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$openapi#OAuthFlow'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#OAuthFlow']")
            return False
    result = must_count == 3
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$openapi#OAuthFlow']")
    return result




# object $.'$openapi#SecurityRequirement'
def json_model_402(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#SecurityRequirement']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#SecurityRequirement'.''
        result = isinstance(val, list)
        if result:
            for array_8_idx, array_8_item in enumerate(val):
                lpath = lpath + '.' + str(array_8_idx)
                # $.'$openapi#SecurityRequirement'.''.0
                result = isinstance(array_8_item, str)
                if not result:
                    rep is None or rep.append(f"not an expected string at {lpath} [$.'$openapi#SecurityRequirement'.''.0]")
                if not result:
                    break
        if not result:
            rep is None or rep.append(f"not array or unexpected array at {lpath} [$.'$openapi#SecurityRequirement'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#SecurityRequirement'.'']")
            return False
    return True



# define "$openapi#schema#URI-REFERENCE" ($.'$openapi#schema#URI-REFERENCE')
def json_model_405(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#URI-REFERENCE'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$openapi#schema#URI-REFERENCE']")
    return result

# define "$openapi#schema#simpleTypes" ($.'$openapi#schema#simpleTypes')
def json_model_412(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#simpleTypes'
    result = not isinstance(value, (list, dict)) and value in {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$openapi#schema#simpleTypes'.'|']")
    return result

# define "$openapi#schema#simpleTypesArray" ($.'$openapi#schema#simpleTypesArray')
def json_model_413(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#simpleTypesArray'
    # $.'$openapi#schema#simpleTypesArray'.'@'
    result = isinstance(value, list)
    if result:
        for array_9_idx, array_9_item in enumerate(value):
            lpath = path + '.' + str(array_9_idx)
            # $.'$openapi#schema#simpleTypesArray'.'@'.0
            result = json_model_412(array_9_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $simpleTypes at {lpath} [$.'$openapi#schema#simpleTypesArray'.'@'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$openapi#schema#simpleTypesArray'.'@']")
    result &= len(set(value)) == len(value)
    result &= len(value) >= 1
    if not result:
        rep is None or rep.append(f"invalid type or constraints at {path} [$.'$openapi#schema#simpleTypesArray']")
    return result

# define "$openapi#schema#stringArray" ($.'$openapi#schema#stringArray')
def json_model_414(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#stringArray'
    # $.'$openapi#schema#stringArray'.'@'
    result = isinstance(value, list)
    if result:
        for array_10_idx, array_10_item in enumerate(value):
            lpath = path + '.' + str(array_10_idx)
            # $.'$openapi#schema#stringArray'.'@'.0
            result = isinstance(array_10_item, str)
            if not result:
                rep is None or rep.append(f"not an expected string at {lpath} [$.'$openapi#schema#stringArray'.'@'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$openapi#schema#stringArray'.'@']")
    result &= len(set(value)) == len(value)
    if not result:
        rep is None or rep.append(f"invalid type or constraints at {path} [$.'$openapi#schema#stringArray']")
    return result

# define "$openapi#schema#nonNegativeInteger" ($.'$openapi#schema#nonNegativeInteger')
def json_model_415(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#nonNegativeInteger'
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$openapi#schema#nonNegativeInteger']")
    return result

# define "$openapi#schema#schemaArray" ($.'$openapi#schema#schemaArray')
def json_model_417(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#schemaArray'
    # $.'$openapi#schema#schemaArray'.'@'
    result = isinstance(value, list)
    if result:
        for array_11_idx, array_11_item in enumerate(value):
            lpath = path + '.' + str(array_11_idx)
            # $.'$openapi#schema#schemaArray'.'@'.0
            result = json_model_420(array_11_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$openapi#schema#schemaArray'.'@'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$openapi#schema#schemaArray'.'@']")
    result &= len(value) >= 1
    if not result:
        rep is None or rep.append(f"invalid type or constraints at {path} [$.'$openapi#schema#schemaArray']")
    return result

# define "$openapi#schema#Schema" ($.'$openapi#schema#Schema')
def json_model_420(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$openapi#schema#Schema'
    # $.'$openapi#schema#Schema'.'|'.0
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$openapi#schema#Schema'.'|'.0]")
    if not result:
        # $.'$openapi#schema#Schema'.'|'.1
        result = json_model_419(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $ObjectSchema at {path} [$.'$openapi#schema#Schema'.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$openapi#schema#Schema'.'|']")
    return result


# object $.'$openapi#schema#ObjectSchema'.'$vocabulary'
def jm_f_216(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#schema#ObjectSchema'.'$vocabulary']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if is_valid_url(prop, path, rep) or _rep(f"invalid $URL at {path}", rep) or _rep(f"prop {prop} does not match $URL at {path}", rep):  # $URL
            # $.'$openapi#schema#ObjectSchema'.'$vocabulary'.'$URL'
            result = isinstance(val, bool)
            if not result:
                rep is None or rep.append(f"not a bool at {lpath} [$.'$openapi#schema#ObjectSchema'.'$vocabulary'.'$URL']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#schema#ObjectSchema'.'$vocabulary']")
            return False
    return True


# object $.'$openapi#schema#ObjectSchema'.'$defs'
def jm_f_218(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#schema#ObjectSchema'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#schema#ObjectSchema'.'$defs'.''
        result = json_model_420(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$openapi#schema#ObjectSchema'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#schema#ObjectSchema'.'$defs'.'']")
            return False
    return True


# object $.'$openapi#schema#ObjectSchema'.properties
def jm_f_223(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#schema#ObjectSchema'.properties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#schema#ObjectSchema'.properties.''
        result = json_model_420(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$openapi#schema#ObjectSchema'.properties.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#schema#ObjectSchema'.properties.'']")
            return False
    return True


# object $.'$openapi#schema#ObjectSchema'.patternProperties
def jm_f_224(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#schema#ObjectSchema'.patternProperties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if is_valid_re(prop, path, rep) or _rep(f"invalid $REGEX at {path}", rep) or _rep(f"prop {prop} does not match $REGEX at {path}", rep):  # $REGEX
            # $.'$openapi#schema#ObjectSchema'.patternProperties.'$REGEX'
            result = json_model_420(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$openapi#schema#ObjectSchema'.patternProperties.'$REGEX']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#schema#ObjectSchema'.patternProperties]")
            return False
    return True


# object $.'$openapi#schema#ObjectSchema'.dependentSchemas
def jm_f_225(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#schema#ObjectSchema'.dependentSchemas]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#schema#ObjectSchema'.dependentSchemas.''
        result = json_model_420(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$openapi#schema#ObjectSchema'.dependentSchemas.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#schema#ObjectSchema'.dependentSchemas.'']")
            return False
    return True


# object $.'$openapi#schema#ObjectSchema'.dependentRequired
def jm_f_255(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#schema#ObjectSchema'.dependentRequired]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$openapi#schema#ObjectSchema'.dependentRequired.''
        result = json_model_414(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $stringArray at {lpath} [$.'$openapi#schema#ObjectSchema'.dependentRequired.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$openapi#schema#ObjectSchema'.dependentRequired.'']")
            return False
    return True


# object $.'$openapi#schema#ObjectSchema'
def json_model_419(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$openapi#schema#ObjectSchema']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_419_may:  # may
            if not json_model_419_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$openapi#schema#ObjectSchema'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$openapi#schema#ObjectSchema']")
            return False
    return True



# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = json_model_369(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $openapi at {path} [$]")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
json_model_370_must = {
    "openapi": jm_f_0,
    "info": jm_f_1,
}
json_model_370_may = {
    "jsonSchemaDialect": jm_f_2,
    "servers": jm_f_3,
    "paths": jm_f_4,
    "webhooks": jm_f_5,
    "component": jm_f_6,
    "security": jm_f_7,
    "tags": jm_f_8,
    "externalDocs": jm_f_9,
}
json_model_371_must = {
    "title": jm_f_10,
    "version": jm_f_11,
}
json_model_371_may = {
    "summary": jm_f_12,
    "description": jm_f_13,
    "termsOfService": jm_f_14,
    "contact": jm_f_15,
    "license": jm_f_16,
}
json_model_372_may = {
    "name": jm_f_17,
    "url": jm_f_18,
    "email": jm_f_19,
}
jm_obj_0_must = {
    "name": jm_f_20,
    "identifier": jm_f_21,
}
jm_obj_1_must = {
    "name": jm_f_22,
    "url": jm_f_23,
}
json_model_374_must = {
    "url": jm_f_24,
}
json_model_374_may = {
    "description": jm_f_25,
    "variables": jm_f_26,
}
json_model_375_must = {
    "default": jm_f_27,
}
json_model_375_may = {
    "enum": jm_f_28,
    "description": jm_f_29,
}
json_model_376_may = {
    "schemas": jm_f_30,
    "responses": jm_f_31,
    "parameters": jm_f_32,
    "examples": jm_f_33,
    "requestBodies": jm_f_34,
    "headers": jm_f_35,
    "securitySchemes": jm_f_36,
    "links": jm_f_37,
    "callbacks": jm_f_38,
    "pathItems": jm_f_39,
}
json_model_378_may = {
    "$ref": jm_f_40,
    "summary": jm_f_41,
    "description": jm_f_42,
    "get": jm_f_43,
    "put": jm_f_44,
    "post": jm_f_45,
    "options": jm_f_46,
    "head": jm_f_47,
    "patch": jm_f_48,
    "trace": jm_f_49,
    "servers": jm_f_50,
    "parameters": jm_f_51,
}
json_model_379_may = {
    "tags": jm_f_52,
    "summary": jm_f_53,
    "description": jm_f_54,
    "externalDocs": jm_f_55,
    "operationId": jm_f_56,
    "parameters": jm_f_57,
    "requestBody": jm_f_58,
    "responses": jm_f_59,
    "callbacks": jm_f_60,
    "deprecated": jm_f_61,
    "security": jm_f_62,
    "servers": jm_f_63,
}
json_model_380_must = {
    "url": jm_f_64,
}
json_model_380_may = {
    "description": jm_f_65,
}
json_model_382_must = {
    "name": jm_f_66,
    "in": jm_f_67,
}
json_model_382_may = {
    "description": jm_f_68,
    "required": jm_f_69,
    "deprecated": jm_f_70,
    "allowEmptyValue": jm_f_71,
    "style": jm_f_72,
    "explode": jm_f_73,
    "allowReserved": jm_f_74,
    "schema": jm_f_75,
    "example": jm_f_76,
    "examples": jm_f_77,
    "content": jm_f_78,
}
json_model_383_may = {
    "description": jm_f_79,
    "content": jm_f_80,
    "required": jm_f_81,
}
json_model_384_may = {
    "schema": jm_f_82,
    "example": jm_f_83,
    "examples": jm_f_84,
    "encoding": jm_f_85,
}
json_model_385_may = {
    "contentType": jm_f_86,
    "headers": jm_f_87,
    "style": jm_f_88,
    "explode": jm_f_89,
    "allowReserved": jm_f_90,
}
json_model_386_may = {
    "default": jm_f_91,
}
json_model_387_may = {
    "description": jm_f_92,
    "headers": jm_f_93,
    "content": jm_f_94,
    "links": jm_f_95,
}
json_model_389_may = {
    "summary": jm_f_96,
    "description": jm_f_97,
    "value": jm_f_98,
    "externalValue": jm_f_99,
}
jm_obj_2_must = {
    "operationRef": jm_f_100,
}
jm_obj_2_may = {
    "parameters": jm_f_101,
    "requestBody": jm_f_102,
    "description": jm_f_103,
    "server": jm_f_104,
}
jm_obj_3_must = {
    "operationId": jm_f_105,
}
jm_obj_3_may = {
    "parameters": jm_f_106,
    "requestBody": jm_f_107,
    "description": jm_f_108,
    "server": jm_f_109,
}
json_model_381_may = {
    "description": jm_f_110,
    "required": jm_f_111,
    "deprecated": jm_f_112,
    "allowEmptyValue": jm_f_113,
    "style": jm_f_114,
    "explode": jm_f_115,
    "allowReserved": jm_f_116,
    "schema": jm_f_117,
    "example": jm_f_118,
    "examples": jm_f_119,
    "content": jm_f_120,
}
json_model_393_must = {
    "name": jm_f_121,
}
json_model_393_may = {
    "description": jm_f_122,
    "externalDocs": jm_f_123,
}
json_model_394_must = {
    "$ref": jm_f_124,
}
json_model_394_may = {
    "summary": jm_f_125,
    "description": jm_f_126,
}
json_model_396_may = {
    "$id": jm_f_127,
    "$schema": jm_f_128,
    "$ref": jm_f_129,
    "$anchor": jm_f_130,
    "$dynamicRef": jm_f_131,
    "$dynamicAnchor": jm_f_132,
    "$vocabulary": jm_f_133,
    "$comment": jm_f_134,
    "$defs": jm_f_135,
    "prefixItems": jm_f_136,
    "items": jm_f_137,
    "contains": jm_f_138,
    "additionalProperties": jm_f_139,
    "properties": jm_f_140,
    "patternProperties": jm_f_141,
    "dependentSchemas": jm_f_142,
    "propertyNames": jm_f_143,
    "if": jm_f_144,
    "then": jm_f_145,
    "else": jm_f_146,
    "not": jm_f_147,
    "allOf": jm_f_148,
    "anyOf": jm_f_149,
    "oneOf": jm_f_150,
    "unevaluatedItems": jm_f_151,
    "unevaluatedProperties": jm_f_152,
    "type": jm_f_153,
    "const": jm_f_154,
    "enum": jm_f_155,
    "multipleOf": jm_f_156,
    "maximum": jm_f_157,
    "exclusiveMaximum": jm_f_158,
    "minimum": jm_f_159,
    "exclusiveMinimum": jm_f_160,
    "maxLength": jm_f_161,
    "minLength": jm_f_162,
    "pattern": jm_f_163,
    "maxItems": jm_f_164,
    "minItems": jm_f_165,
    "uniqueItems": jm_f_166,
    "maxContains": jm_f_167,
    "minContains": jm_f_168,
    "maxProperties": jm_f_169,
    "minProperties": jm_f_170,
    "required": jm_f_171,
    "dependentRequired": jm_f_172,
    "title": jm_f_173,
    "description": jm_f_174,
    "default": jm_f_175,
    "deprecated": jm_f_176,
    "readOnly": jm_f_177,
    "writeOnly": jm_f_178,
    "examples": jm_f_179,
    "format": jm_f_180,
    "contentEncoding": jm_f_181,
    "contentMediaType": jm_f_182,
    "contentSchema": jm_f_183,
    "discriminator": jm_f_184,
    "externalDocs": jm_f_185,
    "xml": jm_f_186,
}
json_model_397_must = {
    "propertyName": jm_f_187,
}
json_model_397_may = {
    "mapping": jm_f_188,
}
json_model_398_may = {
    "name": jm_f_189,
    "namespace": jm_f_190,
    "prefix": jm_f_191,
    "attribute": jm_f_192,
    "wrapped": jm_f_193,
}
json_model_399_must = {
    "type": jm_f_194,
    "name": jm_f_195,
    "in": jm_f_196,
    "scheme": jm_f_197,
    "flows": jm_f_198,
    "openIdConnectUrl": jm_f_199,
}
json_model_399_may = {
    "description": jm_f_200,
    "bearerFormat": jm_f_201,
}
json_model_400_may = {
    "implicit": jm_f_202,
    "password": jm_f_203,
    "clientCredentials": jm_f_204,
    "authorizationCode": jm_f_205,
}
json_model_401_must = {
    "authorizationUrl": jm_f_206,
    "tokenUrl": jm_f_207,
    "scopes": jm_f_208,
}
json_model_401_may = {
    "refreshUrl": jm_f_209,
}
json_model_419_may = {
    "$id": jm_f_210,
    "$schema": jm_f_211,
    "$ref": jm_f_212,
    "$anchor": jm_f_213,
    "$dynamicRef": jm_f_214,
    "$dynamicAnchor": jm_f_215,
    "$vocabulary": jm_f_216,
    "$comment": jm_f_217,
    "$defs": jm_f_218,
    "prefixItems": jm_f_219,
    "items": jm_f_220,
    "contains": jm_f_221,
    "additionalProperties": jm_f_222,
    "properties": jm_f_223,
    "patternProperties": jm_f_224,
    "dependentSchemas": jm_f_225,
    "propertyNames": jm_f_226,
    "if": jm_f_227,
    "then": jm_f_228,
    "else": jm_f_229,
    "not": jm_f_230,
    "allOf": jm_f_231,
    "anyOf": jm_f_232,
    "oneOf": jm_f_233,
    "unevaluatedItems": jm_f_234,
    "unevaluatedProperties": jm_f_235,
    "type": jm_f_236,
    "const": jm_f_237,
    "enum": jm_f_238,
    "multipleOf": jm_f_239,
    "maximum": jm_f_240,
    "exclusiveMaximum": jm_f_241,
    "minimum": jm_f_242,
    "exclusiveMinimum": jm_f_243,
    "maxLength": jm_f_244,
    "minLength": jm_f_245,
    "pattern": jm_f_246,
    "maxItems": jm_f_247,
    "minItems": jm_f_248,
    "uniqueItems": jm_f_249,
    "maxContains": jm_f_250,
    "minContains": jm_f_251,
    "maxProperties": jm_f_252,
    "minProperties": jm_f_253,
    "required": jm_f_254,
    "dependentRequired": jm_f_255,
    "title": jm_f_256,
    "description": jm_f_257,
    "default": jm_f_258,
    "deprecated": jm_f_259,
    "readOnly": jm_f_260,
    "writeOnly": jm_f_261,
    "examples": jm_f_262,
    "format": jm_f_263,
    "contentEncoding": jm_f_264,
    "contentMediaType": jm_f_265,
    "contentSchema": jm_f_266,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

