#! /bin/env python
#
# Model: ./json-model.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

# regex "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
_jm_re_0 = re.compile("^((file|https?)://.+|\\./.*|\\.\\./.*)$").search
json_model_6_may: PropMap
json_model_8_must: PropMap
json_model_8_may: PropMap
# regex "/^(<=|>=|<|>|\u2265|\u2264)$/"
_jm_re_1 = re.compile("^(<=|>=|<|>|\u2265|\u2264)$").search
# regex "/^(=|!=|\u2260)$/"
_jm_re_2 = re.compile("^(=|!=|\u2260)$").search
json_model_9_must: PropMap
json_model_10_must: PropMap
json_model_11_must: PropMap
json_model_12_must: PropMap
# regex "/^[@|&^+/*]$/"
_jm_re_3 = re.compile("^[@|&^+/*]$").search
_jm_obj_0_must: PropMap
_jm_obj_0_may: PropMap
_jm_obj_1_must: PropMap
_jm_obj_1_may: PropMap
_jm_obj_2_must: PropMap
_jm_obj_2_may: PropMap
_jm_obj_3_must: PropMap
_jm_obj_3_may: PropMap
_jm_obj_4_must: PropMap
_jm_obj_4_may: PropMap
_jm_obj_5_may: PropMap
_jm_obj_6_must: PropMap
_jm_obj_6_may: PropMap
_jm_obj_8_must: PropMap
_jm_obj_8_may: PropMap
json_model_18_may: PropMap
# regex "/.+/"
_jm_re_4 = re.compile(".+").search
# regex "/^\\..+$/"
_jm_re_5 = re.compile("^\\..+$").search
# regex "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
_jm_re_6 = re.compile("^([#|&^+/*@~=$%]|[<>!]=?)$").search
# regex "/^\\$.*$/"
_jm_re_7 = re.compile("^\\$.*$").search
json_model_21_may: PropMap
_jm_f_27_may: PropMap
_jm_f_30_may: PropMap
_jm_obj_10_must: PropMap
_jm_obj_10_may: PropMap
_jm_f_34_may: PropMap
_jm_f_37_may: PropMap
_jm_obj_11_must: PropMap
_jm_obj_11_may: PropMap
_jm_f_43_may: PropMap
_jm_f_46_may: PropMap
_jm_obj_12_must: PropMap
_jm_obj_12_may: PropMap
_jm_f_51_may: PropMap
_jm_f_54_may: PropMap
_jm_obj_13_must: PropMap
_jm_obj_13_may: PropMap
_jm_f_59_may: PropMap
_jm_f_62_may: PropMap
_jm_obj_14_must: PropMap
_jm_obj_14_may: PropMap
_jm_f_67_may: PropMap
_jm_f_70_may: PropMap
_jm_obj_15_may: PropMap
_jm_f_74_may: PropMap
_jm_f_77_may: PropMap

# define "json_model_6_may_#" ($.'$Common'.'#')
def _jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Common'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Common'.'#']")
    return result

# define "json_model_8_must_@" ($.'$Constraint'.'@')
def _jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Constraint'.'@'
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Model at {path} [$.'$Constraint'.'@']")
    return result

# define "json_model_8_may_!" ($.'$Constraint'.'!')
def _jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Constraint'.'!'
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Constraint'.'!']")
    return result

# define "json_model_9_must_|" ($.'$Or'.'|')
def _jm_f_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Or'.'|'
    result = isinstance(value, list)
    if result:
        for array_1_idx, array_1_item in enumerate(value):
            lpath = path + '.' + str(array_1_idx)
            # $.'$Or'.'|'.0
            result = json_model_17(array_1_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Or'.'|'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Or'.'|']")
    return result

# define "json_model_10_must_&" ($.'$And'.'&')
def _jm_f_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$And'.'&'
    result = isinstance(value, list)
    if result:
        for array_2_idx, array_2_item in enumerate(value):
            lpath = path + '.' + str(array_2_idx)
            # $.'$And'.'&'.0
            result = json_model_17(array_2_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$And'.'&'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$And'.'&']")
    return result

# define "json_model_11_must_^" ($.'$Xor'.'^')
def _jm_f_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Xor'.'^'
    result = isinstance(value, list)
    if result:
        for array_3_idx, array_3_item in enumerate(value):
            lpath = path + '.' + str(array_3_idx)
            # $.'$Xor'.'^'.0
            result = json_model_17(array_3_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Xor'.'^'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Xor'.'^']")
    return result

# define "json_model_12_must_+" ($.'$Add'.'+')
def _jm_f_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Add'.'+'
    result = isinstance(value, list)
    if result:
        for array_4_idx, array_4_item in enumerate(value):
            lpath = path + '.' + str(array_4_idx)
            # $.'$Add'.'+'.0
            result = json_model_17(array_4_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Add'.'+'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Add'.'+']")
    return result

# define "_jm_obj_0_must_@" ($.'$Elem'.'|'.0.'@')
def _jm_f_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Elem'.'|'.0.'@'
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Model at {path} [$.'$Elem'.'|'.0.'@']")
    return result

# define "_jm_obj_0_may_#" ($.'$Elem'.'|'.0.'#')
def _jm_f_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Elem'.'|'.0.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Elem'.'|'.0.'#']")
    return result

# define "_jm_obj_0_may_!" ($.'$Elem'.'|'.0.'!')
def _jm_f_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Elem'.'|'.0.'!'
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Elem'.'|'.0.'!']")
    return result

# define "_jm_obj_1_must_|" ($.'$Elem'.'|'.1.'|')
def _jm_f_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Elem'.'|'.1.'|'
    result = isinstance(value, list)
    if result:
        for array_5_idx, array_5_item in enumerate(value):
            lpath = path + '.' + str(array_5_idx)
            # $.'$Elem'.'|'.1.'|'.0
            result = json_model_17(array_5_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Elem'.'|'.1.'|'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Elem'.'|'.1.'|']")
    return result

# define "_jm_obj_1_may_#" ($.'$Elem'.'|'.1.'#')
def _jm_f_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Elem'.'|'.1.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Elem'.'|'.1.'#']")
    return result

# define "_jm_obj_2_must_&" ($.'$Elem'.'|'.2.'&')
def _jm_f_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Elem'.'|'.2.'&'
    result = isinstance(value, list)
    if result:
        for array_6_idx, array_6_item in enumerate(value):
            lpath = path + '.' + str(array_6_idx)
            # $.'$Elem'.'|'.2.'&'.0
            result = json_model_17(array_6_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Elem'.'|'.2.'&'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Elem'.'|'.2.'&']")
    return result

# define "_jm_obj_2_may_#" ($.'$Elem'.'|'.2.'#')
def _jm_f_13(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Elem'.'|'.2.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Elem'.'|'.2.'#']")
    return result

# define "_jm_obj_3_must_^" ($.'$Elem'.'|'.3.'^')
def _jm_f_14(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Elem'.'|'.3.'^'
    result = isinstance(value, list)
    if result:
        for array_7_idx, array_7_item in enumerate(value):
            lpath = path + '.' + str(array_7_idx)
            # $.'$Elem'.'|'.3.'^'.0
            result = json_model_17(array_7_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Elem'.'|'.3.'^'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Elem'.'|'.3.'^']")
    return result

# define "_jm_obj_3_may_#" ($.'$Elem'.'|'.3.'#')
def _jm_f_15(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Elem'.'|'.3.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Elem'.'|'.3.'#']")
    return result

# define "_jm_obj_4_must_+" ($.'$Elem'.'|'.4.'+')
def _jm_f_16(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Elem'.'|'.4.'+'
    result = isinstance(value, list)
    if result:
        for array_8_idx, array_8_item in enumerate(value):
            lpath = path + '.' + str(array_8_idx)
            # $.'$Elem'.'|'.4.'+'.0
            result = json_model_17(array_8_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Elem'.'|'.4.'+'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Elem'.'|'.4.'+']")
    return result

# define "_jm_obj_4_may_#" ($.'$Elem'.'|'.4.'#')
def _jm_f_17(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Elem'.'|'.4.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Elem'.'|'.4.'#']")
    return result

# define "_jm_obj_5_may_#" ($.'$Elem'.'|'.5.'#')
def _jm_f_18(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Elem'.'|'.5.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Elem'.'|'.5.'#']")
    return result

# define "_jm_obj_6_must_/" ($.'$Trafo'.'|'.1.'/')
def _jm_f_19(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Trafo'.'|'.1.'/'
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$Trafo'.'|'.1.'/']")
    return result

# define "_jm_obj_6_may_#" ($.'$Trafo'.'|'.1.'#')
def _jm_f_20(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Trafo'.'|'.1.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Trafo'.'|'.1.'#']")
    return result

# define "_jm_obj_6_may_*" ($.'$Trafo'.'|'.1.'*')
def _jm_f_21(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Trafo'.'|'.1.'*'
    # $.'$Trafo'.'|'.1.'*'.'|'.0
    result = isinstance(value, list)
    if result:
        for array_9_idx, array_9_item in enumerate(value):
            lpath = path + '.' + str(array_9_idx)
            # $.'$Trafo'.'|'.1.'*'.'|'.0.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Trafo'.'|'.1.'*'.'|'.0.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Trafo'.'|'.1.'*'.'|'.0]")
    if not result:
        # $.'$Trafo'.'|'.1.'*'.'|'.1
        result = _jm_obj_7(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$Trafo'.'|'.1.'*'.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Trafo'.'|'.1.'*'.'|']")
    return result

# define "_jm_obj_8_must_*" ($.'$Trafo'.'|'.2.'*')
def _jm_f_22(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Trafo'.'|'.2.'*'
    # $.'$Trafo'.'|'.2.'*'.'|'.0
    result = isinstance(value, list)
    if result:
        for array_10_idx, array_10_item in enumerate(value):
            lpath = path + '.' + str(array_10_idx)
            # $.'$Trafo'.'|'.2.'*'.'|'.0.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Trafo'.'|'.2.'*'.'|'.0.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Trafo'.'|'.2.'*'.'|'.0]")
    if not result:
        # $.'$Trafo'.'|'.2.'*'.'|'.1
        result = _jm_obj_9(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$Trafo'.'|'.2.'*'.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Trafo'.'|'.2.'*'.'|']")
    return result

# define "_jm_obj_8_may_#" ($.'$Trafo'.'|'.2.'#')
def _jm_f_23(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Trafo'.'|'.2.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Trafo'.'|'.2.'#']")
    return result

# define "_jm_obj_8_may_/" ($.'$Trafo'.'|'.2.'/')
def _jm_f_24(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Trafo'.'|'.2.'/'
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$Trafo'.'|'.2.'/']")
    return result

# define "json_model_18_may_" ($.'$Defs'.'')
def _jm_f_25(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Defs'.''
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Defs'.'']")
    return result

# define "json_model_21_may_~" ($.'$RootOnly'.'~')
def _jm_f_26(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$RootOnly'.'~'
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$RootOnly'.'~']")
    return result

# define "_jm_f_27_may_#" ($.'$RootOnly'.'$'.'#')
def _jm_f_28(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$RootOnly'.'$'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$RootOnly'.'$'.'#']")
    return result

# define "_jm_f_27_may_" ($.'$RootOnly'.'$'.'')
def _jm_f_29(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$RootOnly'.'$'.''
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$RootOnly'.'$'.'']")
    return result



# define "_jm_f_30_may_#" ($.'$RootOnly'.'%'.'#')
def _jm_f_31(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$RootOnly'.'%'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$RootOnly'.'%'.'#']")
    return result



# define "_jm_obj_10_must_@" ($.'$Root'.'|'.0.'@')
def _jm_f_32(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.0.'@'
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Model at {path} [$.'$Root'.'|'.0.'@']")
    return result

# define "_jm_obj_10_may_~" ($.'$Root'.'|'.0.'~')
def _jm_f_33(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.0.'~'
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Root'.'|'.0.'~']")
    return result

# define "_jm_f_34_may_#" ($.'$Root'.'|'.0.'$'.'#')
def _jm_f_35(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.0.'$'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.0.'$'.'#']")
    return result

# define "_jm_f_34_may_" ($.'$Root'.'|'.0.'$'.'')
def _jm_f_36(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.0.'$'.''
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Root'.'|'.0.'$'.'']")
    return result



# define "_jm_f_37_may_#" ($.'$Root'.'|'.0.'%'.'#')
def _jm_f_38(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.0.'%'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.0.'%'.'#']")
    return result



# define "_jm_obj_10_may_#" ($.'$Root'.'|'.0.'#')
def _jm_f_39(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.0.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.0.'#']")
    return result

# define "_jm_obj_10_may_!" ($.'$Root'.'|'.0.'!')
def _jm_f_40(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.0.'!'
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Root'.'|'.0.'!']")
    return result

# define "_jm_obj_11_must_|" ($.'$Root'.'|'.1.'|')
def _jm_f_41(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.1.'|'
    result = isinstance(value, list)
    if result:
        for array_11_idx, array_11_item in enumerate(value):
            lpath = path + '.' + str(array_11_idx)
            # $.'$Root'.'|'.1.'|'.0
            result = json_model_17(array_11_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Root'.'|'.1.'|'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Root'.'|'.1.'|']")
    return result

# define "_jm_obj_11_may_~" ($.'$Root'.'|'.1.'~')
def _jm_f_42(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.1.'~'
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Root'.'|'.1.'~']")
    return result

# define "_jm_f_43_may_#" ($.'$Root'.'|'.1.'$'.'#')
def _jm_f_44(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.1.'$'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.1.'$'.'#']")
    return result

# define "_jm_f_43_may_" ($.'$Root'.'|'.1.'$'.'')
def _jm_f_45(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.1.'$'.''
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Root'.'|'.1.'$'.'']")
    return result



# define "_jm_f_46_may_#" ($.'$Root'.'|'.1.'%'.'#')
def _jm_f_47(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.1.'%'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.1.'%'.'#']")
    return result



# define "_jm_obj_11_may_#" ($.'$Root'.'|'.1.'#')
def _jm_f_48(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.1.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.1.'#']")
    return result

# define "_jm_obj_12_must_&" ($.'$Root'.'|'.2.'&')
def _jm_f_49(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.2.'&'
    result = isinstance(value, list)
    if result:
        for array_12_idx, array_12_item in enumerate(value):
            lpath = path + '.' + str(array_12_idx)
            # $.'$Root'.'|'.2.'&'.0
            result = json_model_17(array_12_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Root'.'|'.2.'&'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Root'.'|'.2.'&']")
    return result

# define "_jm_obj_12_may_~" ($.'$Root'.'|'.2.'~')
def _jm_f_50(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.2.'~'
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Root'.'|'.2.'~']")
    return result

# define "_jm_f_51_may_#" ($.'$Root'.'|'.2.'$'.'#')
def _jm_f_52(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.2.'$'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.2.'$'.'#']")
    return result

# define "_jm_f_51_may_" ($.'$Root'.'|'.2.'$'.'')
def _jm_f_53(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.2.'$'.''
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Root'.'|'.2.'$'.'']")
    return result



# define "_jm_f_54_may_#" ($.'$Root'.'|'.2.'%'.'#')
def _jm_f_55(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.2.'%'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.2.'%'.'#']")
    return result



# define "_jm_obj_12_may_#" ($.'$Root'.'|'.2.'#')
def _jm_f_56(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.2.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.2.'#']")
    return result

# define "_jm_obj_13_must_^" ($.'$Root'.'|'.3.'^')
def _jm_f_57(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.3.'^'
    result = isinstance(value, list)
    if result:
        for array_13_idx, array_13_item in enumerate(value):
            lpath = path + '.' + str(array_13_idx)
            # $.'$Root'.'|'.3.'^'.0
            result = json_model_17(array_13_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Root'.'|'.3.'^'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Root'.'|'.3.'^']")
    return result

# define "_jm_obj_13_may_~" ($.'$Root'.'|'.3.'~')
def _jm_f_58(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.3.'~'
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Root'.'|'.3.'~']")
    return result

# define "_jm_f_59_may_#" ($.'$Root'.'|'.3.'$'.'#')
def _jm_f_60(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.3.'$'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.3.'$'.'#']")
    return result

# define "_jm_f_59_may_" ($.'$Root'.'|'.3.'$'.'')
def _jm_f_61(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.3.'$'.''
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Root'.'|'.3.'$'.'']")
    return result



# define "_jm_f_62_may_#" ($.'$Root'.'|'.3.'%'.'#')
def _jm_f_63(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.3.'%'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.3.'%'.'#']")
    return result



# define "_jm_obj_13_may_#" ($.'$Root'.'|'.3.'#')
def _jm_f_64(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.3.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.3.'#']")
    return result

# define "_jm_obj_14_must_+" ($.'$Root'.'|'.4.'+')
def _jm_f_65(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.4.'+'
    result = isinstance(value, list)
    if result:
        for array_14_idx, array_14_item in enumerate(value):
            lpath = path + '.' + str(array_14_idx)
            # $.'$Root'.'|'.4.'+'.0
            result = json_model_17(array_14_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Root'.'|'.4.'+'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Root'.'|'.4.'+']")
    return result

# define "_jm_obj_14_may_~" ($.'$Root'.'|'.4.'~')
def _jm_f_66(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.4.'~'
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Root'.'|'.4.'~']")
    return result

# define "_jm_f_67_may_#" ($.'$Root'.'|'.4.'$'.'#')
def _jm_f_68(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.4.'$'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.4.'$'.'#']")
    return result

# define "_jm_f_67_may_" ($.'$Root'.'|'.4.'$'.'')
def _jm_f_69(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.4.'$'.''
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Root'.'|'.4.'$'.'']")
    return result



# define "_jm_f_70_may_#" ($.'$Root'.'|'.4.'%'.'#')
def _jm_f_71(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.4.'%'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.4.'%'.'#']")
    return result



# define "_jm_obj_14_may_#" ($.'$Root'.'|'.4.'#')
def _jm_f_72(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.4.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.4.'#']")
    return result

# define "_jm_obj_15_may_~" ($.'$Root'.'|'.5.'~')
def _jm_f_73(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.5.'~'
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Root'.'|'.5.'~']")
    return result

# define "_jm_f_74_may_#" ($.'$Root'.'|'.5.'$'.'#')
def _jm_f_75(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.5.'$'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.5.'$'.'#']")
    return result

# define "_jm_f_74_may_" ($.'$Root'.'|'.5.'$'.'')
def _jm_f_76(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.5.'$'.''
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Url at {path} [$.'$Root'.'|'.5.'$'.'']")
    return result



# define "_jm_f_77_may_#" ($.'$Root'.'|'.5.'%'.'#')
def _jm_f_78(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.5.'%'.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.5.'%'.'#']")
    return result



# define "_jm_obj_15_may_#" ($.'$Root'.'|'.5.'#')
def _jm_f_79(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'.'|'.5.'#'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Root'.'|'.5.'#']")
    return result


# define "$Url" ($.'$Url')
def json_model_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    result = isinstance(value, str) and _jm_re_0(value) is not None or _rep(f"does not match FESC at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected REGEX at {path} [$.'$Url']")
    return result

# define "$Val" ($.'$Val')
def json_model_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Val'
    # $.'$Val'.'|'.0
    result = value is None
    if not result:
        rep is None or rep.append(f"not null at {path} [$.'$Val'.'|'.0]")
    if not result:
        # $.'$Val'.'|'.1
        result = isinstance(value, bool)
        if not result:
            rep is None or rep.append(f"not a bool at {path} [$.'$Val'.'|'.1]")
        if not result:
            # $.'$Val'.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool)
            if not result:
                rep is None or rep.append(f"not a -1 int at {path} [$.'$Val'.'|'.2]")
            if not result:
                # $.'$Val'.'|'.3
                result = isinstance(value, float)
                if not result:
                    rep is None or rep.append(f"not a -1.0 float at {path} [$.'$Val'.'|'.3]")
                if not result:
                    # $.'$Val'.'|'.4
                    result = isinstance(value, str)
                    if not result:
                        rep is None or rep.append(f"not an expected string at {path} [$.'$Val'.'|'.4]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Val'.'|']")
    return result

# define "$Any" ($.'$Any')
def json_model_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Any'
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$Any']")
    return result

# define "$None" ($.'$None')
def json_model_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$None'
    result = False or _rep(f"invalid $NONE at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $NONE at {path} [$.'$None']")
    return result


# object $.'$Common'
def json_model_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Common']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_6_may:  # may
            if not json_model_6_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Common'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Common']")
            return False
    return True



# define "$Array" ($.'$Array')
def json_model_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Array'
    result = isinstance(value, list)
    if result:
        for array_0_idx, array_0_item in enumerate(value):
            lpath = path + '.' + str(array_0_idx)
            # $.'$Array'.0
            result = json_model_17(array_0_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Array'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Array']")
    return result


# object $.'$Constraint'
def json_model_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Constraint']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_8_must:  # must
            must_count += 1
            if not json_model_8_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Constraint'.{prop}]")
                return False
        elif prop in json_model_8_may:  # may
            if not json_model_8_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Constraint'.{prop}]")
                return False
        elif _jm_re_1(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^(<=|>=|<|>|≥|≤)$/
            # $.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            result = isinstance(val, int) and not isinstance(val, bool)
            if not result:
                rep is None or rep.append(f"not a -1 int at {lpath} [$.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]")
            if not result:
                # $.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                result = isinstance(val, float)
                if not result:
                    rep is None or rep.append(f"not a -1.0 float at {lpath} [$.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]")
                if not result:
                    # $.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    result = isinstance(val, str)
                    if not result:
                        rep is None or rep.append(f"not an expected string at {lpath} [$.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]")
            if not result:
                rep is None or rep.append(f"not any model match at {lpath} [$.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|']")
            if not result:
                return False
        elif _jm_re_2(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^(=|!=|≠)$/
            # $.'$Constraint'.'/^(=|!=|≠)$/'
            result = json_model_3(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Val at {lpath} [$.'$Constraint'.'/^(=|!=|≠)$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Constraint']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Constraint']")
    return result




# object $.'$Or'
def json_model_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Or']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_9_must:  # must
            must_count += 1
            if not json_model_9_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Or'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Or']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Or']")
    return result




# object $.'$And'
def json_model_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$And']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_10_must:  # must
            must_count += 1
            if not json_model_10_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$And'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$And']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$And']")
    return result




# object $.'$Xor'
def json_model_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Xor']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_11_must:  # must
            must_count += 1
            if not json_model_11_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Xor'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Xor']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Xor']")
    return result




# object $.'$Add'
def json_model_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Add']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_12_must:  # must
            must_count += 1
            if not json_model_12_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Add'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Add']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Add']")
    return result




# object $.'$Obj'
def json_model_13(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Obj']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if _jm_re_3(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^[@|&^+/*]$/
            # $.'$Obj'.'/^[@|&^+/*]$/'
            result = False or _rep(f"invalid $NONE at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $NONE at {lpath} [$.'$Obj'.'/^[@|&^+/*]$/']")
            if not result:
                return False
        else:  # catch all
            # $.'$Obj'.''
            result = json_model_17(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Obj'.'']")
            if not result:
                rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Obj'.'']")
                return False
    return True




# object $.'$Elem'.'|'.0
def _jm_obj_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Elem'.'|'.0]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_0_must:  # must
            must_count += 1
            if not _jm_obj_0_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Elem'.'|'.0.{prop}]")
                return False
        elif prop in _jm_obj_0_may:  # may
            if not _jm_obj_0_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Elem'.'|'.0.{prop}]")
                return False
        elif _jm_re_1(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^(<=|>=|<|>|≥|≤)$/
            # $.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            result = isinstance(val, int) and not isinstance(val, bool)
            if not result:
                rep is None or rep.append(f"not a -1 int at {lpath} [$.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]")
            if not result:
                # $.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                result = isinstance(val, float)
                if not result:
                    rep is None or rep.append(f"not a -1.0 float at {lpath} [$.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]")
                if not result:
                    # $.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    result = isinstance(val, str)
                    if not result:
                        rep is None or rep.append(f"not an expected string at {lpath} [$.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]")
            if not result:
                rep is None or rep.append(f"not any model match at {lpath} [$.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|']")
            if not result:
                return False
        elif _jm_re_2(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^(=|!=|≠)$/
            # $.'$Elem'.'|'.0.'/^(=|!=|≠)$/'
            result = json_model_3(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Val at {lpath} [$.'$Elem'.'|'.0.'/^(=|!=|≠)$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Elem'.'|'.0]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Elem'.'|'.0]")
    return result


# object $.'$Elem'.'|'.1
def _jm_obj_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Elem'.'|'.1]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_1_must:  # must
            must_count += 1
            if not _jm_obj_1_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Elem'.'|'.1.{prop}]")
                return False
        elif prop in _jm_obj_1_may:  # may
            if not _jm_obj_1_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Elem'.'|'.1.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Elem'.'|'.1]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Elem'.'|'.1]")
    return result


# object $.'$Elem'.'|'.2
def _jm_obj_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Elem'.'|'.2]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_2_must:  # must
            must_count += 1
            if not _jm_obj_2_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Elem'.'|'.2.{prop}]")
                return False
        elif prop in _jm_obj_2_may:  # may
            if not _jm_obj_2_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Elem'.'|'.2.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Elem'.'|'.2]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Elem'.'|'.2]")
    return result


# object $.'$Elem'.'|'.3
def _jm_obj_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Elem'.'|'.3]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_3_must:  # must
            must_count += 1
            if not _jm_obj_3_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Elem'.'|'.3.{prop}]")
                return False
        elif prop in _jm_obj_3_may:  # may
            if not _jm_obj_3_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Elem'.'|'.3.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Elem'.'|'.3]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Elem'.'|'.3]")
    return result


# object $.'$Elem'.'|'.4
def _jm_obj_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Elem'.'|'.4]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_4_must:  # must
            must_count += 1
            if not _jm_obj_4_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Elem'.'|'.4.{prop}]")
                return False
        elif prop in _jm_obj_4_may:  # may
            if not _jm_obj_4_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Elem'.'|'.4.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Elem'.'|'.4]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Elem'.'|'.4]")
    return result


# object $.'$Elem'.'|'.5
def _jm_obj_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Elem'.'|'.5]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_5_may:  # may
            if not _jm_obj_5_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Elem'.'|'.5.{prop}]")
                return False
        elif _jm_re_3(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^[@|&^+/*]$/
            # $.'$Elem'.'|'.5.'/^[@|&^+/*]$/'
            result = False or _rep(f"invalid $NONE at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $NONE at {lpath} [$.'$Elem'.'|'.5.'/^[@|&^+/*]$/']")
            if not result:
                return False
        else:  # catch all
            # $.'$Elem'.'|'.5.''
            result = json_model_17(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Elem'.'|'.5.'']")
            if not result:
                rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Elem'.'|'.5.'']")
                return False
    return True

# define "$Elem" ($.'$Elem')
def json_model_14(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Elem'
    result = isinstance(value, dict)
    if result:
        # $.'$Elem'.'|'.0
        result = _jm_obj_0(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$Elem'.'|'.0]")
        if not result:
            # $.'$Elem'.'|'.1
            result = _jm_obj_1(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected object at {path} [$.'$Elem'.'|'.1]")
            if not result:
                # $.'$Elem'.'|'.2
                result = _jm_obj_2(value, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected object at {path} [$.'$Elem'.'|'.2]")
                if not result:
                    # $.'$Elem'.'|'.3
                    result = _jm_obj_3(value, path, rep)
                    if not result:
                        rep is None or rep.append(f"not an expected object at {path} [$.'$Elem'.'|'.3]")
                    if not result:
                        # $.'$Elem'.'|'.4
                        result = _jm_obj_4(value, path, rep)
                        if not result:
                            rep is None or rep.append(f"not an expected object at {path} [$.'$Elem'.'|'.4]")
                        if not result:
                            # $.'$Elem'.'|'.5
                            result = _jm_obj_5(value, path, rep)
                            if not result:
                                rep is None or rep.append(f"not an expected object at {path} [$.'$Elem'.'|'.5]")
        if not result:
            rep is None or rep.append(f"not any model match at {path} [$.'$Elem'.'|']")
    return result


# object $.'$Trafo'.'|'.1.'*'.'|'.1
def _jm_obj_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Trafo'.'|'.1.'*'.'|'.1]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Trafo'.'|'.1.'*'.'|'.1.''
        result = json_model_17(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Trafo'.'|'.1.'*'.'|'.1.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Trafo'.'|'.1.'*'.'|'.1.'']")
            return False
    return True


# object $.'$Trafo'.'|'.1
def _jm_obj_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Trafo'.'|'.1]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_6_must:  # must
            must_count += 1
            if not _jm_obj_6_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Trafo'.'|'.1.{prop}]")
                return False
        elif prop in _jm_obj_6_may:  # may
            if not _jm_obj_6_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Trafo'.'|'.1.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Trafo'.'|'.1]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Trafo'.'|'.1]")
    return result


# object $.'$Trafo'.'|'.2.'*'.'|'.1
def _jm_obj_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Trafo'.'|'.2.'*'.'|'.1]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Trafo'.'|'.2.'*'.'|'.1.''
        result = json_model_17(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Trafo'.'|'.2.'*'.'|'.1.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Trafo'.'|'.2.'*'.'|'.1.'']")
            return False
    return True


# object $.'$Trafo'.'|'.2
def _jm_obj_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Trafo'.'|'.2]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_8_must:  # must
            must_count += 1
            if not _jm_obj_8_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Trafo'.'|'.2.{prop}]")
                return False
        elif prop in _jm_obj_8_may:  # may
            if not _jm_obj_8_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Trafo'.'|'.2.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Trafo'.'|'.2]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Trafo'.'|'.2]")
    return result

# define "$Trafo" ($.'$Trafo')
def json_model_15(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Trafo'
    # $.'$Trafo'.'|'.0
    result = json_model_17(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Model at {path} [$.'$Trafo'.'|'.0]")
    if not result:
        # $.'$Trafo'.'|'.1
        result = _jm_obj_6(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$Trafo'.'|'.1]")
        if not result:
            # $.'$Trafo'.'|'.2
            result = _jm_obj_8(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected object at {path} [$.'$Trafo'.'|'.2]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Trafo'.'|']")
    return result

# define "$Scalar" ($.'$Scalar')
def json_model_16(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Scalar'
    # $.'$Scalar'.'|'.0
    result = value is None
    if not result:
        rep is None or rep.append(f"not an expected =null at {path} [$.'$Scalar'.'|'.0]")
    if not result:
        # $.'$Scalar'.'|'.1
        result = isinstance(value, bool) and value == True
        if not result:
            rep is None or rep.append(f"not an expected =true at {path} [$.'$Scalar'.'|'.1]")
        if not result:
            # $.'$Scalar'.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool) and value == 0
            if not result:
                rep is None or rep.append(f"not an expected =0 at {path} [$.'$Scalar'.'|'.2]")
            if not result:
                # $.'$Scalar'.'|'.3
                result = isinstance(value, int) and not isinstance(value, bool) and value == 1
                if not result:
                    rep is None or rep.append(f"not an expected =1 at {path} [$.'$Scalar'.'|'.3]")
                if not result:
                    # $.'$Scalar'.'|'.4
                    result = isinstance(value, int) and not isinstance(value, bool) and value == -1
                    if not result:
                        rep is None or rep.append(f"not an expected =-1 at {path} [$.'$Scalar'.'|'.4]")
                    if not result:
                        # $.'$Scalar'.'|'.5
                        result = isinstance(value, float) and value == 0.0
                        if not result:
                            rep is None or rep.append(f"not an expected =0.0 at {path} [$.'$Scalar'.'|'.5]")
                        if not result:
                            # $.'$Scalar'.'|'.6
                            result = isinstance(value, float) and value == 1.0
                            if not result:
                                rep is None or rep.append(f"not an expected =1.0 at {path} [$.'$Scalar'.'|'.6]")
                            if not result:
                                # $.'$Scalar'.'|'.7
                                result = isinstance(value, float) and value == -1.0
                                if not result:
                                    rep is None or rep.append(f"not an expected =-1.0 at {path} [$.'$Scalar'.'|'.7]")
                                if not result:
                                    # $.'$Scalar'.'|'.8
                                    result = isinstance(value, str)
                                    if not result:
                                        rep is None or rep.append(f"not an expected string at {path} [$.'$Scalar'.'|'.8]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Scalar'.'|']")
    return result

# define "$Model" ($.'$Model')
def json_model_17(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Model'
    # $.'$Model'.'|'.0
    result = json_model_16(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Scalar at {path} [$.'$Model'.'|'.0]")
    if not result:
        # $.'$Model'.'|'.1
        result = json_model_7(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Array at {path} [$.'$Model'.'|'.1]")
        if not result:
            # $.'$Model'.'|'.2
            result = json_model_14(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Elem at {path} [$.'$Model'.'|'.2]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Model'.'|']")
    return result


# object $.'$Defs'
def json_model_18(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_18_may:  # may
            if not json_model_18_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Defs'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$Defs'.'/.+/'
            result = json_model_17(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Defs'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Defs']")
            return False
    return True




# object $.'$Rename'
def json_model_19(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Rename']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if _jm_re_5(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$Rename'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_6(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$Rename'.'/^\\..+$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Rename']")
            return False
    return True




# object $.'$Rewrite'
def json_model_20(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Rewrite']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if _jm_re_7(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$Rewrite'.'/^\\$.*$/'
            result = json_model_15(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$Rewrite'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Rewrite']")
            return False
    return True




# object $.'$RootOnly'.'$'
def _jm_f_27(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$RootOnly'.'$']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_27_may:  # may
            if not _jm_f_27_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$RootOnly'.'$'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$RootOnly'.'$'.'/.+/'
            result = json_model_17(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$RootOnly'.'$'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$RootOnly'.'$']")
            return False
    return True


# object $.'$RootOnly'.'%'
def _jm_f_30(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$RootOnly'.'%']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_30_may:  # may
            if not _jm_f_30_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$RootOnly'.'%'.{prop}]")
                return False
        elif _jm_re_5(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$RootOnly'.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_6(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$RootOnly'.'%'.'/^\\..+$/']")
            if not result:
                return False
        elif _jm_re_7(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$RootOnly'.'%'.'/^\\$.*$/'
            result = json_model_15(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$RootOnly'.'%'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$RootOnly'.'%']")
            return False
    return True


# object $.'$RootOnly'
def json_model_21(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$RootOnly']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_21_may:  # may
            if not json_model_21_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$RootOnly'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$RootOnly']")
            return False
    return True




# object $.'$Root'.'|'.0.'$'
def _jm_f_34(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.0.'$']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_34_may:  # may
            if not _jm_f_34_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.0.'$'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$Root'.'|'.0.'$'.'/.+/'
            result = json_model_17(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Root'.'|'.0.'$'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.0.'$']")
            return False
    return True


# object $.'$Root'.'|'.0.'%'
def _jm_f_37(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.0.'%']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_37_may:  # may
            if not _jm_f_37_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.0.'%'.{prop}]")
                return False
        elif _jm_re_5(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$Root'.'|'.0.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_6(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$Root'.'|'.0.'%'.'/^\\..+$/']")
            if not result:
                return False
        elif _jm_re_7(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$Root'.'|'.0.'%'.'/^\\$.*$/'
            result = json_model_15(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$Root'.'|'.0.'%'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.0.'%']")
            return False
    return True


# object $.'$Root'.'|'.0
def _jm_obj_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.0]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_10_must:  # must
            must_count += 1
            if not _jm_obj_10_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Root'.'|'.0.{prop}]")
                return False
        elif prop in _jm_obj_10_may:  # may
            if not _jm_obj_10_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.0.{prop}]")
                return False
        elif _jm_re_1(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^(<=|>=|<|>|≥|≤)$/
            # $.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            result = isinstance(val, int) and not isinstance(val, bool)
            if not result:
                rep is None or rep.append(f"not a -1 int at {lpath} [$.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]")
            if not result:
                # $.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                result = isinstance(val, float)
                if not result:
                    rep is None or rep.append(f"not a -1.0 float at {lpath} [$.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]")
                if not result:
                    # $.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    result = isinstance(val, str)
                    if not result:
                        rep is None or rep.append(f"not an expected string at {lpath} [$.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]")
            if not result:
                rep is None or rep.append(f"not any model match at {lpath} [$.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|']")
            if not result:
                return False
        elif _jm_re_2(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^(=|!=|≠)$/
            # $.'$Root'.'|'.0.'/^(=|!=|≠)$/'
            result = json_model_3(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Val at {lpath} [$.'$Root'.'|'.0.'/^(=|!=|≠)$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.0]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Root'.'|'.0]")
    return result


# object $.'$Root'.'|'.1.'$'
def _jm_f_43(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.1.'$']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_43_may:  # may
            if not _jm_f_43_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.1.'$'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$Root'.'|'.1.'$'.'/.+/'
            result = json_model_17(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Root'.'|'.1.'$'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.1.'$']")
            return False
    return True


# object $.'$Root'.'|'.1.'%'
def _jm_f_46(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.1.'%']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_46_may:  # may
            if not _jm_f_46_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.1.'%'.{prop}]")
                return False
        elif _jm_re_5(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$Root'.'|'.1.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_6(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$Root'.'|'.1.'%'.'/^\\..+$/']")
            if not result:
                return False
        elif _jm_re_7(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$Root'.'|'.1.'%'.'/^\\$.*$/'
            result = json_model_15(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$Root'.'|'.1.'%'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.1.'%']")
            return False
    return True


# object $.'$Root'.'|'.1
def _jm_obj_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.1]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_11_must:  # must
            must_count += 1
            if not _jm_obj_11_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Root'.'|'.1.{prop}]")
                return False
        elif prop in _jm_obj_11_may:  # may
            if not _jm_obj_11_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.1.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.1]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Root'.'|'.1]")
    return result


# object $.'$Root'.'|'.2.'$'
def _jm_f_51(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.2.'$']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_51_may:  # may
            if not _jm_f_51_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.2.'$'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$Root'.'|'.2.'$'.'/.+/'
            result = json_model_17(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Root'.'|'.2.'$'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.2.'$']")
            return False
    return True


# object $.'$Root'.'|'.2.'%'
def _jm_f_54(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.2.'%']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_54_may:  # may
            if not _jm_f_54_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.2.'%'.{prop}]")
                return False
        elif _jm_re_5(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$Root'.'|'.2.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_6(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$Root'.'|'.2.'%'.'/^\\..+$/']")
            if not result:
                return False
        elif _jm_re_7(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$Root'.'|'.2.'%'.'/^\\$.*$/'
            result = json_model_15(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$Root'.'|'.2.'%'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.2.'%']")
            return False
    return True


# object $.'$Root'.'|'.2
def _jm_obj_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.2]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_12_must:  # must
            must_count += 1
            if not _jm_obj_12_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Root'.'|'.2.{prop}]")
                return False
        elif prop in _jm_obj_12_may:  # may
            if not _jm_obj_12_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.2.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.2]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Root'.'|'.2]")
    return result


# object $.'$Root'.'|'.3.'$'
def _jm_f_59(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.3.'$']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_59_may:  # may
            if not _jm_f_59_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.3.'$'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$Root'.'|'.3.'$'.'/.+/'
            result = json_model_17(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Root'.'|'.3.'$'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.3.'$']")
            return False
    return True


# object $.'$Root'.'|'.3.'%'
def _jm_f_62(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.3.'%']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_62_may:  # may
            if not _jm_f_62_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.3.'%'.{prop}]")
                return False
        elif _jm_re_5(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$Root'.'|'.3.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_6(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$Root'.'|'.3.'%'.'/^\\..+$/']")
            if not result:
                return False
        elif _jm_re_7(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$Root'.'|'.3.'%'.'/^\\$.*$/'
            result = json_model_15(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$Root'.'|'.3.'%'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.3.'%']")
            return False
    return True


# object $.'$Root'.'|'.3
def _jm_obj_13(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.3]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_13_must:  # must
            must_count += 1
            if not _jm_obj_13_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Root'.'|'.3.{prop}]")
                return False
        elif prop in _jm_obj_13_may:  # may
            if not _jm_obj_13_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.3.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.3]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Root'.'|'.3]")
    return result


# object $.'$Root'.'|'.4.'$'
def _jm_f_67(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.4.'$']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_67_may:  # may
            if not _jm_f_67_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.4.'$'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$Root'.'|'.4.'$'.'/.+/'
            result = json_model_17(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Root'.'|'.4.'$'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.4.'$']")
            return False
    return True


# object $.'$Root'.'|'.4.'%'
def _jm_f_70(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.4.'%']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_70_may:  # may
            if not _jm_f_70_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.4.'%'.{prop}]")
                return False
        elif _jm_re_5(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$Root'.'|'.4.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_6(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$Root'.'|'.4.'%'.'/^\\..+$/']")
            if not result:
                return False
        elif _jm_re_7(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$Root'.'|'.4.'%'.'/^\\$.*$/'
            result = json_model_15(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$Root'.'|'.4.'%'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.4.'%']")
            return False
    return True


# object $.'$Root'.'|'.4
def _jm_obj_14(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.4]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_14_must:  # must
            must_count += 1
            if not _jm_obj_14_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Root'.'|'.4.{prop}]")
                return False
        elif prop in _jm_obj_14_may:  # may
            if not _jm_obj_14_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.4.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.4]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Root'.'|'.4]")
    return result


# object $.'$Root'.'|'.5.'$'
def _jm_f_74(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.5.'$']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_74_may:  # may
            if not _jm_f_74_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.5.'$'.{prop}]")
                return False
        elif _jm_re_4(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /.+/
            # $.'$Root'.'|'.5.'$'.'/.+/'
            result = json_model_17(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Root'.'|'.5.'$'.'/.+/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.5.'$']")
            return False
    return True


# object $.'$Root'.'|'.5.'%'
def _jm_f_77(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.5.'%']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_f_77_may:  # may
            if not _jm_f_77_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.5.'%'.{prop}]")
                return False
        elif _jm_re_5(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\..+$/
            # $.'$Root'.'|'.5.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            result = isinstance(val, str) and _jm_re_6(val) is not None or _rep(f"does not match FESC at {lpath}", rep)
            if not result:
                rep is None or rep.append(f"not an expected REGEX at {lpath} [$.'$Root'.'|'.5.'%'.'/^\\..+$/']")
            if not result:
                return False
        elif _jm_re_7(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^\$.*$/
            # $.'$Root'.'|'.5.'%'.'/^\\$.*$/'
            result = json_model_15(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Trafo at {lpath} [$.'$Root'.'|'.5.'%'.'/^\\$.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Root'.'|'.5.'%']")
            return False
    return True


# object $.'$Root'.'|'.5
def _jm_obj_15(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Root'.'|'.5]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_15_may:  # may
            if not _jm_obj_15_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Root'.'|'.5.{prop}]")
                return False
        elif _jm_re_3(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^[@|&^+/*]$/
            # $.'$Root'.'|'.5.'/^[@|&^+/*]$/'
            result = False or _rep(f"invalid $NONE at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $NONE at {lpath} [$.'$Root'.'|'.5.'/^[@|&^+/*]$/']")
            if not result:
                return False
        else:  # catch all
            # $.'$Root'.'|'.5.''
            result = json_model_17(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Model at {lpath} [$.'$Root'.'|'.5.'']")
            if not result:
                rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Root'.'|'.5.'']")
                return False
    return True

# define "$Root" ($.'$Root')
def json_model_22(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Root'
    result = isinstance(value, dict)
    if result:
        # $.'$Root'.'|'.0
        result = _jm_obj_10(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$Root'.'|'.0]")
        if not result:
            # $.'$Root'.'|'.1
            result = _jm_obj_11(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected object at {path} [$.'$Root'.'|'.1]")
            if not result:
                # $.'$Root'.'|'.2
                result = _jm_obj_12(value, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected object at {path} [$.'$Root'.'|'.2]")
                if not result:
                    # $.'$Root'.'|'.3
                    result = _jm_obj_13(value, path, rep)
                    if not result:
                        rep is None or rep.append(f"not an expected object at {path} [$.'$Root'.'|'.3]")
                    if not result:
                        # $.'$Root'.'|'.4
                        result = _jm_obj_14(value, path, rep)
                        if not result:
                            rep is None or rep.append(f"not an expected object at {path} [$.'$Root'.'|'.4]")
                        if not result:
                            # $.'$Root'.'|'.5
                            result = _jm_obj_15(value, path, rep)
                            if not result:
                                rep is None or rep.append(f"not an expected object at {path} [$.'$Root'.'|'.5]")
        if not result:
            rep is None or rep.append(f"not any model match at {path} [$.'$Root'.'|']")
    return result

# define "$RootModel" ($.'$RootModel')
def json_model_23(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$RootModel'
    # $.'$RootModel'.'|'.0
    result = json_model_16(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Scalar at {path} [$.'$RootModel'.'|'.0]")
    if not result:
        # $.'$RootModel'.'|'.1
        result = json_model_7(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Array at {path} [$.'$RootModel'.'|'.1]")
        if not result:
            # $.'$RootModel'.'|'.2
            result = json_model_22(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Root at {path} [$.'$RootModel'.'|'.2]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$RootModel'.'|']")
    return result

# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = json_model_23(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $RootModel at {path} [$]")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
json_model_6_may = {
    "#": _jm_f_0,
}
json_model_8_must = {
    "@": _jm_f_1,
}
json_model_8_may = {
    "!": _jm_f_2,
}
json_model_9_must = {
    "|": _jm_f_3,
}
json_model_10_must = {
    "&": _jm_f_4,
}
json_model_11_must = {
    "^": _jm_f_5,
}
json_model_12_must = {
    "+": _jm_f_6,
}
_jm_obj_0_must = {
    "@": _jm_f_7,
}
_jm_obj_0_may = {
    "#": _jm_f_8,
    "!": _jm_f_9,
}
_jm_obj_1_must = {
    "|": _jm_f_10,
}
_jm_obj_1_may = {
    "#": _jm_f_11,
}
_jm_obj_2_must = {
    "&": _jm_f_12,
}
_jm_obj_2_may = {
    "#": _jm_f_13,
}
_jm_obj_3_must = {
    "^": _jm_f_14,
}
_jm_obj_3_may = {
    "#": _jm_f_15,
}
_jm_obj_4_must = {
    "+": _jm_f_16,
}
_jm_obj_4_may = {
    "#": _jm_f_17,
}
_jm_obj_5_may = {
    "#": _jm_f_18,
}
_jm_obj_6_must = {
    "/": _jm_f_19,
}
_jm_obj_6_may = {
    "#": _jm_f_20,
    "*": _jm_f_21,
}
_jm_obj_8_must = {
    "*": _jm_f_22,
}
_jm_obj_8_may = {
    "#": _jm_f_23,
    "/": _jm_f_24,
}
json_model_18_may = {
    "": _jm_f_25,
}
json_model_21_may = {
    "~": _jm_f_26,
    "$": _jm_f_27,
    "%": _jm_f_30,
}
_jm_f_27_may = {
    "#": _jm_f_28,
    "": _jm_f_29,
}
_jm_f_30_may = {
    "#": _jm_f_31,
}
_jm_obj_10_must = {
    "@": _jm_f_32,
}
_jm_obj_10_may = {
    "~": _jm_f_33,
    "$": _jm_f_34,
    "%": _jm_f_37,
    "#": _jm_f_39,
    "!": _jm_f_40,
}
_jm_f_34_may = {
    "#": _jm_f_35,
    "": _jm_f_36,
}
_jm_f_37_may = {
    "#": _jm_f_38,
}
_jm_obj_11_must = {
    "|": _jm_f_41,
}
_jm_obj_11_may = {
    "~": _jm_f_42,
    "$": _jm_f_43,
    "%": _jm_f_46,
    "#": _jm_f_48,
}
_jm_f_43_may = {
    "#": _jm_f_44,
    "": _jm_f_45,
}
_jm_f_46_may = {
    "#": _jm_f_47,
}
_jm_obj_12_must = {
    "&": _jm_f_49,
}
_jm_obj_12_may = {
    "~": _jm_f_50,
    "$": _jm_f_51,
    "%": _jm_f_54,
    "#": _jm_f_56,
}
_jm_f_51_may = {
    "#": _jm_f_52,
    "": _jm_f_53,
}
_jm_f_54_may = {
    "#": _jm_f_55,
}
_jm_obj_13_must = {
    "^": _jm_f_57,
}
_jm_obj_13_may = {
    "~": _jm_f_58,
    "$": _jm_f_59,
    "%": _jm_f_62,
    "#": _jm_f_64,
}
_jm_f_59_may = {
    "#": _jm_f_60,
    "": _jm_f_61,
}
_jm_f_62_may = {
    "#": _jm_f_63,
}
_jm_obj_14_must = {
    "+": _jm_f_65,
}
_jm_obj_14_may = {
    "~": _jm_f_66,
    "$": _jm_f_67,
    "%": _jm_f_70,
    "#": _jm_f_72,
}
_jm_f_67_may = {
    "#": _jm_f_68,
    "": _jm_f_69,
}
_jm_f_70_may = {
    "#": _jm_f_71,
}
_jm_obj_15_may = {
    "~": _jm_f_73,
    "$": _jm_f_74,
    "%": _jm_f_77,
    "#": _jm_f_79,
}
_jm_f_74_may = {
    "#": _jm_f_75,
    "": _jm_f_76,
}
_jm_f_77_may = {
    "#": _jm_f_78,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

