# Generated for model: ./json-model.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# regex "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
jm_re_0 = re.compile("^((file|https?)://.+|\\./.*|\\.\\./.*)$").search
json_model_5_may: PropMap
json_model_7_must: PropMap
json_model_7_may: PropMap
# regex "/^(<=|>=|<|>|\u2265|\u2264)$/"
jm_re_1 = re.compile("^(<=|>=|<|>|\u2265|\u2264)$").search
# regex "/^(=|!=|\u2260)$/"
jm_re_2 = re.compile("^(=|!=|\u2260)$").search
json_model_8_must: PropMap
json_model_9_must: PropMap
json_model_10_must: PropMap
json_model_11_must: PropMap
# regex "/^[@|&^+/*]$/"
jm_re_3 = re.compile("^[@|&^+/*]$").search
jm_obj_0_must: PropMap
jm_obj_0_may: PropMap
jm_obj_1_must: PropMap
jm_obj_1_may: PropMap
jm_obj_2_must: PropMap
jm_obj_2_may: PropMap
jm_obj_3_must: PropMap
jm_obj_3_may: PropMap
jm_obj_4_must: PropMap
jm_obj_4_may: PropMap
jm_obj_5_may: PropMap
jm_obj_6_must: PropMap
jm_obj_6_may: PropMap
jm_obj_8_must: PropMap
jm_obj_8_may: PropMap
json_model_17_may: PropMap
# regex "/.+/"
jm_re_4 = re.compile(".+").search
# regex "/^\\..*$/"
jm_re_5 = re.compile("^\\..*$").search
# regex "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
jm_re_6 = re.compile("^([#|&^+/*@~<>=!$%]|<=|>=|!=)$").search
# regex "/^\\$.*$/"
jm_re_7 = re.compile("^\\$.*$").search
json_model_20_may: PropMap
jm_f_27_may: PropMap
jm_f_30_may: PropMap
jm_obj_10_must: PropMap
jm_obj_10_may: PropMap
jm_f_34_may: PropMap
jm_f_37_may: PropMap
jm_obj_11_must: PropMap
jm_obj_11_may: PropMap
jm_f_43_may: PropMap
jm_f_46_may: PropMap
jm_obj_12_must: PropMap
jm_obj_12_may: PropMap
jm_f_51_may: PropMap
jm_f_54_may: PropMap
jm_obj_13_must: PropMap
jm_obj_13_may: PropMap
jm_f_59_may: PropMap
jm_f_62_may: PropMap
jm_obj_14_must: PropMap
jm_obj_14_may: PropMap
jm_f_67_may: PropMap
jm_f_70_may: PropMap
jm_obj_15_may: PropMap
jm_f_74_may: PropMap
jm_f_77_may: PropMap

# define "json_model_5_may_#" ($.Common.'#')
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.Common.'#'
    result = isinstance(value, str)
    return result

# define "json_model_7_must_@" ($.Constraint.'@')
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.Constraint.'@'
    result = json_model_16(value, path)
    return result

# define "json_model_7_may_!" ($.Constraint.'!')
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.Constraint.'!'
    result = isinstance(value, bool)
    return result

# define "json_model_8_must_|" ($.Or.'|')
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.Or.'|'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_1_idx, array_1_item in enumerate(value):
            # $.Or.'|'.0
            result = json_model_16(array_1_item, path)
            if not result: break
    return result

# define "json_model_9_must_&" ($.And.'&')
def jm_f_4(value: Jsonable, path: str) -> bool:
    # $.And.'&'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_2_idx, array_2_item in enumerate(value):
            # $.And.'&'.0
            result = json_model_16(array_2_item, path)
            if not result: break
    return result

# define "json_model_10_must_^" ($.Xor.'^')
def jm_f_5(value: Jsonable, path: str) -> bool:
    # $.Xor.'^'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_3_idx, array_3_item in enumerate(value):
            # $.Xor.'^'.0
            result = json_model_16(array_3_item, path)
            if not result: break
    return result

# define "json_model_11_must_+" ($.Add.'+')
def jm_f_6(value: Jsonable, path: str) -> bool:
    # $.Add.'+'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_4_idx, array_4_item in enumerate(value):
            # $.Add.'+'.0
            result = json_model_16(array_4_item, path)
            if not result: break
    return result

# define "jm_obj_0_must_@" ($.Elem.'|'.0.'@')
def jm_f_7(value: Jsonable, path: str) -> bool:
    # $.Elem.'|'.0.'@'
    result = json_model_16(value, path)
    return result

# define "jm_obj_0_may_#" ($.Elem.'|'.0.'#')
def jm_f_8(value: Jsonable, path: str) -> bool:
    # $.Elem.'|'.0.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_0_may_!" ($.Elem.'|'.0.'!')
def jm_f_9(value: Jsonable, path: str) -> bool:
    # $.Elem.'|'.0.'!'
    result = isinstance(value, bool)
    return result

# define "jm_obj_1_must_|" ($.Elem.'|'.1.'|')
def jm_f_10(value: Jsonable, path: str) -> bool:
    # $.Elem.'|'.1.'|'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_5_idx, array_5_item in enumerate(value):
            # $.Elem.'|'.1.'|'.0
            result = json_model_16(array_5_item, path)
            if not result: break
    return result

# define "jm_obj_1_may_#" ($.Elem.'|'.1.'#')
def jm_f_11(value: Jsonable, path: str) -> bool:
    # $.Elem.'|'.1.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_2_must_&" ($.Elem.'|'.2.'&')
def jm_f_12(value: Jsonable, path: str) -> bool:
    # $.Elem.'|'.2.'&'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_6_idx, array_6_item in enumerate(value):
            # $.Elem.'|'.2.'&'.0
            result = json_model_16(array_6_item, path)
            if not result: break
    return result

# define "jm_obj_2_may_#" ($.Elem.'|'.2.'#')
def jm_f_13(value: Jsonable, path: str) -> bool:
    # $.Elem.'|'.2.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_3_must_^" ($.Elem.'|'.3.'^')
def jm_f_14(value: Jsonable, path: str) -> bool:
    # $.Elem.'|'.3.'^'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_7_idx, array_7_item in enumerate(value):
            # $.Elem.'|'.3.'^'.0
            result = json_model_16(array_7_item, path)
            if not result: break
    return result

# define "jm_obj_3_may_#" ($.Elem.'|'.3.'#')
def jm_f_15(value: Jsonable, path: str) -> bool:
    # $.Elem.'|'.3.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_4_must_+" ($.Elem.'|'.4.'+')
def jm_f_16(value: Jsonable, path: str) -> bool:
    # $.Elem.'|'.4.'+'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_8_idx, array_8_item in enumerate(value):
            # $.Elem.'|'.4.'+'.0
            result = json_model_16(array_8_item, path)
            if not result: break
    return result

# define "jm_obj_4_may_#" ($.Elem.'|'.4.'#')
def jm_f_17(value: Jsonable, path: str) -> bool:
    # $.Elem.'|'.4.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_5_may_#" ($.Elem.'|'.5.'#')
def jm_f_18(value: Jsonable, path: str) -> bool:
    # $.Elem.'|'.5.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_6_must_/" ($.Trafo.'|'.1.'/')
def jm_f_19(value: Jsonable, path: str) -> bool:
    # $.Trafo.'|'.1.'/'
    result = True
    return result

# define "jm_obj_6_may_#" ($.Trafo.'|'.1.'#')
def jm_f_20(value: Jsonable, path: str) -> bool:
    # $.Trafo.'|'.1.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_6_may_*" ($.Trafo.'|'.1.'*')
def jm_f_21(value: Jsonable, path: str) -> bool:
    # $.Trafo.'|'.1.'*'
    # $.Trafo.'|'.1.'*'.'|'.0
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_9_idx, array_9_item in enumerate(value):
            # $.Trafo.'|'.1.'*'.'|'.0.0
            result = True
            if not result: break
    if not result:
        # $.Trafo.'|'.1.'*'.'|'.1
        result = jm_obj_7(value, path)
    return result

# define "jm_obj_8_must_*" ($.Trafo.'|'.2.'*')
def jm_f_22(value: Jsonable, path: str) -> bool:
    # $.Trafo.'|'.2.'*'
    # $.Trafo.'|'.2.'*'.'|'.0
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_10_idx, array_10_item in enumerate(value):
            # $.Trafo.'|'.2.'*'.'|'.0.0
            result = True
            if not result: break
    if not result:
        # $.Trafo.'|'.2.'*'.'|'.1
        result = jm_obj_9(value, path)
    return result

# define "jm_obj_8_may_#" ($.Trafo.'|'.2.'#')
def jm_f_23(value: Jsonable, path: str) -> bool:
    # $.Trafo.'|'.2.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_8_may_/" ($.Trafo.'|'.2.'/')
def jm_f_24(value: Jsonable, path: str) -> bool:
    # $.Trafo.'|'.2.'/'
    result = True
    return result

# define "json_model_17_may_" ($.Defs.'')
def jm_f_25(value: Jsonable, path: str) -> bool:
    # $.Defs.''
    result = json_model_1(value, path)
    return result

# define "json_model_20_may_~" ($.RootOnly.'~')
def jm_f_26(value: Jsonable, path: str) -> bool:
    # $.RootOnly.'~'
    result = json_model_1(value, path)
    return result

# define "jm_f_27_may_#" ($.RootOnly.'$'.'#')
def jm_f_28(value: Jsonable, path: str) -> bool:
    # $.RootOnly.'$'.'#'
    result = isinstance(value, str)
    return result

# define "jm_f_27_may_" ($.RootOnly.'$'.'')
def jm_f_29(value: Jsonable, path: str) -> bool:
    # $.RootOnly.'$'.''
    result = json_model_1(value, path)
    return result



# define "jm_f_30_may_#" ($.RootOnly.'%'.'#')
def jm_f_31(value: Jsonable, path: str) -> bool:
    # $.RootOnly.'%'.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_10_must_@" ($.Root.'|'.0.'@')
def jm_f_32(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.0.'@'
    result = json_model_16(value, path)
    return result

# define "jm_obj_10_may_~" ($.Root.'|'.0.'~')
def jm_f_33(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.0.'~'
    result = json_model_1(value, path)
    return result

# define "jm_f_34_may_#" ($.Root.'|'.0.'$'.'#')
def jm_f_35(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.0.'$'.'#'
    result = isinstance(value, str)
    return result

# define "jm_f_34_may_" ($.Root.'|'.0.'$'.'')
def jm_f_36(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.0.'$'.''
    result = json_model_1(value, path)
    return result



# define "jm_f_37_may_#" ($.Root.'|'.0.'%'.'#')
def jm_f_38(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.0.'%'.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_10_may_#" ($.Root.'|'.0.'#')
def jm_f_39(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.0.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_10_may_!" ($.Root.'|'.0.'!')
def jm_f_40(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.0.'!'
    result = isinstance(value, bool)
    return result

# define "jm_obj_11_must_|" ($.Root.'|'.1.'|')
def jm_f_41(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.1.'|'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_11_idx, array_11_item in enumerate(value):
            # $.Root.'|'.1.'|'.0
            result = json_model_16(array_11_item, path)
            if not result: break
    return result

# define "jm_obj_11_may_~" ($.Root.'|'.1.'~')
def jm_f_42(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.1.'~'
    result = json_model_1(value, path)
    return result

# define "jm_f_43_may_#" ($.Root.'|'.1.'$'.'#')
def jm_f_44(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.1.'$'.'#'
    result = isinstance(value, str)
    return result

# define "jm_f_43_may_" ($.Root.'|'.1.'$'.'')
def jm_f_45(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.1.'$'.''
    result = json_model_1(value, path)
    return result



# define "jm_f_46_may_#" ($.Root.'|'.1.'%'.'#')
def jm_f_47(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.1.'%'.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_11_may_#" ($.Root.'|'.1.'#')
def jm_f_48(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.1.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_12_must_&" ($.Root.'|'.2.'&')
def jm_f_49(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.2.'&'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_12_idx, array_12_item in enumerate(value):
            # $.Root.'|'.2.'&'.0
            result = json_model_16(array_12_item, path)
            if not result: break
    return result

# define "jm_obj_12_may_~" ($.Root.'|'.2.'~')
def jm_f_50(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.2.'~'
    result = json_model_1(value, path)
    return result

# define "jm_f_51_may_#" ($.Root.'|'.2.'$'.'#')
def jm_f_52(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.2.'$'.'#'
    result = isinstance(value, str)
    return result

# define "jm_f_51_may_" ($.Root.'|'.2.'$'.'')
def jm_f_53(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.2.'$'.''
    result = json_model_1(value, path)
    return result



# define "jm_f_54_may_#" ($.Root.'|'.2.'%'.'#')
def jm_f_55(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.2.'%'.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_12_may_#" ($.Root.'|'.2.'#')
def jm_f_56(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.2.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_13_must_^" ($.Root.'|'.3.'^')
def jm_f_57(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.3.'^'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_13_idx, array_13_item in enumerate(value):
            # $.Root.'|'.3.'^'.0
            result = json_model_16(array_13_item, path)
            if not result: break
    return result

# define "jm_obj_13_may_~" ($.Root.'|'.3.'~')
def jm_f_58(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.3.'~'
    result = json_model_1(value, path)
    return result

# define "jm_f_59_may_#" ($.Root.'|'.3.'$'.'#')
def jm_f_60(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.3.'$'.'#'
    result = isinstance(value, str)
    return result

# define "jm_f_59_may_" ($.Root.'|'.3.'$'.'')
def jm_f_61(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.3.'$'.''
    result = json_model_1(value, path)
    return result



# define "jm_f_62_may_#" ($.Root.'|'.3.'%'.'#')
def jm_f_63(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.3.'%'.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_13_may_#" ($.Root.'|'.3.'#')
def jm_f_64(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.3.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_14_must_+" ($.Root.'|'.4.'+')
def jm_f_65(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.4.'+'
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_14_idx, array_14_item in enumerate(value):
            # $.Root.'|'.4.'+'.0
            result = json_model_16(array_14_item, path)
            if not result: break
    return result

# define "jm_obj_14_may_~" ($.Root.'|'.4.'~')
def jm_f_66(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.4.'~'
    result = json_model_1(value, path)
    return result

# define "jm_f_67_may_#" ($.Root.'|'.4.'$'.'#')
def jm_f_68(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.4.'$'.'#'
    result = isinstance(value, str)
    return result

# define "jm_f_67_may_" ($.Root.'|'.4.'$'.'')
def jm_f_69(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.4.'$'.''
    result = json_model_1(value, path)
    return result



# define "jm_f_70_may_#" ($.Root.'|'.4.'%'.'#')
def jm_f_71(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.4.'%'.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_14_may_#" ($.Root.'|'.4.'#')
def jm_f_72(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.4.'#'
    result = isinstance(value, str)
    return result

# define "jm_obj_15_may_~" ($.Root.'|'.5.'~')
def jm_f_73(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.5.'~'
    result = json_model_1(value, path)
    return result

# define "jm_f_74_may_#" ($.Root.'|'.5.'$'.'#')
def jm_f_75(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.5.'$'.'#'
    result = isinstance(value, str)
    return result

# define "jm_f_74_may_" ($.Root.'|'.5.'$'.'')
def jm_f_76(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.5.'$'.''
    result = json_model_1(value, path)
    return result



# define "jm_f_77_may_#" ($.Root.'|'.5.'%'.'#')
def jm_f_78(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.5.'%'.'#'
    result = isinstance(value, str)
    return result



# define "jm_obj_15_may_#" ($.Root.'|'.5.'#')
def jm_f_79(value: Jsonable, path: str) -> bool:
    # $.Root.'|'.5.'#'
    result = isinstance(value, str)
    return result


# define "$Url" ($.Url)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.Url
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    result = isinstance(value, str) and jm_re_0(value) is not None
    return result

# define "$Val" ($.Val)
def json_model_2(value: Jsonable, path: str) -> bool:
    # $.Val
    # $.Val.'|'.0
    result = value is None
    if not result:
        # $.Val.'|'.1
        result = isinstance(value, bool)
        if not result:
            # $.Val.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool)
            if not result:
                # $.Val.'|'.3
                result = isinstance(value, float)
                if not result:
                    # $.Val.'|'.4
                    result = isinstance(value, str)
    return result

# define "$Any" ($.Any)
def json_model_3(value: Jsonable, path: str) -> bool:
    # $.Any
    result = True
    return result

# define "$None" ($.None)
def json_model_4(value: Jsonable, path: str) -> bool:
    # $.None
    result = False
    return result


# object $.Common
def json_model_5(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_5_may:  # may
            if not json_model_5_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True



# define "$Array" ($.Array)
def json_model_6(value: Jsonable, path: str) -> bool:
    # $.Array
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_0_idx, array_0_item in enumerate(value):
            # $.Array.0
            result = json_model_16(array_0_item, path)
            if not result: break
    return result


# object $.Constraint
def json_model_7(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_7_must:  # must
            must_count += 1
            if not json_model_7_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_7_may:  # may
            if not json_model_7_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_1(prop) is not None:  # /^(<=|>=|<|>|≥|≤)$/
            # $.Constraint.'/^(<=|>=|<|>|≥|≤)$/'
            # $.Constraint.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            result = isinstance(model, int) and not isinstance(model, bool)
            if not result:
                # $.Constraint.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                result = isinstance(model, float)
                if not result:
                    # $.Constraint.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    result = isinstance(model, str)
            if not result: return False
        elif jm_re_2(prop) is not None:  # /^(=|!=|≠)$/
            # $.Constraint.'/^(=|!=|≠)$/'
            result = json_model_2(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Or
def json_model_8(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_8_must:  # must
            must_count += 1
            if not json_model_8_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.And
def json_model_9(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_9_must:  # must
            must_count += 1
            if not json_model_9_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Xor
def json_model_10(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_10_must:  # must
            must_count += 1
            if not json_model_10_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Add
def json_model_11(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_11_must:  # must
            must_count += 1
            if not json_model_11_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Obj
def json_model_12(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if jm_re_3(prop) is not None:  # /^[@|&^+/*]$/
            # $.Obj.'/^[@|&^+/*]$/'
            result = False
            if not result: return False
        else:  # catch all
            # $.Obj.''
            result = json_model_16(model, path)
            if not result: return False
    return True




# object $.Elem.'|'.0
def jm_obj_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_0_must:  # must
            must_count += 1
            if not jm_obj_0_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_0_may:  # may
            if not jm_obj_0_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_1(prop) is not None:  # /^(<=|>=|<|>|≥|≤)$/
            # $.Elem.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.Elem.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            result = isinstance(model, int) and not isinstance(model, bool)
            if not result:
                # $.Elem.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                result = isinstance(model, float)
                if not result:
                    # $.Elem.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    result = isinstance(model, str)
            if not result: return False
        elif jm_re_2(prop) is not None:  # /^(=|!=|≠)$/
            # $.Elem.'|'.0.'/^(=|!=|≠)$/'
            result = json_model_2(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.Elem.'|'.1
def jm_obj_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_1_must:  # must
            must_count += 1
            if not jm_obj_1_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_1_may:  # may
            if not jm_obj_1_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.Elem.'|'.2
def jm_obj_2(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_2_must:  # must
            must_count += 1
            if not jm_obj_2_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_2_may:  # may
            if not jm_obj_2_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.Elem.'|'.3
def jm_obj_3(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_3_must:  # must
            must_count += 1
            if not jm_obj_3_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_3_may:  # may
            if not jm_obj_3_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.Elem.'|'.4
def jm_obj_4(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_4_must:  # must
            must_count += 1
            if not jm_obj_4_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_4_may:  # may
            if not jm_obj_4_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.Elem.'|'.5
def jm_obj_5(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_5_may:  # may
            if not jm_obj_5_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_3(prop) is not None:  # /^[@|&^+/*]$/
            # $.Elem.'|'.5.'/^[@|&^+/*]$/'
            result = False
            if not result: return False
        else:  # catch all
            # $.Elem.'|'.5.''
            result = json_model_16(model, path)
            if not result: return False
    return True

# define "$Elem" ($.Elem)
def json_model_13(value: Jsonable, path: str) -> bool:
    # $.Elem
    result = isinstance(value, dict)
    if result:
        # $.Elem.'|'.0
        result = jm_obj_0(value, path)
        if not result:
            # $.Elem.'|'.1
            result = jm_obj_1(value, path)
            if not result:
                # $.Elem.'|'.2
                result = jm_obj_2(value, path)
                if not result:
                    # $.Elem.'|'.3
                    result = jm_obj_3(value, path)
                    if not result:
                        # $.Elem.'|'.4
                        result = jm_obj_4(value, path)
                        if not result:
                            # $.Elem.'|'.5
                            result = jm_obj_5(value, path)
    return result


# object $.Trafo.'|'.1.'*'.'|'.1
def jm_obj_7(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Trafo.'|'.1.'*'.'|'.1.''
        result = json_model_16(model, path)
        if not result: return False
    return True


# object $.Trafo.'|'.1
def jm_obj_6(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_6_must:  # must
            must_count += 1
            if not jm_obj_6_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_6_may:  # may
            if not jm_obj_6_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.Trafo.'|'.2.'*'.'|'.1
def jm_obj_9(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Trafo.'|'.2.'*'.'|'.1.''
        result = json_model_16(model, path)
        if not result: return False
    return True


# object $.Trafo.'|'.2
def jm_obj_8(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_8_must:  # must
            must_count += 1
            if not jm_obj_8_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_8_may:  # may
            if not jm_obj_8_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1

# define "$Trafo" ($.Trafo)
def json_model_14(value: Jsonable, path: str) -> bool:
    # $.Trafo
    # $.Trafo.'|'.0
    result = json_model_16(value, path)
    if not result:
        # $.Trafo.'|'.1
        result = jm_obj_6(value, path)
        if not result:
            # $.Trafo.'|'.2
            result = jm_obj_8(value, path)
    return result

# define "$Scalar" ($.Scalar)
def json_model_15(value: Jsonable, path: str) -> bool:
    # $.Scalar
    # $.Scalar.'|'.0
    result = value is None
    if not result:
        # $.Scalar.'|'.1
        result = isinstance(value, bool) and value == True
        if not result:
            # $.Scalar.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool) and value == 0
            if not result:
                # $.Scalar.'|'.3
                result = isinstance(value, int) and not isinstance(value, bool) and value == 1
                if not result:
                    # $.Scalar.'|'.4
                    result = isinstance(value, int) and not isinstance(value, bool) and value == -1
                    if not result:
                        # $.Scalar.'|'.5
                        result = isinstance(value, float) and value == 0.0
                        if not result:
                            # $.Scalar.'|'.6
                            result = isinstance(value, float) and value == 1.0
                            if not result:
                                # $.Scalar.'|'.7
                                result = isinstance(value, float) and value == -1.0
                                if not result:
                                    # $.Scalar.'|'.8
                                    result = isinstance(value, str)
    return result

# define "$Model" ($.Model)
def json_model_16(value: Jsonable, path: str) -> bool:
    # $.Model
    # $.Model.'|'.0
    result = json_model_15(value, path)
    if not result:
        # $.Model.'|'.1
        result = json_model_6(value, path)
        if not result:
            # $.Model.'|'.2
            result = json_model_13(value, path)
    return result


# object $.Defs
def json_model_17(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_17_may:  # may
            if not json_model_17_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /.+/
            # $.Defs.'/.+/'
            result = json_model_16(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.Rename
def json_model_18(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if jm_re_5(prop) is not None:  # /^\..*$/
            # $.Rename.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_6(model) is not None
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.Rewrite
def json_model_19(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if jm_re_7(prop) is not None:  # /^\$.*$/
            # $.Rewrite.'/^\$.*$/'
            result = json_model_14(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.RootOnly.'$'
def jm_f_27(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_27_may:  # may
            if not jm_f_27_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /.+/
            # $.RootOnly.'$'.'/.+/'
            result = json_model_16(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.RootOnly.'%'
def jm_f_30(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_30_may:  # may
            if not jm_f_30_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_5(prop) is not None:  # /^\..*$/
            # $.RootOnly.'%'.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_6(model) is not None
            if not result: return False
        elif jm_re_7(prop) is not None:  # /^\$.*$/
            # $.RootOnly.'%'.'/^\$.*$/'
            result = json_model_14(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.RootOnly
def json_model_20(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_20_may:  # may
            if not json_model_20_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True




# object $.Root.'|'.0.'$'
def jm_f_34(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_34_may:  # may
            if not jm_f_34_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /.+/
            # $.Root.'|'.0.'$'.'/.+/'
            result = json_model_16(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Root.'|'.0.'%'
def jm_f_37(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_37_may:  # may
            if not jm_f_37_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_5(prop) is not None:  # /^\..*$/
            # $.Root.'|'.0.'%'.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_6(model) is not None
            if not result: return False
        elif jm_re_7(prop) is not None:  # /^\$.*$/
            # $.Root.'|'.0.'%'.'/^\$.*$/'
            result = json_model_14(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Root.'|'.0
def jm_obj_10(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_10_must:  # must
            must_count += 1
            if not jm_obj_10_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_10_may:  # may
            if not jm_obj_10_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_1(prop) is not None:  # /^(<=|>=|<|>|≥|≤)$/
            # $.Root.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.Root.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            result = isinstance(model, int) and not isinstance(model, bool)
            if not result:
                # $.Root.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                result = isinstance(model, float)
                if not result:
                    # $.Root.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    result = isinstance(model, str)
            if not result: return False
        elif jm_re_2(prop) is not None:  # /^(=|!=|≠)$/
            # $.Root.'|'.0.'/^(=|!=|≠)$/'
            result = json_model_2(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.Root.'|'.1.'$'
def jm_f_43(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_43_may:  # may
            if not jm_f_43_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /.+/
            # $.Root.'|'.1.'$'.'/.+/'
            result = json_model_16(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Root.'|'.1.'%'
def jm_f_46(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_46_may:  # may
            if not jm_f_46_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_5(prop) is not None:  # /^\..*$/
            # $.Root.'|'.1.'%'.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_6(model) is not None
            if not result: return False
        elif jm_re_7(prop) is not None:  # /^\$.*$/
            # $.Root.'|'.1.'%'.'/^\$.*$/'
            result = json_model_14(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Root.'|'.1
def jm_obj_11(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_11_must:  # must
            must_count += 1
            if not jm_obj_11_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_11_may:  # may
            if not jm_obj_11_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.Root.'|'.2.'$'
def jm_f_51(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_51_may:  # may
            if not jm_f_51_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /.+/
            # $.Root.'|'.2.'$'.'/.+/'
            result = json_model_16(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Root.'|'.2.'%'
def jm_f_54(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_54_may:  # may
            if not jm_f_54_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_5(prop) is not None:  # /^\..*$/
            # $.Root.'|'.2.'%'.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_6(model) is not None
            if not result: return False
        elif jm_re_7(prop) is not None:  # /^\$.*$/
            # $.Root.'|'.2.'%'.'/^\$.*$/'
            result = json_model_14(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Root.'|'.2
def jm_obj_12(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_12_must:  # must
            must_count += 1
            if not jm_obj_12_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_12_may:  # may
            if not jm_obj_12_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.Root.'|'.3.'$'
def jm_f_59(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_59_may:  # may
            if not jm_f_59_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /.+/
            # $.Root.'|'.3.'$'.'/.+/'
            result = json_model_16(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Root.'|'.3.'%'
def jm_f_62(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_62_may:  # may
            if not jm_f_62_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_5(prop) is not None:  # /^\..*$/
            # $.Root.'|'.3.'%'.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_6(model) is not None
            if not result: return False
        elif jm_re_7(prop) is not None:  # /^\$.*$/
            # $.Root.'|'.3.'%'.'/^\$.*$/'
            result = json_model_14(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Root.'|'.3
def jm_obj_13(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_13_must:  # must
            must_count += 1
            if not jm_obj_13_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_13_may:  # may
            if not jm_obj_13_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.Root.'|'.4.'$'
def jm_f_67(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_67_may:  # may
            if not jm_f_67_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /.+/
            # $.Root.'|'.4.'$'.'/.+/'
            result = json_model_16(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Root.'|'.4.'%'
def jm_f_70(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_70_may:  # may
            if not jm_f_70_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_5(prop) is not None:  # /^\..*$/
            # $.Root.'|'.4.'%'.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_6(model) is not None
            if not result: return False
        elif jm_re_7(prop) is not None:  # /^\$.*$/
            # $.Root.'|'.4.'%'.'/^\$.*$/'
            result = json_model_14(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Root.'|'.4
def jm_obj_14(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_14_must:  # must
            must_count += 1
            if not jm_obj_14_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_14_may:  # may
            if not jm_obj_14_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.Root.'|'.5.'$'
def jm_f_74(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_74_may:  # may
            if not jm_f_74_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_4(prop) is not None:  # /.+/
            # $.Root.'|'.5.'$'.'/.+/'
            result = json_model_16(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Root.'|'.5.'%'
def jm_f_77(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_f_77_may:  # may
            if not jm_f_77_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_5(prop) is not None:  # /^\..*$/
            # $.Root.'|'.5.'%'.'/^\..*$/'
            # "/^([#|&^+/*@~<>=!$%]|<=|>=|!=)$/"
            result = isinstance(model, str) and jm_re_6(model) is not None
            if not result: return False
        elif jm_re_7(prop) is not None:  # /^\$.*$/
            # $.Root.'|'.5.'%'.'/^\$.*$/'
            result = json_model_14(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Root.'|'.5
def jm_obj_15(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_15_may:  # may
            if not jm_obj_15_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_3(prop) is not None:  # /^[@|&^+/*]$/
            # $.Root.'|'.5.'/^[@|&^+/*]$/'
            result = False
            if not result: return False
        else:  # catch all
            # $.Root.'|'.5.''
            result = json_model_16(model, path)
            if not result: return False
    return True

# define "$Root" ($.Root)
def json_model_21(value: Jsonable, path: str) -> bool:
    # $.Root
    result = isinstance(value, dict)
    if result:
        # $.Root.'|'.0
        result = jm_obj_10(value, path)
        if not result:
            # $.Root.'|'.1
            result = jm_obj_11(value, path)
            if not result:
                # $.Root.'|'.2
                result = jm_obj_12(value, path)
                if not result:
                    # $.Root.'|'.3
                    result = jm_obj_13(value, path)
                    if not result:
                        # $.Root.'|'.4
                        result = jm_obj_14(value, path)
                        if not result:
                            # $.Root.'|'.5
                            result = jm_obj_15(value, path)
    return result

# define "$RootModel" ($.RootModel)
def json_model_22(value: Jsonable, path: str) -> bool:
    # $.RootModel
    # $.RootModel.'|'.0
    result = json_model_15(value, path)
    if not result:
        # $.RootModel.'|'.1
        result = json_model_6(value, path)
        if not result:
            # $.RootModel.'|'.2
            result = json_model_21(value, path)
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = json_model_22(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_5_may = {
    "#": jm_f_0,
}
json_model_7_must = {
    "@": jm_f_1,
}
json_model_7_may = {
    "!": jm_f_2,
}
json_model_8_must = {
    "|": jm_f_3,
}
json_model_9_must = {
    "&": jm_f_4,
}
json_model_10_must = {
    "^": jm_f_5,
}
json_model_11_must = {
    "+": jm_f_6,
}
jm_obj_0_must = {
    "@": jm_f_7,
}
jm_obj_0_may = {
    "#": jm_f_8,
    "!": jm_f_9,
}
jm_obj_1_must = {
    "|": jm_f_10,
}
jm_obj_1_may = {
    "#": jm_f_11,
}
jm_obj_2_must = {
    "&": jm_f_12,
}
jm_obj_2_may = {
    "#": jm_f_13,
}
jm_obj_3_must = {
    "^": jm_f_14,
}
jm_obj_3_may = {
    "#": jm_f_15,
}
jm_obj_4_must = {
    "+": jm_f_16,
}
jm_obj_4_may = {
    "#": jm_f_17,
}
jm_obj_5_may = {
    "#": jm_f_18,
}
jm_obj_6_must = {
    "/": jm_f_19,
}
jm_obj_6_may = {
    "#": jm_f_20,
    "*": jm_f_21,
}
jm_obj_8_must = {
    "*": jm_f_22,
}
jm_obj_8_may = {
    "#": jm_f_23,
    "/": jm_f_24,
}
json_model_17_may = {
    "": jm_f_25,
}
json_model_20_may = {
    "~": jm_f_26,
    "$": jm_f_27,
    "%": jm_f_30,
}
jm_f_27_may = {
    "#": jm_f_28,
    "": jm_f_29,
}
jm_f_30_may = {
    "#": jm_f_31,
}
jm_obj_10_must = {
    "@": jm_f_32,
}
jm_obj_10_may = {
    "~": jm_f_33,
    "$": jm_f_34,
    "%": jm_f_37,
    "#": jm_f_39,
    "!": jm_f_40,
}
jm_f_34_may = {
    "#": jm_f_35,
    "": jm_f_36,
}
jm_f_37_may = {
    "#": jm_f_38,
}
jm_obj_11_must = {
    "|": jm_f_41,
}
jm_obj_11_may = {
    "~": jm_f_42,
    "$": jm_f_43,
    "%": jm_f_46,
    "#": jm_f_48,
}
jm_f_43_may = {
    "#": jm_f_44,
    "": jm_f_45,
}
jm_f_46_may = {
    "#": jm_f_47,
}
jm_obj_12_must = {
    "&": jm_f_49,
}
jm_obj_12_may = {
    "~": jm_f_50,
    "$": jm_f_51,
    "%": jm_f_54,
    "#": jm_f_56,
}
jm_f_51_may = {
    "#": jm_f_52,
    "": jm_f_53,
}
jm_f_54_may = {
    "#": jm_f_55,
}
jm_obj_13_must = {
    "^": jm_f_57,
}
jm_obj_13_may = {
    "~": jm_f_58,
    "$": jm_f_59,
    "%": jm_f_62,
    "#": jm_f_64,
}
jm_f_59_may = {
    "#": jm_f_60,
    "": jm_f_61,
}
jm_f_62_may = {
    "#": jm_f_63,
}
jm_obj_14_must = {
    "+": jm_f_65,
}
jm_obj_14_may = {
    "~": jm_f_66,
    "$": jm_f_67,
    "%": jm_f_70,
    "#": jm_f_72,
}
jm_f_67_may = {
    "#": jm_f_68,
    "": jm_f_69,
}
jm_f_70_may = {
    "#": jm_f_71,
}
jm_obj_15_may = {
    "~": jm_f_73,
    "$": jm_f_74,
    "%": jm_f_77,
    "#": jm_f_79,
}
jm_f_74_may = {
    "#": jm_f_75,
    "": jm_f_76,
}
jm_f_77_may = {
    "#": jm_f_78,
}


