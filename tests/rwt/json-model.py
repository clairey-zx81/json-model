#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_re_0_search: Callable
_jm_re_0: RegexFun
_jm_obj_0_may: PropMap
_jm_obj_1_must: PropMap
_jm_obj_1_may: PropMap
_jm_re_1_search: Callable
_jm_re_1: RegexFun
_jm_re_2_search: Callable
_jm_re_2: RegexFun
_jm_obj_2_must: PropMap
_jm_obj_3_must: PropMap
_jm_obj_4_must: PropMap
_jm_obj_5_must: PropMap
_jm_re_3_search: Callable
_jm_re_3: RegexFun
_jm_obj_7_may: PropMap
_jm_obj_8_must: PropMap
_jm_obj_8_may: PropMap
_jm_obj_9_must: PropMap
_jm_obj_9_may: PropMap
_jm_obj_10_must: PropMap
_jm_obj_10_may: PropMap
_jm_obj_11_must: PropMap
_jm_obj_11_may: PropMap
_jm_obj_12_must: PropMap
_jm_obj_12_may: PropMap
_jm_obj_13_must: PropMap
_jm_obj_13_may: PropMap
_jm_obj_15_must: PropMap
_jm_obj_15_may: PropMap
_jm_obj_17_may: PropMap
_jm_re_4_search: Callable
_jm_re_4: RegexFun
_jm_re_5_search: Callable
_jm_re_5: RegexFun
_jm_re_6_search: Callable
_jm_re_6: RegexFun
_jm_re_7_search: Callable
_jm_re_7: RegexFun
_jm_obj_21_may: PropMap
_jm_obj_22_may: PropMap
_jm_obj_20_may: PropMap
_jm_obj_24_may: PropMap
_jm_obj_25_may: PropMap
_jm_obj_23_may: PropMap
_jm_obj_26_must: PropMap
_jm_obj_27_may: PropMap
_jm_obj_28_may: PropMap
_jm_obj_26_may: PropMap
_jm_obj_29_must: PropMap
_jm_obj_30_may: PropMap
_jm_obj_31_may: PropMap
_jm_obj_29_may: PropMap
_jm_obj_32_must: PropMap
_jm_obj_33_may: PropMap
_jm_obj_34_may: PropMap
_jm_obj_32_may: PropMap
_jm_obj_35_must: PropMap
_jm_obj_36_may: PropMap
_jm_obj_37_may: PropMap
_jm_obj_35_may: PropMap
_jm_obj_38_must: PropMap
_jm_obj_39_may: PropMap
_jm_obj_40_may: PropMap
_jm_obj_38_may: PropMap
check_model_map: PropMap

# check $Url ($.'$Url')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    res = isinstance(val, str) and _jm_re_0(val)
    if not res:
        rep is None or rep.append(("unexpected REGEX [$.'$Url']", path))
    return res

# check $Val ($.'$Val')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Val'
    # $.'$Val'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.'$Val'.'|'.0]", path))
    if not res:
        # $.'$Val'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [$.'$Val'.'|'.1]", path))
        if not res:
            # $.'$Val'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [$.'$Val'.'|'.2]", path))
            if not res:
                # $.'$Val'.'|'.3
                res = isinstance(val, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [$.'$Val'.'|'.3]", path))
                if not res:
                    # $.'$Val'.'|'.4
                    res = isinstance(val, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [$.'$Val'.'|'.4]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Val'.'|']", path))
    return res

# check $Any ($.'$Any')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Any'
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Any']", path))
    return res

# check $None ($.'$None')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$None'
    res = False
    if not res:
        rep is None or rep.append(("unexpected $NONE [$.'$None']", path))
    return res

# check _jm_obj_0_may_# ($.'$Common'.'#')
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Common'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Common'.'#']", path))
    return res


# object $.'$Common'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Common']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Common']", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Common']", lpath_0 if path is not None else None))
            return False
    return True

# check $Common ($.'$Common')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Common'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Common']", path))
    return res

# check $Array ($.'$Array')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Array'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # $.'$Array'.0
            res = json_model_17(arr_0_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Array'.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Array']", path))
    return res

# check _jm_obj_1_must_@ ($.'$Constraint'.'@')
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Constraint'.'@'
    res = json_model_17(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [$.'$Constraint'.'@']", path))
    return res


# check _jm_obj_1_may_! ($.'$Constraint'.'!')
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Constraint'.'!'
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Constraint'.'!']", path))
    return res




# object $.'$Constraint'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Constraint']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_1_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_1 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Constraint']", lpath_1 if path is not None else None))
                    return False
        elif pfun := _jm_obj_1_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_1 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Constraint']", lpath_1 if path is not None else None))
                return False
        elif _jm_re_1(prop):
            # handle {len(regs)} re props
            # $.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [$.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]", lpath_1 if path is not None else None))
            if not res:
                # $.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                res = isinstance(pval, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [$.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]", lpath_1 if path is not None else None))
                if not res:
                    # $.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    res = isinstance(pval, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [$.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("no model matched [$.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|']", lpath_1 if path is not None else None))
            if not res:
                return False
        elif _jm_re_2(prop):
            # handle {len(regs)} re props
            # $.'$Constraint'.'/^(=|!=|≠)$/'
            res = json_model_3(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Val [$.'$Constraint'.'/^(=|!=|≠)$/']", lpath_1 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Constraint']", lpath_1 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Constraint']", path))
        return False
    return True

# check $Constraint ($.'$Constraint')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Constraint'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Constraint']", path))
    return res

# check _jm_obj_2_must_| ($.'$Or'.'|')
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Or'.'|'
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # $.'$Or'.'|'.0
            res = json_model_17(arr_1_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Or'.'|'.0]", arr_1_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Or'.'|']", path))
    return res


# object $.'$Or'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Or']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_2_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_2 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Or']", lpath_2 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Or']", lpath_2 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Or']", path))
        return False
    return True

# check $Or ($.'$Or')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Or'
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Or']", path))
    return res

# check _jm_obj_3_must_& ($.'$And'.'&')
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$And'.'&'
    res = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # $.'$And'.'&'.0
            res = json_model_17(arr_2_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$And'.'&'.0]", arr_2_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$And'.'&']", path))
    return res


# object $.'$And'
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$And']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_3_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_3 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$And']", lpath_3 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$And']", lpath_3 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$And']", path))
        return False
    return True

# check $And ($.'$And')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$And'
    res = _jm_obj_3(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$And']", path))
    return res

# check _jm_obj_4_must_^ ($.'$Xor'.'^')
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Xor'.'^'
    res = isinstance(val, list)
    if res:
        for arr_3_idx, arr_3_item in enumerate(val):
            arr_3_lpath: Path = (path + [ arr_3_idx ]) if path is not None else None
            # $.'$Xor'.'^'.0
            res = json_model_17(arr_3_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Xor'.'^'.0]", arr_3_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Xor'.'^']", path))
    return res


# object $.'$Xor'
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Xor']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_4_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_4 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Xor']", lpath_4 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Xor']", lpath_4 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Xor']", path))
        return False
    return True

# check $Xor ($.'$Xor')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Xor'
    res = _jm_obj_4(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Xor']", path))
    return res

# check _jm_obj_5_must_+ ($.'$Add'.'+')
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Add'.'+'
    res = isinstance(val, list)
    if res:
        for arr_4_idx, arr_4_item in enumerate(val):
            arr_4_lpath: Path = (path + [ arr_4_idx ]) if path is not None else None
            # $.'$Add'.'+'.0
            res = json_model_17(arr_4_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Add'.'+'.0]", arr_4_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Add'.'+']", path))
    return res


# object $.'$Add'
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Add']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_5_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_5 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Add']", lpath_5 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Add']", lpath_5 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Add']", path))
        return False
    return True

# check $Add ($.'$Add')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Add'
    res = _jm_obj_5(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Add']", path))
    return res


# object $.'$Obj'
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Obj']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_3(prop):
            # handle {len(regs)} re props
            # $.'$Obj'.'/^[@|&^+/*]$/'
            res = False
            if not res:
                rep is None or rep.append(("unexpected $NONE [$.'$Obj'.'/^[@|&^+/*]$/']", lpath_6 if path is not None else None))
            if not res:
                return False
        else:
            # handle other props
            # $.'$Obj'.''
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Obj'.'']", lpath_6 if path is not None else None))
            if not res:
                return False
    return True

# check $Obj ($.'$Obj')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Obj'
    res = _jm_obj_6(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Obj']", path))
    return res

# check _jm_obj_7_may_# ($.'$Elem'.'|'.5.'#')
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Elem'.'|'.5.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Elem'.'|'.5.'#']", path))
    return res


# object $.'$Elem'.'|'.5
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Elem'.'|'.5]", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_7_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_7 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Elem'.'|'.5]", lpath_7 if path is not None else None))
                return False
        elif _jm_re_3(prop):
            # handle {len(regs)} re props
            # $.'$Elem'.'|'.5.'/^[@|&^+/*]$/'
            res = False
            if not res:
                rep is None or rep.append(("unexpected $NONE [$.'$Elem'.'|'.5.'/^[@|&^+/*]$/']", lpath_7 if path is not None else None))
            if not res:
                return False
        else:
            # handle other props
            # $.'$Elem'.'|'.5.''
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Elem'.'|'.5.'']", lpath_7 if path is not None else None))
            if not res:
                return False
    return True

# check _jm_obj_8_must_+ ($.'$Elem'.'|'.4.'+')
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Elem'.'|'.4.'+'
    res = isinstance(val, list)
    if res:
        for arr_5_idx, arr_5_item in enumerate(val):
            arr_5_lpath: Path = (path + [ arr_5_idx ]) if path is not None else None
            # $.'$Elem'.'|'.4.'+'.0
            res = json_model_17(arr_5_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Elem'.'|'.4.'+'.0]", arr_5_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Elem'.'|'.4.'+']", path))
    return res


# check _jm_obj_8_may_# ($.'$Elem'.'|'.4.'#')
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Elem'.'|'.4.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Elem'.'|'.4.'#']", path))
    return res


# object $.'$Elem'.'|'.4
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Elem'.'|'.4]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_8_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_8 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Elem'.'|'.4]", lpath_8 if path is not None else None))
                    return False
        elif pfun := _jm_obj_8_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_8 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Elem'.'|'.4]", lpath_8 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Elem'.'|'.4]", lpath_8 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Elem'.'|'.4]", path))
        return False
    return True

# check _jm_obj_9_must_^ ($.'$Elem'.'|'.3.'^')
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Elem'.'|'.3.'^'
    res = isinstance(val, list)
    if res:
        for arr_6_idx, arr_6_item in enumerate(val):
            arr_6_lpath: Path = (path + [ arr_6_idx ]) if path is not None else None
            # $.'$Elem'.'|'.3.'^'.0
            res = json_model_17(arr_6_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Elem'.'|'.3.'^'.0]", arr_6_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Elem'.'|'.3.'^']", path))
    return res


# check _jm_obj_9_may_# ($.'$Elem'.'|'.3.'#')
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Elem'.'|'.3.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Elem'.'|'.3.'#']", path))
    return res


# object $.'$Elem'.'|'.3
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Elem'.'|'.3]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_9_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_9 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Elem'.'|'.3]", lpath_9 if path is not None else None))
                    return False
        elif pfun := _jm_obj_9_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_9 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Elem'.'|'.3]", lpath_9 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Elem'.'|'.3]", lpath_9 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Elem'.'|'.3]", path))
        return False
    return True

# check _jm_obj_10_must_& ($.'$Elem'.'|'.2.'&')
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Elem'.'|'.2.'&'
    res = isinstance(val, list)
    if res:
        for arr_7_idx, arr_7_item in enumerate(val):
            arr_7_lpath: Path = (path + [ arr_7_idx ]) if path is not None else None
            # $.'$Elem'.'|'.2.'&'.0
            res = json_model_17(arr_7_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Elem'.'|'.2.'&'.0]", arr_7_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Elem'.'|'.2.'&']", path))
    return res


# check _jm_obj_10_may_# ($.'$Elem'.'|'.2.'#')
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Elem'.'|'.2.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Elem'.'|'.2.'#']", path))
    return res


# object $.'$Elem'.'|'.2
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Elem'.'|'.2]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_10_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_10 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Elem'.'|'.2]", lpath_10 if path is not None else None))
                    return False
        elif pfun := _jm_obj_10_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_10 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Elem'.'|'.2]", lpath_10 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Elem'.'|'.2]", lpath_10 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Elem'.'|'.2]", path))
        return False
    return True

# check _jm_obj_11_must_| ($.'$Elem'.'|'.1.'|')
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Elem'.'|'.1.'|'
    res = isinstance(val, list)
    if res:
        for arr_8_idx, arr_8_item in enumerate(val):
            arr_8_lpath: Path = (path + [ arr_8_idx ]) if path is not None else None
            # $.'$Elem'.'|'.1.'|'.0
            res = json_model_17(arr_8_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Elem'.'|'.1.'|'.0]", arr_8_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Elem'.'|'.1.'|']", path))
    return res


# check _jm_obj_11_may_# ($.'$Elem'.'|'.1.'#')
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Elem'.'|'.1.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Elem'.'|'.1.'#']", path))
    return res


# object $.'$Elem'.'|'.1
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Elem'.'|'.1]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_11_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_11 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Elem'.'|'.1]", lpath_11 if path is not None else None))
                    return False
        elif pfun := _jm_obj_11_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_11 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Elem'.'|'.1]", lpath_11 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Elem'.'|'.1]", lpath_11 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Elem'.'|'.1]", path))
        return False
    return True

# check _jm_obj_12_must_@ ($.'$Elem'.'|'.0.'@')
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Elem'.'|'.0.'@'
    res = json_model_17(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [$.'$Elem'.'|'.0.'@']", path))
    return res


# check _jm_obj_12_may_! ($.'$Elem'.'|'.0.'!')
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Elem'.'|'.0.'!'
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Elem'.'|'.0.'!']", path))
    return res

# check _jm_obj_12_may_# ($.'$Elem'.'|'.0.'#')
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Elem'.'|'.0.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Elem'.'|'.0.'#']", path))
    return res


# object $.'$Elem'.'|'.0
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Elem'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_12_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_12 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Elem'.'|'.0]", lpath_12 if path is not None else None))
                    return False
        elif pfun := _jm_obj_12_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_12 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Elem'.'|'.0]", lpath_12 if path is not None else None))
                return False
        elif _jm_re_1(prop):
            # handle {len(regs)} re props
            # $.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [$.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]", lpath_12 if path is not None else None))
            if not res:
                # $.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                res = isinstance(pval, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [$.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]", lpath_12 if path is not None else None))
                if not res:
                    # $.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    res = isinstance(pval, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [$.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]", lpath_12 if path is not None else None))
            if not res:
                rep is None or rep.append(("no model matched [$.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|']", lpath_12 if path is not None else None))
            if not res:
                return False
        elif _jm_re_2(prop):
            # handle {len(regs)} re props
            # $.'$Elem'.'|'.0.'/^(=|!=|≠)$/'
            res = json_model_3(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Val [$.'$Elem'.'|'.0.'/^(=|!=|≠)$/']", lpath_12 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Elem'.'|'.0]", lpath_12 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Elem'.'|'.0]", path))
        return False
    return True

# check $Elem ($.'$Elem')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Elem'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'$Elem'.'|']", path))
    if res:
        # $.'$Elem'.'|'.0
        res = _jm_obj_12(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$Elem'.'|'.0]", path))
        if not res:
            # $.'$Elem'.'|'.1
            res = _jm_obj_11(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'$Elem'.'|'.1]", path))
            if not res:
                # $.'$Elem'.'|'.2
                res = _jm_obj_10(val, path, rep)
                if not res:
                    rep is None or rep.append(("not an expected object at [$.'$Elem'.'|'.2]", path))
                if not res:
                    # $.'$Elem'.'|'.3
                    res = _jm_obj_9(val, path, rep)
                    if not res:
                        rep is None or rep.append(("not an expected object at [$.'$Elem'.'|'.3]", path))
                    if not res:
                        # $.'$Elem'.'|'.4
                        res = _jm_obj_8(val, path, rep)
                        if not res:
                            rep is None or rep.append(("not an expected object at [$.'$Elem'.'|'.4]", path))
                        if not res:
                            # $.'$Elem'.'|'.5
                            res = _jm_obj_7(val, path, rep)
                            if not res:
                                rep is None or rep.append(("not an expected object at [$.'$Elem'.'|'.5]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'$Elem'.'|']", path))
    return res

# object $.'$Trafo'.'|'.2.'*'.'|'.1
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Trafo'.'|'.2.'*'.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Trafo'.'|'.2.'*'.'|'.1.''
        res = json_model_17(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Model [$.'$Trafo'.'|'.2.'*'.'|'.1.'']", lpath_14 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_13_must_* ($.'$Trafo'.'|'.2.'*')
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Trafo'.'|'.2.'*'
    # $.'$Trafo'.'|'.2.'*'.'|'.0
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Trafo'.'|'.2.'*'.'|'.0]", path))
    if not res:
        # $.'$Trafo'.'|'.2.'*'.'|'.1
        res = _jm_obj_14(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$Trafo'.'|'.2.'*'.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Trafo'.'|'.2.'*'.'|']", path))
    return res


# check _jm_obj_13_may_# ($.'$Trafo'.'|'.2.'#')
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Trafo'.'|'.2.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Trafo'.'|'.2.'#']", path))
    return res

# check _jm_obj_13_may_/ ($.'$Trafo'.'|'.2.'/')
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Trafo'.'|'.2.'/'
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Trafo'.'|'.2.'/']", path))
    return res


# object $.'$Trafo'.'|'.2
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Trafo'.'|'.2]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_13_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_13 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Trafo'.'|'.2]", lpath_13 if path is not None else None))
                    return False
        elif pfun := _jm_obj_13_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_13 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Trafo'.'|'.2]", lpath_13 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Trafo'.'|'.2]", lpath_13 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Trafo'.'|'.2]", path))
        return False
    return True

# check _jm_obj_15_must_/ ($.'$Trafo'.'|'.1.'/')
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Trafo'.'|'.1.'/'
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Trafo'.'|'.1.'/']", path))
    return res


# check _jm_obj_15_may_# ($.'$Trafo'.'|'.1.'#')
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Trafo'.'|'.1.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Trafo'.'|'.1.'#']", path))
    return res

# object $.'$Trafo'.'|'.1.'*'.'|'.1
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Trafo'.'|'.1.'*'.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Trafo'.'|'.1.'*'.'|'.1.''
        res = json_model_17(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Model [$.'$Trafo'.'|'.1.'*'.'|'.1.'']", lpath_16 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_15_may_* ($.'$Trafo'.'|'.1.'*')
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Trafo'.'|'.1.'*'
    # $.'$Trafo'.'|'.1.'*'.'|'.0
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Trafo'.'|'.1.'*'.'|'.0]", path))
    if not res:
        # $.'$Trafo'.'|'.1.'*'.'|'.1
        res = _jm_obj_16(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$Trafo'.'|'.1.'*'.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Trafo'.'|'.1.'*'.'|']", path))
    return res


# object $.'$Trafo'.'|'.1
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Trafo'.'|'.1]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_15_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_15 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Trafo'.'|'.1]", lpath_15 if path is not None else None))
                    return False
        elif pfun := _jm_obj_15_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_15 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Trafo'.'|'.1]", lpath_15 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Trafo'.'|'.1]", lpath_15 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Trafo'.'|'.1]", path))
        return False
    return True

# check $Trafo ($.'$Trafo')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Trafo'
    # $.'$Trafo'.'|'.0
    res = json_model_17(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [$.'$Trafo'.'|'.0]", path))
    if not res:
        # $.'$Trafo'.'|'.1
        res = _jm_obj_15(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$Trafo'.'|'.1]", path))
        if not res:
            # $.'$Trafo'.'|'.2
            res = _jm_obj_13(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'$Trafo'.'|'.2]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Trafo'.'|']", path))
    return res

# check $Scalar ($.'$Scalar')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Scalar'
    # $.'$Scalar'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.'$Scalar'.'|'.0]", path))
    if not res:
        # $.'$Scalar'.'|'.1
        res = isinstance(val, bool) and val == True
        if not res:
            rep is None or rep.append(("unexpected =true [$.'$Scalar'.'|'.1]", path))
        if not res:
            # $.'$Scalar'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool) and val == 0
            if not res:
                rep is None or rep.append(("unexpected =0 [$.'$Scalar'.'|'.2]", path))
            if not res:
                # $.'$Scalar'.'|'.3
                res = isinstance(val, int) and not isinstance(val, bool) and val == 1
                if not res:
                    rep is None or rep.append(("unexpected =1 [$.'$Scalar'.'|'.3]", path))
                if not res:
                    # $.'$Scalar'.'|'.4
                    res = isinstance(val, int) and not isinstance(val, bool) and val == -1
                    if not res:
                        rep is None or rep.append(("unexpected =-1 [$.'$Scalar'.'|'.4]", path))
                    if not res:
                        # $.'$Scalar'.'|'.5
                        res = isinstance(val, float) and val == 0.0
                        if not res:
                            rep is None or rep.append(("unexpected =0.0 [$.'$Scalar'.'|'.5]", path))
                        if not res:
                            # $.'$Scalar'.'|'.6
                            res = isinstance(val, float) and val == 1.0
                            if not res:
                                rep is None or rep.append(("unexpected =1.0 [$.'$Scalar'.'|'.6]", path))
                            if not res:
                                # $.'$Scalar'.'|'.7
                                res = isinstance(val, float) and val == -1.0
                                if not res:
                                    rep is None or rep.append(("unexpected =-1.0 [$.'$Scalar'.'|'.7]", path))
                                if not res:
                                    # $.'$Scalar'.'|'.8
                                    res = isinstance(val, str)
                                    if not res:
                                        rep is None or rep.append(("unexpected string [$.'$Scalar'.'|'.8]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Scalar'.'|']", path))
    return res

# check $Model ($.'$Model')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model'
    # $.'$Model'.'|'.0
    res = json_model_16(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Scalar [$.'$Model'.'|'.0]", path))
    if not res:
        # $.'$Model'.'|'.1
        res = json_model_7(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Array [$.'$Model'.'|'.1]", path))
        if not res:
            # $.'$Model'.'|'.2
            res = json_model_14(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Elem [$.'$Model'.'|'.2]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Model'.'|']", path))
    return res

# check _jm_obj_17_may_ ($.'$Defs'.'')
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Defs'.''
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Defs'.'']", path))
    return res



# object $.'$Defs'
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Defs']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_17_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_17 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Defs']", lpath_17 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$Defs'.'/.+/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Defs'.'/.+/']", lpath_17 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Defs']", lpath_17 if path is not None else None))
            return False
    return True

# check $Defs ($.'$Defs')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Defs'
    res = _jm_obj_17(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Defs']", path))
    return res



# object $.'$Rename'
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Rename']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_5(prop):
            # handle {len(regs)} re props
            # $.'$Rename'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$Rename'.'/^\\\\..+$/']", lpath_18 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Rename']", lpath_18 if path is not None else None))
            return False
    return True

# check $Rename ($.'$Rename')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Rename'
    res = _jm_obj_18(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Rename']", path))
    return res


# object $.'$Rewrite'
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Rewrite']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_7(prop):
            # handle {len(regs)} re props
            # $.'$Rewrite'.'/^\\$.*$/'
            res = json_model_15(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$Rewrite'.'/^\\\\$.*$/']", lpath_19 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Rewrite']", lpath_19 if path is not None else None))
            return False
    return True

# check $Rewrite ($.'$Rewrite')
def json_model_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Rewrite'
    res = _jm_obj_19(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Rewrite']", path))
    return res

# check _jm_obj_21_may_ ($.'$RootOnly'.'$'.'')
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$RootOnly'.'$'.''
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$RootOnly'.'$'.'']", path))
    return res

# check _jm_obj_21_may_# ($.'$RootOnly'.'$'.'#')
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$RootOnly'.'$'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$RootOnly'.'$'.'#']", path))
    return res


# object $.'$RootOnly'.'$'
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$RootOnly'.'$']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_21_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_21 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$RootOnly'.'$']", lpath_21 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$RootOnly'.'$'.'/.+/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$RootOnly'.'$'.'/.+/']", lpath_21 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$RootOnly'.'$']", lpath_21 if path is not None else None))
            return False
    return True

# check _jm_obj_20_may_$ ($.'$RootOnly'.'$')
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$RootOnly'.'$'
    res = _jm_obj_21(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$RootOnly'.'$']", path))
    return res

# check _jm_obj_22_may_# ($.'$RootOnly'.'%'.'#')
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$RootOnly'.'%'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$RootOnly'.'%'.'#']", path))
    return res


# object $.'$RootOnly'.'%'
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$RootOnly'.'%']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_22_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_22 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$RootOnly'.'%']", lpath_22 if path is not None else None))
                return False
        elif _jm_re_5(prop):
            # handle {len(regs)} re props
            # $.'$RootOnly'.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$RootOnly'.'%'.'/^\\\\..+$/']", lpath_22 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop):
            # handle {len(regs)} re props
            # $.'$RootOnly'.'%'.'/^\\$.*$/'
            res = json_model_15(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$RootOnly'.'%'.'/^\\\\$.*$/']", lpath_22 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$RootOnly'.'%']", lpath_22 if path is not None else None))
            return False
    return True

# check _jm_obj_20_may_% ($.'$RootOnly'.'%')
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$RootOnly'.'%'
    res = _jm_obj_22(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$RootOnly'.'%']", path))
    return res

# check _jm_obj_20_may_~ ($.'$RootOnly'.'~')
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$RootOnly'.'~'
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$RootOnly'.'~']", path))
    return res


# object $.'$RootOnly'
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$RootOnly']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_20_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_20 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$RootOnly']", lpath_20 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$RootOnly']", lpath_20 if path is not None else None))
            return False
    return True

# check $RootOnly ($.'$RootOnly')
def json_model_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$RootOnly'
    res = _jm_obj_20(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$RootOnly']", path))
    return res

# check _jm_obj_23_may_# ($.'$Root'.'|'.5.'#')
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.5.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.5.'#']", path))
    return res

# check _jm_obj_24_may_ ($.'$Root'.'|'.5.'$'.'')
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.5.'$'.''
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Root'.'|'.5.'$'.'']", path))
    return res

# check _jm_obj_24_may_# ($.'$Root'.'|'.5.'$'.'#')
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.5.'$'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.5.'$'.'#']", path))
    return res


# object $.'$Root'.'|'.5.'$'
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.5.'$']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_24_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_24 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.5.'$']", lpath_24 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.5.'$'.'/.+/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Root'.'|'.5.'$'.'/.+/']", lpath_24 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.5.'$']", lpath_24 if path is not None else None))
            return False
    return True

# check _jm_obj_23_may_$ ($.'$Root'.'|'.5.'$')
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.5.'$'
    res = _jm_obj_24(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.5.'$']", path))
    return res

# check _jm_obj_25_may_# ($.'$Root'.'|'.5.'%'.'#')
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.5.'%'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.5.'%'.'#']", path))
    return res


# object $.'$Root'.'|'.5.'%'
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.5.'%']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_25_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_25 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.5.'%']", lpath_25 if path is not None else None))
                return False
        elif _jm_re_5(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.5.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$Root'.'|'.5.'%'.'/^\\\\..+$/']", lpath_25 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.5.'%'.'/^\\$.*$/'
            res = json_model_15(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$Root'.'|'.5.'%'.'/^\\\\$.*$/']", lpath_25 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.5.'%']", lpath_25 if path is not None else None))
            return False
    return True

# check _jm_obj_23_may_% ($.'$Root'.'|'.5.'%')
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.5.'%'
    res = _jm_obj_25(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.5.'%']", path))
    return res

# check _jm_obj_23_may_~ ($.'$Root'.'|'.5.'~')
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.5.'~'
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Root'.'|'.5.'~']", path))
    return res


# object $.'$Root'.'|'.5
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.5]", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_23_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_23 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.5]", lpath_23 if path is not None else None))
                return False
        elif _jm_re_3(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.5.'/^[@|&^+/*]$/'
            res = False
            if not res:
                rep is None or rep.append(("unexpected $NONE [$.'$Root'.'|'.5.'/^[@|&^+/*]$/']", lpath_23 if path is not None else None))
            if not res:
                return False
        else:
            # handle other props
            # $.'$Root'.'|'.5.''
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Root'.'|'.5.'']", lpath_23 if path is not None else None))
            if not res:
                return False
    return True

# check _jm_obj_26_must_+ ($.'$Root'.'|'.4.'+')
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.4.'+'
    res = isinstance(val, list)
    if res:
        for arr_9_idx, arr_9_item in enumerate(val):
            arr_9_lpath: Path = (path + [ arr_9_idx ]) if path is not None else None
            # $.'$Root'.'|'.4.'+'.0
            res = json_model_17(arr_9_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Root'.'|'.4.'+'.0]", arr_9_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Root'.'|'.4.'+']", path))
    return res


# check _jm_obj_26_may_# ($.'$Root'.'|'.4.'#')
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.4.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.4.'#']", path))
    return res

# check _jm_obj_27_may_ ($.'$Root'.'|'.4.'$'.'')
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.4.'$'.''
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Root'.'|'.4.'$'.'']", path))
    return res

# check _jm_obj_27_may_# ($.'$Root'.'|'.4.'$'.'#')
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.4.'$'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.4.'$'.'#']", path))
    return res


# object $.'$Root'.'|'.4.'$'
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.4.'$']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_27_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_27 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.4.'$']", lpath_27 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.4.'$'.'/.+/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Root'.'|'.4.'$'.'/.+/']", lpath_27 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.4.'$']", lpath_27 if path is not None else None))
            return False
    return True

# check _jm_obj_26_may_$ ($.'$Root'.'|'.4.'$')
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.4.'$'
    res = _jm_obj_27(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.4.'$']", path))
    return res

# check _jm_obj_28_may_# ($.'$Root'.'|'.4.'%'.'#')
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.4.'%'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.4.'%'.'#']", path))
    return res


# object $.'$Root'.'|'.4.'%'
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.4.'%']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_28_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_28 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.4.'%']", lpath_28 if path is not None else None))
                return False
        elif _jm_re_5(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.4.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$Root'.'|'.4.'%'.'/^\\\\..+$/']", lpath_28 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.4.'%'.'/^\\$.*$/'
            res = json_model_15(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$Root'.'|'.4.'%'.'/^\\\\$.*$/']", lpath_28 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.4.'%']", lpath_28 if path is not None else None))
            return False
    return True

# check _jm_obj_26_may_% ($.'$Root'.'|'.4.'%')
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.4.'%'
    res = _jm_obj_28(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.4.'%']", path))
    return res

# check _jm_obj_26_may_~ ($.'$Root'.'|'.4.'~')
def _jm_f_46(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.4.'~'
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Root'.'|'.4.'~']", path))
    return res


# object $.'$Root'.'|'.4
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.4]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_26_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_26 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Root'.'|'.4]", lpath_26 if path is not None else None))
                    return False
        elif pfun := _jm_obj_26_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_26 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.4]", lpath_26 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.4]", lpath_26 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Root'.'|'.4]", path))
        return False
    return True

# check _jm_obj_29_must_^ ($.'$Root'.'|'.3.'^')
def _jm_f_47(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.3.'^'
    res = isinstance(val, list)
    if res:
        for arr_10_idx, arr_10_item in enumerate(val):
            arr_10_lpath: Path = (path + [ arr_10_idx ]) if path is not None else None
            # $.'$Root'.'|'.3.'^'.0
            res = json_model_17(arr_10_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Root'.'|'.3.'^'.0]", arr_10_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Root'.'|'.3.'^']", path))
    return res


# check _jm_obj_29_may_# ($.'$Root'.'|'.3.'#')
def _jm_f_48(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.3.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.3.'#']", path))
    return res

# check _jm_obj_30_may_ ($.'$Root'.'|'.3.'$'.'')
def _jm_f_50(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.3.'$'.''
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Root'.'|'.3.'$'.'']", path))
    return res

# check _jm_obj_30_may_# ($.'$Root'.'|'.3.'$'.'#')
def _jm_f_51(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.3.'$'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.3.'$'.'#']", path))
    return res


# object $.'$Root'.'|'.3.'$'
def _jm_obj_30(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.3.'$']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_30_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_30 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.3.'$']", lpath_30 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.3.'$'.'/.+/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Root'.'|'.3.'$'.'/.+/']", lpath_30 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.3.'$']", lpath_30 if path is not None else None))
            return False
    return True

# check _jm_obj_29_may_$ ($.'$Root'.'|'.3.'$')
def _jm_f_49(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.3.'$'
    res = _jm_obj_30(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.3.'$']", path))
    return res

# check _jm_obj_31_may_# ($.'$Root'.'|'.3.'%'.'#')
def _jm_f_53(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.3.'%'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.3.'%'.'#']", path))
    return res


# object $.'$Root'.'|'.3.'%'
def _jm_obj_31(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.3.'%']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_31_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_31 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.3.'%']", lpath_31 if path is not None else None))
                return False
        elif _jm_re_5(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.3.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$Root'.'|'.3.'%'.'/^\\\\..+$/']", lpath_31 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.3.'%'.'/^\\$.*$/'
            res = json_model_15(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$Root'.'|'.3.'%'.'/^\\\\$.*$/']", lpath_31 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.3.'%']", lpath_31 if path is not None else None))
            return False
    return True

# check _jm_obj_29_may_% ($.'$Root'.'|'.3.'%')
def _jm_f_52(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.3.'%'
    res = _jm_obj_31(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.3.'%']", path))
    return res

# check _jm_obj_29_may_~ ($.'$Root'.'|'.3.'~')
def _jm_f_54(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.3.'~'
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Root'.'|'.3.'~']", path))
    return res


# object $.'$Root'.'|'.3
def _jm_obj_29(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.3]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_29_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_29 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Root'.'|'.3]", lpath_29 if path is not None else None))
                    return False
        elif pfun := _jm_obj_29_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_29 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.3]", lpath_29 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.3]", lpath_29 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Root'.'|'.3]", path))
        return False
    return True

# check _jm_obj_32_must_& ($.'$Root'.'|'.2.'&')
def _jm_f_55(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.2.'&'
    res = isinstance(val, list)
    if res:
        for arr_11_idx, arr_11_item in enumerate(val):
            arr_11_lpath: Path = (path + [ arr_11_idx ]) if path is not None else None
            # $.'$Root'.'|'.2.'&'.0
            res = json_model_17(arr_11_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Root'.'|'.2.'&'.0]", arr_11_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Root'.'|'.2.'&']", path))
    return res


# check _jm_obj_32_may_# ($.'$Root'.'|'.2.'#')
def _jm_f_56(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.2.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.2.'#']", path))
    return res

# check _jm_obj_33_may_ ($.'$Root'.'|'.2.'$'.'')
def _jm_f_58(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.2.'$'.''
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Root'.'|'.2.'$'.'']", path))
    return res

# check _jm_obj_33_may_# ($.'$Root'.'|'.2.'$'.'#')
def _jm_f_59(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.2.'$'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.2.'$'.'#']", path))
    return res


# object $.'$Root'.'|'.2.'$'
def _jm_obj_33(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.2.'$']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_33_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_33 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.2.'$']", lpath_33 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.2.'$'.'/.+/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Root'.'|'.2.'$'.'/.+/']", lpath_33 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.2.'$']", lpath_33 if path is not None else None))
            return False
    return True

# check _jm_obj_32_may_$ ($.'$Root'.'|'.2.'$')
def _jm_f_57(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.2.'$'
    res = _jm_obj_33(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.2.'$']", path))
    return res

# check _jm_obj_34_may_# ($.'$Root'.'|'.2.'%'.'#')
def _jm_f_61(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.2.'%'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.2.'%'.'#']", path))
    return res


# object $.'$Root'.'|'.2.'%'
def _jm_obj_34(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.2.'%']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_34_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_34 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.2.'%']", lpath_34 if path is not None else None))
                return False
        elif _jm_re_5(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.2.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$Root'.'|'.2.'%'.'/^\\\\..+$/']", lpath_34 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.2.'%'.'/^\\$.*$/'
            res = json_model_15(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$Root'.'|'.2.'%'.'/^\\\\$.*$/']", lpath_34 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.2.'%']", lpath_34 if path is not None else None))
            return False
    return True

# check _jm_obj_32_may_% ($.'$Root'.'|'.2.'%')
def _jm_f_60(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.2.'%'
    res = _jm_obj_34(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.2.'%']", path))
    return res

# check _jm_obj_32_may_~ ($.'$Root'.'|'.2.'~')
def _jm_f_62(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.2.'~'
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Root'.'|'.2.'~']", path))
    return res


# object $.'$Root'.'|'.2
def _jm_obj_32(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.2]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_32_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_32 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Root'.'|'.2]", lpath_32 if path is not None else None))
                    return False
        elif pfun := _jm_obj_32_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_32 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.2]", lpath_32 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.2]", lpath_32 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Root'.'|'.2]", path))
        return False
    return True

# check _jm_obj_35_must_| ($.'$Root'.'|'.1.'|')
def _jm_f_63(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.1.'|'
    res = isinstance(val, list)
    if res:
        for arr_12_idx, arr_12_item in enumerate(val):
            arr_12_lpath: Path = (path + [ arr_12_idx ]) if path is not None else None
            # $.'$Root'.'|'.1.'|'.0
            res = json_model_17(arr_12_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Root'.'|'.1.'|'.0]", arr_12_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Root'.'|'.1.'|']", path))
    return res


# check _jm_obj_35_may_# ($.'$Root'.'|'.1.'#')
def _jm_f_64(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.1.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.1.'#']", path))
    return res

# check _jm_obj_36_may_ ($.'$Root'.'|'.1.'$'.'')
def _jm_f_66(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.1.'$'.''
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Root'.'|'.1.'$'.'']", path))
    return res

# check _jm_obj_36_may_# ($.'$Root'.'|'.1.'$'.'#')
def _jm_f_67(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.1.'$'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.1.'$'.'#']", path))
    return res


# object $.'$Root'.'|'.1.'$'
def _jm_obj_36(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.1.'$']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_36: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_36_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_36 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.1.'$']", lpath_36 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.1.'$'.'/.+/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Root'.'|'.1.'$'.'/.+/']", lpath_36 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.1.'$']", lpath_36 if path is not None else None))
            return False
    return True

# check _jm_obj_35_may_$ ($.'$Root'.'|'.1.'$')
def _jm_f_65(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.1.'$'
    res = _jm_obj_36(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.1.'$']", path))
    return res

# check _jm_obj_37_may_# ($.'$Root'.'|'.1.'%'.'#')
def _jm_f_69(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.1.'%'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.1.'%'.'#']", path))
    return res


# object $.'$Root'.'|'.1.'%'
def _jm_obj_37(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.1.'%']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_37: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_37_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_37 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.1.'%']", lpath_37 if path is not None else None))
                return False
        elif _jm_re_5(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.1.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$Root'.'|'.1.'%'.'/^\\\\..+$/']", lpath_37 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.1.'%'.'/^\\$.*$/'
            res = json_model_15(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$Root'.'|'.1.'%'.'/^\\\\$.*$/']", lpath_37 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.1.'%']", lpath_37 if path is not None else None))
            return False
    return True

# check _jm_obj_35_may_% ($.'$Root'.'|'.1.'%')
def _jm_f_68(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.1.'%'
    res = _jm_obj_37(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.1.'%']", path))
    return res

# check _jm_obj_35_may_~ ($.'$Root'.'|'.1.'~')
def _jm_f_70(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.1.'~'
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Root'.'|'.1.'~']", path))
    return res


# object $.'$Root'.'|'.1
def _jm_obj_35(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.1]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_35_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_35 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Root'.'|'.1]", lpath_35 if path is not None else None))
                    return False
        elif pfun := _jm_obj_35_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_35 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.1]", lpath_35 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.1]", lpath_35 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Root'.'|'.1]", path))
        return False
    return True

# check _jm_obj_38_must_@ ($.'$Root'.'|'.0.'@')
def _jm_f_71(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.0.'@'
    res = json_model_17(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [$.'$Root'.'|'.0.'@']", path))
    return res


# check _jm_obj_38_may_! ($.'$Root'.'|'.0.'!')
def _jm_f_72(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.0.'!'
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Root'.'|'.0.'!']", path))
    return res

# check _jm_obj_38_may_# ($.'$Root'.'|'.0.'#')
def _jm_f_73(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.0.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.0.'#']", path))
    return res

# check _jm_obj_39_may_ ($.'$Root'.'|'.0.'$'.'')
def _jm_f_75(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.0.'$'.''
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Root'.'|'.0.'$'.'']", path))
    return res

# check _jm_obj_39_may_# ($.'$Root'.'|'.0.'$'.'#')
def _jm_f_76(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.0.'$'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.0.'$'.'#']", path))
    return res


# object $.'$Root'.'|'.0.'$'
def _jm_obj_39(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.0.'$']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_39: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_39_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_39 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.0.'$']", lpath_39 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.0.'$'.'/.+/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Root'.'|'.0.'$'.'/.+/']", lpath_39 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.0.'$']", lpath_39 if path is not None else None))
            return False
    return True

# check _jm_obj_38_may_$ ($.'$Root'.'|'.0.'$')
def _jm_f_74(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.0.'$'
    res = _jm_obj_39(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.0.'$']", path))
    return res

# check _jm_obj_40_may_# ($.'$Root'.'|'.0.'%'.'#')
def _jm_f_78(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.0.'%'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.0.'%'.'#']", path))
    return res


# object $.'$Root'.'|'.0.'%'
def _jm_obj_40(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.0.'%']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_40: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_40_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_40 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.0.'%']", lpath_40 if path is not None else None))
                return False
        elif _jm_re_5(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.0.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$Root'.'|'.0.'%'.'/^\\\\..+$/']", lpath_40 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.0.'%'.'/^\\$.*$/'
            res = json_model_15(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$Root'.'|'.0.'%'.'/^\\\\$.*$/']", lpath_40 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.0.'%']", lpath_40 if path is not None else None))
            return False
    return True

# check _jm_obj_38_may_% ($.'$Root'.'|'.0.'%')
def _jm_f_77(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.0.'%'
    res = _jm_obj_40(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.0.'%']", path))
    return res

# check _jm_obj_38_may_~ ($.'$Root'.'|'.0.'~')
def _jm_f_79(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'.'|'.0.'~'
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Root'.'|'.0.'~']", path))
    return res


# object $.'$Root'.'|'.0
def _jm_obj_38(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Root'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_38: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_38_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_38 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Root'.'|'.0]", lpath_38 if path is not None else None))
                    return False
        elif pfun := _jm_obj_38_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_38 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Root'.'|'.0]", lpath_38 if path is not None else None))
                return False
        elif _jm_re_1(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [$.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]", lpath_38 if path is not None else None))
            if not res:
                # $.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                res = isinstance(pval, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [$.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]", lpath_38 if path is not None else None))
                if not res:
                    # $.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    res = isinstance(pval, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [$.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("no model matched [$.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|']", lpath_38 if path is not None else None))
            if not res:
                return False
        elif _jm_re_2(prop):
            # handle {len(regs)} re props
            # $.'$Root'.'|'.0.'/^(=|!=|≠)$/'
            res = json_model_3(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Val [$.'$Root'.'|'.0.'/^(=|!=|≠)$/']", lpath_38 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Root'.'|'.0]", lpath_38 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Root'.'|'.0]", path))
        return False
    return True

# check $Root ($.'$Root')
def json_model_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Root'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'$Root'.'|']", path))
    if res:
        # $.'$Root'.'|'.0
        res = _jm_obj_38(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.0]", path))
        if not res:
            # $.'$Root'.'|'.1
            res = _jm_obj_35(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.1]", path))
            if not res:
                # $.'$Root'.'|'.2
                res = _jm_obj_32(val, path, rep)
                if not res:
                    rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.2]", path))
                if not res:
                    # $.'$Root'.'|'.3
                    res = _jm_obj_29(val, path, rep)
                    if not res:
                        rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.3]", path))
                    if not res:
                        # $.'$Root'.'|'.4
                        res = _jm_obj_26(val, path, rep)
                        if not res:
                            rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.4]", path))
                        if not res:
                            # $.'$Root'.'|'.5
                            res = _jm_obj_23(val, path, rep)
                            if not res:
                                rep is None or rep.append(("not an expected object at [$.'$Root'.'|'.5]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'$Root'.'|']", path))
    return res

# check $RootModel ($.'$RootModel')
def json_model_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$RootModel'
    # $.'$RootModel'.'|'.0
    res = json_model_16(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Scalar [$.'$RootModel'.'|'.0]", path))
    if not res:
        # $.'$RootModel'.'|'.1
        res = json_model_7(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Array [$.'$RootModel'.'|'.1]", path))
        if not res:
            # $.'$RootModel'.'|'.2
            res = json_model_22(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Root [$.'$RootModel'.'|'.2]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$RootModel'.'|']", path))
    return res

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = json_model_23(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $RootModel [$]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_re_0_search, _jm_re_0
        _jm_re_0_search = re.compile("^((file|https?)://.+|\\./.*|\\.\\./.*)$").search
        _jm_re_0 = lambda s: _jm_re_0_search(s) is not None
        global _jm_obj_0_may
        _jm_obj_0_may = {
            "#": _jm_f_0,
        }
        global _jm_obj_1_must
        _jm_obj_1_must = {
            "@": _jm_f_1,
        }
        global _jm_obj_1_may
        _jm_obj_1_may = {
            "!": _jm_f_2,
        }
        global _jm_re_1_search, _jm_re_1
        _jm_re_1_search = re.compile("^(<=|>=|<|>|≥|≤)$").search
        _jm_re_1 = lambda s: _jm_re_1_search(s) is not None
        global _jm_re_2_search, _jm_re_2
        _jm_re_2_search = re.compile("^(=|!=|≠)$").search
        _jm_re_2 = lambda s: _jm_re_2_search(s) is not None
        global _jm_obj_2_must
        _jm_obj_2_must = {
            "|": _jm_f_3,
        }
        global _jm_obj_3_must
        _jm_obj_3_must = {
            "&": _jm_f_4,
        }
        global _jm_obj_4_must
        _jm_obj_4_must = {
            "^": _jm_f_5,
        }
        global _jm_obj_5_must
        _jm_obj_5_must = {
            "+": _jm_f_6,
        }
        global _jm_re_3_search, _jm_re_3
        _jm_re_3_search = re.compile("^[@|&^+/*]$").search
        _jm_re_3 = lambda s: _jm_re_3_search(s) is not None
        global _jm_obj_7_may
        _jm_obj_7_may = {
            "#": _jm_f_7,
        }
        global _jm_obj_8_must
        _jm_obj_8_must = {
            "+": _jm_f_8,
        }
        global _jm_obj_8_may
        _jm_obj_8_may = {
            "#": _jm_f_9,
        }
        global _jm_obj_9_must
        _jm_obj_9_must = {
            "^": _jm_f_10,
        }
        global _jm_obj_9_may
        _jm_obj_9_may = {
            "#": _jm_f_11,
        }
        global _jm_obj_10_must
        _jm_obj_10_must = {
            "&": _jm_f_12,
        }
        global _jm_obj_10_may
        _jm_obj_10_may = {
            "#": _jm_f_13,
        }
        global _jm_obj_11_must
        _jm_obj_11_must = {
            "|": _jm_f_14,
        }
        global _jm_obj_11_may
        _jm_obj_11_may = {
            "#": _jm_f_15,
        }
        global _jm_obj_12_must
        _jm_obj_12_must = {
            "@": _jm_f_16,
        }
        global _jm_obj_12_may
        _jm_obj_12_may = {
            "!": _jm_f_17,
            "#": _jm_f_18,
        }
        global _jm_obj_13_must
        _jm_obj_13_must = {
            "*": _jm_f_19,
        }
        global _jm_obj_13_may
        _jm_obj_13_may = {
            "#": _jm_f_20,
            "/": _jm_f_21,
        }
        global _jm_obj_15_must
        _jm_obj_15_must = {
            "/": _jm_f_22,
        }
        global _jm_obj_15_may
        _jm_obj_15_may = {
            "#": _jm_f_23,
            "*": _jm_f_24,
        }
        global _jm_obj_17_may
        _jm_obj_17_may = {
            "": _jm_f_25,
        }
        global _jm_re_4_search, _jm_re_4
        _jm_re_4_search = re.compile(".+").search
        _jm_re_4 = lambda s: _jm_re_4_search(s) is not None
        global _jm_re_5_search, _jm_re_5
        _jm_re_5_search = re.compile("^\\..+$").search
        _jm_re_5 = lambda s: _jm_re_5_search(s) is not None
        global _jm_re_6_search, _jm_re_6
        _jm_re_6_search = re.compile("^([#|&^+/*@~=$%]|[<>!]=?)$").search
        _jm_re_6 = lambda s: _jm_re_6_search(s) is not None
        global _jm_re_7_search, _jm_re_7
        _jm_re_7_search = re.compile("^\\$.*$").search
        _jm_re_7 = lambda s: _jm_re_7_search(s) is not None
        global _jm_obj_21_may
        _jm_obj_21_may = {
            "": _jm_f_27,
            "#": _jm_f_28,
        }
        global _jm_obj_22_may
        _jm_obj_22_may = {
            "#": _jm_f_30,
        }
        global _jm_obj_20_may
        _jm_obj_20_may = {
            "$": _jm_f_26,
            "%": _jm_f_29,
            "~": _jm_f_31,
        }
        global _jm_obj_24_may
        _jm_obj_24_may = {
            "": _jm_f_34,
            "#": _jm_f_35,
        }
        global _jm_obj_25_may
        _jm_obj_25_may = {
            "#": _jm_f_37,
        }
        global _jm_obj_23_may
        _jm_obj_23_may = {
            "#": _jm_f_32,
            "$": _jm_f_33,
            "%": _jm_f_36,
            "~": _jm_f_38,
        }
        global _jm_obj_26_must
        _jm_obj_26_must = {
            "+": _jm_f_39,
        }
        global _jm_obj_27_may
        _jm_obj_27_may = {
            "": _jm_f_42,
            "#": _jm_f_43,
        }
        global _jm_obj_28_may
        _jm_obj_28_may = {
            "#": _jm_f_45,
        }
        global _jm_obj_26_may
        _jm_obj_26_may = {
            "#": _jm_f_40,
            "$": _jm_f_41,
            "%": _jm_f_44,
            "~": _jm_f_46,
        }
        global _jm_obj_29_must
        _jm_obj_29_must = {
            "^": _jm_f_47,
        }
        global _jm_obj_30_may
        _jm_obj_30_may = {
            "": _jm_f_50,
            "#": _jm_f_51,
        }
        global _jm_obj_31_may
        _jm_obj_31_may = {
            "#": _jm_f_53,
        }
        global _jm_obj_29_may
        _jm_obj_29_may = {
            "#": _jm_f_48,
            "$": _jm_f_49,
            "%": _jm_f_52,
            "~": _jm_f_54,
        }
        global _jm_obj_32_must
        _jm_obj_32_must = {
            "&": _jm_f_55,
        }
        global _jm_obj_33_may
        _jm_obj_33_may = {
            "": _jm_f_58,
            "#": _jm_f_59,
        }
        global _jm_obj_34_may
        _jm_obj_34_may = {
            "#": _jm_f_61,
        }
        global _jm_obj_32_may
        _jm_obj_32_may = {
            "#": _jm_f_56,
            "$": _jm_f_57,
            "%": _jm_f_60,
            "~": _jm_f_62,
        }
        global _jm_obj_35_must
        _jm_obj_35_must = {
            "|": _jm_f_63,
        }
        global _jm_obj_36_may
        _jm_obj_36_may = {
            "": _jm_f_66,
            "#": _jm_f_67,
        }
        global _jm_obj_37_may
        _jm_obj_37_may = {
            "#": _jm_f_69,
        }
        global _jm_obj_35_may
        _jm_obj_35_may = {
            "#": _jm_f_64,
            "$": _jm_f_65,
            "%": _jm_f_68,
            "~": _jm_f_70,
        }
        global _jm_obj_38_must
        _jm_obj_38_must = {
            "@": _jm_f_71,
        }
        global _jm_obj_39_may
        _jm_obj_39_may = {
            "": _jm_f_75,
            "#": _jm_f_76,
        }
        global _jm_obj_40_may
        _jm_obj_40_may = {
            "#": _jm_f_78,
        }
        global _jm_obj_38_may
        _jm_obj_38_may = {
            "!": _jm_f_72,
            "#": _jm_f_73,
            "$": _jm_f_74,
            "%": _jm_f_77,
            "~": _jm_f_79,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "Url": json_model_2,
            "Val": json_model_3,
            "Any": json_model_4,
            "None": json_model_5,
            "Common": json_model_6,
            "Array": json_model_7,
            "Constraint": json_model_8,
            "Or": json_model_9,
            "And": json_model_10,
            "Xor": json_model_11,
            "Add": json_model_12,
            "Obj": json_model_13,
            "Elem": json_model_14,
            "Trafo": json_model_15,
            "Scalar": json_model_16,
            "Model": json_model_17,
            "Defs": json_model_18,
            "Rename": json_model_19,
            "Rewrite": json_model_20,
            "RootOnly": json_model_21,
            "Root": json_model_22,
            "RootModel": json_model_23,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_search, _jm_re_0
        _jm_re_0_search = None
        _jm_re_0 = None
        global _jm_re_1_search, _jm_re_1
        _jm_re_1_search = None
        _jm_re_1 = None
        global _jm_re_2_search, _jm_re_2
        _jm_re_2_search = None
        _jm_re_2 = None
        global _jm_re_3_search, _jm_re_3
        _jm_re_3_search = None
        _jm_re_3 = None
        global _jm_re_4_search, _jm_re_4
        _jm_re_4_search = None
        _jm_re_4 = None
        global _jm_re_5_search, _jm_re_5
        _jm_re_5_search = None
        _jm_re_5 = None
        global _jm_re_6_search, _jm_re_6
        _jm_re_6_search = None
        _jm_re_6 = None
        global _jm_re_7_search, _jm_re_7
        _jm_re_7_search = None
        _jm_re_7 = None


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
