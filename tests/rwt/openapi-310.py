# Generated for model: ./openapi-310.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

json_model_1_must: PropMap
json_model_1_may: PropMap
# regex "/^x\\-.*$/"
jm_re_0 = re.compile("^x\\-.*$").search
json_model_2_must: PropMap
json_model_2_may: PropMap
json_model_3_may: PropMap
jm_obj_0_must: PropMap
jm_obj_1_must: PropMap
json_model_5_must: PropMap
json_model_5_may: PropMap
json_model_6_must: PropMap
json_model_6_may: PropMap
json_model_7_may: PropMap
# regex "/^//"
jm_re_1 = re.compile("^/").search
json_model_9_may: PropMap
json_model_10_may: PropMap
json_model_11_must: PropMap
json_model_11_may: PropMap
json_model_12_may: PropMap
json_model_13_must: PropMap
json_model_13_may: PropMap
json_model_14_may: PropMap
json_model_15_may: PropMap
json_model_16_may: PropMap
json_model_17_may: PropMap
# regex "/^[1-5](\\d\\d|XX)$/"
jm_re_2 = re.compile("^[1-5](\\d\\d|XX)$").search
json_model_18_may: PropMap
json_model_20_may: PropMap
# regex "/\\{.*\\}/"
jm_re_3 = re.compile("\\{.*\\}").search
jm_obj_2_must: PropMap
jm_obj_2_may: PropMap
jm_obj_3_must: PropMap
jm_obj_3_may: PropMap
json_model_24_must: PropMap
json_model_24_may: PropMap
json_model_25_must: PropMap
json_model_25_may: PropMap
json_model_27_may: PropMap
json_model_28_must: PropMap
json_model_28_may: PropMap
json_model_29_may: PropMap
json_model_30_must: PropMap
json_model_30_may: PropMap
json_model_31_may: PropMap
json_model_32_must: PropMap
json_model_32_may: PropMap
json_model_73_may: PropMap

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False

# define "json_model_1_must_openapi" ($.OpenAPI.openapi)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.OpenAPI.openapi
    result = isinstance(value, str)
    return result

# define "json_model_1_must_info" ($.OpenAPI.info)
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.OpenAPI.info
    result = json_model_2(value, path)
    return result

# define "json_model_1_may_jsonSchemaDialect" ($.OpenAPI.jsonSchemaDialect)
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.OpenAPI.jsonSchemaDialect
    result = isinstance(value, str)
    return result

# define "json_model_1_may_servers" ($.OpenAPI.servers)
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.OpenAPI.servers
    result = isinstance(value, list)
    if result:
        for array_0_idx, array_0_item in enumerate(value):
            # $.OpenAPI.servers.0
            result = json_model_5(array_0_item, path)
            if not result: break
    return result

# define "json_model_1_may_paths" ($.OpenAPI.paths)
def jm_f_4(value: Jsonable, path: str) -> bool:
    # $.OpenAPI.paths
    result = json_model_8(value, path)
    return result



# define "json_model_1_may_component" ($.OpenAPI.component)
def jm_f_6(value: Jsonable, path: str) -> bool:
    # $.OpenAPI.component
    result = json_model_7(value, path)
    return result

# define "json_model_1_may_security" ($.OpenAPI.security)
def jm_f_7(value: Jsonable, path: str) -> bool:
    # $.OpenAPI.security
    result = json_model_33(value, path)
    return result

# define "json_model_1_may_tags" ($.OpenAPI.tags)
def jm_f_8(value: Jsonable, path: str) -> bool:
    # $.OpenAPI.tags
    result = isinstance(value, list)
    if result:
        for array_1_idx, array_1_item in enumerate(value):
            # $.OpenAPI.tags.0
            result = json_model_24(array_1_item, path)
            if not result: break
    return result

# define "json_model_1_may_externalDocs" ($.OpenAPI.externalDocs)
def jm_f_9(value: Jsonable, path: str) -> bool:
    # $.OpenAPI.externalDocs
    result = json_model_11(value, path)
    return result

# define "json_model_2_must_title" ($.Info.title)
def jm_f_10(value: Jsonable, path: str) -> bool:
    # $.Info.title
    result = isinstance(value, str)
    return result

# define "json_model_2_must_version" ($.Info.version)
def jm_f_11(value: Jsonable, path: str) -> bool:
    # $.Info.version
    result = isinstance(value, str)
    return result

# define "json_model_2_may_summary" ($.Info.summary)
def jm_f_12(value: Jsonable, path: str) -> bool:
    # $.Info.summary
    result = isinstance(value, str)
    return result

# define "json_model_2_may_description" ($.Info.description)
def jm_f_13(value: Jsonable, path: str) -> bool:
    # $.Info.description
    result = isinstance(value, str)
    return result

# define "json_model_2_may_termsOfService" ($.Info.termsOfService)
def jm_f_14(value: Jsonable, path: str) -> bool:
    # $.Info.termsOfService
    result = isinstance(value, str)
    return result

# define "json_model_2_may_contact" ($.Info.contact)
def jm_f_15(value: Jsonable, path: str) -> bool:
    # $.Info.contact
    result = json_model_3(value, path)
    return result

# define "json_model_2_may_license" ($.Info.license)
def jm_f_16(value: Jsonable, path: str) -> bool:
    # $.Info.license
    result = json_model_4(value, path)
    return result

# define "json_model_3_may_name" ($.Contact.name)
def jm_f_17(value: Jsonable, path: str) -> bool:
    # $.Contact.name
    result = isinstance(value, str)
    return result

# define "json_model_3_may_url" ($.Contact.url)
def jm_f_18(value: Jsonable, path: str) -> bool:
    # $.Contact.url
    result = is_valid_url(value, path)
    return result

# define "json_model_3_may_email" ($.Contact.email)
def jm_f_19(value: Jsonable, path: str) -> bool:
    # $.Contact.email
    result = isinstance(value, str)
    return result

# define "jm_obj_0_must_name" ($.License.'|'.0.name)
def jm_f_20(value: Jsonable, path: str) -> bool:
    # $.License.'|'.0.name
    result = isinstance(value, str)
    return result

# define "jm_obj_0_must_identifier" ($.License.'|'.0.identifier)
def jm_f_21(value: Jsonable, path: str) -> bool:
    # $.License.'|'.0.identifier
    result = isinstance(value, str)
    return result

# define "jm_obj_1_must_name" ($.License.'|'.1.name)
def jm_f_22(value: Jsonable, path: str) -> bool:
    # $.License.'|'.1.name
    result = isinstance(value, str)
    return result

# define "jm_obj_1_must_url" ($.License.'|'.1.url)
def jm_f_23(value: Jsonable, path: str) -> bool:
    # $.License.'|'.1.url
    result = is_valid_url(value, path)
    return result

# define "json_model_5_must_url" ($.Server.url)
def jm_f_24(value: Jsonable, path: str) -> bool:
    # $.Server.url
    result = is_valid_url(value, path)
    return result

# define "json_model_5_may_description" ($.Server.description)
def jm_f_25(value: Jsonable, path: str) -> bool:
    # $.Server.description
    result = isinstance(value, str)
    return result



# define "json_model_6_must_default" ($.ServerVariable.default)
def jm_f_27(value: Jsonable, path: str) -> bool:
    # $.ServerVariable.default
    result = isinstance(value, str)
    return result

# define "json_model_6_may_enum" ($.ServerVariable.enum)
def jm_f_28(value: Jsonable, path: str) -> bool:
    # $.ServerVariable.enum
    result = isinstance(value, list)
    if result:
        for array_2_idx, array_2_item in enumerate(value):
            # $.ServerVariable.enum.0
            result = isinstance(array_2_item, str)
            if not result: break
    return result

# define "json_model_6_may_description" ($.ServerVariable.description)
def jm_f_29(value: Jsonable, path: str) -> bool:
    # $.ServerVariable.description
    result = isinstance(value, str)
    return result





















# define "json_model_9_may_$ref" ($.PathItem.'$ref')
def jm_f_40(value: Jsonable, path: str) -> bool:
    # $.PathItem.'$ref'
    result = isinstance(value, str)
    return result

# define "json_model_9_may_summary" ($.PathItem.summary)
def jm_f_41(value: Jsonable, path: str) -> bool:
    # $.PathItem.summary
    result = isinstance(value, str)
    return result

# define "json_model_9_may_description" ($.PathItem.description)
def jm_f_42(value: Jsonable, path: str) -> bool:
    # $.PathItem.description
    result = isinstance(value, str)
    return result

# define "json_model_9_may_get" ($.PathItem.get)
def jm_f_43(value: Jsonable, path: str) -> bool:
    # $.PathItem.get
    result = json_model_10(value, path)
    return result

# define "json_model_9_may_put" ($.PathItem.put)
def jm_f_44(value: Jsonable, path: str) -> bool:
    # $.PathItem.put
    result = json_model_10(value, path)
    return result

# define "json_model_9_may_post" ($.PathItem.post)
def jm_f_45(value: Jsonable, path: str) -> bool:
    # $.PathItem.post
    result = json_model_10(value, path)
    return result

# define "json_model_9_may_options" ($.PathItem.options)
def jm_f_46(value: Jsonable, path: str) -> bool:
    # $.PathItem.options
    result = json_model_10(value, path)
    return result

# define "json_model_9_may_head" ($.PathItem.head)
def jm_f_47(value: Jsonable, path: str) -> bool:
    # $.PathItem.head
    result = json_model_10(value, path)
    return result

# define "json_model_9_may_patch" ($.PathItem.patch)
def jm_f_48(value: Jsonable, path: str) -> bool:
    # $.PathItem.patch
    result = json_model_10(value, path)
    return result

# define "json_model_9_may_trace" ($.PathItem.trace)
def jm_f_49(value: Jsonable, path: str) -> bool:
    # $.PathItem.trace
    result = json_model_10(value, path)
    return result

# define "json_model_9_may_servers" ($.PathItem.servers)
def jm_f_50(value: Jsonable, path: str) -> bool:
    # $.PathItem.servers
    result = json_model_10(value, path)
    return result



# define "json_model_10_may_tags" ($.Operation.tags)
def jm_f_52(value: Jsonable, path: str) -> bool:
    # $.Operation.tags
    result = isinstance(value, list)
    if result:
        for array_3_idx, array_3_item in enumerate(value):
            # $.Operation.tags.0
            result = isinstance(array_3_item, str)
            if not result: break
    return result

# define "json_model_10_may_summary" ($.Operation.summary)
def jm_f_53(value: Jsonable, path: str) -> bool:
    # $.Operation.summary
    result = isinstance(value, str)
    return result

# define "json_model_10_may_description" ($.Operation.description)
def jm_f_54(value: Jsonable, path: str) -> bool:
    # $.Operation.description
    result = isinstance(value, str)
    return result

# define "json_model_10_may_externalDocs" ($.Operation.externalDocs)
def jm_f_55(value: Jsonable, path: str) -> bool:
    # $.Operation.externalDocs
    result = json_model_11(value, path)
    return result

# define "json_model_10_may_operationId" ($.Operation.operationId)
def jm_f_56(value: Jsonable, path: str) -> bool:
    # $.Operation.operationId
    result = isinstance(value, str)
    return result





# define "json_model_10_may_responses" ($.Operation.responses)
def jm_f_59(value: Jsonable, path: str) -> bool:
    # $.Operation.responses
    result = json_model_17(value, path)
    return result



# define "json_model_10_may_deprecated" ($.Operation.deprecated)
def jm_f_61(value: Jsonable, path: str) -> bool:
    # $.Operation.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_10_may_security" ($.Operation.security)
def jm_f_62(value: Jsonable, path: str) -> bool:
    # $.Operation.security
    result = isinstance(value, list)
    if result:
        for array_4_idx, array_4_item in enumerate(value):
            # $.Operation.security.0
            result = json_model_33(array_4_item, path)
            if not result: break
    return result

# define "json_model_10_may_servers" ($.Operation.servers)
def jm_f_63(value: Jsonable, path: str) -> bool:
    # $.Operation.servers
    result = isinstance(value, list)
    if result:
        for array_5_idx, array_5_item in enumerate(value):
            # $.Operation.servers.0
            result = json_model_5(array_5_item, path)
            if not result: break
    return result

# define "json_model_11_must_url" ($.ExternalDocumentation.url)
def jm_f_64(value: Jsonable, path: str) -> bool:
    # $.ExternalDocumentation.url
    result = is_valid_url(value, path)
    return result

# define "json_model_11_may_description" ($.ExternalDocumentation.description)
def jm_f_65(value: Jsonable, path: str) -> bool:
    # $.ExternalDocumentation.description
    result = isinstance(value, str)
    return result

# define "json_model_12_may_description" ($.parameterShare.description)
def jm_f_66(value: Jsonable, path: str) -> bool:
    # $.parameterShare.description
    result = isinstance(value, str)
    return result

# define "json_model_12_may_required" ($.parameterShare.required)
def jm_f_67(value: Jsonable, path: str) -> bool:
    # $.parameterShare.required
    result = isinstance(value, bool)
    return result

# define "json_model_12_may_deprecated" ($.parameterShare.deprecated)
def jm_f_68(value: Jsonable, path: str) -> bool:
    # $.parameterShare.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_12_may_allowEmptyValue" ($.parameterShare.allowEmptyValue)
def jm_f_69(value: Jsonable, path: str) -> bool:
    # $.parameterShare.allowEmptyValue
    result = isinstance(value, bool)
    return result

# define "json_model_12_may_style" ($.parameterShare.style)
def jm_f_70(value: Jsonable, path: str) -> bool:
    # $.parameterShare.style
    result = not isinstance(value, (list, dict)) and value in {'deepObject', 'form', 'label', 'matrix', 'pipeDelimited', 'simple', 'spaceDelimited'}
    return result

# define "json_model_12_may_explode" ($.parameterShare.explode)
def jm_f_71(value: Jsonable, path: str) -> bool:
    # $.parameterShare.explode
    result = isinstance(value, bool)
    return result

# define "json_model_12_may_allowReserved" ($.parameterShare.allowReserved)
def jm_f_72(value: Jsonable, path: str) -> bool:
    # $.parameterShare.allowReserved
    result = isinstance(value, bool)
    return result

# define "json_model_12_may_schema" ($.parameterShare.schema)
def jm_f_73(value: Jsonable, path: str) -> bool:
    # $.parameterShare.schema
    result = json_model_27(value, path)
    return result

# define "json_model_12_may_example" ($.parameterShare.example)
def jm_f_74(value: Jsonable, path: str) -> bool:
    # $.parameterShare.example
    result = True
    return result





# define "json_model_13_must_name" ($.Parameter.name)
def jm_f_77(value: Jsonable, path: str) -> bool:
    # $.Parameter.name
    result = isinstance(value, str)
    return result

# define "json_model_13_must_in" ($.Parameter.in)
def jm_f_78(value: Jsonable, path: str) -> bool:
    # $.Parameter.in
    result = not isinstance(value, (list, dict)) and value in {'cookie', 'header', 'path', 'query'}
    return result

# define "json_model_13_may_description" ($.Parameter.description)
def jm_f_79(value: Jsonable, path: str) -> bool:
    # $.Parameter.description
    result = isinstance(value, str)
    return result

# define "json_model_13_may_required" ($.Parameter.required)
def jm_f_80(value: Jsonable, path: str) -> bool:
    # $.Parameter.required
    result = isinstance(value, bool)
    return result

# define "json_model_13_may_deprecated" ($.Parameter.deprecated)
def jm_f_81(value: Jsonable, path: str) -> bool:
    # $.Parameter.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_13_may_allowEmptyValue" ($.Parameter.allowEmptyValue)
def jm_f_82(value: Jsonable, path: str) -> bool:
    # $.Parameter.allowEmptyValue
    result = isinstance(value, bool)
    return result

# define "json_model_13_may_style" ($.Parameter.style)
def jm_f_83(value: Jsonable, path: str) -> bool:
    # $.Parameter.style
    result = not isinstance(value, (list, dict)) and value in {'deepObject', 'form', 'label', 'matrix', 'pipeDelimited', 'simple', 'spaceDelimited'}
    return result

# define "json_model_13_may_explode" ($.Parameter.explode)
def jm_f_84(value: Jsonable, path: str) -> bool:
    # $.Parameter.explode
    result = isinstance(value, bool)
    return result

# define "json_model_13_may_allowReserved" ($.Parameter.allowReserved)
def jm_f_85(value: Jsonable, path: str) -> bool:
    # $.Parameter.allowReserved
    result = isinstance(value, bool)
    return result

# define "json_model_13_may_schema" ($.Parameter.schema)
def jm_f_86(value: Jsonable, path: str) -> bool:
    # $.Parameter.schema
    result = json_model_27(value, path)
    return result

# define "json_model_13_may_example" ($.Parameter.example)
def jm_f_87(value: Jsonable, path: str) -> bool:
    # $.Parameter.example
    result = True
    return result





# define "json_model_14_may_description" ($.RequestBody.description)
def jm_f_90(value: Jsonable, path: str) -> bool:
    # $.RequestBody.description
    result = isinstance(value, str)
    return result



# define "json_model_14_may_required" ($.RequestBody.required)
def jm_f_92(value: Jsonable, path: str) -> bool:
    # $.RequestBody.required
    result = isinstance(value, bool)
    return result

# define "json_model_15_may_schema" ($.MediaType.schema)
def jm_f_93(value: Jsonable, path: str) -> bool:
    # $.MediaType.schema
    result = json_model_27(value, path)
    return result

# define "json_model_15_may_example" ($.MediaType.example)
def jm_f_94(value: Jsonable, path: str) -> bool:
    # $.MediaType.example
    result = True
    return result





# define "json_model_16_may_contentType" ($.Encoding.contentType)
def jm_f_97(value: Jsonable, path: str) -> bool:
    # $.Encoding.contentType
    result = isinstance(value, str)
    return result



# define "json_model_16_may_style" ($.Encoding.style)
def jm_f_99(value: Jsonable, path: str) -> bool:
    # $.Encoding.style
    result = isinstance(value, str)
    return result

# define "json_model_16_may_explode" ($.Encoding.explode)
def jm_f_100(value: Jsonable, path: str) -> bool:
    # $.Encoding.explode
    result = isinstance(value, bool)
    return result

# define "json_model_16_may_allowReserved" ($.Encoding.allowReserved)
def jm_f_101(value: Jsonable, path: str) -> bool:
    # $.Encoding.allowReserved
    result = isinstance(value, bool)
    return result

# define "json_model_17_may_default" ($.Responses.default)
def jm_f_102(value: Jsonable, path: str) -> bool:
    # $.Responses.default
    # $.Responses.default.'|'.0
    result = json_model_18(value, path)
    if not result:
        # $.Responses.default.'|'.1
        result = json_model_25(value, path)
    return result

# define "json_model_18_may_description" ($.Response.description)
def jm_f_103(value: Jsonable, path: str) -> bool:
    # $.Response.description
    result = isinstance(value, str)
    return result







# define "json_model_20_may_summary" ($.Example.summary)
def jm_f_107(value: Jsonable, path: str) -> bool:
    # $.Example.summary
    result = isinstance(value, str)
    return result

# define "json_model_20_may_description" ($.Example.description)
def jm_f_108(value: Jsonable, path: str) -> bool:
    # $.Example.description
    result = isinstance(value, str)
    return result

# define "json_model_20_may_value" ($.Example.value)
def jm_f_109(value: Jsonable, path: str) -> bool:
    # $.Example.value
    result = True
    return result

# define "json_model_20_may_externalValue" ($.Example.externalValue)
def jm_f_110(value: Jsonable, path: str) -> bool:
    # $.Example.externalValue
    result = isinstance(value, str)
    return result

# define "jm_obj_2_must_operationRef" ($.Link.'|'.0.operationRef)
def jm_f_111(value: Jsonable, path: str) -> bool:
    # $.Link.'|'.0.operationRef
    result = isinstance(value, str)
    return result



# define "jm_obj_2_may_requestBody" ($.Link.'|'.0.requestBody)
def jm_f_113(value: Jsonable, path: str) -> bool:
    # $.Link.'|'.0.requestBody
    result = True
    return result

# define "jm_obj_2_may_description" ($.Link.'|'.0.description)
def jm_f_114(value: Jsonable, path: str) -> bool:
    # $.Link.'|'.0.description
    result = isinstance(value, str)
    return result

# define "jm_obj_2_may_server" ($.Link.'|'.0.server)
def jm_f_115(value: Jsonable, path: str) -> bool:
    # $.Link.'|'.0.server
    result = json_model_5(value, path)
    return result

# define "jm_obj_3_must_operationId" ($.Link.'|'.1.operationId)
def jm_f_116(value: Jsonable, path: str) -> bool:
    # $.Link.'|'.1.operationId
    result = isinstance(value, str)
    return result



# define "jm_obj_3_may_requestBody" ($.Link.'|'.1.requestBody)
def jm_f_118(value: Jsonable, path: str) -> bool:
    # $.Link.'|'.1.requestBody
    result = True
    return result

# define "jm_obj_3_may_description" ($.Link.'|'.1.description)
def jm_f_119(value: Jsonable, path: str) -> bool:
    # $.Link.'|'.1.description
    result = isinstance(value, str)
    return result

# define "jm_obj_3_may_server" ($.Link.'|'.1.server)
def jm_f_120(value: Jsonable, path: str) -> bool:
    # $.Link.'|'.1.server
    result = json_model_5(value, path)
    return result

# define "json_model_24_must_name" ($.Tag.name)
def jm_f_121(value: Jsonable, path: str) -> bool:
    # $.Tag.name
    result = isinstance(value, str)
    return result

# define "json_model_24_may_description" ($.Tag.description)
def jm_f_122(value: Jsonable, path: str) -> bool:
    # $.Tag.description
    result = isinstance(value, str)
    return result

# define "json_model_24_may_externalDocs" ($.Tag.externalDocs)
def jm_f_123(value: Jsonable, path: str) -> bool:
    # $.Tag.externalDocs
    result = json_model_11(value, path)
    return result

# define "json_model_25_must_$ref" ($.Reference.'$ref')
def jm_f_124(value: Jsonable, path: str) -> bool:
    # $.Reference.'$ref'
    result = isinstance(value, str)
    return result

# define "json_model_25_may_summary" ($.Reference.summary)
def jm_f_125(value: Jsonable, path: str) -> bool:
    # $.Reference.summary
    result = isinstance(value, str)
    return result

# define "json_model_25_may_description" ($.Reference.description)
def jm_f_126(value: Jsonable, path: str) -> bool:
    # $.Reference.description
    result = isinstance(value, str)
    return result

# define "json_model_27_may_$id" ($.Schema.'$id')
def jm_f_127(value: Jsonable, path: str) -> bool:
    # $.Schema.'$id'
    result = json_model_59(value, path)
    return result

# define "json_model_27_may_$schema" ($.Schema.'$schema')
def jm_f_128(value: Jsonable, path: str) -> bool:
    # $.Schema.'$schema'
    result = isinstance(value, str) and value == "https://json-schema.org/draft/2020-12/schema"
    return result

# define "json_model_27_may_$ref" ($.Schema.'$ref')
def jm_f_129(value: Jsonable, path: str) -> bool:
    # $.Schema.'$ref'
    result = json_model_59(value, path)
    return result

# define "json_model_27_may_$anchor" ($.Schema.'$anchor')
def jm_f_130(value: Jsonable, path: str) -> bool:
    # $.Schema.'$anchor'
    result = json_model_59(value, path)
    return result

# define "json_model_27_may_$dynamicRef" ($.Schema.'$dynamicRef')
def jm_f_131(value: Jsonable, path: str) -> bool:
    # $.Schema.'$dynamicRef'
    result = json_model_59(value, path)
    return result

# define "json_model_27_may_$dynamicAnchor" ($.Schema.'$dynamicAnchor')
def jm_f_132(value: Jsonable, path: str) -> bool:
    # $.Schema.'$dynamicAnchor'
    result = json_model_59(value, path)
    return result



# define "json_model_27_may_$comment" ($.Schema.'$comment')
def jm_f_134(value: Jsonable, path: str) -> bool:
    # $.Schema.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_27_may_prefixItems" ($.Schema.prefixItems)
def jm_f_136(value: Jsonable, path: str) -> bool:
    # $.Schema.prefixItems
    result = json_model_71(value, path)
    return result

# define "json_model_27_may_items" ($.Schema.items)
def jm_f_137(value: Jsonable, path: str) -> bool:
    # $.Schema.items
    result = json_model_74(value, path)
    return result

# define "json_model_27_may_contains" ($.Schema.contains)
def jm_f_138(value: Jsonable, path: str) -> bool:
    # $.Schema.contains
    result = json_model_74(value, path)
    return result

# define "json_model_27_may_additionalProperties" ($.Schema.additionalProperties)
def jm_f_139(value: Jsonable, path: str) -> bool:
    # $.Schema.additionalProperties
    result = json_model_74(value, path)
    return result







# define "json_model_27_may_propertyNames" ($.Schema.propertyNames)
def jm_f_143(value: Jsonable, path: str) -> bool:
    # $.Schema.propertyNames
    result = json_model_74(value, path)
    return result

# define "json_model_27_may_if" ($.Schema.if)
def jm_f_144(value: Jsonable, path: str) -> bool:
    # $.Schema.if
    result = json_model_74(value, path)
    return result

# define "json_model_27_may_then" ($.Schema.then)
def jm_f_145(value: Jsonable, path: str) -> bool:
    # $.Schema.then
    result = json_model_74(value, path)
    return result

# define "json_model_27_may_else" ($.Schema.else)
def jm_f_146(value: Jsonable, path: str) -> bool:
    # $.Schema.else
    result = json_model_74(value, path)
    return result

# define "json_model_27_may_not" ($.Schema.not)
def jm_f_147(value: Jsonable, path: str) -> bool:
    # $.Schema.not
    result = json_model_74(value, path)
    return result

# define "json_model_27_may_allOf" ($.Schema.allOf)
def jm_f_148(value: Jsonable, path: str) -> bool:
    # $.Schema.allOf
    result = json_model_71(value, path)
    return result

# define "json_model_27_may_anyOf" ($.Schema.anyOf)
def jm_f_149(value: Jsonable, path: str) -> bool:
    # $.Schema.anyOf
    result = json_model_71(value, path)
    return result

# define "json_model_27_may_oneOf" ($.Schema.oneOf)
def jm_f_150(value: Jsonable, path: str) -> bool:
    # $.Schema.oneOf
    result = json_model_71(value, path)
    return result

# define "json_model_27_may_unevaluatedItems" ($.Schema.unevaluatedItems)
def jm_f_151(value: Jsonable, path: str) -> bool:
    # $.Schema.unevaluatedItems
    result = json_model_74(value, path)
    return result

# define "json_model_27_may_unevaluatedProperties" ($.Schema.unevaluatedProperties)
def jm_f_152(value: Jsonable, path: str) -> bool:
    # $.Schema.unevaluatedProperties
    result = json_model_74(value, path)
    return result

# define "json_model_27_may_type" ($.Schema.type)
def jm_f_153(value: Jsonable, path: str) -> bool:
    # $.Schema.type
    # $.Schema.type.'|'.0
    result = json_model_66(value, path)
    if not result:
        # $.Schema.type.'|'.1
        result = json_model_67(value, path)
    return result

# define "json_model_27_may_const" ($.Schema.const)
def jm_f_154(value: Jsonable, path: str) -> bool:
    # $.Schema.const
    result = True
    return result

# define "json_model_27_may_enum" ($.Schema.enum)
def jm_f_155(value: Jsonable, path: str) -> bool:
    # $.Schema.enum
    result = isinstance(value, list)
    if result:
        for array_6_idx, array_6_item in enumerate(value):
            # $.Schema.enum.0
            result = True
            if not result: break
    return result

# define "json_model_27_may_multipleOf" ($.Schema.multipleOf)
def jm_f_156(value: Jsonable, path: str) -> bool:
    # $.Schema.multipleOf
    result = isinstance(value, float) and value > 0.0
    return result

# define "json_model_27_may_maximum" ($.Schema.maximum)
def jm_f_157(value: Jsonable, path: str) -> bool:
    # $.Schema.maximum
    result = isinstance(value, float)
    return result

# define "json_model_27_may_exclusiveMaximum" ($.Schema.exclusiveMaximum)
def jm_f_158(value: Jsonable, path: str) -> bool:
    # $.Schema.exclusiveMaximum
    result = isinstance(value, float)
    return result

# define "json_model_27_may_minimum" ($.Schema.minimum)
def jm_f_159(value: Jsonable, path: str) -> bool:
    # $.Schema.minimum
    result = isinstance(value, float)
    return result

# define "json_model_27_may_exclusiveMinimum" ($.Schema.exclusiveMinimum)
def jm_f_160(value: Jsonable, path: str) -> bool:
    # $.Schema.exclusiveMinimum
    result = isinstance(value, float)
    return result

# define "json_model_27_may_maxLength" ($.Schema.maxLength)
def jm_f_161(value: Jsonable, path: str) -> bool:
    # $.Schema.maxLength
    result = json_model_69(value, path)
    return result

# define "json_model_27_may_minLength" ($.Schema.minLength)
def jm_f_162(value: Jsonable, path: str) -> bool:
    # $.Schema.minLength
    result = json_model_69(value, path)
    return result

# define "json_model_27_may_pattern" ($.Schema.pattern)
def jm_f_163(value: Jsonable, path: str) -> bool:
    # $.Schema.pattern
    result = is_valid_re(value, path)
    return result

# define "json_model_27_may_maxItems" ($.Schema.maxItems)
def jm_f_164(value: Jsonable, path: str) -> bool:
    # $.Schema.maxItems
    result = json_model_69(value, path)
    return result

# define "json_model_27_may_minItems" ($.Schema.minItems)
def jm_f_165(value: Jsonable, path: str) -> bool:
    # $.Schema.minItems
    result = json_model_69(value, path)
    return result

# define "json_model_27_may_uniqueItems" ($.Schema.uniqueItems)
def jm_f_166(value: Jsonable, path: str) -> bool:
    # $.Schema.uniqueItems
    result = isinstance(value, bool)
    return result

# define "json_model_27_may_maxContains" ($.Schema.maxContains)
def jm_f_167(value: Jsonable, path: str) -> bool:
    # $.Schema.maxContains
    result = json_model_69(value, path)
    return result

# define "json_model_27_may_minContains" ($.Schema.minContains)
def jm_f_168(value: Jsonable, path: str) -> bool:
    # $.Schema.minContains
    result = json_model_69(value, path)
    return result

# define "json_model_27_may_maxProperties" ($.Schema.maxProperties)
def jm_f_169(value: Jsonable, path: str) -> bool:
    # $.Schema.maxProperties
    result = json_model_69(value, path)
    return result

# define "json_model_27_may_minProperties" ($.Schema.minProperties)
def jm_f_170(value: Jsonable, path: str) -> bool:
    # $.Schema.minProperties
    result = json_model_69(value, path)
    return result

# define "json_model_27_may_required" ($.Schema.required)
def jm_f_171(value: Jsonable, path: str) -> bool:
    # $.Schema.required
    result = json_model_68(value, path)
    return result



# define "json_model_27_may_title" ($.Schema.title)
def jm_f_173(value: Jsonable, path: str) -> bool:
    # $.Schema.title
    result = isinstance(value, str)
    return result

# define "json_model_27_may_description" ($.Schema.description)
def jm_f_174(value: Jsonable, path: str) -> bool:
    # $.Schema.description
    result = isinstance(value, str)
    return result

# define "json_model_27_may_default" ($.Schema.default)
def jm_f_175(value: Jsonable, path: str) -> bool:
    # $.Schema.default
    result = True
    return result

# define "json_model_27_may_deprecated" ($.Schema.deprecated)
def jm_f_176(value: Jsonable, path: str) -> bool:
    # $.Schema.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_27_may_readOnly" ($.Schema.readOnly)
def jm_f_177(value: Jsonable, path: str) -> bool:
    # $.Schema.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_27_may_writeOnly" ($.Schema.writeOnly)
def jm_f_178(value: Jsonable, path: str) -> bool:
    # $.Schema.writeOnly
    result = isinstance(value, bool)
    return result

# define "json_model_27_may_examples" ($.Schema.examples)
def jm_f_179(value: Jsonable, path: str) -> bool:
    # $.Schema.examples
    result = isinstance(value, list)
    if result:
        for array_7_idx, array_7_item in enumerate(value):
            # $.Schema.examples.0
            result = True
            if not result: break
    return result

# define "json_model_27_may_format" ($.Schema.format)
def jm_f_180(value: Jsonable, path: str) -> bool:
    # $.Schema.format
    result = isinstance(value, str)
    return result

# define "json_model_27_may_contentEncoding" ($.Schema.contentEncoding)
def jm_f_181(value: Jsonable, path: str) -> bool:
    # $.Schema.contentEncoding
    result = isinstance(value, str)
    return result

# define "json_model_27_may_contentMediaType" ($.Schema.contentMediaType)
def jm_f_182(value: Jsonable, path: str) -> bool:
    # $.Schema.contentMediaType
    result = isinstance(value, str)
    return result

# define "json_model_27_may_contentSchema" ($.Schema.contentSchema)
def jm_f_183(value: Jsonable, path: str) -> bool:
    # $.Schema.contentSchema
    result = json_model_74(value, path)
    return result

# define "json_model_27_may_discriminator" ($.Schema.discriminator)
def jm_f_184(value: Jsonable, path: str) -> bool:
    # $.Schema.discriminator
    result = json_model_28(value, path)
    return result

# define "json_model_27_may_externalDocs" ($.Schema.externalDocs)
def jm_f_185(value: Jsonable, path: str) -> bool:
    # $.Schema.externalDocs
    result = json_model_11(value, path)
    return result

# define "json_model_27_may_xml" ($.Schema.xml)
def jm_f_186(value: Jsonable, path: str) -> bool:
    # $.Schema.xml
    result = json_model_29(value, path)
    return result

# define "json_model_28_must_propertyName" ($.Discriminator.propertyName)
def jm_f_187(value: Jsonable, path: str) -> bool:
    # $.Discriminator.propertyName
    result = isinstance(value, str)
    return result



# define "json_model_29_may_name" ($.XML.name)
def jm_f_189(value: Jsonable, path: str) -> bool:
    # $.XML.name
    result = isinstance(value, str)
    return result

# define "json_model_29_may_namespace" ($.XML.namespace)
def jm_f_190(value: Jsonable, path: str) -> bool:
    # $.XML.namespace
    result = isinstance(value, str)
    return result

# define "json_model_29_may_prefix" ($.XML.prefix)
def jm_f_191(value: Jsonable, path: str) -> bool:
    # $.XML.prefix
    result = isinstance(value, str)
    return result

# define "json_model_29_may_attribute" ($.XML.attribute)
def jm_f_192(value: Jsonable, path: str) -> bool:
    # $.XML.attribute
    result = isinstance(value, bool)
    return result

# define "json_model_29_may_wrapped" ($.XML.wrapped)
def jm_f_193(value: Jsonable, path: str) -> bool:
    # $.XML.wrapped
    result = isinstance(value, bool)
    return result

# define "json_model_30_must_type" ($.SecurityScheme.type)
def jm_f_194(value: Jsonable, path: str) -> bool:
    # $.SecurityScheme.type
    result = isinstance(value, str)
    return result

# define "json_model_30_must_name" ($.SecurityScheme.name)
def jm_f_195(value: Jsonable, path: str) -> bool:
    # $.SecurityScheme.name
    result = isinstance(value, str)
    return result

# define "json_model_30_must_in" ($.SecurityScheme.in)
def jm_f_196(value: Jsonable, path: str) -> bool:
    # $.SecurityScheme.in
    result = isinstance(value, str)
    return result

# define "json_model_30_must_scheme" ($.SecurityScheme.scheme)
def jm_f_197(value: Jsonable, path: str) -> bool:
    # $.SecurityScheme.scheme
    result = isinstance(value, str)
    return result

# define "json_model_30_must_flows" ($.SecurityScheme.flows)
def jm_f_198(value: Jsonable, path: str) -> bool:
    # $.SecurityScheme.flows
    result = json_model_31(value, path)
    return result

# define "json_model_30_must_openIdConnectUrl" ($.SecurityScheme.openIdConnectUrl)
def jm_f_199(value: Jsonable, path: str) -> bool:
    # $.SecurityScheme.openIdConnectUrl
    result = isinstance(value, str)
    return result

# define "json_model_30_may_description" ($.SecurityScheme.description)
def jm_f_200(value: Jsonable, path: str) -> bool:
    # $.SecurityScheme.description
    result = isinstance(value, str)
    return result

# define "json_model_30_may_bearerFormat" ($.SecurityScheme.bearerFormat)
def jm_f_201(value: Jsonable, path: str) -> bool:
    # $.SecurityScheme.bearerFormat
    result = isinstance(value, str)
    return result

# define "json_model_31_may_implicit" ($.OAuthFlows.implicit)
def jm_f_202(value: Jsonable, path: str) -> bool:
    # $.OAuthFlows.implicit
    result = json_model_32(value, path)
    return result

# define "json_model_31_may_password" ($.OAuthFlows.password)
def jm_f_203(value: Jsonable, path: str) -> bool:
    # $.OAuthFlows.password
    result = json_model_32(value, path)
    return result

# define "json_model_31_may_clientCredentials" ($.OAuthFlows.clientCredentials)
def jm_f_204(value: Jsonable, path: str) -> bool:
    # $.OAuthFlows.clientCredentials
    result = json_model_32(value, path)
    return result

# define "json_model_31_may_authorizationCode" ($.OAuthFlows.authorizationCode)
def jm_f_205(value: Jsonable, path: str) -> bool:
    # $.OAuthFlows.authorizationCode
    result = json_model_32(value, path)
    return result

# define "json_model_32_must_authorizationUrl" ($.OAuthFlow.authorizationUrl)
def jm_f_206(value: Jsonable, path: str) -> bool:
    # $.OAuthFlow.authorizationUrl
    result = isinstance(value, str)
    return result

# define "json_model_32_must_tokenUrl" ($.OAuthFlow.tokenUrl)
def jm_f_207(value: Jsonable, path: str) -> bool:
    # $.OAuthFlow.tokenUrl
    result = isinstance(value, str)
    return result



# define "json_model_32_may_refreshUrl" ($.OAuthFlow.refreshUrl)
def jm_f_209(value: Jsonable, path: str) -> bool:
    # $.OAuthFlow.refreshUrl
    result = isinstance(value, str)
    return result

# define "json_model_73_may_$id" ($.'$#schema#ObjectSchema'.'$id')
def jm_f_210(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.'$id'
    result = json_model_59(value, path)
    return result

# define "json_model_73_may_$schema" ($.'$#schema#ObjectSchema'.'$schema')
def jm_f_211(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.'$schema'
    result = isinstance(value, str) and value == "https://json-schema.org/draft/2020-12/schema"
    return result

# define "json_model_73_may_$ref" ($.'$#schema#ObjectSchema'.'$ref')
def jm_f_212(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.'$ref'
    result = json_model_59(value, path)
    return result

# define "json_model_73_may_$anchor" ($.'$#schema#ObjectSchema'.'$anchor')
def jm_f_213(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.'$anchor'
    result = json_model_59(value, path)
    return result

# define "json_model_73_may_$dynamicRef" ($.'$#schema#ObjectSchema'.'$dynamicRef')
def jm_f_214(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.'$dynamicRef'
    result = json_model_59(value, path)
    return result

# define "json_model_73_may_$dynamicAnchor" ($.'$#schema#ObjectSchema'.'$dynamicAnchor')
def jm_f_215(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.'$dynamicAnchor'
    result = json_model_59(value, path)
    return result



# define "json_model_73_may_$comment" ($.'$#schema#ObjectSchema'.'$comment')
def jm_f_217(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_73_may_prefixItems" ($.'$#schema#ObjectSchema'.prefixItems)
def jm_f_219(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.prefixItems
    result = json_model_71(value, path)
    return result

# define "json_model_73_may_items" ($.'$#schema#ObjectSchema'.items)
def jm_f_220(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.items
    result = json_model_74(value, path)
    return result

# define "json_model_73_may_contains" ($.'$#schema#ObjectSchema'.contains)
def jm_f_221(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.contains
    result = json_model_74(value, path)
    return result

# define "json_model_73_may_additionalProperties" ($.'$#schema#ObjectSchema'.additionalProperties)
def jm_f_222(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.additionalProperties
    result = json_model_74(value, path)
    return result







# define "json_model_73_may_propertyNames" ($.'$#schema#ObjectSchema'.propertyNames)
def jm_f_226(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.propertyNames
    result = json_model_74(value, path)
    return result

# define "json_model_73_may_if" ($.'$#schema#ObjectSchema'.if)
def jm_f_227(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.if
    result = json_model_74(value, path)
    return result

# define "json_model_73_may_then" ($.'$#schema#ObjectSchema'.then)
def jm_f_228(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.then
    result = json_model_74(value, path)
    return result

# define "json_model_73_may_else" ($.'$#schema#ObjectSchema'.else)
def jm_f_229(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.else
    result = json_model_74(value, path)
    return result

# define "json_model_73_may_not" ($.'$#schema#ObjectSchema'.not)
def jm_f_230(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.not
    result = json_model_74(value, path)
    return result

# define "json_model_73_may_allOf" ($.'$#schema#ObjectSchema'.allOf)
def jm_f_231(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.allOf
    result = json_model_71(value, path)
    return result

# define "json_model_73_may_anyOf" ($.'$#schema#ObjectSchema'.anyOf)
def jm_f_232(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.anyOf
    result = json_model_71(value, path)
    return result

# define "json_model_73_may_oneOf" ($.'$#schema#ObjectSchema'.oneOf)
def jm_f_233(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.oneOf
    result = json_model_71(value, path)
    return result

# define "json_model_73_may_unevaluatedItems" ($.'$#schema#ObjectSchema'.unevaluatedItems)
def jm_f_234(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.unevaluatedItems
    result = json_model_74(value, path)
    return result

# define "json_model_73_may_unevaluatedProperties" ($.'$#schema#ObjectSchema'.unevaluatedProperties)
def jm_f_235(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.unevaluatedProperties
    result = json_model_74(value, path)
    return result

# define "json_model_73_may_type" ($.'$#schema#ObjectSchema'.type)
def jm_f_236(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.type
    # $.'$#schema#ObjectSchema'.type.'|'.0
    result = json_model_66(value, path)
    if not result:
        # $.'$#schema#ObjectSchema'.type.'|'.1
        result = json_model_67(value, path)
    return result

# define "json_model_73_may_const" ($.'$#schema#ObjectSchema'.const)
def jm_f_237(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.const
    result = True
    return result

# define "json_model_73_may_enum" ($.'$#schema#ObjectSchema'.enum)
def jm_f_238(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.enum
    result = isinstance(value, list)
    if result:
        for array_12_idx, array_12_item in enumerate(value):
            # $.'$#schema#ObjectSchema'.enum.0
            result = True
            if not result: break
    return result

# define "json_model_73_may_multipleOf" ($.'$#schema#ObjectSchema'.multipleOf)
def jm_f_239(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.multipleOf
    result = isinstance(value, float) and value > 0.0
    return result

# define "json_model_73_may_maximum" ($.'$#schema#ObjectSchema'.maximum)
def jm_f_240(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.maximum
    result = isinstance(value, float)
    return result

# define "json_model_73_may_exclusiveMaximum" ($.'$#schema#ObjectSchema'.exclusiveMaximum)
def jm_f_241(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.exclusiveMaximum
    result = isinstance(value, float)
    return result

# define "json_model_73_may_minimum" ($.'$#schema#ObjectSchema'.minimum)
def jm_f_242(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.minimum
    result = isinstance(value, float)
    return result

# define "json_model_73_may_exclusiveMinimum" ($.'$#schema#ObjectSchema'.exclusiveMinimum)
def jm_f_243(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.exclusiveMinimum
    result = isinstance(value, float)
    return result

# define "json_model_73_may_maxLength" ($.'$#schema#ObjectSchema'.maxLength)
def jm_f_244(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.maxLength
    result = json_model_69(value, path)
    return result

# define "json_model_73_may_minLength" ($.'$#schema#ObjectSchema'.minLength)
def jm_f_245(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.minLength
    result = json_model_69(value, path)
    return result

# define "json_model_73_may_pattern" ($.'$#schema#ObjectSchema'.pattern)
def jm_f_246(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.pattern
    result = is_valid_re(value, path)
    return result

# define "json_model_73_may_maxItems" ($.'$#schema#ObjectSchema'.maxItems)
def jm_f_247(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.maxItems
    result = json_model_69(value, path)
    return result

# define "json_model_73_may_minItems" ($.'$#schema#ObjectSchema'.minItems)
def jm_f_248(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.minItems
    result = json_model_69(value, path)
    return result

# define "json_model_73_may_uniqueItems" ($.'$#schema#ObjectSchema'.uniqueItems)
def jm_f_249(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.uniqueItems
    result = isinstance(value, bool)
    return result

# define "json_model_73_may_maxContains" ($.'$#schema#ObjectSchema'.maxContains)
def jm_f_250(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.maxContains
    result = json_model_69(value, path)
    return result

# define "json_model_73_may_minContains" ($.'$#schema#ObjectSchema'.minContains)
def jm_f_251(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.minContains
    result = json_model_69(value, path)
    return result

# define "json_model_73_may_maxProperties" ($.'$#schema#ObjectSchema'.maxProperties)
def jm_f_252(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.maxProperties
    result = json_model_69(value, path)
    return result

# define "json_model_73_may_minProperties" ($.'$#schema#ObjectSchema'.minProperties)
def jm_f_253(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.minProperties
    result = json_model_69(value, path)
    return result

# define "json_model_73_may_required" ($.'$#schema#ObjectSchema'.required)
def jm_f_254(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.required
    result = json_model_68(value, path)
    return result



# define "json_model_73_may_title" ($.'$#schema#ObjectSchema'.title)
def jm_f_256(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.title
    result = isinstance(value, str)
    return result

# define "json_model_73_may_description" ($.'$#schema#ObjectSchema'.description)
def jm_f_257(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.description
    result = isinstance(value, str)
    return result

# define "json_model_73_may_default" ($.'$#schema#ObjectSchema'.default)
def jm_f_258(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.default
    result = True
    return result

# define "json_model_73_may_deprecated" ($.'$#schema#ObjectSchema'.deprecated)
def jm_f_259(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_73_may_readOnly" ($.'$#schema#ObjectSchema'.readOnly)
def jm_f_260(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_73_may_writeOnly" ($.'$#schema#ObjectSchema'.writeOnly)
def jm_f_261(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.writeOnly
    result = isinstance(value, bool)
    return result

# define "json_model_73_may_examples" ($.'$#schema#ObjectSchema'.examples)
def jm_f_262(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.examples
    result = isinstance(value, list)
    if result:
        for array_13_idx, array_13_item in enumerate(value):
            # $.'$#schema#ObjectSchema'.examples.0
            result = True
            if not result: break
    return result

# define "json_model_73_may_format" ($.'$#schema#ObjectSchema'.format)
def jm_f_263(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.format
    result = isinstance(value, str)
    return result

# define "json_model_73_may_contentEncoding" ($.'$#schema#ObjectSchema'.contentEncoding)
def jm_f_264(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.contentEncoding
    result = isinstance(value, str)
    return result

# define "json_model_73_may_contentMediaType" ($.'$#schema#ObjectSchema'.contentMediaType)
def jm_f_265(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.contentMediaType
    result = isinstance(value, str)
    return result

# define "json_model_73_may_contentSchema" ($.'$#schema#ObjectSchema'.contentSchema)
def jm_f_266(value: Jsonable, path: str) -> bool:
    # $.'$#schema#ObjectSchema'.contentSchema
    result = json_model_74(value, path)
    return result



# object $.OpenAPI.webhooks
def jm_f_5(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.OpenAPI.webhooks.''
        # $.OpenAPI.webhooks.''.'|'.0
        result = json_model_9(model, path)
        if not result:
            # $.OpenAPI.webhooks.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.OpenAPI
def json_model_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_1_must:  # must
            must_count += 1
            if not json_model_1_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_1_may:  # may
            if not json_model_1_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.OpenAPI.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 2




# object $.Info
def json_model_2(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_2_must:  # must
            must_count += 1
            if not json_model_2_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_2_may:  # may
            if not json_model_2_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Info.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 2




# object $.Contact
def json_model_3(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_3_may:  # may
            if not json_model_3_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Contact.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.License.'|'.0
def jm_obj_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_0_must:  # must
            must_count += 1
            if not jm_obj_0_must[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.License.'|'.0.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 2


# object $.License.'|'.1
def jm_obj_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_1_must:  # must
            must_count += 1
            if not jm_obj_1_must[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.License.'|'.1.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 2

# define "$License" ($.License)
def json_model_4(value: Jsonable, path: str) -> bool:
    # $.License
    result = isinstance(value, dict)
    if result:
        # $.License.'|'.0
        result = jm_obj_0(value, path)
        if not result:
            # $.License.'|'.1
            result = jm_obj_1(value, path)
    return result


# object $.Server.variables
def jm_f_26(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Server.variables.''
        result = json_model_6(model, path)
        if not result: return False
    return True


# object $.Server
def json_model_5(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_5_must:  # must
            must_count += 1
            if not json_model_5_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_5_may:  # may
            if not json_model_5_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Server.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.ServerVariable
def json_model_6(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_6_must:  # must
            must_count += 1
            if not json_model_6_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_6_may:  # may
            if not json_model_6_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.ServerVariable.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Components.schemas
def jm_f_30(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Components.schemas.''
        result = json_model_27(model, path)
        if not result: return False
    return True


# object $.Components.responses
def jm_f_31(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Components.responses.''
        # $.Components.responses.''.'|'.0
        result = json_model_18(model, path)
        if not result:
            # $.Components.responses.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Components.parameters
def jm_f_32(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Components.parameters.''
        # $.Components.parameters.''.'|'.0
        result = json_model_13(model, path)
        if not result:
            # $.Components.parameters.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Components.examples
def jm_f_33(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Components.examples.''
        # $.Components.examples.''.'|'.0
        result = json_model_20(model, path)
        if not result:
            # $.Components.examples.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Components.requestBodies
def jm_f_34(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Components.requestBodies.''
        # $.Components.requestBodies.''.'|'.0
        result = json_model_14(model, path)
        if not result:
            # $.Components.requestBodies.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Components.headers
def jm_f_35(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Components.headers.''
        # $.Components.headers.''.'|'.0
        result = json_model_23(model, path)
        if not result:
            # $.Components.headers.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Components.securitySchemes
def jm_f_36(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Components.securitySchemes.''
        # $.Components.securitySchemes.''.'|'.0
        result = json_model_30(model, path)
        if not result:
            # $.Components.securitySchemes.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Components.links
def jm_f_37(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Components.links.''
        # $.Components.links.''.'|'.0
        result = json_model_22(model, path)
        if not result:
            # $.Components.links.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Components.callbacks
def jm_f_38(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Components.callbacks.''
        # $.Components.callbacks.''.'|'.0
        result = json_model_19(model, path)
        if not result:
            # $.Components.callbacks.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Components.pathItems
def jm_f_39(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Components.pathItems.''
        # $.Components.pathItems.''.'|'.0
        result = json_model_9(model, path)
        if not result:
            # $.Components.pathItems.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Components
def json_model_7(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_7_may:  # may
            if not json_model_7_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Components.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.Paths
def json_model_8(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if jm_re_1(prop) is not None:  # /^//
            # $.Paths.'/^//'
            result = json_model_9(model, path)
            if not result: return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Paths.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.PathItem.parameters
def jm_f_51(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.PathItem.parameters.''
        # $.PathItem.parameters.''.'|'.0
        result = json_model_13(model, path)
        if not result:
            # $.PathItem.parameters.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.PathItem
def json_model_9(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_9_may:  # may
            if not json_model_9_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.PathItem.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.Operation.parameters
def jm_f_57(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Operation.parameters.''
        # $.Operation.parameters.''.'|'.0
        result = json_model_13(model, path)
        if not result:
            # $.Operation.parameters.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Operation.requestBody
def jm_f_58(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Operation.requestBody.''
        # $.Operation.requestBody.''.'|'.0
        result = json_model_14(model, path)
        if not result:
            # $.Operation.requestBody.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Operation.callbacks
def jm_f_60(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Operation.callbacks.''
        # $.Operation.callbacks.''.'|'.0
        result = json_model_19(model, path)
        if not result:
            # $.Operation.callbacks.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Operation
def json_model_10(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_10_may:  # may
            if not json_model_10_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Operation.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.ExternalDocumentation
def json_model_11(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_11_must:  # must
            must_count += 1
            if not json_model_11_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_11_may:  # may
            if not json_model_11_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.ExternalDocumentation.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.parameterShare.examples
def jm_f_75(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.parameterShare.examples.''
        # $.parameterShare.examples.''.'|'.0
        result = json_model_20(model, path)
        if not result:
            # $.parameterShare.examples.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.parameterShare.content
def jm_f_76(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.parameterShare.content.''
        result = json_model_15(model, path)
        if not result: return False
    return True


# object $.parameterShare
def json_model_12(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_12_may:  # may
            if not json_model_12_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.parameterShare.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.Parameter.examples
def jm_f_88(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Parameter.examples.''
        # $.Parameter.examples.''.'|'.0
        result = json_model_20(model, path)
        if not result:
            # $.Parameter.examples.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Parameter.content
def jm_f_89(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Parameter.content.''
        result = json_model_15(model, path)
        if not result: return False
    return True


# object $.Parameter
def json_model_13(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_13_must:  # must
            must_count += 1
            if not json_model_13_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_13_may:  # may
            if not json_model_13_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Parameter.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 2




# object $.RequestBody.content
def jm_f_91(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.RequestBody.content.''
        result = json_model_15(model, path)
        if not result: return False
    return True


# object $.RequestBody
def json_model_14(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_14_may:  # may
            if not json_model_14_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.RequestBody.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.MediaType.examples
def jm_f_95(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.MediaType.examples.''
        # $.MediaType.examples.''.'|'.0
        result = json_model_20(model, path)
        if not result:
            # $.MediaType.examples.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.MediaType.encoding
def jm_f_96(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.MediaType.encoding.''
        result = json_model_16(model, path)
        if not result: return False
    return True


# object $.MediaType
def json_model_15(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_15_may:  # may
            if not json_model_15_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.MediaType.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.Encoding.headers
def jm_f_98(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Encoding.headers.''
        # $.Encoding.headers.''.'|'.0
        result = json_model_23(model, path)
        if not result:
            # $.Encoding.headers.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Encoding
def json_model_16(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_16_may:  # may
            if not json_model_16_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Encoding.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.Responses
def json_model_17(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_17_may:  # may
            if not json_model_17_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_2(prop) is not None:  # /^[1-5](\d\d|XX)$/
            # $.Responses.'/^[1-5](\d\d|XX)$/'
            # $.Responses.'/^[1-5](\d\d|XX)$/'.'|'.0
            result = json_model_18(model, path)
            if not result:
                # $.Responses.'/^[1-5](\d\d|XX)$/'.'|'.1
                result = json_model_25(model, path)
            if not result: return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Responses.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.Response.headers
def jm_f_104(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Response.headers.''
        # $.Response.headers.''.'|'.0
        result = json_model_23(model, path)
        if not result:
            # $.Response.headers.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Response.content
def jm_f_105(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Response.content.''
        result = json_model_15(model, path)
        if not result: return False
    return True


# object $.Response.links
def jm_f_106(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Response.links.''
        # $.Response.links.''.'|'.0
        result = json_model_22(model, path)
        if not result:
            # $.Response.links.''.'|'.1
            result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Response
def json_model_18(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_18_may:  # may
            if not json_model_18_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Response.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.Callback
def json_model_19(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_21(prop, path):  # $Expression
            # $.Callback.Expression
            # $.Callback.Expression.'|'.0
            result = json_model_9(model, path)
            if not result:
                # $.Callback.Expression.'|'.1
                result = json_model_25(model, path)
            if not result: return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Callback.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.Example
def json_model_20(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_20_may:  # may
            if not json_model_20_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Example.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True



# define "$Expression" ($.Expression)
def json_model_21(value: Jsonable, path: str) -> bool:
    # $.Expression
    # "/\\{.*\\}/"
    result = isinstance(value, str) and jm_re_3(value) is not None
    return result


# object $.Link.'|'.0.parameters
def jm_f_112(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Link.'|'.0.parameters.''
        result = True
        if not result: return False
    return True


# object $.Link.'|'.0
def jm_obj_2(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_2_must:  # must
            must_count += 1
            if not jm_obj_2_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_2_may:  # may
            if not jm_obj_2_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Link.'|'.0.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.Link.'|'.1.parameters
def jm_f_117(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Link.'|'.1.parameters.''
        result = True
        if not result: return False
    return True


# object $.Link.'|'.1
def jm_obj_3(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_3_must:  # must
            must_count += 1
            if not jm_obj_3_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_3_may:  # may
            if not jm_obj_3_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Link.'|'.1.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1

# define "$Link" ($.Link)
def json_model_22(value: Jsonable, path: str) -> bool:
    # $.Link
    result = isinstance(value, dict)
    if result:
        # $.Link.'|'.0
        result = jm_obj_2(value, path)
        if not result:
            # $.Link.'|'.1
            result = jm_obj_3(value, path)
    return result

# define "$Header" ($.Header)
def json_model_23(value: Jsonable, path: str) -> bool:
    # $.Header
    result = json_model_12(value, path)
    return result


# object $.Tag
def json_model_24(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_24_must:  # must
            must_count += 1
            if not json_model_24_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_24_may:  # may
            if not json_model_24_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Tag.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Reference
def json_model_25(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_25_must:  # must
            must_count += 1
            if not json_model_25_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_25_may:  # may
            if not json_model_25_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1



# define "$schema" ($.schema)
def json_model_26(value: Jsonable, path: str) -> bool:
    # $.schema
    result = json_model_58(value, path)
    return result


# object $.Schema.'$vocabulary'
def jm_f_133(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if is_valid_url(prop, path):  # $URL
            # $.Schema.'$vocabulary'.URL
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Schema.'$defs'
def jm_f_135(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Schema.'$defs'.''
        result = json_model_74(model, path)
        if not result: return False
    return True


# object $.Schema.properties
def jm_f_140(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Schema.properties.''
        result = json_model_74(model, path)
        if not result: return False
    return True


# object $.Schema.patternProperties
def jm_f_141(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if is_valid_re(prop, path):  # $REGEX
            # $.Schema.patternProperties.REGEX
            result = json_model_74(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Schema.dependentSchemas
def jm_f_142(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Schema.dependentSchemas.''
        result = json_model_74(model, path)
        if not result: return False
    return True


# object $.Schema.dependentRequired
def jm_f_172(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Schema.dependentRequired.''
        result = json_model_68(model, path)
        if not result: return False
    return True


# object $.Schema
def json_model_27(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_27_may:  # may
            if not json_model_27_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True




# object $.Discriminator.mapping
def jm_f_188(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Discriminator.mapping.''
        result = isinstance(model, str)
        if not result: return False
    return True


# object $.Discriminator
def json_model_28(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_28_must:  # must
            must_count += 1
            if not json_model_28_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_28_may:  # may
            if not json_model_28_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Discriminator.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.XML
def json_model_29(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_29_may:  # may
            if not json_model_29_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.XML.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.SecurityScheme
def json_model_30(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_30_must:  # must
            must_count += 1
            if not json_model_30_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_30_may:  # may
            if not json_model_30_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.SecurityScheme.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 6




# object $.OAuthFlows
def json_model_31(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_31_may:  # may
            if not json_model_31_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.OAuthFlows.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True




# object $.OAuthFlow.scopes
def jm_f_208(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.OAuthFlow.scopes.''
        result = isinstance(model, str)
        if not result: return False
    return True


# object $.OAuthFlow
def json_model_32(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_32_must:  # must
            must_count += 1
            if not json_model_32_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_32_may:  # may
            if not json_model_32_may[prop](model, f"{path}.{prop}"):
                return False
        elif jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.OAuthFlow.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return must_count == 3




# object $.SecurityRequirement
def json_model_33(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.SecurityRequirement.''
        result = isinstance(model, list)
        if result:
            for array_8_idx, array_8_item in enumerate(model):
                # $.SecurityRequirement.''.0
                result = isinstance(array_8_item, str)
                if not result: break
        if not result: return False
    return True




# object $.Extension
def json_model_34(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if jm_re_0(prop) is not None:  # /^x\-.*$/
            # $.Extension.'/^x\-.*$/'
            result = True
            if not result: return False
        else:  # no catch all
            return False
    return True



# define "$https://json-model.org/models/json-schema-draft-2020-12" ($.'$https://json-model.org/models/json-schema-draft-2020-12')
def json_model_58(value: Jsonable, path: str) -> bool:
    # $.'$https://json-model.org/models/json-schema-draft-2020-12'
    # $.'$https://json-model.org/models/json-schema-draft-2020-12'.'@'
    result = json_model_74(value, path)
    return result

# define "$#schema#URI-REFERENCE" ($.'$#schema#URI-REFERENCE')
def json_model_59(value: Jsonable, path: str) -> bool:
    # $.'$#schema#URI-REFERENCE'
    result = isinstance(value, str)
    return result

# define "$#schema#simpleTypes" ($.'$#schema#simpleTypes')
def json_model_66(value: Jsonable, path: str) -> bool:
    # $.'$#schema#simpleTypes'
    result = not isinstance(value, (list, dict)) and value in {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
    return result

# define "$#schema#simpleTypesArray" ($.'$#schema#simpleTypesArray')
def json_model_67(value: Jsonable, path: str) -> bool:
    # $.'$#schema#simpleTypesArray'
    # $.'$#schema#simpleTypesArray'.'@'
    result = isinstance(value, list)
    if result:
        for array_9_idx, array_9_item in enumerate(value):
            # $.'$#schema#simpleTypesArray'.'@'.0
            result = json_model_66(array_9_item, path)
            if not result: break
    result &= len(set(value)) == len(value)
    result &= len(value) >= 1
    return result

# define "$#schema#stringArray" ($.'$#schema#stringArray')
def json_model_68(value: Jsonable, path: str) -> bool:
    # $.'$#schema#stringArray'
    # $.'$#schema#stringArray'.'@'
    result = isinstance(value, list)
    if result:
        for array_10_idx, array_10_item in enumerate(value):
            # $.'$#schema#stringArray'.'@'.0
            result = isinstance(array_10_item, str)
            if not result: break
    result &= len(set(value)) == len(value)
    return result

# define "$#schema#nonNegativeInteger" ($.'$#schema#nonNegativeInteger')
def json_model_69(value: Jsonable, path: str) -> bool:
    # $.'$#schema#nonNegativeInteger'
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "$#schema#schemaArray" ($.'$#schema#schemaArray')
def json_model_71(value: Jsonable, path: str) -> bool:
    # $.'$#schema#schemaArray'
    # $.'$#schema#schemaArray'.'@'
    result = isinstance(value, list)
    if result:
        for array_11_idx, array_11_item in enumerate(value):
            # $.'$#schema#schemaArray'.'@'.0
            result = json_model_74(array_11_item, path)
            if not result: break
    result &= len(value) >= 1
    return result

# define "$#schema#Schema" ($.'$#schema#Schema')
def json_model_74(value: Jsonable, path: str) -> bool:
    # $.'$#schema#Schema'
    # $.'$#schema#Schema'.'|'.0
    result = isinstance(value, bool)
    if not result:
        # $.'$#schema#Schema'.'|'.1
        result = json_model_73(value, path)
    return result


# object $.'$#schema#ObjectSchema'.'$vocabulary'
def jm_f_216(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if is_valid_url(prop, path):  # $URL
            # $.'$#schema#ObjectSchema'.'$vocabulary'.URL
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#schema#ObjectSchema'.'$defs'
def jm_f_218(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#schema#ObjectSchema'.'$defs'.''
        result = json_model_74(model, path)
        if not result: return False
    return True


# object $.'$#schema#ObjectSchema'.properties
def jm_f_223(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#schema#ObjectSchema'.properties.''
        result = json_model_74(model, path)
        if not result: return False
    return True


# object $.'$#schema#ObjectSchema'.patternProperties
def jm_f_224(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if is_valid_re(prop, path):  # $REGEX
            # $.'$#schema#ObjectSchema'.patternProperties.REGEX
            result = json_model_74(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.'$#schema#ObjectSchema'.dependentSchemas
def jm_f_225(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#schema#ObjectSchema'.dependentSchemas.''
        result = json_model_74(model, path)
        if not result: return False
    return True


# object $.'$#schema#ObjectSchema'.dependentRequired
def jm_f_255(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.'$#schema#ObjectSchema'.dependentRequired.''
        result = json_model_68(model, path)
        if not result: return False
    return True


# object $.'$#schema#ObjectSchema'
def json_model_73(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_73_may:  # may
            if not json_model_73_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True



# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = json_model_1(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_1_must = {
    "openapi": jm_f_0,
    "info": jm_f_1,
}
json_model_1_may = {
    "jsonSchemaDialect": jm_f_2,
    "servers": jm_f_3,
    "paths": jm_f_4,
    "webhooks": jm_f_5,
    "component": jm_f_6,
    "security": jm_f_7,
    "tags": jm_f_8,
    "externalDocs": jm_f_9,
}
json_model_2_must = {
    "title": jm_f_10,
    "version": jm_f_11,
}
json_model_2_may = {
    "summary": jm_f_12,
    "description": jm_f_13,
    "termsOfService": jm_f_14,
    "contact": jm_f_15,
    "license": jm_f_16,
}
json_model_3_may = {
    "name": jm_f_17,
    "url": jm_f_18,
    "email": jm_f_19,
}
jm_obj_0_must = {
    "name": jm_f_20,
    "identifier": jm_f_21,
}
jm_obj_1_must = {
    "name": jm_f_22,
    "url": jm_f_23,
}
json_model_5_must = {
    "url": jm_f_24,
}
json_model_5_may = {
    "description": jm_f_25,
    "variables": jm_f_26,
}
json_model_6_must = {
    "default": jm_f_27,
}
json_model_6_may = {
    "enum": jm_f_28,
    "description": jm_f_29,
}
json_model_7_may = {
    "schemas": jm_f_30,
    "responses": jm_f_31,
    "parameters": jm_f_32,
    "examples": jm_f_33,
    "requestBodies": jm_f_34,
    "headers": jm_f_35,
    "securitySchemes": jm_f_36,
    "links": jm_f_37,
    "callbacks": jm_f_38,
    "pathItems": jm_f_39,
}
json_model_9_may = {
    "$ref": jm_f_40,
    "summary": jm_f_41,
    "description": jm_f_42,
    "get": jm_f_43,
    "put": jm_f_44,
    "post": jm_f_45,
    "options": jm_f_46,
    "head": jm_f_47,
    "patch": jm_f_48,
    "trace": jm_f_49,
    "servers": jm_f_50,
    "parameters": jm_f_51,
}
json_model_10_may = {
    "tags": jm_f_52,
    "summary": jm_f_53,
    "description": jm_f_54,
    "externalDocs": jm_f_55,
    "operationId": jm_f_56,
    "parameters": jm_f_57,
    "requestBody": jm_f_58,
    "responses": jm_f_59,
    "callbacks": jm_f_60,
    "deprecated": jm_f_61,
    "security": jm_f_62,
    "servers": jm_f_63,
}
json_model_11_must = {
    "url": jm_f_64,
}
json_model_11_may = {
    "description": jm_f_65,
}
json_model_12_may = {
    "description": jm_f_66,
    "required": jm_f_67,
    "deprecated": jm_f_68,
    "allowEmptyValue": jm_f_69,
    "style": jm_f_70,
    "explode": jm_f_71,
    "allowReserved": jm_f_72,
    "schema": jm_f_73,
    "example": jm_f_74,
    "examples": jm_f_75,
    "content": jm_f_76,
}
json_model_13_must = {
    "name": jm_f_77,
    "in": jm_f_78,
}
json_model_13_may = {
    "description": jm_f_79,
    "required": jm_f_80,
    "deprecated": jm_f_81,
    "allowEmptyValue": jm_f_82,
    "style": jm_f_83,
    "explode": jm_f_84,
    "allowReserved": jm_f_85,
    "schema": jm_f_86,
    "example": jm_f_87,
    "examples": jm_f_88,
    "content": jm_f_89,
}
json_model_14_may = {
    "description": jm_f_90,
    "content": jm_f_91,
    "required": jm_f_92,
}
json_model_15_may = {
    "schema": jm_f_93,
    "example": jm_f_94,
    "examples": jm_f_95,
    "encoding": jm_f_96,
}
json_model_16_may = {
    "contentType": jm_f_97,
    "headers": jm_f_98,
    "style": jm_f_99,
    "explode": jm_f_100,
    "allowReserved": jm_f_101,
}
json_model_17_may = {
    "default": jm_f_102,
}
json_model_18_may = {
    "description": jm_f_103,
    "headers": jm_f_104,
    "content": jm_f_105,
    "links": jm_f_106,
}
json_model_20_may = {
    "summary": jm_f_107,
    "description": jm_f_108,
    "value": jm_f_109,
    "externalValue": jm_f_110,
}
jm_obj_2_must = {
    "operationRef": jm_f_111,
}
jm_obj_2_may = {
    "parameters": jm_f_112,
    "requestBody": jm_f_113,
    "description": jm_f_114,
    "server": jm_f_115,
}
jm_obj_3_must = {
    "operationId": jm_f_116,
}
jm_obj_3_may = {
    "parameters": jm_f_117,
    "requestBody": jm_f_118,
    "description": jm_f_119,
    "server": jm_f_120,
}
json_model_24_must = {
    "name": jm_f_121,
}
json_model_24_may = {
    "description": jm_f_122,
    "externalDocs": jm_f_123,
}
json_model_25_must = {
    "$ref": jm_f_124,
}
json_model_25_may = {
    "summary": jm_f_125,
    "description": jm_f_126,
}
json_model_27_may = {
    "$id": jm_f_127,
    "$schema": jm_f_128,
    "$ref": jm_f_129,
    "$anchor": jm_f_130,
    "$dynamicRef": jm_f_131,
    "$dynamicAnchor": jm_f_132,
    "$vocabulary": jm_f_133,
    "$comment": jm_f_134,
    "$defs": jm_f_135,
    "prefixItems": jm_f_136,
    "items": jm_f_137,
    "contains": jm_f_138,
    "additionalProperties": jm_f_139,
    "properties": jm_f_140,
    "patternProperties": jm_f_141,
    "dependentSchemas": jm_f_142,
    "propertyNames": jm_f_143,
    "if": jm_f_144,
    "then": jm_f_145,
    "else": jm_f_146,
    "not": jm_f_147,
    "allOf": jm_f_148,
    "anyOf": jm_f_149,
    "oneOf": jm_f_150,
    "unevaluatedItems": jm_f_151,
    "unevaluatedProperties": jm_f_152,
    "type": jm_f_153,
    "const": jm_f_154,
    "enum": jm_f_155,
    "multipleOf": jm_f_156,
    "maximum": jm_f_157,
    "exclusiveMaximum": jm_f_158,
    "minimum": jm_f_159,
    "exclusiveMinimum": jm_f_160,
    "maxLength": jm_f_161,
    "minLength": jm_f_162,
    "pattern": jm_f_163,
    "maxItems": jm_f_164,
    "minItems": jm_f_165,
    "uniqueItems": jm_f_166,
    "maxContains": jm_f_167,
    "minContains": jm_f_168,
    "maxProperties": jm_f_169,
    "minProperties": jm_f_170,
    "required": jm_f_171,
    "dependentRequired": jm_f_172,
    "title": jm_f_173,
    "description": jm_f_174,
    "default": jm_f_175,
    "deprecated": jm_f_176,
    "readOnly": jm_f_177,
    "writeOnly": jm_f_178,
    "examples": jm_f_179,
    "format": jm_f_180,
    "contentEncoding": jm_f_181,
    "contentMediaType": jm_f_182,
    "contentSchema": jm_f_183,
    "discriminator": jm_f_184,
    "externalDocs": jm_f_185,
    "xml": jm_f_186,
}
json_model_28_must = {
    "propertyName": jm_f_187,
}
json_model_28_may = {
    "mapping": jm_f_188,
}
json_model_29_may = {
    "name": jm_f_189,
    "namespace": jm_f_190,
    "prefix": jm_f_191,
    "attribute": jm_f_192,
    "wrapped": jm_f_193,
}
json_model_30_must = {
    "type": jm_f_194,
    "name": jm_f_195,
    "in": jm_f_196,
    "scheme": jm_f_197,
    "flows": jm_f_198,
    "openIdConnectUrl": jm_f_199,
}
json_model_30_may = {
    "description": jm_f_200,
    "bearerFormat": jm_f_201,
}
json_model_31_may = {
    "implicit": jm_f_202,
    "password": jm_f_203,
    "clientCredentials": jm_f_204,
    "authorizationCode": jm_f_205,
}
json_model_32_must = {
    "authorizationUrl": jm_f_206,
    "tokenUrl": jm_f_207,
    "scopes": jm_f_208,
}
json_model_32_may = {
    "refreshUrl": jm_f_209,
}
json_model_73_may = {
    "$id": jm_f_210,
    "$schema": jm_f_211,
    "$ref": jm_f_212,
    "$anchor": jm_f_213,
    "$dynamicRef": jm_f_214,
    "$dynamicAnchor": jm_f_215,
    "$vocabulary": jm_f_216,
    "$comment": jm_f_217,
    "$defs": jm_f_218,
    "prefixItems": jm_f_219,
    "items": jm_f_220,
    "contains": jm_f_221,
    "additionalProperties": jm_f_222,
    "properties": jm_f_223,
    "patternProperties": jm_f_224,
    "dependentSchemas": jm_f_225,
    "propertyNames": jm_f_226,
    "if": jm_f_227,
    "then": jm_f_228,
    "else": jm_f_229,
    "not": jm_f_230,
    "allOf": jm_f_231,
    "anyOf": jm_f_232,
    "oneOf": jm_f_233,
    "unevaluatedItems": jm_f_234,
    "unevaluatedProperties": jm_f_235,
    "type": jm_f_236,
    "const": jm_f_237,
    "enum": jm_f_238,
    "multipleOf": jm_f_239,
    "maximum": jm_f_240,
    "exclusiveMaximum": jm_f_241,
    "minimum": jm_f_242,
    "exclusiveMinimum": jm_f_243,
    "maxLength": jm_f_244,
    "minLength": jm_f_245,
    "pattern": jm_f_246,
    "maxItems": jm_f_247,
    "minItems": jm_f_248,
    "uniqueItems": jm_f_249,
    "maxContains": jm_f_250,
    "minContains": jm_f_251,
    "maxProperties": jm_f_252,
    "minProperties": jm_f_253,
    "required": jm_f_254,
    "dependentRequired": jm_f_255,
    "title": jm_f_256,
    "description": jm_f_257,
    "default": jm_f_258,
    "deprecated": jm_f_259,
    "readOnly": jm_f_260,
    "writeOnly": jm_f_261,
    "examples": jm_f_262,
    "format": jm_f_263,
    "contentEncoding": jm_f_264,
    "contentMediaType": jm_f_265,
    "contentSchema": jm_f_266,
}


