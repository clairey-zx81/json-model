#! /bin/env python
#
# Model: ./openapi-310.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

json_model_2_must: PropMap
json_model_2_may: PropMap
# regex "/^x\\-.*$/"
jm_re_0 = re.compile("^x\\-.*$").search
json_model_3_must: PropMap
json_model_3_may: PropMap
json_model_4_may: PropMap
jm_obj_0_must: PropMap
jm_obj_1_must: PropMap
json_model_6_must: PropMap
json_model_6_may: PropMap
json_model_7_must: PropMap
json_model_7_may: PropMap
json_model_8_may: PropMap
# regex "/^//"
jm_re_1 = re.compile("^/").search
json_model_10_may: PropMap
json_model_11_may: PropMap
json_model_12_must: PropMap
json_model_12_may: PropMap
json_model_13_may: PropMap
json_model_14_must: PropMap
json_model_14_may: PropMap
json_model_15_may: PropMap
json_model_16_may: PropMap
json_model_17_may: PropMap
json_model_18_may: PropMap
# regex "/^[1-5](\\d\\d|XX)$/"
jm_re_2 = re.compile("^[1-5](\\d\\d|XX)$").search
json_model_19_may: PropMap
json_model_21_may: PropMap
# regex "/\\{.*\\}/"
jm_re_3 = re.compile("\\{.*\\}").search
jm_obj_2_must: PropMap
jm_obj_2_may: PropMap
jm_obj_3_must: PropMap
jm_obj_3_may: PropMap
json_model_25_must: PropMap
json_model_25_may: PropMap
json_model_26_must: PropMap
json_model_26_may: PropMap
json_model_28_may: PropMap
json_model_29_must: PropMap
json_model_29_may: PropMap
json_model_30_may: PropMap
json_model_31_must: PropMap
json_model_31_may: PropMap
json_model_32_may: PropMap
json_model_33_must: PropMap
json_model_33_may: PropMap
json_model_51_may: PropMap

def is_valid_re(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except Exception as e:
            rep is None or rep.append(f"regex compile error at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for regex at {path}: {_tname(value)}")
    return False

def is_valid_url(value: Jsonable, path: str, rep: Report = None) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except Exception as e:
            rep is None or re.append(f"invalid url at {path}: {value} ({e})")
            return False
    rep is None or rep.append(f"incompatible type for url at {path}: {_tname(value)}")
    return False

# define "json_model_2_must_openapi" ($.'$OpenAPI'.openapi)
def jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OpenAPI'.openapi
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$OpenAPI'.openapi]")
    return result

# define "json_model_2_must_info" ($.'$OpenAPI'.info)
def jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OpenAPI'.info
    result = json_model_3(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Info at {path} [$.'$OpenAPI'.info]")
    return result

# define "json_model_2_may_jsonSchemaDialect" ($.'$OpenAPI'.jsonSchemaDialect)
def jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OpenAPI'.jsonSchemaDialect
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$OpenAPI'.jsonSchemaDialect]")
    return result

# define "json_model_2_may_servers" ($.'$OpenAPI'.servers)
def jm_f_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OpenAPI'.servers
    result = isinstance(value, list)
    if result:
        for array_0_idx, array_0_item in enumerate(value):
            lpath = path + '.' + str(array_0_idx)
            # $.'$OpenAPI'.servers.0
            result = json_model_6(array_0_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Server at {lpath} [$.'$OpenAPI'.servers.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$OpenAPI'.servers]")
    return result

# define "json_model_2_may_paths" ($.'$OpenAPI'.paths)
def jm_f_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OpenAPI'.paths
    result = json_model_9(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Paths at {path} [$.'$OpenAPI'.paths]")
    return result



# define "json_model_2_may_component" ($.'$OpenAPI'.component)
def jm_f_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OpenAPI'.component
    result = json_model_8(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Components at {path} [$.'$OpenAPI'.component]")
    return result

# define "json_model_2_may_security" ($.'$OpenAPI'.security)
def jm_f_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OpenAPI'.security
    result = json_model_34(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $SecurityRequirement at {path} [$.'$OpenAPI'.security]")
    return result

# define "json_model_2_may_tags" ($.'$OpenAPI'.tags)
def jm_f_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OpenAPI'.tags
    result = isinstance(value, list)
    if result:
        for array_1_idx, array_1_item in enumerate(value):
            lpath = path + '.' + str(array_1_idx)
            # $.'$OpenAPI'.tags.0
            result = json_model_25(array_1_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Tag at {lpath} [$.'$OpenAPI'.tags.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$OpenAPI'.tags]")
    return result

# define "json_model_2_may_externalDocs" ($.'$OpenAPI'.externalDocs)
def jm_f_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OpenAPI'.externalDocs
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $ExternalDocumentation at {path} [$.'$OpenAPI'.externalDocs]")
    return result

# define "json_model_3_must_title" ($.'$Info'.title)
def jm_f_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Info'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Info'.title]")
    return result

# define "json_model_3_must_version" ($.'$Info'.version)
def jm_f_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Info'.version
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Info'.version]")
    return result

# define "json_model_3_may_summary" ($.'$Info'.summary)
def jm_f_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Info'.summary
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Info'.summary]")
    return result

# define "json_model_3_may_description" ($.'$Info'.description)
def jm_f_13(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Info'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Info'.description]")
    return result

# define "json_model_3_may_termsOfService" ($.'$Info'.termsOfService)
def jm_f_14(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Info'.termsOfService
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Info'.termsOfService]")
    return result

# define "json_model_3_may_contact" ($.'$Info'.contact)
def jm_f_15(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Info'.contact
    result = json_model_4(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Contact at {path} [$.'$Info'.contact]")
    return result

# define "json_model_3_may_license" ($.'$Info'.license)
def jm_f_16(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Info'.license
    result = json_model_5(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $License at {path} [$.'$Info'.license]")
    return result

# define "json_model_4_may_name" ($.'$Contact'.name)
def jm_f_17(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Contact'.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Contact'.name]")
    return result

# define "json_model_4_may_url" ($.'$Contact'.url)
def jm_f_18(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Contact'.url
    result = is_valid_url(value, path, rep) or _rep(f"invalid $URL at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $URL at {path} [$.'$Contact'.url]")
    return result

# define "json_model_4_may_email" ($.'$Contact'.email)
def jm_f_19(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Contact'.email
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Contact'.email]")
    return result

# define "jm_obj_0_must_name" ($.'$License'.'|'.0.name)
def jm_f_20(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$License'.'|'.0.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$License'.'|'.0.name]")
    return result

# define "jm_obj_0_must_identifier" ($.'$License'.'|'.0.identifier)
def jm_f_21(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$License'.'|'.0.identifier
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$License'.'|'.0.identifier]")
    return result

# define "jm_obj_1_must_name" ($.'$License'.'|'.1.name)
def jm_f_22(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$License'.'|'.1.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$License'.'|'.1.name]")
    return result

# define "jm_obj_1_must_url" ($.'$License'.'|'.1.url)
def jm_f_23(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$License'.'|'.1.url
    result = is_valid_url(value, path, rep) or _rep(f"invalid $URL at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $URL at {path} [$.'$License'.'|'.1.url]")
    return result

# define "json_model_6_must_url" ($.'$Server'.url)
def jm_f_24(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Server'.url
    result = is_valid_url(value, path, rep) or _rep(f"invalid $URL at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $URL at {path} [$.'$Server'.url]")
    return result

# define "json_model_6_may_description" ($.'$Server'.description)
def jm_f_25(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Server'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Server'.description]")
    return result



# define "json_model_7_must_default" ($.'$ServerVariable'.default)
def jm_f_27(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ServerVariable'.default
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$ServerVariable'.default]")
    return result

# define "json_model_7_may_enum" ($.'$ServerVariable'.enum)
def jm_f_28(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ServerVariable'.enum
    result = isinstance(value, list)
    if result:
        for array_2_idx, array_2_item in enumerate(value):
            lpath = path + '.' + str(array_2_idx)
            # $.'$ServerVariable'.enum.0
            result = isinstance(array_2_item, str)
            if not result:
                rep is None or rep.append(f"not an expected string at {lpath} [$.'$ServerVariable'.enum.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$ServerVariable'.enum]")
    return result

# define "json_model_7_may_description" ($.'$ServerVariable'.description)
def jm_f_29(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ServerVariable'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$ServerVariable'.description]")
    return result





















# define "json_model_10_may_$ref" ($.'$PathItem'.'$ref')
def jm_f_40(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$PathItem'.'$ref'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$PathItem'.'$ref']")
    return result

# define "json_model_10_may_summary" ($.'$PathItem'.summary)
def jm_f_41(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$PathItem'.summary
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$PathItem'.summary]")
    return result

# define "json_model_10_may_description" ($.'$PathItem'.description)
def jm_f_42(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$PathItem'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$PathItem'.description]")
    return result

# define "json_model_10_may_get" ($.'$PathItem'.get)
def jm_f_43(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$PathItem'.get
    result = json_model_11(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$PathItem'.get]")
    return result

# define "json_model_10_may_put" ($.'$PathItem'.put)
def jm_f_44(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$PathItem'.put
    result = json_model_11(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$PathItem'.put]")
    return result

# define "json_model_10_may_post" ($.'$PathItem'.post)
def jm_f_45(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$PathItem'.post
    result = json_model_11(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$PathItem'.post]")
    return result

# define "json_model_10_may_options" ($.'$PathItem'.options)
def jm_f_46(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$PathItem'.options
    result = json_model_11(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$PathItem'.options]")
    return result

# define "json_model_10_may_head" ($.'$PathItem'.head)
def jm_f_47(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$PathItem'.head
    result = json_model_11(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$PathItem'.head]")
    return result

# define "json_model_10_may_patch" ($.'$PathItem'.patch)
def jm_f_48(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$PathItem'.patch
    result = json_model_11(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$PathItem'.patch]")
    return result

# define "json_model_10_may_trace" ($.'$PathItem'.trace)
def jm_f_49(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$PathItem'.trace
    result = json_model_11(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$PathItem'.trace]")
    return result

# define "json_model_10_may_servers" ($.'$PathItem'.servers)
def jm_f_50(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$PathItem'.servers
    result = json_model_11(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Operation at {path} [$.'$PathItem'.servers]")
    return result



# define "json_model_11_may_tags" ($.'$Operation'.tags)
def jm_f_52(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Operation'.tags
    result = isinstance(value, list)
    if result:
        for array_3_idx, array_3_item in enumerate(value):
            lpath = path + '.' + str(array_3_idx)
            # $.'$Operation'.tags.0
            result = isinstance(array_3_item, str)
            if not result:
                rep is None or rep.append(f"not an expected string at {lpath} [$.'$Operation'.tags.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Operation'.tags]")
    return result

# define "json_model_11_may_summary" ($.'$Operation'.summary)
def jm_f_53(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Operation'.summary
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Operation'.summary]")
    return result

# define "json_model_11_may_description" ($.'$Operation'.description)
def jm_f_54(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Operation'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Operation'.description]")
    return result

# define "json_model_11_may_externalDocs" ($.'$Operation'.externalDocs)
def jm_f_55(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Operation'.externalDocs
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $ExternalDocumentation at {path} [$.'$Operation'.externalDocs]")
    return result

# define "json_model_11_may_operationId" ($.'$Operation'.operationId)
def jm_f_56(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Operation'.operationId
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Operation'.operationId]")
    return result





# define "json_model_11_may_responses" ($.'$Operation'.responses)
def jm_f_59(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Operation'.responses
    result = json_model_18(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Responses at {path} [$.'$Operation'.responses]")
    return result



# define "json_model_11_may_deprecated" ($.'$Operation'.deprecated)
def jm_f_61(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Operation'.deprecated
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Operation'.deprecated]")
    return result

# define "json_model_11_may_security" ($.'$Operation'.security)
def jm_f_62(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Operation'.security
    result = isinstance(value, list)
    if result:
        for array_4_idx, array_4_item in enumerate(value):
            lpath = path + '.' + str(array_4_idx)
            # $.'$Operation'.security.0
            result = json_model_34(array_4_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $SecurityRequirement at {lpath} [$.'$Operation'.security.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Operation'.security]")
    return result

# define "json_model_11_may_servers" ($.'$Operation'.servers)
def jm_f_63(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Operation'.servers
    result = isinstance(value, list)
    if result:
        for array_5_idx, array_5_item in enumerate(value):
            lpath = path + '.' + str(array_5_idx)
            # $.'$Operation'.servers.0
            result = json_model_6(array_5_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Server at {lpath} [$.'$Operation'.servers.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Operation'.servers]")
    return result

# define "json_model_12_must_url" ($.'$ExternalDocumentation'.url)
def jm_f_64(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ExternalDocumentation'.url
    result = is_valid_url(value, path, rep) or _rep(f"invalid $URL at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $URL at {path} [$.'$ExternalDocumentation'.url]")
    return result

# define "json_model_12_may_description" ($.'$ExternalDocumentation'.description)
def jm_f_65(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$ExternalDocumentation'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$ExternalDocumentation'.description]")
    return result

# define "json_model_13_may_description" ($.'$parameterShare'.description)
def jm_f_66(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$parameterShare'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$parameterShare'.description]")
    return result

# define "json_model_13_may_required" ($.'$parameterShare'.required)
def jm_f_67(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$parameterShare'.required
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$parameterShare'.required]")
    return result

# define "json_model_13_may_deprecated" ($.'$parameterShare'.deprecated)
def jm_f_68(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$parameterShare'.deprecated
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$parameterShare'.deprecated]")
    return result

# define "json_model_13_may_allowEmptyValue" ($.'$parameterShare'.allowEmptyValue)
def jm_f_69(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$parameterShare'.allowEmptyValue
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$parameterShare'.allowEmptyValue]")
    return result

# define "json_model_13_may_style" ($.'$parameterShare'.style)
def jm_f_70(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$parameterShare'.style
    result = not isinstance(value, (list, dict)) and value in {'deepObject', 'form', 'label', 'matrix', 'pipeDelimited', 'simple', 'spaceDelimited'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$parameterShare'.style.'|']")
    return result

# define "json_model_13_may_explode" ($.'$parameterShare'.explode)
def jm_f_71(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$parameterShare'.explode
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$parameterShare'.explode]")
    return result

# define "json_model_13_may_allowReserved" ($.'$parameterShare'.allowReserved)
def jm_f_72(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$parameterShare'.allowReserved
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$parameterShare'.allowReserved]")
    return result

# define "json_model_13_may_schema" ($.'$parameterShare'.schema)
def jm_f_73(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$parameterShare'.schema
    result = json_model_28(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$parameterShare'.schema]")
    return result

# define "json_model_13_may_example" ($.'$parameterShare'.example)
def jm_f_74(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$parameterShare'.example
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$parameterShare'.example]")
    return result





# define "json_model_14_must_name" ($.'$Parameter'.name)
def jm_f_77(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Parameter'.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Parameter'.name]")
    return result

# define "json_model_14_must_in" ($.'$Parameter'.in)
def jm_f_78(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Parameter'.in
    result = not isinstance(value, (list, dict)) and value in {'cookie', 'header', 'path', 'query'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$Parameter'.in.'|']")
    return result

# define "json_model_14_may_description" ($.'$Parameter'.description)
def jm_f_79(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Parameter'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Parameter'.description]")
    return result

# define "json_model_14_may_required" ($.'$Parameter'.required)
def jm_f_80(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Parameter'.required
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Parameter'.required]")
    return result

# define "json_model_14_may_deprecated" ($.'$Parameter'.deprecated)
def jm_f_81(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Parameter'.deprecated
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Parameter'.deprecated]")
    return result

# define "json_model_14_may_allowEmptyValue" ($.'$Parameter'.allowEmptyValue)
def jm_f_82(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Parameter'.allowEmptyValue
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Parameter'.allowEmptyValue]")
    return result

# define "json_model_14_may_style" ($.'$Parameter'.style)
def jm_f_83(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Parameter'.style
    result = not isinstance(value, (list, dict)) and value in {'deepObject', 'form', 'label', 'matrix', 'pipeDelimited', 'simple', 'spaceDelimited'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$Parameter'.style.'|']")
    return result

# define "json_model_14_may_explode" ($.'$Parameter'.explode)
def jm_f_84(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Parameter'.explode
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Parameter'.explode]")
    return result

# define "json_model_14_may_allowReserved" ($.'$Parameter'.allowReserved)
def jm_f_85(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Parameter'.allowReserved
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Parameter'.allowReserved]")
    return result

# define "json_model_14_may_schema" ($.'$Parameter'.schema)
def jm_f_86(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Parameter'.schema
    result = json_model_28(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$Parameter'.schema]")
    return result

# define "json_model_14_may_example" ($.'$Parameter'.example)
def jm_f_87(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Parameter'.example
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$Parameter'.example]")
    return result





# define "json_model_15_may_description" ($.'$RequestBody'.description)
def jm_f_90(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$RequestBody'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$RequestBody'.description]")
    return result



# define "json_model_15_may_required" ($.'$RequestBody'.required)
def jm_f_92(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$RequestBody'.required
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$RequestBody'.required]")
    return result

# define "json_model_16_may_schema" ($.'$MediaType'.schema)
def jm_f_93(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$MediaType'.schema
    result = json_model_28(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$MediaType'.schema]")
    return result

# define "json_model_16_may_example" ($.'$MediaType'.example)
def jm_f_94(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$MediaType'.example
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$MediaType'.example]")
    return result





# define "json_model_17_may_contentType" ($.'$Encoding'.contentType)
def jm_f_97(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Encoding'.contentType
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Encoding'.contentType]")
    return result



# define "json_model_17_may_style" ($.'$Encoding'.style)
def jm_f_99(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Encoding'.style
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Encoding'.style]")
    return result

# define "json_model_17_may_explode" ($.'$Encoding'.explode)
def jm_f_100(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Encoding'.explode
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Encoding'.explode]")
    return result

# define "json_model_17_may_allowReserved" ($.'$Encoding'.allowReserved)
def jm_f_101(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Encoding'.allowReserved
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Encoding'.allowReserved]")
    return result

# define "json_model_18_may_default" ($.'$Responses'.default)
def jm_f_102(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Responses'.default
    # $.'$Responses'.default.'|'.0
    result = json_model_19(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Response at {path} [$.'$Responses'.default.'|'.0]")
    if not result:
        # $.'$Responses'.default.'|'.1
        result = json_model_26(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Reference at {path} [$.'$Responses'.default.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Responses'.default.'|']")
    return result

# define "json_model_19_may_description" ($.'$Response'.description)
def jm_f_103(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Response'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Response'.description]")
    return result







# define "json_model_21_may_summary" ($.'$Example'.summary)
def jm_f_107(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Example'.summary
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Example'.summary]")
    return result

# define "json_model_21_may_description" ($.'$Example'.description)
def jm_f_108(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Example'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Example'.description]")
    return result

# define "json_model_21_may_value" ($.'$Example'.value)
def jm_f_109(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Example'.value
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$Example'.value]")
    return result

# define "json_model_21_may_externalValue" ($.'$Example'.externalValue)
def jm_f_110(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Example'.externalValue
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Example'.externalValue]")
    return result

# define "jm_obj_2_must_operationRef" ($.'$Link'.'|'.0.operationRef)
def jm_f_111(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Link'.'|'.0.operationRef
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Link'.'|'.0.operationRef]")
    return result



# define "jm_obj_2_may_requestBody" ($.'$Link'.'|'.0.requestBody)
def jm_f_113(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Link'.'|'.0.requestBody
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$Link'.'|'.0.requestBody]")
    return result

# define "jm_obj_2_may_description" ($.'$Link'.'|'.0.description)
def jm_f_114(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Link'.'|'.0.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Link'.'|'.0.description]")
    return result

# define "jm_obj_2_may_server" ($.'$Link'.'|'.0.server)
def jm_f_115(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Link'.'|'.0.server
    result = json_model_6(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Server at {path} [$.'$Link'.'|'.0.server]")
    return result

# define "jm_obj_3_must_operationId" ($.'$Link'.'|'.1.operationId)
def jm_f_116(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Link'.'|'.1.operationId
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Link'.'|'.1.operationId]")
    return result



# define "jm_obj_3_may_requestBody" ($.'$Link'.'|'.1.requestBody)
def jm_f_118(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Link'.'|'.1.requestBody
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$Link'.'|'.1.requestBody]")
    return result

# define "jm_obj_3_may_description" ($.'$Link'.'|'.1.description)
def jm_f_119(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Link'.'|'.1.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Link'.'|'.1.description]")
    return result

# define "jm_obj_3_may_server" ($.'$Link'.'|'.1.server)
def jm_f_120(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Link'.'|'.1.server
    result = json_model_6(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Server at {path} [$.'$Link'.'|'.1.server]")
    return result

# define "json_model_25_must_name" ($.'$Tag'.name)
def jm_f_121(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Tag'.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Tag'.name]")
    return result

# define "json_model_25_may_description" ($.'$Tag'.description)
def jm_f_122(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Tag'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Tag'.description]")
    return result

# define "json_model_25_may_externalDocs" ($.'$Tag'.externalDocs)
def jm_f_123(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Tag'.externalDocs
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $ExternalDocumentation at {path} [$.'$Tag'.externalDocs]")
    return result

# define "json_model_26_must_$ref" ($.'$Reference'.'$ref')
def jm_f_124(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Reference'.'$ref'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Reference'.'$ref']")
    return result

# define "json_model_26_may_summary" ($.'$Reference'.summary)
def jm_f_125(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Reference'.summary
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Reference'.summary]")
    return result

# define "json_model_26_may_description" ($.'$Reference'.description)
def jm_f_126(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Reference'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Reference'.description]")
    return result

# define "json_model_28_may_$id" ($.'$Schema'.'$id')
def jm_f_127(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.'$id'
    result = json_model_37(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#URI-REFERENCE at {path} [$.'$Schema'.'$id']")
    return result

# define "json_model_28_may_$schema" ($.'$Schema'.'$schema')
def jm_f_128(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.'$schema'
    result = isinstance(value, str) and value == "https://json-schema.org/draft/2020-12/schema"
    if not result:
        rep is None or rep.append(f"not an expected _https://json-schema.org/draft/2020-12/schema at {path} [$.'$Schema'.'$schema']")
    return result

# define "json_model_28_may_$ref" ($.'$Schema'.'$ref')
def jm_f_129(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.'$ref'
    result = json_model_37(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#URI-REFERENCE at {path} [$.'$Schema'.'$ref']")
    return result

# define "json_model_28_may_$anchor" ($.'$Schema'.'$anchor')
def jm_f_130(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.'$anchor'
    result = json_model_37(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#URI-REFERENCE at {path} [$.'$Schema'.'$anchor']")
    return result

# define "json_model_28_may_$dynamicRef" ($.'$Schema'.'$dynamicRef')
def jm_f_131(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.'$dynamicRef'
    result = json_model_37(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#URI-REFERENCE at {path} [$.'$Schema'.'$dynamicRef']")
    return result

# define "json_model_28_may_$dynamicAnchor" ($.'$Schema'.'$dynamicAnchor')
def jm_f_132(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.'$dynamicAnchor'
    result = json_model_37(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#URI-REFERENCE at {path} [$.'$Schema'.'$dynamicAnchor']")
    return result



# define "json_model_28_may_$comment" ($.'$Schema'.'$comment')
def jm_f_134(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Schema'.'$comment']")
    return result



# define "json_model_28_may_prefixItems" ($.'$Schema'.prefixItems)
def jm_f_136(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.prefixItems
    result = json_model_49(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#schemaArray at {path} [$.'$Schema'.prefixItems]")
    return result

# define "json_model_28_may_items" ($.'$Schema'.items)
def jm_f_137(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.items
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#Schema at {path} [$.'$Schema'.items]")
    return result

# define "json_model_28_may_contains" ($.'$Schema'.contains)
def jm_f_138(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.contains
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#Schema at {path} [$.'$Schema'.contains]")
    return result

# define "json_model_28_may_additionalProperties" ($.'$Schema'.additionalProperties)
def jm_f_139(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.additionalProperties
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#Schema at {path} [$.'$Schema'.additionalProperties]")
    return result







# define "json_model_28_may_propertyNames" ($.'$Schema'.propertyNames)
def jm_f_143(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.propertyNames
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#Schema at {path} [$.'$Schema'.propertyNames]")
    return result

# define "json_model_28_may_if" ($.'$Schema'.if)
def jm_f_144(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.if
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#Schema at {path} [$.'$Schema'.if]")
    return result

# define "json_model_28_may_then" ($.'$Schema'.then)
def jm_f_145(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.then
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#Schema at {path} [$.'$Schema'.then]")
    return result

# define "json_model_28_may_else" ($.'$Schema'.else)
def jm_f_146(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.else
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#Schema at {path} [$.'$Schema'.else]")
    return result

# define "json_model_28_may_not" ($.'$Schema'.not)
def jm_f_147(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.not
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#Schema at {path} [$.'$Schema'.not]")
    return result

# define "json_model_28_may_allOf" ($.'$Schema'.allOf)
def jm_f_148(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.allOf
    result = json_model_49(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#schemaArray at {path} [$.'$Schema'.allOf]")
    return result

# define "json_model_28_may_anyOf" ($.'$Schema'.anyOf)
def jm_f_149(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.anyOf
    result = json_model_49(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#schemaArray at {path} [$.'$Schema'.anyOf]")
    return result

# define "json_model_28_may_oneOf" ($.'$Schema'.oneOf)
def jm_f_150(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.oneOf
    result = json_model_49(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#schemaArray at {path} [$.'$Schema'.oneOf]")
    return result

# define "json_model_28_may_unevaluatedItems" ($.'$Schema'.unevaluatedItems)
def jm_f_151(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.unevaluatedItems
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#Schema at {path} [$.'$Schema'.unevaluatedItems]")
    return result

# define "json_model_28_may_unevaluatedProperties" ($.'$Schema'.unevaluatedProperties)
def jm_f_152(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.unevaluatedProperties
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#Schema at {path} [$.'$Schema'.unevaluatedProperties]")
    return result

# define "json_model_28_may_type" ($.'$Schema'.type)
def jm_f_153(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.type
    # $.'$Schema'.type.'|'.0
    result = json_model_44(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#simpleTypes at {path} [$.'$Schema'.type.'|'.0]")
    if not result:
        # $.'$Schema'.type.'|'.1
        result = json_model_45(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $schema#simpleTypesArray at {path} [$.'$Schema'.type.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$Schema'.type.'|']")
    return result

# define "json_model_28_may_const" ($.'$Schema'.const)
def jm_f_154(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.const
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$Schema'.const]")
    return result

# define "json_model_28_may_enum" ($.'$Schema'.enum)
def jm_f_155(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.enum
    result = isinstance(value, list)
    if result:
        for array_6_idx, array_6_item in enumerate(value):
            lpath = path + '.' + str(array_6_idx)
            # $.'$Schema'.enum.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Schema'.enum.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Schema'.enum]")
    return result

# define "json_model_28_may_multipleOf" ($.'$Schema'.multipleOf)
def jm_f_156(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.multipleOf
    result = isinstance(value, float) and value > 0.0
    if not result:
        rep is None or rep.append(f"not a 1.0 float at {path} [$.'$Schema'.multipleOf]")
    return result

# define "json_model_28_may_maximum" ($.'$Schema'.maximum)
def jm_f_157(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.maximum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$Schema'.maximum]")
    return result

# define "json_model_28_may_exclusiveMaximum" ($.'$Schema'.exclusiveMaximum)
def jm_f_158(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.exclusiveMaximum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$Schema'.exclusiveMaximum]")
    return result

# define "json_model_28_may_minimum" ($.'$Schema'.minimum)
def jm_f_159(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.minimum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$Schema'.minimum]")
    return result

# define "json_model_28_may_exclusiveMinimum" ($.'$Schema'.exclusiveMinimum)
def jm_f_160(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.exclusiveMinimum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$Schema'.exclusiveMinimum]")
    return result

# define "json_model_28_may_maxLength" ($.'$Schema'.maxLength)
def jm_f_161(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.maxLength
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#nonNegativeInteger at {path} [$.'$Schema'.maxLength]")
    return result

# define "json_model_28_may_minLength" ($.'$Schema'.minLength)
def jm_f_162(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.minLength
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#nonNegativeInteger at {path} [$.'$Schema'.minLength]")
    return result

# define "json_model_28_may_pattern" ($.'$Schema'.pattern)
def jm_f_163(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.pattern
    result = is_valid_re(value, path, rep) or _rep(f"invalid $REGEX at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $REGEX at {path} [$.'$Schema'.pattern]")
    return result

# define "json_model_28_may_maxItems" ($.'$Schema'.maxItems)
def jm_f_164(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.maxItems
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#nonNegativeInteger at {path} [$.'$Schema'.maxItems]")
    return result

# define "json_model_28_may_minItems" ($.'$Schema'.minItems)
def jm_f_165(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.minItems
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#nonNegativeInteger at {path} [$.'$Schema'.minItems]")
    return result

# define "json_model_28_may_uniqueItems" ($.'$Schema'.uniqueItems)
def jm_f_166(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.uniqueItems
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Schema'.uniqueItems]")
    return result

# define "json_model_28_may_maxContains" ($.'$Schema'.maxContains)
def jm_f_167(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.maxContains
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#nonNegativeInteger at {path} [$.'$Schema'.maxContains]")
    return result

# define "json_model_28_may_minContains" ($.'$Schema'.minContains)
def jm_f_168(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.minContains
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#nonNegativeInteger at {path} [$.'$Schema'.minContains]")
    return result

# define "json_model_28_may_maxProperties" ($.'$Schema'.maxProperties)
def jm_f_169(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.maxProperties
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#nonNegativeInteger at {path} [$.'$Schema'.maxProperties]")
    return result

# define "json_model_28_may_minProperties" ($.'$Schema'.minProperties)
def jm_f_170(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.minProperties
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#nonNegativeInteger at {path} [$.'$Schema'.minProperties]")
    return result

# define "json_model_28_may_required" ($.'$Schema'.required)
def jm_f_171(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.required
    result = json_model_46(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#stringArray at {path} [$.'$Schema'.required]")
    return result



# define "json_model_28_may_title" ($.'$Schema'.title)
def jm_f_173(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Schema'.title]")
    return result

# define "json_model_28_may_description" ($.'$Schema'.description)
def jm_f_174(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Schema'.description]")
    return result

# define "json_model_28_may_default" ($.'$Schema'.default)
def jm_f_175(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$Schema'.default]")
    return result

# define "json_model_28_may_deprecated" ($.'$Schema'.deprecated)
def jm_f_176(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.deprecated
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Schema'.deprecated]")
    return result

# define "json_model_28_may_readOnly" ($.'$Schema'.readOnly)
def jm_f_177(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.readOnly
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Schema'.readOnly]")
    return result

# define "json_model_28_may_writeOnly" ($.'$Schema'.writeOnly)
def jm_f_178(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.writeOnly
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$Schema'.writeOnly]")
    return result

# define "json_model_28_may_examples" ($.'$Schema'.examples)
def jm_f_179(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.examples
    result = isinstance(value, list)
    if result:
        for array_7_idx, array_7_item in enumerate(value):
            lpath = path + '.' + str(array_7_idx)
            # $.'$Schema'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Schema'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$Schema'.examples]")
    return result

# define "json_model_28_may_format" ($.'$Schema'.format)
def jm_f_180(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.format
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Schema'.format]")
    return result

# define "json_model_28_may_contentEncoding" ($.'$Schema'.contentEncoding)
def jm_f_181(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.contentEncoding
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Schema'.contentEncoding]")
    return result

# define "json_model_28_may_contentMediaType" ($.'$Schema'.contentMediaType)
def jm_f_182(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.contentMediaType
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Schema'.contentMediaType]")
    return result

# define "json_model_28_may_contentSchema" ($.'$Schema'.contentSchema)
def jm_f_183(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.contentSchema
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schema#Schema at {path} [$.'$Schema'.contentSchema]")
    return result

# define "json_model_28_may_discriminator" ($.'$Schema'.discriminator)
def jm_f_184(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.discriminator
    result = json_model_29(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Discriminator at {path} [$.'$Schema'.discriminator]")
    return result

# define "json_model_28_may_externalDocs" ($.'$Schema'.externalDocs)
def jm_f_185(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.externalDocs
    result = json_model_12(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $ExternalDocumentation at {path} [$.'$Schema'.externalDocs]")
    return result

# define "json_model_28_may_xml" ($.'$Schema'.xml)
def jm_f_186(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Schema'.xml
    result = json_model_30(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $XML at {path} [$.'$Schema'.xml]")
    return result

# define "json_model_29_must_propertyName" ($.'$Discriminator'.propertyName)
def jm_f_187(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Discriminator'.propertyName
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$Discriminator'.propertyName]")
    return result



# define "json_model_30_may_name" ($.'$XML'.name)
def jm_f_189(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$XML'.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$XML'.name]")
    return result

# define "json_model_30_may_namespace" ($.'$XML'.namespace)
def jm_f_190(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$XML'.namespace
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$XML'.namespace]")
    return result

# define "json_model_30_may_prefix" ($.'$XML'.prefix)
def jm_f_191(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$XML'.prefix
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$XML'.prefix]")
    return result

# define "json_model_30_may_attribute" ($.'$XML'.attribute)
def jm_f_192(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$XML'.attribute
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$XML'.attribute]")
    return result

# define "json_model_30_may_wrapped" ($.'$XML'.wrapped)
def jm_f_193(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$XML'.wrapped
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$XML'.wrapped]")
    return result

# define "json_model_31_must_type" ($.'$SecurityScheme'.type)
def jm_f_194(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$SecurityScheme'.type
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$SecurityScheme'.type]")
    return result

# define "json_model_31_must_name" ($.'$SecurityScheme'.name)
def jm_f_195(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$SecurityScheme'.name
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$SecurityScheme'.name]")
    return result

# define "json_model_31_must_in" ($.'$SecurityScheme'.in)
def jm_f_196(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$SecurityScheme'.in
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$SecurityScheme'.in]")
    return result

# define "json_model_31_must_scheme" ($.'$SecurityScheme'.scheme)
def jm_f_197(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$SecurityScheme'.scheme
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$SecurityScheme'.scheme]")
    return result

# define "json_model_31_must_flows" ($.'$SecurityScheme'.flows)
def jm_f_198(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$SecurityScheme'.flows
    result = json_model_32(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $OAuthFlows at {path} [$.'$SecurityScheme'.flows]")
    return result

# define "json_model_31_must_openIdConnectUrl" ($.'$SecurityScheme'.openIdConnectUrl)
def jm_f_199(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$SecurityScheme'.openIdConnectUrl
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$SecurityScheme'.openIdConnectUrl]")
    return result

# define "json_model_31_may_description" ($.'$SecurityScheme'.description)
def jm_f_200(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$SecurityScheme'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$SecurityScheme'.description]")
    return result

# define "json_model_31_may_bearerFormat" ($.'$SecurityScheme'.bearerFormat)
def jm_f_201(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$SecurityScheme'.bearerFormat
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$SecurityScheme'.bearerFormat]")
    return result

# define "json_model_32_may_implicit" ($.'$OAuthFlows'.implicit)
def jm_f_202(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OAuthFlows'.implicit
    result = json_model_33(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $OAuthFlow at {path} [$.'$OAuthFlows'.implicit]")
    return result

# define "json_model_32_may_password" ($.'$OAuthFlows'.password)
def jm_f_203(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OAuthFlows'.password
    result = json_model_33(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $OAuthFlow at {path} [$.'$OAuthFlows'.password]")
    return result

# define "json_model_32_may_clientCredentials" ($.'$OAuthFlows'.clientCredentials)
def jm_f_204(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OAuthFlows'.clientCredentials
    result = json_model_33(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $OAuthFlow at {path} [$.'$OAuthFlows'.clientCredentials]")
    return result

# define "json_model_32_may_authorizationCode" ($.'$OAuthFlows'.authorizationCode)
def jm_f_205(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OAuthFlows'.authorizationCode
    result = json_model_33(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $OAuthFlow at {path} [$.'$OAuthFlows'.authorizationCode]")
    return result

# define "json_model_33_must_authorizationUrl" ($.'$OAuthFlow'.authorizationUrl)
def jm_f_206(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OAuthFlow'.authorizationUrl
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$OAuthFlow'.authorizationUrl]")
    return result

# define "json_model_33_must_tokenUrl" ($.'$OAuthFlow'.tokenUrl)
def jm_f_207(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OAuthFlow'.tokenUrl
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$OAuthFlow'.tokenUrl]")
    return result



# define "json_model_33_may_refreshUrl" ($.'$OAuthFlow'.refreshUrl)
def jm_f_209(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$OAuthFlow'.refreshUrl
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$OAuthFlow'.refreshUrl]")
    return result

# define "json_model_51_may_$id" ($.'$schema#ObjectSchema'.'$id')
def jm_f_210(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.'$id'
    result = json_model_37(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$schema#ObjectSchema'.'$id']")
    return result

# define "json_model_51_may_$schema" ($.'$schema#ObjectSchema'.'$schema')
def jm_f_211(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.'$schema'
    result = isinstance(value, str) and value == "https://json-schema.org/draft/2020-12/schema"
    if not result:
        rep is None or rep.append(f"not an expected _https://json-schema.org/draft/2020-12/schema at {path} [$.'$schema#ObjectSchema'.'$schema']")
    return result

# define "json_model_51_may_$ref" ($.'$schema#ObjectSchema'.'$ref')
def jm_f_212(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.'$ref'
    result = json_model_37(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$schema#ObjectSchema'.'$ref']")
    return result

# define "json_model_51_may_$anchor" ($.'$schema#ObjectSchema'.'$anchor')
def jm_f_213(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.'$anchor'
    result = json_model_37(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$schema#ObjectSchema'.'$anchor']")
    return result

# define "json_model_51_may_$dynamicRef" ($.'$schema#ObjectSchema'.'$dynamicRef')
def jm_f_214(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.'$dynamicRef'
    result = json_model_37(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$schema#ObjectSchema'.'$dynamicRef']")
    return result

# define "json_model_51_may_$dynamicAnchor" ($.'$schema#ObjectSchema'.'$dynamicAnchor')
def jm_f_215(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.'$dynamicAnchor'
    result = json_model_37(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $URI-REFERENCE at {path} [$.'$schema#ObjectSchema'.'$dynamicAnchor']")
    return result



# define "json_model_51_may_$comment" ($.'$schema#ObjectSchema'.'$comment')
def jm_f_217(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.'$comment'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$schema#ObjectSchema'.'$comment']")
    return result



# define "json_model_51_may_prefixItems" ($.'$schema#ObjectSchema'.prefixItems)
def jm_f_219(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.prefixItems
    result = json_model_49(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$schema#ObjectSchema'.prefixItems]")
    return result

# define "json_model_51_may_items" ($.'$schema#ObjectSchema'.items)
def jm_f_220(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.items
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema#ObjectSchema'.items]")
    return result

# define "json_model_51_may_contains" ($.'$schema#ObjectSchema'.contains)
def jm_f_221(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.contains
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema#ObjectSchema'.contains]")
    return result

# define "json_model_51_may_additionalProperties" ($.'$schema#ObjectSchema'.additionalProperties)
def jm_f_222(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.additionalProperties
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema#ObjectSchema'.additionalProperties]")
    return result







# define "json_model_51_may_propertyNames" ($.'$schema#ObjectSchema'.propertyNames)
def jm_f_226(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.propertyNames
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema#ObjectSchema'.propertyNames]")
    return result

# define "json_model_51_may_if" ($.'$schema#ObjectSchema'.if)
def jm_f_227(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.if
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema#ObjectSchema'.if]")
    return result

# define "json_model_51_may_then" ($.'$schema#ObjectSchema'.then)
def jm_f_228(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.then
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema#ObjectSchema'.then]")
    return result

# define "json_model_51_may_else" ($.'$schema#ObjectSchema'.else)
def jm_f_229(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.else
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema#ObjectSchema'.else]")
    return result

# define "json_model_51_may_not" ($.'$schema#ObjectSchema'.not)
def jm_f_230(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.not
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema#ObjectSchema'.not]")
    return result

# define "json_model_51_may_allOf" ($.'$schema#ObjectSchema'.allOf)
def jm_f_231(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.allOf
    result = json_model_49(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$schema#ObjectSchema'.allOf]")
    return result

# define "json_model_51_may_anyOf" ($.'$schema#ObjectSchema'.anyOf)
def jm_f_232(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.anyOf
    result = json_model_49(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$schema#ObjectSchema'.anyOf]")
    return result

# define "json_model_51_may_oneOf" ($.'$schema#ObjectSchema'.oneOf)
def jm_f_233(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.oneOf
    result = json_model_49(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $schemaArray at {path} [$.'$schema#ObjectSchema'.oneOf]")
    return result

# define "json_model_51_may_unevaluatedItems" ($.'$schema#ObjectSchema'.unevaluatedItems)
def jm_f_234(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.unevaluatedItems
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema#ObjectSchema'.unevaluatedItems]")
    return result

# define "json_model_51_may_unevaluatedProperties" ($.'$schema#ObjectSchema'.unevaluatedProperties)
def jm_f_235(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.unevaluatedProperties
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema#ObjectSchema'.unevaluatedProperties]")
    return result

# define "json_model_51_may_type" ($.'$schema#ObjectSchema'.type)
def jm_f_236(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.type
    # $.'$schema#ObjectSchema'.type.'|'.0
    result = json_model_44(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $simpleTypes at {path} [$.'$schema#ObjectSchema'.type.'|'.0]")
    if not result:
        # $.'$schema#ObjectSchema'.type.'|'.1
        result = json_model_45(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $simpleTypesArray at {path} [$.'$schema#ObjectSchema'.type.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$schema#ObjectSchema'.type.'|']")
    return result

# define "json_model_51_may_const" ($.'$schema#ObjectSchema'.const)
def jm_f_237(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.const
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$schema#ObjectSchema'.const]")
    return result

# define "json_model_51_may_enum" ($.'$schema#ObjectSchema'.enum)
def jm_f_238(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.enum
    result = isinstance(value, list)
    if result:
        for array_12_idx, array_12_item in enumerate(value):
            lpath = path + '.' + str(array_12_idx)
            # $.'$schema#ObjectSchema'.enum.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$schema#ObjectSchema'.enum.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$schema#ObjectSchema'.enum]")
    return result

# define "json_model_51_may_multipleOf" ($.'$schema#ObjectSchema'.multipleOf)
def jm_f_239(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.multipleOf
    result = isinstance(value, float) and value > 0.0
    if not result:
        rep is None or rep.append(f"not a 1.0 float at {path} [$.'$schema#ObjectSchema'.multipleOf]")
    return result

# define "json_model_51_may_maximum" ($.'$schema#ObjectSchema'.maximum)
def jm_f_240(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.maximum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$schema#ObjectSchema'.maximum]")
    return result

# define "json_model_51_may_exclusiveMaximum" ($.'$schema#ObjectSchema'.exclusiveMaximum)
def jm_f_241(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.exclusiveMaximum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$schema#ObjectSchema'.exclusiveMaximum]")
    return result

# define "json_model_51_may_minimum" ($.'$schema#ObjectSchema'.minimum)
def jm_f_242(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.minimum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$schema#ObjectSchema'.minimum]")
    return result

# define "json_model_51_may_exclusiveMinimum" ($.'$schema#ObjectSchema'.exclusiveMinimum)
def jm_f_243(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.exclusiveMinimum
    result = isinstance(value, float)
    if not result:
        rep is None or rep.append(f"not a -1.0 float at {path} [$.'$schema#ObjectSchema'.exclusiveMinimum]")
    return result

# define "json_model_51_may_maxLength" ($.'$schema#ObjectSchema'.maxLength)
def jm_f_244(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.maxLength
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$schema#ObjectSchema'.maxLength]")
    return result

# define "json_model_51_may_minLength" ($.'$schema#ObjectSchema'.minLength)
def jm_f_245(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.minLength
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$schema#ObjectSchema'.minLength]")
    return result

# define "json_model_51_may_pattern" ($.'$schema#ObjectSchema'.pattern)
def jm_f_246(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.pattern
    result = is_valid_re(value, path, rep) or _rep(f"invalid $REGEX at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $REGEX at {path} [$.'$schema#ObjectSchema'.pattern]")
    return result

# define "json_model_51_may_maxItems" ($.'$schema#ObjectSchema'.maxItems)
def jm_f_247(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.maxItems
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$schema#ObjectSchema'.maxItems]")
    return result

# define "json_model_51_may_minItems" ($.'$schema#ObjectSchema'.minItems)
def jm_f_248(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.minItems
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$schema#ObjectSchema'.minItems]")
    return result

# define "json_model_51_may_uniqueItems" ($.'$schema#ObjectSchema'.uniqueItems)
def jm_f_249(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.uniqueItems
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$schema#ObjectSchema'.uniqueItems]")
    return result

# define "json_model_51_may_maxContains" ($.'$schema#ObjectSchema'.maxContains)
def jm_f_250(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.maxContains
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$schema#ObjectSchema'.maxContains]")
    return result

# define "json_model_51_may_minContains" ($.'$schema#ObjectSchema'.minContains)
def jm_f_251(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.minContains
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$schema#ObjectSchema'.minContains]")
    return result

# define "json_model_51_may_maxProperties" ($.'$schema#ObjectSchema'.maxProperties)
def jm_f_252(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.maxProperties
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$schema#ObjectSchema'.maxProperties]")
    return result

# define "json_model_51_may_minProperties" ($.'$schema#ObjectSchema'.minProperties)
def jm_f_253(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.minProperties
    result = json_model_47(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $nonNegativeInteger at {path} [$.'$schema#ObjectSchema'.minProperties]")
    return result

# define "json_model_51_may_required" ($.'$schema#ObjectSchema'.required)
def jm_f_254(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.required
    result = json_model_46(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $stringArray at {path} [$.'$schema#ObjectSchema'.required]")
    return result



# define "json_model_51_may_title" ($.'$schema#ObjectSchema'.title)
def jm_f_256(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.title
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$schema#ObjectSchema'.title]")
    return result

# define "json_model_51_may_description" ($.'$schema#ObjectSchema'.description)
def jm_f_257(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.description
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$schema#ObjectSchema'.description]")
    return result

# define "json_model_51_may_default" ($.'$schema#ObjectSchema'.default)
def jm_f_258(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.default
    result = True or _rep(f"invalid $ANY at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected $ANY at {path} [$.'$schema#ObjectSchema'.default]")
    return result

# define "json_model_51_may_deprecated" ($.'$schema#ObjectSchema'.deprecated)
def jm_f_259(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.deprecated
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$schema#ObjectSchema'.deprecated]")
    return result

# define "json_model_51_may_readOnly" ($.'$schema#ObjectSchema'.readOnly)
def jm_f_260(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.readOnly
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$schema#ObjectSchema'.readOnly]")
    return result

# define "json_model_51_may_writeOnly" ($.'$schema#ObjectSchema'.writeOnly)
def jm_f_261(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.writeOnly
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$schema#ObjectSchema'.writeOnly]")
    return result

# define "json_model_51_may_examples" ($.'$schema#ObjectSchema'.examples)
def jm_f_262(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.examples
    result = isinstance(value, list)
    if result:
        for array_13_idx, array_13_item in enumerate(value):
            lpath = path + '.' + str(array_13_idx)
            # $.'$schema#ObjectSchema'.examples.0
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$schema#ObjectSchema'.examples.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$schema#ObjectSchema'.examples]")
    return result

# define "json_model_51_may_format" ($.'$schema#ObjectSchema'.format)
def jm_f_263(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.format
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$schema#ObjectSchema'.format]")
    return result

# define "json_model_51_may_contentEncoding" ($.'$schema#ObjectSchema'.contentEncoding)
def jm_f_264(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.contentEncoding
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$schema#ObjectSchema'.contentEncoding]")
    return result

# define "json_model_51_may_contentMediaType" ($.'$schema#ObjectSchema'.contentMediaType)
def jm_f_265(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.contentMediaType
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$schema#ObjectSchema'.contentMediaType]")
    return result

# define "json_model_51_may_contentSchema" ($.'$schema#ObjectSchema'.contentSchema)
def jm_f_266(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#ObjectSchema'.contentSchema
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema#ObjectSchema'.contentSchema]")
    return result



# object $.'$OpenAPI'.webhooks
def jm_f_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$OpenAPI'.webhooks]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$OpenAPI'.webhooks.''
        # $.'$OpenAPI'.webhooks.''.'|'.0
        result = json_model_10(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $PathItem at {lpath} [$.'$OpenAPI'.webhooks.''.'|'.0]")
        if not result:
            # $.'$OpenAPI'.webhooks.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$OpenAPI'.webhooks.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$OpenAPI'.webhooks.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$OpenAPI'.webhooks.'']")
            return False
    return True


# object $.'$OpenAPI'
def json_model_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$OpenAPI']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_2_must:  # must
            must_count += 1
            if not json_model_2_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$OpenAPI'.{prop}]")
                return False
        elif prop in json_model_2_may:  # may
            if not json_model_2_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$OpenAPI'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$OpenAPI'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$OpenAPI'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$OpenAPI']")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$OpenAPI']")
    return result




# object $.'$Info'
def json_model_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Info']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_3_must:  # must
            must_count += 1
            if not json_model_3_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Info'.{prop}]")
                return False
        elif prop in json_model_3_may:  # may
            if not json_model_3_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Info'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Info'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Info'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Info']")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Info']")
    return result




# object $.'$Contact'
def json_model_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Contact']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_4_may:  # may
            if not json_model_4_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Contact'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Contact'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Contact'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Contact']")
            return False
    return True




# object $.'$License'.'|'.0
def jm_obj_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$License'.'|'.0]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in jm_obj_0_must:  # must
            must_count += 1
            if not jm_obj_0_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$License'.'|'.0.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$License'.'|'.0.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$License'.'|'.0.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$License'.'|'.0]")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$License'.'|'.0]")
    return result


# object $.'$License'.'|'.1
def jm_obj_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$License'.'|'.1]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in jm_obj_1_must:  # must
            must_count += 1
            if not jm_obj_1_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$License'.'|'.1.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$License'.'|'.1.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$License'.'|'.1.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$License'.'|'.1]")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$License'.'|'.1]")
    return result

# define "$License" ($.'$License')
def json_model_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$License'
    result = isinstance(value, dict)
    if result:
        # $.'$License'.'|'.0
        result = jm_obj_0(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$License'.'|'.0]")
        if not result:
            # $.'$License'.'|'.1
            result = jm_obj_1(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected object at {path} [$.'$License'.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {path} [$.'$License'.'|']")
    return result


# object $.'$Server'.variables
def jm_f_26(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Server'.variables]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Server'.variables.''
        result = json_model_7(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $ServerVariable at {lpath} [$.'$Server'.variables.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Server'.variables.'']")
            return False
    return True


# object $.'$Server'
def json_model_6(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Server']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_6_must:  # must
            must_count += 1
            if not json_model_6_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Server'.{prop}]")
                return False
        elif prop in json_model_6_may:  # may
            if not json_model_6_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Server'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Server'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Server'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Server']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Server']")
    return result




# object $.'$ServerVariable'
def json_model_7(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$ServerVariable']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_7_must:  # must
            must_count += 1
            if not json_model_7_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$ServerVariable'.{prop}]")
                return False
        elif prop in json_model_7_may:  # may
            if not json_model_7_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$ServerVariable'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$ServerVariable'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$ServerVariable'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$ServerVariable']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$ServerVariable']")
    return result




# object $.'$Components'.schemas
def jm_f_30(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Components'.schemas]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Components'.schemas.''
        result = json_model_28(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$Components'.schemas.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Components'.schemas.'']")
            return False
    return True


# object $.'$Components'.responses
def jm_f_31(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Components'.responses]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Components'.responses.''
        # $.'$Components'.responses.''.'|'.0
        result = json_model_19(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Response at {lpath} [$.'$Components'.responses.''.'|'.0]")
        if not result:
            # $.'$Components'.responses.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Components'.responses.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Components'.responses.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Components'.responses.'']")
            return False
    return True


# object $.'$Components'.parameters
def jm_f_32(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Components'.parameters]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Components'.parameters.''
        # $.'$Components'.parameters.''.'|'.0
        result = json_model_14(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Parameter at {lpath} [$.'$Components'.parameters.''.'|'.0]")
        if not result:
            # $.'$Components'.parameters.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Components'.parameters.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Components'.parameters.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Components'.parameters.'']")
            return False
    return True


# object $.'$Components'.examples
def jm_f_33(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Components'.examples]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Components'.examples.''
        # $.'$Components'.examples.''.'|'.0
        result = json_model_21(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Example at {lpath} [$.'$Components'.examples.''.'|'.0]")
        if not result:
            # $.'$Components'.examples.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Components'.examples.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Components'.examples.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Components'.examples.'']")
            return False
    return True


# object $.'$Components'.requestBodies
def jm_f_34(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Components'.requestBodies]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Components'.requestBodies.''
        # $.'$Components'.requestBodies.''.'|'.0
        result = json_model_15(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $RequestBody at {lpath} [$.'$Components'.requestBodies.''.'|'.0]")
        if not result:
            # $.'$Components'.requestBodies.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Components'.requestBodies.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Components'.requestBodies.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Components'.requestBodies.'']")
            return False
    return True


# object $.'$Components'.headers
def jm_f_35(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Components'.headers]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Components'.headers.''
        # $.'$Components'.headers.''.'|'.0
        result = json_model_24(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Header at {lpath} [$.'$Components'.headers.''.'|'.0]")
        if not result:
            # $.'$Components'.headers.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Components'.headers.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Components'.headers.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Components'.headers.'']")
            return False
    return True


# object $.'$Components'.securitySchemes
def jm_f_36(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Components'.securitySchemes]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Components'.securitySchemes.''
        # $.'$Components'.securitySchemes.''.'|'.0
        result = json_model_31(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $SecurityScheme at {lpath} [$.'$Components'.securitySchemes.''.'|'.0]")
        if not result:
            # $.'$Components'.securitySchemes.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Components'.securitySchemes.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Components'.securitySchemes.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Components'.securitySchemes.'']")
            return False
    return True


# object $.'$Components'.links
def jm_f_37(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Components'.links]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Components'.links.''
        # $.'$Components'.links.''.'|'.0
        result = json_model_23(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Link at {lpath} [$.'$Components'.links.''.'|'.0]")
        if not result:
            # $.'$Components'.links.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Components'.links.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Components'.links.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Components'.links.'']")
            return False
    return True


# object $.'$Components'.callbacks
def jm_f_38(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Components'.callbacks]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Components'.callbacks.''
        # $.'$Components'.callbacks.''.'|'.0
        result = json_model_20(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Callback at {lpath} [$.'$Components'.callbacks.''.'|'.0]")
        if not result:
            # $.'$Components'.callbacks.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Components'.callbacks.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Components'.callbacks.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Components'.callbacks.'']")
            return False
    return True


# object $.'$Components'.pathItems
def jm_f_39(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Components'.pathItems]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Components'.pathItems.''
        # $.'$Components'.pathItems.''.'|'.0
        result = json_model_10(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $PathItem at {lpath} [$.'$Components'.pathItems.''.'|'.0]")
        if not result:
            # $.'$Components'.pathItems.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Components'.pathItems.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Components'.pathItems.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Components'.pathItems.'']")
            return False
    return True


# object $.'$Components'
def json_model_8(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Components']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_8_may:  # may
            if not json_model_8_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Components'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Components'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Components'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Components']")
            return False
    return True




# object $.'$Paths'
def json_model_9(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Paths']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if jm_re_1(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^//
            # $.'$Paths'.'/^//'
            result = json_model_10(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $PathItem at {lpath} [$.'$Paths'.'/^//']")
            if not result:
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Paths'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Paths'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Paths']")
            return False
    return True




# object $.'$PathItem'.parameters
def jm_f_51(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$PathItem'.parameters]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$PathItem'.parameters.''
        # $.'$PathItem'.parameters.''.'|'.0
        result = json_model_14(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Parameter at {lpath} [$.'$PathItem'.parameters.''.'|'.0]")
        if not result:
            # $.'$PathItem'.parameters.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$PathItem'.parameters.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$PathItem'.parameters.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$PathItem'.parameters.'']")
            return False
    return True


# object $.'$PathItem'
def json_model_10(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$PathItem']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_10_may:  # may
            if not json_model_10_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$PathItem'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$PathItem'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$PathItem'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$PathItem']")
            return False
    return True




# object $.'$Operation'.parameters
def jm_f_57(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Operation'.parameters]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Operation'.parameters.''
        # $.'$Operation'.parameters.''.'|'.0
        result = json_model_14(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Parameter at {lpath} [$.'$Operation'.parameters.''.'|'.0]")
        if not result:
            # $.'$Operation'.parameters.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Operation'.parameters.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Operation'.parameters.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Operation'.parameters.'']")
            return False
    return True


# object $.'$Operation'.requestBody
def jm_f_58(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Operation'.requestBody]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Operation'.requestBody.''
        # $.'$Operation'.requestBody.''.'|'.0
        result = json_model_15(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $RequestBody at {lpath} [$.'$Operation'.requestBody.''.'|'.0]")
        if not result:
            # $.'$Operation'.requestBody.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Operation'.requestBody.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Operation'.requestBody.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Operation'.requestBody.'']")
            return False
    return True


# object $.'$Operation'.callbacks
def jm_f_60(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Operation'.callbacks]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Operation'.callbacks.''
        # $.'$Operation'.callbacks.''.'|'.0
        result = json_model_20(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Callback at {lpath} [$.'$Operation'.callbacks.''.'|'.0]")
        if not result:
            # $.'$Operation'.callbacks.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Operation'.callbacks.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Operation'.callbacks.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Operation'.callbacks.'']")
            return False
    return True


# object $.'$Operation'
def json_model_11(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Operation']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_11_may:  # may
            if not json_model_11_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Operation'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Operation'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Operation'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Operation']")
            return False
    return True




# object $.'$ExternalDocumentation'
def json_model_12(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$ExternalDocumentation']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_12_must:  # must
            must_count += 1
            if not json_model_12_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$ExternalDocumentation'.{prop}]")
                return False
        elif prop in json_model_12_may:  # may
            if not json_model_12_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$ExternalDocumentation'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$ExternalDocumentation'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$ExternalDocumentation'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$ExternalDocumentation']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$ExternalDocumentation']")
    return result




# object $.'$parameterShare'.examples
def jm_f_75(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$parameterShare'.examples]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$parameterShare'.examples.''
        # $.'$parameterShare'.examples.''.'|'.0
        result = json_model_21(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Example at {lpath} [$.'$parameterShare'.examples.''.'|'.0]")
        if not result:
            # $.'$parameterShare'.examples.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$parameterShare'.examples.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$parameterShare'.examples.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$parameterShare'.examples.'']")
            return False
    return True


# object $.'$parameterShare'.content
def jm_f_76(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$parameterShare'.content]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$parameterShare'.content.''
        result = json_model_16(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $MediaType at {lpath} [$.'$parameterShare'.content.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$parameterShare'.content.'']")
            return False
    return True


# object $.'$parameterShare'
def json_model_13(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$parameterShare']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_13_may:  # may
            if not json_model_13_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$parameterShare'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$parameterShare'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$parameterShare'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$parameterShare']")
            return False
    return True




# object $.'$Parameter'.examples
def jm_f_88(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Parameter'.examples]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Parameter'.examples.''
        # $.'$Parameter'.examples.''.'|'.0
        result = json_model_21(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Example at {lpath} [$.'$Parameter'.examples.''.'|'.0]")
        if not result:
            # $.'$Parameter'.examples.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Parameter'.examples.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Parameter'.examples.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Parameter'.examples.'']")
            return False
    return True


# object $.'$Parameter'.content
def jm_f_89(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Parameter'.content]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Parameter'.content.''
        result = json_model_16(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $MediaType at {lpath} [$.'$Parameter'.content.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Parameter'.content.'']")
            return False
    return True


# object $.'$Parameter'
def json_model_14(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Parameter']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_14_must:  # must
            must_count += 1
            if not json_model_14_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Parameter'.{prop}]")
                return False
        elif prop in json_model_14_may:  # may
            if not json_model_14_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Parameter'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Parameter'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Parameter'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Parameter']")
            return False
    result = must_count == 2
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Parameter']")
    return result




# object $.'$RequestBody'.content
def jm_f_91(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$RequestBody'.content]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$RequestBody'.content.''
        result = json_model_16(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $MediaType at {lpath} [$.'$RequestBody'.content.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$RequestBody'.content.'']")
            return False
    return True


# object $.'$RequestBody'
def json_model_15(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$RequestBody']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_15_may:  # may
            if not json_model_15_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$RequestBody'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$RequestBody'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$RequestBody'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$RequestBody']")
            return False
    return True




# object $.'$MediaType'.examples
def jm_f_95(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$MediaType'.examples]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$MediaType'.examples.''
        # $.'$MediaType'.examples.''.'|'.0
        result = json_model_21(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Example at {lpath} [$.'$MediaType'.examples.''.'|'.0]")
        if not result:
            # $.'$MediaType'.examples.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$MediaType'.examples.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$MediaType'.examples.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$MediaType'.examples.'']")
            return False
    return True


# object $.'$MediaType'.encoding
def jm_f_96(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$MediaType'.encoding]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$MediaType'.encoding.''
        result = json_model_17(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Encoding at {lpath} [$.'$MediaType'.encoding.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$MediaType'.encoding.'']")
            return False
    return True


# object $.'$MediaType'
def json_model_16(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$MediaType']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_16_may:  # may
            if not json_model_16_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$MediaType'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$MediaType'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$MediaType'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$MediaType']")
            return False
    return True




# object $.'$Encoding'.headers
def jm_f_98(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Encoding'.headers]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Encoding'.headers.''
        # $.'$Encoding'.headers.''.'|'.0
        result = json_model_24(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Header at {lpath} [$.'$Encoding'.headers.''.'|'.0]")
        if not result:
            # $.'$Encoding'.headers.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Encoding'.headers.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Encoding'.headers.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Encoding'.headers.'']")
            return False
    return True


# object $.'$Encoding'
def json_model_17(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Encoding']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_17_may:  # may
            if not json_model_17_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Encoding'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Encoding'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Encoding'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Encoding']")
            return False
    return True




# object $.'$Responses'
def json_model_18(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Responses']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_18_may:  # may
            if not json_model_18_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Responses'.{prop}]")
                return False
        elif jm_re_2(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^[1-5](\d\d|XX)$/
            # $.'$Responses'.'/^[1-5](\\d\\d|XX)$/'
            # $.'$Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.0
            result = json_model_19(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Response at {lpath} [$.'$Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.0]")
            if not result:
                # $.'$Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.1
                result = json_model_26(val, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.1]")
            if not result:
                rep is None or rep.append(f"not any model match at {lpath} [$.'$Responses'.'/^[1-5](\\d\\d|XX)$/'.'|']")
            if not result:
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Responses'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Responses'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Responses']")
            return False
    return True




# object $.'$Response'.headers
def jm_f_104(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Response'.headers]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Response'.headers.''
        # $.'$Response'.headers.''.'|'.0
        result = json_model_24(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Header at {lpath} [$.'$Response'.headers.''.'|'.0]")
        if not result:
            # $.'$Response'.headers.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Response'.headers.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Response'.headers.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Response'.headers.'']")
            return False
    return True


# object $.'$Response'.content
def jm_f_105(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Response'.content]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Response'.content.''
        result = json_model_16(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $MediaType at {lpath} [$.'$Response'.content.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Response'.content.'']")
            return False
    return True


# object $.'$Response'.links
def jm_f_106(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Response'.links]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Response'.links.''
        # $.'$Response'.links.''.'|'.0
        result = json_model_23(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Link at {lpath} [$.'$Response'.links.''.'|'.0]")
        if not result:
            # $.'$Response'.links.''.'|'.1
            result = json_model_26(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Response'.links.''.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {lpath} [$.'$Response'.links.''.'|']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Response'.links.'']")
            return False
    return True


# object $.'$Response'
def json_model_19(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Response']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_19_may:  # may
            if not json_model_19_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Response'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Response'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Response'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Response']")
            return False
    return True




# object $.'$Callback'
def json_model_20(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Callback']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if json_model_22(prop, path, rep) or _rep(f"prop {prop} does not match $Expression at {path}", rep):  # $Expression
            # $.'$Callback'.'$Expression'
            # $.'$Callback'.'$Expression'.'|'.0
            result = json_model_10(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $PathItem at {lpath} [$.'$Callback'.'$Expression'.'|'.0]")
            if not result:
                # $.'$Callback'.'$Expression'.'|'.1
                result = json_model_26(val, path, rep)
                if not result:
                    rep is None or rep.append(f"not an expected $Reference at {lpath} [$.'$Callback'.'$Expression'.'|'.1]")
            if not result:
                rep is None or rep.append(f"not any model match at {lpath} [$.'$Callback'.'$Expression'.'|']")
            if not result:
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Callback'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Callback'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Callback']")
            return False
    return True




# object $.'$Example'
def json_model_21(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Example']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_21_may:  # may
            if not json_model_21_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Example'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Example'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Example'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Example']")
            return False
    return True



# define "$Expression" ($.'$Expression')
def json_model_22(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Expression'
    # "/\\{.*\\}/"
    result = isinstance(value, str) and jm_re_3(value) is not None or _rep(f"does not match FESC at {path}", rep)
    if not result:
        rep is None or rep.append(f"not an expected REGEX at {path} [$.'$Expression']")
    return result


# object $.'$Link'.'|'.0.parameters
def jm_f_112(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Link'.'|'.0.parameters]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Link'.'|'.0.parameters.''
        result = True or _rep(f"invalid $ANY at {path}", rep)
        if not result:
            rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Link'.'|'.0.parameters.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Link'.'|'.0.parameters.'']")
            return False
    return True


# object $.'$Link'.'|'.0
def jm_obj_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Link'.'|'.0]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in jm_obj_2_must:  # must
            must_count += 1
            if not jm_obj_2_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Link'.'|'.0.{prop}]")
                return False
        elif prop in jm_obj_2_may:  # may
            if not jm_obj_2_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Link'.'|'.0.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Link'.'|'.0.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Link'.'|'.0.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Link'.'|'.0]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Link'.'|'.0]")
    return result


# object $.'$Link'.'|'.1.parameters
def jm_f_117(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Link'.'|'.1.parameters]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Link'.'|'.1.parameters.''
        result = True or _rep(f"invalid $ANY at {path}", rep)
        if not result:
            rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Link'.'|'.1.parameters.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Link'.'|'.1.parameters.'']")
            return False
    return True


# object $.'$Link'.'|'.1
def jm_obj_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Link'.'|'.1]")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in jm_obj_3_must:  # must
            must_count += 1
            if not jm_obj_3_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Link'.'|'.1.{prop}]")
                return False
        elif prop in jm_obj_3_may:  # may
            if not jm_obj_3_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Link'.'|'.1.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Link'.'|'.1.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Link'.'|'.1.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Link'.'|'.1]")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Link'.'|'.1]")
    return result

# define "$Link" ($.'$Link')
def json_model_23(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Link'
    result = isinstance(value, dict)
    if result:
        # $.'$Link'.'|'.0
        result = jm_obj_2(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected object at {path} [$.'$Link'.'|'.0]")
        if not result:
            # $.'$Link'.'|'.1
            result = jm_obj_3(value, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected object at {path} [$.'$Link'.'|'.1]")
        if not result:
            rep is None or rep.append(f"not any model match at {path} [$.'$Link'.'|']")
    return result

# define "$Header" ($.'$Header')
def json_model_24(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$Header'
    result = json_model_13(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $parameterShare at {path} [$.'$Header']")
    return result


# object $.'$Tag'
def json_model_25(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Tag']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_25_must:  # must
            must_count += 1
            if not json_model_25_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Tag'.{prop}]")
                return False
        elif prop in json_model_25_may:  # may
            if not json_model_25_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Tag'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Tag'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Tag'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Tag']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Tag']")
    return result




# object $.'$Reference'
def json_model_26(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Reference']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_26_must:  # must
            must_count += 1
            if not json_model_26_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Reference'.{prop}]")
                return False
        elif prop in json_model_26_may:  # may
            if not json_model_26_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Reference'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Reference']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Reference']")
    return result



# define "$schema" ($.'$schema')
def json_model_36(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema'
    # $.'$schema'.'@'
    result = json_model_52(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $Schema at {path} [$.'$schema'.'@']")
    if not result:
        rep is None or rep.append(f"invalid type or constraints at {path} [$.'$schema']")
    return result


# object $.'$Schema'.'$vocabulary'
def jm_f_133(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Schema'.'$vocabulary']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if is_valid_url(prop, path, rep) or _rep(f"invalid $URL at {path}", rep) or _rep(f"prop {prop} does not match $URL at {path}", rep):  # $URL
            # $.'$Schema'.'$vocabulary'.'$URL'
            result = isinstance(val, bool)
            if not result:
                rep is None or rep.append(f"not a bool at {lpath} [$.'$Schema'.'$vocabulary'.'$URL']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Schema'.'$vocabulary']")
            return False
    return True


# object $.'$Schema'.'$defs'
def jm_f_135(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Schema'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Schema'.'$defs'.''
        result = json_model_52(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $schema#Schema at {lpath} [$.'$Schema'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Schema'.'$defs'.'']")
            return False
    return True


# object $.'$Schema'.properties
def jm_f_140(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Schema'.properties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Schema'.properties.''
        result = json_model_52(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $schema#Schema at {lpath} [$.'$Schema'.properties.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Schema'.properties.'']")
            return False
    return True


# object $.'$Schema'.patternProperties
def jm_f_141(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Schema'.patternProperties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if is_valid_re(prop, path, rep) or _rep(f"invalid $REGEX at {path}", rep) or _rep(f"prop {prop} does not match $REGEX at {path}", rep):  # $REGEX
            # $.'$Schema'.patternProperties.'$REGEX'
            result = json_model_52(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $schema#Schema at {lpath} [$.'$Schema'.patternProperties.'$REGEX']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Schema'.patternProperties]")
            return False
    return True


# object $.'$Schema'.dependentSchemas
def jm_f_142(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Schema'.dependentSchemas]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Schema'.dependentSchemas.''
        result = json_model_52(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $schema#Schema at {lpath} [$.'$Schema'.dependentSchemas.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Schema'.dependentSchemas.'']")
            return False
    return True


# object $.'$Schema'.dependentRequired
def jm_f_172(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Schema'.dependentRequired]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Schema'.dependentRequired.''
        result = json_model_46(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $schema#stringArray at {lpath} [$.'$Schema'.dependentRequired.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Schema'.dependentRequired.'']")
            return False
    return True


# object $.'$Schema'
def json_model_28(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Schema']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_28_may:  # may
            if not json_model_28_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Schema'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Schema']")
            return False
    return True




# object $.'$Discriminator'.mapping
def jm_f_188(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Discriminator'.mapping]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$Discriminator'.mapping.''
        result = isinstance(val, str)
        if not result:
            rep is None or rep.append(f"not an expected string at {lpath} [$.'$Discriminator'.mapping.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$Discriminator'.mapping.'']")
            return False
    return True


# object $.'$Discriminator'
def json_model_29(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Discriminator']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_29_must:  # must
            must_count += 1
            if not json_model_29_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$Discriminator'.{prop}]")
                return False
        elif prop in json_model_29_may:  # may
            if not json_model_29_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$Discriminator'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Discriminator'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Discriminator'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Discriminator']")
            return False
    result = must_count == 1
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$Discriminator']")
    return result




# object $.'$XML'
def json_model_30(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$XML']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_30_may:  # may
            if not json_model_30_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$XML'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$XML'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$XML'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$XML']")
            return False
    return True




# object $.'$SecurityScheme'
def json_model_31(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$SecurityScheme']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_31_must:  # must
            must_count += 1
            if not json_model_31_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$SecurityScheme'.{prop}]")
                return False
        elif prop in json_model_31_may:  # may
            if not json_model_31_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$SecurityScheme'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$SecurityScheme'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$SecurityScheme'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$SecurityScheme']")
            return False
    result = must_count == 6
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$SecurityScheme']")
    return result




# object $.'$OAuthFlows'
def json_model_32(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$OAuthFlows']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_32_may:  # may
            if not json_model_32_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$OAuthFlows'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$OAuthFlows'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$OAuthFlows'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$OAuthFlows']")
            return False
    return True




# object $.'$OAuthFlow'.scopes
def jm_f_208(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$OAuthFlow'.scopes]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$OAuthFlow'.scopes.''
        result = isinstance(val, str)
        if not result:
            rep is None or rep.append(f"not an expected string at {lpath} [$.'$OAuthFlow'.scopes.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$OAuthFlow'.scopes.'']")
            return False
    return True


# object $.'$OAuthFlow'
def json_model_33(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$OAuthFlow']")
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_33_must:  # must
            must_count += 1
            if not json_model_33_must[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid must prop value at {lpath} [$.'$OAuthFlow'.{prop}]")
                return False
        elif prop in json_model_33_may:  # may
            if not json_model_33_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$OAuthFlow'.{prop}]")
                return False
        elif jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$OAuthFlow'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$OAuthFlow'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$OAuthFlow']")
            return False
    result = must_count == 3
    if not result:
        rep is None or rep.append(f"missing must prop at {path} [$.'$OAuthFlow']")
    return result




# object $.'$SecurityRequirement'
def json_model_34(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$SecurityRequirement']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$SecurityRequirement'.''
        result = isinstance(val, list)
        if result:
            for array_8_idx, array_8_item in enumerate(val):
                lpath = lpath + '.' + str(array_8_idx)
                # $.'$SecurityRequirement'.''.0
                result = isinstance(array_8_item, str)
                if not result:
                    rep is None or rep.append(f"not an expected string at {lpath} [$.'$SecurityRequirement'.''.0]")
                if not result:
                    break
        if not result:
            rep is None or rep.append(f"not array or unexpected array at {lpath} [$.'$SecurityRequirement'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$SecurityRequirement'.'']")
            return False
    return True




# object $.'$Extension'
def json_model_35(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$Extension']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if jm_re_0(prop) is not None or _rep(f"prop {prop} does not match FESC at {path}", rep):  # /^x\-.*$/
            # $.'$Extension'.'/^x\\-.*$/'
            result = True or _rep(f"invalid $ANY at {path}", rep)
            if not result:
                rep is None or rep.append(f"not an expected $ANY at {lpath} [$.'$Extension'.'/^x\\-.*$/']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$Extension']")
            return False
    return True



# define "$schema#URI-REFERENCE" ($.'$schema#URI-REFERENCE')
def json_model_37(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#URI-REFERENCE'
    result = isinstance(value, str)
    if not result:
        rep is None or rep.append(f"not an expected string at {path} [$.'$schema#URI-REFERENCE']")
    return result

# define "$schema#simpleTypes" ($.'$schema#simpleTypes')
def json_model_44(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#simpleTypes'
    result = not isinstance(value, (list, dict)) and value in {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
    if not result:
        rep is None or rep.append(f"value not in enum at {path} [$.'$schema#simpleTypes'.'|']")
    return result

# define "$schema#simpleTypesArray" ($.'$schema#simpleTypesArray')
def json_model_45(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#simpleTypesArray'
    # $.'$schema#simpleTypesArray'.'@'
    result = isinstance(value, list)
    if result:
        for array_9_idx, array_9_item in enumerate(value):
            lpath = path + '.' + str(array_9_idx)
            # $.'$schema#simpleTypesArray'.'@'.0
            result = json_model_44(array_9_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $simpleTypes at {lpath} [$.'$schema#simpleTypesArray'.'@'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$schema#simpleTypesArray'.'@']")
    result &= len(set(value)) == len(value)
    result &= len(value) >= 1
    if not result:
        rep is None or rep.append(f"invalid type or constraints at {path} [$.'$schema#simpleTypesArray']")
    return result

# define "$schema#stringArray" ($.'$schema#stringArray')
def json_model_46(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#stringArray'
    # $.'$schema#stringArray'.'@'
    result = isinstance(value, list)
    if result:
        for array_10_idx, array_10_item in enumerate(value):
            lpath = path + '.' + str(array_10_idx)
            # $.'$schema#stringArray'.'@'.0
            result = isinstance(array_10_item, str)
            if not result:
                rep is None or rep.append(f"not an expected string at {lpath} [$.'$schema#stringArray'.'@'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$schema#stringArray'.'@']")
    result &= len(set(value)) == len(value)
    if not result:
        rep is None or rep.append(f"invalid type or constraints at {path} [$.'$schema#stringArray']")
    return result

# define "$schema#nonNegativeInteger" ($.'$schema#nonNegativeInteger')
def json_model_47(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#nonNegativeInteger'
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    if not result:
        rep is None or rep.append(f"not a 0 int at {path} [$.'$schema#nonNegativeInteger']")
    return result

# define "$schema#schemaArray" ($.'$schema#schemaArray')
def json_model_49(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#schemaArray'
    # $.'$schema#schemaArray'.'@'
    result = isinstance(value, list)
    if result:
        for array_11_idx, array_11_item in enumerate(value):
            lpath = path + '.' + str(array_11_idx)
            # $.'$schema#schemaArray'.'@'.0
            result = json_model_52(array_11_item, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$schema#schemaArray'.'@'.0]")
            if not result:
                break
    if not result:
        rep is None or rep.append(f"not array or unexpected array at {path} [$.'$schema#schemaArray'.'@']")
    result &= len(value) >= 1
    if not result:
        rep is None or rep.append(f"invalid type or constraints at {path} [$.'$schema#schemaArray']")
    return result

# define "$schema#Schema" ($.'$schema#Schema')
def json_model_52(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$schema#Schema'
    # $.'$schema#Schema'.'|'.0
    result = isinstance(value, bool)
    if not result:
        rep is None or rep.append(f"not a bool at {path} [$.'$schema#Schema'.'|'.0]")
    if not result:
        # $.'$schema#Schema'.'|'.1
        result = json_model_51(value, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $ObjectSchema at {path} [$.'$schema#Schema'.'|'.1]")
    if not result:
        rep is None or rep.append(f"not any model match at {path} [$.'$schema#Schema'.'|']")
    return result


# object $.'$schema#ObjectSchema'.'$vocabulary'
def jm_f_216(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$schema#ObjectSchema'.'$vocabulary']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if is_valid_url(prop, path, rep) or _rep(f"invalid $URL at {path}", rep) or _rep(f"prop {prop} does not match $URL at {path}", rep):  # $URL
            # $.'$schema#ObjectSchema'.'$vocabulary'.'$URL'
            result = isinstance(val, bool)
            if not result:
                rep is None or rep.append(f"not a bool at {lpath} [$.'$schema#ObjectSchema'.'$vocabulary'.'$URL']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$schema#ObjectSchema'.'$vocabulary']")
            return False
    return True


# object $.'$schema#ObjectSchema'.'$defs'
def jm_f_218(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$schema#ObjectSchema'.'$defs']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$schema#ObjectSchema'.'$defs'.''
        result = json_model_52(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$schema#ObjectSchema'.'$defs'.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$schema#ObjectSchema'.'$defs'.'']")
            return False
    return True


# object $.'$schema#ObjectSchema'.properties
def jm_f_223(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$schema#ObjectSchema'.properties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$schema#ObjectSchema'.properties.''
        result = json_model_52(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$schema#ObjectSchema'.properties.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$schema#ObjectSchema'.properties.'']")
            return False
    return True


# object $.'$schema#ObjectSchema'.patternProperties
def jm_f_224(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$schema#ObjectSchema'.patternProperties]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if is_valid_re(prop, path, rep) or _rep(f"invalid $REGEX at {path}", rep) or _rep(f"prop {prop} does not match $REGEX at {path}", rep):  # $REGEX
            # $.'$schema#ObjectSchema'.patternProperties.'$REGEX'
            result = json_model_52(val, path, rep)
            if not result:
                rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$schema#ObjectSchema'.patternProperties.'$REGEX']")
            if not result:
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$schema#ObjectSchema'.patternProperties]")
            return False
    return True


# object $.'$schema#ObjectSchema'.dependentSchemas
def jm_f_225(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$schema#ObjectSchema'.dependentSchemas]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$schema#ObjectSchema'.dependentSchemas.''
        result = json_model_52(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $Schema at {lpath} [$.'$schema#ObjectSchema'.dependentSchemas.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$schema#ObjectSchema'.dependentSchemas.'']")
            return False
    return True


# object $.'$schema#ObjectSchema'.dependentRequired
def jm_f_255(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$schema#ObjectSchema'.dependentRequired]")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        # $.'$schema#ObjectSchema'.dependentRequired.''
        result = json_model_46(val, path, rep)
        if not result:
            rep is None or rep.append(f"not an expected $stringArray at {lpath} [$.'$schema#ObjectSchema'.dependentRequired.'']")
        if not result:
            rep is None or rep.append(f"unexpected other value at {lpath} [$.'$schema#ObjectSchema'.dependentRequired.'']")
            return False
    return True


# object $.'$schema#ObjectSchema'
def json_model_51(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        rep is None or rep.append(f"not an object at {path} [$.'$schema#ObjectSchema']")
        return False
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_51_may:  # may
            if not json_model_51_may[prop](val, lpath, rep):
                rep is None or rep.append(f"invalid may prop value at {lpath} [$.'$schema#ObjectSchema'.{prop}]")
                return False
        else:  # no catch all
            rep is None or rep.append(f"no other prop expected at {path} [$.'$schema#ObjectSchema']")
            return False
    return True



# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = json_model_2(value, path, rep)
    if not result:
        rep is None or rep.append(f"not an expected $OpenAPI at {path} [$]")
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
json_model_2_must = {
    "openapi": jm_f_0,
    "info": jm_f_1,
}
json_model_2_may = {
    "jsonSchemaDialect": jm_f_2,
    "servers": jm_f_3,
    "paths": jm_f_4,
    "webhooks": jm_f_5,
    "component": jm_f_6,
    "security": jm_f_7,
    "tags": jm_f_8,
    "externalDocs": jm_f_9,
}
json_model_3_must = {
    "title": jm_f_10,
    "version": jm_f_11,
}
json_model_3_may = {
    "summary": jm_f_12,
    "description": jm_f_13,
    "termsOfService": jm_f_14,
    "contact": jm_f_15,
    "license": jm_f_16,
}
json_model_4_may = {
    "name": jm_f_17,
    "url": jm_f_18,
    "email": jm_f_19,
}
jm_obj_0_must = {
    "name": jm_f_20,
    "identifier": jm_f_21,
}
jm_obj_1_must = {
    "name": jm_f_22,
    "url": jm_f_23,
}
json_model_6_must = {
    "url": jm_f_24,
}
json_model_6_may = {
    "description": jm_f_25,
    "variables": jm_f_26,
}
json_model_7_must = {
    "default": jm_f_27,
}
json_model_7_may = {
    "enum": jm_f_28,
    "description": jm_f_29,
}
json_model_8_may = {
    "schemas": jm_f_30,
    "responses": jm_f_31,
    "parameters": jm_f_32,
    "examples": jm_f_33,
    "requestBodies": jm_f_34,
    "headers": jm_f_35,
    "securitySchemes": jm_f_36,
    "links": jm_f_37,
    "callbacks": jm_f_38,
    "pathItems": jm_f_39,
}
json_model_10_may = {
    "$ref": jm_f_40,
    "summary": jm_f_41,
    "description": jm_f_42,
    "get": jm_f_43,
    "put": jm_f_44,
    "post": jm_f_45,
    "options": jm_f_46,
    "head": jm_f_47,
    "patch": jm_f_48,
    "trace": jm_f_49,
    "servers": jm_f_50,
    "parameters": jm_f_51,
}
json_model_11_may = {
    "tags": jm_f_52,
    "summary": jm_f_53,
    "description": jm_f_54,
    "externalDocs": jm_f_55,
    "operationId": jm_f_56,
    "parameters": jm_f_57,
    "requestBody": jm_f_58,
    "responses": jm_f_59,
    "callbacks": jm_f_60,
    "deprecated": jm_f_61,
    "security": jm_f_62,
    "servers": jm_f_63,
}
json_model_12_must = {
    "url": jm_f_64,
}
json_model_12_may = {
    "description": jm_f_65,
}
json_model_13_may = {
    "description": jm_f_66,
    "required": jm_f_67,
    "deprecated": jm_f_68,
    "allowEmptyValue": jm_f_69,
    "style": jm_f_70,
    "explode": jm_f_71,
    "allowReserved": jm_f_72,
    "schema": jm_f_73,
    "example": jm_f_74,
    "examples": jm_f_75,
    "content": jm_f_76,
}
json_model_14_must = {
    "name": jm_f_77,
    "in": jm_f_78,
}
json_model_14_may = {
    "description": jm_f_79,
    "required": jm_f_80,
    "deprecated": jm_f_81,
    "allowEmptyValue": jm_f_82,
    "style": jm_f_83,
    "explode": jm_f_84,
    "allowReserved": jm_f_85,
    "schema": jm_f_86,
    "example": jm_f_87,
    "examples": jm_f_88,
    "content": jm_f_89,
}
json_model_15_may = {
    "description": jm_f_90,
    "content": jm_f_91,
    "required": jm_f_92,
}
json_model_16_may = {
    "schema": jm_f_93,
    "example": jm_f_94,
    "examples": jm_f_95,
    "encoding": jm_f_96,
}
json_model_17_may = {
    "contentType": jm_f_97,
    "headers": jm_f_98,
    "style": jm_f_99,
    "explode": jm_f_100,
    "allowReserved": jm_f_101,
}
json_model_18_may = {
    "default": jm_f_102,
}
json_model_19_may = {
    "description": jm_f_103,
    "headers": jm_f_104,
    "content": jm_f_105,
    "links": jm_f_106,
}
json_model_21_may = {
    "summary": jm_f_107,
    "description": jm_f_108,
    "value": jm_f_109,
    "externalValue": jm_f_110,
}
jm_obj_2_must = {
    "operationRef": jm_f_111,
}
jm_obj_2_may = {
    "parameters": jm_f_112,
    "requestBody": jm_f_113,
    "description": jm_f_114,
    "server": jm_f_115,
}
jm_obj_3_must = {
    "operationId": jm_f_116,
}
jm_obj_3_may = {
    "parameters": jm_f_117,
    "requestBody": jm_f_118,
    "description": jm_f_119,
    "server": jm_f_120,
}
json_model_25_must = {
    "name": jm_f_121,
}
json_model_25_may = {
    "description": jm_f_122,
    "externalDocs": jm_f_123,
}
json_model_26_must = {
    "$ref": jm_f_124,
}
json_model_26_may = {
    "summary": jm_f_125,
    "description": jm_f_126,
}
json_model_28_may = {
    "$id": jm_f_127,
    "$schema": jm_f_128,
    "$ref": jm_f_129,
    "$anchor": jm_f_130,
    "$dynamicRef": jm_f_131,
    "$dynamicAnchor": jm_f_132,
    "$vocabulary": jm_f_133,
    "$comment": jm_f_134,
    "$defs": jm_f_135,
    "prefixItems": jm_f_136,
    "items": jm_f_137,
    "contains": jm_f_138,
    "additionalProperties": jm_f_139,
    "properties": jm_f_140,
    "patternProperties": jm_f_141,
    "dependentSchemas": jm_f_142,
    "propertyNames": jm_f_143,
    "if": jm_f_144,
    "then": jm_f_145,
    "else": jm_f_146,
    "not": jm_f_147,
    "allOf": jm_f_148,
    "anyOf": jm_f_149,
    "oneOf": jm_f_150,
    "unevaluatedItems": jm_f_151,
    "unevaluatedProperties": jm_f_152,
    "type": jm_f_153,
    "const": jm_f_154,
    "enum": jm_f_155,
    "multipleOf": jm_f_156,
    "maximum": jm_f_157,
    "exclusiveMaximum": jm_f_158,
    "minimum": jm_f_159,
    "exclusiveMinimum": jm_f_160,
    "maxLength": jm_f_161,
    "minLength": jm_f_162,
    "pattern": jm_f_163,
    "maxItems": jm_f_164,
    "minItems": jm_f_165,
    "uniqueItems": jm_f_166,
    "maxContains": jm_f_167,
    "minContains": jm_f_168,
    "maxProperties": jm_f_169,
    "minProperties": jm_f_170,
    "required": jm_f_171,
    "dependentRequired": jm_f_172,
    "title": jm_f_173,
    "description": jm_f_174,
    "default": jm_f_175,
    "deprecated": jm_f_176,
    "readOnly": jm_f_177,
    "writeOnly": jm_f_178,
    "examples": jm_f_179,
    "format": jm_f_180,
    "contentEncoding": jm_f_181,
    "contentMediaType": jm_f_182,
    "contentSchema": jm_f_183,
    "discriminator": jm_f_184,
    "externalDocs": jm_f_185,
    "xml": jm_f_186,
}
json_model_29_must = {
    "propertyName": jm_f_187,
}
json_model_29_may = {
    "mapping": jm_f_188,
}
json_model_30_may = {
    "name": jm_f_189,
    "namespace": jm_f_190,
    "prefix": jm_f_191,
    "attribute": jm_f_192,
    "wrapped": jm_f_193,
}
json_model_31_must = {
    "type": jm_f_194,
    "name": jm_f_195,
    "in": jm_f_196,
    "scheme": jm_f_197,
    "flows": jm_f_198,
    "openIdConnectUrl": jm_f_199,
}
json_model_31_may = {
    "description": jm_f_200,
    "bearerFormat": jm_f_201,
}
json_model_32_may = {
    "implicit": jm_f_202,
    "password": jm_f_203,
    "clientCredentials": jm_f_204,
    "authorizationCode": jm_f_205,
}
json_model_33_must = {
    "authorizationUrl": jm_f_206,
    "tokenUrl": jm_f_207,
    "scopes": jm_f_208,
}
json_model_33_may = {
    "refreshUrl": jm_f_209,
}
json_model_51_may = {
    "$id": jm_f_210,
    "$schema": jm_f_211,
    "$ref": jm_f_212,
    "$anchor": jm_f_213,
    "$dynamicRef": jm_f_214,
    "$dynamicAnchor": jm_f_215,
    "$vocabulary": jm_f_216,
    "$comment": jm_f_217,
    "$defs": jm_f_218,
    "prefixItems": jm_f_219,
    "items": jm_f_220,
    "contains": jm_f_221,
    "additionalProperties": jm_f_222,
    "properties": jm_f_223,
    "patternProperties": jm_f_224,
    "dependentSchemas": jm_f_225,
    "propertyNames": jm_f_226,
    "if": jm_f_227,
    "then": jm_f_228,
    "else": jm_f_229,
    "not": jm_f_230,
    "allOf": jm_f_231,
    "anyOf": jm_f_232,
    "oneOf": jm_f_233,
    "unevaluatedItems": jm_f_234,
    "unevaluatedProperties": jm_f_235,
    "type": jm_f_236,
    "const": jm_f_237,
    "enum": jm_f_238,
    "multipleOf": jm_f_239,
    "maximum": jm_f_240,
    "exclusiveMaximum": jm_f_241,
    "minimum": jm_f_242,
    "exclusiveMinimum": jm_f_243,
    "maxLength": jm_f_244,
    "minLength": jm_f_245,
    "pattern": jm_f_246,
    "maxItems": jm_f_247,
    "minItems": jm_f_248,
    "uniqueItems": jm_f_249,
    "maxContains": jm_f_250,
    "minContains": jm_f_251,
    "maxProperties": jm_f_252,
    "minProperties": jm_f_253,
    "required": jm_f_254,
    "dependentRequired": jm_f_255,
    "title": jm_f_256,
    "description": jm_f_257,
    "default": jm_f_258,
    "deprecated": jm_f_259,
    "readOnly": jm_f_260,
    "writeOnly": jm_f_261,
    "examples": jm_f_262,
    "format": jm_f_263,
    "contentEncoding": jm_f_264,
    "contentMediaType": jm_f_265,
    "contentSchema": jm_f_266,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

