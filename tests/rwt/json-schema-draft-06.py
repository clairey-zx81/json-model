# Generated for model: ./json-schema-draft-06.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

json_model_7_may: PropMap

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False

# define "json_model_7_may_$id" ($.ObjectSchema.'$id')
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.'$id'
    result = json_model_1(value, path)
    return result

# define "json_model_7_may_$schema" ($.ObjectSchema.'$schema')
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.'$schema'
    result = is_valid_url(value, path)
    return result

# define "json_model_7_may_title" ($.ObjectSchema.title)
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.title
    result = isinstance(value, str)
    return result

# define "json_model_7_may_description" ($.ObjectSchema.description)
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.description
    result = isinstance(value, str)
    return result

# define "json_model_7_may_default" ($.ObjectSchema.default)
def jm_f_4(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.default
    result = True
    return result

# define "json_model_7_may_examples" ($.ObjectSchema.examples)
def jm_f_5(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.examples
    result = isinstance(value, list)
    if result:
        for array_3_idx, array_3_item in enumerate(value):
            # $.ObjectSchema.examples.0
            result = True
            if not result: break
    return result

# define "json_model_7_may_multipleOf" ($.ObjectSchema.multipleOf)
def jm_f_6(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.multipleOf
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool)) and value > 0.0
    return result

# define "json_model_7_may_maximum" ($.ObjectSchema.maximum)
def jm_f_7(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.maximum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_7_may_exclusiveMaximum" ($.ObjectSchema.exclusiveMaximum)
def jm_f_8(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.exclusiveMaximum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_7_may_minimum" ($.ObjectSchema.minimum)
def jm_f_9(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.minimum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_7_may_exclusiveMinimum" ($.ObjectSchema.exclusiveMinimum)
def jm_f_10(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.exclusiveMinimum
    result = (isinstance(value, float) or isinstance(value, int) and not isinstance(value, bool))
    return result

# define "json_model_7_may_maxLength" ($.ObjectSchema.maxLength)
def jm_f_11(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.maxLength
    result = ((isinstance(value, int) and not isinstance(value, bool)) or (isinstance(value, float) and int(value) == value)) and value >= 0
    return result

# define "json_model_7_may_minLength" ($.ObjectSchema.minLength)
def jm_f_12(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.minLength
    result = ((isinstance(value, int) and not isinstance(value, bool)) or (isinstance(value, float) and int(value) == value)) and value >= 0
    return result

# define "json_model_7_may_pattern" ($.ObjectSchema.pattern)
def jm_f_13(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.pattern
    result = is_valid_re(value, path)
    return result

# define "json_model_7_may_additionalItems" ($.ObjectSchema.additionalItems)
def jm_f_14(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.additionalItems
    result = json_model_8(value, path)
    return result

# define "json_model_7_may_items" ($.ObjectSchema.items)
def jm_f_15(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.items
    # $.ObjectSchema.items.'|'.0
    result = json_model_8(value, path)
    if not result:
        # $.ObjectSchema.items.'|'.1
        result = json_model_3(value, path)
    return result

# define "json_model_7_may_maxItems" ($.ObjectSchema.maxItems)
def jm_f_16(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.maxItems
    result = ((isinstance(value, int) and not isinstance(value, bool)) or (isinstance(value, float) and int(value) == value)) and value >= 0
    return result

# define "json_model_7_may_minItems" ($.ObjectSchema.minItems)
def jm_f_17(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.minItems
    result = ((isinstance(value, int) and not isinstance(value, bool)) or (isinstance(value, float) and int(value) == value)) and value >= 0
    return result

# define "json_model_7_may_uniqueItems" ($.ObjectSchema.uniqueItems)
def jm_f_18(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.uniqueItems
    result = isinstance(value, bool)
    return result

# define "json_model_7_may_contains" ($.ObjectSchema.contains)
def jm_f_19(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.contains
    result = json_model_8(value, path)
    return result

# define "json_model_7_may_maxProperties" ($.ObjectSchema.maxProperties)
def jm_f_20(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.maxProperties
    result = ((isinstance(value, int) and not isinstance(value, bool)) or (isinstance(value, float) and int(value) == value)) and value >= 0
    return result

# define "json_model_7_may_minProperties" ($.ObjectSchema.minProperties)
def jm_f_21(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.minProperties
    result = ((isinstance(value, int) and not isinstance(value, bool)) or (isinstance(value, float) and int(value) == value)) and value >= 0
    return result

# define "json_model_7_may_required" ($.ObjectSchema.required)
def jm_f_22(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.required
    result = json_model_6(value, path)
    return result

# define "json_model_7_may_additionalProperties" ($.ObjectSchema.additionalProperties)
def jm_f_23(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.additionalProperties
    result = json_model_8(value, path)
    return result





# define "json_model_7_may_propertyNames" ($.ObjectSchema.propertyNames)
def jm_f_26(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.propertyNames
    result = json_model_8(value, path)
    return result





# define "json_model_7_may_enum" ($.ObjectSchema.enum)
def jm_f_29(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.enum
    # $.ObjectSchema.enum.'@'
    result = isinstance(value, list)
    if result:
        for array_4_idx, array_4_item in enumerate(value):
            # $.ObjectSchema.enum.'@'.0
            result = True
            if not result: break
    result &= len(set(value)) == len(value)
    result &= len(value) >= 1
    return result

# define "json_model_7_may_const" ($.ObjectSchema.const)
def jm_f_30(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.const
    result = True
    return result

# define "json_model_7_may_type" ($.ObjectSchema.type)
def jm_f_31(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.type
    # $.ObjectSchema.type.'|'.0
    result = json_model_4(value, path)
    if not result:
        # $.ObjectSchema.type.'|'.1
        result = json_model_5(value, path)
    return result

# define "json_model_7_may_format" ($.ObjectSchema.format)
def jm_f_32(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.format
    result = isinstance(value, str)
    return result

# define "json_model_7_may_allOf" ($.ObjectSchema.allOf)
def jm_f_33(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.allOf
    result = json_model_3(value, path)
    return result

# define "json_model_7_may_anyOf" ($.ObjectSchema.anyOf)
def jm_f_34(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.anyOf
    result = json_model_3(value, path)
    return result

# define "json_model_7_may_oneOf" ($.ObjectSchema.oneOf)
def jm_f_35(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.oneOf
    result = json_model_3(value, path)
    return result

# define "json_model_7_may_not" ($.ObjectSchema.not)
def jm_f_36(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.not
    result = json_model_8(value, path)
    return result

# define "json_model_7_may_$ref" ($.ObjectSchema.'$ref')
def jm_f_37(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema.'$ref'
    result = json_model_1(value, path)
    return result


# define "$URI-REFERENCE" ($.'URI-REFERENCE')
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.'URI-REFERENCE'
    result = isinstance(value, str)
    return result

# define "$URI" ($.URI)
def json_model_2(value: Jsonable, path: str) -> bool:
    # $.URI
    result = is_valid_url(value, path)
    return result

# define "$schemaArray" ($.schemaArray)
def json_model_3(value: Jsonable, path: str) -> bool:
    # $.schemaArray
    # $.schemaArray.'@'
    result = isinstance(value, list)
    if result:
        for array_0_idx, array_0_item in enumerate(value):
            # $.schemaArray.'@'.0
            result = json_model_8(array_0_item, path)
            if not result: break
    result &= len(value) >= 1
    return result

# define "$simpleTypes" ($.simpleTypes)
def json_model_4(value: Jsonable, path: str) -> bool:
    # $.simpleTypes
    result = not isinstance(value, (list, dict)) and value in {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
    return result

# define "$typeArray" ($.typeArray)
def json_model_5(value: Jsonable, path: str) -> bool:
    # $.typeArray
    # $.typeArray.'@'
    result = isinstance(value, list)
    if result:
        for array_1_idx, array_1_item in enumerate(value):
            # $.typeArray.'@'.0
            result = json_model_4(array_1_item, path)
            if not result: break
    result &= len(value) >= 1
    return result

# define "$stringArray" ($.stringArray)
def json_model_6(value: Jsonable, path: str) -> bool:
    # $.stringArray
    result = isinstance(value, list)
    if result:
        for array_2_idx, array_2_item in enumerate(value):
            # $.stringArray.0
            result = isinstance(array_2_item, str)
            if not result: break
    return result


# object $.ObjectSchema.definitions
def jm_f_24(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.ObjectSchema.definitions.''
        result = json_model_8(model, path)
        if not result: return False
    return True


# object $.ObjectSchema.properties
def jm_f_25(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.ObjectSchema.properties.''
        result = json_model_8(model, path)
        if not result: return False
    return True


# object $.ObjectSchema.patternProperties
def jm_f_27(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if is_valid_re(prop, path):  # $REGEX
            # $.ObjectSchema.patternProperties.REGEX
            result = json_model_8(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.ObjectSchema.dependencies
def jm_f_28(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.ObjectSchema.dependencies.''
        # $.ObjectSchema.dependencies.''.'|'.0
        result = json_model_8(model, path)
        if not result:
            # $.ObjectSchema.dependencies.''.'|'.1
            result = json_model_6(model, path)
        if not result: return False
    return True


# object $.ObjectSchema
def json_model_7(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_7_may:  # may
            if not json_model_7_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True



# define "$Schema" ($.Schema)
def json_model_8(value: Jsonable, path: str) -> bool:
    # $.Schema
    # $.Schema.'|'.0
    result = isinstance(value, bool)
    if not result:
        # $.Schema.'|'.1
        result = json_model_7(value, path)
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    # $.'@'
    result = json_model_8(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_7_may = {
    "$id": jm_f_0,
    "$schema": jm_f_1,
    "title": jm_f_2,
    "description": jm_f_3,
    "default": jm_f_4,
    "examples": jm_f_5,
    "multipleOf": jm_f_6,
    "maximum": jm_f_7,
    "exclusiveMaximum": jm_f_8,
    "minimum": jm_f_9,
    "exclusiveMinimum": jm_f_10,
    "maxLength": jm_f_11,
    "minLength": jm_f_12,
    "pattern": jm_f_13,
    "additionalItems": jm_f_14,
    "items": jm_f_15,
    "maxItems": jm_f_16,
    "minItems": jm_f_17,
    "uniqueItems": jm_f_18,
    "contains": jm_f_19,
    "maxProperties": jm_f_20,
    "minProperties": jm_f_21,
    "required": jm_f_22,
    "additionalProperties": jm_f_23,
    "definitions": jm_f_24,
    "properties": jm_f_25,
    "propertyNames": jm_f_26,
    "patternProperties": jm_f_27,
    "dependencies": jm_f_28,
    "enum": jm_f_29,
    "const": jm_f_30,
    "type": jm_f_31,
    "format": jm_f_32,
    "allOf": jm_f_33,
    "anyOf": jm_f_34,
    "oneOf": jm_f_35,
    "not": jm_f_36,
    "$ref": jm_f_37,
}


