# Generated for model: ./json-schema-draft-tight.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

json_model_5_may: PropMap
json_model_6_may: PropMap
json_model_7_may: PropMap
json_model_8_may: PropMap
json_model_9_may: PropMap
json_model_10_must: PropMap
json_model_10_may: PropMap
json_model_11_must: PropMap
json_model_11_may: PropMap
json_model_12_must: PropMap
json_model_12_may: PropMap
json_model_13_must: PropMap
json_model_13_may: PropMap
json_model_14_must: PropMap
json_model_14_may: PropMap
json_model_15_must: PropMap
json_model_15_may: PropMap
json_model_16_must: PropMap
json_model_16_may: PropMap
json_model_17_must: PropMap
json_model_17_may: PropMap
json_model_18_must: PropMap
json_model_18_may: PropMap
json_model_19_must: PropMap
json_model_19_may: PropMap
json_model_20_must: PropMap
json_model_20_may: PropMap
json_model_21_must: PropMap
json_model_21_may: PropMap
json_model_22_must: PropMap
json_model_22_may: PropMap
json_model_23_must: PropMap
json_model_23_may: PropMap
jm_obj_0_must: PropMap

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

# define "json_model_5_may_pattern" ($.stringKeywords.pattern)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.stringKeywords.pattern
    result = is_valid_re(value, path)
    return result

# define "json_model_5_may_minLength" ($.stringKeywords.minLength)
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.stringKeywords.minLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_5_may_maxLength" ($.stringKeywords.maxLength)
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.stringKeywords.maxLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_5_may_format" ($.stringKeywords.format)
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.stringKeywords.format
    result = not isinstance(value, (list, dict)) and value in {'byte', 'date', 'date-time', 'double', 'duration', 'email', 'hostname', 'idn-email', 'idn-hostname', 'int', 'int32', 'int64', 'ipv4', 'ipv6', 'iri', 'iri-reference', 'json-pointer', 'mime-type', 'regex', 'relative-json-pointer', 'time', 'uint', 'uint32', 'uint64', 'uri', 'uri-reference', 'uuid'}
    return result

# define "json_model_6_may_prefixItems" ($.arrayKeywords.prefixItems)
def jm_f_4(value: Jsonable, path: str) -> bool:
    # $.arrayKeywords.prefixItems
    result = json_model_4(value, path)
    return result

# define "json_model_6_may_items" ($.arrayKeywords.items)
def jm_f_5(value: Jsonable, path: str) -> bool:
    # $.arrayKeywords.items
    # $.arrayKeywords.items.'|'.0
    result = json_model_25(value, path)
    if not result:
        # $.arrayKeywords.items.'|'.1
        result = json_model_4(value, path)
    return result

# define "json_model_6_may_additionalItems" ($.arrayKeywords.additionalItems)
def jm_f_6(value: Jsonable, path: str) -> bool:
    # $.arrayKeywords.additionalItems
    result = json_model_25(value, path)
    return result

# define "json_model_6_may_unevaluatedItems" ($.arrayKeywords.unevaluatedItems)
def jm_f_7(value: Jsonable, path: str) -> bool:
    # $.arrayKeywords.unevaluatedItems
    result = json_model_25(value, path)
    return result

# define "json_model_6_may_minItems" ($.arrayKeywords.minItems)
def jm_f_8(value: Jsonable, path: str) -> bool:
    # $.arrayKeywords.minItems
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_6_may_maxItems" ($.arrayKeywords.maxItems)
def jm_f_9(value: Jsonable, path: str) -> bool:
    # $.arrayKeywords.maxItems
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_6_may_uniqueItems" ($.arrayKeywords.uniqueItems)
def jm_f_10(value: Jsonable, path: str) -> bool:
    # $.arrayKeywords.uniqueItems
    result = isinstance(value, bool)
    return result



# define "json_model_7_may_required" ($.objectKeywords.required)
def jm_f_12(value: Jsonable, path: str) -> bool:
    # $.objectKeywords.required
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_4_idx, array_4_item in enumerate(value):
            # $.objectKeywords.required.0
            result = isinstance(array_4_item, str)
            if not result: break
    return result

# define "json_model_7_may_additionalProperties" ($.objectKeywords.additionalProperties)
def jm_f_13(value: Jsonable, path: str) -> bool:
    # $.objectKeywords.additionalProperties
    result = json_model_25(value, path)
    return result

# define "json_model_7_may_unevaluatedProperties" ($.objectKeywords.unevaluatedProperties)
def jm_f_14(value: Jsonable, path: str) -> bool:
    # $.objectKeywords.unevaluatedProperties
    result = json_model_25(value, path)
    return result

# define "json_model_7_may_minProperties" ($.objectKeywords.minProperties)
def jm_f_15(value: Jsonable, path: str) -> bool:
    # $.objectKeywords.minProperties
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_7_may_maxProperties" ($.objectKeywords.maxProperties)
def jm_f_16(value: Jsonable, path: str) -> bool:
    # $.objectKeywords.maxProperties
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result



# define "json_model_7_may_propertyNames" ($.objectKeywords.propertyNames)
def jm_f_18(value: Jsonable, path: str) -> bool:
    # $.objectKeywords.propertyNames
    result = json_model_24(value, path)
    return result

# define "json_model_8_may_minimum" ($.numberKeywords.minimum)
def jm_f_19(value: Jsonable, path: str) -> bool:
    # $.numberKeywords.minimum
    result = isinstance(value, float)
    return result

# define "json_model_8_may_maximum" ($.numberKeywords.maximum)
def jm_f_20(value: Jsonable, path: str) -> bool:
    # $.numberKeywords.maximum
    result = isinstance(value, float)
    return result

# define "json_model_9_may_$schema" ($.metas.'$schema')
def jm_f_21(value: Jsonable, path: str) -> bool:
    # $.metas.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_9_may_$id" ($.metas.'$id')
def jm_f_22(value: Jsonable, path: str) -> bool:
    # $.metas.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_9_may_$comment" ($.metas.'$comment')
def jm_f_23(value: Jsonable, path: str) -> bool:
    # $.metas.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_9_may_title" ($.metas.title)
def jm_f_25(value: Jsonable, path: str) -> bool:
    # $.metas.title
    result = isinstance(value, str)
    return result

# define "json_model_9_may_default" ($.metas.default)
def jm_f_26(value: Jsonable, path: str) -> bool:
    # $.metas.default
    result = True
    return result

# define "json_model_9_may_examples" ($.metas.examples)
def jm_f_27(value: Jsonable, path: str) -> bool:
    # $.metas.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_5_idx, array_5_item in enumerate(value):
            # $.metas.examples.0
            result = True
            if not result: break
    return result

# define "json_model_9_may_description" ($.metas.description)
def jm_f_28(value: Jsonable, path: str) -> bool:
    # $.metas.description
    result = isinstance(value, str)
    return result

# define "json_model_9_may_$anchor" ($.metas.'$anchor')
def jm_f_29(value: Jsonable, path: str) -> bool:
    # $.metas.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_9_may_$dynamicAnchor" ($.metas.'$dynamicAnchor')
def jm_f_30(value: Jsonable, path: str) -> bool:
    # $.metas.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_9_may_deprecated" ($.metas.deprecated)
def jm_f_31(value: Jsonable, path: str) -> bool:
    # $.metas.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_9_may_readOnly" ($.metas.readOnly)
def jm_f_32(value: Jsonable, path: str) -> bool:
    # $.metas.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_9_may_writeOnly" ($.metas.writeOnly)
def jm_f_33(value: Jsonable, path: str) -> bool:
    # $.metas.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_9_may_id" ($.metas.id)
def jm_f_35(value: Jsonable, path: str) -> bool:
    # $.metas.id
    result = isinstance(value, str)
    return result



# define "json_model_10_must_type" ($.String.type)
def jm_f_37(value: Jsonable, path: str) -> bool:
    # $.String.type
    result = isinstance(value, str) and value == "string"
    return result

# define "json_model_10_may_$schema" ($.String.'$schema')
def jm_f_38(value: Jsonable, path: str) -> bool:
    # $.String.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_10_may_$id" ($.String.'$id')
def jm_f_39(value: Jsonable, path: str) -> bool:
    # $.String.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_10_may_$comment" ($.String.'$comment')
def jm_f_40(value: Jsonable, path: str) -> bool:
    # $.String.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_10_may_title" ($.String.title)
def jm_f_42(value: Jsonable, path: str) -> bool:
    # $.String.title
    result = isinstance(value, str)
    return result

# define "json_model_10_may_default" ($.String.default)
def jm_f_43(value: Jsonable, path: str) -> bool:
    # $.String.default
    result = True
    return result

# define "json_model_10_may_examples" ($.String.examples)
def jm_f_44(value: Jsonable, path: str) -> bool:
    # $.String.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_6_idx, array_6_item in enumerate(value):
            # $.String.examples.0
            result = True
            if not result: break
    return result

# define "json_model_10_may_description" ($.String.description)
def jm_f_45(value: Jsonable, path: str) -> bool:
    # $.String.description
    result = isinstance(value, str)
    return result

# define "json_model_10_may_$anchor" ($.String.'$anchor')
def jm_f_46(value: Jsonable, path: str) -> bool:
    # $.String.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_10_may_$dynamicAnchor" ($.String.'$dynamicAnchor')
def jm_f_47(value: Jsonable, path: str) -> bool:
    # $.String.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_10_may_deprecated" ($.String.deprecated)
def jm_f_48(value: Jsonable, path: str) -> bool:
    # $.String.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_10_may_readOnly" ($.String.readOnly)
def jm_f_49(value: Jsonable, path: str) -> bool:
    # $.String.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_10_may_writeOnly" ($.String.writeOnly)
def jm_f_50(value: Jsonable, path: str) -> bool:
    # $.String.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_10_may_id" ($.String.id)
def jm_f_52(value: Jsonable, path: str) -> bool:
    # $.String.id
    result = isinstance(value, str)
    return result



# define "json_model_10_may_pattern" ($.String.pattern)
def jm_f_54(value: Jsonable, path: str) -> bool:
    # $.String.pattern
    result = is_valid_re(value, path)
    return result

# define "json_model_10_may_minLength" ($.String.minLength)
def jm_f_55(value: Jsonable, path: str) -> bool:
    # $.String.minLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_10_may_maxLength" ($.String.maxLength)
def jm_f_56(value: Jsonable, path: str) -> bool:
    # $.String.maxLength
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_10_may_format" ($.String.format)
def jm_f_57(value: Jsonable, path: str) -> bool:
    # $.String.format
    result = not isinstance(value, (list, dict)) and value in {'byte', 'date', 'date-time', 'double', 'duration', 'email', 'hostname', 'idn-email', 'idn-hostname', 'int', 'int32', 'int64', 'ipv4', 'ipv6', 'iri', 'iri-reference', 'json-pointer', 'mime-type', 'regex', 'relative-json-pointer', 'time', 'uint', 'uint32', 'uint64', 'uri', 'uri-reference', 'uuid'}
    return result

# define "json_model_11_must_type" ($.Array.type)
def jm_f_58(value: Jsonable, path: str) -> bool:
    # $.Array.type
    result = isinstance(value, str) and value == "array"
    return result

# define "json_model_11_may_$schema" ($.Array.'$schema')
def jm_f_59(value: Jsonable, path: str) -> bool:
    # $.Array.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_11_may_$id" ($.Array.'$id')
def jm_f_60(value: Jsonable, path: str) -> bool:
    # $.Array.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_11_may_$comment" ($.Array.'$comment')
def jm_f_61(value: Jsonable, path: str) -> bool:
    # $.Array.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_11_may_title" ($.Array.title)
def jm_f_63(value: Jsonable, path: str) -> bool:
    # $.Array.title
    result = isinstance(value, str)
    return result

# define "json_model_11_may_default" ($.Array.default)
def jm_f_64(value: Jsonable, path: str) -> bool:
    # $.Array.default
    result = True
    return result

# define "json_model_11_may_examples" ($.Array.examples)
def jm_f_65(value: Jsonable, path: str) -> bool:
    # $.Array.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_7_idx, array_7_item in enumerate(value):
            # $.Array.examples.0
            result = True
            if not result: break
    return result

# define "json_model_11_may_description" ($.Array.description)
def jm_f_66(value: Jsonable, path: str) -> bool:
    # $.Array.description
    result = isinstance(value, str)
    return result

# define "json_model_11_may_$anchor" ($.Array.'$anchor')
def jm_f_67(value: Jsonable, path: str) -> bool:
    # $.Array.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_11_may_$dynamicAnchor" ($.Array.'$dynamicAnchor')
def jm_f_68(value: Jsonable, path: str) -> bool:
    # $.Array.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_11_may_deprecated" ($.Array.deprecated)
def jm_f_69(value: Jsonable, path: str) -> bool:
    # $.Array.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_11_may_readOnly" ($.Array.readOnly)
def jm_f_70(value: Jsonable, path: str) -> bool:
    # $.Array.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_11_may_writeOnly" ($.Array.writeOnly)
def jm_f_71(value: Jsonable, path: str) -> bool:
    # $.Array.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_11_may_id" ($.Array.id)
def jm_f_73(value: Jsonable, path: str) -> bool:
    # $.Array.id
    result = isinstance(value, str)
    return result



# define "json_model_11_may_prefixItems" ($.Array.prefixItems)
def jm_f_75(value: Jsonable, path: str) -> bool:
    # $.Array.prefixItems
    result = json_model_4(value, path)
    return result

# define "json_model_11_may_items" ($.Array.items)
def jm_f_76(value: Jsonable, path: str) -> bool:
    # $.Array.items
    # $.Array.items.'|'.0
    result = json_model_25(value, path)
    if not result:
        # $.Array.items.'|'.1
        result = json_model_4(value, path)
    return result

# define "json_model_11_may_additionalItems" ($.Array.additionalItems)
def jm_f_77(value: Jsonable, path: str) -> bool:
    # $.Array.additionalItems
    result = json_model_25(value, path)
    return result

# define "json_model_11_may_unevaluatedItems" ($.Array.unevaluatedItems)
def jm_f_78(value: Jsonable, path: str) -> bool:
    # $.Array.unevaluatedItems
    result = json_model_25(value, path)
    return result

# define "json_model_11_may_minItems" ($.Array.minItems)
def jm_f_79(value: Jsonable, path: str) -> bool:
    # $.Array.minItems
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_11_may_maxItems" ($.Array.maxItems)
def jm_f_80(value: Jsonable, path: str) -> bool:
    # $.Array.maxItems
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_11_may_uniqueItems" ($.Array.uniqueItems)
def jm_f_81(value: Jsonable, path: str) -> bool:
    # $.Array.uniqueItems
    result = isinstance(value, bool)
    return result

# define "json_model_12_must_type" ($.Object.type)
def jm_f_82(value: Jsonable, path: str) -> bool:
    # $.Object.type
    result = isinstance(value, str) and value == "object"
    return result

# define "json_model_12_may_$schema" ($.Object.'$schema')
def jm_f_83(value: Jsonable, path: str) -> bool:
    # $.Object.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_12_may_$id" ($.Object.'$id')
def jm_f_84(value: Jsonable, path: str) -> bool:
    # $.Object.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_12_may_$comment" ($.Object.'$comment')
def jm_f_85(value: Jsonable, path: str) -> bool:
    # $.Object.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_12_may_title" ($.Object.title)
def jm_f_87(value: Jsonable, path: str) -> bool:
    # $.Object.title
    result = isinstance(value, str)
    return result

# define "json_model_12_may_default" ($.Object.default)
def jm_f_88(value: Jsonable, path: str) -> bool:
    # $.Object.default
    result = True
    return result

# define "json_model_12_may_examples" ($.Object.examples)
def jm_f_89(value: Jsonable, path: str) -> bool:
    # $.Object.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_8_idx, array_8_item in enumerate(value):
            # $.Object.examples.0
            result = True
            if not result: break
    return result

# define "json_model_12_may_description" ($.Object.description)
def jm_f_90(value: Jsonable, path: str) -> bool:
    # $.Object.description
    result = isinstance(value, str)
    return result

# define "json_model_12_may_$anchor" ($.Object.'$anchor')
def jm_f_91(value: Jsonable, path: str) -> bool:
    # $.Object.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_12_may_$dynamicAnchor" ($.Object.'$dynamicAnchor')
def jm_f_92(value: Jsonable, path: str) -> bool:
    # $.Object.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_12_may_deprecated" ($.Object.deprecated)
def jm_f_93(value: Jsonable, path: str) -> bool:
    # $.Object.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_12_may_readOnly" ($.Object.readOnly)
def jm_f_94(value: Jsonable, path: str) -> bool:
    # $.Object.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_12_may_writeOnly" ($.Object.writeOnly)
def jm_f_95(value: Jsonable, path: str) -> bool:
    # $.Object.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_12_may_id" ($.Object.id)
def jm_f_97(value: Jsonable, path: str) -> bool:
    # $.Object.id
    result = isinstance(value, str)
    return result





# define "json_model_12_may_required" ($.Object.required)
def jm_f_100(value: Jsonable, path: str) -> bool:
    # $.Object.required
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_9_idx, array_9_item in enumerate(value):
            # $.Object.required.0
            result = isinstance(array_9_item, str)
            if not result: break
    return result

# define "json_model_12_may_additionalProperties" ($.Object.additionalProperties)
def jm_f_101(value: Jsonable, path: str) -> bool:
    # $.Object.additionalProperties
    result = json_model_25(value, path)
    return result

# define "json_model_12_may_unevaluatedProperties" ($.Object.unevaluatedProperties)
def jm_f_102(value: Jsonable, path: str) -> bool:
    # $.Object.unevaluatedProperties
    result = json_model_25(value, path)
    return result

# define "json_model_12_may_minProperties" ($.Object.minProperties)
def jm_f_103(value: Jsonable, path: str) -> bool:
    # $.Object.minProperties
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_12_may_maxProperties" ($.Object.maxProperties)
def jm_f_104(value: Jsonable, path: str) -> bool:
    # $.Object.maxProperties
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result



# define "json_model_12_may_propertyNames" ($.Object.propertyNames)
def jm_f_106(value: Jsonable, path: str) -> bool:
    # $.Object.propertyNames
    result = json_model_24(value, path)
    return result

# define "json_model_13_must_type" ($.Integer.type)
def jm_f_107(value: Jsonable, path: str) -> bool:
    # $.Integer.type
    result = isinstance(value, str) and value == "integer"
    return result

# define "json_model_13_may_$schema" ($.Integer.'$schema')
def jm_f_108(value: Jsonable, path: str) -> bool:
    # $.Integer.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_13_may_$id" ($.Integer.'$id')
def jm_f_109(value: Jsonable, path: str) -> bool:
    # $.Integer.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_13_may_$comment" ($.Integer.'$comment')
def jm_f_110(value: Jsonable, path: str) -> bool:
    # $.Integer.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_13_may_title" ($.Integer.title)
def jm_f_112(value: Jsonable, path: str) -> bool:
    # $.Integer.title
    result = isinstance(value, str)
    return result

# define "json_model_13_may_default" ($.Integer.default)
def jm_f_113(value: Jsonable, path: str) -> bool:
    # $.Integer.default
    result = True
    return result

# define "json_model_13_may_examples" ($.Integer.examples)
def jm_f_114(value: Jsonable, path: str) -> bool:
    # $.Integer.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_10_idx, array_10_item in enumerate(value):
            # $.Integer.examples.0
            result = True
            if not result: break
    return result

# define "json_model_13_may_description" ($.Integer.description)
def jm_f_115(value: Jsonable, path: str) -> bool:
    # $.Integer.description
    result = isinstance(value, str)
    return result

# define "json_model_13_may_$anchor" ($.Integer.'$anchor')
def jm_f_116(value: Jsonable, path: str) -> bool:
    # $.Integer.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_13_may_$dynamicAnchor" ($.Integer.'$dynamicAnchor')
def jm_f_117(value: Jsonable, path: str) -> bool:
    # $.Integer.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_13_may_deprecated" ($.Integer.deprecated)
def jm_f_118(value: Jsonable, path: str) -> bool:
    # $.Integer.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_13_may_readOnly" ($.Integer.readOnly)
def jm_f_119(value: Jsonable, path: str) -> bool:
    # $.Integer.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_13_may_writeOnly" ($.Integer.writeOnly)
def jm_f_120(value: Jsonable, path: str) -> bool:
    # $.Integer.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_13_may_id" ($.Integer.id)
def jm_f_122(value: Jsonable, path: str) -> bool:
    # $.Integer.id
    result = isinstance(value, str)
    return result



# define "json_model_13_may_minimum" ($.Integer.minimum)
def jm_f_124(value: Jsonable, path: str) -> bool:
    # $.Integer.minimum
    result = isinstance(value, float)
    return result

# define "json_model_13_may_maximum" ($.Integer.maximum)
def jm_f_125(value: Jsonable, path: str) -> bool:
    # $.Integer.maximum
    result = isinstance(value, float)
    return result

# define "json_model_14_must_type" ($.Number.type)
def jm_f_126(value: Jsonable, path: str) -> bool:
    # $.Number.type
    result = isinstance(value, str) and value == "number"
    return result

# define "json_model_14_may_$schema" ($.Number.'$schema')
def jm_f_127(value: Jsonable, path: str) -> bool:
    # $.Number.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_14_may_$id" ($.Number.'$id')
def jm_f_128(value: Jsonable, path: str) -> bool:
    # $.Number.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_14_may_$comment" ($.Number.'$comment')
def jm_f_129(value: Jsonable, path: str) -> bool:
    # $.Number.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_14_may_title" ($.Number.title)
def jm_f_131(value: Jsonable, path: str) -> bool:
    # $.Number.title
    result = isinstance(value, str)
    return result

# define "json_model_14_may_default" ($.Number.default)
def jm_f_132(value: Jsonable, path: str) -> bool:
    # $.Number.default
    result = True
    return result

# define "json_model_14_may_examples" ($.Number.examples)
def jm_f_133(value: Jsonable, path: str) -> bool:
    # $.Number.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_11_idx, array_11_item in enumerate(value):
            # $.Number.examples.0
            result = True
            if not result: break
    return result

# define "json_model_14_may_description" ($.Number.description)
def jm_f_134(value: Jsonable, path: str) -> bool:
    # $.Number.description
    result = isinstance(value, str)
    return result

# define "json_model_14_may_$anchor" ($.Number.'$anchor')
def jm_f_135(value: Jsonable, path: str) -> bool:
    # $.Number.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_14_may_$dynamicAnchor" ($.Number.'$dynamicAnchor')
def jm_f_136(value: Jsonable, path: str) -> bool:
    # $.Number.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_14_may_deprecated" ($.Number.deprecated)
def jm_f_137(value: Jsonable, path: str) -> bool:
    # $.Number.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_14_may_readOnly" ($.Number.readOnly)
def jm_f_138(value: Jsonable, path: str) -> bool:
    # $.Number.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_14_may_writeOnly" ($.Number.writeOnly)
def jm_f_139(value: Jsonable, path: str) -> bool:
    # $.Number.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_14_may_id" ($.Number.id)
def jm_f_141(value: Jsonable, path: str) -> bool:
    # $.Number.id
    result = isinstance(value, str)
    return result



# define "json_model_14_may_minimum" ($.Number.minimum)
def jm_f_143(value: Jsonable, path: str) -> bool:
    # $.Number.minimum
    result = isinstance(value, float)
    return result

# define "json_model_14_may_maximum" ($.Number.maximum)
def jm_f_144(value: Jsonable, path: str) -> bool:
    # $.Number.maximum
    result = isinstance(value, float)
    return result

# define "json_model_15_must_type" ($.Bool.type)
def jm_f_145(value: Jsonable, path: str) -> bool:
    # $.Bool.type
    result = isinstance(value, str) and value == "boolean"
    return result

# define "json_model_15_may_$schema" ($.Bool.'$schema')
def jm_f_146(value: Jsonable, path: str) -> bool:
    # $.Bool.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_15_may_$id" ($.Bool.'$id')
def jm_f_147(value: Jsonable, path: str) -> bool:
    # $.Bool.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_15_may_$comment" ($.Bool.'$comment')
def jm_f_148(value: Jsonable, path: str) -> bool:
    # $.Bool.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_15_may_title" ($.Bool.title)
def jm_f_150(value: Jsonable, path: str) -> bool:
    # $.Bool.title
    result = isinstance(value, str)
    return result

# define "json_model_15_may_default" ($.Bool.default)
def jm_f_151(value: Jsonable, path: str) -> bool:
    # $.Bool.default
    result = True
    return result

# define "json_model_15_may_examples" ($.Bool.examples)
def jm_f_152(value: Jsonable, path: str) -> bool:
    # $.Bool.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_12_idx, array_12_item in enumerate(value):
            # $.Bool.examples.0
            result = True
            if not result: break
    return result

# define "json_model_15_may_description" ($.Bool.description)
def jm_f_153(value: Jsonable, path: str) -> bool:
    # $.Bool.description
    result = isinstance(value, str)
    return result

# define "json_model_15_may_$anchor" ($.Bool.'$anchor')
def jm_f_154(value: Jsonable, path: str) -> bool:
    # $.Bool.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_15_may_$dynamicAnchor" ($.Bool.'$dynamicAnchor')
def jm_f_155(value: Jsonable, path: str) -> bool:
    # $.Bool.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_15_may_deprecated" ($.Bool.deprecated)
def jm_f_156(value: Jsonable, path: str) -> bool:
    # $.Bool.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_15_may_readOnly" ($.Bool.readOnly)
def jm_f_157(value: Jsonable, path: str) -> bool:
    # $.Bool.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_15_may_writeOnly" ($.Bool.writeOnly)
def jm_f_158(value: Jsonable, path: str) -> bool:
    # $.Bool.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_15_may_id" ($.Bool.id)
def jm_f_160(value: Jsonable, path: str) -> bool:
    # $.Bool.id
    result = isinstance(value, str)
    return result



# define "json_model_16_must_type" ($.Null.type)
def jm_f_162(value: Jsonable, path: str) -> bool:
    # $.Null.type
    result = isinstance(value, str) and value == "null"
    return result

# define "json_model_16_may_$schema" ($.Null.'$schema')
def jm_f_163(value: Jsonable, path: str) -> bool:
    # $.Null.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_16_may_$id" ($.Null.'$id')
def jm_f_164(value: Jsonable, path: str) -> bool:
    # $.Null.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_16_may_$comment" ($.Null.'$comment')
def jm_f_165(value: Jsonable, path: str) -> bool:
    # $.Null.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_16_may_title" ($.Null.title)
def jm_f_167(value: Jsonable, path: str) -> bool:
    # $.Null.title
    result = isinstance(value, str)
    return result

# define "json_model_16_may_default" ($.Null.default)
def jm_f_168(value: Jsonable, path: str) -> bool:
    # $.Null.default
    result = True
    return result

# define "json_model_16_may_examples" ($.Null.examples)
def jm_f_169(value: Jsonable, path: str) -> bool:
    # $.Null.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_13_idx, array_13_item in enumerate(value):
            # $.Null.examples.0
            result = True
            if not result: break
    return result

# define "json_model_16_may_description" ($.Null.description)
def jm_f_170(value: Jsonable, path: str) -> bool:
    # $.Null.description
    result = isinstance(value, str)
    return result

# define "json_model_16_may_$anchor" ($.Null.'$anchor')
def jm_f_171(value: Jsonable, path: str) -> bool:
    # $.Null.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_16_may_$dynamicAnchor" ($.Null.'$dynamicAnchor')
def jm_f_172(value: Jsonable, path: str) -> bool:
    # $.Null.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_16_may_deprecated" ($.Null.deprecated)
def jm_f_173(value: Jsonable, path: str) -> bool:
    # $.Null.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_16_may_readOnly" ($.Null.readOnly)
def jm_f_174(value: Jsonable, path: str) -> bool:
    # $.Null.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_16_may_writeOnly" ($.Null.writeOnly)
def jm_f_175(value: Jsonable, path: str) -> bool:
    # $.Null.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_16_may_id" ($.Null.id)
def jm_f_177(value: Jsonable, path: str) -> bool:
    # $.Null.id
    result = isinstance(value, str)
    return result



# define "json_model_17_must_allOf" ($.AllOf.allOf)
def jm_f_179(value: Jsonable, path: str) -> bool:
    # $.AllOf.allOf
    result = json_model_4(value, path)
    return result

# define "json_model_17_may_$schema" ($.AllOf.'$schema')
def jm_f_180(value: Jsonable, path: str) -> bool:
    # $.AllOf.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_17_may_$id" ($.AllOf.'$id')
def jm_f_181(value: Jsonable, path: str) -> bool:
    # $.AllOf.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_17_may_$comment" ($.AllOf.'$comment')
def jm_f_182(value: Jsonable, path: str) -> bool:
    # $.AllOf.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_17_may_title" ($.AllOf.title)
def jm_f_184(value: Jsonable, path: str) -> bool:
    # $.AllOf.title
    result = isinstance(value, str)
    return result

# define "json_model_17_may_default" ($.AllOf.default)
def jm_f_185(value: Jsonable, path: str) -> bool:
    # $.AllOf.default
    result = True
    return result

# define "json_model_17_may_examples" ($.AllOf.examples)
def jm_f_186(value: Jsonable, path: str) -> bool:
    # $.AllOf.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_14_idx, array_14_item in enumerate(value):
            # $.AllOf.examples.0
            result = True
            if not result: break
    return result

# define "json_model_17_may_description" ($.AllOf.description)
def jm_f_187(value: Jsonable, path: str) -> bool:
    # $.AllOf.description
    result = isinstance(value, str)
    return result

# define "json_model_17_may_$anchor" ($.AllOf.'$anchor')
def jm_f_188(value: Jsonable, path: str) -> bool:
    # $.AllOf.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_17_may_$dynamicAnchor" ($.AllOf.'$dynamicAnchor')
def jm_f_189(value: Jsonable, path: str) -> bool:
    # $.AllOf.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_17_may_deprecated" ($.AllOf.deprecated)
def jm_f_190(value: Jsonable, path: str) -> bool:
    # $.AllOf.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_17_may_readOnly" ($.AllOf.readOnly)
def jm_f_191(value: Jsonable, path: str) -> bool:
    # $.AllOf.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_17_may_writeOnly" ($.AllOf.writeOnly)
def jm_f_192(value: Jsonable, path: str) -> bool:
    # $.AllOf.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_17_may_id" ($.AllOf.id)
def jm_f_194(value: Jsonable, path: str) -> bool:
    # $.AllOf.id
    result = isinstance(value, str)
    return result



# define "json_model_18_must_anyOf" ($.AnyOf.anyOf)
def jm_f_196(value: Jsonable, path: str) -> bool:
    # $.AnyOf.anyOf
    result = json_model_4(value, path)
    return result

# define "json_model_18_may_$schema" ($.AnyOf.'$schema')
def jm_f_197(value: Jsonable, path: str) -> bool:
    # $.AnyOf.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_18_may_$id" ($.AnyOf.'$id')
def jm_f_198(value: Jsonable, path: str) -> bool:
    # $.AnyOf.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_18_may_$comment" ($.AnyOf.'$comment')
def jm_f_199(value: Jsonable, path: str) -> bool:
    # $.AnyOf.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_18_may_title" ($.AnyOf.title)
def jm_f_201(value: Jsonable, path: str) -> bool:
    # $.AnyOf.title
    result = isinstance(value, str)
    return result

# define "json_model_18_may_default" ($.AnyOf.default)
def jm_f_202(value: Jsonable, path: str) -> bool:
    # $.AnyOf.default
    result = True
    return result

# define "json_model_18_may_examples" ($.AnyOf.examples)
def jm_f_203(value: Jsonable, path: str) -> bool:
    # $.AnyOf.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_15_idx, array_15_item in enumerate(value):
            # $.AnyOf.examples.0
            result = True
            if not result: break
    return result

# define "json_model_18_may_description" ($.AnyOf.description)
def jm_f_204(value: Jsonable, path: str) -> bool:
    # $.AnyOf.description
    result = isinstance(value, str)
    return result

# define "json_model_18_may_$anchor" ($.AnyOf.'$anchor')
def jm_f_205(value: Jsonable, path: str) -> bool:
    # $.AnyOf.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_18_may_$dynamicAnchor" ($.AnyOf.'$dynamicAnchor')
def jm_f_206(value: Jsonable, path: str) -> bool:
    # $.AnyOf.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_18_may_deprecated" ($.AnyOf.deprecated)
def jm_f_207(value: Jsonable, path: str) -> bool:
    # $.AnyOf.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_18_may_readOnly" ($.AnyOf.readOnly)
def jm_f_208(value: Jsonable, path: str) -> bool:
    # $.AnyOf.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_18_may_writeOnly" ($.AnyOf.writeOnly)
def jm_f_209(value: Jsonable, path: str) -> bool:
    # $.AnyOf.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_18_may_id" ($.AnyOf.id)
def jm_f_211(value: Jsonable, path: str) -> bool:
    # $.AnyOf.id
    result = isinstance(value, str)
    return result



# define "json_model_19_must_oneOf" ($.OneOf.oneOf)
def jm_f_213(value: Jsonable, path: str) -> bool:
    # $.OneOf.oneOf
    result = json_model_4(value, path)
    return result

# define "json_model_19_may_$schema" ($.OneOf.'$schema')
def jm_f_214(value: Jsonable, path: str) -> bool:
    # $.OneOf.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_19_may_$id" ($.OneOf.'$id')
def jm_f_215(value: Jsonable, path: str) -> bool:
    # $.OneOf.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_19_may_$comment" ($.OneOf.'$comment')
def jm_f_216(value: Jsonable, path: str) -> bool:
    # $.OneOf.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_19_may_title" ($.OneOf.title)
def jm_f_218(value: Jsonable, path: str) -> bool:
    # $.OneOf.title
    result = isinstance(value, str)
    return result

# define "json_model_19_may_default" ($.OneOf.default)
def jm_f_219(value: Jsonable, path: str) -> bool:
    # $.OneOf.default
    result = True
    return result

# define "json_model_19_may_examples" ($.OneOf.examples)
def jm_f_220(value: Jsonable, path: str) -> bool:
    # $.OneOf.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_16_idx, array_16_item in enumerate(value):
            # $.OneOf.examples.0
            result = True
            if not result: break
    return result

# define "json_model_19_may_description" ($.OneOf.description)
def jm_f_221(value: Jsonable, path: str) -> bool:
    # $.OneOf.description
    result = isinstance(value, str)
    return result

# define "json_model_19_may_$anchor" ($.OneOf.'$anchor')
def jm_f_222(value: Jsonable, path: str) -> bool:
    # $.OneOf.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_19_may_$dynamicAnchor" ($.OneOf.'$dynamicAnchor')
def jm_f_223(value: Jsonable, path: str) -> bool:
    # $.OneOf.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_19_may_deprecated" ($.OneOf.deprecated)
def jm_f_224(value: Jsonable, path: str) -> bool:
    # $.OneOf.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_19_may_readOnly" ($.OneOf.readOnly)
def jm_f_225(value: Jsonable, path: str) -> bool:
    # $.OneOf.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_19_may_writeOnly" ($.OneOf.writeOnly)
def jm_f_226(value: Jsonable, path: str) -> bool:
    # $.OneOf.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_19_may_id" ($.OneOf.id)
def jm_f_228(value: Jsonable, path: str) -> bool:
    # $.OneOf.id
    result = isinstance(value, str)
    return result



# define "json_model_20_must_enum" ($.Enum.enum)
def jm_f_230(value: Jsonable, path: str) -> bool:
    # $.Enum.enum
    result = json_model_3(value, path)
    return result

# define "json_model_20_may_$schema" ($.Enum.'$schema')
def jm_f_231(value: Jsonable, path: str) -> bool:
    # $.Enum.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_20_may_$id" ($.Enum.'$id')
def jm_f_232(value: Jsonable, path: str) -> bool:
    # $.Enum.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_20_may_$comment" ($.Enum.'$comment')
def jm_f_233(value: Jsonable, path: str) -> bool:
    # $.Enum.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_20_may_title" ($.Enum.title)
def jm_f_235(value: Jsonable, path: str) -> bool:
    # $.Enum.title
    result = isinstance(value, str)
    return result

# define "json_model_20_may_default" ($.Enum.default)
def jm_f_236(value: Jsonable, path: str) -> bool:
    # $.Enum.default
    result = True
    return result

# define "json_model_20_may_examples" ($.Enum.examples)
def jm_f_237(value: Jsonable, path: str) -> bool:
    # $.Enum.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_17_idx, array_17_item in enumerate(value):
            # $.Enum.examples.0
            result = True
            if not result: break
    return result

# define "json_model_20_may_description" ($.Enum.description)
def jm_f_238(value: Jsonable, path: str) -> bool:
    # $.Enum.description
    result = isinstance(value, str)
    return result

# define "json_model_20_may_$anchor" ($.Enum.'$anchor')
def jm_f_239(value: Jsonable, path: str) -> bool:
    # $.Enum.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_20_may_$dynamicAnchor" ($.Enum.'$dynamicAnchor')
def jm_f_240(value: Jsonable, path: str) -> bool:
    # $.Enum.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_20_may_deprecated" ($.Enum.deprecated)
def jm_f_241(value: Jsonable, path: str) -> bool:
    # $.Enum.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_20_may_readOnly" ($.Enum.readOnly)
def jm_f_242(value: Jsonable, path: str) -> bool:
    # $.Enum.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_20_may_writeOnly" ($.Enum.writeOnly)
def jm_f_243(value: Jsonable, path: str) -> bool:
    # $.Enum.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_20_may_id" ($.Enum.id)
def jm_f_245(value: Jsonable, path: str) -> bool:
    # $.Enum.id
    result = isinstance(value, str)
    return result



# define "json_model_21_must_const" ($.Const.const)
def jm_f_247(value: Jsonable, path: str) -> bool:
    # $.Const.const
    result = json_model_2(value, path)
    return result

# define "json_model_21_may_$schema" ($.Const.'$schema')
def jm_f_248(value: Jsonable, path: str) -> bool:
    # $.Const.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_21_may_$id" ($.Const.'$id')
def jm_f_249(value: Jsonable, path: str) -> bool:
    # $.Const.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_21_may_$comment" ($.Const.'$comment')
def jm_f_250(value: Jsonable, path: str) -> bool:
    # $.Const.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_21_may_title" ($.Const.title)
def jm_f_252(value: Jsonable, path: str) -> bool:
    # $.Const.title
    result = isinstance(value, str)
    return result

# define "json_model_21_may_default" ($.Const.default)
def jm_f_253(value: Jsonable, path: str) -> bool:
    # $.Const.default
    result = True
    return result

# define "json_model_21_may_examples" ($.Const.examples)
def jm_f_254(value: Jsonable, path: str) -> bool:
    # $.Const.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_18_idx, array_18_item in enumerate(value):
            # $.Const.examples.0
            result = True
            if not result: break
    return result

# define "json_model_21_may_description" ($.Const.description)
def jm_f_255(value: Jsonable, path: str) -> bool:
    # $.Const.description
    result = isinstance(value, str)
    return result

# define "json_model_21_may_$anchor" ($.Const.'$anchor')
def jm_f_256(value: Jsonable, path: str) -> bool:
    # $.Const.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_21_may_$dynamicAnchor" ($.Const.'$dynamicAnchor')
def jm_f_257(value: Jsonable, path: str) -> bool:
    # $.Const.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_21_may_deprecated" ($.Const.deprecated)
def jm_f_258(value: Jsonable, path: str) -> bool:
    # $.Const.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_21_may_readOnly" ($.Const.readOnly)
def jm_f_259(value: Jsonable, path: str) -> bool:
    # $.Const.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_21_may_writeOnly" ($.Const.writeOnly)
def jm_f_260(value: Jsonable, path: str) -> bool:
    # $.Const.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_21_may_id" ($.Const.id)
def jm_f_262(value: Jsonable, path: str) -> bool:
    # $.Const.id
    result = isinstance(value, str)
    return result



# define "json_model_22_must_$ref" ($.Ref.'$ref')
def jm_f_264(value: Jsonable, path: str) -> bool:
    # $.Ref.'$ref'
    result = json_model_1(value, path)
    return result

# define "json_model_22_may_$schema" ($.Ref.'$schema')
def jm_f_265(value: Jsonable, path: str) -> bool:
    # $.Ref.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_22_may_$id" ($.Ref.'$id')
def jm_f_266(value: Jsonable, path: str) -> bool:
    # $.Ref.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_22_may_$comment" ($.Ref.'$comment')
def jm_f_267(value: Jsonable, path: str) -> bool:
    # $.Ref.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_22_may_title" ($.Ref.title)
def jm_f_269(value: Jsonable, path: str) -> bool:
    # $.Ref.title
    result = isinstance(value, str)
    return result

# define "json_model_22_may_default" ($.Ref.default)
def jm_f_270(value: Jsonable, path: str) -> bool:
    # $.Ref.default
    result = True
    return result

# define "json_model_22_may_examples" ($.Ref.examples)
def jm_f_271(value: Jsonable, path: str) -> bool:
    # $.Ref.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_19_idx, array_19_item in enumerate(value):
            # $.Ref.examples.0
            result = True
            if not result: break
    return result

# define "json_model_22_may_description" ($.Ref.description)
def jm_f_272(value: Jsonable, path: str) -> bool:
    # $.Ref.description
    result = isinstance(value, str)
    return result

# define "json_model_22_may_$anchor" ($.Ref.'$anchor')
def jm_f_273(value: Jsonable, path: str) -> bool:
    # $.Ref.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_22_may_$dynamicAnchor" ($.Ref.'$dynamicAnchor')
def jm_f_274(value: Jsonable, path: str) -> bool:
    # $.Ref.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_22_may_deprecated" ($.Ref.deprecated)
def jm_f_275(value: Jsonable, path: str) -> bool:
    # $.Ref.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_22_may_readOnly" ($.Ref.readOnly)
def jm_f_276(value: Jsonable, path: str) -> bool:
    # $.Ref.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_22_may_writeOnly" ($.Ref.writeOnly)
def jm_f_277(value: Jsonable, path: str) -> bool:
    # $.Ref.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_22_may_id" ($.Ref.id)
def jm_f_279(value: Jsonable, path: str) -> bool:
    # $.Ref.id
    result = isinstance(value, str)
    return result



# define "json_model_23_must_$dynamicRef" ($.DynRef.'$dynamicRef')
def jm_f_281(value: Jsonable, path: str) -> bool:
    # $.DynRef.'$dynamicRef'
    result = json_model_1(value, path)
    return result

# define "json_model_23_may_$schema" ($.DynRef.'$schema')
def jm_f_282(value: Jsonable, path: str) -> bool:
    # $.DynRef.'$schema'
    result = isinstance(value, str)
    return result

# define "json_model_23_may_$id" ($.DynRef.'$id')
def jm_f_283(value: Jsonable, path: str) -> bool:
    # $.DynRef.'$id'
    result = isinstance(value, str)
    return result

# define "json_model_23_may_$comment" ($.DynRef.'$comment')
def jm_f_284(value: Jsonable, path: str) -> bool:
    # $.DynRef.'$comment'
    result = isinstance(value, str)
    return result



# define "json_model_23_may_title" ($.DynRef.title)
def jm_f_286(value: Jsonable, path: str) -> bool:
    # $.DynRef.title
    result = isinstance(value, str)
    return result

# define "json_model_23_may_default" ($.DynRef.default)
def jm_f_287(value: Jsonable, path: str) -> bool:
    # $.DynRef.default
    result = True
    return result

# define "json_model_23_may_examples" ($.DynRef.examples)
def jm_f_288(value: Jsonable, path: str) -> bool:
    # $.DynRef.examples
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_20_idx, array_20_item in enumerate(value):
            # $.DynRef.examples.0
            result = True
            if not result: break
    return result

# define "json_model_23_may_description" ($.DynRef.description)
def jm_f_289(value: Jsonable, path: str) -> bool:
    # $.DynRef.description
    result = isinstance(value, str)
    return result

# define "json_model_23_may_$anchor" ($.DynRef.'$anchor')
def jm_f_290(value: Jsonable, path: str) -> bool:
    # $.DynRef.'$anchor'
    result = isinstance(value, str)
    return result

# define "json_model_23_may_$dynamicAnchor" ($.DynRef.'$dynamicAnchor')
def jm_f_291(value: Jsonable, path: str) -> bool:
    # $.DynRef.'$dynamicAnchor'
    result = isinstance(value, str)
    return result

# define "json_model_23_may_deprecated" ($.DynRef.deprecated)
def jm_f_292(value: Jsonable, path: str) -> bool:
    # $.DynRef.deprecated
    result = isinstance(value, bool)
    return result

# define "json_model_23_may_readOnly" ($.DynRef.readOnly)
def jm_f_293(value: Jsonable, path: str) -> bool:
    # $.DynRef.readOnly
    result = isinstance(value, bool)
    return result

# define "json_model_23_may_writeOnly" ($.DynRef.writeOnly)
def jm_f_294(value: Jsonable, path: str) -> bool:
    # $.DynRef.writeOnly
    result = isinstance(value, bool)
    return result



# define "json_model_23_may_id" ($.DynRef.id)
def jm_f_296(value: Jsonable, path: str) -> bool:
    # $.DynRef.id
    result = isinstance(value, str)
    return result



# define "jm_obj_0_must_$schema" ($.RootSchema.'&'.0.'$schema')
def jm_f_298(value: Jsonable, path: str) -> bool:
    # $.RootSchema.'&'.0.'$schema'
    result = isinstance(value, str)
    return result


# define "$URI" ($.URI)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.URI
    result = isinstance(value, str)
    return result

# define "$const" ($.const)
def json_model_2(value: Jsonable, path: str) -> bool:
    # $.const
    # $.const.'|'.0
    result = value is None
    if not result:
        # $.const.'|'.1
        result = isinstance(value, bool)
        if not result:
            # $.const.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool)
            if not result:
                # $.const.'|'.3
                result = isinstance(value, float)
                if not result:
                    # $.const.'|'.4
                    result = isinstance(value, str)
    return result

# define "$enum" ($.enum)
def json_model_3(value: Jsonable, path: str) -> bool:
    # $.enum
    result = isinstance(value, list)
    if result:
        # $.enum.'|'.0
        if True:
            assert isinstance(value, list)  # pyright helper
            for array_0_idx, array_0_item in enumerate(value):
                # $.enum.'|'.0.0
                result = isinstance(array_0_item, str)
                if not result: break
        if not result:
            # $.enum.'|'.1
            if True:
                assert isinstance(value, list)  # pyright helper
                for array_1_idx, array_1_item in enumerate(value):
                    # $.enum.'|'.1.0
                    result = isinstance(array_1_item, int) and not isinstance(array_1_item, bool)
                    if not result: break
            if not result:
                # $.enum.'|'.2
                if True:
                    assert isinstance(value, list)  # pyright helper
                    for array_2_idx, array_2_item in enumerate(value):
                        # $.enum.'|'.2.0
                        result = isinstance(array_2_item, bool)
                        if not result: break
    return result

# define "$schemaArray" ($.schemaArray)
def json_model_4(value: Jsonable, path: str) -> bool:
    # $.schemaArray
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_3_idx, array_3_item in enumerate(value):
            # $.schemaArray.0
            result = json_model_25(array_3_item, path)
            if not result: break
    return result


# object $.stringKeywords
def json_model_5(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_5_may:  # may
            if not json_model_5_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True




# object $.arrayKeywords
def json_model_6(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_6_may:  # may
            if not json_model_6_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True




# object $.objectKeywords.properties
def jm_f_11(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.objectKeywords.properties.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.objectKeywords.patternProperties
def jm_f_17(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if is_valid_re(prop, path):  # $REGEX
            # $.objectKeywords.patternProperties.REGEX
            result = json_model_25(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.objectKeywords
def json_model_7(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_7_may:  # may
            if not json_model_7_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True




# object $.numberKeywords
def json_model_8(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_8_may:  # may
            if not json_model_8_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True




# object $.metas.'$vocabulary'
def jm_f_24(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.metas.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.metas.'$defs'
def jm_f_34(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.metas.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.metas.definitions
def jm_f_36(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.metas.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.metas
def json_model_9(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_9_may:  # may
            if not json_model_9_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return True




# object $.String.'$vocabulary'
def jm_f_41(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.String.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.String.'$defs'
def jm_f_51(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.String.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.String.definitions
def jm_f_53(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.String.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.String
def json_model_10(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_10_must:  # must
            must_count += 1
            if not json_model_10_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_10_may:  # may
            if not json_model_10_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Array.'$vocabulary'
def jm_f_62(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.Array.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Array.'$defs'
def jm_f_72(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Array.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Array.definitions
def jm_f_74(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Array.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Array
def json_model_11(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_11_must:  # must
            must_count += 1
            if not json_model_11_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_11_may:  # may
            if not json_model_11_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Object.'$vocabulary'
def jm_f_86(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.Object.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Object.'$defs'
def jm_f_96(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Object.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Object.definitions
def jm_f_98(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Object.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Object.properties
def jm_f_99(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Object.properties.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Object.patternProperties
def jm_f_105(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if is_valid_re(prop, path):  # $REGEX
            # $.Object.patternProperties.REGEX
            result = json_model_25(model, path)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Object
def json_model_12(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_12_must:  # must
            must_count += 1
            if not json_model_12_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_12_may:  # may
            if not json_model_12_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Integer.'$vocabulary'
def jm_f_111(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.Integer.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Integer.'$defs'
def jm_f_121(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Integer.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Integer.definitions
def jm_f_123(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Integer.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Integer
def json_model_13(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_13_must:  # must
            must_count += 1
            if not json_model_13_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_13_may:  # may
            if not json_model_13_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Number.'$vocabulary'
def jm_f_130(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.Number.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Number.'$defs'
def jm_f_140(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Number.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Number.definitions
def jm_f_142(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Number.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Number
def json_model_14(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_14_must:  # must
            must_count += 1
            if not json_model_14_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_14_may:  # may
            if not json_model_14_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Bool.'$vocabulary'
def jm_f_149(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.Bool.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Bool.'$defs'
def jm_f_159(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Bool.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Bool.definitions
def jm_f_161(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Bool.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Bool
def json_model_15(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_15_must:  # must
            must_count += 1
            if not json_model_15_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_15_may:  # may
            if not json_model_15_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Null.'$vocabulary'
def jm_f_166(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.Null.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Null.'$defs'
def jm_f_176(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Null.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Null.definitions
def jm_f_178(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Null.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Null
def json_model_16(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_16_must:  # must
            must_count += 1
            if not json_model_16_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_16_may:  # may
            if not json_model_16_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.AllOf.'$vocabulary'
def jm_f_183(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.AllOf.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.AllOf.'$defs'
def jm_f_193(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.AllOf.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.AllOf.definitions
def jm_f_195(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.AllOf.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.AllOf
def json_model_17(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_17_must:  # must
            must_count += 1
            if not json_model_17_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_17_may:  # may
            if not json_model_17_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.AnyOf.'$vocabulary'
def jm_f_200(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.AnyOf.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.AnyOf.'$defs'
def jm_f_210(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.AnyOf.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.AnyOf.definitions
def jm_f_212(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.AnyOf.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.AnyOf
def json_model_18(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_18_must:  # must
            must_count += 1
            if not json_model_18_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_18_may:  # may
            if not json_model_18_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.OneOf.'$vocabulary'
def jm_f_217(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.OneOf.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.OneOf.'$defs'
def jm_f_227(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.OneOf.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.OneOf.definitions
def jm_f_229(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.OneOf.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.OneOf
def json_model_19(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_19_must:  # must
            must_count += 1
            if not json_model_19_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_19_may:  # may
            if not json_model_19_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Enum.'$vocabulary'
def jm_f_234(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.Enum.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Enum.'$defs'
def jm_f_244(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Enum.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Enum.definitions
def jm_f_246(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Enum.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Enum
def json_model_20(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_20_must:  # must
            must_count += 1
            if not json_model_20_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_20_may:  # may
            if not json_model_20_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Const.'$vocabulary'
def jm_f_251(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.Const.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Const.'$defs'
def jm_f_261(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Const.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Const.definitions
def jm_f_263(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Const.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Const
def json_model_21(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_21_must:  # must
            must_count += 1
            if not json_model_21_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_21_may:  # may
            if not json_model_21_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Ref.'$vocabulary'
def jm_f_268(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.Ref.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.Ref.'$defs'
def jm_f_278(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Ref.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Ref.definitions
def jm_f_280(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.Ref.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.Ref
def json_model_22(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_22_must:  # must
            must_count += 1
            if not json_model_22_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_22_may:  # may
            if not json_model_22_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.DynRef.'$vocabulary'
def jm_f_285(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        if json_model_1(prop, path):  # $URI
            # $.DynRef.'$vocabulary'.URI
            result = isinstance(model, bool)
            if not result: return False
        else:  # no catch all
            return False
    return True


# object $.DynRef.'$defs'
def jm_f_295(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.DynRef.'$defs'.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.DynRef.definitions
def jm_f_297(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.DynRef.definitions.''
        result = json_model_25(model, path)
        if not result: return False
    return True


# object $.DynRef
def json_model_23(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_23_must:  # must
            must_count += 1
            if not json_model_23_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in json_model_23_may:  # may
            if not json_model_23_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1



# define "$ObjectSchema" ($.ObjectSchema)
def json_model_24(value: Jsonable, path: str) -> bool:
    # $.ObjectSchema
    # $.ObjectSchema.'|'.0
    result = json_model_16(value, path)
    if not result:
        # $.ObjectSchema.'|'.1
        result = json_model_15(value, path)
        if not result:
            # $.ObjectSchema.'|'.2
            result = json_model_21(value, path)
            if not result:
                # $.ObjectSchema.'|'.3
                result = json_model_20(value, path)
                if not result:
                    # $.ObjectSchema.'|'.4
                    result = json_model_13(value, path)
                    if not result:
                        # $.ObjectSchema.'|'.5
                        result = json_model_14(value, path)
                        if not result:
                            # $.ObjectSchema.'|'.6
                            result = json_model_10(value, path)
                            if not result:
                                # $.ObjectSchema.'|'.7
                                result = json_model_11(value, path)
                                if not result:
                                    # $.ObjectSchema.'|'.8
                                    result = json_model_12(value, path)
                                    if not result:
                                        # $.ObjectSchema.'|'.9
                                        result = json_model_17(value, path)
                                        if not result:
                                            # $.ObjectSchema.'|'.10
                                            result = json_model_18(value, path)
                                            if not result:
                                                # $.ObjectSchema.'|'.11
                                                result = json_model_19(value, path)
                                                if not result:
                                                    # $.ObjectSchema.'|'.12
                                                    result = json_model_22(value, path)
                                                    if not result:
                                                        # $.ObjectSchema.'|'.13
                                                        result = json_model_23(value, path)
                                                        if not result:
                                                            # $.ObjectSchema.'|'.14
                                                            result = json_model_9(value, path)
    return result

# define "$Schema" ($.Schema)
def json_model_25(value: Jsonable, path: str) -> bool:
    # $.Schema
    # $.Schema.'|'.0
    result = isinstance(value, bool)
    if not result:
        # $.Schema.'|'.1
        result = json_model_24(value, path)
    return result


# object $.RootSchema.'&'.0
def jm_obj_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_0_must:  # must
            must_count += 1
            if not jm_obj_0_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # catch all
            # $.RootSchema.'&'.0.''
            result = True
            if not result: return False
    return must_count == 1

# define "$RootSchema" ($.RootSchema)
def json_model_26(value: Jsonable, path: str) -> bool:
    # $.RootSchema
    # $.RootSchema.'&'.0
    result = jm_obj_0(value, path)
    if result:
        # $.RootSchema.'&'.1
        result = json_model_24(value, path)
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = json_model_26(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_5_may = {
    "pattern": jm_f_0,
    "minLength": jm_f_1,
    "maxLength": jm_f_2,
    "format": jm_f_3,
}
json_model_6_may = {
    "prefixItems": jm_f_4,
    "items": jm_f_5,
    "additionalItems": jm_f_6,
    "unevaluatedItems": jm_f_7,
    "minItems": jm_f_8,
    "maxItems": jm_f_9,
    "uniqueItems": jm_f_10,
}
json_model_7_may = {
    "properties": jm_f_11,
    "required": jm_f_12,
    "additionalProperties": jm_f_13,
    "unevaluatedProperties": jm_f_14,
    "minProperties": jm_f_15,
    "maxProperties": jm_f_16,
    "patternProperties": jm_f_17,
    "propertyNames": jm_f_18,
}
json_model_8_may = {
    "minimum": jm_f_19,
    "maximum": jm_f_20,
}
json_model_9_may = {
    "$schema": jm_f_21,
    "$id": jm_f_22,
    "$comment": jm_f_23,
    "$vocabulary": jm_f_24,
    "title": jm_f_25,
    "default": jm_f_26,
    "examples": jm_f_27,
    "description": jm_f_28,
    "$anchor": jm_f_29,
    "$dynamicAnchor": jm_f_30,
    "deprecated": jm_f_31,
    "readOnly": jm_f_32,
    "writeOnly": jm_f_33,
    "$defs": jm_f_34,
    "id": jm_f_35,
    "definitions": jm_f_36,
}
json_model_10_must = {
    "type": jm_f_37,
}
json_model_10_may = {
    "$schema": jm_f_38,
    "$id": jm_f_39,
    "$comment": jm_f_40,
    "$vocabulary": jm_f_41,
    "title": jm_f_42,
    "default": jm_f_43,
    "examples": jm_f_44,
    "description": jm_f_45,
    "$anchor": jm_f_46,
    "$dynamicAnchor": jm_f_47,
    "deprecated": jm_f_48,
    "readOnly": jm_f_49,
    "writeOnly": jm_f_50,
    "$defs": jm_f_51,
    "id": jm_f_52,
    "definitions": jm_f_53,
    "pattern": jm_f_54,
    "minLength": jm_f_55,
    "maxLength": jm_f_56,
    "format": jm_f_57,
}
json_model_11_must = {
    "type": jm_f_58,
}
json_model_11_may = {
    "$schema": jm_f_59,
    "$id": jm_f_60,
    "$comment": jm_f_61,
    "$vocabulary": jm_f_62,
    "title": jm_f_63,
    "default": jm_f_64,
    "examples": jm_f_65,
    "description": jm_f_66,
    "$anchor": jm_f_67,
    "$dynamicAnchor": jm_f_68,
    "deprecated": jm_f_69,
    "readOnly": jm_f_70,
    "writeOnly": jm_f_71,
    "$defs": jm_f_72,
    "id": jm_f_73,
    "definitions": jm_f_74,
    "prefixItems": jm_f_75,
    "items": jm_f_76,
    "additionalItems": jm_f_77,
    "unevaluatedItems": jm_f_78,
    "minItems": jm_f_79,
    "maxItems": jm_f_80,
    "uniqueItems": jm_f_81,
}
json_model_12_must = {
    "type": jm_f_82,
}
json_model_12_may = {
    "$schema": jm_f_83,
    "$id": jm_f_84,
    "$comment": jm_f_85,
    "$vocabulary": jm_f_86,
    "title": jm_f_87,
    "default": jm_f_88,
    "examples": jm_f_89,
    "description": jm_f_90,
    "$anchor": jm_f_91,
    "$dynamicAnchor": jm_f_92,
    "deprecated": jm_f_93,
    "readOnly": jm_f_94,
    "writeOnly": jm_f_95,
    "$defs": jm_f_96,
    "id": jm_f_97,
    "definitions": jm_f_98,
    "properties": jm_f_99,
    "required": jm_f_100,
    "additionalProperties": jm_f_101,
    "unevaluatedProperties": jm_f_102,
    "minProperties": jm_f_103,
    "maxProperties": jm_f_104,
    "patternProperties": jm_f_105,
    "propertyNames": jm_f_106,
}
json_model_13_must = {
    "type": jm_f_107,
}
json_model_13_may = {
    "$schema": jm_f_108,
    "$id": jm_f_109,
    "$comment": jm_f_110,
    "$vocabulary": jm_f_111,
    "title": jm_f_112,
    "default": jm_f_113,
    "examples": jm_f_114,
    "description": jm_f_115,
    "$anchor": jm_f_116,
    "$dynamicAnchor": jm_f_117,
    "deprecated": jm_f_118,
    "readOnly": jm_f_119,
    "writeOnly": jm_f_120,
    "$defs": jm_f_121,
    "id": jm_f_122,
    "definitions": jm_f_123,
    "minimum": jm_f_124,
    "maximum": jm_f_125,
}
json_model_14_must = {
    "type": jm_f_126,
}
json_model_14_may = {
    "$schema": jm_f_127,
    "$id": jm_f_128,
    "$comment": jm_f_129,
    "$vocabulary": jm_f_130,
    "title": jm_f_131,
    "default": jm_f_132,
    "examples": jm_f_133,
    "description": jm_f_134,
    "$anchor": jm_f_135,
    "$dynamicAnchor": jm_f_136,
    "deprecated": jm_f_137,
    "readOnly": jm_f_138,
    "writeOnly": jm_f_139,
    "$defs": jm_f_140,
    "id": jm_f_141,
    "definitions": jm_f_142,
    "minimum": jm_f_143,
    "maximum": jm_f_144,
}
json_model_15_must = {
    "type": jm_f_145,
}
json_model_15_may = {
    "$schema": jm_f_146,
    "$id": jm_f_147,
    "$comment": jm_f_148,
    "$vocabulary": jm_f_149,
    "title": jm_f_150,
    "default": jm_f_151,
    "examples": jm_f_152,
    "description": jm_f_153,
    "$anchor": jm_f_154,
    "$dynamicAnchor": jm_f_155,
    "deprecated": jm_f_156,
    "readOnly": jm_f_157,
    "writeOnly": jm_f_158,
    "$defs": jm_f_159,
    "id": jm_f_160,
    "definitions": jm_f_161,
}
json_model_16_must = {
    "type": jm_f_162,
}
json_model_16_may = {
    "$schema": jm_f_163,
    "$id": jm_f_164,
    "$comment": jm_f_165,
    "$vocabulary": jm_f_166,
    "title": jm_f_167,
    "default": jm_f_168,
    "examples": jm_f_169,
    "description": jm_f_170,
    "$anchor": jm_f_171,
    "$dynamicAnchor": jm_f_172,
    "deprecated": jm_f_173,
    "readOnly": jm_f_174,
    "writeOnly": jm_f_175,
    "$defs": jm_f_176,
    "id": jm_f_177,
    "definitions": jm_f_178,
}
json_model_17_must = {
    "allOf": jm_f_179,
}
json_model_17_may = {
    "$schema": jm_f_180,
    "$id": jm_f_181,
    "$comment": jm_f_182,
    "$vocabulary": jm_f_183,
    "title": jm_f_184,
    "default": jm_f_185,
    "examples": jm_f_186,
    "description": jm_f_187,
    "$anchor": jm_f_188,
    "$dynamicAnchor": jm_f_189,
    "deprecated": jm_f_190,
    "readOnly": jm_f_191,
    "writeOnly": jm_f_192,
    "$defs": jm_f_193,
    "id": jm_f_194,
    "definitions": jm_f_195,
}
json_model_18_must = {
    "anyOf": jm_f_196,
}
json_model_18_may = {
    "$schema": jm_f_197,
    "$id": jm_f_198,
    "$comment": jm_f_199,
    "$vocabulary": jm_f_200,
    "title": jm_f_201,
    "default": jm_f_202,
    "examples": jm_f_203,
    "description": jm_f_204,
    "$anchor": jm_f_205,
    "$dynamicAnchor": jm_f_206,
    "deprecated": jm_f_207,
    "readOnly": jm_f_208,
    "writeOnly": jm_f_209,
    "$defs": jm_f_210,
    "id": jm_f_211,
    "definitions": jm_f_212,
}
json_model_19_must = {
    "oneOf": jm_f_213,
}
json_model_19_may = {
    "$schema": jm_f_214,
    "$id": jm_f_215,
    "$comment": jm_f_216,
    "$vocabulary": jm_f_217,
    "title": jm_f_218,
    "default": jm_f_219,
    "examples": jm_f_220,
    "description": jm_f_221,
    "$anchor": jm_f_222,
    "$dynamicAnchor": jm_f_223,
    "deprecated": jm_f_224,
    "readOnly": jm_f_225,
    "writeOnly": jm_f_226,
    "$defs": jm_f_227,
    "id": jm_f_228,
    "definitions": jm_f_229,
}
json_model_20_must = {
    "enum": jm_f_230,
}
json_model_20_may = {
    "$schema": jm_f_231,
    "$id": jm_f_232,
    "$comment": jm_f_233,
    "$vocabulary": jm_f_234,
    "title": jm_f_235,
    "default": jm_f_236,
    "examples": jm_f_237,
    "description": jm_f_238,
    "$anchor": jm_f_239,
    "$dynamicAnchor": jm_f_240,
    "deprecated": jm_f_241,
    "readOnly": jm_f_242,
    "writeOnly": jm_f_243,
    "$defs": jm_f_244,
    "id": jm_f_245,
    "definitions": jm_f_246,
}
json_model_21_must = {
    "const": jm_f_247,
}
json_model_21_may = {
    "$schema": jm_f_248,
    "$id": jm_f_249,
    "$comment": jm_f_250,
    "$vocabulary": jm_f_251,
    "title": jm_f_252,
    "default": jm_f_253,
    "examples": jm_f_254,
    "description": jm_f_255,
    "$anchor": jm_f_256,
    "$dynamicAnchor": jm_f_257,
    "deprecated": jm_f_258,
    "readOnly": jm_f_259,
    "writeOnly": jm_f_260,
    "$defs": jm_f_261,
    "id": jm_f_262,
    "definitions": jm_f_263,
}
json_model_22_must = {
    "$ref": jm_f_264,
}
json_model_22_may = {
    "$schema": jm_f_265,
    "$id": jm_f_266,
    "$comment": jm_f_267,
    "$vocabulary": jm_f_268,
    "title": jm_f_269,
    "default": jm_f_270,
    "examples": jm_f_271,
    "description": jm_f_272,
    "$anchor": jm_f_273,
    "$dynamicAnchor": jm_f_274,
    "deprecated": jm_f_275,
    "readOnly": jm_f_276,
    "writeOnly": jm_f_277,
    "$defs": jm_f_278,
    "id": jm_f_279,
    "definitions": jm_f_280,
}
json_model_23_must = {
    "$dynamicRef": jm_f_281,
}
json_model_23_may = {
    "$schema": jm_f_282,
    "$id": jm_f_283,
    "$comment": jm_f_284,
    "$vocabulary": jm_f_285,
    "title": jm_f_286,
    "default": jm_f_287,
    "examples": jm_f_288,
    "description": jm_f_289,
    "$anchor": jm_f_290,
    "$dynamicAnchor": jm_f_291,
    "deprecated": jm_f_292,
    "readOnly": jm_f_293,
    "writeOnly": jm_f_294,
    "$defs": jm_f_295,
    "id": jm_f_296,
    "definitions": jm_f_297,
}
jm_obj_0_must = {
    "$schema": jm_f_298,
}


