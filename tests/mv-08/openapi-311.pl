#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
sub _jm_f_6($$$);
sub _jm_obj_1($$$);
sub _jm_f_7($$$);
my %_jm_obj_0_map;
sub _jm_obj_0($$$);
sub json_model_2($$$);
sub _jm_obj_2($$$);
sub json_model_3($$$);
sub _jm_obj_3($$$);
sub json_model_4($$$);
sub _jm_obj_4($$$);
sub _jm_obj_5($$$);
sub json_model_5($$$);
sub _jm_obj_7($$$);
sub _jm_obj_6($$$);
sub json_model_6($$$);
sub _jm_obj_8($$$);
sub json_model_7($$$);
sub _jm_obj_10($$$);
sub _jm_f_8($$$);
sub _jm_obj_11($$$);
sub _jm_f_9($$$);
sub _jm_obj_12($$$);
sub _jm_f_10($$$);
sub _jm_obj_13($$$);
sub _jm_f_11($$$);
sub _jm_obj_14($$$);
sub _jm_f_12($$$);
sub _jm_obj_15($$$);
sub _jm_f_13($$$);
sub _jm_obj_16($$$);
sub _jm_f_14($$$);
sub _jm_obj_17($$$);
sub _jm_f_15($$$);
sub _jm_obj_18($$$);
sub _jm_f_16($$$);
sub _jm_obj_19($$$);
sub _jm_f_17($$$);
my %_jm_obj_9_map;
sub _jm_obj_9($$$);
sub json_model_8($$$);
sub _jm_obj_20($$$);
sub json_model_9($$$);
sub _jm_f_18($$$);
sub _jm_f_19($$$);
sub _jm_f_20($$$);
sub _jm_f_21($$$);
sub _jm_f_22($$$);
sub _jm_f_23($$$);
sub _jm_f_24($$$);
sub _jm_f_25($$$);
sub _jm_f_26($$$);
sub _jm_f_27($$$);
sub _jm_f_28($$$);
sub _jm_f_29($$$);
sub _jm_f_30($$$);
my %_jm_obj_21_map;
sub _jm_obj_21($$$);
sub json_model_10($$$);
sub _jm_obj_23($$$);
sub _jm_f_31($$$);
sub _jm_f_32($$$);
sub _jm_f_33($$$);
sub _jm_f_34($$$);
sub _jm_f_35($$$);
sub _jm_f_36($$$);
sub _jm_f_37($$$);
sub _jm_f_38($$$);
sub _jm_f_39($$$);
sub _jm_f_40($$$);
sub _jm_f_41($$$);
sub _jm_f_42($$$);
my %_jm_obj_22_map;
sub _jm_obj_22($$$);
sub json_model_11($$$);
sub _jm_obj_24($$$);
sub json_model_12($$$);
sub _jm_obj_25($$$);
sub json_model_13($$$);
my %_jm_cst_0;
sub _jm_obj_26($$$);
sub json_model_14($$$);
my %_jm_cst_1;
sub json_model_15($$$);
sub _jm_f_43($$$);
sub _jm_f_44($$$);
sub _jm_obj_28($$$);
sub _jm_f_45($$$);
sub _jm_f_46($$$);
sub _jm_f_47($$$);
sub _jm_f_48($$$);
my %_jm_obj_27_map;
sub _jm_obj_27($$$);
sub json_model_16($$$);
sub _jm_obj_30($$$);
sub _jm_obj_29($$$);
sub json_model_17($$$);
my %_jm_cst_2;
sub _jm_f_49($$$);
sub _jm_f_50($$$);
sub _jm_f_51($$$);
sub _jm_f_52($$$);
sub _jm_f_53($$$);
sub _jm_obj_32($$$);
sub _jm_f_54($$$);
sub _jm_f_55($$$);
sub _jm_f_56($$$);
sub _jm_f_57($$$);
sub _jm_f_58($$$);
my %_jm_obj_31_map;
sub _jm_obj_31($$$);
my %_jm_cst_3;
sub _jm_obj_34($$$);
sub _jm_obj_33($$$);
my %_jm_map_0;
sub json_model_18($$$);
sub _jm_obj_36($$$);
sub _jm_obj_35($$$);
sub json_model_19($$$);
sub _jm_obj_38($$$);
sub _jm_obj_39($$$);
sub _jm_obj_37($$$);
sub json_model_20($$$);
sub _jm_obj_41($$$);
sub _jm_obj_40($$$);
sub json_model_21($$$);
sub _jm_obj_42($$$);
sub json_model_22($$$);
sub _jm_obj_44($$$);
sub _jm_obj_45($$$);
sub _jm_obj_46($$$);
sub _jm_obj_43($$$);
sub json_model_23($$$);
sub _jm_obj_47($$$);
sub json_model_24($$$);
sub _jm_obj_48($$$);
sub json_model_25($$$);
sub json_model_26($$$);
sub _jm_obj_50($$$);
sub _jm_obj_49($$$);
sub _jm_obj_52($$$);
sub _jm_obj_51($$$);
sub json_model_27($$$);
sub _jm_obj_54($$$);
sub _jm_obj_53($$$);
sub _jm_f_59($$$);
sub _jm_f_60($$$);
sub _jm_f_61($$$);
sub _jm_f_62($$$);
sub _jm_f_63($$$);
sub _jm_obj_56($$$);
sub _jm_f_64($$$);
sub _jm_f_65($$$);
sub _jm_f_66($$$);
sub _jm_f_67($$$);
sub _jm_f_68($$$);
my %_jm_obj_55_map;
sub _jm_obj_55($$$);
sub json_model_28($$$);
sub _jm_obj_57($$$);
sub json_model_29($$$);
sub _jm_obj_58($$$);
sub json_model_30($$$);
sub json_model_45($$$);
sub _jm_f_69($$$);
sub _jm_f_70($$$);
sub _jm_obj_60($$$);
sub _jm_f_71($$$);
sub _jm_f_72($$$);
sub _jm_f_73($$$);
sub _jm_f_74($$$);
sub _jm_f_75($$$);
sub _jm_f_76($$$);
sub _jm_obj_61($$$);
sub _jm_f_77($$$);
sub _jm_f_78($$$);
sub _jm_f_79($$$);
sub _jm_f_80($$$);
sub _jm_f_81($$$);
sub _jm_f_82($$$);
sub _jm_f_83($$$);
sub _jm_f_84($$$);
sub _jm_f_85($$$);
sub _jm_f_86($$$);
sub _jm_obj_62($$$);
sub _jm_f_87($$$);
sub _jm_obj_63($$$);
sub _jm_f_88($$$);
sub _jm_f_89($$$);
sub _jm_f_90($$$);
sub _jm_f_91($$$);
sub _jm_f_92($$$);
sub _jm_f_93($$$);
sub _jm_f_94($$$);
sub _jm_f_95($$$);
sub _jm_f_96($$$);
sub _jm_f_97($$$);
sub _jm_f_98($$$);
sub _jm_f_99($$$);
sub _jm_f_100($$$);
sub _jm_f_101($$$);
sub _jm_f_102($$$);
sub _jm_f_103($$$);
sub _jm_f_104($$$);
sub _jm_f_105($$$);
sub _jm_f_106($$$);
sub _jm_f_107($$$);
sub _jm_f_108($$$);
sub _jm_f_109($$$);
sub _jm_f_110($$$);
sub _jm_f_111($$$);
sub _jm_f_112($$$);
sub _jm_f_113($$$);
sub _jm_f_114($$$);
sub _jm_f_115($$$);
sub _jm_obj_64($$$);
sub _jm_f_116($$$);
sub _jm_f_117($$$);
sub _jm_obj_65($$$);
sub _jm_f_118($$$);
sub _jm_f_119($$$);
sub _jm_f_120($$$);
sub _jm_f_121($$$);
sub _jm_f_122($$$);
sub _jm_f_123($$$);
sub _jm_f_124($$$);
sub _jm_f_125($$$);
sub _jm_f_126($$$);
sub _jm_f_127($$$);
sub _jm_f_128($$$);
sub _jm_f_129($$$);
my %_jm_obj_59_map;
sub _jm_obj_59($$$);
sub json_model_32($$$);
sub _jm_obj_67($$$);
sub _jm_obj_66($$$);
sub json_model_33($$$);
sub _jm_obj_68($$$);
sub json_model_34($$$);
my %_jm_cst_4;
sub _jm_obj_69($$$);
sub json_model_35($$$);
sub _jm_obj_70($$$);
sub json_model_36($$$);
sub _jm_obj_71($$$);
sub json_model_37($$$);
sub _jm_obj_72($$$);
sub json_model_38($$$);
sub _jm_obj_73($$$);
sub json_model_39($$$);
my %_jm_cst_5;
sub _jm_obj_74($$$);
sub _jm_obj_75($$$);
sub _jm_obj_76($$$);
sub _jm_obj_77($$$);
sub _jm_obj_78($$$);
sub _jm_obj_79($$$);
my %_jm_map_1;
sub json_model_40($$$);
sub _jm_obj_80($$$);
sub json_model_41($$$);
sub _jm_obj_82($$$);
sub _jm_obj_81($$$);
sub json_model_42($$$);
sub _jm_obj_83($$$);
sub json_model_43($$$);
sub _jm_obj_84($$$);
sub json_model_44($$$);
sub json_model_1($$$);
sub json_model_46($$$);
my %_jm_cst_6;
sub json_model_52($$$);
sub json_model_53($$$);
sub json_model_54($$$);
sub json_model_55($$$);
sub json_model_57($$$);
sub json_model_60($$$);
sub _jm_f_130($$$);
sub _jm_f_131($$$);
sub _jm_obj_86($$$);
sub _jm_f_132($$$);
sub _jm_f_133($$$);
sub _jm_f_134($$$);
sub _jm_f_135($$$);
sub _jm_f_136($$$);
sub _jm_f_137($$$);
sub _jm_obj_87($$$);
sub _jm_f_138($$$);
sub _jm_f_139($$$);
sub _jm_f_140($$$);
sub _jm_f_141($$$);
sub _jm_f_142($$$);
sub _jm_f_143($$$);
sub _jm_f_144($$$);
sub _jm_f_145($$$);
sub _jm_f_146($$$);
sub _jm_f_147($$$);
sub _jm_obj_88($$$);
sub _jm_f_148($$$);
sub _jm_obj_89($$$);
sub _jm_f_149($$$);
sub _jm_f_150($$$);
sub _jm_f_151($$$);
sub _jm_f_152($$$);
sub _jm_f_153($$$);
sub _jm_f_154($$$);
sub _jm_f_155($$$);
sub _jm_f_156($$$);
sub _jm_f_157($$$);
sub _jm_f_158($$$);
sub _jm_f_159($$$);
sub _jm_f_160($$$);
sub _jm_f_161($$$);
sub _jm_f_162($$$);
sub _jm_f_163($$$);
sub _jm_f_164($$$);
sub _jm_f_165($$$);
sub _jm_f_166($$$);
sub _jm_f_167($$$);
sub _jm_f_168($$$);
sub _jm_f_169($$$);
sub _jm_f_170($$$);
sub _jm_f_171($$$);
sub _jm_f_172($$$);
sub _jm_f_173($$$);
sub _jm_obj_90($$$);
sub _jm_f_174($$$);
sub _jm_f_175($$$);
sub _jm_obj_91($$$);
sub _jm_f_176($$$);
sub _jm_f_177($$$);
sub _jm_f_178($$$);
sub _jm_f_179($$$);
sub _jm_f_180($$$);
sub _jm_f_181($$$);
sub _jm_f_182($$$);
sub _jm_f_183($$$);
sub _jm_f_184($$$);
sub _jm_f_185($$$);
sub _jm_f_186($$$);
my %_jm_obj_85_map;
sub _jm_obj_85($$$);
sub json_model_59($$$);
my %check_model_map;

sub _jm_re_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^3\.1\.\d+(-.+)?$/;
    return $res;
}

# check _jm_obj_0_map_components (.'$OpenAPI'.components)
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OpenAPI'.components
    $res = _jm_obj_9($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_externalDocs (.'$OpenAPI'.externalDocs)
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OpenAPI'.externalDocs
    $res = _jm_obj_24($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_jsonSchemaDialect (.'$OpenAPI'.jsonSchemaDialect)
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OpenAPI'.jsonSchemaDialect
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_paths (.'$OpenAPI'.paths)
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OpenAPI'.paths
    $res = _jm_obj_20($val, $path, $rep);
    return $res;
}

# check _jm_obj_0_map_security (.'$OpenAPI'.security)
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OpenAPI'.security
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$OpenAPI'.security.0
            $res = _jm_obj_83($arr_0_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_0_map_servers (.'$OpenAPI'.servers)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OpenAPI'.servers
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_1_idx (0 .. $#$val)
        {
            my $arr_1_item = $$val[$arr_1_idx];
            # .'$OpenAPI'.servers.0
            $res = _jm_obj_6($arr_1_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_0_map_tags (.'$OpenAPI'.tags)
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OpenAPI'.tags
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_2_idx (0 .. $#$val)
        {
            my $arr_2_item = $$val[$arr_2_idx];
            # .'$OpenAPI'.tags.0
            $res = _jm_obj_57($arr_2_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# object .'$OpenAPI'.webhooks
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$OpenAPI'.webhooks.''
        $res = _jm_obj_21($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_0_map_webhooks (.'$OpenAPI'.webhooks)
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OpenAPI'.webhooks
    $res = _jm_obj_1($val, $path, $rep);
    return $res;
}


# object .'$OpenAPI'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'openapi')
        {
            # handle must openapi property
            $must_count++;
            # .'$OpenAPI'.openapi
            # "/^3\\.1\\.\\d+(-.+)?$/"
            $res = jm_is_string($pval) && _jm_re_0($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'info')
        {
            # handle must info property
            $must_count++;
            # .'$OpenAPI'.info
            $res = _jm_obj_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_0_map{$prop}))
        {
            # handle 8 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$OpenAPI'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# check $OpenAPI (.'$OpenAPI')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OpenAPI'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# object .'$Info'
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'title')
        {
            # handle must title property
            $must_count++;
            # .'$Info'.title
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'version')
        {
            # handle must version property
            $must_count++;
            # .'$Info'.version
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'summary')
        {
            # handle may summary property
            # .'$Info'.summary
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$Info'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'termsOfService')
        {
            # handle may termsOfService property
            # .'$Info'.termsOfService
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'contact')
        {
            # handle may contact property
            # .'$Info'.contact
            $res = _jm_obj_3($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'license')
        {
            # handle may license property
            # .'$Info'.license
            $res = json_model_5($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Info'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# check $Info (.'$Info')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Info'
    $res = _jm_obj_2($val, $path, $rep);
    return $res;
}

# object .'$Contact'
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$Contact'.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'url')
        {
            # handle may url property
            # .'$Contact'.url
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'email')
        {
            # handle may email property
            # .'$Contact'.email
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Contact'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Contact (.'$Contact')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Contact'
    $res = _jm_obj_3($val, $path, $rep);
    return $res;
}

sub _jm_re_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^x\-.*$/;
    return $res;
}

# object .'$License'.'|'.1
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .'$License'.'|'.1.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'url')
        {
            # handle must url property
            $must_count++;
            # .'$License'.'|'.1.url
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$License'.'|'.1.'/^x\\-.*$/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# object .'$License'.'|'.0
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .'$License'.'|'.0.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'identifier')
        {
            # handle must identifier property
            $must_count++;
            # .'$License'.'|'.0.identifier
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$License'.'|'.0.'/^x\\-.*$/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# check $License (.'$License')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$License'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$License'.'|'.0
        $res = _jm_obj_5($val, $path, $rep);
        if (! $res)
        {
            # .'$License'.'|'.1
            $res = _jm_obj_4($val, $path, $rep);
        }
    }
    return $res;
}

# object .'$Server'.variables
sub _jm_obj_7($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Server'.variables.''
        $res = _jm_obj_8($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Server'
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'url')
        {
            # handle must url property
            $must_count++;
            # .'$Server'.url
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$Server'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'variables')
        {
            # handle may variables property
            # .'$Server'.variables
            $res = _jm_obj_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Server'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Server (.'$Server')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Server'
    $res = _jm_obj_6($val, $path, $rep);
    return $res;
}

# object .'$ServerVariable'
sub _jm_obj_8($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'default')
        {
            # handle must default property
            $must_count++;
            # .'$ServerVariable'.default
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'enum')
        {
            # handle may enum property
            # .'$ServerVariable'.enum
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_3_idx (0 .. $#$pval)
                {
                    my $arr_3_item = $$pval[$arr_3_idx];
                    # .'$ServerVariable'.enum.0
                    $res = jm_is_string($arr_3_item);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$ServerVariable'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$ServerVariable'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $ServerVariable (.'$ServerVariable')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ServerVariable'
    $res = _jm_obj_8($val, $path, $rep);
    return $res;
}

# object .'$Components'.callbacks
sub _jm_obj_10($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Components'.callbacks.''
        # .'$Components'.callbacks.''.'|'.0
        $res = _jm_obj_47($pval, undef, $rep);
        if (! $res)
        {
            # .'$Components'.callbacks.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_callbacks (.'$Components'.callbacks)
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Components'.callbacks
    $res = _jm_obj_10($val, $path, $rep);
    return $res;
}

# object .'$Components'.examples
sub _jm_obj_11($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Components'.examples.''
        # .'$Components'.examples.''.'|'.0
        $res = _jm_obj_48($pval, undef, $rep);
        if (! $res)
        {
            # .'$Components'.examples.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_examples (.'$Components'.examples)
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Components'.examples
    $res = _jm_obj_11($val, $path, $rep);
    return $res;
}

# object .'$Components'.headers
sub _jm_obj_12($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Components'.headers.''
        # .'$Components'.headers.''.'|'.0
        $res = json_model_28($pval, undef, $rep);
        if (! $res)
        {
            # .'$Components'.headers.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_headers (.'$Components'.headers)
sub _jm_f_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Components'.headers
    $res = _jm_obj_12($val, $path, $rep);
    return $res;
}

# object .'$Components'.links
sub _jm_obj_13($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Components'.links.''
        # .'$Components'.links.''.'|'.0
        $res = json_model_27($pval, undef, $rep);
        if (! $res)
        {
            # .'$Components'.links.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_links (.'$Components'.links)
sub _jm_f_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Components'.links
    $res = _jm_obj_13($val, $path, $rep);
    return $res;
}

# object .'$Components'.parameters
sub _jm_obj_14($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Components'.parameters.''
        # .'$Components'.parameters.''.'|'.0
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            # .'$Components'.parameters.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_parameters (.'$Components'.parameters)
sub _jm_f_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Components'.parameters
    $res = _jm_obj_14($val, $path, $rep);
    return $res;
}

# object .'$Components'.pathItems
sub _jm_obj_15($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Components'.pathItems.''
        # .'$Components'.pathItems.''.'|'.0
        $res = _jm_obj_21($pval, undef, $rep);
        if (! $res)
        {
            # .'$Components'.pathItems.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_pathItems (.'$Components'.pathItems)
sub _jm_f_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Components'.pathItems
    $res = _jm_obj_15($val, $path, $rep);
    return $res;
}

# object .'$Components'.requestBodies
sub _jm_obj_16($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Components'.requestBodies.''
        # .'$Components'.requestBodies.''.'|'.0
        $res = _jm_obj_35($pval, undef, $rep);
        if (! $res)
        {
            # .'$Components'.requestBodies.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_requestBodies (.'$Components'.requestBodies)
sub _jm_f_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Components'.requestBodies
    $res = _jm_obj_16($val, $path, $rep);
    return $res;
}

# object .'$Components'.responses
sub _jm_obj_17($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Components'.responses.''
        # .'$Components'.responses.''.'|'.0
        $res = _jm_obj_43($pval, undef, $rep);
        if (! $res)
        {
            # .'$Components'.responses.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_responses (.'$Components'.responses)
sub _jm_f_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Components'.responses
    $res = _jm_obj_17($val, $path, $rep);
    return $res;
}

# object .'$Components'.schemas
sub _jm_obj_18($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Components'.schemas.''
        $res = _jm_obj_59($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_schemas (.'$Components'.schemas)
sub _jm_f_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Components'.schemas
    $res = _jm_obj_18($val, $path, $rep);
    return $res;
}

# object .'$Components'.securitySchemes
sub _jm_obj_19($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Components'.securitySchemes.''
        # .'$Components'.securitySchemes.''.'|'.0
        $res = json_model_40($pval, undef, $rep);
        if (! $res)
        {
            # .'$Components'.securitySchemes.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_securitySchemes (.'$Components'.securitySchemes)
sub _jm_f_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Components'.securitySchemes
    $res = _jm_obj_19($val, $path, $rep);
    return $res;
}


# object .'$Components'
sub _jm_obj_9($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_9_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Components'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Components (.'$Components')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Components'
    $res = _jm_obj_9($val, $path, $rep);
    return $res;
}

# object .'$Paths'
sub _jm_obj_20($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_starts_with($prop, '/'))
        {
            # handle 2 re props
            # .'$Paths'.'/^//'
            $res = _jm_obj_21($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 2 re props
            # .'$Paths'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Paths (.'$Paths')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Paths'
    $res = _jm_obj_20($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_$ref (.'$PathItem'.'$ref')
sub _jm_f_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'.'$ref'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_delete (.'$PathItem'.delete)
sub _jm_f_19($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'.delete
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_description (.'$PathItem'.description)
sub _jm_f_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_21_map_get (.'$PathItem'.get)
sub _jm_f_21($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'.get
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_head (.'$PathItem'.head)
sub _jm_f_22($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'.head
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_options (.'$PathItem'.options)
sub _jm_f_23($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'.options
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_parameters (.'$PathItem'.parameters)
sub _jm_f_24($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'.parameters
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_4_idx (0 .. $#$val)
        {
            my $arr_4_item = $$val[$arr_4_idx];
            # .'$PathItem'.parameters.0
            # .'$PathItem'.parameters.0.'|'.0
            $res = json_model_18($arr_4_item, undef, $rep);
            if (! $res)
            {
                # .'$PathItem'.parameters.0.'|'.1
                $res = _jm_obj_58($arr_4_item, undef, $rep);
            }
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_21_map_patch (.'$PathItem'.patch)
sub _jm_f_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'.patch
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_post (.'$PathItem'.post)
sub _jm_f_26($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'.post
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_put (.'$PathItem'.put)
sub _jm_f_27($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'.put
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}

# check _jm_obj_21_map_servers (.'$PathItem'.servers)
sub _jm_f_28($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'.servers
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_5_idx (0 .. $#$val)
        {
            my $arr_5_item = $$val[$arr_5_idx];
            # .'$PathItem'.servers.0
            $res = _jm_obj_22($arr_5_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_21_map_summary (.'$PathItem'.summary)
sub _jm_f_29($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'.summary
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_21_map_trace (.'$PathItem'.trace)
sub _jm_f_30($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'.trace
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}


# object .'$PathItem'
sub _jm_obj_21($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_21_map{$prop}))
        {
            # handle 13 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$PathItem'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $PathItem (.'$PathItem')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PathItem'
    $res = _jm_obj_21($val, $path, $rep);
    return $res;
}

# object .'$Operation'.callbacks
sub _jm_obj_23($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Operation'.callbacks.''
        # .'$Operation'.callbacks.''.'|'.0
        $res = _jm_obj_47($pval, undef, $rep);
        if (! $res)
        {
            # .'$Operation'.callbacks.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_22_map_callbacks (.'$Operation'.callbacks)
sub _jm_f_31($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Operation'.callbacks
    $res = _jm_obj_23($val, $path, $rep);
    return $res;
}

# check _jm_obj_22_map_deprecated (.'$Operation'.deprecated)
sub _jm_f_32($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Operation'.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_22_map_description (.'$Operation'.description)
sub _jm_f_33($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Operation'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_22_map_externalDocs (.'$Operation'.externalDocs)
sub _jm_f_34($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Operation'.externalDocs
    $res = _jm_obj_24($val, $path, $rep);
    return $res;
}

# check _jm_obj_22_map_operationId (.'$Operation'.operationId)
sub _jm_f_35($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Operation'.operationId
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_22_map_parameters (.'$Operation'.parameters)
sub _jm_f_36($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Operation'.parameters
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_6_idx (0 .. $#$val)
        {
            my $arr_6_item = $$val[$arr_6_idx];
            # .'$Operation'.parameters.0
            # .'$Operation'.parameters.0.'|'.0
            $res = json_model_18($arr_6_item, undef, $rep);
            if (! $res)
            {
                # .'$Operation'.parameters.0.'|'.1
                $res = _jm_obj_58($arr_6_item, undef, $rep);
            }
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_22_map_requestBody (.'$Operation'.requestBody)
sub _jm_f_37($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Operation'.requestBody
    # .'$Operation'.requestBody.'|'.0
    $res = _jm_obj_35($val, $path, $rep);
    if (! $res)
    {
        # .'$Operation'.requestBody.'|'.1
        $res = _jm_obj_58($val, $path, $rep);
    }
    return $res;
}

# check _jm_obj_22_map_responses (.'$Operation'.responses)
sub _jm_f_38($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Operation'.responses
    $res = _jm_obj_42($val, $path, $rep);
    return $res;
}

# check _jm_obj_22_map_security (.'$Operation'.security)
sub _jm_f_39($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Operation'.security
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_7_idx (0 .. $#$val)
        {
            my $arr_7_item = $$val[$arr_7_idx];
            # .'$Operation'.security.0
            $res = _jm_obj_83($arr_7_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_22_map_servers (.'$Operation'.servers)
sub _jm_f_40($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Operation'.servers
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_8_idx (0 .. $#$val)
        {
            my $arr_8_item = $$val[$arr_8_idx];
            # .'$Operation'.servers.0
            $res = _jm_obj_6($arr_8_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_22_map_summary (.'$Operation'.summary)
sub _jm_f_41($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Operation'.summary
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_22_map_tags (.'$Operation'.tags)
sub _jm_f_42($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Operation'.tags
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_9_idx (0 .. $#$val)
        {
            my $arr_9_item = $$val[$arr_9_idx];
            # .'$Operation'.tags.0
            $res = jm_is_string($arr_9_item);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}


# object .'$Operation'
sub _jm_obj_22($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_22_map{$prop}))
        {
            # handle 12 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Operation'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Operation (.'$Operation')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Operation'
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}

# object .'$ExternalDocumentation'
sub _jm_obj_24($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'url')
        {
            # handle must url property
            $must_count++;
            # .'$ExternalDocumentation'.url
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$ExternalDocumentation'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$ExternalDocumentation'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $ExternalDocumentation (.'$ExternalDocumentation')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ExternalDocumentation'
    $res = _jm_obj_24($val, $path, $rep);
    return $res;
}

# object .'$parameterShare'
sub _jm_obj_25($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'description')
        {
            # handle may description property
            # .'$parameterShare'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'required')
        {
            # handle may required property
            # .'$parameterShare'.required
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'deprecated')
        {
            # handle may deprecated property
            # .'$parameterShare'.deprecated
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'allowEmptyValue')
        {
            # handle may allowEmptyValue property
            # .'$parameterShare'.allowEmptyValue
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$parameterShare'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $parameterShare (.'$parameterShare')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$parameterShare'
    $res = _jm_obj_25($val, $path, $rep);
    return $res;
}


# object .'$commonParameter'
sub _jm_obj_26($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .'$commonParameter'.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'in')
        {
            # handle must in property
            $must_count++;
            # .'$commonParameter'.in
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_0{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$commonParameter'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'required')
        {
            # handle may required property
            # .'$commonParameter'.required
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'deprecated')
        {
            # handle may deprecated property
            # .'$commonParameter'.deprecated
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'allowEmptyValue')
        {
            # handle may allowEmptyValue property
            # .'$commonParameter'.allowEmptyValue
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$commonParameter'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# check $commonParameter (.'$commonParameter')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$commonParameter'
    $res = _jm_obj_26($val, $path, $rep);
    return $res;
}


# check $Style (.'$Style')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # serialization styles
    # .'$Style'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_1{$val};
    return $res;
}

# check _jm_obj_27_map_allowReserved (.'$parameterSchemaOnly'.allowReserved)
sub _jm_f_43($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$parameterSchemaOnly'.allowReserved
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_27_map_example (.'$parameterSchemaOnly'.example)
sub _jm_f_44($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$parameterSchemaOnly'.example
    $res = 1;
    return $res;
}

# object .'$parameterSchemaOnly'.examples
sub _jm_obj_28($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$parameterSchemaOnly'.examples.''
        # .'$parameterSchemaOnly'.examples.''.'|'.0
        $res = _jm_obj_48($pval, undef, $rep);
        if (! $res)
        {
            # .'$parameterSchemaOnly'.examples.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_27_map_examples (.'$parameterSchemaOnly'.examples)
sub _jm_f_45($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$parameterSchemaOnly'.examples
    $res = _jm_obj_28($val, $path, $rep);
    return $res;
}

# check _jm_obj_27_map_explode (.'$parameterSchemaOnly'.explode)
sub _jm_f_46($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$parameterSchemaOnly'.explode
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_27_map_schema (.'$parameterSchemaOnly'.schema)
sub _jm_f_47($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$parameterSchemaOnly'.schema
    $res = _jm_obj_59($val, $path, $rep);
    return $res;
}

# check _jm_obj_27_map_style (.'$parameterSchemaOnly'.style)
sub _jm_f_48($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$parameterSchemaOnly'.style
    $res = json_model_15($val, $path, $rep);
    return $res;
}


# object .'$parameterSchemaOnly'
sub _jm_obj_27($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_27_map{$prop}))
        {
            # handle 6 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $parameterSchemaOnly (.'$parameterSchemaOnly')
sub json_model_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$parameterSchemaOnly'
    $res = _jm_obj_27($val, $path, $rep);
    return $res;
}

# object .'$parameterContentOnly'.content
sub _jm_obj_30($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$parameterContentOnly'.content.''
        $res = _jm_obj_37($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$parameterContentOnly'
sub _jm_obj_29($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'content')
        {
            # handle may content property
            # .'$parameterContentOnly'.content
            $res = _jm_obj_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $parameterContentOnly (.'$parameterContentOnly')
sub json_model_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$parameterContentOnly'
    $res = _jm_obj_29($val, $path, $rep);
    return $res;
}


# check _jm_obj_31_map_allowEmptyValue (.'$Parameter'.'|'.0.allowEmptyValue)
sub _jm_f_49($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Parameter'.'|'.0.allowEmptyValue
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_31_map_allowReserved (.'$Parameter'.'|'.0.allowReserved)
sub _jm_f_50($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Parameter'.'|'.0.allowReserved
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_31_map_deprecated (.'$Parameter'.'|'.0.deprecated)
sub _jm_f_51($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Parameter'.'|'.0.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_31_map_description (.'$Parameter'.'|'.0.description)
sub _jm_f_52($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Parameter'.'|'.0.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_31_map_example (.'$Parameter'.'|'.0.example)
sub _jm_f_53($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Parameter'.'|'.0.example
    $res = 1;
    return $res;
}

# object .'$Parameter'.'|'.0.examples
sub _jm_obj_32($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Parameter'.'|'.0.examples.''
        # .'$Parameter'.'|'.0.examples.''.'|'.0
        $res = _jm_obj_48($pval, undef, $rep);
        if (! $res)
        {
            # .'$Parameter'.'|'.0.examples.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_31_map_examples (.'$Parameter'.'|'.0.examples)
sub _jm_f_54($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Parameter'.'|'.0.examples
    $res = _jm_obj_32($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_explode (.'$Parameter'.'|'.0.explode)
sub _jm_f_55($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Parameter'.'|'.0.explode
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_31_map_required (.'$Parameter'.'|'.0.required)
sub _jm_f_56($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Parameter'.'|'.0.required
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_31_map_schema (.'$Parameter'.'|'.0.schema)
sub _jm_f_57($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Parameter'.'|'.0.schema
    $res = _jm_obj_59($val, $path, $rep);
    return $res;
}

# check _jm_obj_31_map_style (.'$Parameter'.'|'.0.style)
sub _jm_f_58($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Parameter'.'|'.0.style
    $res = json_model_15($val, $path, $rep);
    return $res;
}


# object .'$Parameter'.'|'.0
sub _jm_obj_31($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .'$Parameter'.'|'.0.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'in')
        {
            # handle must in property
            $must_count++;
            # .'$Parameter'.'|'.0.in
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_2{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_31_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Parameter'.'|'.0.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}


# object .'$Parameter'.'|'.1.content
sub _jm_obj_34($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Parameter'.'|'.1.content.''
        $res = _jm_obj_37($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Parameter'.'|'.1
sub _jm_obj_33($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .'$Parameter'.'|'.1.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'in')
        {
            # handle must in property
            $must_count++;
            # .'$Parameter'.'|'.1.in
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_3{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$Parameter'.'|'.1.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'required')
        {
            # handle may required property
            # .'$Parameter'.'|'.1.required
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'deprecated')
        {
            # handle may deprecated property
            # .'$Parameter'.'|'.1.deprecated
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'allowEmptyValue')
        {
            # handle may allowEmptyValue property
            # .'$Parameter'.'|'.1.allowEmptyValue
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'content')
        {
            # handle may content property
            # .'$Parameter'.'|'.1.content
            $res = _jm_obj_34($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Parameter'.'|'.1.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}


# check $Parameter (.'$Parameter')
sub json_model_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Parameter'
    my $iso_0 = jm_is_object($val);
    $res = $iso_0;
    if ($res)
    {
        if (exists $$val{'in'})
        {
            my $tag_0 = $$val{'in'};
            my $fun_0 = $_jm_map_0{$tag_0};
            if (defined($fun_0))
            {
                $res = &$fun_0($val, $path, $rep);
            }
            else
            {
                $res = 0;
            }
        }
        else
        {
            $res = 0;
        }
    }
    return $res;
}

# object .'$RequestBody'.content
sub _jm_obj_36($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$RequestBody'.content.''
        $res = _jm_obj_37($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RequestBody'
sub _jm_obj_35($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'description')
        {
            # handle may description property
            # .'$RequestBody'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'content')
        {
            # handle may content property
            # .'$RequestBody'.content
            $res = _jm_obj_36($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'required')
        {
            # handle may required property
            # .'$RequestBody'.required
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$RequestBody'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $RequestBody (.'$RequestBody')
sub json_model_19($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$RequestBody'
    $res = _jm_obj_35($val, $path, $rep);
    return $res;
}

# object .'$MediaType'.examples
sub _jm_obj_38($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$MediaType'.examples.''
        # .'$MediaType'.examples.''.'|'.0
        $res = _jm_obj_48($pval, undef, $rep);
        if (! $res)
        {
            # .'$MediaType'.examples.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$MediaType'.encoding
sub _jm_obj_39($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$MediaType'.encoding.''
        $res = _jm_obj_40($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$MediaType'
sub _jm_obj_37($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'schema')
        {
            # handle may schema property
            # .'$MediaType'.schema
            $res = _jm_obj_59($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'example')
        {
            # handle may example property
            # .'$MediaType'.example
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'examples')
        {
            # handle may examples property
            # .'$MediaType'.examples
            $res = _jm_obj_38($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'encoding')
        {
            # handle may encoding property
            # .'$MediaType'.encoding
            $res = _jm_obj_39($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$MediaType'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $MediaType (.'$MediaType')
sub json_model_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$MediaType'
    $res = _jm_obj_37($val, $path, $rep);
    return $res;
}

# object .'$Encoding'.headers
sub _jm_obj_41($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Encoding'.headers.''
        # .'$Encoding'.headers.''.'|'.0
        $res = json_model_28($pval, undef, $rep);
        if (! $res)
        {
            # .'$Encoding'.headers.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Encoding'
sub _jm_obj_40($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'contentType')
        {
            # handle may contentType property
            # .'$Encoding'.contentType
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'headers')
        {
            # handle may headers property
            # .'$Encoding'.headers
            $res = _jm_obj_41($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'style')
        {
            # handle may style property
            # .'$Encoding'.style
            $res = json_model_15($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'explode')
        {
            # handle may explode property
            # .'$Encoding'.explode
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'allowReserved')
        {
            # handle may allowReserved property
            # .'$Encoding'.allowReserved
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Encoding'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Encoding (.'$Encoding')
sub json_model_21($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Encoding'
    $res = _jm_obj_40($val, $path, $rep);
    return $res;
}

sub _jm_re_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[1-5](\d\d|XX)$/;
    return $res;
}

# object .'$Responses'
sub _jm_obj_42($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'default')
        {
            # handle may default property
            # .'$Responses'.default
            # .'$Responses'.default.'|'.0
            $res = _jm_obj_43($pval, undef, $rep);
            if (! $res)
            {
                # .'$Responses'.default.'|'.1
                $res = _jm_obj_58($pval, undef, $rep);
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_2($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Responses'.'/^[1-5](\\d\\d|XX)$/'
            # .'$Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.0
            $res = _jm_obj_43($pval, undef, $rep);
            if (! $res)
            {
                # .'$Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.1
                $res = _jm_obj_58($pval, undef, $rep);
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 2 re props
            # .'$Responses'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Responses (.'$Responses')
sub json_model_22($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Responses'
    $res = _jm_obj_42($val, $path, $rep);
    return $res;
}

# object .'$Response'.headers
sub _jm_obj_44($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Response'.headers.''
        # .'$Response'.headers.''.'|'.0
        $res = json_model_28($pval, undef, $rep);
        if (! $res)
        {
            # .'$Response'.headers.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Response'.content
sub _jm_obj_45($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Response'.content.''
        $res = _jm_obj_37($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Response'.links
sub _jm_obj_46($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Response'.links.''
        # .'$Response'.links.''.'|'.0
        $res = json_model_27($pval, undef, $rep);
        if (! $res)
        {
            # .'$Response'.links.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Response'
sub _jm_obj_43($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'description')
        {
            # handle may description property
            # .'$Response'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'headers')
        {
            # handle may headers property
            # .'$Response'.headers
            $res = _jm_obj_44($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'content')
        {
            # handle may content property
            # .'$Response'.content
            $res = _jm_obj_45($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'links')
        {
            # handle may links property
            # .'$Response'.links
            $res = _jm_obj_46($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Response'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Response (.'$Response')
sub json_model_23($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Response'
    $res = _jm_obj_43($val, $path, $rep);
    return $res;
}

# object .'$Callback'
sub _jm_obj_47($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (json_model_26($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Callback'.'$Expression'
            # .'$Callback'.'$Expression'.'|'.0
            $res = _jm_obj_21($pval, undef, $rep);
            if (! $res)
            {
                # .'$Callback'.'$Expression'.'|'.1
                $res = _jm_obj_58($pval, undef, $rep);
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Callback'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Callback (.'$Callback')
sub json_model_24($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Callback'
    $res = _jm_obj_47($val, $path, $rep);
    return $res;
}

# object .'$Example'
sub _jm_obj_48($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'summary')
        {
            # handle may summary property
            # .'$Example'.summary
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$Example'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'value')
        {
            # handle may value property
            # .'$Example'.value
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'externalValue')
        {
            # handle may externalValue property
            # .'$Example'.externalValue
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Example'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Example (.'$Example')
sub json_model_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Example'
    $res = _jm_obj_48($val, $path, $rep);
    return $res;
}

# check $Expression (.'$Expression')
sub json_model_26($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Expression'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Link'.'|'.1.parameters
sub _jm_obj_50($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Link'.'|'.1
sub _jm_obj_49($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'operationId')
        {
            # handle must operationId property
            $must_count++;
            # .'$Link'.'|'.1.operationId
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'parameters')
        {
            # handle may parameters property
            # .'$Link'.'|'.1.parameters
            $res = _jm_obj_50($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'requestBody')
        {
            # handle may requestBody property
            # .'$Link'.'|'.1.requestBody
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$Link'.'|'.1.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'server')
        {
            # handle may server property
            # .'$Link'.'|'.1.server
            $res = _jm_obj_6($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Link'.'|'.1.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Link'.'|'.0.parameters
sub _jm_obj_52($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Link'.'|'.0
sub _jm_obj_51($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'operationRef')
        {
            # handle must operationRef property
            $must_count++;
            # .'$Link'.'|'.0.operationRef
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'parameters')
        {
            # handle may parameters property
            # .'$Link'.'|'.0.parameters
            $res = _jm_obj_52($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'requestBody')
        {
            # handle may requestBody property
            # .'$Link'.'|'.0.requestBody
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$Link'.'|'.0.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'server')
        {
            # handle may server property
            # .'$Link'.'|'.0.server
            $res = _jm_obj_6($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Link'.'|'.0.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Link (.'$Link')
sub json_model_27($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Link'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Link'.'|'.0
        $res = _jm_obj_51($val, $path, $rep);
        if (! $res)
        {
            # .'$Link'.'|'.1
            $res = _jm_obj_49($val, $path, $rep);
        }
    }
    return $res;
}

# object .'$Header'.'|'.1.content
sub _jm_obj_54($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Header'.'|'.1.content.''
        $res = _jm_obj_37($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Header'.'|'.1
sub _jm_obj_53($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'description')
        {
            # handle may description property
            # .'$Header'.'|'.1.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'required')
        {
            # handle may required property
            # .'$Header'.'|'.1.required
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'deprecated')
        {
            # handle may deprecated property
            # .'$Header'.'|'.1.deprecated
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'allowEmptyValue')
        {
            # handle may allowEmptyValue property
            # .'$Header'.'|'.1.allowEmptyValue
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'content')
        {
            # handle may content property
            # .'$Header'.'|'.1.content
            $res = _jm_obj_54($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Header'.'|'.1.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_55_map_allowEmptyValue (.'$Header'.'|'.0.allowEmptyValue)
sub _jm_f_59($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Header'.'|'.0.allowEmptyValue
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_55_map_allowReserved (.'$Header'.'|'.0.allowReserved)
sub _jm_f_60($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Header'.'|'.0.allowReserved
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_55_map_deprecated (.'$Header'.'|'.0.deprecated)
sub _jm_f_61($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Header'.'|'.0.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_55_map_description (.'$Header'.'|'.0.description)
sub _jm_f_62($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Header'.'|'.0.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_55_map_example (.'$Header'.'|'.0.example)
sub _jm_f_63($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Header'.'|'.0.example
    $res = 1;
    return $res;
}

# object .'$Header'.'|'.0.examples
sub _jm_obj_56($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Header'.'|'.0.examples.''
        # .'$Header'.'|'.0.examples.''.'|'.0
        $res = _jm_obj_48($pval, undef, $rep);
        if (! $res)
        {
            # .'$Header'.'|'.0.examples.''.'|'.1
            $res = _jm_obj_58($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_55_map_examples (.'$Header'.'|'.0.examples)
sub _jm_f_64($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Header'.'|'.0.examples
    $res = _jm_obj_56($val, $path, $rep);
    return $res;
}

# check _jm_obj_55_map_explode (.'$Header'.'|'.0.explode)
sub _jm_f_65($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Header'.'|'.0.explode
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_55_map_required (.'$Header'.'|'.0.required)
sub _jm_f_66($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Header'.'|'.0.required
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_55_map_schema (.'$Header'.'|'.0.schema)
sub _jm_f_67($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Header'.'|'.0.schema
    $res = _jm_obj_59($val, $path, $rep);
    return $res;
}

# check _jm_obj_55_map_style (.'$Header'.'|'.0.style)
sub _jm_f_68($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Header'.'|'.0.style
    $res = json_model_15($val, $path, $rep);
    return $res;
}


# object .'$Header'.'|'.0
sub _jm_obj_55($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_55_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Header'.'|'.0.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Header (.'$Header')
sub json_model_28($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # more or less a parameter but without name and in
    # .'$Header'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Header'.'|'.0
        $res = _jm_obj_55($val, $path, $rep);
        if (! $res)
        {
            # .'$Header'.'|'.1
            $res = _jm_obj_53($val, $path, $rep);
        }
    }
    return $res;
}

# object .'$Tag'
sub _jm_obj_57($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .'$Tag'.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$Tag'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'externalDocs')
        {
            # handle may externalDocs property
            # .'$Tag'.externalDocs
            $res = _jm_obj_24($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Tag'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Tag (.'$Tag')
sub json_model_29($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Tag'
    $res = _jm_obj_57($val, $path, $rep);
    return $res;
}

# object .'$Reference'
sub _jm_obj_58($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '$ref')
        {
            # handle must $ref property
            $must_count++;
            # .'$Reference'.'$ref'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'summary')
        {
            # handle may summary property
            # .'$Reference'.summary
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$Reference'.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Reference (.'$Reference')
sub json_model_30($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Reference'
    $res = _jm_obj_58($val, $path, $rep);
    return $res;
}

# check $schema (.'$schema')
sub json_model_45($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # JSON Model for JSON Schema 2020-12 [JSON_MODEL_LOOSE_NUMBER]
    # .'$schema'
    # .'$schema'.'@'
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_$anchor (.'$Schema'.'$anchor')
sub _jm_f_69($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'$anchor'
    $res = json_model_46($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_$comment (.'$Schema'.'$comment')
sub _jm_f_70($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Schema'.'$defs'
sub _jm_obj_60($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.'$defs'.''
        $res = json_model_60($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_59_map_$defs (.'$Schema'.'$defs')
sub _jm_f_71($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'$defs'
    $res = _jm_obj_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_$dynamicAnchor (.'$Schema'.'$dynamicAnchor')
sub _jm_f_72($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'$dynamicAnchor'
    $res = json_model_46($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_$dynamicRef (.'$Schema'.'$dynamicRef')
sub _jm_f_73($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'$dynamicRef'
    $res = json_model_46($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_$id (.'$Schema'.'$id')
sub _jm_f_74($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'$id'
    $res = json_model_46($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_$ref (.'$Schema'.'$ref')
sub _jm_f_75($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'$ref'
    $res = json_model_46($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_$schema (.'$Schema'.'$schema')
sub _jm_f_76($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'$schema'
    $res = jm_is_string($val) && $val eq 'https://json-schema.org/draft/2020-12/schema';
    return $res;
}

# object .'$Schema'.'$vocabulary'
sub _jm_obj_61($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Schema'.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_59_map_$vocabulary (.'$Schema'.'$vocabulary')
sub _jm_f_77($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.'$vocabulary'
    $res = _jm_obj_61($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_additionalProperties (.'$Schema'.additionalProperties)
sub _jm_f_78($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.additionalProperties
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_allOf (.'$Schema'.allOf)
sub _jm_f_79($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.allOf
    $res = json_model_57($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_anyOf (.'$Schema'.anyOf)
sub _jm_f_80($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.anyOf
    $res = json_model_57($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_const (.'$Schema'.const)
sub _jm_f_81($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.const
    $res = 1;
    return $res;
}

# check _jm_obj_59_map_contains (.'$Schema'.contains)
sub _jm_f_82($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.contains
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_contentEncoding (.'$Schema'.contentEncoding)
sub _jm_f_83($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.contentEncoding
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_59_map_contentMediaType (.'$Schema'.contentMediaType)
sub _jm_f_84($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.contentMediaType
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_59_map_contentSchema (.'$Schema'.contentSchema)
sub _jm_f_85($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.contentSchema
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_default (.'$Schema'.default)
sub _jm_f_86($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.default
    $res = 1;
    return $res;
}

# object .'$Schema'.dependentRequired
sub _jm_obj_62($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.dependentRequired.''
        $res = json_model_54($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_59_map_dependentRequired (.'$Schema'.dependentRequired)
sub _jm_f_87($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.dependentRequired
    $res = _jm_obj_62($val, $path, $rep);
    return $res;
}

# object .'$Schema'.dependentSchemas
sub _jm_obj_63($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.dependentSchemas.''
        $res = json_model_60($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_59_map_dependentSchemas (.'$Schema'.dependentSchemas)
sub _jm_f_88($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.dependentSchemas
    $res = _jm_obj_63($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_deprecated (.'$Schema'.deprecated)
sub _jm_f_89($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_59_map_description (.'$Schema'.description)
sub _jm_f_90($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_59_map_discriminator (.'$Schema'.discriminator)
sub _jm_f_91($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.discriminator
    $res = _jm_obj_66($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_else (.'$Schema'.else)
sub _jm_f_92($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.else
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_enum (.'$Schema'.enum)
sub _jm_f_93($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.enum
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_59_map_example (.'$Schema'.example)
sub _jm_f_94($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.example
    $res = 1;
    return $res;
}

# check _jm_obj_59_map_examples (.'$Schema'.examples)
sub _jm_f_95($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_59_map_exclusiveMaximum (.'$Schema'.exclusiveMaximum)
sub _jm_f_96($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.exclusiveMaximum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_59_map_exclusiveMinimum (.'$Schema'.exclusiveMinimum)
sub _jm_f_97($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.exclusiveMinimum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_59_map_externalDocs (.'$Schema'.externalDocs)
sub _jm_f_98($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.externalDocs
    $res = _jm_obj_24($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_format (.'$Schema'.format)
sub _jm_f_99($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.format
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_59_map_if (.'$Schema'.if)
sub _jm_f_100($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.if
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_items (.'$Schema'.items)
sub _jm_f_101($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.items
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_maxContains (.'$Schema'.maxContains)
sub _jm_f_102($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.maxContains
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_maxItems (.'$Schema'.maxItems)
sub _jm_f_103($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.maxItems
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_maxLength (.'$Schema'.maxLength)
sub _jm_f_104($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.maxLength
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_maxProperties (.'$Schema'.maxProperties)
sub _jm_f_105($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.maxProperties
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_maximum (.'$Schema'.maximum)
sub _jm_f_106($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.maximum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_59_map_minContains (.'$Schema'.minContains)
sub _jm_f_107($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.minContains
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_minItems (.'$Schema'.minItems)
sub _jm_f_108($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.minItems
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_minLength (.'$Schema'.minLength)
sub _jm_f_109($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.minLength
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_minProperties (.'$Schema'.minProperties)
sub _jm_f_110($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.minProperties
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_minimum (.'$Schema'.minimum)
sub _jm_f_111($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.minimum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_59_map_multipleOf (.'$Schema'.multipleOf)
sub _jm_f_112($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.multipleOf
    $res = jm_is_numeric($val) && $val > 0.0;
    return $res;
}

# check _jm_obj_59_map_not (.'$Schema'.not)
sub _jm_f_113($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.not
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_oneOf (.'$Schema'.oneOf)
sub _jm_f_114($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.oneOf
    $res = json_model_57($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_pattern (.'$Schema'.pattern)
sub _jm_f_115($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.pattern
    $res = jm_is_string($val) && jm_is_valid_regex($val, $path, $rep);
    return $res;
}

# object .'$Schema'.patternProperties
sub _jm_obj_64($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_regex($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Schema'.patternProperties.'$REGEX'
            $res = json_model_60($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_59_map_patternProperties (.'$Schema'.patternProperties)
sub _jm_f_116($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.patternProperties
    $res = _jm_obj_64($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_prefixItems (.'$Schema'.prefixItems)
sub _jm_f_117($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.prefixItems
    $res = json_model_57($val, $path, $rep);
    return $res;
}

# object .'$Schema'.properties
sub _jm_obj_65($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Schema'.properties.''
        $res = json_model_60($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_59_map_properties (.'$Schema'.properties)
sub _jm_f_118($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.properties
    $res = _jm_obj_65($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_propertyNames (.'$Schema'.propertyNames)
sub _jm_f_119($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.propertyNames
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_readOnly (.'$Schema'.readOnly)
sub _jm_f_120($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_59_map_required (.'$Schema'.required)
sub _jm_f_121($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.required
    $res = json_model_54($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_then (.'$Schema'.then)
sub _jm_f_122($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.then
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_title (.'$Schema'.title)
sub _jm_f_123($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_59_map_type (.'$Schema'.type)
sub _jm_f_124($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.type
    # .'$Schema'.type.'|'.0
    $res = json_model_52($val, $path, $rep);
    if (! $res)
    {
        # .'$Schema'.type.'|'.1
        $res = json_model_53($val, $path, $rep);
    }
    return $res;
}

# check _jm_obj_59_map_unevaluatedItems (.'$Schema'.unevaluatedItems)
sub _jm_f_125($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.unevaluatedItems
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_unevaluatedProperties (.'$Schema'.unevaluatedProperties)
sub _jm_f_126($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.unevaluatedProperties
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_59_map_uniqueItems (.'$Schema'.uniqueItems)
sub _jm_f_127($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.uniqueItems
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_59_map_writeOnly (.'$Schema'.writeOnly)
sub _jm_f_128($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_59_map_xml (.'$Schema'.xml)
sub _jm_f_129($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'.xml
    $res = _jm_obj_68($val, $path, $rep);
    return $res;
}


# object .'$Schema'
sub _jm_obj_59($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_59_map{$prop}))
        {
            # handle 61 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Schema (.'$Schema')
sub json_model_32($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'
    $res = _jm_obj_59($val, $path, $rep);
    return $res;
}

# object .'$Discriminator'.mapping
sub _jm_obj_67($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Discriminator'.mapping.''
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Discriminator'
sub _jm_obj_66($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'propertyName')
        {
            # handle must propertyName property
            $must_count++;
            # .'$Discriminator'.propertyName
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'mapping')
        {
            # handle may mapping property
            # .'$Discriminator'.mapping
            $res = _jm_obj_67($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Discriminator'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Discriminator (.'$Discriminator')
sub json_model_33($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Discriminator'
    $res = _jm_obj_66($val, $path, $rep);
    return $res;
}

# object .'$xml'
sub _jm_obj_68($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'name')
        {
            # handle may name property
            # .'$xml'.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'namespace')
        {
            # handle may namespace property
            # .'$xml'.namespace
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'prefix')
        {
            # handle may prefix property
            # .'$xml'.prefix
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'attribute')
        {
            # handle may attribute property
            # .'$xml'.attribute
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'wrapped')
        {
            # handle may wrapped property
            # .'$xml'.wrapped
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$xml'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $xml (.'$xml')
sub json_model_34($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$xml'
    $res = _jm_obj_68($val, $path, $rep);
    return $res;
}


# object .'$SS-apikey'
sub _jm_obj_69($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 3)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'type'})
    {
        return 0;
    }
    $pval = $$val{'type'};
    # .'$SS-apikey'.type
    $res = jm_is_string($pval) && $pval eq 'apiKey';
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'name'})
    {
        return 0;
    }
    $pval = $$val{'name'};
    # .'$SS-apikey'.name
    $res = jm_is_string($pval);
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'in'})
    {
        return 0;
    }
    $pval = $$val{'in'};
    # .'$SS-apikey'.in
    $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_4{$pval};
    if (! $res)
    {
        return 0;
    }
    return 1;
}

# check $SS-apikey (.'$SS-apikey')
sub json_model_35($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$SS-apikey'
    $res = _jm_obj_69($val, $path, $rep);
    return $res;
}

# object .'$SS-http'
sub _jm_obj_70($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 2)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'type'})
    {
        return 0;
    }
    $pval = $$val{'type'};
    # .'$SS-http'.type
    $res = jm_is_string($pval) && $pval eq 'http';
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'scheme'})
    {
        return 0;
    }
    $pval = $$val{'scheme'};
    # .'$SS-http'.scheme
    $res = jm_is_string($pval);
    if (! $res)
    {
        return 0;
    }
    return 1;
}

# check $SS-http (.'$SS-http')
sub json_model_36($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$SS-http'
    $res = _jm_obj_70($val, $path, $rep);
    return $res;
}

sub _jm_re_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /bearer/i;
    return $res;
}

# object .'$SS-http-bearer'
sub _jm_obj_71($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$SS-http-bearer'.type
            $res = jm_is_string($pval) && $pval eq 'http';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'scheme')
        {
            # handle must scheme property
            $must_count++;
            # .'$SS-http-bearer'.scheme
            # "/bearer/i"
            $res = jm_is_string($pval) && _jm_re_3($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'bearerFormat')
        {
            # handle may bearerFormat property
            # .'$SS-http-bearer'.bearerFormat
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# check $SS-http-bearer (.'$SS-http-bearer')
sub json_model_37($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$SS-http-bearer'
    $res = _jm_obj_71($val, $path, $rep);
    return $res;
}

# object .'$SS-oauth2'
sub _jm_obj_72($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 2)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'type'})
    {
        return 0;
    }
    $pval = $$val{'type'};
    # .'$SS-oauth2'.type
    $res = jm_is_string($pval) && $pval eq 'oauth2';
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'flows'})
    {
        return 0;
    }
    $pval = $$val{'flows'};
    # .'$SS-oauth2'.flows
    $res = _jm_obj_80($pval, $path, $rep);
    if (! $res)
    {
        return 0;
    }
    return 1;
}

# check $SS-oauth2 (.'$SS-oauth2')
sub json_model_38($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$SS-oauth2'
    $res = _jm_obj_72($val, $path, $rep);
    return $res;
}

# object .'$SS-oic'
sub _jm_obj_73($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 2)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'type'})
    {
        return 0;
    }
    $pval = $$val{'type'};
    # .'$SS-oic'.type
    $res = jm_is_string($pval) && $pval eq 'openIdConnect';
    if (! $res)
    {
        return 0;
    }
    if (! exists $$val{'openIdConnectUrl'})
    {
        return 0;
    }
    $pval = $$val{'openIdConnectUrl'};
    # .'$SS-oic'.openIdConnectUrl
    $res = jm_is_string($pval) && jm_is_valid_url($pval, $path, $rep);
    if (! $res)
    {
        return 0;
    }
    return 1;
}

# check $SS-oic (.'$SS-oic')
sub json_model_39($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$SS-oic'
    $res = _jm_obj_73($val, $path, $rep);
    return $res;
}


# object .'$SecurityScheme'.'|'.0
sub _jm_obj_74($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$SecurityScheme'.'|'.0.type
            $res = jm_is_string($pval) && $pval eq 'apiKey';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'name')
        {
            # handle must name property
            $must_count++;
            # .'$SecurityScheme'.'|'.0.name
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'in')
        {
            # handle must in property
            $must_count++;
            # .'$SecurityScheme'.'|'.0.in
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_5{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$SecurityScheme'.'|'.0.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 3)
    {
        return 0;
    }
    return 1;
}

# object .'$SecurityScheme'.'|'.1
sub _jm_obj_75($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$SecurityScheme'.'|'.1.type
            $res = jm_is_string($pval) && $pval eq 'http';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'scheme')
        {
            # handle must scheme property
            $must_count++;
            # .'$SecurityScheme'.'|'.1.scheme
            # "/bearer/i"
            $res = jm_is_string($pval) && _jm_re_3($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'bearerFormat')
        {
            # handle may bearerFormat property
            # .'$SecurityScheme'.'|'.1.bearerFormat
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$SecurityScheme'.'|'.1.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# object .'$SecurityScheme'.'|'.2
sub _jm_obj_76($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$SecurityScheme'.'|'.2.type
            $res = jm_is_string($pval) && $pval eq 'http';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'scheme')
        {
            # handle must scheme property
            $must_count++;
            # .'$SecurityScheme'.'|'.2.scheme
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$SecurityScheme'.'|'.2.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# object .'$SecurityScheme'.'|'.3
sub _jm_obj_77($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$SecurityScheme'.'|'.3.type
            $res = jm_is_string($pval) && $pval eq 'oauth2';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'flows')
        {
            # handle must flows property
            $must_count++;
            # .'$SecurityScheme'.'|'.3.flows
            $res = _jm_obj_80($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$SecurityScheme'.'|'.3.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# object .'$SecurityScheme'.'|'.4
sub _jm_obj_78($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$SecurityScheme'.'|'.4.type
            $res = jm_is_string($pval) && $pval eq 'openIdConnect';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'openIdConnectUrl')
        {
            # handle must openIdConnectUrl property
            $must_count++;
            # .'$SecurityScheme'.'|'.4.openIdConnectUrl
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'description')
        {
            # handle may description property
            # .'$SecurityScheme'.'|'.4.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# object .'$SecurityScheme'.'|'.5
sub _jm_obj_79($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'description')
        {
            # handle may description property
            # .'$SecurityScheme'.'|'.5.description
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$SecurityScheme'.'|'.5.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}


# check $SecurityScheme (.'$SecurityScheme')
sub json_model_40($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$SecurityScheme'
    my $iso_1 = jm_is_object($val);
    $res = $iso_1;
    if ($res)
    {
        if (exists $$val{'type'})
        {
            my $tag_1 = $$val{'type'};
            my $fun_1 = $_jm_map_1{$tag_1};
            if (defined($fun_1))
            {
                $res = &$fun_1($val, $path, $rep);
            }
            else
            {
                $res = 0;
            }
        }
        else
        {
            $res = 0;
        }
    }
    if (! $res)
    {
        # .'$SecurityScheme'.'|'.5
        $res = _jm_obj_79($val, $path, $rep);
    }
    return $res;
}

# object .'$OAuthFlows'
sub _jm_obj_80($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'implicit')
        {
            # handle may implicit property
            # .'$OAuthFlows'.implicit
            $res = _jm_obj_81($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'password')
        {
            # handle may password property
            # .'$OAuthFlows'.password
            $res = _jm_obj_81($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'clientCredentials')
        {
            # handle may clientCredentials property
            # .'$OAuthFlows'.clientCredentials
            $res = _jm_obj_81($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'authorizationCode')
        {
            # handle may authorizationCode property
            # .'$OAuthFlows'.authorizationCode
            $res = _jm_obj_81($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$OAuthFlows'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $OAuthFlows (.'$OAuthFlows')
sub json_model_41($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OAuthFlows'
    $res = _jm_obj_80($val, $path, $rep);
    return $res;
}

# object .'$OAuthFlow'.scopes
sub _jm_obj_82($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$OAuthFlow'.scopes.''
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$OAuthFlow'
sub _jm_obj_81($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'authorizationUrl')
        {
            # handle must authorizationUrl property
            $must_count++;
            # .'$OAuthFlow'.authorizationUrl
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'tokenUrl')
        {
            # handle must tokenUrl property
            $must_count++;
            # .'$OAuthFlow'.tokenUrl
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'scopes')
        {
            # handle must scopes property
            $must_count++;
            # .'$OAuthFlow'.scopes
            $res = _jm_obj_82($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'refreshUrl')
        {
            # handle may refreshUrl property
            # .'$OAuthFlow'.refreshUrl
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$OAuthFlow'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 3)
    {
        return 0;
    }
    return 1;
}

# check $OAuthFlow (.'$OAuthFlow')
sub json_model_42($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OAuthFlow'
    $res = _jm_obj_81($val, $path, $rep);
    return $res;
}

# object .'$SecurityRequirement'
sub _jm_obj_83($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$SecurityRequirement'.''
        $res = jm_is_array($pval);
        if ($res)
        {
            for my $arr_10_idx (0 .. $#$pval)
            {
                my $arr_10_item = $$pval[$arr_10_idx];
                # .'$SecurityRequirement'.''.0
                $res = jm_is_string($arr_10_item);
                if (! $res)
                {
                    last;
                }
            }
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $SecurityRequirement (.'$SecurityRequirement')
sub json_model_43($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$SecurityRequirement'
    $res = _jm_obj_83($val, $path, $rep);
    return $res;
}

# object .'$Extension'
sub _jm_obj_84($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_starts_with($prop, 'x-'))
        {
            # handle 1 re props
            # .'$Extension'.'/^x-/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Extension (.'$Extension')
sub json_model_44($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Extension'
    $res = _jm_obj_84($val, $path, $rep);
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# check $schema#URI-REFERENCE (.'$schema#URI-REFERENCE')
sub json_model_46($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#URI-REFERENCE'
    $res = jm_is_string($val);
    return $res;
}


# check $schema#simpleTypes (.'$schema#simpleTypes')
sub json_model_52($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#simpleTypes'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_6{$val};
    return $res;
}

# check $schema#simpleTypesArray (.'$schema#simpleTypesArray')
sub json_model_53($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#simpleTypesArray'
    # .'$schema#simpleTypesArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_11_idx (0 .. $#$val)
        {
            my $arr_11_item = $$val[$arr_11_idx];
            # .'$schema#simpleTypesArray'.'@'.0
            $res = json_model_52($arr_11_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_0 = scalar @$val;
        $res = jm_is_unique_array($val, $path, $rep) && $ival_0 >= 1;
    }
    return $res;
}

# check $schema#stringArray (.'$schema#stringArray')
sub json_model_54($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#stringArray'
    # .'$schema#stringArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_12_idx (0 .. $#$val)
        {
            my $arr_12_item = $$val[$arr_12_idx];
            # .'$schema#stringArray'.'@'.0
            $res = jm_is_string($arr_12_item);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        $res = jm_is_unique_array($val, $path, $rep);
    }
    return $res;
}

# check $schema#nonNegativeInteger (.'$schema#nonNegativeInteger')
sub json_model_55($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#nonNegativeInteger'
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check $schema#schemaArray (.'$schema#schemaArray')
sub json_model_57($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#schemaArray'
    # .'$schema#schemaArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_13_idx (0 .. $#$val)
        {
            my $arr_13_item = $$val[$arr_13_idx];
            # .'$schema#schemaArray'.'@'.0
            $res = json_model_60($arr_13_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_1 = scalar @$val;
        $res = $ival_1 >= 1;
    }
    return $res;
}

# check $schema#Schema (.'$schema#Schema')
sub json_model_60($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#Schema'
    # .'$schema#Schema'.'|'.0
    $res = jm_is_boolean($val);
    if (! $res)
    {
        # .'$schema#Schema'.'|'.1
        $res = _jm_obj_85($val, $path, $rep);
    }
    return $res;
}

# check _jm_obj_85_map_$anchor (.'$schema#ObjectSchema'.'$anchor')
sub _jm_f_130($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.'$anchor'
    $res = json_model_46($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_$comment (.'$schema#ObjectSchema'.'$comment')
sub _jm_f_131($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$schema#ObjectSchema'.'$defs'
sub _jm_obj_86($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.'$defs'.''
        $res = json_model_60($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_85_map_$defs (.'$schema#ObjectSchema'.'$defs')
sub _jm_f_132($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.'$defs'
    $res = _jm_obj_86($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_$dynamicAnchor (.'$schema#ObjectSchema'.'$dynamicAnchor')
sub _jm_f_133($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.'$dynamicAnchor'
    $res = json_model_46($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_$dynamicRef (.'$schema#ObjectSchema'.'$dynamicRef')
sub _jm_f_134($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.'$dynamicRef'
    $res = json_model_46($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_$id (.'$schema#ObjectSchema'.'$id')
sub _jm_f_135($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.'$id'
    $res = json_model_46($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_$ref (.'$schema#ObjectSchema'.'$ref')
sub _jm_f_136($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.'$ref'
    $res = json_model_46($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_$schema (.'$schema#ObjectSchema'.'$schema')
sub _jm_f_137($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.'$schema'
    $res = jm_is_string($val) && $val eq 'https://json-schema.org/draft/2020-12/schema';
    return $res;
}

# object .'$schema#ObjectSchema'.'$vocabulary'
sub _jm_obj_87($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$schema#ObjectSchema'.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_85_map_$vocabulary (.'$schema#ObjectSchema'.'$vocabulary')
sub _jm_f_138($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.'$vocabulary'
    $res = _jm_obj_87($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_additionalProperties (.'$schema#ObjectSchema'.additionalProperties)
sub _jm_f_139($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.additionalProperties
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_allOf (.'$schema#ObjectSchema'.allOf)
sub _jm_f_140($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.allOf
    $res = json_model_57($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_anyOf (.'$schema#ObjectSchema'.anyOf)
sub _jm_f_141($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.anyOf
    $res = json_model_57($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_const (.'$schema#ObjectSchema'.const)
sub _jm_f_142($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.const
    $res = 1;
    return $res;
}

# check _jm_obj_85_map_contains (.'$schema#ObjectSchema'.contains)
sub _jm_f_143($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.contains
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_contentEncoding (.'$schema#ObjectSchema'.contentEncoding)
sub _jm_f_144($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.contentEncoding
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_85_map_contentMediaType (.'$schema#ObjectSchema'.contentMediaType)
sub _jm_f_145($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.contentMediaType
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_85_map_contentSchema (.'$schema#ObjectSchema'.contentSchema)
sub _jm_f_146($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.contentSchema
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_default (.'$schema#ObjectSchema'.default)
sub _jm_f_147($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.default
    $res = 1;
    return $res;
}

# object .'$schema#ObjectSchema'.dependentRequired
sub _jm_obj_88($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.dependentRequired.''
        $res = json_model_54($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_85_map_dependentRequired (.'$schema#ObjectSchema'.dependentRequired)
sub _jm_f_148($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.dependentRequired
    $res = _jm_obj_88($val, $path, $rep);
    return $res;
}

# object .'$schema#ObjectSchema'.dependentSchemas
sub _jm_obj_89($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.dependentSchemas.''
        $res = json_model_60($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_85_map_dependentSchemas (.'$schema#ObjectSchema'.dependentSchemas)
sub _jm_f_149($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.dependentSchemas
    $res = _jm_obj_89($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_deprecated (.'$schema#ObjectSchema'.deprecated)
sub _jm_f_150($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.deprecated
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_85_map_description (.'$schema#ObjectSchema'.description)
sub _jm_f_151($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_85_map_else (.'$schema#ObjectSchema'.else)
sub _jm_f_152($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.else
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_enum (.'$schema#ObjectSchema'.enum)
sub _jm_f_153($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.enum
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_85_map_examples (.'$schema#ObjectSchema'.examples)
sub _jm_f_154($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_85_map_exclusiveMaximum (.'$schema#ObjectSchema'.exclusiveMaximum)
sub _jm_f_155($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.exclusiveMaximum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_85_map_exclusiveMinimum (.'$schema#ObjectSchema'.exclusiveMinimum)
sub _jm_f_156($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.exclusiveMinimum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_85_map_format (.'$schema#ObjectSchema'.format)
sub _jm_f_157($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.format
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_85_map_if (.'$schema#ObjectSchema'.if)
sub _jm_f_158($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.if
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_items (.'$schema#ObjectSchema'.items)
sub _jm_f_159($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.items
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_maxContains (.'$schema#ObjectSchema'.maxContains)
sub _jm_f_160($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.maxContains
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_maxItems (.'$schema#ObjectSchema'.maxItems)
sub _jm_f_161($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.maxItems
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_maxLength (.'$schema#ObjectSchema'.maxLength)
sub _jm_f_162($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.maxLength
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_maxProperties (.'$schema#ObjectSchema'.maxProperties)
sub _jm_f_163($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.maxProperties
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_maximum (.'$schema#ObjectSchema'.maximum)
sub _jm_f_164($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.maximum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_85_map_minContains (.'$schema#ObjectSchema'.minContains)
sub _jm_f_165($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.minContains
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_minItems (.'$schema#ObjectSchema'.minItems)
sub _jm_f_166($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.minItems
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_minLength (.'$schema#ObjectSchema'.minLength)
sub _jm_f_167($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.minLength
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_minProperties (.'$schema#ObjectSchema'.minProperties)
sub _jm_f_168($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.minProperties
    $res = json_model_55($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_minimum (.'$schema#ObjectSchema'.minimum)
sub _jm_f_169($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.minimum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_85_map_multipleOf (.'$schema#ObjectSchema'.multipleOf)
sub _jm_f_170($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.multipleOf
    $res = jm_is_numeric($val) && $val > 0.0;
    return $res;
}

# check _jm_obj_85_map_not (.'$schema#ObjectSchema'.not)
sub _jm_f_171($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.not
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_oneOf (.'$schema#ObjectSchema'.oneOf)
sub _jm_f_172($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.oneOf
    $res = json_model_57($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_pattern (.'$schema#ObjectSchema'.pattern)
sub _jm_f_173($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.pattern
    $res = jm_is_string($val) && jm_is_valid_regex($val, $path, $rep);
    return $res;
}

# object .'$schema#ObjectSchema'.patternProperties
sub _jm_obj_90($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_regex($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$schema#ObjectSchema'.patternProperties.'$REGEX'
            $res = json_model_60($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_85_map_patternProperties (.'$schema#ObjectSchema'.patternProperties)
sub _jm_f_174($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.patternProperties
    $res = _jm_obj_90($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_prefixItems (.'$schema#ObjectSchema'.prefixItems)
sub _jm_f_175($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.prefixItems
    $res = json_model_57($val, $path, $rep);
    return $res;
}

# object .'$schema#ObjectSchema'.properties
sub _jm_obj_91($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.properties.''
        $res = json_model_60($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_85_map_properties (.'$schema#ObjectSchema'.properties)
sub _jm_f_176($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.properties
    $res = _jm_obj_91($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_propertyNames (.'$schema#ObjectSchema'.propertyNames)
sub _jm_f_177($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.propertyNames
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_readOnly (.'$schema#ObjectSchema'.readOnly)
sub _jm_f_178($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.readOnly
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_85_map_required (.'$schema#ObjectSchema'.required)
sub _jm_f_179($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.required
    $res = json_model_54($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_then (.'$schema#ObjectSchema'.then)
sub _jm_f_180($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.then
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_title (.'$schema#ObjectSchema'.title)
sub _jm_f_181($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_85_map_type (.'$schema#ObjectSchema'.type)
sub _jm_f_182($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.type
    # .'$schema#ObjectSchema'.type.'|'.0
    $res = json_model_52($val, $path, $rep);
    if (! $res)
    {
        # .'$schema#ObjectSchema'.type.'|'.1
        $res = json_model_53($val, $path, $rep);
    }
    return $res;
}

# check _jm_obj_85_map_unevaluatedItems (.'$schema#ObjectSchema'.unevaluatedItems)
sub _jm_f_183($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.unevaluatedItems
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_unevaluatedProperties (.'$schema#ObjectSchema'.unevaluatedProperties)
sub _jm_f_184($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.unevaluatedProperties
    $res = json_model_60($val, $path, $rep);
    return $res;
}

# check _jm_obj_85_map_uniqueItems (.'$schema#ObjectSchema'.uniqueItems)
sub _jm_f_185($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.uniqueItems
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_85_map_writeOnly (.'$schema#ObjectSchema'.writeOnly)
sub _jm_f_186($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.writeOnly
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$schema#ObjectSchema'
sub _jm_obj_85($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_85_map{$prop}))
        {
            # handle 57 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $schema#ObjectSchema (.'$schema#ObjectSchema')
sub json_model_59($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'
    $res = _jm_obj_85($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_obj_0_map = (
            'components' => \&_jm_f_0,
            'externalDocs' => \&_jm_f_1,
            'jsonSchemaDialect' => \&_jm_f_2,
            'paths' => \&_jm_f_3,
            'security' => \&_jm_f_4,
            'servers' => \&_jm_f_5,
            'tags' => \&_jm_f_6,
            'webhooks' => \&_jm_f_7,
        );
        %_jm_obj_9_map = (
            'callbacks' => \&_jm_f_8,
            'examples' => \&_jm_f_9,
            'headers' => \&_jm_f_10,
            'links' => \&_jm_f_11,
            'parameters' => \&_jm_f_12,
            'pathItems' => \&_jm_f_13,
            'requestBodies' => \&_jm_f_14,
            'responses' => \&_jm_f_15,
            'schemas' => \&_jm_f_16,
            'securitySchemes' => \&_jm_f_17,
        );
        %_jm_obj_21_map = (
            '$ref' => \&_jm_f_18,
            'delete' => \&_jm_f_19,
            'description' => \&_jm_f_20,
            'get' => \&_jm_f_21,
            'head' => \&_jm_f_22,
            'options' => \&_jm_f_23,
            'parameters' => \&_jm_f_24,
            'patch' => \&_jm_f_25,
            'post' => \&_jm_f_26,
            'put' => \&_jm_f_27,
            'servers' => \&_jm_f_28,
            'summary' => \&_jm_f_29,
            'trace' => \&_jm_f_30,
        );
        %_jm_obj_22_map = (
            'callbacks' => \&_jm_f_31,
            'deprecated' => \&_jm_f_32,
            'description' => \&_jm_f_33,
            'externalDocs' => \&_jm_f_34,
            'operationId' => \&_jm_f_35,
            'parameters' => \&_jm_f_36,
            'requestBody' => \&_jm_f_37,
            'responses' => \&_jm_f_38,
            'security' => \&_jm_f_39,
            'servers' => \&_jm_f_40,
            'summary' => \&_jm_f_41,
            'tags' => \&_jm_f_42,
        );
        %_jm_cst_0 = (
            'query' => 1,
            'header' => 1,
            'path' => 1,
            'cookie' => 1,
        );
        %_jm_cst_1 = (
            'matrix' => 1,
            'label' => 1,
            'form' => 1,
            'simple' => 1,
            'spaceDelimited' => 1,
            'pipeDelimited' => 1,
            'deepObject' => 1,
        );
        %_jm_obj_27_map = (
            'allowReserved' => \&_jm_f_43,
            'example' => \&_jm_f_44,
            'examples' => \&_jm_f_45,
            'explode' => \&_jm_f_46,
            'schema' => \&_jm_f_47,
            'style' => \&_jm_f_48,
        );
        %_jm_cst_2 = (
            'query' => 1,
            'header' => 1,
            'path' => 1,
            'cookie' => 1,
        );
        %_jm_obj_31_map = (
            'allowEmptyValue' => \&_jm_f_49,
            'allowReserved' => \&_jm_f_50,
            'deprecated' => \&_jm_f_51,
            'description' => \&_jm_f_52,
            'example' => \&_jm_f_53,
            'examples' => \&_jm_f_54,
            'explode' => \&_jm_f_55,
            'required' => \&_jm_f_56,
            'schema' => \&_jm_f_57,
            'style' => \&_jm_f_58,
        );
        %_jm_cst_3 = (
            'query' => 1,
            'header' => 1,
            'path' => 1,
            'cookie' => 1,
        );
        %_jm_map_0 = (
            'cookie' => \&_jm_obj_33,
            'header' => \&_jm_obj_33,
            'path' => \&_jm_obj_33,
            'query' => \&_jm_obj_33,
        );
        %_jm_obj_55_map = (
            'allowEmptyValue' => \&_jm_f_59,
            'allowReserved' => \&_jm_f_60,
            'deprecated' => \&_jm_f_61,
            'description' => \&_jm_f_62,
            'example' => \&_jm_f_63,
            'examples' => \&_jm_f_64,
            'explode' => \&_jm_f_65,
            'required' => \&_jm_f_66,
            'schema' => \&_jm_f_67,
            'style' => \&_jm_f_68,
        );
        %_jm_obj_59_map = (
            '$anchor' => \&_jm_f_69,
            '$comment' => \&_jm_f_70,
            '$defs' => \&_jm_f_71,
            '$dynamicAnchor' => \&_jm_f_72,
            '$dynamicRef' => \&_jm_f_73,
            '$id' => \&_jm_f_74,
            '$ref' => \&_jm_f_75,
            '$schema' => \&_jm_f_76,
            '$vocabulary' => \&_jm_f_77,
            'additionalProperties' => \&_jm_f_78,
            'allOf' => \&_jm_f_79,
            'anyOf' => \&_jm_f_80,
            'const' => \&_jm_f_81,
            'contains' => \&_jm_f_82,
            'contentEncoding' => \&_jm_f_83,
            'contentMediaType' => \&_jm_f_84,
            'contentSchema' => \&_jm_f_85,
            'default' => \&_jm_f_86,
            'dependentRequired' => \&_jm_f_87,
            'dependentSchemas' => \&_jm_f_88,
            'deprecated' => \&_jm_f_89,
            'description' => \&_jm_f_90,
            'discriminator' => \&_jm_f_91,
            'else' => \&_jm_f_92,
            'enum' => \&_jm_f_93,
            'example' => \&_jm_f_94,
            'examples' => \&_jm_f_95,
            'exclusiveMaximum' => \&_jm_f_96,
            'exclusiveMinimum' => \&_jm_f_97,
            'externalDocs' => \&_jm_f_98,
            'format' => \&_jm_f_99,
            'if' => \&_jm_f_100,
            'items' => \&_jm_f_101,
            'maxContains' => \&_jm_f_102,
            'maxItems' => \&_jm_f_103,
            'maxLength' => \&_jm_f_104,
            'maxProperties' => \&_jm_f_105,
            'maximum' => \&_jm_f_106,
            'minContains' => \&_jm_f_107,
            'minItems' => \&_jm_f_108,
            'minLength' => \&_jm_f_109,
            'minProperties' => \&_jm_f_110,
            'minimum' => \&_jm_f_111,
            'multipleOf' => \&_jm_f_112,
            'not' => \&_jm_f_113,
            'oneOf' => \&_jm_f_114,
            'pattern' => \&_jm_f_115,
            'patternProperties' => \&_jm_f_116,
            'prefixItems' => \&_jm_f_117,
            'properties' => \&_jm_f_118,
            'propertyNames' => \&_jm_f_119,
            'readOnly' => \&_jm_f_120,
            'required' => \&_jm_f_121,
            'then' => \&_jm_f_122,
            'title' => \&_jm_f_123,
            'type' => \&_jm_f_124,
            'unevaluatedItems' => \&_jm_f_125,
            'unevaluatedProperties' => \&_jm_f_126,
            'uniqueItems' => \&_jm_f_127,
            'writeOnly' => \&_jm_f_128,
            'xml' => \&_jm_f_129,
        );
        %_jm_cst_4 = (
            'query' => 1,
            'header' => 1,
            'cookie' => 1,
        );
        %_jm_cst_5 = (
            'query' => 1,
            'header' => 1,
            'cookie' => 1,
        );
        %_jm_map_1 = (
            'apiKey' => \&_jm_obj_74,
            'http' => \&_jm_obj_76,
            'oauth2' => \&_jm_obj_77,
            'openIdConnect' => \&_jm_obj_78,
        );
        %_jm_cst_6 = (
            'array' => 1,
            'boolean' => 1,
            'integer' => 1,
            'null' => 1,
            'number' => 1,
            'object' => 1,
            'string' => 1,
        );
        %_jm_obj_85_map = (
            '$anchor' => \&_jm_f_130,
            '$comment' => \&_jm_f_131,
            '$defs' => \&_jm_f_132,
            '$dynamicAnchor' => \&_jm_f_133,
            '$dynamicRef' => \&_jm_f_134,
            '$id' => \&_jm_f_135,
            '$ref' => \&_jm_f_136,
            '$schema' => \&_jm_f_137,
            '$vocabulary' => \&_jm_f_138,
            'additionalProperties' => \&_jm_f_139,
            'allOf' => \&_jm_f_140,
            'anyOf' => \&_jm_f_141,
            'const' => \&_jm_f_142,
            'contains' => \&_jm_f_143,
            'contentEncoding' => \&_jm_f_144,
            'contentMediaType' => \&_jm_f_145,
            'contentSchema' => \&_jm_f_146,
            'default' => \&_jm_f_147,
            'dependentRequired' => \&_jm_f_148,
            'dependentSchemas' => \&_jm_f_149,
            'deprecated' => \&_jm_f_150,
            'description' => \&_jm_f_151,
            'else' => \&_jm_f_152,
            'enum' => \&_jm_f_153,
            'examples' => \&_jm_f_154,
            'exclusiveMaximum' => \&_jm_f_155,
            'exclusiveMinimum' => \&_jm_f_156,
            'format' => \&_jm_f_157,
            'if' => \&_jm_f_158,
            'items' => \&_jm_f_159,
            'maxContains' => \&_jm_f_160,
            'maxItems' => \&_jm_f_161,
            'maxLength' => \&_jm_f_162,
            'maxProperties' => \&_jm_f_163,
            'maximum' => \&_jm_f_164,
            'minContains' => \&_jm_f_165,
            'minItems' => \&_jm_f_166,
            'minLength' => \&_jm_f_167,
            'minProperties' => \&_jm_f_168,
            'minimum' => \&_jm_f_169,
            'multipleOf' => \&_jm_f_170,
            'not' => \&_jm_f_171,
            'oneOf' => \&_jm_f_172,
            'pattern' => \&_jm_f_173,
            'patternProperties' => \&_jm_f_174,
            'prefixItems' => \&_jm_f_175,
            'properties' => \&_jm_f_176,
            'propertyNames' => \&_jm_f_177,
            'readOnly' => \&_jm_f_178,
            'required' => \&_jm_f_179,
            'then' => \&_jm_f_180,
            'title' => \&_jm_f_181,
            'type' => \&_jm_f_182,
            'unevaluatedItems' => \&_jm_f_183,
            'unevaluatedProperties' => \&_jm_f_184,
            'uniqueItems' => \&_jm_f_185,
            'writeOnly' => \&_jm_f_186,
        );
        %check_model_map = (
            '' => \&_jm_obj_0,
            'OpenAPI' => \&_jm_obj_0,
            'Info' => \&_jm_obj_2,
            'Contact' => \&_jm_obj_3,
            'License' => \&json_model_5,
            'Server' => \&_jm_obj_6,
            'ServerVariable' => \&_jm_obj_8,
            'Components' => \&_jm_obj_9,
            'Paths' => \&_jm_obj_20,
            'PathItem' => \&_jm_obj_21,
            'Operation' => \&_jm_obj_22,
            'ExternalDocumentation' => \&_jm_obj_24,
            'parameterShare' => \&_jm_obj_25,
            'commonParameter' => \&_jm_obj_26,
            'Style' => \&json_model_15,
            'parameterSchemaOnly' => \&_jm_obj_27,
            'parameterContentOnly' => \&_jm_obj_29,
            'Parameter' => \&json_model_18,
            'RequestBody' => \&_jm_obj_35,
            'MediaType' => \&_jm_obj_37,
            'Encoding' => \&_jm_obj_40,
            'Responses' => \&_jm_obj_42,
            'Response' => \&_jm_obj_43,
            'Callback' => \&_jm_obj_47,
            'Example' => \&_jm_obj_48,
            'Expression' => \&json_model_26,
            'Link' => \&json_model_27,
            'Header' => \&json_model_28,
            'Tag' => \&_jm_obj_57,
            'Reference' => \&_jm_obj_58,
            'schema' => \&json_model_45,
            'Schema' => \&_jm_obj_59,
            'Discriminator' => \&_jm_obj_66,
            'xml' => \&_jm_obj_68,
            'SS-apikey' => \&_jm_obj_69,
            'SS-http' => \&_jm_obj_70,
            'SS-http-bearer' => \&_jm_obj_71,
            'SS-oauth2' => \&_jm_obj_72,
            'SS-oic' => \&_jm_obj_73,
            'SecurityScheme' => \&json_model_40,
            'OAuthFlows' => \&_jm_obj_80,
            'OAuthFlow' => \&_jm_obj_81,
            'SecurityRequirement' => \&_jm_obj_83,
            'Extension' => \&_jm_obj_84,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_obj_0_map = ();
        %_jm_obj_9_map = ();
        %_jm_obj_21_map = ();
        %_jm_obj_22_map = ();
        %_jm_cst_0 = ();
        %_jm_cst_1 = ();
        %_jm_obj_27_map = ();
        %_jm_cst_2 = ();
        %_jm_obj_31_map = ();
        %_jm_cst_3 = ();
        %_jm_map_0 = ();
        %_jm_obj_55_map = ();
        %_jm_obj_59_map = ();
        %_jm_cst_4 = ();
        %_jm_cst_5 = ();
        %_jm_map_1 = ();
        %_jm_cst_6 = ();
        %_jm_obj_85_map = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
