#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2.0b1
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


my %check_model_map;

# check $li0 (.'$li0')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$li0'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$li0'.0
            $res = jm_is_integer($arr_0_item) && $arr_0_item >= 0;
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check $ls0 (.'$ls0')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ls0'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_1_idx (0 .. $#$val)
        {
            my $arr_1_item = $$val[$arr_1_idx];
            # .'$ls0'.0
            $res = jm_is_string($arr_1_item) && jm_is_valid_url($arr_1_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check $lb0 (.'$lb0')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$lb0'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_2_idx (0 .. $#$val)
        {
            my $arr_2_item = $$val[$arr_2_idx];
            # .'$lb0'.0
            $res = jm_is_boolean($arr_2_item);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check $lf0 (.'$lf0')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$lf0'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_3_idx (0 .. $#$val)
        {
            my $arr_3_item = $$val[$arr_3_idx];
            # .'$lf0'.0
            $res = jm_is_numeric($arr_3_item) && $arr_3_item >= 0.0;
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    # .'|'.0
    $res = json_model_2($val, $path, $rep);
    if (! $res)
    {
        # .'|'.1
        $res = json_model_3($val, $path, $rep);
        if (! $res)
        {
            # .'|'.2
            $res = json_model_4($val, $path, $rep);
            if (! $res)
            {
                # .'|'.3
                $res = json_model_5($val, $path, $rep);
            }
        }
    }
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&json_model_1,
            'li0' => \&json_model_2,
            'ls0' => \&json_model_3,
            'lb0' => \&json_model_4,
            'lf0' => \&json_model_5,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
