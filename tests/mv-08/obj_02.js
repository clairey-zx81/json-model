#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

var check_model_map = new Map()

// check $li0 (.'$li0')
function json_model_2(val, path, rep)
{
    // .'$li0'
    let res = Array.isArray(val);
    if (res)
    {
        for (let arr_0_idx = 0; arr_0_idx < val.length; arr_0_idx++)
        {
            let arr_0_item = val[arr_0_idx]
            let arr_0_lpath = path ? path.concat([arr_0_idx]) : null;
            // .'$li0'.0
            res = ((typeof arr_0_item === 'number' || arr_0_item instanceof Number) && Number.isInteger(arr_0_item)) && arr_0_item >= 0;
            if (! res)
            {
                rep !== null && rep.push(["not a 0 strict int [.'$li0'.0]", (path ? arr_0_lpath : null)])
                break;
            }
        }
    }
    if (! res)
    {
        rep !== null && rep.push(["not array or unexpected array [.'$li0']", path])
    }
    return res;
}

// check $ls0 (.'$ls0')
function json_model_3(val, path, rep)
{
    // .'$ls0'
    let res = Array.isArray(val);
    if (res)
    {
        for (let arr_1_idx = 0; arr_1_idx < val.length; arr_1_idx++)
        {
            let arr_1_item = val[arr_1_idx]
            let arr_1_lpath = path ? path.concat([arr_1_idx]) : null;
            // .'$ls0'.0
            res = runtime.jm_is_valid_url(arr_1_item);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $URL [.'$ls0'.0]", (path ? arr_1_lpath : null)])
                break;
            }
        }
    }
    if (! res)
    {
        rep !== null && rep.push(["not array or unexpected array [.'$ls0']", path])
    }
    return res;
}

// check $lb0 (.'$lb0')
function json_model_4(val, path, rep)
{
    // .'$lb0'
    let res = Array.isArray(val);
    if (res)
    {
        for (let arr_2_idx = 0; arr_2_idx < val.length; arr_2_idx++)
        {
            let arr_2_item = val[arr_2_idx]
            let arr_2_lpath = path ? path.concat([arr_2_idx]) : null;
            // .'$lb0'.0
            res = (typeof arr_2_item === 'boolean' || arr_2_item instanceof Boolean);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $BOOL [.'$lb0'.0]", (path ? arr_2_lpath : null)])
                break;
            }
        }
    }
    if (! res)
    {
        rep !== null && rep.push(["not array or unexpected array [.'$lb0']", path])
    }
    return res;
}

// check $lf0 (.'$lf0')
function json_model_5(val, path, rep)
{
    // .'$lf0'
    let res = Array.isArray(val);
    if (res)
    {
        for (let arr_3_idx = 0; arr_3_idx < val.length; arr_3_idx++)
        {
            let arr_3_item = val[arr_3_idx]
            let arr_3_lpath = path ? path.concat([arr_3_idx]) : null;
            // .'$lf0'.0
            res = ((typeof arr_3_item === 'number' || arr_3_item instanceof Number)) && arr_3_item >= 0.0;
            if (! res)
            {
                rep !== null && rep.push(["not a 0.0 strict float [.'$lf0'.0]", (path ? arr_3_lpath : null)])
                break;
            }
        }
    }
    if (! res)
    {
        rep !== null && rep.push(["not array or unexpected array [.'$lf0']", path])
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    // .
    // .'|'.0
    let res = json_model_2(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected $li0 [.'|'.0]", path])
    }
    if (! res)
    {
        // .'|'.1
        res = json_model_3(val, path, rep);
        if (! res)
        {
            rep !== null && rep.push(["unexpected $ls0 [.'|'.1]", path])
        }
        if (! res)
        {
            // .'|'.2
            res = json_model_4(val, path, rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $lb0 [.'|'.2]", path])
            }
            if (! res)
            {
                // .'|'.3
                res = json_model_5(val, path, rep);
                if (! res)
                {
                    rep !== null && rep.push(["unexpected $lf0 [.'|'.3]", path])
                }
            }
        }
    }
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["no model matched [.'|']", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_1)
        check_model_map.set("li0", json_model_2)
        check_model_map.set("ls0", json_model_3)
        check_model_map.set("lb0", json_model_4)
        check_model_map.set("lf0", json_model_5)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
