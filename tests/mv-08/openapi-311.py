#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_re_0_reco: object
_jm_re_0: RegexFun
_jm_obj_0_map: PropMap
_jm_re_1_reco: object
_jm_re_1: RegexFun
_jm_obj_15_map: PropMap
_jm_cst_0: set[str]
_jm_cst_1: set[str]
_jm_obj_25_map: PropMap
_jm_re_2_reco: object
_jm_re_2: RegexFun
_jm_cst_2: set[str]
_jm_obj_9_map: PropMap
_jm_cst_3: set[str]
_jm_cst_4: set[str]
_jm_obj_42_map: PropMap
_jm_obj_39_map: PropMap
_jm_cst_5: set[str]
_jm_cst_6: set[str]
_jm_obj_48_map: PropMap
_jm_obj_44_map: PropMap
_jm_cst_7: set[str]
_jm_cst_8: set[str]
_jm_obj_53_map: PropMap
_jm_cst_9: set[str]
_jm_cst_10: set[str]
_jm_obj_59_map: PropMap
_jm_obj_70_map: PropMap
_jm_re_3_reco: object
_jm_re_3: RegexFun
_jm_obj_77_map: PropMap
_jm_obj_93_map: PropMap
_jm_cst_11: set[str]
_jm_obj_97_map: PropMap
_jm_cst_12: set[str]
_jm_cst_13: set[str]
_jm_cst_14: set[str]
_jm_cst_15: set[str]
_jm_obj_123_map: PropMap
check_model_map: PropMap

# check _jm_obj_0_map_components (.'$OpenAPI'.components)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OpenAPI'.components
    res = json_model_8(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Components [.'$OpenAPI'.components]", path))
    return res

# check _jm_obj_0_map_externalDocs (.'$OpenAPI'.externalDocs)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OpenAPI'.externalDocs
    res = json_model_12(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ExternalDocumentation [.'$OpenAPI'.externalDocs]", path))
    return res

# check _jm_obj_0_map_jsonSchemaDialect (.'$OpenAPI'.jsonSchemaDialect)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OpenAPI'.jsonSchemaDialect
    res = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URL [.'$OpenAPI'.jsonSchemaDialect]", path))
    return res

# check _jm_obj_0_map_paths (.'$OpenAPI'.paths)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OpenAPI'.paths
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Paths [.'$OpenAPI'.paths]", path))
    return res

# check _jm_obj_0_map_security (.'$OpenAPI'.security)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OpenAPI'.security
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$OpenAPI'.security.0
            res = json_model_43(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $SecurityRequirement [.'$OpenAPI'.security.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$OpenAPI'.security]", path))
    return res

# check _jm_obj_0_map_servers (.'$OpenAPI'.servers)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OpenAPI'.servers
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$OpenAPI'.servers.0
            res = json_model_6(arr_1_item, arr_1_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [.'$OpenAPI'.servers.0]", arr_1_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$OpenAPI'.servers]", path))
    return res

# check _jm_obj_0_map_tags (.'$OpenAPI'.tags)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OpenAPI'.tags
    res = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # .'$OpenAPI'.tags.0
            res = json_model_29(arr_2_item, arr_2_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Tag [.'$OpenAPI'.tags.0]", arr_2_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$OpenAPI'.tags]", path))
    return res

# object .'$OpenAPI'.webhooks
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$OpenAPI'.webhooks]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$OpenAPI'.webhooks.''
        res = json_model_10(pval, lpath_1 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $PathItem [.'$OpenAPI'.webhooks.'']", lpath_1 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_0_map_webhooks (.'$OpenAPI'.webhooks)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OpenAPI'.webhooks
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$OpenAPI'.webhooks]", path))
    return res


# object .'$OpenAPI'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$OpenAPI']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "openapi":
            # handle must openapi property
            must_count += 1
            # .'$OpenAPI'.openapi
            # "/^3\\.1\\.\\d+(-.+)?$/"
            res = isinstance(pval, str) and _jm_re_0(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^3\\.1\\.\\d+(-.+)?$/ [.'$OpenAPI'.openapi]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$OpenAPI'.openapi]", lpath_0 if path is not None else None))
                return False
        elif prop == "info":
            # handle must info property
            must_count += 1
            # .'$OpenAPI'.info
            res = json_model_3(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Info [.'$OpenAPI'.info]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$OpenAPI'.info]", lpath_0 if path is not None else None))
                return False
        elif pfun := _jm_obj_0_map.get(prop):
            # handle 8 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$OpenAPI']", lpath_0 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$OpenAPI'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$OpenAPI'.'/^x-/']", lpath_0 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$OpenAPI']", lpath_0 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "info" in val:
                rep is None or rep.append(("missing mandatory prop <info> [.'$OpenAPI']", path))
            if not "openapi" in val:
                rep is None or rep.append(("missing mandatory prop <openapi> [.'$OpenAPI']", path))
        return False
    return True

# check $OpenAPI (.'$OpenAPI')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OpenAPI'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$OpenAPI']", path))
    return res

# object .'$Info'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Info']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "title":
            # handle must title property
            must_count += 1
            # .'$Info'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Info'.title]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Info'.title]", lpath_2 if path is not None else None))
                return False
        elif prop == "version":
            # handle must version property
            must_count += 1
            # .'$Info'.version
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Info'.version]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Info'.version]", lpath_2 if path is not None else None))
                return False
        elif prop == "summary":
            # handle may summary property
            # .'$Info'.summary
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Info'.summary]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Info'.summary]", lpath_2 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Info'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Info'.description]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Info'.description]", lpath_2 if path is not None else None))
                return False
        elif prop == "termsOfService":
            # handle may termsOfService property
            # .'$Info'.termsOfService
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Info'.termsOfService]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Info'.termsOfService]", lpath_2 if path is not None else None))
                return False
        elif prop == "contact":
            # handle may contact property
            # .'$Info'.contact
            res = json_model_4(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Contact [.'$Info'.contact]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Info'.contact]", lpath_2 if path is not None else None))
                return False
        elif prop == "license":
            # handle may license property
            # .'$Info'.license
            res = json_model_5(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $License [.'$Info'.license]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Info'.license]", lpath_2 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Info'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Info'.'/^x-/']", lpath_2 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Info']", lpath_2 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "title" in val:
                rep is None or rep.append(("missing mandatory prop <title> [.'$Info']", path))
            if not "version" in val:
                rep is None or rep.append(("missing mandatory prop <version> [.'$Info']", path))
        return False
    return True

# check $Info (.'$Info')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Info'
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Info']", path))
    return res

# object .'$Contact'
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Contact']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$Contact'.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Contact'.name]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Contact'.name]", lpath_3 if path is not None else None))
                return False
        elif prop == "url":
            # handle may url property
            # .'$Contact'.url
            res = is_valid_url(pval, lpath_3 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$Contact'.url]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Contact'.url]", lpath_3 if path is not None else None))
                return False
        elif prop == "email":
            # handle may email property
            # .'$Contact'.email
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Contact'.email]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Contact'.email]", lpath_3 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Contact'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Contact'.'/^x-/']", lpath_3 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Contact']", lpath_3 if path is not None else None))
            return False
    return True

# check $Contact (.'$Contact')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Contact'
    res = _jm_obj_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Contact']", path))
    return res


# object .'$License'.'|'.1
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$License'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$License'.'|'.1.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$License'.'|'.1.name]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$License'.'|'.1.name]", lpath_4 if path is not None else None))
                return False
        elif prop == "url":
            # handle must url property
            must_count += 1
            # .'$License'.'|'.1.url
            res = is_valid_url(pval, lpath_4 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$License'.'|'.1.url]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$License'.'|'.1.url]", lpath_4 if path is not None else None))
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .'$License'.'|'.1.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$License'.'|'.1.'/^x\\\\-.*$/']", lpath_4 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$License'.'|'.1]", lpath_4 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$License'.'|'.1]", path))
            if not "url" in val:
                rep is None or rep.append(("missing mandatory prop <url> [.'$License'.'|'.1]", path))
        return False
    return True

# object .'$License'.'|'.0
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$License'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$License'.'|'.0.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$License'.'|'.0.name]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$License'.'|'.0.name]", lpath_5 if path is not None else None))
                return False
        elif prop == "identifier":
            # handle must identifier property
            must_count += 1
            # .'$License'.'|'.0.identifier
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$License'.'|'.0.identifier]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$License'.'|'.0.identifier]", lpath_5 if path is not None else None))
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 1 re props
            # .'$License'.'|'.0.'/^x\\-.*$/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$License'.'|'.0.'/^x\\\\-.*$/']", lpath_5 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$License'.'|'.0]", lpath_5 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "identifier" in val:
                rep is None or rep.append(("missing mandatory prop <identifier> [.'$License'.'|'.0]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$License'.'|'.0]", path))
        return False
    return True

# check $License (.'$License')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$License'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$License'.'|']", path))
    if res:
        # .'$License'.'|'.0
        res = _jm_obj_5(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$License'.'|'.0]", path))
        if not res:
            # .'$License'.'|'.1
            res = _jm_obj_4(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$License'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$License'.'|']", path))
    return res

# object .'$Server'.variables
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Server'.variables]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Server'.variables.''
        res = json_model_7(pval, lpath_7 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $ServerVariable [.'$Server'.variables.'']", lpath_7 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Server'
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Server']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "url":
            # handle must url property
            must_count += 1
            # .'$Server'.url
            res = is_valid_url(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$Server'.url]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Server'.url]", lpath_6 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Server'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Server'.description]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Server'.description]", lpath_6 if path is not None else None))
                return False
        elif prop == "variables":
            # handle may variables property
            # .'$Server'.variables
            res = _jm_obj_7(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Server'.variables]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Server'.variables]", lpath_6 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Server'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Server'.'/^x-/']", lpath_6 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Server']", lpath_6 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "url" in val:
                rep is None or rep.append(("missing mandatory prop <url> [.'$Server']", path))
        return False
    return True

# check $Server (.'$Server')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Server'
    res = _jm_obj_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Server']", path))
    return res

# object .'$ServerVariable'
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ServerVariable']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if prop == "default":
            # handle must default property
            must_count += 1
            # .'$ServerVariable'.default
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$ServerVariable'.default]", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$ServerVariable'.default]", lpath_8 if path is not None else None))
                return False
        elif prop == "enum":
            # handle may enum property
            # .'$ServerVariable'.enum
            res = isinstance(pval, list)
            if res:
                for arr_3_idx, arr_3_item in enumerate(pval):
                    arr_3_lpath: Path = ((lpath_8 if path is not None else None) + [ arr_3_idx ]) if (lpath_8 if path is not None else None) is not None else None
                    # .'$ServerVariable'.enum.0
                    res = isinstance(arr_3_item, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$ServerVariable'.enum.0]", arr_3_lpath if (lpath_8 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$ServerVariable'.enum]", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$ServerVariable'.enum]", lpath_8 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$ServerVariable'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$ServerVariable'.description]", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$ServerVariable'.description]", lpath_8 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$ServerVariable'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$ServerVariable'.'/^x-/']", lpath_8 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$ServerVariable']", lpath_8 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "default" in val:
                rep is None or rep.append(("missing mandatory prop <default> [.'$ServerVariable']", path))
        return False
    return True

# check $ServerVariable (.'$ServerVariable')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ServerVariable'
    res = _jm_obj_8(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$ServerVariable']", path))
    return res

# object .'$Components'.callbacks
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.callbacks]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.callbacks.''
        # .'$Components'.callbacks.''.'|'.0
        res = json_model_24(pval, lpath_10 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Callback [.'$Components'.callbacks.''.'|'.0]", lpath_10 if path is not None else None))
        if not res:
            # .'$Components'.callbacks.''.'|'.1
            res = json_model_30(pval, lpath_10 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Components'.callbacks.''.'|'.1]", lpath_10 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Components'.callbacks.''.'|']", lpath_10 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_callbacks (.'$Components'.callbacks)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.callbacks
    res = _jm_obj_10(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Components'.callbacks]", path))
    return res

# object .'$Components'.examples
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.examples.''
        # .'$Components'.examples.''.'|'.0
        res = json_model_25(pval, lpath_11 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$Components'.examples.''.'|'.0]", lpath_11 if path is not None else None))
        if not res:
            # .'$Components'.examples.''.'|'.1
            res = json_model_30(pval, lpath_11 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Components'.examples.''.'|'.1]", lpath_11 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Components'.examples.''.'|']", lpath_11 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_examples (.'$Components'.examples)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.examples
    res = _jm_obj_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Components'.examples]", path))
    return res

# object .'$Components'.headers.''.'|'.1.content
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.headers.''.'|'.1.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.headers.''.'|'.1.content.''
        res = json_model_20(pval, lpath_14 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$Components'.headers.''.'|'.1.content.'']", lpath_14 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Components'.headers.''.'|'.1
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.headers.''.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # .'$Components'.headers.''.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.headers.''.'|'.1.description]", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.headers.''.'|'.1.description]", lpath_13 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$Components'.headers.''.'|'.1.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Components'.headers.''.'|'.1.required]", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.headers.''.'|'.1.required]", lpath_13 if path is not None else None))
                return False
        elif prop == "deprecated":
            # handle may deprecated property
            # .'$Components'.headers.''.'|'.1.deprecated
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Components'.headers.''.'|'.1.deprecated]", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.headers.''.'|'.1.deprecated]", lpath_13 if path is not None else None))
                return False
        elif prop == "allowEmptyValue":
            # handle may allowEmptyValue property
            # .'$Components'.headers.''.'|'.1.allowEmptyValue
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Components'.headers.''.'|'.1.allowEmptyValue]", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.headers.''.'|'.1.allowEmptyValue]", lpath_13 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$Components'.headers.''.'|'.1.content
            res = _jm_obj_14(pval, lpath_13 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Components'.headers.''.'|'.1.content]", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.headers.''.'|'.1.content]", lpath_13 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Components'.headers.''.'|'.1.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Components'.headers.''.'|'.1.'/^x-/']", lpath_13 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Components'.headers.''.'|'.1]", lpath_13 if path is not None else None))
            return False
    return True

# check _jm_obj_15_map_allowEmptyValue (.'$Components'.headers.''.'|'.0.allowEmptyValue)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.headers.''.'|'.0.allowEmptyValue
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Components'.headers.''.'|'.0.allowEmptyValue]", path))
    return res

# check _jm_obj_15_map_allowReserved (.'$Components'.headers.''.'|'.0.allowReserved)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.headers.''.'|'.0.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Components'.headers.''.'|'.0.allowReserved]", path))
    return res

# check _jm_obj_15_map_deprecated (.'$Components'.headers.''.'|'.0.deprecated)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.headers.''.'|'.0.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Components'.headers.''.'|'.0.deprecated]", path))
    return res

# check _jm_obj_15_map_description (.'$Components'.headers.''.'|'.0.description)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.headers.''.'|'.0.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Components'.headers.''.'|'.0.description]", path))
    return res

# check _jm_obj_15_map_example (.'$Components'.headers.''.'|'.0.example)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.headers.''.'|'.0.example
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$Components'.headers.''.'|'.0.example]", path))
    return res

# object .'$Components'.headers.''.'|'.0.examples
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.headers.''.'|'.0.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.headers.''.'|'.0.examples.''
        # .'$Components'.headers.''.'|'.0.examples.''.'|'.0
        res = json_model_25(pval, lpath_16 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$Components'.headers.''.'|'.0.examples.''.'|'.0]", lpath_16 if path is not None else None))
        if not res:
            # .'$Components'.headers.''.'|'.0.examples.''.'|'.1
            res = json_model_30(pval, lpath_16 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Components'.headers.''.'|'.0.examples.''.'|'.1]", lpath_16 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Components'.headers.''.'|'.0.examples.''.'|']", lpath_16 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_15_map_examples (.'$Components'.headers.''.'|'.0.examples)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.headers.''.'|'.0.examples
    res = _jm_obj_16(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Components'.headers.''.'|'.0.examples]", path))
    return res

# check _jm_obj_15_map_explode (.'$Components'.headers.''.'|'.0.explode)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.headers.''.'|'.0.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Components'.headers.''.'|'.0.explode]", path))
    return res

# check _jm_obj_15_map_required (.'$Components'.headers.''.'|'.0.required)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.headers.''.'|'.0.required
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Components'.headers.''.'|'.0.required]", path))
    return res

# check _jm_obj_15_map_schema (.'$Components'.headers.''.'|'.0.schema)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.headers.''.'|'.0.schema
    res = json_model_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$Components'.headers.''.'|'.0.schema]", path))
    return res

# check _jm_obj_15_map_style (.'$Components'.headers.''.'|'.0.style)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.headers.''.'|'.0.style
    res = json_model_15(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Style [.'$Components'.headers.''.'|'.0.style]", path))
    return res


# object .'$Components'.headers.''.'|'.0
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.headers.''.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_15_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_15 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Components'.headers.''.'|'.0]", lpath_15 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Components'.headers.''.'|'.0.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Components'.headers.''.'|'.0.'/^x-/']", lpath_15 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Components'.headers.''.'|'.0]", lpath_15 if path is not None else None))
            return False
    return True

# object .'$Components'.headers
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.headers]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.headers.''
        res = isinstance(pval, dict)
        if not res:
            rep is None or rep.append(("unexpected type [.'$Components'.headers.''.'|']", lpath_12 if path is not None else None))
        if res:
            # .'$Components'.headers.''.'|'.0
            res = _jm_obj_15(pval, lpath_12 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Components'.headers.''.'|'.0]", lpath_12 if path is not None else None))
            if not res:
                # .'$Components'.headers.''.'|'.1
                res = _jm_obj_13(pval, lpath_12 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Components'.headers.''.'|'.1]", lpath_12 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Components'.headers.''.'|']", lpath_12 if path is not None else None))
        if not res:
            # .'$Components'.headers.''.'|'
            res = json_model_30(pval, lpath_12 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Components'.headers.''.'|']", lpath_12 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_headers (.'$Components'.headers)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.headers
    res = _jm_obj_12(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Components'.headers]", path))
    return res

# object .'$Components'.links.''.'|'.1.parameters
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.links.''.'|'.1.parameters]", path))
        return False
    # accept any object
    return True

# object .'$Components'.links.''.'|'.1
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.links.''.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        if prop == "operationId":
            # handle must operationId property
            must_count += 1
            # .'$Components'.links.''.'|'.1.operationId
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.links.''.'|'.1.operationId]", lpath_18 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.links.''.'|'.1.operationId]", lpath_18 if path is not None else None))
                return False
        elif prop == "parameters":
            # handle may parameters property
            # .'$Components'.links.''.'|'.1.parameters
            res = _jm_obj_19(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Components'.links.''.'|'.1.parameters]", lpath_18 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.links.''.'|'.1.parameters]", lpath_18 if path is not None else None))
                return False
        elif prop == "requestBody":
            # handle may requestBody property
            # .'$Components'.links.''.'|'.1.requestBody
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Components'.links.''.'|'.1.requestBody]", lpath_18 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.links.''.'|'.1.requestBody]", lpath_18 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Components'.links.''.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.links.''.'|'.1.description]", lpath_18 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.links.''.'|'.1.description]", lpath_18 if path is not None else None))
                return False
        elif prop == "server":
            # handle may server property
            # .'$Components'.links.''.'|'.1.server
            res = json_model_6(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [.'$Components'.links.''.'|'.1.server]", lpath_18 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.links.''.'|'.1.server]", lpath_18 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Components'.links.''.'|'.1.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Components'.links.''.'|'.1.'/^x-/']", lpath_18 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Components'.links.''.'|'.1]", lpath_18 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "operationId" in val:
                rep is None or rep.append(("missing mandatory prop <operationId> [.'$Components'.links.''.'|'.1]", path))
        return False
    return True

# object .'$Components'.links.''.'|'.0.parameters
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.links.''.'|'.0.parameters]", path))
        return False
    # accept any object
    return True

# object .'$Components'.links.''.'|'.0
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.links.''.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        if prop == "operationRef":
            # handle must operationRef property
            must_count += 1
            # .'$Components'.links.''.'|'.0.operationRef
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.links.''.'|'.0.operationRef]", lpath_19 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.links.''.'|'.0.operationRef]", lpath_19 if path is not None else None))
                return False
        elif prop == "parameters":
            # handle may parameters property
            # .'$Components'.links.''.'|'.0.parameters
            res = _jm_obj_21(pval, lpath_19 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Components'.links.''.'|'.0.parameters]", lpath_19 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.links.''.'|'.0.parameters]", lpath_19 if path is not None else None))
                return False
        elif prop == "requestBody":
            # handle may requestBody property
            # .'$Components'.links.''.'|'.0.requestBody
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Components'.links.''.'|'.0.requestBody]", lpath_19 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.links.''.'|'.0.requestBody]", lpath_19 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Components'.links.''.'|'.0.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.links.''.'|'.0.description]", lpath_19 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.links.''.'|'.0.description]", lpath_19 if path is not None else None))
                return False
        elif prop == "server":
            # handle may server property
            # .'$Components'.links.''.'|'.0.server
            res = json_model_6(pval, lpath_19 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [.'$Components'.links.''.'|'.0.server]", lpath_19 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.links.''.'|'.0.server]", lpath_19 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Components'.links.''.'|'.0.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Components'.links.''.'|'.0.'/^x-/']", lpath_19 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Components'.links.''.'|'.0]", lpath_19 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "operationRef" in val:
                rep is None or rep.append(("missing mandatory prop <operationRef> [.'$Components'.links.''.'|'.0]", path))
        return False
    return True

# object .'$Components'.links
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.links]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.links.''
        res = isinstance(pval, dict)
        if not res:
            rep is None or rep.append(("unexpected type [.'$Components'.links.''.'|']", lpath_17 if path is not None else None))
        if res:
            # .'$Components'.links.''.'|'.0
            res = _jm_obj_20(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Components'.links.''.'|'.0]", lpath_17 if path is not None else None))
            if not res:
                # .'$Components'.links.''.'|'.1
                res = _jm_obj_18(pval, lpath_17 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Components'.links.''.'|'.1]", lpath_17 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Components'.links.''.'|']", lpath_17 if path is not None else None))
        if not res:
            # .'$Components'.links.''.'|'
            res = json_model_30(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Components'.links.''.'|']", lpath_17 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_links (.'$Components'.links)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.links
    res = _jm_obj_17(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Components'.links]", path))
    return res


# object .'$Components'.parameters.''.'|'.1.content
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.parameters.''.'|'.1.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.parameters.''.'|'.1.content.''
        res = json_model_20(pval, lpath_22 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$Components'.parameters.''.'|'.1.content.'']", lpath_22 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Components'.parameters.''.'|'.1
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.parameters.''.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$Components'.parameters.''.'|'.1.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.parameters.''.'|'.1.name]", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.parameters.''.'|'.1.name]", lpath_21 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$Components'.parameters.''.'|'.1.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_0
            if not res:
                rep is None or rep.append(("value not in enum [.'$Components'.parameters.''.'|'.1.in.'|']", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.parameters.''.'|'.1.in]", lpath_21 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Components'.parameters.''.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.parameters.''.'|'.1.description]", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.parameters.''.'|'.1.description]", lpath_21 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$Components'.parameters.''.'|'.1.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Components'.parameters.''.'|'.1.required]", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.parameters.''.'|'.1.required]", lpath_21 if path is not None else None))
                return False
        elif prop == "deprecated":
            # handle may deprecated property
            # .'$Components'.parameters.''.'|'.1.deprecated
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Components'.parameters.''.'|'.1.deprecated]", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.parameters.''.'|'.1.deprecated]", lpath_21 if path is not None else None))
                return False
        elif prop == "allowEmptyValue":
            # handle may allowEmptyValue property
            # .'$Components'.parameters.''.'|'.1.allowEmptyValue
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Components'.parameters.''.'|'.1.allowEmptyValue]", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.parameters.''.'|'.1.allowEmptyValue]", lpath_21 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$Components'.parameters.''.'|'.1.content
            res = _jm_obj_24(pval, lpath_21 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Components'.parameters.''.'|'.1.content]", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.parameters.''.'|'.1.content]", lpath_21 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Components'.parameters.''.'|'.1.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Components'.parameters.''.'|'.1.'/^x-/']", lpath_21 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Components'.parameters.''.'|'.1]", lpath_21 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$Components'.parameters.''.'|'.1]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$Components'.parameters.''.'|'.1]", path))
        return False
    return True


# check _jm_obj_25_map_allowEmptyValue (.'$Components'.parameters.''.'|'.0.allowEmptyValue)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.parameters.''.'|'.0.allowEmptyValue
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Components'.parameters.''.'|'.0.allowEmptyValue]", path))
    return res

# check _jm_obj_25_map_allowReserved (.'$Components'.parameters.''.'|'.0.allowReserved)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.parameters.''.'|'.0.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Components'.parameters.''.'|'.0.allowReserved]", path))
    return res

# check _jm_obj_25_map_deprecated (.'$Components'.parameters.''.'|'.0.deprecated)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.parameters.''.'|'.0.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Components'.parameters.''.'|'.0.deprecated]", path))
    return res

# check _jm_obj_25_map_description (.'$Components'.parameters.''.'|'.0.description)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.parameters.''.'|'.0.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Components'.parameters.''.'|'.0.description]", path))
    return res

# check _jm_obj_25_map_example (.'$Components'.parameters.''.'|'.0.example)
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.parameters.''.'|'.0.example
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$Components'.parameters.''.'|'.0.example]", path))
    return res

# object .'$Components'.parameters.''.'|'.0.examples
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.parameters.''.'|'.0.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.parameters.''.'|'.0.examples.''
        # .'$Components'.parameters.''.'|'.0.examples.''.'|'.0
        res = json_model_25(pval, lpath_24 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$Components'.parameters.''.'|'.0.examples.''.'|'.0]", lpath_24 if path is not None else None))
        if not res:
            # .'$Components'.parameters.''.'|'.0.examples.''.'|'.1
            res = json_model_30(pval, lpath_24 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Components'.parameters.''.'|'.0.examples.''.'|'.1]", lpath_24 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Components'.parameters.''.'|'.0.examples.''.'|']", lpath_24 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_25_map_examples (.'$Components'.parameters.''.'|'.0.examples)
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.parameters.''.'|'.0.examples
    res = _jm_obj_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Components'.parameters.''.'|'.0.examples]", path))
    return res

# check _jm_obj_25_map_explode (.'$Components'.parameters.''.'|'.0.explode)
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.parameters.''.'|'.0.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Components'.parameters.''.'|'.0.explode]", path))
    return res

# check _jm_obj_25_map_required (.'$Components'.parameters.''.'|'.0.required)
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.parameters.''.'|'.0.required
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Components'.parameters.''.'|'.0.required]", path))
    return res

# check _jm_obj_25_map_schema (.'$Components'.parameters.''.'|'.0.schema)
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.parameters.''.'|'.0.schema
    res = json_model_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$Components'.parameters.''.'|'.0.schema]", path))
    return res

# check _jm_obj_25_map_style (.'$Components'.parameters.''.'|'.0.style)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.parameters.''.'|'.0.style
    res = json_model_15(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Style [.'$Components'.parameters.''.'|'.0.style]", path))
    return res


# object .'$Components'.parameters.''.'|'.0
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.parameters.''.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$Components'.parameters.''.'|'.0.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.parameters.''.'|'.0.name]", lpath_23 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.parameters.''.'|'.0.name]", lpath_23 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$Components'.parameters.''.'|'.0.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_1
            if not res:
                rep is None or rep.append(("value not in enum [.'$Components'.parameters.''.'|'.0.in.'|']", lpath_23 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.parameters.''.'|'.0.in]", lpath_23 if path is not None else None))
                return False
        elif pfun := _jm_obj_25_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_23 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Components'.parameters.''.'|'.0]", lpath_23 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Components'.parameters.''.'|'.0.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Components'.parameters.''.'|'.0.'/^x-/']", lpath_23 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Components'.parameters.''.'|'.0]", lpath_23 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$Components'.parameters.''.'|'.0]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$Components'.parameters.''.'|'.0]", path))
        return False
    return True

# object .'$Components'.parameters
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.parameters]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.parameters.''
        res = isinstance(pval, dict)
        if not res:
            rep is None or rep.append(("unexpected type [.'$Components'.parameters.''.'|']", lpath_20 if path is not None else None))
        if res:
            # .'$Components'.parameters.''.'|'.0
            res = _jm_obj_25(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Components'.parameters.''.'|'.0]", lpath_20 if path is not None else None))
            if not res:
                # .'$Components'.parameters.''.'|'.1
                res = _jm_obj_23(pval, lpath_20 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Components'.parameters.''.'|'.1]", lpath_20 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Components'.parameters.''.'|']", lpath_20 if path is not None else None))
        if not res:
            # .'$Components'.parameters.''.'|'
            res = json_model_30(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Components'.parameters.''.'|']", lpath_20 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_parameters (.'$Components'.parameters)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.parameters
    res = _jm_obj_22(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Components'.parameters]", path))
    return res

# object .'$Components'.pathItems
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.pathItems]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.pathItems.''
        # .'$Components'.pathItems.''.'|'.0
        res = json_model_10(pval, lpath_25 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $PathItem [.'$Components'.pathItems.''.'|'.0]", lpath_25 if path is not None else None))
        if not res:
            # .'$Components'.pathItems.''.'|'.1
            res = json_model_30(pval, lpath_25 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Components'.pathItems.''.'|'.1]", lpath_25 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Components'.pathItems.''.'|']", lpath_25 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_pathItems (.'$Components'.pathItems)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.pathItems
    res = _jm_obj_27(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Components'.pathItems]", path))
    return res

# object .'$Components'.requestBodies
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.requestBodies]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.requestBodies.''
        # .'$Components'.requestBodies.''.'|'.0
        res = json_model_19(pval, lpath_26 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $RequestBody [.'$Components'.requestBodies.''.'|'.0]", lpath_26 if path is not None else None))
        if not res:
            # .'$Components'.requestBodies.''.'|'.1
            res = json_model_30(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Components'.requestBodies.''.'|'.1]", lpath_26 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Components'.requestBodies.''.'|']", lpath_26 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_requestBodies (.'$Components'.requestBodies)
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.requestBodies
    res = _jm_obj_28(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Components'.requestBodies]", path))
    return res

# object .'$Components'.responses
def _jm_obj_29(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.responses]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.responses.''
        # .'$Components'.responses.''.'|'.0
        res = json_model_23(pval, lpath_27 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Response [.'$Components'.responses.''.'|'.0]", lpath_27 if path is not None else None))
        if not res:
            # .'$Components'.responses.''.'|'.1
            res = json_model_30(pval, lpath_27 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Components'.responses.''.'|'.1]", lpath_27 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Components'.responses.''.'|']", lpath_27 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_responses (.'$Components'.responses)
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.responses
    res = _jm_obj_29(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Components'.responses]", path))
    return res

# object .'$Components'.schemas
def _jm_obj_30(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.schemas]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.schemas.''
        res = json_model_32(pval, lpath_28 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Components'.schemas.'']", lpath_28 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_schemas (.'$Components'.schemas)
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.schemas
    res = _jm_obj_30(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Components'.schemas]", path))
    return res

# object .'$Components'.securitySchemes.''.'|'.5
def _jm_obj_32(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.securitySchemes.''.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # .'$Components'.securitySchemes.''.'|'.5.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.securitySchemes.''.'|'.5.description]", lpath_30 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.securitySchemes.''.'|'.5.description]", lpath_30 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Components'.securitySchemes.''.'|'.5.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Components'.securitySchemes.''.'|'.5.'/^x-/']", lpath_30 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Components'.securitySchemes.''.'|'.5]", lpath_30 if path is not None else None))
            return False
    return True

# object .'$Components'.securitySchemes.''.'|'.4
def _jm_obj_33(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.securitySchemes.''.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Components'.securitySchemes.''.'|'.4.type
            res = isinstance(pval, str) and pval == "openIdConnect"
            if not res:
                rep is None or rep.append(("unexpected _openIdConnect [.'$Components'.securitySchemes.''.'|'.4.type]", lpath_31 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.securitySchemes.''.'|'.4.type]", lpath_31 if path is not None else None))
                return False
        elif prop == "openIdConnectUrl":
            # handle must openIdConnectUrl property
            must_count += 1
            # .'$Components'.securitySchemes.''.'|'.4.openIdConnectUrl
            res = is_valid_url(pval, lpath_31 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$Components'.securitySchemes.''.'|'.4.openIdConnectUrl]", lpath_31 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.securitySchemes.''.'|'.4.openIdConnectUrl]", lpath_31 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Components'.securitySchemes.''.'|'.4.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.securitySchemes.''.'|'.4.description]", lpath_31 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.securitySchemes.''.'|'.4.description]", lpath_31 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Components'.securitySchemes.''.'|'.4]", lpath_31 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "openIdConnectUrl" in val:
                rep is None or rep.append(("missing mandatory prop <openIdConnectUrl> [.'$Components'.securitySchemes.''.'|'.4]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Components'.securitySchemes.''.'|'.4]", path))
        return False
    return True

# object .'$Components'.securitySchemes.''.'|'.3
def _jm_obj_34(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.securitySchemes.''.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Components'.securitySchemes.''.'|'.3.type
            res = isinstance(pval, str) and pval == "oauth2"
            if not res:
                rep is None or rep.append(("unexpected _oauth2 [.'$Components'.securitySchemes.''.'|'.3.type]", lpath_32 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.securitySchemes.''.'|'.3.type]", lpath_32 if path is not None else None))
                return False
        elif prop == "flows":
            # handle must flows property
            must_count += 1
            # .'$Components'.securitySchemes.''.'|'.3.flows
            res = json_model_41(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $OAuthFlows [.'$Components'.securitySchemes.''.'|'.3.flows]", lpath_32 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.securitySchemes.''.'|'.3.flows]", lpath_32 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Components'.securitySchemes.''.'|'.3.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.securitySchemes.''.'|'.3.description]", lpath_32 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.securitySchemes.''.'|'.3.description]", lpath_32 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Components'.securitySchemes.''.'|'.3]", lpath_32 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "flows" in val:
                rep is None or rep.append(("missing mandatory prop <flows> [.'$Components'.securitySchemes.''.'|'.3]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Components'.securitySchemes.''.'|'.3]", path))
        return False
    return True

# object .'$Components'.securitySchemes.''.'|'.2
def _jm_obj_35(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.securitySchemes.''.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Components'.securitySchemes.''.'|'.2.type
            res = isinstance(pval, str) and pval == "http"
            if not res:
                rep is None or rep.append(("unexpected _http [.'$Components'.securitySchemes.''.'|'.2.type]", lpath_33 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.securitySchemes.''.'|'.2.type]", lpath_33 if path is not None else None))
                return False
        elif prop == "scheme":
            # handle must scheme property
            must_count += 1
            # .'$Components'.securitySchemes.''.'|'.2.scheme
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.securitySchemes.''.'|'.2.scheme]", lpath_33 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.securitySchemes.''.'|'.2.scheme]", lpath_33 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Components'.securitySchemes.''.'|'.2.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.securitySchemes.''.'|'.2.description]", lpath_33 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.securitySchemes.''.'|'.2.description]", lpath_33 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Components'.securitySchemes.''.'|'.2]", lpath_33 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "scheme" in val:
                rep is None or rep.append(("missing mandatory prop <scheme> [.'$Components'.securitySchemes.''.'|'.2]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Components'.securitySchemes.''.'|'.2]", path))
        return False
    return True


# object .'$Components'.securitySchemes.''.'|'.1
def _jm_obj_36(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.securitySchemes.''.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Components'.securitySchemes.''.'|'.1.type
            res = isinstance(pval, str) and pval == "http"
            if not res:
                rep is None or rep.append(("unexpected _http [.'$Components'.securitySchemes.''.'|'.1.type]", lpath_34 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.securitySchemes.''.'|'.1.type]", lpath_34 if path is not None else None))
                return False
        elif prop == "scheme":
            # handle must scheme property
            must_count += 1
            # .'$Components'.securitySchemes.''.'|'.1.scheme
            # "/bearer/i"
            res = isinstance(pval, str) and _jm_re_2(pval, lpath_34 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /bearer/i [.'$Components'.securitySchemes.''.'|'.1.scheme]", lpath_34 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.securitySchemes.''.'|'.1.scheme]", lpath_34 if path is not None else None))
                return False
        elif prop == "bearerFormat":
            # handle may bearerFormat property
            # .'$Components'.securitySchemes.''.'|'.1.bearerFormat
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.securitySchemes.''.'|'.1.bearerFormat]", lpath_34 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.securitySchemes.''.'|'.1.bearerFormat]", lpath_34 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Components'.securitySchemes.''.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.securitySchemes.''.'|'.1.description]", lpath_34 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.securitySchemes.''.'|'.1.description]", lpath_34 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Components'.securitySchemes.''.'|'.1]", lpath_34 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "scheme" in val:
                rep is None or rep.append(("missing mandatory prop <scheme> [.'$Components'.securitySchemes.''.'|'.1]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Components'.securitySchemes.''.'|'.1]", path))
        return False
    return True


# object .'$Components'.securitySchemes.''.'|'.0
def _jm_obj_37(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.securitySchemes.''.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Components'.securitySchemes.''.'|'.0.type
            res = isinstance(pval, str) and pval == "apiKey"
            if not res:
                rep is None or rep.append(("unexpected _apiKey [.'$Components'.securitySchemes.''.'|'.0.type]", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.securitySchemes.''.'|'.0.type]", lpath_35 if path is not None else None))
                return False
        elif prop == "name":
            # handle must name property
            must_count += 1
            # .'$Components'.securitySchemes.''.'|'.0.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.securitySchemes.''.'|'.0.name]", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.securitySchemes.''.'|'.0.name]", lpath_35 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$Components'.securitySchemes.''.'|'.0.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_2
            if not res:
                rep is None or rep.append(("value not in enum [.'$Components'.securitySchemes.''.'|'.0.in.'|']", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Components'.securitySchemes.''.'|'.0.in]", lpath_35 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Components'.securitySchemes.''.'|'.0.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Components'.securitySchemes.''.'|'.0.description]", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Components'.securitySchemes.''.'|'.0.description]", lpath_35 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Components'.securitySchemes.''.'|'.0]", lpath_35 if path is not None else None))
            return False
    if must_count != 3:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$Components'.securitySchemes.''.'|'.0]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$Components'.securitySchemes.''.'|'.0]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Components'.securitySchemes.''.'|'.0]", path))
        return False
    return True

# object .'$Components'.securitySchemes
def _jm_obj_31(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components'.securitySchemes]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Components'.securitySchemes.''
        res = isinstance(pval, dict)
        if not res:
            rep is None or rep.append(("unexpected type [.'$Components'.securitySchemes.''.'|']", lpath_29 if path is not None else None))
        if res:
            # .'$Components'.securitySchemes.''.'|'.0
            res = _jm_obj_37(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Components'.securitySchemes.''.'|'.0]", lpath_29 if path is not None else None))
            if not res:
                # .'$Components'.securitySchemes.''.'|'.1
                res = _jm_obj_36(pval, lpath_29 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Components'.securitySchemes.''.'|'.1]", lpath_29 if path is not None else None))
                if not res:
                    # .'$Components'.securitySchemes.''.'|'.2
                    res = _jm_obj_35(pval, lpath_29 if path is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Components'.securitySchemes.''.'|'.2]", lpath_29 if path is not None else None))
                    if not res:
                        # .'$Components'.securitySchemes.''.'|'.3
                        res = _jm_obj_34(pval, lpath_29 if path is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$Components'.securitySchemes.''.'|'.3]", lpath_29 if path is not None else None))
                        if not res:
                            # .'$Components'.securitySchemes.''.'|'.4
                            res = _jm_obj_33(pval, lpath_29 if path is not None else None, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$Components'.securitySchemes.''.'|'.4]", lpath_29 if path is not None else None))
                            if not res:
                                # .'$Components'.securitySchemes.''.'|'.5
                                res = _jm_obj_32(pval, lpath_29 if path is not None else None, rep)
                                if not res:
                                    rep is None or rep.append(("unexpected element [.'$Components'.securitySchemes.''.'|'.5]", lpath_29 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Components'.securitySchemes.''.'|']", lpath_29 if path is not None else None))
        if not res:
            # .'$Components'.securitySchemes.''.'|'
            res = json_model_30(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Components'.securitySchemes.''.'|']", lpath_29 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_securitySchemes (.'$Components'.securitySchemes)
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'.securitySchemes
    res = _jm_obj_31(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Components'.securitySchemes]", path))
    return res


# object .'$Components'
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Components']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_9_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_9 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Components']", lpath_9 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Components'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Components'.'/^x-/']", lpath_9 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Components']", lpath_9 if path is not None else None))
            return False
    return True

# check $Components (.'$Components')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Components'
    res = _jm_obj_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Components']", path))
    return res

# object .'$Paths'
def _jm_obj_38(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Paths']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_36: Path = (path + [ prop ]) if path is not None else None
        if prop.startswith("/"):
            # handle 2 re props
            # .'$Paths'.'/^//'
            res = json_model_10(pval, lpath_36 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $PathItem [.'$Paths'.'/^//']", lpath_36 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("x-"):
            # handle 2 re props
            # .'$Paths'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Paths'.'/^x-/']", lpath_36 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Paths']", lpath_36 if path is not None else None))
            return False
    return True

# check $Paths (.'$Paths')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Paths'
    res = _jm_obj_38(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Paths']", path))
    return res

# check _jm_obj_39_map_$ref (.'$PathItem'.'$ref')
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.'$ref'
    res = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI [.'$PathItem'.'$ref']", path))
    return res

# check _jm_obj_39_map_delete (.'$PathItem'.delete)
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.delete
    res = json_model_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [.'$PathItem'.delete]", path))
    return res

# check _jm_obj_39_map_description (.'$PathItem'.description)
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$PathItem'.description]", path))
    return res

# check _jm_obj_39_map_get (.'$PathItem'.get)
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.get
    res = json_model_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [.'$PathItem'.get]", path))
    return res

# check _jm_obj_39_map_head (.'$PathItem'.head)
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.head
    res = json_model_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [.'$PathItem'.head]", path))
    return res

# check _jm_obj_39_map_options (.'$PathItem'.options)
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.options
    res = json_model_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [.'$PathItem'.options]", path))
    return res


# object .'$PathItem'.parameters.0.'|'.1.content
def _jm_obj_41(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$PathItem'.parameters.0.'|'.1.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_39: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$PathItem'.parameters.0.'|'.1.content.''
        res = json_model_20(pval, lpath_39 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$PathItem'.parameters.0.'|'.1.content.'']", lpath_39 if path is not None else None))
        if not res:
            return False
    return True

# object .'$PathItem'.parameters.0.'|'.1
def _jm_obj_40(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$PathItem'.parameters.0.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_38: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$PathItem'.parameters.0.'|'.1.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$PathItem'.parameters.0.'|'.1.name]", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$PathItem'.parameters.0.'|'.1.name]", lpath_38 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$PathItem'.parameters.0.'|'.1.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_3
            if not res:
                rep is None or rep.append(("value not in enum [.'$PathItem'.parameters.0.'|'.1.in.'|']", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$PathItem'.parameters.0.'|'.1.in]", lpath_38 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$PathItem'.parameters.0.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$PathItem'.parameters.0.'|'.1.description]", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$PathItem'.parameters.0.'|'.1.description]", lpath_38 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$PathItem'.parameters.0.'|'.1.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$PathItem'.parameters.0.'|'.1.required]", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$PathItem'.parameters.0.'|'.1.required]", lpath_38 if path is not None else None))
                return False
        elif prop == "deprecated":
            # handle may deprecated property
            # .'$PathItem'.parameters.0.'|'.1.deprecated
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$PathItem'.parameters.0.'|'.1.deprecated]", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$PathItem'.parameters.0.'|'.1.deprecated]", lpath_38 if path is not None else None))
                return False
        elif prop == "allowEmptyValue":
            # handle may allowEmptyValue property
            # .'$PathItem'.parameters.0.'|'.1.allowEmptyValue
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$PathItem'.parameters.0.'|'.1.allowEmptyValue]", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$PathItem'.parameters.0.'|'.1.allowEmptyValue]", lpath_38 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$PathItem'.parameters.0.'|'.1.content
            res = _jm_obj_41(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$PathItem'.parameters.0.'|'.1.content]", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$PathItem'.parameters.0.'|'.1.content]", lpath_38 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$PathItem'.parameters.0.'|'.1.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$PathItem'.parameters.0.'|'.1.'/^x-/']", lpath_38 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$PathItem'.parameters.0.'|'.1]", lpath_38 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$PathItem'.parameters.0.'|'.1]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$PathItem'.parameters.0.'|'.1]", path))
        return False
    return True


# check _jm_obj_42_map_allowEmptyValue (.'$PathItem'.parameters.0.'|'.0.allowEmptyValue)
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.parameters.0.'|'.0.allowEmptyValue
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$PathItem'.parameters.0.'|'.0.allowEmptyValue]", path))
    return res

# check _jm_obj_42_map_allowReserved (.'$PathItem'.parameters.0.'|'.0.allowReserved)
def _jm_f_46(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.parameters.0.'|'.0.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$PathItem'.parameters.0.'|'.0.allowReserved]", path))
    return res

# check _jm_obj_42_map_deprecated (.'$PathItem'.parameters.0.'|'.0.deprecated)
def _jm_f_47(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.parameters.0.'|'.0.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$PathItem'.parameters.0.'|'.0.deprecated]", path))
    return res

# check _jm_obj_42_map_description (.'$PathItem'.parameters.0.'|'.0.description)
def _jm_f_48(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.parameters.0.'|'.0.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$PathItem'.parameters.0.'|'.0.description]", path))
    return res

# check _jm_obj_42_map_example (.'$PathItem'.parameters.0.'|'.0.example)
def _jm_f_49(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.parameters.0.'|'.0.example
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$PathItem'.parameters.0.'|'.0.example]", path))
    return res

# object .'$PathItem'.parameters.0.'|'.0.examples
def _jm_obj_43(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$PathItem'.parameters.0.'|'.0.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_41: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$PathItem'.parameters.0.'|'.0.examples.''
        # .'$PathItem'.parameters.0.'|'.0.examples.''.'|'.0
        res = json_model_25(pval, lpath_41 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$PathItem'.parameters.0.'|'.0.examples.''.'|'.0]", lpath_41 if path is not None else None))
        if not res:
            # .'$PathItem'.parameters.0.'|'.0.examples.''.'|'.1
            res = json_model_30(pval, lpath_41 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$PathItem'.parameters.0.'|'.0.examples.''.'|'.1]", lpath_41 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$PathItem'.parameters.0.'|'.0.examples.''.'|']", lpath_41 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_42_map_examples (.'$PathItem'.parameters.0.'|'.0.examples)
def _jm_f_50(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.parameters.0.'|'.0.examples
    res = _jm_obj_43(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$PathItem'.parameters.0.'|'.0.examples]", path))
    return res

# check _jm_obj_42_map_explode (.'$PathItem'.parameters.0.'|'.0.explode)
def _jm_f_51(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.parameters.0.'|'.0.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$PathItem'.parameters.0.'|'.0.explode]", path))
    return res

# check _jm_obj_42_map_required (.'$PathItem'.parameters.0.'|'.0.required)
def _jm_f_52(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.parameters.0.'|'.0.required
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$PathItem'.parameters.0.'|'.0.required]", path))
    return res

# check _jm_obj_42_map_schema (.'$PathItem'.parameters.0.'|'.0.schema)
def _jm_f_53(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.parameters.0.'|'.0.schema
    res = json_model_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$PathItem'.parameters.0.'|'.0.schema]", path))
    return res

# check _jm_obj_42_map_style (.'$PathItem'.parameters.0.'|'.0.style)
def _jm_f_54(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.parameters.0.'|'.0.style
    res = json_model_15(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Style [.'$PathItem'.parameters.0.'|'.0.style]", path))
    return res


# object .'$PathItem'.parameters.0.'|'.0
def _jm_obj_42(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$PathItem'.parameters.0.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_40: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$PathItem'.parameters.0.'|'.0.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$PathItem'.parameters.0.'|'.0.name]", lpath_40 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$PathItem'.parameters.0.'|'.0.name]", lpath_40 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$PathItem'.parameters.0.'|'.0.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_4
            if not res:
                rep is None or rep.append(("value not in enum [.'$PathItem'.parameters.0.'|'.0.in.'|']", lpath_40 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$PathItem'.parameters.0.'|'.0.in]", lpath_40 if path is not None else None))
                return False
        elif pfun := _jm_obj_42_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_40 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$PathItem'.parameters.0.'|'.0]", lpath_40 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$PathItem'.parameters.0.'|'.0.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$PathItem'.parameters.0.'|'.0.'/^x-/']", lpath_40 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$PathItem'.parameters.0.'|'.0]", lpath_40 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$PathItem'.parameters.0.'|'.0]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$PathItem'.parameters.0.'|'.0]", path))
        return False
    return True

# check _jm_obj_39_map_parameters (.'$PathItem'.parameters)
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.parameters
    res = isinstance(val, list)
    if res:
        for arr_4_idx, arr_4_item in enumerate(val):
            arr_4_lpath: Path = (path + [ arr_4_idx ]) if path is not None else None
            # .'$PathItem'.parameters.0
            res = isinstance(arr_4_item, dict)
            if not res:
                rep is None or rep.append(("unexpected type [.'$PathItem'.parameters.0.'|']", arr_4_lpath if path is not None else None))
            if res:
                # .'$PathItem'.parameters.0.'|'.0
                res = _jm_obj_42(arr_4_item, arr_4_lpath if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$PathItem'.parameters.0.'|'.0]", arr_4_lpath if path is not None else None))
                if not res:
                    # .'$PathItem'.parameters.0.'|'.1
                    res = _jm_obj_40(arr_4_item, arr_4_lpath if path is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$PathItem'.parameters.0.'|'.1]", arr_4_lpath if path is not None else None))
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("no model matched [.'$PathItem'.parameters.0.'|']", arr_4_lpath if path is not None else None))
            if not res:
                # .'$PathItem'.parameters.0.'|'
                res = json_model_30(arr_4_item, arr_4_lpath if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Reference [.'$PathItem'.parameters.0.'|']", arr_4_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$PathItem'.parameters]", path))
    return res

# check _jm_obj_39_map_patch (.'$PathItem'.patch)
def _jm_f_55(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.patch
    res = json_model_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [.'$PathItem'.patch]", path))
    return res

# check _jm_obj_39_map_post (.'$PathItem'.post)
def _jm_f_56(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.post
    res = json_model_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [.'$PathItem'.post]", path))
    return res

# check _jm_obj_39_map_put (.'$PathItem'.put)
def _jm_f_57(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.put
    res = json_model_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [.'$PathItem'.put]", path))
    return res

# check _jm_obj_39_map_servers (.'$PathItem'.servers)
def _jm_f_58(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.servers
    res = isinstance(val, list)
    if res:
        for arr_5_idx, arr_5_item in enumerate(val):
            arr_5_lpath: Path = (path + [ arr_5_idx ]) if path is not None else None
            # .'$PathItem'.servers.0
            res = json_model_11(arr_5_item, arr_5_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Operation [.'$PathItem'.servers.0]", arr_5_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$PathItem'.servers]", path))
    return res

# check _jm_obj_39_map_summary (.'$PathItem'.summary)
def _jm_f_59(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.summary
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$PathItem'.summary]", path))
    return res

# check _jm_obj_39_map_trace (.'$PathItem'.trace)
def _jm_f_60(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'.trace
    res = json_model_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Operation [.'$PathItem'.trace]", path))
    return res


# object .'$PathItem'
def _jm_obj_39(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$PathItem']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_37: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_39_map.get(prop):
            # handle 13 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_37 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$PathItem']", lpath_37 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$PathItem'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$PathItem'.'/^x-/']", lpath_37 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$PathItem']", lpath_37 if path is not None else None))
            return False
    return True

# check $PathItem (.'$PathItem')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PathItem'
    res = _jm_obj_39(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$PathItem']", path))
    return res

# object .'$Operation'.callbacks
def _jm_obj_45(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Operation'.callbacks]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_43: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Operation'.callbacks.''
        # .'$Operation'.callbacks.''.'|'.0
        res = json_model_24(pval, lpath_43 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Callback [.'$Operation'.callbacks.''.'|'.0]", lpath_43 if path is not None else None))
        if not res:
            # .'$Operation'.callbacks.''.'|'.1
            res = json_model_30(pval, lpath_43 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Operation'.callbacks.''.'|'.1]", lpath_43 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Operation'.callbacks.''.'|']", lpath_43 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_44_map_callbacks (.'$Operation'.callbacks)
def _jm_f_61(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.callbacks
    res = _jm_obj_45(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Operation'.callbacks]", path))
    return res

# check _jm_obj_44_map_deprecated (.'$Operation'.deprecated)
def _jm_f_62(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Operation'.deprecated]", path))
    return res

# check _jm_obj_44_map_description (.'$Operation'.description)
def _jm_f_63(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Operation'.description]", path))
    return res

# check _jm_obj_44_map_externalDocs (.'$Operation'.externalDocs)
def _jm_f_64(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.externalDocs
    res = json_model_12(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ExternalDocumentation [.'$Operation'.externalDocs]", path))
    return res

# check _jm_obj_44_map_operationId (.'$Operation'.operationId)
def _jm_f_65(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.operationId
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Operation'.operationId]", path))
    return res


# object .'$Operation'.parameters.0.'|'.1.content
def _jm_obj_47(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Operation'.parameters.0.'|'.1.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_45: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Operation'.parameters.0.'|'.1.content.''
        res = json_model_20(pval, lpath_45 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$Operation'.parameters.0.'|'.1.content.'']", lpath_45 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Operation'.parameters.0.'|'.1
def _jm_obj_46(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Operation'.parameters.0.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_44: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$Operation'.parameters.0.'|'.1.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Operation'.parameters.0.'|'.1.name]", lpath_44 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Operation'.parameters.0.'|'.1.name]", lpath_44 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$Operation'.parameters.0.'|'.1.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_5
            if not res:
                rep is None or rep.append(("value not in enum [.'$Operation'.parameters.0.'|'.1.in.'|']", lpath_44 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Operation'.parameters.0.'|'.1.in]", lpath_44 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Operation'.parameters.0.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Operation'.parameters.0.'|'.1.description]", lpath_44 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Operation'.parameters.0.'|'.1.description]", lpath_44 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$Operation'.parameters.0.'|'.1.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Operation'.parameters.0.'|'.1.required]", lpath_44 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Operation'.parameters.0.'|'.1.required]", lpath_44 if path is not None else None))
                return False
        elif prop == "deprecated":
            # handle may deprecated property
            # .'$Operation'.parameters.0.'|'.1.deprecated
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Operation'.parameters.0.'|'.1.deprecated]", lpath_44 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Operation'.parameters.0.'|'.1.deprecated]", lpath_44 if path is not None else None))
                return False
        elif prop == "allowEmptyValue":
            # handle may allowEmptyValue property
            # .'$Operation'.parameters.0.'|'.1.allowEmptyValue
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Operation'.parameters.0.'|'.1.allowEmptyValue]", lpath_44 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Operation'.parameters.0.'|'.1.allowEmptyValue]", lpath_44 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$Operation'.parameters.0.'|'.1.content
            res = _jm_obj_47(pval, lpath_44 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Operation'.parameters.0.'|'.1.content]", lpath_44 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Operation'.parameters.0.'|'.1.content]", lpath_44 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Operation'.parameters.0.'|'.1.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Operation'.parameters.0.'|'.1.'/^x-/']", lpath_44 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Operation'.parameters.0.'|'.1]", lpath_44 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$Operation'.parameters.0.'|'.1]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$Operation'.parameters.0.'|'.1]", path))
        return False
    return True


# check _jm_obj_48_map_allowEmptyValue (.'$Operation'.parameters.0.'|'.0.allowEmptyValue)
def _jm_f_67(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.parameters.0.'|'.0.allowEmptyValue
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Operation'.parameters.0.'|'.0.allowEmptyValue]", path))
    return res

# check _jm_obj_48_map_allowReserved (.'$Operation'.parameters.0.'|'.0.allowReserved)
def _jm_f_68(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.parameters.0.'|'.0.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Operation'.parameters.0.'|'.0.allowReserved]", path))
    return res

# check _jm_obj_48_map_deprecated (.'$Operation'.parameters.0.'|'.0.deprecated)
def _jm_f_69(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.parameters.0.'|'.0.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Operation'.parameters.0.'|'.0.deprecated]", path))
    return res

# check _jm_obj_48_map_description (.'$Operation'.parameters.0.'|'.0.description)
def _jm_f_70(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.parameters.0.'|'.0.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Operation'.parameters.0.'|'.0.description]", path))
    return res

# check _jm_obj_48_map_example (.'$Operation'.parameters.0.'|'.0.example)
def _jm_f_71(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.parameters.0.'|'.0.example
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$Operation'.parameters.0.'|'.0.example]", path))
    return res

# object .'$Operation'.parameters.0.'|'.0.examples
def _jm_obj_49(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Operation'.parameters.0.'|'.0.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_47: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Operation'.parameters.0.'|'.0.examples.''
        # .'$Operation'.parameters.0.'|'.0.examples.''.'|'.0
        res = json_model_25(pval, lpath_47 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$Operation'.parameters.0.'|'.0.examples.''.'|'.0]", lpath_47 if path is not None else None))
        if not res:
            # .'$Operation'.parameters.0.'|'.0.examples.''.'|'.1
            res = json_model_30(pval, lpath_47 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Operation'.parameters.0.'|'.0.examples.''.'|'.1]", lpath_47 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Operation'.parameters.0.'|'.0.examples.''.'|']", lpath_47 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_48_map_examples (.'$Operation'.parameters.0.'|'.0.examples)
def _jm_f_72(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.parameters.0.'|'.0.examples
    res = _jm_obj_49(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Operation'.parameters.0.'|'.0.examples]", path))
    return res

# check _jm_obj_48_map_explode (.'$Operation'.parameters.0.'|'.0.explode)
def _jm_f_73(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.parameters.0.'|'.0.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Operation'.parameters.0.'|'.0.explode]", path))
    return res

# check _jm_obj_48_map_required (.'$Operation'.parameters.0.'|'.0.required)
def _jm_f_74(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.parameters.0.'|'.0.required
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Operation'.parameters.0.'|'.0.required]", path))
    return res

# check _jm_obj_48_map_schema (.'$Operation'.parameters.0.'|'.0.schema)
def _jm_f_75(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.parameters.0.'|'.0.schema
    res = json_model_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$Operation'.parameters.0.'|'.0.schema]", path))
    return res

# check _jm_obj_48_map_style (.'$Operation'.parameters.0.'|'.0.style)
def _jm_f_76(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.parameters.0.'|'.0.style
    res = json_model_15(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Style [.'$Operation'.parameters.0.'|'.0.style]", path))
    return res


# object .'$Operation'.parameters.0.'|'.0
def _jm_obj_48(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Operation'.parameters.0.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_46: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$Operation'.parameters.0.'|'.0.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Operation'.parameters.0.'|'.0.name]", lpath_46 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Operation'.parameters.0.'|'.0.name]", lpath_46 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$Operation'.parameters.0.'|'.0.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_6
            if not res:
                rep is None or rep.append(("value not in enum [.'$Operation'.parameters.0.'|'.0.in.'|']", lpath_46 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Operation'.parameters.0.'|'.0.in]", lpath_46 if path is not None else None))
                return False
        elif pfun := _jm_obj_48_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_46 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Operation'.parameters.0.'|'.0]", lpath_46 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Operation'.parameters.0.'|'.0.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Operation'.parameters.0.'|'.0.'/^x-/']", lpath_46 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Operation'.parameters.0.'|'.0]", lpath_46 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$Operation'.parameters.0.'|'.0]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$Operation'.parameters.0.'|'.0]", path))
        return False
    return True

# check _jm_obj_44_map_parameters (.'$Operation'.parameters)
def _jm_f_66(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.parameters
    res = isinstance(val, list)
    if res:
        for arr_6_idx, arr_6_item in enumerate(val):
            arr_6_lpath: Path = (path + [ arr_6_idx ]) if path is not None else None
            # .'$Operation'.parameters.0
            res = isinstance(arr_6_item, dict)
            if not res:
                rep is None or rep.append(("unexpected type [.'$Operation'.parameters.0.'|']", arr_6_lpath if path is not None else None))
            if res:
                # .'$Operation'.parameters.0.'|'.0
                res = _jm_obj_48(arr_6_item, arr_6_lpath if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Operation'.parameters.0.'|'.0]", arr_6_lpath if path is not None else None))
                if not res:
                    # .'$Operation'.parameters.0.'|'.1
                    res = _jm_obj_46(arr_6_item, arr_6_lpath if path is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Operation'.parameters.0.'|'.1]", arr_6_lpath if path is not None else None))
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("no model matched [.'$Operation'.parameters.0.'|']", arr_6_lpath if path is not None else None))
            if not res:
                # .'$Operation'.parameters.0.'|'
                res = json_model_30(arr_6_item, arr_6_lpath if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Reference [.'$Operation'.parameters.0.'|']", arr_6_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Operation'.parameters]", path))
    return res

# check _jm_obj_44_map_requestBody (.'$Operation'.requestBody)
def _jm_f_77(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.requestBody
    # .'$Operation'.requestBody.'|'.0
    res = json_model_19(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $RequestBody [.'$Operation'.requestBody.'|'.0]", path))
    if not res:
        # .'$Operation'.requestBody.'|'.1
        res = json_model_30(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Reference [.'$Operation'.requestBody.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Operation'.requestBody.'|']", path))
    return res

# check _jm_obj_44_map_responses (.'$Operation'.responses)
def _jm_f_78(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.responses
    res = json_model_22(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Responses [.'$Operation'.responses]", path))
    return res

# check _jm_obj_44_map_security (.'$Operation'.security)
def _jm_f_79(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.security
    res = isinstance(val, list)
    if res:
        for arr_7_idx, arr_7_item in enumerate(val):
            arr_7_lpath: Path = (path + [ arr_7_idx ]) if path is not None else None
            # .'$Operation'.security.0
            res = json_model_43(arr_7_item, arr_7_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $SecurityRequirement [.'$Operation'.security.0]", arr_7_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Operation'.security]", path))
    return res

# check _jm_obj_44_map_servers (.'$Operation'.servers)
def _jm_f_80(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.servers
    res = isinstance(val, list)
    if res:
        for arr_8_idx, arr_8_item in enumerate(val):
            arr_8_lpath: Path = (path + [ arr_8_idx ]) if path is not None else None
            # .'$Operation'.servers.0
            res = json_model_6(arr_8_item, arr_8_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [.'$Operation'.servers.0]", arr_8_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Operation'.servers]", path))
    return res

# check _jm_obj_44_map_summary (.'$Operation'.summary)
def _jm_f_81(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.summary
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Operation'.summary]", path))
    return res

# check _jm_obj_44_map_tags (.'$Operation'.tags)
def _jm_f_82(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'.tags
    res = isinstance(val, list)
    if res:
        for arr_9_idx, arr_9_item in enumerate(val):
            arr_9_lpath: Path = (path + [ arr_9_idx ]) if path is not None else None
            # .'$Operation'.tags.0
            res = isinstance(arr_9_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Operation'.tags.0]", arr_9_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Operation'.tags]", path))
    return res


# object .'$Operation'
def _jm_obj_44(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Operation']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_42: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_44_map.get(prop):
            # handle 12 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_42 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Operation']", lpath_42 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Operation'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Operation'.'/^x-/']", lpath_42 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Operation']", lpath_42 if path is not None else None))
            return False
    return True

# check $Operation (.'$Operation')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Operation'
    res = _jm_obj_44(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Operation']", path))
    return res

# object .'$ExternalDocumentation'
def _jm_obj_50(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ExternalDocumentation']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_48: Path = (path + [ prop ]) if path is not None else None
        if prop == "url":
            # handle must url property
            must_count += 1
            # .'$ExternalDocumentation'.url
            res = is_valid_url(pval, lpath_48 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$ExternalDocumentation'.url]", lpath_48 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$ExternalDocumentation'.url]", lpath_48 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$ExternalDocumentation'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$ExternalDocumentation'.description]", lpath_48 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$ExternalDocumentation'.description]", lpath_48 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$ExternalDocumentation'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$ExternalDocumentation'.'/^x-/']", lpath_48 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$ExternalDocumentation']", lpath_48 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "url" in val:
                rep is None or rep.append(("missing mandatory prop <url> [.'$ExternalDocumentation']", path))
        return False
    return True

# check $ExternalDocumentation (.'$ExternalDocumentation')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ExternalDocumentation'
    res = _jm_obj_50(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$ExternalDocumentation']", path))
    return res

# object .'$parameterShare'
def _jm_obj_51(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$parameterShare']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_49: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # .'$parameterShare'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$parameterShare'.description]", lpath_49 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$parameterShare'.description]", lpath_49 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$parameterShare'.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$parameterShare'.required]", lpath_49 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$parameterShare'.required]", lpath_49 if path is not None else None))
                return False
        elif prop == "deprecated":
            # handle may deprecated property
            # .'$parameterShare'.deprecated
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$parameterShare'.deprecated]", lpath_49 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$parameterShare'.deprecated]", lpath_49 if path is not None else None))
                return False
        elif prop == "allowEmptyValue":
            # handle may allowEmptyValue property
            # .'$parameterShare'.allowEmptyValue
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$parameterShare'.allowEmptyValue]", lpath_49 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$parameterShare'.allowEmptyValue]", lpath_49 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$parameterShare'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$parameterShare'.'/^x-/']", lpath_49 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$parameterShare']", lpath_49 if path is not None else None))
            return False
    return True

# check $parameterShare (.'$parameterShare')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$parameterShare'
    res = _jm_obj_51(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$parameterShare']", path))
    return res


# object .'$commonParameter'
def _jm_obj_52(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$commonParameter']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_50: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$commonParameter'.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$commonParameter'.name]", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$commonParameter'.name]", lpath_50 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$commonParameter'.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_7
            if not res:
                rep is None or rep.append(("value not in enum [.'$commonParameter'.in.'|']", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$commonParameter'.in]", lpath_50 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$commonParameter'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$commonParameter'.description]", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$commonParameter'.description]", lpath_50 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$commonParameter'.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$commonParameter'.required]", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$commonParameter'.required]", lpath_50 if path is not None else None))
                return False
        elif prop == "deprecated":
            # handle may deprecated property
            # .'$commonParameter'.deprecated
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$commonParameter'.deprecated]", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$commonParameter'.deprecated]", lpath_50 if path is not None else None))
                return False
        elif prop == "allowEmptyValue":
            # handle may allowEmptyValue property
            # .'$commonParameter'.allowEmptyValue
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$commonParameter'.allowEmptyValue]", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$commonParameter'.allowEmptyValue]", lpath_50 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$commonParameter'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$commonParameter'.'/^x-/']", lpath_50 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$commonParameter']", lpath_50 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$commonParameter']", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$commonParameter']", path))
        return False
    return True

# check $commonParameter (.'$commonParameter')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$commonParameter'
    res = _jm_obj_52(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$commonParameter']", path))
    return res


# check $Style (.'$Style')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # serialization styles
    # .'$Style'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_8
    if not res:
        rep is None or rep.append(("value not in enum [.'$Style'.'|']", path))
    return res

# check _jm_obj_53_map_allowReserved (.'$parameterSchemaOnly'.allowReserved)
def _jm_f_83(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$parameterSchemaOnly'.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$parameterSchemaOnly'.allowReserved]", path))
    return res

# check _jm_obj_53_map_example (.'$parameterSchemaOnly'.example)
def _jm_f_84(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$parameterSchemaOnly'.example
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$parameterSchemaOnly'.example]", path))
    return res

# object .'$parameterSchemaOnly'.examples
def _jm_obj_54(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$parameterSchemaOnly'.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_52: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$parameterSchemaOnly'.examples.''
        # .'$parameterSchemaOnly'.examples.''.'|'.0
        res = json_model_25(pval, lpath_52 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$parameterSchemaOnly'.examples.''.'|'.0]", lpath_52 if path is not None else None))
        if not res:
            # .'$parameterSchemaOnly'.examples.''.'|'.1
            res = json_model_30(pval, lpath_52 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$parameterSchemaOnly'.examples.''.'|'.1]", lpath_52 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$parameterSchemaOnly'.examples.''.'|']", lpath_52 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_53_map_examples (.'$parameterSchemaOnly'.examples)
def _jm_f_85(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$parameterSchemaOnly'.examples
    res = _jm_obj_54(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$parameterSchemaOnly'.examples]", path))
    return res

# check _jm_obj_53_map_explode (.'$parameterSchemaOnly'.explode)
def _jm_f_86(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$parameterSchemaOnly'.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$parameterSchemaOnly'.explode]", path))
    return res

# check _jm_obj_53_map_schema (.'$parameterSchemaOnly'.schema)
def _jm_f_87(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$parameterSchemaOnly'.schema
    res = json_model_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$parameterSchemaOnly'.schema]", path))
    return res

# check _jm_obj_53_map_style (.'$parameterSchemaOnly'.style)
def _jm_f_88(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$parameterSchemaOnly'.style
    res = json_model_15(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Style [.'$parameterSchemaOnly'.style]", path))
    return res


# object .'$parameterSchemaOnly'
def _jm_obj_53(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$parameterSchemaOnly']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_51: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_53_map.get(prop):
            # handle 6 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_51 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$parameterSchemaOnly']", lpath_51 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$parameterSchemaOnly']", lpath_51 if path is not None else None))
            return False
    return True

# check $parameterSchemaOnly (.'$parameterSchemaOnly')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$parameterSchemaOnly'
    res = _jm_obj_53(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$parameterSchemaOnly']", path))
    return res

# object .'$parameterContentOnly'.content
def _jm_obj_56(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$parameterContentOnly'.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_54: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$parameterContentOnly'.content.''
        res = json_model_20(pval, lpath_54 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$parameterContentOnly'.content.'']", lpath_54 if path is not None else None))
        if not res:
            return False
    return True

# object .'$parameterContentOnly'
def _jm_obj_55(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$parameterContentOnly']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_53: Path = (path + [ prop ]) if path is not None else None
        if prop == "content":
            # handle may content property
            # .'$parameterContentOnly'.content
            res = _jm_obj_56(pval, lpath_53 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$parameterContentOnly'.content]", lpath_53 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$parameterContentOnly'.content]", lpath_53 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$parameterContentOnly']", lpath_53 if path is not None else None))
            return False
    return True

# check $parameterContentOnly (.'$parameterContentOnly')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$parameterContentOnly'
    res = _jm_obj_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$parameterContentOnly']", path))
    return res


# object .'$Parameter'.'|'.1.content
def _jm_obj_58(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Parameter'.'|'.1.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_56: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Parameter'.'|'.1.content.''
        res = json_model_20(pval, lpath_56 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$Parameter'.'|'.1.content.'']", lpath_56 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Parameter'.'|'.1
def _jm_obj_57(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Parameter'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_55: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$Parameter'.'|'.1.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Parameter'.'|'.1.name]", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Parameter'.'|'.1.name]", lpath_55 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$Parameter'.'|'.1.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_9
            if not res:
                rep is None or rep.append(("value not in enum [.'$Parameter'.'|'.1.in.'|']", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Parameter'.'|'.1.in]", lpath_55 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Parameter'.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Parameter'.'|'.1.description]", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Parameter'.'|'.1.description]", lpath_55 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$Parameter'.'|'.1.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Parameter'.'|'.1.required]", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Parameter'.'|'.1.required]", lpath_55 if path is not None else None))
                return False
        elif prop == "deprecated":
            # handle may deprecated property
            # .'$Parameter'.'|'.1.deprecated
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Parameter'.'|'.1.deprecated]", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Parameter'.'|'.1.deprecated]", lpath_55 if path is not None else None))
                return False
        elif prop == "allowEmptyValue":
            # handle may allowEmptyValue property
            # .'$Parameter'.'|'.1.allowEmptyValue
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Parameter'.'|'.1.allowEmptyValue]", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Parameter'.'|'.1.allowEmptyValue]", lpath_55 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$Parameter'.'|'.1.content
            res = _jm_obj_58(pval, lpath_55 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Parameter'.'|'.1.content]", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Parameter'.'|'.1.content]", lpath_55 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Parameter'.'|'.1.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Parameter'.'|'.1.'/^x-/']", lpath_55 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Parameter'.'|'.1]", lpath_55 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$Parameter'.'|'.1]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$Parameter'.'|'.1]", path))
        return False
    return True


# check _jm_obj_59_map_allowEmptyValue (.'$Parameter'.'|'.0.allowEmptyValue)
def _jm_f_89(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Parameter'.'|'.0.allowEmptyValue
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Parameter'.'|'.0.allowEmptyValue]", path))
    return res

# check _jm_obj_59_map_allowReserved (.'$Parameter'.'|'.0.allowReserved)
def _jm_f_90(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Parameter'.'|'.0.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Parameter'.'|'.0.allowReserved]", path))
    return res

# check _jm_obj_59_map_deprecated (.'$Parameter'.'|'.0.deprecated)
def _jm_f_91(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Parameter'.'|'.0.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Parameter'.'|'.0.deprecated]", path))
    return res

# check _jm_obj_59_map_description (.'$Parameter'.'|'.0.description)
def _jm_f_92(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Parameter'.'|'.0.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Parameter'.'|'.0.description]", path))
    return res

# check _jm_obj_59_map_example (.'$Parameter'.'|'.0.example)
def _jm_f_93(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Parameter'.'|'.0.example
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$Parameter'.'|'.0.example]", path))
    return res

# object .'$Parameter'.'|'.0.examples
def _jm_obj_60(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Parameter'.'|'.0.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_58: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Parameter'.'|'.0.examples.''
        # .'$Parameter'.'|'.0.examples.''.'|'.0
        res = json_model_25(pval, lpath_58 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$Parameter'.'|'.0.examples.''.'|'.0]", lpath_58 if path is not None else None))
        if not res:
            # .'$Parameter'.'|'.0.examples.''.'|'.1
            res = json_model_30(pval, lpath_58 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Parameter'.'|'.0.examples.''.'|'.1]", lpath_58 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Parameter'.'|'.0.examples.''.'|']", lpath_58 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_59_map_examples (.'$Parameter'.'|'.0.examples)
def _jm_f_94(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Parameter'.'|'.0.examples
    res = _jm_obj_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Parameter'.'|'.0.examples]", path))
    return res

# check _jm_obj_59_map_explode (.'$Parameter'.'|'.0.explode)
def _jm_f_95(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Parameter'.'|'.0.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Parameter'.'|'.0.explode]", path))
    return res

# check _jm_obj_59_map_required (.'$Parameter'.'|'.0.required)
def _jm_f_96(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Parameter'.'|'.0.required
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Parameter'.'|'.0.required]", path))
    return res

# check _jm_obj_59_map_schema (.'$Parameter'.'|'.0.schema)
def _jm_f_97(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Parameter'.'|'.0.schema
    res = json_model_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$Parameter'.'|'.0.schema]", path))
    return res

# check _jm_obj_59_map_style (.'$Parameter'.'|'.0.style)
def _jm_f_98(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Parameter'.'|'.0.style
    res = json_model_15(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Style [.'$Parameter'.'|'.0.style]", path))
    return res


# object .'$Parameter'.'|'.0
def _jm_obj_59(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Parameter'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_57: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$Parameter'.'|'.0.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Parameter'.'|'.0.name]", lpath_57 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Parameter'.'|'.0.name]", lpath_57 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$Parameter'.'|'.0.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_10
            if not res:
                rep is None or rep.append(("value not in enum [.'$Parameter'.'|'.0.in.'|']", lpath_57 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Parameter'.'|'.0.in]", lpath_57 if path is not None else None))
                return False
        elif pfun := _jm_obj_59_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_57 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Parameter'.'|'.0]", lpath_57 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Parameter'.'|'.0.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Parameter'.'|'.0.'/^x-/']", lpath_57 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Parameter'.'|'.0]", lpath_57 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$Parameter'.'|'.0]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$Parameter'.'|'.0]", path))
        return False
    return True

# check $Parameter (.'$Parameter')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Parameter'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Parameter'.'|']", path))
    if res:
        # .'$Parameter'.'|'.0
        res = _jm_obj_59(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Parameter'.'|'.0]", path))
        if not res:
            # .'$Parameter'.'|'.1
            res = _jm_obj_57(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Parameter'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Parameter'.'|']", path))
    return res

# object .'$RequestBody'.content
def _jm_obj_62(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RequestBody'.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_60: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$RequestBody'.content.''
        res = json_model_20(pval, lpath_60 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$RequestBody'.content.'']", lpath_60 if path is not None else None))
        if not res:
            return False
    return True

# object .'$RequestBody'
def _jm_obj_61(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RequestBody']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_59: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # .'$RequestBody'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RequestBody'.description]", lpath_59 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RequestBody'.description]", lpath_59 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$RequestBody'.content
            res = _jm_obj_62(pval, lpath_59 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RequestBody'.content]", lpath_59 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RequestBody'.content]", lpath_59 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$RequestBody'.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$RequestBody'.required]", lpath_59 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RequestBody'.required]", lpath_59 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$RequestBody'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RequestBody'.'/^x-/']", lpath_59 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RequestBody']", lpath_59 if path is not None else None))
            return False
    return True

# check $RequestBody (.'$RequestBody')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$RequestBody'
    res = _jm_obj_61(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$RequestBody']", path))
    return res

# object .'$MediaType'.examples
def _jm_obj_64(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$MediaType'.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_62: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$MediaType'.examples.''
        # .'$MediaType'.examples.''.'|'.0
        res = json_model_25(pval, lpath_62 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$MediaType'.examples.''.'|'.0]", lpath_62 if path is not None else None))
        if not res:
            # .'$MediaType'.examples.''.'|'.1
            res = json_model_30(pval, lpath_62 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$MediaType'.examples.''.'|'.1]", lpath_62 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$MediaType'.examples.''.'|']", lpath_62 if path is not None else None))
        if not res:
            return False
    return True

# object .'$MediaType'.encoding
def _jm_obj_65(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$MediaType'.encoding]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_63: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$MediaType'.encoding.''
        res = json_model_21(pval, lpath_63 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Encoding [.'$MediaType'.encoding.'']", lpath_63 if path is not None else None))
        if not res:
            return False
    return True

# object .'$MediaType'
def _jm_obj_63(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$MediaType']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_61: Path = (path + [ prop ]) if path is not None else None
        if prop == "schema":
            # handle may schema property
            # .'$MediaType'.schema
            res = json_model_32(pval, lpath_61 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$MediaType'.schema]", lpath_61 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$MediaType'.schema]", lpath_61 if path is not None else None))
                return False
        elif prop == "example":
            # handle may example property
            # .'$MediaType'.example
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$MediaType'.example]", lpath_61 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$MediaType'.example]", lpath_61 if path is not None else None))
                return False
        elif prop == "examples":
            # handle may examples property
            # .'$MediaType'.examples
            res = _jm_obj_64(pval, lpath_61 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$MediaType'.examples]", lpath_61 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$MediaType'.examples]", lpath_61 if path is not None else None))
                return False
        elif prop == "encoding":
            # handle may encoding property
            # .'$MediaType'.encoding
            res = _jm_obj_65(pval, lpath_61 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$MediaType'.encoding]", lpath_61 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$MediaType'.encoding]", lpath_61 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$MediaType'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$MediaType'.'/^x-/']", lpath_61 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$MediaType']", lpath_61 if path is not None else None))
            return False
    return True

# check $MediaType (.'$MediaType')
def json_model_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$MediaType'
    res = _jm_obj_63(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$MediaType']", path))
    return res

# object .'$Encoding'.headers.''.'|'.1.content
def _jm_obj_69(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Encoding'.headers.''.'|'.1.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_67: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Encoding'.headers.''.'|'.1.content.''
        res = json_model_20(pval, lpath_67 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$Encoding'.headers.''.'|'.1.content.'']", lpath_67 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Encoding'.headers.''.'|'.1
def _jm_obj_68(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Encoding'.headers.''.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_66: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # .'$Encoding'.headers.''.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Encoding'.headers.''.'|'.1.description]", lpath_66 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Encoding'.headers.''.'|'.1.description]", lpath_66 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$Encoding'.headers.''.'|'.1.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Encoding'.headers.''.'|'.1.required]", lpath_66 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Encoding'.headers.''.'|'.1.required]", lpath_66 if path is not None else None))
                return False
        elif prop == "deprecated":
            # handle may deprecated property
            # .'$Encoding'.headers.''.'|'.1.deprecated
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Encoding'.headers.''.'|'.1.deprecated]", lpath_66 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Encoding'.headers.''.'|'.1.deprecated]", lpath_66 if path is not None else None))
                return False
        elif prop == "allowEmptyValue":
            # handle may allowEmptyValue property
            # .'$Encoding'.headers.''.'|'.1.allowEmptyValue
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Encoding'.headers.''.'|'.1.allowEmptyValue]", lpath_66 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Encoding'.headers.''.'|'.1.allowEmptyValue]", lpath_66 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$Encoding'.headers.''.'|'.1.content
            res = _jm_obj_69(pval, lpath_66 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Encoding'.headers.''.'|'.1.content]", lpath_66 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Encoding'.headers.''.'|'.1.content]", lpath_66 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Encoding'.headers.''.'|'.1.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Encoding'.headers.''.'|'.1.'/^x-/']", lpath_66 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Encoding'.headers.''.'|'.1]", lpath_66 if path is not None else None))
            return False
    return True

# check _jm_obj_70_map_allowEmptyValue (.'$Encoding'.headers.''.'|'.0.allowEmptyValue)
def _jm_f_99(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Encoding'.headers.''.'|'.0.allowEmptyValue
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Encoding'.headers.''.'|'.0.allowEmptyValue]", path))
    return res

# check _jm_obj_70_map_allowReserved (.'$Encoding'.headers.''.'|'.0.allowReserved)
def _jm_f_100(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Encoding'.headers.''.'|'.0.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Encoding'.headers.''.'|'.0.allowReserved]", path))
    return res

# check _jm_obj_70_map_deprecated (.'$Encoding'.headers.''.'|'.0.deprecated)
def _jm_f_101(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Encoding'.headers.''.'|'.0.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Encoding'.headers.''.'|'.0.deprecated]", path))
    return res

# check _jm_obj_70_map_description (.'$Encoding'.headers.''.'|'.0.description)
def _jm_f_102(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Encoding'.headers.''.'|'.0.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Encoding'.headers.''.'|'.0.description]", path))
    return res

# check _jm_obj_70_map_example (.'$Encoding'.headers.''.'|'.0.example)
def _jm_f_103(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Encoding'.headers.''.'|'.0.example
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$Encoding'.headers.''.'|'.0.example]", path))
    return res

# object .'$Encoding'.headers.''.'|'.0.examples
def _jm_obj_71(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Encoding'.headers.''.'|'.0.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_69: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Encoding'.headers.''.'|'.0.examples.''
        # .'$Encoding'.headers.''.'|'.0.examples.''.'|'.0
        res = json_model_25(pval, lpath_69 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$Encoding'.headers.''.'|'.0.examples.''.'|'.0]", lpath_69 if path is not None else None))
        if not res:
            # .'$Encoding'.headers.''.'|'.0.examples.''.'|'.1
            res = json_model_30(pval, lpath_69 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Encoding'.headers.''.'|'.0.examples.''.'|'.1]", lpath_69 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Encoding'.headers.''.'|'.0.examples.''.'|']", lpath_69 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_70_map_examples (.'$Encoding'.headers.''.'|'.0.examples)
def _jm_f_104(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Encoding'.headers.''.'|'.0.examples
    res = _jm_obj_71(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Encoding'.headers.''.'|'.0.examples]", path))
    return res

# check _jm_obj_70_map_explode (.'$Encoding'.headers.''.'|'.0.explode)
def _jm_f_105(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Encoding'.headers.''.'|'.0.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Encoding'.headers.''.'|'.0.explode]", path))
    return res

# check _jm_obj_70_map_required (.'$Encoding'.headers.''.'|'.0.required)
def _jm_f_106(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Encoding'.headers.''.'|'.0.required
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Encoding'.headers.''.'|'.0.required]", path))
    return res

# check _jm_obj_70_map_schema (.'$Encoding'.headers.''.'|'.0.schema)
def _jm_f_107(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Encoding'.headers.''.'|'.0.schema
    res = json_model_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$Encoding'.headers.''.'|'.0.schema]", path))
    return res

# check _jm_obj_70_map_style (.'$Encoding'.headers.''.'|'.0.style)
def _jm_f_108(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Encoding'.headers.''.'|'.0.style
    res = json_model_15(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Style [.'$Encoding'.headers.''.'|'.0.style]", path))
    return res


# object .'$Encoding'.headers.''.'|'.0
def _jm_obj_70(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Encoding'.headers.''.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_68: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_70_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_68 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Encoding'.headers.''.'|'.0]", lpath_68 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Encoding'.headers.''.'|'.0.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Encoding'.headers.''.'|'.0.'/^x-/']", lpath_68 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Encoding'.headers.''.'|'.0]", lpath_68 if path is not None else None))
            return False
    return True

# object .'$Encoding'.headers
def _jm_obj_67(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Encoding'.headers]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_65: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Encoding'.headers.''
        res = isinstance(pval, dict)
        if not res:
            rep is None or rep.append(("unexpected type [.'$Encoding'.headers.''.'|']", lpath_65 if path is not None else None))
        if res:
            # .'$Encoding'.headers.''.'|'.0
            res = _jm_obj_70(pval, lpath_65 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Encoding'.headers.''.'|'.0]", lpath_65 if path is not None else None))
            if not res:
                # .'$Encoding'.headers.''.'|'.1
                res = _jm_obj_68(pval, lpath_65 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Encoding'.headers.''.'|'.1]", lpath_65 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Encoding'.headers.''.'|']", lpath_65 if path is not None else None))
        if not res:
            # .'$Encoding'.headers.''.'|'
            res = json_model_30(pval, lpath_65 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Encoding'.headers.''.'|']", lpath_65 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Encoding'
def _jm_obj_66(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Encoding']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_64: Path = (path + [ prop ]) if path is not None else None
        if prop == "contentType":
            # handle may contentType property
            # .'$Encoding'.contentType
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Encoding'.contentType]", lpath_64 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Encoding'.contentType]", lpath_64 if path is not None else None))
                return False
        elif prop == "headers":
            # handle may headers property
            # .'$Encoding'.headers
            res = _jm_obj_67(pval, lpath_64 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Encoding'.headers]", lpath_64 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Encoding'.headers]", lpath_64 if path is not None else None))
                return False
        elif prop == "style":
            # handle may style property
            # .'$Encoding'.style
            res = json_model_15(pval, lpath_64 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Style [.'$Encoding'.style]", lpath_64 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Encoding'.style]", lpath_64 if path is not None else None))
                return False
        elif prop == "explode":
            # handle may explode property
            # .'$Encoding'.explode
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Encoding'.explode]", lpath_64 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Encoding'.explode]", lpath_64 if path is not None else None))
                return False
        elif prop == "allowReserved":
            # handle may allowReserved property
            # .'$Encoding'.allowReserved
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Encoding'.allowReserved]", lpath_64 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Encoding'.allowReserved]", lpath_64 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Encoding'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Encoding'.'/^x-/']", lpath_64 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Encoding']", lpath_64 if path is not None else None))
            return False
    return True

# check $Encoding (.'$Encoding')
def json_model_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Encoding'
    res = _jm_obj_66(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Encoding']", path))
    return res


# object .'$Responses'
def _jm_obj_72(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Responses']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_70: Path = (path + [ prop ]) if path is not None else None
        if prop == "default":
            # handle may default property
            # .'$Responses'.default
            # .'$Responses'.default.'|'.0
            res = json_model_23(pval, lpath_70 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Response [.'$Responses'.default.'|'.0]", lpath_70 if path is not None else None))
            if not res:
                # .'$Responses'.default.'|'.1
                res = json_model_30(pval, lpath_70 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Reference [.'$Responses'.default.'|'.1]", lpath_70 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Responses'.default.'|']", lpath_70 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Responses'.default]", lpath_70 if path is not None else None))
                return False
        elif _jm_re_3(prop, path, rep):
            # handle 2 re props
            # .'$Responses'.'/^[1-5](\\d\\d|XX)$/'
            # .'$Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.0
            res = json_model_23(pval, lpath_70 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Response [.'$Responses'.'/^[1-5](\\\\d\\\\d|XX)$/'.'|'.0]", lpath_70 if path is not None else None))
            if not res:
                # .'$Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.1
                res = json_model_30(pval, lpath_70 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Reference [.'$Responses'.'/^[1-5](\\\\d\\\\d|XX)$/'.'|'.1]", lpath_70 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Responses'.'/^[1-5](\\\\d\\\\d|XX)$/'.'|']", lpath_70 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("x-"):
            # handle 2 re props
            # .'$Responses'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Responses'.'/^x-/']", lpath_70 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Responses']", lpath_70 if path is not None else None))
            return False
    return True

# check $Responses (.'$Responses')
def json_model_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Responses'
    res = _jm_obj_72(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Responses']", path))
    return res

# object .'$Response'.headers.''.'|'.1.content
def _jm_obj_76(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Response'.headers.''.'|'.1.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_74: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Response'.headers.''.'|'.1.content.''
        res = json_model_20(pval, lpath_74 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$Response'.headers.''.'|'.1.content.'']", lpath_74 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Response'.headers.''.'|'.1
def _jm_obj_75(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Response'.headers.''.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_73: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # .'$Response'.headers.''.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Response'.headers.''.'|'.1.description]", lpath_73 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.headers.''.'|'.1.description]", lpath_73 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$Response'.headers.''.'|'.1.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Response'.headers.''.'|'.1.required]", lpath_73 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.headers.''.'|'.1.required]", lpath_73 if path is not None else None))
                return False
        elif prop == "deprecated":
            # handle may deprecated property
            # .'$Response'.headers.''.'|'.1.deprecated
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Response'.headers.''.'|'.1.deprecated]", lpath_73 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.headers.''.'|'.1.deprecated]", lpath_73 if path is not None else None))
                return False
        elif prop == "allowEmptyValue":
            # handle may allowEmptyValue property
            # .'$Response'.headers.''.'|'.1.allowEmptyValue
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Response'.headers.''.'|'.1.allowEmptyValue]", lpath_73 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.headers.''.'|'.1.allowEmptyValue]", lpath_73 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$Response'.headers.''.'|'.1.content
            res = _jm_obj_76(pval, lpath_73 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Response'.headers.''.'|'.1.content]", lpath_73 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.headers.''.'|'.1.content]", lpath_73 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Response'.headers.''.'|'.1.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Response'.headers.''.'|'.1.'/^x-/']", lpath_73 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Response'.headers.''.'|'.1]", lpath_73 if path is not None else None))
            return False
    return True

# check _jm_obj_77_map_allowEmptyValue (.'$Response'.headers.''.'|'.0.allowEmptyValue)
def _jm_f_109(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Response'.headers.''.'|'.0.allowEmptyValue
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Response'.headers.''.'|'.0.allowEmptyValue]", path))
    return res

# check _jm_obj_77_map_allowReserved (.'$Response'.headers.''.'|'.0.allowReserved)
def _jm_f_110(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Response'.headers.''.'|'.0.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Response'.headers.''.'|'.0.allowReserved]", path))
    return res

# check _jm_obj_77_map_deprecated (.'$Response'.headers.''.'|'.0.deprecated)
def _jm_f_111(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Response'.headers.''.'|'.0.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Response'.headers.''.'|'.0.deprecated]", path))
    return res

# check _jm_obj_77_map_description (.'$Response'.headers.''.'|'.0.description)
def _jm_f_112(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Response'.headers.''.'|'.0.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Response'.headers.''.'|'.0.description]", path))
    return res

# check _jm_obj_77_map_example (.'$Response'.headers.''.'|'.0.example)
def _jm_f_113(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Response'.headers.''.'|'.0.example
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$Response'.headers.''.'|'.0.example]", path))
    return res

# object .'$Response'.headers.''.'|'.0.examples
def _jm_obj_78(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Response'.headers.''.'|'.0.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_76: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Response'.headers.''.'|'.0.examples.''
        # .'$Response'.headers.''.'|'.0.examples.''.'|'.0
        res = json_model_25(pval, lpath_76 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$Response'.headers.''.'|'.0.examples.''.'|'.0]", lpath_76 if path is not None else None))
        if not res:
            # .'$Response'.headers.''.'|'.0.examples.''.'|'.1
            res = json_model_30(pval, lpath_76 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Response'.headers.''.'|'.0.examples.''.'|'.1]", lpath_76 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Response'.headers.''.'|'.0.examples.''.'|']", lpath_76 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_77_map_examples (.'$Response'.headers.''.'|'.0.examples)
def _jm_f_114(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Response'.headers.''.'|'.0.examples
    res = _jm_obj_78(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Response'.headers.''.'|'.0.examples]", path))
    return res

# check _jm_obj_77_map_explode (.'$Response'.headers.''.'|'.0.explode)
def _jm_f_115(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Response'.headers.''.'|'.0.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Response'.headers.''.'|'.0.explode]", path))
    return res

# check _jm_obj_77_map_required (.'$Response'.headers.''.'|'.0.required)
def _jm_f_116(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Response'.headers.''.'|'.0.required
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Response'.headers.''.'|'.0.required]", path))
    return res

# check _jm_obj_77_map_schema (.'$Response'.headers.''.'|'.0.schema)
def _jm_f_117(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Response'.headers.''.'|'.0.schema
    res = json_model_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$Response'.headers.''.'|'.0.schema]", path))
    return res

# check _jm_obj_77_map_style (.'$Response'.headers.''.'|'.0.style)
def _jm_f_118(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Response'.headers.''.'|'.0.style
    res = json_model_15(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Style [.'$Response'.headers.''.'|'.0.style]", path))
    return res


# object .'$Response'.headers.''.'|'.0
def _jm_obj_77(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Response'.headers.''.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_75: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_77_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_75 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Response'.headers.''.'|'.0]", lpath_75 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Response'.headers.''.'|'.0.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Response'.headers.''.'|'.0.'/^x-/']", lpath_75 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Response'.headers.''.'|'.0]", lpath_75 if path is not None else None))
            return False
    return True

# object .'$Response'.headers
def _jm_obj_74(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Response'.headers]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_72: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Response'.headers.''
        res = isinstance(pval, dict)
        if not res:
            rep is None or rep.append(("unexpected type [.'$Response'.headers.''.'|']", lpath_72 if path is not None else None))
        if res:
            # .'$Response'.headers.''.'|'.0
            res = _jm_obj_77(pval, lpath_72 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Response'.headers.''.'|'.0]", lpath_72 if path is not None else None))
            if not res:
                # .'$Response'.headers.''.'|'.1
                res = _jm_obj_75(pval, lpath_72 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Response'.headers.''.'|'.1]", lpath_72 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Response'.headers.''.'|']", lpath_72 if path is not None else None))
        if not res:
            # .'$Response'.headers.''.'|'
            res = json_model_30(pval, lpath_72 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Response'.headers.''.'|']", lpath_72 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Response'.content
def _jm_obj_79(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Response'.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_77: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Response'.content.''
        res = json_model_20(pval, lpath_77 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$Response'.content.'']", lpath_77 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Response'.links.''.'|'.1.parameters
def _jm_obj_82(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Response'.links.''.'|'.1.parameters]", path))
        return False
    # accept any object
    return True

# object .'$Response'.links.''.'|'.1
def _jm_obj_81(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Response'.links.''.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_79: Path = (path + [ prop ]) if path is not None else None
        if prop == "operationId":
            # handle must operationId property
            must_count += 1
            # .'$Response'.links.''.'|'.1.operationId
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Response'.links.''.'|'.1.operationId]", lpath_79 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Response'.links.''.'|'.1.operationId]", lpath_79 if path is not None else None))
                return False
        elif prop == "parameters":
            # handle may parameters property
            # .'$Response'.links.''.'|'.1.parameters
            res = _jm_obj_82(pval, lpath_79 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Response'.links.''.'|'.1.parameters]", lpath_79 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.links.''.'|'.1.parameters]", lpath_79 if path is not None else None))
                return False
        elif prop == "requestBody":
            # handle may requestBody property
            # .'$Response'.links.''.'|'.1.requestBody
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Response'.links.''.'|'.1.requestBody]", lpath_79 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.links.''.'|'.1.requestBody]", lpath_79 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Response'.links.''.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Response'.links.''.'|'.1.description]", lpath_79 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.links.''.'|'.1.description]", lpath_79 if path is not None else None))
                return False
        elif prop == "server":
            # handle may server property
            # .'$Response'.links.''.'|'.1.server
            res = json_model_6(pval, lpath_79 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [.'$Response'.links.''.'|'.1.server]", lpath_79 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.links.''.'|'.1.server]", lpath_79 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Response'.links.''.'|'.1.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Response'.links.''.'|'.1.'/^x-/']", lpath_79 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Response'.links.''.'|'.1]", lpath_79 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "operationId" in val:
                rep is None or rep.append(("missing mandatory prop <operationId> [.'$Response'.links.''.'|'.1]", path))
        return False
    return True

# object .'$Response'.links.''.'|'.0.parameters
def _jm_obj_84(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Response'.links.''.'|'.0.parameters]", path))
        return False
    # accept any object
    return True

# object .'$Response'.links.''.'|'.0
def _jm_obj_83(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Response'.links.''.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_80: Path = (path + [ prop ]) if path is not None else None
        if prop == "operationRef":
            # handle must operationRef property
            must_count += 1
            # .'$Response'.links.''.'|'.0.operationRef
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Response'.links.''.'|'.0.operationRef]", lpath_80 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Response'.links.''.'|'.0.operationRef]", lpath_80 if path is not None else None))
                return False
        elif prop == "parameters":
            # handle may parameters property
            # .'$Response'.links.''.'|'.0.parameters
            res = _jm_obj_84(pval, lpath_80 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Response'.links.''.'|'.0.parameters]", lpath_80 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.links.''.'|'.0.parameters]", lpath_80 if path is not None else None))
                return False
        elif prop == "requestBody":
            # handle may requestBody property
            # .'$Response'.links.''.'|'.0.requestBody
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Response'.links.''.'|'.0.requestBody]", lpath_80 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.links.''.'|'.0.requestBody]", lpath_80 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Response'.links.''.'|'.0.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Response'.links.''.'|'.0.description]", lpath_80 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.links.''.'|'.0.description]", lpath_80 if path is not None else None))
                return False
        elif prop == "server":
            # handle may server property
            # .'$Response'.links.''.'|'.0.server
            res = json_model_6(pval, lpath_80 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [.'$Response'.links.''.'|'.0.server]", lpath_80 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.links.''.'|'.0.server]", lpath_80 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Response'.links.''.'|'.0.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Response'.links.''.'|'.0.'/^x-/']", lpath_80 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Response'.links.''.'|'.0]", lpath_80 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "operationRef" in val:
                rep is None or rep.append(("missing mandatory prop <operationRef> [.'$Response'.links.''.'|'.0]", path))
        return False
    return True

# object .'$Response'.links
def _jm_obj_80(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Response'.links]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_78: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Response'.links.''
        res = isinstance(pval, dict)
        if not res:
            rep is None or rep.append(("unexpected type [.'$Response'.links.''.'|']", lpath_78 if path is not None else None))
        if res:
            # .'$Response'.links.''.'|'.0
            res = _jm_obj_83(pval, lpath_78 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Response'.links.''.'|'.0]", lpath_78 if path is not None else None))
            if not res:
                # .'$Response'.links.''.'|'.1
                res = _jm_obj_81(pval, lpath_78 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Response'.links.''.'|'.1]", lpath_78 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Response'.links.''.'|']", lpath_78 if path is not None else None))
        if not res:
            # .'$Response'.links.''.'|'
            res = json_model_30(pval, lpath_78 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Response'.links.''.'|']", lpath_78 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Response'
def _jm_obj_73(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Response']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_71: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # .'$Response'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Response'.description]", lpath_71 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.description]", lpath_71 if path is not None else None))
                return False
        elif prop == "headers":
            # handle may headers property
            # .'$Response'.headers
            res = _jm_obj_74(pval, lpath_71 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Response'.headers]", lpath_71 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.headers]", lpath_71 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$Response'.content
            res = _jm_obj_79(pval, lpath_71 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Response'.content]", lpath_71 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.content]", lpath_71 if path is not None else None))
                return False
        elif prop == "links":
            # handle may links property
            # .'$Response'.links
            res = _jm_obj_80(pval, lpath_71 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Response'.links]", lpath_71 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Response'.links]", lpath_71 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Response'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Response'.'/^x-/']", lpath_71 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Response']", lpath_71 if path is not None else None))
            return False
    return True

# check $Response (.'$Response')
def json_model_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Response'
    res = _jm_obj_73(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Response']", path))
    return res

# object .'$Callback'
def _jm_obj_85(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Callback']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_81: Path = (path + [ prop ]) if path is not None else None
        if json_model_26(prop, lpath_81 if path is not None else None, rep):
            # handle 1 key props
            # .'$Callback'.'$Expression'
            # .'$Callback'.'$Expression'.'|'.0
            res = json_model_10(pval, lpath_81 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $PathItem [.'$Callback'.'$Expression'.'|'.0]", lpath_81 if path is not None else None))
            if not res:
                # .'$Callback'.'$Expression'.'|'.1
                res = json_model_30(pval, lpath_81 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Reference [.'$Callback'.'$Expression'.'|'.1]", lpath_81 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Callback'.'$Expression'.'|']", lpath_81 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Callback'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Callback'.'/^x-/']", lpath_81 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Callback']", lpath_81 if path is not None else None))
            return False
    return True

# check $Callback (.'$Callback')
def json_model_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Callback'
    res = _jm_obj_85(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Callback']", path))
    return res

# object .'$Example'
def _jm_obj_86(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Example']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_82: Path = (path + [ prop ]) if path is not None else None
        if prop == "summary":
            # handle may summary property
            # .'$Example'.summary
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Example'.summary]", lpath_82 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Example'.summary]", lpath_82 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Example'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Example'.description]", lpath_82 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Example'.description]", lpath_82 if path is not None else None))
                return False
        elif prop == "value":
            # handle may value property
            # .'$Example'.value
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Example'.value]", lpath_82 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Example'.value]", lpath_82 if path is not None else None))
                return False
        elif prop == "externalValue":
            # handle may externalValue property
            # .'$Example'.externalValue
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Example'.externalValue]", lpath_82 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Example'.externalValue]", lpath_82 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Example'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Example'.'/^x-/']", lpath_82 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Example']", lpath_82 if path is not None else None))
            return False
    return True

# check $Example (.'$Example')
def json_model_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Example'
    res = _jm_obj_86(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Example']", path))
    return res

# check $Expression (.'$Expression')
def json_model_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Expression'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Expression']", path))
    return res

# object .'$Link'.'|'.1.parameters
def _jm_obj_88(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Link'.'|'.1.parameters]", path))
        return False
    # accept any object
    return True

# object .'$Link'.'|'.1
def _jm_obj_87(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Link'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_83: Path = (path + [ prop ]) if path is not None else None
        if prop == "operationId":
            # handle must operationId property
            must_count += 1
            # .'$Link'.'|'.1.operationId
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Link'.'|'.1.operationId]", lpath_83 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Link'.'|'.1.operationId]", lpath_83 if path is not None else None))
                return False
        elif prop == "parameters":
            # handle may parameters property
            # .'$Link'.'|'.1.parameters
            res = _jm_obj_88(pval, lpath_83 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Link'.'|'.1.parameters]", lpath_83 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Link'.'|'.1.parameters]", lpath_83 if path is not None else None))
                return False
        elif prop == "requestBody":
            # handle may requestBody property
            # .'$Link'.'|'.1.requestBody
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Link'.'|'.1.requestBody]", lpath_83 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Link'.'|'.1.requestBody]", lpath_83 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Link'.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Link'.'|'.1.description]", lpath_83 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Link'.'|'.1.description]", lpath_83 if path is not None else None))
                return False
        elif prop == "server":
            # handle may server property
            # .'$Link'.'|'.1.server
            res = json_model_6(pval, lpath_83 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [.'$Link'.'|'.1.server]", lpath_83 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Link'.'|'.1.server]", lpath_83 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Link'.'|'.1.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Link'.'|'.1.'/^x-/']", lpath_83 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Link'.'|'.1]", lpath_83 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "operationId" in val:
                rep is None or rep.append(("missing mandatory prop <operationId> [.'$Link'.'|'.1]", path))
        return False
    return True

# object .'$Link'.'|'.0.parameters
def _jm_obj_90(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Link'.'|'.0.parameters]", path))
        return False
    # accept any object
    return True

# object .'$Link'.'|'.0
def _jm_obj_89(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Link'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_84: Path = (path + [ prop ]) if path is not None else None
        if prop == "operationRef":
            # handle must operationRef property
            must_count += 1
            # .'$Link'.'|'.0.operationRef
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Link'.'|'.0.operationRef]", lpath_84 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Link'.'|'.0.operationRef]", lpath_84 if path is not None else None))
                return False
        elif prop == "parameters":
            # handle may parameters property
            # .'$Link'.'|'.0.parameters
            res = _jm_obj_90(pval, lpath_84 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Link'.'|'.0.parameters]", lpath_84 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Link'.'|'.0.parameters]", lpath_84 if path is not None else None))
                return False
        elif prop == "requestBody":
            # handle may requestBody property
            # .'$Link'.'|'.0.requestBody
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Link'.'|'.0.requestBody]", lpath_84 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Link'.'|'.0.requestBody]", lpath_84 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Link'.'|'.0.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Link'.'|'.0.description]", lpath_84 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Link'.'|'.0.description]", lpath_84 if path is not None else None))
                return False
        elif prop == "server":
            # handle may server property
            # .'$Link'.'|'.0.server
            res = json_model_6(pval, lpath_84 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Server [.'$Link'.'|'.0.server]", lpath_84 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Link'.'|'.0.server]", lpath_84 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Link'.'|'.0.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Link'.'|'.0.'/^x-/']", lpath_84 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Link'.'|'.0]", lpath_84 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "operationRef" in val:
                rep is None or rep.append(("missing mandatory prop <operationRef> [.'$Link'.'|'.0]", path))
        return False
    return True

# check $Link (.'$Link')
def json_model_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Link'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Link'.'|']", path))
    if res:
        # .'$Link'.'|'.0
        res = _jm_obj_89(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Link'.'|'.0]", path))
        if not res:
            # .'$Link'.'|'.1
            res = _jm_obj_87(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Link'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Link'.'|']", path))
    return res

# object .'$Header'.'|'.1.content
def _jm_obj_92(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Header'.'|'.1.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_86: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Header'.'|'.1.content.''
        res = json_model_20(pval, lpath_86 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $MediaType [.'$Header'.'|'.1.content.'']", lpath_86 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Header'.'|'.1
def _jm_obj_91(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Header'.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_85: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # .'$Header'.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Header'.'|'.1.description]", lpath_85 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Header'.'|'.1.description]", lpath_85 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$Header'.'|'.1.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Header'.'|'.1.required]", lpath_85 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Header'.'|'.1.required]", lpath_85 if path is not None else None))
                return False
        elif prop == "deprecated":
            # handle may deprecated property
            # .'$Header'.'|'.1.deprecated
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Header'.'|'.1.deprecated]", lpath_85 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Header'.'|'.1.deprecated]", lpath_85 if path is not None else None))
                return False
        elif prop == "allowEmptyValue":
            # handle may allowEmptyValue property
            # .'$Header'.'|'.1.allowEmptyValue
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Header'.'|'.1.allowEmptyValue]", lpath_85 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Header'.'|'.1.allowEmptyValue]", lpath_85 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$Header'.'|'.1.content
            res = _jm_obj_92(pval, lpath_85 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Header'.'|'.1.content]", lpath_85 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Header'.'|'.1.content]", lpath_85 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Header'.'|'.1.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Header'.'|'.1.'/^x-/']", lpath_85 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Header'.'|'.1]", lpath_85 if path is not None else None))
            return False
    return True

# check _jm_obj_93_map_allowEmptyValue (.'$Header'.'|'.0.allowEmptyValue)
def _jm_f_119(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Header'.'|'.0.allowEmptyValue
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Header'.'|'.0.allowEmptyValue]", path))
    return res

# check _jm_obj_93_map_allowReserved (.'$Header'.'|'.0.allowReserved)
def _jm_f_120(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Header'.'|'.0.allowReserved
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Header'.'|'.0.allowReserved]", path))
    return res

# check _jm_obj_93_map_deprecated (.'$Header'.'|'.0.deprecated)
def _jm_f_121(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Header'.'|'.0.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Header'.'|'.0.deprecated]", path))
    return res

# check _jm_obj_93_map_description (.'$Header'.'|'.0.description)
def _jm_f_122(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Header'.'|'.0.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Header'.'|'.0.description]", path))
    return res

# check _jm_obj_93_map_example (.'$Header'.'|'.0.example)
def _jm_f_123(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Header'.'|'.0.example
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$Header'.'|'.0.example]", path))
    return res

# object .'$Header'.'|'.0.examples
def _jm_obj_94(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Header'.'|'.0.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_88: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Header'.'|'.0.examples.''
        # .'$Header'.'|'.0.examples.''.'|'.0
        res = json_model_25(pval, lpath_88 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Example [.'$Header'.'|'.0.examples.''.'|'.0]", lpath_88 if path is not None else None))
        if not res:
            # .'$Header'.'|'.0.examples.''.'|'.1
            res = json_model_30(pval, lpath_88 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Reference [.'$Header'.'|'.0.examples.''.'|'.1]", lpath_88 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Header'.'|'.0.examples.''.'|']", lpath_88 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_93_map_examples (.'$Header'.'|'.0.examples)
def _jm_f_124(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Header'.'|'.0.examples
    res = _jm_obj_94(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Header'.'|'.0.examples]", path))
    return res

# check _jm_obj_93_map_explode (.'$Header'.'|'.0.explode)
def _jm_f_125(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Header'.'|'.0.explode
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Header'.'|'.0.explode]", path))
    return res

# check _jm_obj_93_map_required (.'$Header'.'|'.0.required)
def _jm_f_126(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Header'.'|'.0.required
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Header'.'|'.0.required]", path))
    return res

# check _jm_obj_93_map_schema (.'$Header'.'|'.0.schema)
def _jm_f_127(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Header'.'|'.0.schema
    res = json_model_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$Header'.'|'.0.schema]", path))
    return res

# check _jm_obj_93_map_style (.'$Header'.'|'.0.style)
def _jm_f_128(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Header'.'|'.0.style
    res = json_model_15(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Style [.'$Header'.'|'.0.style]", path))
    return res


# object .'$Header'.'|'.0
def _jm_obj_93(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Header'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_87: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_93_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_87 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Header'.'|'.0]", lpath_87 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Header'.'|'.0.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Header'.'|'.0.'/^x-/']", lpath_87 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Header'.'|'.0]", lpath_87 if path is not None else None))
            return False
    return True

# check $Header (.'$Header')
def json_model_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # more or less a parameter but without name and in
    # .'$Header'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Header'.'|']", path))
    if res:
        # .'$Header'.'|'.0
        res = _jm_obj_93(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Header'.'|'.0]", path))
        if not res:
            # .'$Header'.'|'.1
            res = _jm_obj_91(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Header'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Header'.'|']", path))
    return res

# object .'$Tag'
def _jm_obj_95(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Tag']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_89: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$Tag'.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Tag'.name]", lpath_89 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Tag'.name]", lpath_89 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Tag'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Tag'.description]", lpath_89 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Tag'.description]", lpath_89 if path is not None else None))
                return False
        elif prop == "externalDocs":
            # handle may externalDocs property
            # .'$Tag'.externalDocs
            res = json_model_12(pval, lpath_89 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $ExternalDocumentation [.'$Tag'.externalDocs]", lpath_89 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Tag'.externalDocs]", lpath_89 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Tag'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Tag'.'/^x-/']", lpath_89 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Tag']", lpath_89 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$Tag']", path))
        return False
    return True

# check $Tag (.'$Tag')
def json_model_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Tag'
    res = _jm_obj_95(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Tag']", path))
    return res

# object .'$Reference'
def _jm_obj_96(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Reference']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_90: Path = (path + [ prop ]) if path is not None else None
        if prop == "$ref":
            # handle must $ref property
            must_count += 1
            # .'$Reference'.'$ref'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Reference'.'$ref']", lpath_90 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Reference'.'$ref']", lpath_90 if path is not None else None))
                return False
        elif prop == "summary":
            # handle may summary property
            # .'$Reference'.summary
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Reference'.summary]", lpath_90 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Reference'.summary]", lpath_90 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Reference'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Reference'.description]", lpath_90 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Reference'.description]", lpath_90 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Reference']", lpath_90 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "$ref" in val:
                rep is None or rep.append(("missing mandatory prop <$ref> [.'$Reference']", path))
        return False
    return True

# check $Reference (.'$Reference')
def json_model_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Reference'
    res = _jm_obj_96(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Reference']", path))
    return res

# check $schema (.'$schema')
def json_model_45(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # JSON Model for JSON Schema 2020-12 [JSON_MODEL_LOOSE_NUMBER]
    # .'$schema'
    # .'$schema'.'@'
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema'.'@']", path))
    return res

# check _jm_obj_97_map_$anchor (.'$Schema'.'$anchor')
def _jm_f_129(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.'$anchor'
    res = json_model_46(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#URI-REFERENCE [.'$Schema'.'$anchor']", path))
    return res

# check _jm_obj_97_map_$comment (.'$Schema'.'$comment')
def _jm_f_130(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Schema'.'$comment']", path))
    return res

# object .'$Schema'.'$defs'
def _jm_obj_98(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Schema'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_92: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Schema'.'$defs'.''
        res = json_model_60(pval, lpath_92 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.'$defs'.'']", lpath_92 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_97_map_$defs (.'$Schema'.'$defs')
def _jm_f_131(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.'$defs'
    res = _jm_obj_98(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Schema'.'$defs']", path))
    return res

# check _jm_obj_97_map_$dynamicAnchor (.'$Schema'.'$dynamicAnchor')
def _jm_f_132(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.'$dynamicAnchor'
    res = json_model_46(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#URI-REFERENCE [.'$Schema'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_97_map_$dynamicRef (.'$Schema'.'$dynamicRef')
def _jm_f_133(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.'$dynamicRef'
    res = json_model_46(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#URI-REFERENCE [.'$Schema'.'$dynamicRef']", path))
    return res

# check _jm_obj_97_map_$id (.'$Schema'.'$id')
def _jm_f_134(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.'$id'
    res = json_model_46(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#URI-REFERENCE [.'$Schema'.'$id']", path))
    return res

# check _jm_obj_97_map_$ref (.'$Schema'.'$ref')
def _jm_f_135(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.'$ref'
    res = json_model_46(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#URI-REFERENCE [.'$Schema'.'$ref']", path))
    return res

# check _jm_obj_97_map_$schema (.'$Schema'.'$schema')
def _jm_f_136(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.'$schema'
    res = isinstance(val, str) and (val == "https://json-schema.org/draft/2020-12/schema")
    if not res:
        rep is None or rep.append(("unexpected _https://json-schema.org/draft/2020-12/schema [.'$Schema'.'$schema']", path))
    return res

# object .'$Schema'.'$vocabulary'
def _jm_obj_99(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Schema'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_93: Path = (path + [ prop ]) if path is not None else None
        if is_valid_url(prop, lpath_93 if path is not None else None, rep):
            # handle 1 key props
            # .'$Schema'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Schema'.'$vocabulary'.'$URI']", lpath_93 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Schema'.'$vocabulary']", lpath_93 if path is not None else None))
            return False
    return True

# check _jm_obj_97_map_$vocabulary (.'$Schema'.'$vocabulary')
def _jm_f_137(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.'$vocabulary'
    res = _jm_obj_99(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Schema'.'$vocabulary']", path))
    return res

# check _jm_obj_97_map_additionalProperties (.'$Schema'.additionalProperties)
def _jm_f_138(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.additionalProperties
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.additionalProperties]", path))
    return res

# check _jm_obj_97_map_allOf (.'$Schema'.allOf)
def _jm_f_139(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.allOf
    res = json_model_57(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#schemaArray [.'$Schema'.allOf]", path))
    return res

# check _jm_obj_97_map_anyOf (.'$Schema'.anyOf)
def _jm_f_140(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.anyOf
    res = json_model_57(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#schemaArray [.'$Schema'.anyOf]", path))
    return res

# check _jm_obj_97_map_const (.'$Schema'.const)
def _jm_f_141(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.const
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$Schema'.const]", path))
    return res

# check _jm_obj_97_map_contains (.'$Schema'.contains)
def _jm_f_142(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.contains
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.contains]", path))
    return res

# check _jm_obj_97_map_contentEncoding (.'$Schema'.contentEncoding)
def _jm_f_143(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.contentEncoding
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Schema'.contentEncoding]", path))
    return res

# check _jm_obj_97_map_contentMediaType (.'$Schema'.contentMediaType)
def _jm_f_144(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.contentMediaType
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Schema'.contentMediaType]", path))
    return res

# check _jm_obj_97_map_contentSchema (.'$Schema'.contentSchema)
def _jm_f_145(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.contentSchema
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.contentSchema]", path))
    return res

# check _jm_obj_97_map_default (.'$Schema'.default)
def _jm_f_146(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$Schema'.default]", path))
    return res

# object .'$Schema'.dependentRequired
def _jm_obj_100(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Schema'.dependentRequired]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_94: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Schema'.dependentRequired.''
        res = json_model_54(pval, lpath_94 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $schema#stringArray [.'$Schema'.dependentRequired.'']", lpath_94 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_97_map_dependentRequired (.'$Schema'.dependentRequired)
def _jm_f_147(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.dependentRequired
    res = _jm_obj_100(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Schema'.dependentRequired]", path))
    return res

# object .'$Schema'.dependentSchemas
def _jm_obj_101(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Schema'.dependentSchemas]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_95: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Schema'.dependentSchemas.''
        res = json_model_60(pval, lpath_95 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.dependentSchemas.'']", lpath_95 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_97_map_dependentSchemas (.'$Schema'.dependentSchemas)
def _jm_f_148(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.dependentSchemas
    res = _jm_obj_101(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Schema'.dependentSchemas]", path))
    return res

# check _jm_obj_97_map_deprecated (.'$Schema'.deprecated)
def _jm_f_149(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Schema'.deprecated]", path))
    return res

# check _jm_obj_97_map_description (.'$Schema'.description)
def _jm_f_150(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Schema'.description]", path))
    return res

# check _jm_obj_97_map_discriminator (.'$Schema'.discriminator)
def _jm_f_151(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.discriminator
    res = json_model_33(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Discriminator [.'$Schema'.discriminator]", path))
    return res

# check _jm_obj_97_map_else (.'$Schema'.else)
def _jm_f_152(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.else
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.else]", path))
    return res

# check _jm_obj_97_map_enum (.'$Schema'.enum)
def _jm_f_153(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.enum
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Schema'.enum]", path))
    return res

# check _jm_obj_97_map_example (.'$Schema'.example)
def _jm_f_154(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.example
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$Schema'.example]", path))
    return res

# check _jm_obj_97_map_examples (.'$Schema'.examples)
def _jm_f_155(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Schema'.examples]", path))
    return res

# check _jm_obj_97_map_exclusiveMaximum (.'$Schema'.exclusiveMaximum)
def _jm_f_156(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.exclusiveMaximum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$Schema'.exclusiveMaximum]", path))
    return res

# check _jm_obj_97_map_exclusiveMinimum (.'$Schema'.exclusiveMinimum)
def _jm_f_157(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.exclusiveMinimum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$Schema'.exclusiveMinimum]", path))
    return res

# check _jm_obj_97_map_externalDocs (.'$Schema'.externalDocs)
def _jm_f_158(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.externalDocs
    res = json_model_12(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ExternalDocumentation [.'$Schema'.externalDocs]", path))
    return res

# check _jm_obj_97_map_format (.'$Schema'.format)
def _jm_f_159(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.format
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Schema'.format]", path))
    return res

# check _jm_obj_97_map_if (.'$Schema'.if)
def _jm_f_160(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.if
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.if]", path))
    return res

# check _jm_obj_97_map_items (.'$Schema'.items)
def _jm_f_161(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.items
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.items]", path))
    return res

# check _jm_obj_97_map_maxContains (.'$Schema'.maxContains)
def _jm_f_162(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.maxContains
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [.'$Schema'.maxContains]", path))
    return res

# check _jm_obj_97_map_maxItems (.'$Schema'.maxItems)
def _jm_f_163(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.maxItems
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [.'$Schema'.maxItems]", path))
    return res

# check _jm_obj_97_map_maxLength (.'$Schema'.maxLength)
def _jm_f_164(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.maxLength
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [.'$Schema'.maxLength]", path))
    return res

# check _jm_obj_97_map_maxProperties (.'$Schema'.maxProperties)
def _jm_f_165(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.maxProperties
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [.'$Schema'.maxProperties]", path))
    return res

# check _jm_obj_97_map_maximum (.'$Schema'.maximum)
def _jm_f_166(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.maximum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$Schema'.maximum]", path))
    return res

# check _jm_obj_97_map_minContains (.'$Schema'.minContains)
def _jm_f_167(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.minContains
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [.'$Schema'.minContains]", path))
    return res

# check _jm_obj_97_map_minItems (.'$Schema'.minItems)
def _jm_f_168(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.minItems
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [.'$Schema'.minItems]", path))
    return res

# check _jm_obj_97_map_minLength (.'$Schema'.minLength)
def _jm_f_169(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.minLength
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [.'$Schema'.minLength]", path))
    return res

# check _jm_obj_97_map_minProperties (.'$Schema'.minProperties)
def _jm_f_170(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.minProperties
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [.'$Schema'.minProperties]", path))
    return res

# check _jm_obj_97_map_minimum (.'$Schema'.minimum)
def _jm_f_171(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.minimum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$Schema'.minimum]", path))
    return res

# check _jm_obj_97_map_multipleOf (.'$Schema'.multipleOf)
def _jm_f_172(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.multipleOf
    res = isinstance(val, float) and val > 0.0
    if not res:
        rep is None or rep.append(("not a 1.0 strict float [.'$Schema'.multipleOf]", path))
    return res

# check _jm_obj_97_map_not (.'$Schema'.not)
def _jm_f_173(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.not
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.not]", path))
    return res

# check _jm_obj_97_map_oneOf (.'$Schema'.oneOf)
def _jm_f_174(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.oneOf
    res = json_model_57(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#schemaArray [.'$Schema'.oneOf]", path))
    return res

# check _jm_obj_97_map_pattern (.'$Schema'.pattern)
def _jm_f_175(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.pattern
    res = is_valid_regex(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $REGEX [.'$Schema'.pattern]", path))
    return res

# object .'$Schema'.patternProperties
def _jm_obj_102(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Schema'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_96: Path = (path + [ prop ]) if path is not None else None
        if is_valid_regex(prop, lpath_96 if path is not None else None, rep):
            # handle 1 key props
            # .'$Schema'.patternProperties.'$REGEX'
            res = json_model_60(pval, lpath_96 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.patternProperties.'$REGEX']", lpath_96 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Schema'.patternProperties]", lpath_96 if path is not None else None))
            return False
    return True

# check _jm_obj_97_map_patternProperties (.'$Schema'.patternProperties)
def _jm_f_176(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.patternProperties
    res = _jm_obj_102(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Schema'.patternProperties]", path))
    return res

# check _jm_obj_97_map_prefixItems (.'$Schema'.prefixItems)
def _jm_f_177(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.prefixItems
    res = json_model_57(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#schemaArray [.'$Schema'.prefixItems]", path))
    return res

# object .'$Schema'.properties
def _jm_obj_103(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Schema'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_97: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Schema'.properties.''
        res = json_model_60(pval, lpath_97 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.properties.'']", lpath_97 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_97_map_properties (.'$Schema'.properties)
def _jm_f_178(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.properties
    res = _jm_obj_103(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Schema'.properties]", path))
    return res

# check _jm_obj_97_map_propertyNames (.'$Schema'.propertyNames)
def _jm_f_179(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.propertyNames
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.propertyNames]", path))
    return res

# check _jm_obj_97_map_readOnly (.'$Schema'.readOnly)
def _jm_f_180(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Schema'.readOnly]", path))
    return res

# check _jm_obj_97_map_required (.'$Schema'.required)
def _jm_f_181(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.required
    res = json_model_54(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#stringArray [.'$Schema'.required]", path))
    return res

# check _jm_obj_97_map_then (.'$Schema'.then)
def _jm_f_182(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.then
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.then]", path))
    return res

# check _jm_obj_97_map_title (.'$Schema'.title)
def _jm_f_183(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Schema'.title]", path))
    return res


# check _jm_obj_97_map_type (.'$Schema'.type)
def _jm_f_184(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.type
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_11
    if not res:
        rep is None or rep.append(("value not in enum [.'$Schema'.type.'|']", path))
    if not res:
        # .'$Schema'.type.'|'.0
        res = json_model_53(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $schema#simpleTypesArray [.'$Schema'.type.'|'.0]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Schema'.type.'|']", path))
    return res

# check _jm_obj_97_map_unevaluatedItems (.'$Schema'.unevaluatedItems)
def _jm_f_185(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.unevaluatedItems
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.unevaluatedItems]", path))
    return res

# check _jm_obj_97_map_unevaluatedProperties (.'$Schema'.unevaluatedProperties)
def _jm_f_186(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.unevaluatedProperties
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema#Schema [.'$Schema'.unevaluatedProperties]", path))
    return res

# check _jm_obj_97_map_uniqueItems (.'$Schema'.uniqueItems)
def _jm_f_187(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.uniqueItems
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Schema'.uniqueItems]", path))
    return res

# check _jm_obj_97_map_writeOnly (.'$Schema'.writeOnly)
def _jm_f_188(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Schema'.writeOnly]", path))
    return res

# check _jm_obj_97_map_xml (.'$Schema'.xml)
def _jm_f_189(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'.xml
    res = json_model_34(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $XML [.'$Schema'.xml]", path))
    return res


# object .'$Schema'
def _jm_obj_97(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Schema']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_91: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_97_map.get(prop):
            # handle 61 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_91 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Schema']", lpath_91 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Schema']", lpath_91 if path is not None else None))
            return False
    return True

# check $Schema (.'$Schema')
def json_model_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'
    res = _jm_obj_97(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Schema']", path))
    return res

# object .'$Discriminator'.mapping
def _jm_obj_105(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Discriminator'.mapping]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_99: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Discriminator'.mapping.''
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$Discriminator'.mapping.'']", lpath_99 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Discriminator'
def _jm_obj_104(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Discriminator']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_98: Path = (path + [ prop ]) if path is not None else None
        if prop == "propertyName":
            # handle must propertyName property
            must_count += 1
            # .'$Discriminator'.propertyName
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Discriminator'.propertyName]", lpath_98 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Discriminator'.propertyName]", lpath_98 if path is not None else None))
                return False
        elif prop == "mapping":
            # handle may mapping property
            # .'$Discriminator'.mapping
            res = _jm_obj_105(pval, lpath_98 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Discriminator'.mapping]", lpath_98 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Discriminator'.mapping]", lpath_98 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$Discriminator'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Discriminator'.'/^x-/']", lpath_98 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Discriminator']", lpath_98 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "propertyName" in val:
                rep is None or rep.append(("missing mandatory prop <propertyName> [.'$Discriminator']", path))
        return False
    return True

# check $Discriminator (.'$Discriminator')
def json_model_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Discriminator'
    res = _jm_obj_104(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Discriminator']", path))
    return res

# object .'$XML'
def _jm_obj_106(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$XML']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_100: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$XML'.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$XML'.name]", lpath_100 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$XML'.name]", lpath_100 if path is not None else None))
                return False
        elif prop == "namespace":
            # handle may namespace property
            # .'$XML'.namespace
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$XML'.namespace]", lpath_100 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$XML'.namespace]", lpath_100 if path is not None else None))
                return False
        elif prop == "prefix":
            # handle may prefix property
            # .'$XML'.prefix
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$XML'.prefix]", lpath_100 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$XML'.prefix]", lpath_100 if path is not None else None))
                return False
        elif prop == "attribute":
            # handle may attribute property
            # .'$XML'.attribute
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$XML'.attribute]", lpath_100 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$XML'.attribute]", lpath_100 if path is not None else None))
                return False
        elif prop == "wrapped":
            # handle may wrapped property
            # .'$XML'.wrapped
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$XML'.wrapped]", lpath_100 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$XML'.wrapped]", lpath_100 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$XML'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$XML'.'/^x-/']", lpath_100 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$XML']", lpath_100 if path is not None else None))
            return False
    return True

# check $XML (.'$XML')
def json_model_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$XML'
    res = _jm_obj_106(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$XML']", path))
    return res


# object .'$SS-apikey'
def _jm_obj_107(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SS-apikey']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_101: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$SS-apikey'.type
            res = isinstance(pval, str) and pval == "apiKey"
            if not res:
                rep is None or rep.append(("unexpected _apiKey [.'$SS-apikey'.type]", lpath_101 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SS-apikey'.type]", lpath_101 if path is not None else None))
                return False
        elif prop == "name":
            # handle must name property
            must_count += 1
            # .'$SS-apikey'.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$SS-apikey'.name]", lpath_101 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SS-apikey'.name]", lpath_101 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$SS-apikey'.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_12
            if not res:
                rep is None or rep.append(("value not in enum [.'$SS-apikey'.in.'|']", lpath_101 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SS-apikey'.in]", lpath_101 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SS-apikey']", lpath_101 if path is not None else None))
            return False
    if must_count != 3:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$SS-apikey']", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$SS-apikey']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$SS-apikey']", path))
        return False
    return True

# check $SS-apikey (.'$SS-apikey')
def json_model_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$SS-apikey'
    res = _jm_obj_107(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$SS-apikey']", path))
    return res

# object .'$SS-http'
def _jm_obj_108(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SS-http']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_102: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$SS-http'.type
            res = isinstance(pval, str) and pval == "http"
            if not res:
                rep is None or rep.append(("unexpected _http [.'$SS-http'.type]", lpath_102 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SS-http'.type]", lpath_102 if path is not None else None))
                return False
        elif prop == "scheme":
            # handle must scheme property
            must_count += 1
            # .'$SS-http'.scheme
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$SS-http'.scheme]", lpath_102 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SS-http'.scheme]", lpath_102 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SS-http']", lpath_102 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "scheme" in val:
                rep is None or rep.append(("missing mandatory prop <scheme> [.'$SS-http']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$SS-http']", path))
        return False
    return True

# check $SS-http (.'$SS-http')
def json_model_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$SS-http'
    res = _jm_obj_108(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$SS-http']", path))
    return res

# object .'$SS-http-bearer'
def _jm_obj_109(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SS-http-bearer']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_103: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$SS-http-bearer'.type
            res = isinstance(pval, str) and pval == "http"
            if not res:
                rep is None or rep.append(("unexpected _http [.'$SS-http-bearer'.type]", lpath_103 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SS-http-bearer'.type]", lpath_103 if path is not None else None))
                return False
        elif prop == "scheme":
            # handle must scheme property
            must_count += 1
            # .'$SS-http-bearer'.scheme
            # "/bearer/i"
            res = isinstance(pval, str) and _jm_re_2(pval, lpath_103 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /bearer/i [.'$SS-http-bearer'.scheme]", lpath_103 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SS-http-bearer'.scheme]", lpath_103 if path is not None else None))
                return False
        elif prop == "bearerFormat":
            # handle may bearerFormat property
            # .'$SS-http-bearer'.bearerFormat
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$SS-http-bearer'.bearerFormat]", lpath_103 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SS-http-bearer'.bearerFormat]", lpath_103 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SS-http-bearer']", lpath_103 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "scheme" in val:
                rep is None or rep.append(("missing mandatory prop <scheme> [.'$SS-http-bearer']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$SS-http-bearer']", path))
        return False
    return True

# check $SS-http-bearer (.'$SS-http-bearer')
def json_model_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$SS-http-bearer'
    res = _jm_obj_109(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$SS-http-bearer']", path))
    return res

# object .'$SS-oauth2'
def _jm_obj_110(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SS-oauth2']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_104: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$SS-oauth2'.type
            res = isinstance(pval, str) and pval == "oauth2"
            if not res:
                rep is None or rep.append(("unexpected _oauth2 [.'$SS-oauth2'.type]", lpath_104 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SS-oauth2'.type]", lpath_104 if path is not None else None))
                return False
        elif prop == "flows":
            # handle must flows property
            must_count += 1
            # .'$SS-oauth2'.flows
            res = json_model_41(pval, lpath_104 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $OAuthFlows [.'$SS-oauth2'.flows]", lpath_104 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SS-oauth2'.flows]", lpath_104 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SS-oauth2']", lpath_104 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "flows" in val:
                rep is None or rep.append(("missing mandatory prop <flows> [.'$SS-oauth2']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$SS-oauth2']", path))
        return False
    return True

# check $SS-oauth2 (.'$SS-oauth2')
def json_model_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$SS-oauth2'
    res = _jm_obj_110(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$SS-oauth2']", path))
    return res

# object .'$SS-oic'
def _jm_obj_111(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SS-oic']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_105: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$SS-oic'.type
            res = isinstance(pval, str) and pval == "openIdConnect"
            if not res:
                rep is None or rep.append(("unexpected _openIdConnect [.'$SS-oic'.type]", lpath_105 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SS-oic'.type]", lpath_105 if path is not None else None))
                return False
        elif prop == "openIdConnectUrl":
            # handle must openIdConnectUrl property
            must_count += 1
            # .'$SS-oic'.openIdConnectUrl
            res = is_valid_url(pval, lpath_105 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$SS-oic'.openIdConnectUrl]", lpath_105 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SS-oic'.openIdConnectUrl]", lpath_105 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SS-oic']", lpath_105 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "openIdConnectUrl" in val:
                rep is None or rep.append(("missing mandatory prop <openIdConnectUrl> [.'$SS-oic']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$SS-oic']", path))
        return False
    return True

# check $SS-oic (.'$SS-oic')
def json_model_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$SS-oic'
    res = _jm_obj_111(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$SS-oic']", path))
    return res

# object .'$SecurityScheme'.'|'.5
def _jm_obj_112(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SecurityScheme'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_106: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # .'$SecurityScheme'.'|'.5.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$SecurityScheme'.'|'.5.description]", lpath_106 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SecurityScheme'.'|'.5.description]", lpath_106 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$SecurityScheme'.'|'.5.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$SecurityScheme'.'|'.5.'/^x-/']", lpath_106 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SecurityScheme'.'|'.5]", lpath_106 if path is not None else None))
            return False
    return True

# object .'$SecurityScheme'.'|'.4
def _jm_obj_113(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SecurityScheme'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_107: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$SecurityScheme'.'|'.4.type
            res = isinstance(pval, str) and pval == "openIdConnect"
            if not res:
                rep is None or rep.append(("unexpected _openIdConnect [.'$SecurityScheme'.'|'.4.type]", lpath_107 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SecurityScheme'.'|'.4.type]", lpath_107 if path is not None else None))
                return False
        elif prop == "openIdConnectUrl":
            # handle must openIdConnectUrl property
            must_count += 1
            # .'$SecurityScheme'.'|'.4.openIdConnectUrl
            res = is_valid_url(pval, lpath_107 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$SecurityScheme'.'|'.4.openIdConnectUrl]", lpath_107 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SecurityScheme'.'|'.4.openIdConnectUrl]", lpath_107 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$SecurityScheme'.'|'.4.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$SecurityScheme'.'|'.4.description]", lpath_107 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SecurityScheme'.'|'.4.description]", lpath_107 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SecurityScheme'.'|'.4]", lpath_107 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "openIdConnectUrl" in val:
                rep is None or rep.append(("missing mandatory prop <openIdConnectUrl> [.'$SecurityScheme'.'|'.4]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$SecurityScheme'.'|'.4]", path))
        return False
    return True

# object .'$SecurityScheme'.'|'.3
def _jm_obj_114(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SecurityScheme'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_108: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$SecurityScheme'.'|'.3.type
            res = isinstance(pval, str) and pval == "oauth2"
            if not res:
                rep is None or rep.append(("unexpected _oauth2 [.'$SecurityScheme'.'|'.3.type]", lpath_108 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SecurityScheme'.'|'.3.type]", lpath_108 if path is not None else None))
                return False
        elif prop == "flows":
            # handle must flows property
            must_count += 1
            # .'$SecurityScheme'.'|'.3.flows
            res = json_model_41(pval, lpath_108 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $OAuthFlows [.'$SecurityScheme'.'|'.3.flows]", lpath_108 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SecurityScheme'.'|'.3.flows]", lpath_108 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$SecurityScheme'.'|'.3.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$SecurityScheme'.'|'.3.description]", lpath_108 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SecurityScheme'.'|'.3.description]", lpath_108 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SecurityScheme'.'|'.3]", lpath_108 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "flows" in val:
                rep is None or rep.append(("missing mandatory prop <flows> [.'$SecurityScheme'.'|'.3]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$SecurityScheme'.'|'.3]", path))
        return False
    return True

# object .'$SecurityScheme'.'|'.2
def _jm_obj_115(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SecurityScheme'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_109: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$SecurityScheme'.'|'.2.type
            res = isinstance(pval, str) and pval == "http"
            if not res:
                rep is None or rep.append(("unexpected _http [.'$SecurityScheme'.'|'.2.type]", lpath_109 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SecurityScheme'.'|'.2.type]", lpath_109 if path is not None else None))
                return False
        elif prop == "scheme":
            # handle must scheme property
            must_count += 1
            # .'$SecurityScheme'.'|'.2.scheme
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$SecurityScheme'.'|'.2.scheme]", lpath_109 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SecurityScheme'.'|'.2.scheme]", lpath_109 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$SecurityScheme'.'|'.2.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$SecurityScheme'.'|'.2.description]", lpath_109 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SecurityScheme'.'|'.2.description]", lpath_109 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SecurityScheme'.'|'.2]", lpath_109 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "scheme" in val:
                rep is None or rep.append(("missing mandatory prop <scheme> [.'$SecurityScheme'.'|'.2]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$SecurityScheme'.'|'.2]", path))
        return False
    return True

# object .'$SecurityScheme'.'|'.1
def _jm_obj_116(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SecurityScheme'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_110: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$SecurityScheme'.'|'.1.type
            res = isinstance(pval, str) and pval == "http"
            if not res:
                rep is None or rep.append(("unexpected _http [.'$SecurityScheme'.'|'.1.type]", lpath_110 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SecurityScheme'.'|'.1.type]", lpath_110 if path is not None else None))
                return False
        elif prop == "scheme":
            # handle must scheme property
            must_count += 1
            # .'$SecurityScheme'.'|'.1.scheme
            # "/bearer/i"
            res = isinstance(pval, str) and _jm_re_2(pval, lpath_110 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /bearer/i [.'$SecurityScheme'.'|'.1.scheme]", lpath_110 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SecurityScheme'.'|'.1.scheme]", lpath_110 if path is not None else None))
                return False
        elif prop == "bearerFormat":
            # handle may bearerFormat property
            # .'$SecurityScheme'.'|'.1.bearerFormat
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$SecurityScheme'.'|'.1.bearerFormat]", lpath_110 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SecurityScheme'.'|'.1.bearerFormat]", lpath_110 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$SecurityScheme'.'|'.1.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$SecurityScheme'.'|'.1.description]", lpath_110 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SecurityScheme'.'|'.1.description]", lpath_110 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SecurityScheme'.'|'.1]", lpath_110 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "scheme" in val:
                rep is None or rep.append(("missing mandatory prop <scheme> [.'$SecurityScheme'.'|'.1]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$SecurityScheme'.'|'.1]", path))
        return False
    return True


# object .'$SecurityScheme'.'|'.0
def _jm_obj_117(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SecurityScheme'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_111: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$SecurityScheme'.'|'.0.type
            res = isinstance(pval, str) and pval == "apiKey"
            if not res:
                rep is None or rep.append(("unexpected _apiKey [.'$SecurityScheme'.'|'.0.type]", lpath_111 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SecurityScheme'.'|'.0.type]", lpath_111 if path is not None else None))
                return False
        elif prop == "name":
            # handle must name property
            must_count += 1
            # .'$SecurityScheme'.'|'.0.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$SecurityScheme'.'|'.0.name]", lpath_111 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SecurityScheme'.'|'.0.name]", lpath_111 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # .'$SecurityScheme'.'|'.0.in
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_13
            if not res:
                rep is None or rep.append(("value not in enum [.'$SecurityScheme'.'|'.0.in.'|']", lpath_111 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$SecurityScheme'.'|'.0.in]", lpath_111 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$SecurityScheme'.'|'.0.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$SecurityScheme'.'|'.0.description]", lpath_111 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$SecurityScheme'.'|'.0.description]", lpath_111 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$SecurityScheme'.'|'.0]", lpath_111 if path is not None else None))
            return False
    if must_count != 3:
        if rep is not None:
            if not "in" in val:
                rep is None or rep.append(("missing mandatory prop <in> [.'$SecurityScheme'.'|'.0]", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$SecurityScheme'.'|'.0]", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$SecurityScheme'.'|'.0]", path))
        return False
    return True

# check $SecurityScheme (.'$SecurityScheme')
def json_model_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$SecurityScheme'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$SecurityScheme'.'|']", path))
    if res:
        # .'$SecurityScheme'.'|'.0
        res = _jm_obj_117(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$SecurityScheme'.'|'.0]", path))
        if not res:
            # .'$SecurityScheme'.'|'.1
            res = _jm_obj_116(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$SecurityScheme'.'|'.1]", path))
            if not res:
                # .'$SecurityScheme'.'|'.2
                res = _jm_obj_115(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$SecurityScheme'.'|'.2]", path))
                if not res:
                    # .'$SecurityScheme'.'|'.3
                    res = _jm_obj_114(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$SecurityScheme'.'|'.3]", path))
                    if not res:
                        # .'$SecurityScheme'.'|'.4
                        res = _jm_obj_113(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$SecurityScheme'.'|'.4]", path))
                        if not res:
                            # .'$SecurityScheme'.'|'.5
                            res = _jm_obj_112(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$SecurityScheme'.'|'.5]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$SecurityScheme'.'|']", path))
    return res

# object .'$OAuthFlows'
def _jm_obj_118(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$OAuthFlows']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_112: Path = (path + [ prop ]) if path is not None else None
        if prop == "implicit":
            # handle may implicit property
            # .'$OAuthFlows'.implicit
            res = json_model_42(pval, lpath_112 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $OAuthFlow [.'$OAuthFlows'.implicit]", lpath_112 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$OAuthFlows'.implicit]", lpath_112 if path is not None else None))
                return False
        elif prop == "password":
            # handle may password property
            # .'$OAuthFlows'.password
            res = json_model_42(pval, lpath_112 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $OAuthFlow [.'$OAuthFlows'.password]", lpath_112 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$OAuthFlows'.password]", lpath_112 if path is not None else None))
                return False
        elif prop == "clientCredentials":
            # handle may clientCredentials property
            # .'$OAuthFlows'.clientCredentials
            res = json_model_42(pval, lpath_112 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $OAuthFlow [.'$OAuthFlows'.clientCredentials]", lpath_112 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$OAuthFlows'.clientCredentials]", lpath_112 if path is not None else None))
                return False
        elif prop == "authorizationCode":
            # handle may authorizationCode property
            # .'$OAuthFlows'.authorizationCode
            res = json_model_42(pval, lpath_112 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $OAuthFlow [.'$OAuthFlows'.authorizationCode]", lpath_112 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$OAuthFlows'.authorizationCode]", lpath_112 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$OAuthFlows'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$OAuthFlows'.'/^x-/']", lpath_112 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$OAuthFlows']", lpath_112 if path is not None else None))
            return False
    return True

# check $OAuthFlows (.'$OAuthFlows')
def json_model_41(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OAuthFlows'
    res = _jm_obj_118(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$OAuthFlows']", path))
    return res

# object .'$OAuthFlow'.scopes
def _jm_obj_120(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$OAuthFlow'.scopes]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_114: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$OAuthFlow'.scopes.''
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$OAuthFlow'.scopes.'']", lpath_114 if path is not None else None))
        if not res:
            return False
    return True

# object .'$OAuthFlow'
def _jm_obj_119(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$OAuthFlow']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_113: Path = (path + [ prop ]) if path is not None else None
        if prop == "authorizationUrl":
            # handle must authorizationUrl property
            must_count += 1
            # .'$OAuthFlow'.authorizationUrl
            res = is_valid_url(pval, lpath_113 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$OAuthFlow'.authorizationUrl]", lpath_113 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$OAuthFlow'.authorizationUrl]", lpath_113 if path is not None else None))
                return False
        elif prop == "tokenUrl":
            # handle must tokenUrl property
            must_count += 1
            # .'$OAuthFlow'.tokenUrl
            res = is_valid_url(pval, lpath_113 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$OAuthFlow'.tokenUrl]", lpath_113 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$OAuthFlow'.tokenUrl]", lpath_113 if path is not None else None))
                return False
        elif prop == "scopes":
            # handle must scopes property
            must_count += 1
            # .'$OAuthFlow'.scopes
            res = _jm_obj_120(pval, lpath_113 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$OAuthFlow'.scopes]", lpath_113 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$OAuthFlow'.scopes]", lpath_113 if path is not None else None))
                return False
        elif prop == "refreshUrl":
            # handle may refreshUrl property
            # .'$OAuthFlow'.refreshUrl
            res = is_valid_url(pval, lpath_113 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$OAuthFlow'.refreshUrl]", lpath_113 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$OAuthFlow'.refreshUrl]", lpath_113 if path is not None else None))
                return False
        elif prop.startswith("x-"):
            # handle 1 re props
            # .'$OAuthFlow'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$OAuthFlow'.'/^x-/']", lpath_113 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$OAuthFlow']", lpath_113 if path is not None else None))
            return False
    if must_count != 3:
        if rep is not None:
            if not ("authorizationUrl" in val):
                rep is None or rep.append(("missing mandatory prop <authorizationUrl> [.'$OAuthFlow']", path))
            if not "scopes" in val:
                rep is None or rep.append(("missing mandatory prop <scopes> [.'$OAuthFlow']", path))
            if not "tokenUrl" in val:
                rep is None or rep.append(("missing mandatory prop <tokenUrl> [.'$OAuthFlow']", path))
        return False
    return True

# check $OAuthFlow (.'$OAuthFlow')
def json_model_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$OAuthFlow'
    res = _jm_obj_119(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$OAuthFlow']", path))
    return res

# object .'$SecurityRequirement'
def _jm_obj_121(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$SecurityRequirement']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_115: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$SecurityRequirement'.''
        res = isinstance(pval, list)
        if res:
            for arr_10_idx, arr_10_item in enumerate(pval):
                arr_10_lpath: Path = ((lpath_115 if path is not None else None) + [ arr_10_idx ]) if (lpath_115 if path is not None else None) is not None else None
                # .'$SecurityRequirement'.''.0
                res = isinstance(arr_10_item, str)
                if not res:
                    rep is None or rep.append(("unexpected string [.'$SecurityRequirement'.''.0]", arr_10_lpath if (lpath_115 if path is not None else None) is not None else None))
                if not res:
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$SecurityRequirement'.'']", lpath_115 if path is not None else None))
        if not res:
            return False
    return True

# check $SecurityRequirement (.'$SecurityRequirement')
def json_model_43(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$SecurityRequirement'
    res = _jm_obj_121(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$SecurityRequirement']", path))
    return res

# object .'$Extension'
def _jm_obj_122(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Extension']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_116: Path = (path + [ prop ]) if path is not None else None
        if prop.startswith("x-"):
            # handle 1 re props
            # .'$Extension'.'/^x-/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Extension'.'/^x-/']", lpath_116 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Extension']", lpath_116 if path is not None else None))
            return False
    return True

# check $Extension (.'$Extension')
def json_model_44(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Extension'
    res = _jm_obj_122(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Extension']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $OpenAPI [.]", path))
    return res

# check $schema#URI-REFERENCE (.'$schema#URI-REFERENCE')
def json_model_46(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#URI-REFERENCE'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#URI-REFERENCE']", path))
    return res

# check $schema#simpleTypesArray (.'$schema#simpleTypesArray')
def json_model_53(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#simpleTypesArray'
    # .'$schema#simpleTypesArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_11_idx, arr_11_item in enumerate(val):
            arr_11_lpath: Path = (path + [ arr_11_idx ]) if path is not None else None
            # .'$schema#simpleTypesArray'.'@'.0
            res = json_model_52(arr_11_item, arr_11_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $simpleTypes [.'$schema#simpleTypesArray'.'@'.0]", arr_11_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#simpleTypesArray'.'@']", path))
    if res:
        ival_0: int = len(val)
        res = is_unique_array(val, path, rep) and ival_0 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#simpleTypesArray']", path))
    return res


# check $schema#simpleTypes (.'$schema#simpleTypes')
def json_model_52(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#simpleTypes'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_14
    if not res:
        rep is None or rep.append(("value not in enum [.'$schema#simpleTypes'.'|']", path))
    return res

# check $schema#stringArray (.'$schema#stringArray')
def json_model_54(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#stringArray'
    # .'$schema#stringArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_12_idx, arr_12_item in enumerate(val):
            arr_12_lpath: Path = (path + [ arr_12_idx ]) if path is not None else None
            # .'$schema#stringArray'.'@'.0
            res = isinstance(arr_12_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$schema#stringArray'.'@'.0]", arr_12_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#stringArray'.'@']", path))
    if res:
        res = is_unique_array(val, path, rep)
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#stringArray']", path))
    return res

# check $schema#nonNegativeInteger (.'$schema#nonNegativeInteger')
def json_model_55(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#nonNegativeInteger'
    res = ((isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val))) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$schema#nonNegativeInteger']", path))
    return res

# check $schema#schemaArray (.'$schema#schemaArray')
def json_model_57(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#schemaArray'
    # .'$schema#schemaArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_13_idx, arr_13_item in enumerate(val):
            arr_13_lpath: Path = (path + [ arr_13_idx ]) if path is not None else None
            # .'$schema#schemaArray'.'@'.0
            res = json_model_60(arr_13_item, arr_13_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schema#schemaArray'.'@'.0]", arr_13_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#schemaArray'.'@']", path))
    if res:
        ival_1: int = len(val)
        res = ival_1 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#schemaArray']", path))
    return res

# check $schema#Schema (.'$schema#Schema')
def json_model_60(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#Schema'
    # .'$schema#Schema'.'|'.0
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema#Schema'.'|'.0]", path))
    if not res:
        # .'$schema#Schema'.'|'.1
        res = json_model_59(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ObjectSchema [.'$schema#Schema'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$schema#Schema'.'|']", path))
    return res

# check _jm_obj_123_map_$anchor (.'$schema#ObjectSchema'.'$anchor')
def _jm_f_190(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.'$anchor'
    res = json_model_46(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI-REFERENCE [.'$schema#ObjectSchema'.'$anchor']", path))
    return res

# check _jm_obj_123_map_$comment (.'$schema#ObjectSchema'.'$comment')
def _jm_f_191(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.'$comment']", path))
    return res

# object .'$schema#ObjectSchema'.'$defs'
def _jm_obj_124(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_118: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.'$defs'.''
        res = json_model_60(pval, lpath_118 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.'$defs'.'']", lpath_118 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_123_map_$defs (.'$schema#ObjectSchema'.'$defs')
def _jm_f_192(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.'$defs'
    res = _jm_obj_124(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.'$defs']", path))
    return res

# check _jm_obj_123_map_$dynamicAnchor (.'$schema#ObjectSchema'.'$dynamicAnchor')
def _jm_f_193(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.'$dynamicAnchor'
    res = json_model_46(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI-REFERENCE [.'$schema#ObjectSchema'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_123_map_$dynamicRef (.'$schema#ObjectSchema'.'$dynamicRef')
def _jm_f_194(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.'$dynamicRef'
    res = json_model_46(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI-REFERENCE [.'$schema#ObjectSchema'.'$dynamicRef']", path))
    return res

# check _jm_obj_123_map_$id (.'$schema#ObjectSchema'.'$id')
def _jm_f_195(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.'$id'
    res = json_model_46(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI-REFERENCE [.'$schema#ObjectSchema'.'$id']", path))
    return res

# check _jm_obj_123_map_$ref (.'$schema#ObjectSchema'.'$ref')
def _jm_f_196(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.'$ref'
    res = json_model_46(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI-REFERENCE [.'$schema#ObjectSchema'.'$ref']", path))
    return res

# check _jm_obj_123_map_$schema (.'$schema#ObjectSchema'.'$schema')
def _jm_f_197(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.'$schema'
    res = isinstance(val, str) and (val == "https://json-schema.org/draft/2020-12/schema")
    if not res:
        rep is None or rep.append(("unexpected _https://json-schema.org/draft/2020-12/schema [.'$schema#ObjectSchema'.'$schema']", path))
    return res

# object .'$schema#ObjectSchema'.'$vocabulary'
def _jm_obj_125(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_119: Path = (path + [ prop ]) if path is not None else None
        if is_valid_url(prop, lpath_119 if path is not None else None, rep):
            # handle 1 key props
            # .'$schema#ObjectSchema'.'$vocabulary'.'$URI'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$schema#ObjectSchema'.'$vocabulary'.'$URI']", lpath_119 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$schema#ObjectSchema'.'$vocabulary']", lpath_119 if path is not None else None))
            return False
    return True

# check _jm_obj_123_map_$vocabulary (.'$schema#ObjectSchema'.'$vocabulary')
def _jm_f_198(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.'$vocabulary'
    res = _jm_obj_125(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.'$vocabulary']", path))
    return res

# check _jm_obj_123_map_additionalProperties (.'$schema#ObjectSchema'.additionalProperties)
def _jm_f_199(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.additionalProperties
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.additionalProperties]", path))
    return res

# check _jm_obj_123_map_allOf (.'$schema#ObjectSchema'.allOf)
def _jm_f_200(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.allOf
    res = json_model_57(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [.'$schema#ObjectSchema'.allOf]", path))
    return res

# check _jm_obj_123_map_anyOf (.'$schema#ObjectSchema'.anyOf)
def _jm_f_201(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.anyOf
    res = json_model_57(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [.'$schema#ObjectSchema'.anyOf]", path))
    return res

# check _jm_obj_123_map_const (.'$schema#ObjectSchema'.const)
def _jm_f_202(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.const
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$schema#ObjectSchema'.const]", path))
    return res

# check _jm_obj_123_map_contains (.'$schema#ObjectSchema'.contains)
def _jm_f_203(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.contains
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.contains]", path))
    return res

# check _jm_obj_123_map_contentEncoding (.'$schema#ObjectSchema'.contentEncoding)
def _jm_f_204(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.contentEncoding
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.contentEncoding]", path))
    return res

# check _jm_obj_123_map_contentMediaType (.'$schema#ObjectSchema'.contentMediaType)
def _jm_f_205(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.contentMediaType
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.contentMediaType]", path))
    return res

# check _jm_obj_123_map_contentSchema (.'$schema#ObjectSchema'.contentSchema)
def _jm_f_206(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.contentSchema
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.contentSchema]", path))
    return res

# check _jm_obj_123_map_default (.'$schema#ObjectSchema'.default)
def _jm_f_207(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$schema#ObjectSchema'.default]", path))
    return res

# object .'$schema#ObjectSchema'.dependentRequired
def _jm_obj_126(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.dependentRequired]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_120: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.dependentRequired.''
        res = json_model_54(pval, lpath_120 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $stringArray [.'$schema#ObjectSchema'.dependentRequired.'']", lpath_120 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_123_map_dependentRequired (.'$schema#ObjectSchema'.dependentRequired)
def _jm_f_208(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.dependentRequired
    res = _jm_obj_126(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.dependentRequired]", path))
    return res

# object .'$schema#ObjectSchema'.dependentSchemas
def _jm_obj_127(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.dependentSchemas]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_121: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.dependentSchemas.''
        res = json_model_60(pval, lpath_121 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.dependentSchemas.'']", lpath_121 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_123_map_dependentSchemas (.'$schema#ObjectSchema'.dependentSchemas)
def _jm_f_209(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.dependentSchemas
    res = _jm_obj_127(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.dependentSchemas]", path))
    return res

# check _jm_obj_123_map_deprecated (.'$schema#ObjectSchema'.deprecated)
def _jm_f_210(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.deprecated
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema#ObjectSchema'.deprecated]", path))
    return res

# check _jm_obj_123_map_description (.'$schema#ObjectSchema'.description)
def _jm_f_211(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.description]", path))
    return res

# check _jm_obj_123_map_else (.'$schema#ObjectSchema'.else)
def _jm_f_212(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.else
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.else]", path))
    return res

# check _jm_obj_123_map_enum (.'$schema#ObjectSchema'.enum)
def _jm_f_213(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.enum
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#ObjectSchema'.enum]", path))
    return res

# check _jm_obj_123_map_examples (.'$schema#ObjectSchema'.examples)
def _jm_f_214(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#ObjectSchema'.examples]", path))
    return res

# check _jm_obj_123_map_exclusiveMaximum (.'$schema#ObjectSchema'.exclusiveMaximum)
def _jm_f_215(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.exclusiveMaximum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.exclusiveMaximum]", path))
    return res

# check _jm_obj_123_map_exclusiveMinimum (.'$schema#ObjectSchema'.exclusiveMinimum)
def _jm_f_216(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.exclusiveMinimum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.exclusiveMinimum]", path))
    return res

# check _jm_obj_123_map_format (.'$schema#ObjectSchema'.format)
def _jm_f_217(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.format
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.format]", path))
    return res

# check _jm_obj_123_map_if (.'$schema#ObjectSchema'.if)
def _jm_f_218(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.if
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.if]", path))
    return res

# check _jm_obj_123_map_items (.'$schema#ObjectSchema'.items)
def _jm_f_219(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.items
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.items]", path))
    return res

# check _jm_obj_123_map_maxContains (.'$schema#ObjectSchema'.maxContains)
def _jm_f_220(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.maxContains
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $nonNegativeInteger [.'$schema#ObjectSchema'.maxContains]", path))
    return res

# check _jm_obj_123_map_maxItems (.'$schema#ObjectSchema'.maxItems)
def _jm_f_221(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.maxItems
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $nonNegativeInteger [.'$schema#ObjectSchema'.maxItems]", path))
    return res

# check _jm_obj_123_map_maxLength (.'$schema#ObjectSchema'.maxLength)
def _jm_f_222(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.maxLength
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $nonNegativeInteger [.'$schema#ObjectSchema'.maxLength]", path))
    return res

# check _jm_obj_123_map_maxProperties (.'$schema#ObjectSchema'.maxProperties)
def _jm_f_223(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.maxProperties
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $nonNegativeInteger [.'$schema#ObjectSchema'.maxProperties]", path))
    return res

# check _jm_obj_123_map_maximum (.'$schema#ObjectSchema'.maximum)
def _jm_f_224(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.maximum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.maximum]", path))
    return res

# check _jm_obj_123_map_minContains (.'$schema#ObjectSchema'.minContains)
def _jm_f_225(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.minContains
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $nonNegativeInteger [.'$schema#ObjectSchema'.minContains]", path))
    return res

# check _jm_obj_123_map_minItems (.'$schema#ObjectSchema'.minItems)
def _jm_f_226(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.minItems
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $nonNegativeInteger [.'$schema#ObjectSchema'.minItems]", path))
    return res

# check _jm_obj_123_map_minLength (.'$schema#ObjectSchema'.minLength)
def _jm_f_227(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.minLength
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $nonNegativeInteger [.'$schema#ObjectSchema'.minLength]", path))
    return res

# check _jm_obj_123_map_minProperties (.'$schema#ObjectSchema'.minProperties)
def _jm_f_228(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.minProperties
    res = json_model_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $nonNegativeInteger [.'$schema#ObjectSchema'.minProperties]", path))
    return res

# check _jm_obj_123_map_minimum (.'$schema#ObjectSchema'.minimum)
def _jm_f_229(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.minimum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.minimum]", path))
    return res

# check _jm_obj_123_map_multipleOf (.'$schema#ObjectSchema'.multipleOf)
def _jm_f_230(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.multipleOf
    res = isinstance(val, (int, float)) and not isinstance(val, bool) and val > 0.0
    if not res:
        rep is None or rep.append(("not a 1.0 loose float [.'$schema#ObjectSchema'.multipleOf]", path))
    return res

# check _jm_obj_123_map_not (.'$schema#ObjectSchema'.not)
def _jm_f_231(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.not
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.not]", path))
    return res

# check _jm_obj_123_map_oneOf (.'$schema#ObjectSchema'.oneOf)
def _jm_f_232(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.oneOf
    res = json_model_57(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [.'$schema#ObjectSchema'.oneOf]", path))
    return res

# check _jm_obj_123_map_pattern (.'$schema#ObjectSchema'.pattern)
def _jm_f_233(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.pattern
    res = is_valid_regex(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $REGEX [.'$schema#ObjectSchema'.pattern]", path))
    return res

# object .'$schema#ObjectSchema'.patternProperties
def _jm_obj_128(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_122: Path = (path + [ prop ]) if path is not None else None
        if is_valid_regex(prop, lpath_122 if path is not None else None, rep):
            # handle 1 key props
            # .'$schema#ObjectSchema'.patternProperties.'$REGEX'
            res = json_model_60(pval, lpath_122 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.patternProperties.'$REGEX']", lpath_122 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$schema#ObjectSchema'.patternProperties]", lpath_122 if path is not None else None))
            return False
    return True

# check _jm_obj_123_map_patternProperties (.'$schema#ObjectSchema'.patternProperties)
def _jm_f_234(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.patternProperties
    res = _jm_obj_128(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.patternProperties]", path))
    return res

# check _jm_obj_123_map_prefixItems (.'$schema#ObjectSchema'.prefixItems)
def _jm_f_235(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.prefixItems
    res = json_model_57(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [.'$schema#ObjectSchema'.prefixItems]", path))
    return res

# object .'$schema#ObjectSchema'.properties
def _jm_obj_129(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_123: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.properties.''
        res = json_model_60(pval, lpath_123 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.properties.'']", lpath_123 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_123_map_properties (.'$schema#ObjectSchema'.properties)
def _jm_f_236(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.properties
    res = _jm_obj_129(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.properties]", path))
    return res

# check _jm_obj_123_map_propertyNames (.'$schema#ObjectSchema'.propertyNames)
def _jm_f_237(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.propertyNames
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.propertyNames]", path))
    return res

# check _jm_obj_123_map_readOnly (.'$schema#ObjectSchema'.readOnly)
def _jm_f_238(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.readOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema#ObjectSchema'.readOnly]", path))
    return res

# check _jm_obj_123_map_required (.'$schema#ObjectSchema'.required)
def _jm_f_239(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.required
    res = json_model_54(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $stringArray [.'$schema#ObjectSchema'.required]", path))
    return res

# check _jm_obj_123_map_then (.'$schema#ObjectSchema'.then)
def _jm_f_240(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.then
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.then]", path))
    return res

# check _jm_obj_123_map_title (.'$schema#ObjectSchema'.title)
def _jm_f_241(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.title]", path))
    return res


# check _jm_obj_123_map_type (.'$schema#ObjectSchema'.type)
def _jm_f_242(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.type
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_15
    if not res:
        rep is None or rep.append(("value not in enum [.'$schema#ObjectSchema'.type.'|']", path))
    if not res:
        # .'$schema#ObjectSchema'.type.'|'.0
        res = json_model_53(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $simpleTypesArray [.'$schema#ObjectSchema'.type.'|'.0]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema#ObjectSchema'.type.'|']", path))
    return res

# check _jm_obj_123_map_unevaluatedItems (.'$schema#ObjectSchema'.unevaluatedItems)
def _jm_f_243(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.unevaluatedItems
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.unevaluatedItems]", path))
    return res

# check _jm_obj_123_map_unevaluatedProperties (.'$schema#ObjectSchema'.unevaluatedProperties)
def _jm_f_244(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.unevaluatedProperties
    res = json_model_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.unevaluatedProperties]", path))
    return res

# check _jm_obj_123_map_uniqueItems (.'$schema#ObjectSchema'.uniqueItems)
def _jm_f_245(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.uniqueItems
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema#ObjectSchema'.uniqueItems]", path))
    return res

# check _jm_obj_123_map_writeOnly (.'$schema#ObjectSchema'.writeOnly)
def _jm_f_246(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.writeOnly
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema#ObjectSchema'.writeOnly]", path))
    return res


# object .'$schema#ObjectSchema'
def _jm_obj_123(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_117: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_123_map.get(prop):
            # handle 57 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_117 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$schema#ObjectSchema']", lpath_117 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$schema#ObjectSchema']", lpath_117 if path is not None else None))
            return False
    return True

# check $schema#ObjectSchema (.'$schema#ObjectSchema')
def json_model_59(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'
    res = _jm_obj_123(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile("^3\\.1\\.\\d+(-.+)?$")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global _jm_obj_0_map
        _jm_obj_0_map = {
            "components": _jm_f_0,
            "externalDocs": _jm_f_1,
            "jsonSchemaDialect": _jm_f_2,
            "paths": _jm_f_3,
            "security": _jm_f_4,
            "servers": _jm_f_5,
            "tags": _jm_f_6,
            "webhooks": _jm_f_7,
        }
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = re.compile("^x\\-.*$")
        _jm_re_1 = lambda s, p, r: _jm_re_1_reco.search(s) is not None
        global _jm_obj_15_map
        _jm_obj_15_map = {
            "allowEmptyValue": _jm_f_11,
            "allowReserved": _jm_f_12,
            "deprecated": _jm_f_13,
            "description": _jm_f_14,
            "example": _jm_f_15,
            "examples": _jm_f_16,
            "explode": _jm_f_17,
            "required": _jm_f_18,
            "schema": _jm_f_19,
            "style": _jm_f_20,
        }
        global _jm_cst_0
        _jm_cst_0 = {'cookie', 'header', 'path', 'query'}
        global _jm_cst_1
        _jm_cst_1 = {'cookie', 'header', 'path', 'query'}
        global _jm_obj_25_map
        _jm_obj_25_map = {
            "allowEmptyValue": _jm_f_23,
            "allowReserved": _jm_f_24,
            "deprecated": _jm_f_25,
            "description": _jm_f_26,
            "example": _jm_f_27,
            "examples": _jm_f_28,
            "explode": _jm_f_29,
            "required": _jm_f_30,
            "schema": _jm_f_31,
            "style": _jm_f_32,
        }
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = re.compile("(?i)bearer")
        _jm_re_2 = lambda s, p, r: _jm_re_2_reco.search(s) is not None
        global _jm_cst_2
        _jm_cst_2 = {'cookie', 'header', 'query'}
        global _jm_obj_9_map
        _jm_obj_9_map = {
            "callbacks": _jm_f_8,
            "examples": _jm_f_9,
            "headers": _jm_f_10,
            "links": _jm_f_21,
            "parameters": _jm_f_22,
            "pathItems": _jm_f_33,
            "requestBodies": _jm_f_34,
            "responses": _jm_f_35,
            "schemas": _jm_f_36,
            "securitySchemes": _jm_f_37,
        }
        global _jm_cst_3
        _jm_cst_3 = {'cookie', 'header', 'path', 'query'}
        global _jm_cst_4
        _jm_cst_4 = {'cookie', 'header', 'path', 'query'}
        global _jm_obj_42_map
        _jm_obj_42_map = {
            "allowEmptyValue": _jm_f_45,
            "allowReserved": _jm_f_46,
            "deprecated": _jm_f_47,
            "description": _jm_f_48,
            "example": _jm_f_49,
            "examples": _jm_f_50,
            "explode": _jm_f_51,
            "required": _jm_f_52,
            "schema": _jm_f_53,
            "style": _jm_f_54,
        }
        global _jm_obj_39_map
        _jm_obj_39_map = {
            "$ref": _jm_f_38,
            "delete": _jm_f_39,
            "description": _jm_f_40,
            "get": _jm_f_41,
            "head": _jm_f_42,
            "options": _jm_f_43,
            "parameters": _jm_f_44,
            "patch": _jm_f_55,
            "post": _jm_f_56,
            "put": _jm_f_57,
            "servers": _jm_f_58,
            "summary": _jm_f_59,
            "trace": _jm_f_60,
        }
        global _jm_cst_5
        _jm_cst_5 = {'cookie', 'header', 'path', 'query'}
        global _jm_cst_6
        _jm_cst_6 = {'cookie', 'header', 'path', 'query'}
        global _jm_obj_48_map
        _jm_obj_48_map = {
            "allowEmptyValue": _jm_f_67,
            "allowReserved": _jm_f_68,
            "deprecated": _jm_f_69,
            "description": _jm_f_70,
            "example": _jm_f_71,
            "examples": _jm_f_72,
            "explode": _jm_f_73,
            "required": _jm_f_74,
            "schema": _jm_f_75,
            "style": _jm_f_76,
        }
        global _jm_obj_44_map
        _jm_obj_44_map = {
            "callbacks": _jm_f_61,
            "deprecated": _jm_f_62,
            "description": _jm_f_63,
            "externalDocs": _jm_f_64,
            "operationId": _jm_f_65,
            "parameters": _jm_f_66,
            "requestBody": _jm_f_77,
            "responses": _jm_f_78,
            "security": _jm_f_79,
            "servers": _jm_f_80,
            "summary": _jm_f_81,
            "tags": _jm_f_82,
        }
        global _jm_cst_7
        _jm_cst_7 = {'cookie', 'header', 'path', 'query'}
        global _jm_cst_8
        _jm_cst_8 = {'deepObject', 'form', 'label', 'matrix', 'pipeDelimited', 'simple', 'spaceDelimited'}
        global _jm_obj_53_map
        _jm_obj_53_map = {
            "allowReserved": _jm_f_83,
            "example": _jm_f_84,
            "examples": _jm_f_85,
            "explode": _jm_f_86,
            "schema": _jm_f_87,
            "style": _jm_f_88,
        }
        global _jm_cst_9
        _jm_cst_9 = {'cookie', 'header', 'path', 'query'}
        global _jm_cst_10
        _jm_cst_10 = {'cookie', 'header', 'path', 'query'}
        global _jm_obj_59_map
        _jm_obj_59_map = {
            "allowEmptyValue": _jm_f_89,
            "allowReserved": _jm_f_90,
            "deprecated": _jm_f_91,
            "description": _jm_f_92,
            "example": _jm_f_93,
            "examples": _jm_f_94,
            "explode": _jm_f_95,
            "required": _jm_f_96,
            "schema": _jm_f_97,
            "style": _jm_f_98,
        }
        global _jm_obj_70_map
        _jm_obj_70_map = {
            "allowEmptyValue": _jm_f_99,
            "allowReserved": _jm_f_100,
            "deprecated": _jm_f_101,
            "description": _jm_f_102,
            "example": _jm_f_103,
            "examples": _jm_f_104,
            "explode": _jm_f_105,
            "required": _jm_f_106,
            "schema": _jm_f_107,
            "style": _jm_f_108,
        }
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = re.compile("^[1-5](\\d\\d|XX)$")
        _jm_re_3 = lambda s, p, r: _jm_re_3_reco.search(s) is not None
        global _jm_obj_77_map
        _jm_obj_77_map = {
            "allowEmptyValue": _jm_f_109,
            "allowReserved": _jm_f_110,
            "deprecated": _jm_f_111,
            "description": _jm_f_112,
            "example": _jm_f_113,
            "examples": _jm_f_114,
            "explode": _jm_f_115,
            "required": _jm_f_116,
            "schema": _jm_f_117,
            "style": _jm_f_118,
        }
        global _jm_obj_93_map
        _jm_obj_93_map = {
            "allowEmptyValue": _jm_f_119,
            "allowReserved": _jm_f_120,
            "deprecated": _jm_f_121,
            "description": _jm_f_122,
            "example": _jm_f_123,
            "examples": _jm_f_124,
            "explode": _jm_f_125,
            "required": _jm_f_126,
            "schema": _jm_f_127,
            "style": _jm_f_128,
        }
        global _jm_cst_11
        _jm_cst_11 = {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global _jm_obj_97_map
        _jm_obj_97_map = {
            "$anchor": _jm_f_129,
            "$comment": _jm_f_130,
            "$defs": _jm_f_131,
            "$dynamicAnchor": _jm_f_132,
            "$dynamicRef": _jm_f_133,
            "$id": _jm_f_134,
            "$ref": _jm_f_135,
            "$schema": _jm_f_136,
            "$vocabulary": _jm_f_137,
            "additionalProperties": _jm_f_138,
            "allOf": _jm_f_139,
            "anyOf": _jm_f_140,
            "const": _jm_f_141,
            "contains": _jm_f_142,
            "contentEncoding": _jm_f_143,
            "contentMediaType": _jm_f_144,
            "contentSchema": _jm_f_145,
            "default": _jm_f_146,
            "dependentRequired": _jm_f_147,
            "dependentSchemas": _jm_f_148,
            "deprecated": _jm_f_149,
            "description": _jm_f_150,
            "discriminator": _jm_f_151,
            "else": _jm_f_152,
            "enum": _jm_f_153,
            "example": _jm_f_154,
            "examples": _jm_f_155,
            "exclusiveMaximum": _jm_f_156,
            "exclusiveMinimum": _jm_f_157,
            "externalDocs": _jm_f_158,
            "format": _jm_f_159,
            "if": _jm_f_160,
            "items": _jm_f_161,
            "maxContains": _jm_f_162,
            "maxItems": _jm_f_163,
            "maxLength": _jm_f_164,
            "maxProperties": _jm_f_165,
            "maximum": _jm_f_166,
            "minContains": _jm_f_167,
            "minItems": _jm_f_168,
            "minLength": _jm_f_169,
            "minProperties": _jm_f_170,
            "minimum": _jm_f_171,
            "multipleOf": _jm_f_172,
            "not": _jm_f_173,
            "oneOf": _jm_f_174,
            "pattern": _jm_f_175,
            "patternProperties": _jm_f_176,
            "prefixItems": _jm_f_177,
            "properties": _jm_f_178,
            "propertyNames": _jm_f_179,
            "readOnly": _jm_f_180,
            "required": _jm_f_181,
            "then": _jm_f_182,
            "title": _jm_f_183,
            "type": _jm_f_184,
            "unevaluatedItems": _jm_f_185,
            "unevaluatedProperties": _jm_f_186,
            "uniqueItems": _jm_f_187,
            "writeOnly": _jm_f_188,
            "xml": _jm_f_189,
        }
        global _jm_cst_12
        _jm_cst_12 = {'cookie', 'header', 'query'}
        global _jm_cst_13
        _jm_cst_13 = {'cookie', 'header', 'query'}
        global _jm_cst_14
        _jm_cst_14 = {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global _jm_cst_15
        _jm_cst_15 = {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global _jm_obj_123_map
        _jm_obj_123_map = {
            "$anchor": _jm_f_190,
            "$comment": _jm_f_191,
            "$defs": _jm_f_192,
            "$dynamicAnchor": _jm_f_193,
            "$dynamicRef": _jm_f_194,
            "$id": _jm_f_195,
            "$ref": _jm_f_196,
            "$schema": _jm_f_197,
            "$vocabulary": _jm_f_198,
            "additionalProperties": _jm_f_199,
            "allOf": _jm_f_200,
            "anyOf": _jm_f_201,
            "const": _jm_f_202,
            "contains": _jm_f_203,
            "contentEncoding": _jm_f_204,
            "contentMediaType": _jm_f_205,
            "contentSchema": _jm_f_206,
            "default": _jm_f_207,
            "dependentRequired": _jm_f_208,
            "dependentSchemas": _jm_f_209,
            "deprecated": _jm_f_210,
            "description": _jm_f_211,
            "else": _jm_f_212,
            "enum": _jm_f_213,
            "examples": _jm_f_214,
            "exclusiveMaximum": _jm_f_215,
            "exclusiveMinimum": _jm_f_216,
            "format": _jm_f_217,
            "if": _jm_f_218,
            "items": _jm_f_219,
            "maxContains": _jm_f_220,
            "maxItems": _jm_f_221,
            "maxLength": _jm_f_222,
            "maxProperties": _jm_f_223,
            "maximum": _jm_f_224,
            "minContains": _jm_f_225,
            "minItems": _jm_f_226,
            "minLength": _jm_f_227,
            "minProperties": _jm_f_228,
            "minimum": _jm_f_229,
            "multipleOf": _jm_f_230,
            "not": _jm_f_231,
            "oneOf": _jm_f_232,
            "pattern": _jm_f_233,
            "patternProperties": _jm_f_234,
            "prefixItems": _jm_f_235,
            "properties": _jm_f_236,
            "propertyNames": _jm_f_237,
            "readOnly": _jm_f_238,
            "required": _jm_f_239,
            "then": _jm_f_240,
            "title": _jm_f_241,
            "type": _jm_f_242,
            "unevaluatedItems": _jm_f_243,
            "unevaluatedProperties": _jm_f_244,
            "uniqueItems": _jm_f_245,
            "writeOnly": _jm_f_246,
        }
        global check_model_map
        check_model_map = {
            "": json_model_2,
            "OpenAPI": json_model_2,
            "Info": json_model_3,
            "Contact": json_model_4,
            "License": json_model_5,
            "Server": json_model_6,
            "ServerVariable": json_model_7,
            "Components": json_model_8,
            "Paths": json_model_9,
            "PathItem": json_model_10,
            "Operation": json_model_11,
            "ExternalDocumentation": json_model_12,
            "parameterShare": json_model_13,
            "commonParameter": json_model_14,
            "Style": json_model_15,
            "parameterSchemaOnly": json_model_16,
            "parameterContentOnly": json_model_17,
            "Parameter": json_model_18,
            "RequestBody": json_model_19,
            "MediaType": json_model_20,
            "Encoding": json_model_21,
            "Responses": json_model_22,
            "Response": json_model_23,
            "Callback": json_model_24,
            "Example": json_model_25,
            "Expression": json_model_26,
            "Link": json_model_27,
            "Header": json_model_28,
            "Tag": json_model_29,
            "Reference": json_model_30,
            "schema": json_model_45,
            "Schema": json_model_32,
            "Discriminator": json_model_33,
            "XML": json_model_34,
            "SS-apikey": json_model_35,
            "SS-http": json_model_36,
            "SS-http-bearer": json_model_37,
            "SS-oauth2": json_model_38,
            "SS-oic": json_model_39,
            "SecurityScheme": json_model_40,
            "OAuthFlows": json_model_41,
            "OAuthFlow": json_model_42,
            "SecurityRequirement": json_model_43,
            "Extension": json_model_44,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = None
        _jm_re_1 = None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = None
        _jm_re_2 = None
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = None
        _jm_re_3 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
