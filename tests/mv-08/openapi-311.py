#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_obj_0_map: PropMap
_jm_re_0_search: Callable
_jm_re_0: RegexFun
_jm_obj_2_map: PropMap
_jm_obj_9_map: PropMap
_jm_re_1_search: Callable
_jm_re_1: RegexFun
_jm_obj_21_map: PropMap
_jm_obj_22_map: PropMap
_jm_obj_25_map: PropMap
_jm_cst_0: set[str]
_jm_obj_26_map: PropMap
_jm_cst_1: set[str]
_jm_obj_27_map: PropMap
_jm_cst_2: set[str]
_jm_obj_31_map: PropMap
_jm_cst_3: set[str]
_jm_obj_33_map: PropMap
_jm_obj_37_map: PropMap
_jm_obj_40_map: PropMap
_jm_re_2_search: Callable
_jm_re_2: RegexFun
_jm_obj_43_map: PropMap
_jm_obj_48_map: PropMap
_jm_obj_49_map: PropMap
_jm_obj_51_map: PropMap
_jm_obj_53_map: PropMap
_jm_obj_55_map: PropMap
_jm_obj_59_map: PropMap
_jm_obj_68_map: PropMap
_jm_cst_4: set[str]
_jm_obj_69_mup: PropMap
_jm_obj_70_map: PropMap
_jm_cst_5: set[str]
_jm_obj_75_map: PropMap
check_model_map: PropMap

# check $URI ($.'$URI')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$URI'
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$URI']", path))
    return res

# check _jm_obj_0_map_component ($.'$OpenAPI'.component)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OpenAPI'.component
    res = json_model_9(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Components [$.'$OpenAPI'.component]", path))
    return res

# check _jm_obj_0_map_externalDocs ($.'$OpenAPI'.externalDocs)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OpenAPI'.externalDocs
    res = json_model_13(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ExternalDocumentation [$.'$OpenAPI'.externalDocs]", path))
    return res

# check _jm_obj_0_map_jsonSchemaDialect ($.'$OpenAPI'.jsonSchemaDialect)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OpenAPI'.jsonSchemaDialect
    res = is_valid_url(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $URL [$.'$OpenAPI'.jsonSchemaDialect]", path))
    return res

# check _jm_obj_0_map_paths ($.'$OpenAPI'.paths)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OpenAPI'.paths
    res = json_model_10(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Paths [$.'$OpenAPI'.paths]", path))
    return res

# check _jm_obj_0_map_security ($.'$OpenAPI'.security)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OpenAPI'.security
    res = json_model_39(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $SecurityRequirement [$.'$OpenAPI'.security]", path))
    return res

# check _jm_obj_0_map_servers ($.'$OpenAPI'.servers)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OpenAPI'.servers
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # $.'$OpenAPI'.servers.0
            res = json_model_7(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Server [$.'$OpenAPI'.servers.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$OpenAPI'.servers]", path))
    return res

# check _jm_obj_0_map_tags ($.'$OpenAPI'.tags)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OpenAPI'.tags
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # $.'$OpenAPI'.tags.0
            res = json_model_30(arr_1_item, arr_1_lpath if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Tag [$.'$OpenAPI'.tags.0]", arr_1_lpath if path is not None else None))
            if not res:
                break
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$OpenAPI'.tags]", path))
    return res

# object $.'$OpenAPI'.webhooks
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$OpenAPI'.webhooks]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$OpenAPI'.webhooks.''
        res = json_model_11(pval, lpath_1 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $PathItem [$.'$OpenAPI'.webhooks.'']", lpath_1 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_0_map_webhooks ($.'$OpenAPI'.webhooks)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OpenAPI'.webhooks
    res = _jm_obj_1(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$OpenAPI'.webhooks]", path))
    return res



# object $.'$OpenAPI'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$OpenAPI']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "openapi":
            # handle must openapi property
            must_count += 1
            # $.'$OpenAPI'.openapi
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$OpenAPI'.openapi]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$OpenAPI'.openapi]", lpath_0 if path is not None else None))
                return False
        elif prop == "info":
            # handle must info property
            must_count += 1
            # $.'$OpenAPI'.info
            res = json_model_4(pval, lpath_0 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Info [$.'$OpenAPI'.info]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$OpenAPI'.info]", lpath_0 if path is not None else None))
                return False
        elif pfun := _jm_obj_0_map.get(prop):
            # handle 8 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$OpenAPI']", lpath_0 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$OpenAPI'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$OpenAPI'.'/^x\\\\-.*$/']", lpath_0 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$OpenAPI']", lpath_0 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'$OpenAPI']", path))
        return False
    return True

# check $OpenAPI ($.'$OpenAPI')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OpenAPI'
    res = _jm_obj_0(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$OpenAPI']", path))
    return res

# check _jm_obj_2_map_contact ($.'$Info'.contact)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Info'.contact
    res = json_model_5(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Contact [$.'$Info'.contact]", path))
    return res

# check _jm_obj_2_map_description ($.'$Info'.description)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Info'.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Info'.description]", path))
    return res

# check _jm_obj_2_map_license ($.'$Info'.license)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Info'.license
    res = json_model_6(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $License [$.'$Info'.license]", path))
    return res

# check _jm_obj_2_map_summary ($.'$Info'.summary)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Info'.summary
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Info'.summary]", path))
    return res

# check _jm_obj_2_map_termsOfService ($.'$Info'.termsOfService)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Info'.termsOfService
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Info'.termsOfService]", path))
    return res


# object $.'$Info'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Info']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "title":
            # handle must title property
            must_count += 1
            # $.'$Info'.title
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Info'.title]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Info'.title]", lpath_2 if path is not None else None))
                return False
        elif prop == "version":
            # handle must version property
            must_count += 1
            # $.'$Info'.version
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Info'.version]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Info'.version]", lpath_2 if path is not None else None))
                return False
        elif pfun := _jm_obj_2_map.get(prop):
            # handle 5 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_2 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Info']", lpath_2 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Info'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Info'.'/^x\\\\-.*$/']", lpath_2 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Info']", lpath_2 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'$Info']", path))
        return False
    return True

# check $Info ($.'$Info')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Info'
    res = _jm_obj_2(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Info']", path))
    return res

# object $.'$Contact'
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Contact']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # $.'$Contact'.name
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Contact'.name]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$Contact'.name]", lpath_3 if path is not None else None))
                return False
        elif prop == "url":
            # handle may url property
            # $.'$Contact'.url
            res = is_valid_url(pval, lpath_3 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $URL [$.'$Contact'.url]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$Contact'.url]", lpath_3 if path is not None else None))
                return False
        elif prop == "email":
            # handle may email property
            # $.'$Contact'.email
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Contact'.email]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$Contact'.email]", lpath_3 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Contact'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Contact'.'/^x\\\\-.*$/']", lpath_3 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Contact']", lpath_3 if path is not None else None))
            return False
    return True

# check $Contact ($.'$Contact')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Contact'
    res = _jm_obj_3(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Contact']", path))
    return res

# object $.'$License'.'|'.1
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$License'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # $.'$License'.'|'.1.name
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$License'.'|'.1.name]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$License'.'|'.1.name]", lpath_4 if path is not None else None))
                return False
        elif prop == "url":
            # handle must url property
            must_count += 1
            # $.'$License'.'|'.1.url
            res = is_valid_url(pval, lpath_4 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $URL [$.'$License'.'|'.1.url]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$License'.'|'.1.url]", lpath_4 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$License'.'|'.1.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$License'.'|'.1.'/^x\\\\-.*$/']", lpath_4 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$License'.'|'.1]", lpath_4 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'$License'.'|'.1]", path))
        return False
    return True

# object $.'$License'.'|'.0
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$License'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # $.'$License'.'|'.0.name
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$License'.'|'.0.name]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$License'.'|'.0.name]", lpath_5 if path is not None else None))
                return False
        elif prop == "identifier":
            # handle must identifier property
            must_count += 1
            # $.'$License'.'|'.0.identifier
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$License'.'|'.0.identifier]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$License'.'|'.0.identifier]", lpath_5 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$License'.'|'.0.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$License'.'|'.0.'/^x\\\\-.*$/']", lpath_5 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$License'.'|'.0]", lpath_5 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'$License'.'|'.0]", path))
        return False
    return True

# check $License ($.'$License')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$License'
    res = isinstance(val, dict)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected type at [$.'$License'.'|']", path))
    if res:
        # $.'$License'.'|'.0
        res = _jm_obj_5(val, path, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("not an expected object at [$.'$License'.'|'.0]", path))
        if not res:
            # $.'$License'.'|'.1
            res = _jm_obj_4(val, path, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("not an expected object at [$.'$License'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$License'.'|']", path))
    return res

# object $.'$Server'.variables
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Server'.variables]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Server'.variables.''
        res = json_model_8(pval, lpath_7 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $ServerVariable [$.'$Server'.variables.'']", lpath_7 if path is not None else None))
        if not res:
            return False
    return True

# object $.'$Server'
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Server']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "url":
            # handle must url property
            must_count += 1
            # $.'$Server'.url
            res = is_valid_url(pval, lpath_6 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $URL [$.'$Server'.url]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Server'.url]", lpath_6 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # $.'$Server'.description
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Server'.description]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$Server'.description]", lpath_6 if path is not None else None))
                return False
        elif prop == "variables":
            # handle may variables property
            # $.'$Server'.variables
            res = _jm_obj_7(pval, lpath_6 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("not an expected object at [$.'$Server'.variables]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$Server'.variables]", lpath_6 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Server'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Server'.'/^x\\\\-.*$/']", lpath_6 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Server']", lpath_6 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Server']", path))
        return False
    return True

# check $Server ($.'$Server')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Server'
    res = _jm_obj_6(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Server']", path))
    return res

# object $.'$ServerVariable'
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$ServerVariable']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if prop == "default":
            # handle must default property
            must_count += 1
            # $.'$ServerVariable'.default
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$ServerVariable'.default]", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$ServerVariable'.default]", lpath_8 if path is not None else None))
                return False
        elif prop == "enum":
            # handle may enum property
            # $.'$ServerVariable'.enum
            res = isinstance(pval, list)
            if res:
                for arr_2_idx, arr_2_item in enumerate(pval):
                    arr_2_lpath: Path = ((lpath_8 if path is not None else None) + [ arr_2_idx ]) if (lpath_8 if path is not None else None) is not None else None
                    # $.'$ServerVariable'.enum.0
                    res = isinstance(arr_2_item, str)
                    if res:
                        rep is None or rep.clear()
                    else:
                        rep is None or rep.append(("unexpected string [$.'$ServerVariable'.enum.0]", arr_2_lpath if (lpath_8 if path is not None else None) is not None else None))
                    if not res:
                        break
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("not array or unexpected array [$.'$ServerVariable'.enum]", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$ServerVariable'.enum]", lpath_8 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # $.'$ServerVariable'.description
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$ServerVariable'.description]", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$ServerVariable'.description]", lpath_8 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$ServerVariable'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$ServerVariable'.'/^x\\\\-.*$/']", lpath_8 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$ServerVariable']", lpath_8 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$ServerVariable']", path))
        return False
    return True

# check $ServerVariable ($.'$ServerVariable')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$ServerVariable'
    res = _jm_obj_8(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$ServerVariable']", path))
    return res

# object $.'$Components'.callbacks
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Components'.callbacks]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Components'.callbacks.''
        # $.'$Components'.callbacks.''.'|'.0
        res = json_model_25(pval, lpath_10 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Callback [$.'$Components'.callbacks.''.'|'.0]", lpath_10 if path is not None else None))
        if not res:
            # $.'$Components'.callbacks.''.'|'.1
            res = json_model_31(pval, lpath_10 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Components'.callbacks.''.'|'.1]", lpath_10 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Components'.callbacks.''.'|']", lpath_10 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_callbacks ($.'$Components'.callbacks)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Components'.callbacks
    res = _jm_obj_10(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Components'.callbacks]", path))
    return res

# object $.'$Components'.examples
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Components'.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Components'.examples.''
        # $.'$Components'.examples.''.'|'.0
        res = json_model_26(pval, lpath_11 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Example [$.'$Components'.examples.''.'|'.0]", lpath_11 if path is not None else None))
        if not res:
            # $.'$Components'.examples.''.'|'.1
            res = json_model_31(pval, lpath_11 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Components'.examples.''.'|'.1]", lpath_11 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Components'.examples.''.'|']", lpath_11 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_examples ($.'$Components'.examples)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Components'.examples
    res = _jm_obj_11(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Components'.examples]", path))
    return res

# object $.'$Components'.headers
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Components'.headers]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Components'.headers.''
        # $.'$Components'.headers.''.'|'.0
        res = json_model_29(pval, lpath_12 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Header [$.'$Components'.headers.''.'|'.0]", lpath_12 if path is not None else None))
        if not res:
            # $.'$Components'.headers.''.'|'.1
            res = json_model_31(pval, lpath_12 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Components'.headers.''.'|'.1]", lpath_12 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Components'.headers.''.'|']", lpath_12 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_headers ($.'$Components'.headers)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Components'.headers
    res = _jm_obj_12(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Components'.headers]", path))
    return res

# object $.'$Components'.links
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Components'.links]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Components'.links.''
        # $.'$Components'.links.''.'|'.0
        res = json_model_28(pval, lpath_13 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Link [$.'$Components'.links.''.'|'.0]", lpath_13 if path is not None else None))
        if not res:
            # $.'$Components'.links.''.'|'.1
            res = json_model_31(pval, lpath_13 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Components'.links.''.'|'.1]", lpath_13 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Components'.links.''.'|']", lpath_13 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_links ($.'$Components'.links)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Components'.links
    res = _jm_obj_13(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Components'.links]", path))
    return res

# object $.'$Components'.parameters
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Components'.parameters]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Components'.parameters.''
        # $.'$Components'.parameters.''.'|'.0
        res = json_model_19(pval, lpath_14 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Parameter [$.'$Components'.parameters.''.'|'.0]", lpath_14 if path is not None else None))
        if not res:
            # $.'$Components'.parameters.''.'|'.1
            res = json_model_31(pval, lpath_14 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Components'.parameters.''.'|'.1]", lpath_14 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Components'.parameters.''.'|']", lpath_14 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_parameters ($.'$Components'.parameters)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Components'.parameters
    res = _jm_obj_14(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Components'.parameters]", path))
    return res

# object $.'$Components'.pathItems
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Components'.pathItems]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Components'.pathItems.''
        # $.'$Components'.pathItems.''.'|'.0
        res = json_model_11(pval, lpath_15 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $PathItem [$.'$Components'.pathItems.''.'|'.0]", lpath_15 if path is not None else None))
        if not res:
            # $.'$Components'.pathItems.''.'|'.1
            res = json_model_31(pval, lpath_15 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Components'.pathItems.''.'|'.1]", lpath_15 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Components'.pathItems.''.'|']", lpath_15 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_pathItems ($.'$Components'.pathItems)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Components'.pathItems
    res = _jm_obj_15(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Components'.pathItems]", path))
    return res

# object $.'$Components'.requestBodies
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Components'.requestBodies]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Components'.requestBodies.''
        # $.'$Components'.requestBodies.''.'|'.0
        res = json_model_20(pval, lpath_16 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $RequestBody [$.'$Components'.requestBodies.''.'|'.0]", lpath_16 if path is not None else None))
        if not res:
            # $.'$Components'.requestBodies.''.'|'.1
            res = json_model_31(pval, lpath_16 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Components'.requestBodies.''.'|'.1]", lpath_16 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Components'.requestBodies.''.'|']", lpath_16 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_requestBodies ($.'$Components'.requestBodies)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Components'.requestBodies
    res = _jm_obj_16(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Components'.requestBodies]", path))
    return res

# object $.'$Components'.responses
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Components'.responses]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Components'.responses.''
        # $.'$Components'.responses.''.'|'.0
        res = json_model_24(pval, lpath_17 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Response [$.'$Components'.responses.''.'|'.0]", lpath_17 if path is not None else None))
        if not res:
            # $.'$Components'.responses.''.'|'.1
            res = json_model_31(pval, lpath_17 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Components'.responses.''.'|'.1]", lpath_17 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Components'.responses.''.'|']", lpath_17 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_responses ($.'$Components'.responses)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Components'.responses
    res = _jm_obj_17(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Components'.responses]", path))
    return res

# object $.'$Components'.schemas
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Components'.schemas]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Components'.schemas.''
        res = json_model_33(pval, lpath_18 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Schema [$.'$Components'.schemas.'']", lpath_18 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_schemas ($.'$Components'.schemas)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Components'.schemas
    res = _jm_obj_18(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Components'.schemas]", path))
    return res

# object $.'$Components'.securitySchemes
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Components'.securitySchemes]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Components'.securitySchemes.''
        # $.'$Components'.securitySchemes.''.'|'.0
        res = json_model_36(pval, lpath_19 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $SecurityScheme [$.'$Components'.securitySchemes.''.'|'.0]", lpath_19 if path is not None else None))
        if not res:
            # $.'$Components'.securitySchemes.''.'|'.1
            res = json_model_31(pval, lpath_19 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Components'.securitySchemes.''.'|'.1]", lpath_19 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Components'.securitySchemes.''.'|']", lpath_19 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_9_map_securitySchemes ($.'$Components'.securitySchemes)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Components'.securitySchemes
    res = _jm_obj_19(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Components'.securitySchemes]", path))
    return res


# object $.'$Components'
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Components']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_9_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_9 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Components']", lpath_9 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Components'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Components'.'/^x\\\\-.*$/']", lpath_9 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Components']", lpath_9 if path is not None else None))
            return False
    return True

# check $Components ($.'$Components')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Components'
    res = _jm_obj_9(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Components']", path))
    return res


# object $.'$Paths'
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Paths']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_1(prop):
            # handle 2 re props
            # $.'$Paths'.'/^//'
            res = json_model_11(pval, lpath_20 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $PathItem [$.'$Paths'.'/^//']", lpath_20 if path is not None else None))
            if not res:
                return False
        elif _jm_re_0(prop):
            # handle 2 re props
            # $.'$Paths'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Paths'.'/^x\\\\-.*$/']", lpath_20 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Paths']", lpath_20 if path is not None else None))
            return False
    return True

# check $Paths ($.'$Paths')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Paths'
    res = _jm_obj_20(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Paths']", path))
    return res

# check _jm_obj_21_map_$ref ($.'$PathItem'.'$ref')
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'.'$ref'
    res = json_model_2(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $URI [$.'$PathItem'.'$ref']", path))
    return res

# check _jm_obj_21_map_delete ($.'$PathItem'.delete)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'.delete
    res = json_model_12(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Operation [$.'$PathItem'.delete]", path))
    return res

# check _jm_obj_21_map_description ($.'$PathItem'.description)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$PathItem'.description]", path))
    return res

# check _jm_obj_21_map_get ($.'$PathItem'.get)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'.get
    res = json_model_12(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Operation [$.'$PathItem'.get]", path))
    return res

# check _jm_obj_21_map_head ($.'$PathItem'.head)
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'.head
    res = json_model_12(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Operation [$.'$PathItem'.head]", path))
    return res

# check _jm_obj_21_map_options ($.'$PathItem'.options)
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'.options
    res = json_model_12(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Operation [$.'$PathItem'.options]", path))
    return res

# check _jm_obj_21_map_parameters ($.'$PathItem'.parameters)
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'.parameters
    res = isinstance(val, list)
    if res:
        for arr_3_idx, arr_3_item in enumerate(val):
            arr_3_lpath: Path = (path + [ arr_3_idx ]) if path is not None else None
            # $.'$PathItem'.parameters.0
            # $.'$PathItem'.parameters.0.'|'.0
            res = json_model_19(arr_3_item, arr_3_lpath if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Parameter [$.'$PathItem'.parameters.0.'|'.0]", arr_3_lpath if path is not None else None))
            if not res:
                # $.'$PathItem'.parameters.0.'|'.1
                res = json_model_31(arr_3_item, arr_3_lpath if path is not None else None, rep)
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("unexpected $Reference [$.'$PathItem'.parameters.0.'|'.1]", arr_3_lpath if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [$.'$PathItem'.parameters.0.'|']", arr_3_lpath if path is not None else None))
            if not res:
                break
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$PathItem'.parameters]", path))
    return res

# check _jm_obj_21_map_patch ($.'$PathItem'.patch)
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'.patch
    res = json_model_12(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Operation [$.'$PathItem'.patch]", path))
    return res

# check _jm_obj_21_map_post ($.'$PathItem'.post)
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'.post
    res = json_model_12(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Operation [$.'$PathItem'.post]", path))
    return res

# check _jm_obj_21_map_put ($.'$PathItem'.put)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'.put
    res = json_model_12(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Operation [$.'$PathItem'.put]", path))
    return res

# check _jm_obj_21_map_servers ($.'$PathItem'.servers)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'.servers
    res = isinstance(val, list)
    if res:
        for arr_4_idx, arr_4_item in enumerate(val):
            arr_4_lpath: Path = (path + [ arr_4_idx ]) if path is not None else None
            # $.'$PathItem'.servers.0
            res = json_model_12(arr_4_item, arr_4_lpath if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Operation [$.'$PathItem'.servers.0]", arr_4_lpath if path is not None else None))
            if not res:
                break
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$PathItem'.servers]", path))
    return res

# check _jm_obj_21_map_summary ($.'$PathItem'.summary)
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'.summary
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$PathItem'.summary]", path))
    return res

# check _jm_obj_21_map_trace ($.'$PathItem'.trace)
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'.trace
    res = json_model_12(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Operation [$.'$PathItem'.trace]", path))
    return res


# object $.'$PathItem'
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$PathItem']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_21_map.get(prop):
            # handle 13 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_21 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$PathItem']", lpath_21 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$PathItem'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$PathItem'.'/^x\\\\-.*$/']", lpath_21 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$PathItem']", lpath_21 if path is not None else None))
            return False
    return True

# check $PathItem ($.'$PathItem')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$PathItem'
    res = _jm_obj_21(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$PathItem']", path))
    return res

# object $.'$Operation'.callbacks
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Operation'.callbacks]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Operation'.callbacks.''
        # $.'$Operation'.callbacks.''.'|'.0
        res = json_model_25(pval, lpath_23 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Callback [$.'$Operation'.callbacks.''.'|'.0]", lpath_23 if path is not None else None))
        if not res:
            # $.'$Operation'.callbacks.''.'|'.1
            res = json_model_31(pval, lpath_23 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Operation'.callbacks.''.'|'.1]", lpath_23 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Operation'.callbacks.''.'|']", lpath_23 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_22_map_callbacks ($.'$Operation'.callbacks)
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Operation'.callbacks
    res = _jm_obj_23(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Operation'.callbacks]", path))
    return res

# check _jm_obj_22_map_deprecated ($.'$Operation'.deprecated)
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Operation'.deprecated
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Operation'.deprecated]", path))
    return res

# check _jm_obj_22_map_description ($.'$Operation'.description)
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Operation'.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Operation'.description]", path))
    return res

# check _jm_obj_22_map_externalDocs ($.'$Operation'.externalDocs)
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Operation'.externalDocs
    res = json_model_13(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ExternalDocumentation [$.'$Operation'.externalDocs]", path))
    return res

# check _jm_obj_22_map_operationId ($.'$Operation'.operationId)
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Operation'.operationId
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Operation'.operationId]", path))
    return res

# check _jm_obj_22_map_parameters ($.'$Operation'.parameters)
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Operation'.parameters
    res = isinstance(val, list)
    if res:
        for arr_5_idx, arr_5_item in enumerate(val):
            arr_5_lpath: Path = (path + [ arr_5_idx ]) if path is not None else None
            # $.'$Operation'.parameters.0
            # $.'$Operation'.parameters.0.'|'.0
            res = json_model_19(arr_5_item, arr_5_lpath if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Parameter [$.'$Operation'.parameters.0.'|'.0]", arr_5_lpath if path is not None else None))
            if not res:
                # $.'$Operation'.parameters.0.'|'.1
                res = json_model_31(arr_5_item, arr_5_lpath if path is not None else None, rep)
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("unexpected $Reference [$.'$Operation'.parameters.0.'|'.1]", arr_5_lpath if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [$.'$Operation'.parameters.0.'|']", arr_5_lpath if path is not None else None))
            if not res:
                break
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$Operation'.parameters]", path))
    return res

# check _jm_obj_22_map_requestBody ($.'$Operation'.requestBody)
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Operation'.requestBody
    # $.'$Operation'.requestBody.'|'.0
    res = json_model_20(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $RequestBody [$.'$Operation'.requestBody.'|'.0]", path))
    if not res:
        # $.'$Operation'.requestBody.'|'.1
        res = json_model_31(val, path, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Reference [$.'$Operation'.requestBody.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [$.'$Operation'.requestBody.'|']", path))
    return res

# check _jm_obj_22_map_responses ($.'$Operation'.responses)
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Operation'.responses
    res = json_model_23(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Responses [$.'$Operation'.responses]", path))
    return res

# check _jm_obj_22_map_security ($.'$Operation'.security)
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Operation'.security
    res = isinstance(val, list)
    if res:
        for arr_6_idx, arr_6_item in enumerate(val):
            arr_6_lpath: Path = (path + [ arr_6_idx ]) if path is not None else None
            # $.'$Operation'.security.0
            res = json_model_39(arr_6_item, arr_6_lpath if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $SecurityRequirement [$.'$Operation'.security.0]", arr_6_lpath if path is not None else None))
            if not res:
                break
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$Operation'.security]", path))
    return res

# check _jm_obj_22_map_servers ($.'$Operation'.servers)
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Operation'.servers
    res = isinstance(val, list)
    if res:
        for arr_7_idx, arr_7_item in enumerate(val):
            arr_7_lpath: Path = (path + [ arr_7_idx ]) if path is not None else None
            # $.'$Operation'.servers.0
            res = json_model_7(arr_7_item, arr_7_lpath if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Server [$.'$Operation'.servers.0]", arr_7_lpath if path is not None else None))
            if not res:
                break
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$Operation'.servers]", path))
    return res

# check _jm_obj_22_map_summary ($.'$Operation'.summary)
def _jm_f_46(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Operation'.summary
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Operation'.summary]", path))
    return res

# check _jm_obj_22_map_tags ($.'$Operation'.tags)
def _jm_f_47(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Operation'.tags
    res = isinstance(val, list)
    if res:
        for arr_8_idx, arr_8_item in enumerate(val):
            arr_8_lpath: Path = (path + [ arr_8_idx ]) if path is not None else None
            # $.'$Operation'.tags.0
            res = isinstance(arr_8_item, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Operation'.tags.0]", arr_8_lpath if path is not None else None))
            if not res:
                break
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$Operation'.tags]", path))
    return res


# object $.'$Operation'
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Operation']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_22_map.get(prop):
            # handle 12 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_22 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Operation']", lpath_22 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Operation'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Operation'.'/^x\\\\-.*$/']", lpath_22 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Operation']", lpath_22 if path is not None else None))
            return False
    return True

# check $Operation ($.'$Operation')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Operation'
    res = _jm_obj_22(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Operation']", path))
    return res

# object $.'$ExternalDocumentation'
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$ExternalDocumentation']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        if prop == "url":
            # handle must url property
            must_count += 1
            # $.'$ExternalDocumentation'.url
            res = is_valid_url(pval, lpath_24 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $URL [$.'$ExternalDocumentation'.url]", lpath_24 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$ExternalDocumentation'.url]", lpath_24 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # $.'$ExternalDocumentation'.description
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$ExternalDocumentation'.description]", lpath_24 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$ExternalDocumentation'.description]", lpath_24 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$ExternalDocumentation'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$ExternalDocumentation'.'/^x\\\\-.*$/']", lpath_24 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$ExternalDocumentation']", lpath_24 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$ExternalDocumentation']", path))
        return False
    return True

# check $ExternalDocumentation ($.'$ExternalDocumentation')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$ExternalDocumentation'
    res = _jm_obj_24(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$ExternalDocumentation']", path))
    return res

# check _jm_obj_25_map_allowEmptyValue ($.'$parameterShare'.allowEmptyValue)
def _jm_f_48(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$parameterShare'.allowEmptyValue
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$parameterShare'.allowEmptyValue]", path))
    return res

# check _jm_obj_25_map_deprecated ($.'$parameterShare'.deprecated)
def _jm_f_49(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$parameterShare'.deprecated
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$parameterShare'.deprecated]", path))
    return res

# check _jm_obj_25_map_description ($.'$parameterShare'.description)
def _jm_f_50(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$parameterShare'.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$parameterShare'.description]", path))
    return res

# check _jm_obj_25_map_required ($.'$parameterShare'.required)
def _jm_f_51(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$parameterShare'.required
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$parameterShare'.required]", path))
    return res


# object $.'$parameterShare'
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$parameterShare']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_25_map.get(prop):
            # handle 4 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_25 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$parameterShare']", lpath_25 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$parameterShare'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$parameterShare'.'/^x\\\\-.*$/']", lpath_25 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$parameterShare']", lpath_25 if path is not None else None))
            return False
    return True

# check $parameterShare ($.'$parameterShare')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$parameterShare'
    res = _jm_obj_25(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$parameterShare']", path))
    return res


# check _jm_obj_26_map_allowEmptyValue ($.'$commonParameter'.allowEmptyValue)
def _jm_f_52(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$commonParameter'.allowEmptyValue
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$commonParameter'.allowEmptyValue]", path))
    return res

# check _jm_obj_26_map_deprecated ($.'$commonParameter'.deprecated)
def _jm_f_53(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$commonParameter'.deprecated
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$commonParameter'.deprecated]", path))
    return res

# check _jm_obj_26_map_description ($.'$commonParameter'.description)
def _jm_f_54(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$commonParameter'.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$commonParameter'.description]", path))
    return res

# check _jm_obj_26_map_required ($.'$commonParameter'.required)
def _jm_f_55(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$commonParameter'.required
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$commonParameter'.required]", path))
    return res


# object $.'$commonParameter'
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$commonParameter']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # $.'$commonParameter'.name
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$commonParameter'.name]", lpath_26 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$commonParameter'.name]", lpath_26 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # $.'$commonParameter'.in
            res = (pval is None or isinstance(pval, (bool, int, float, str))) and pval in _jm_cst_0
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("value not in enum [$.'$commonParameter'.in.'|']", lpath_26 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$commonParameter'.in]", lpath_26 if path is not None else None))
                return False
        elif pfun := _jm_obj_26_map.get(prop):
            # handle 4 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_26 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$commonParameter']", lpath_26 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$commonParameter'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$commonParameter'.'/^x\\\\-.*$/']", lpath_26 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$commonParameter']", lpath_26 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'$commonParameter']", path))
        return False
    return True

# check $commonParameter ($.'$commonParameter')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$commonParameter'
    res = _jm_obj_26(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$commonParameter']", path))
    return res


# check $Style ($.'$Style')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Style'
    res = (val is None or isinstance(val, (bool, int, float, str))) and val in _jm_cst_1
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("value not in enum [$.'$Style'.'|']", path))
    return res

# check _jm_obj_27_map_allowReserved ($.'$parameterSchemaOnly'.allowReserved)
def _jm_f_56(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$parameterSchemaOnly'.allowReserved
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$parameterSchemaOnly'.allowReserved]", path))
    return res

# check _jm_obj_27_map_example ($.'$parameterSchemaOnly'.example)
def _jm_f_57(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$parameterSchemaOnly'.example
    res = True
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ANY [$.'$parameterSchemaOnly'.example]", path))
    return res

# object $.'$parameterSchemaOnly'.examples
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$parameterSchemaOnly'.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$parameterSchemaOnly'.examples.''
        # $.'$parameterSchemaOnly'.examples.''.'|'.0
        res = json_model_26(pval, lpath_28 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Example [$.'$parameterSchemaOnly'.examples.''.'|'.0]", lpath_28 if path is not None else None))
        if not res:
            # $.'$parameterSchemaOnly'.examples.''.'|'.1
            res = json_model_31(pval, lpath_28 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$parameterSchemaOnly'.examples.''.'|'.1]", lpath_28 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$parameterSchemaOnly'.examples.''.'|']", lpath_28 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_27_map_examples ($.'$parameterSchemaOnly'.examples)
def _jm_f_58(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$parameterSchemaOnly'.examples
    res = _jm_obj_28(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$parameterSchemaOnly'.examples]", path))
    return res

# check _jm_obj_27_map_explode ($.'$parameterSchemaOnly'.explode)
def _jm_f_59(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$parameterSchemaOnly'.explode
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$parameterSchemaOnly'.explode]", path))
    return res

# check _jm_obj_27_map_schema ($.'$parameterSchemaOnly'.schema)
def _jm_f_60(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$parameterSchemaOnly'.schema
    res = json_model_33(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$parameterSchemaOnly'.schema]", path))
    return res

# check _jm_obj_27_map_style ($.'$parameterSchemaOnly'.style)
def _jm_f_61(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$parameterSchemaOnly'.style
    res = json_model_16(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Style [$.'$parameterSchemaOnly'.style]", path))
    return res


# object $.'$parameterSchemaOnly'
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$parameterSchemaOnly']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_27_map.get(prop):
            # handle 6 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_27 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$parameterSchemaOnly']", lpath_27 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$parameterSchemaOnly']", lpath_27 if path is not None else None))
            return False
    return True

# check $parameterSchemaOnly ($.'$parameterSchemaOnly')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$parameterSchemaOnly'
    res = _jm_obj_27(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$parameterSchemaOnly']", path))
    return res

# object $.'$parameterContentOnly'.content
def _jm_obj_30(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$parameterContentOnly'.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$parameterContentOnly'.content.''
        res = json_model_21(pval, lpath_30 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $MediaType [$.'$parameterContentOnly'.content.'']", lpath_30 if path is not None else None))
        if not res:
            return False
    return True

# object $.'$parameterContentOnly'
def _jm_obj_29(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$parameterContentOnly']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        if prop == "content":
            # handle may content property
            # $.'$parameterContentOnly'.content
            res = _jm_obj_30(pval, lpath_29 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("not an expected object at [$.'$parameterContentOnly'.content]", lpath_29 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$parameterContentOnly'.content]", lpath_29 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$parameterContentOnly']", lpath_29 if path is not None else None))
            return False
    return True

# check $parameterContentOnly ($.'$parameterContentOnly')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$parameterContentOnly'
    res = _jm_obj_29(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$parameterContentOnly']", path))
    return res


# check _jm_obj_31_map_allowEmptyValue ($.'$Parameter'.'|'.1.allowEmptyValue)
def _jm_f_62(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.1.allowEmptyValue
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Parameter'.'|'.1.allowEmptyValue]", path))
    return res

# object $.'$Parameter'.'|'.1.content
def _jm_obj_32(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Parameter'.'|'.1.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Parameter'.'|'.1.content.''
        res = json_model_21(pval, lpath_32 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $MediaType [$.'$Parameter'.'|'.1.content.'']", lpath_32 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_31_map_content ($.'$Parameter'.'|'.1.content)
def _jm_f_63(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.1.content
    res = _jm_obj_32(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Parameter'.'|'.1.content]", path))
    return res

# check _jm_obj_31_map_deprecated ($.'$Parameter'.'|'.1.deprecated)
def _jm_f_64(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.1.deprecated
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Parameter'.'|'.1.deprecated]", path))
    return res

# check _jm_obj_31_map_description ($.'$Parameter'.'|'.1.description)
def _jm_f_65(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.1.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Parameter'.'|'.1.description]", path))
    return res

# check _jm_obj_31_map_required ($.'$Parameter'.'|'.1.required)
def _jm_f_66(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.1.required
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Parameter'.'|'.1.required]", path))
    return res


# object $.'$Parameter'.'|'.1
def _jm_obj_31(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Parameter'.'|'.1]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # $.'$Parameter'.'|'.1.name
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Parameter'.'|'.1.name]", lpath_31 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Parameter'.'|'.1.name]", lpath_31 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # $.'$Parameter'.'|'.1.in
            res = (pval is None or isinstance(pval, (bool, int, float, str))) and pval in _jm_cst_2
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("value not in enum [$.'$Parameter'.'|'.1.in.'|']", lpath_31 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Parameter'.'|'.1.in]", lpath_31 if path is not None else None))
                return False
        elif pfun := _jm_obj_31_map.get(prop):
            # handle 5 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_31 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Parameter'.'|'.1]", lpath_31 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Parameter'.'|'.1.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Parameter'.'|'.1.'/^x\\\\-.*$/']", lpath_31 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Parameter'.'|'.1]", lpath_31 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'$Parameter'.'|'.1]", path))
        return False
    return True


# check _jm_obj_33_map_allowEmptyValue ($.'$Parameter'.'|'.0.allowEmptyValue)
def _jm_f_67(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.0.allowEmptyValue
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Parameter'.'|'.0.allowEmptyValue]", path))
    return res

# check _jm_obj_33_map_allowReserved ($.'$Parameter'.'|'.0.allowReserved)
def _jm_f_68(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.0.allowReserved
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Parameter'.'|'.0.allowReserved]", path))
    return res

# check _jm_obj_33_map_deprecated ($.'$Parameter'.'|'.0.deprecated)
def _jm_f_69(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.0.deprecated
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Parameter'.'|'.0.deprecated]", path))
    return res

# check _jm_obj_33_map_description ($.'$Parameter'.'|'.0.description)
def _jm_f_70(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.0.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Parameter'.'|'.0.description]", path))
    return res

# check _jm_obj_33_map_example ($.'$Parameter'.'|'.0.example)
def _jm_f_71(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.0.example
    res = True
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ANY [$.'$Parameter'.'|'.0.example]", path))
    return res

# object $.'$Parameter'.'|'.0.examples
def _jm_obj_34(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Parameter'.'|'.0.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Parameter'.'|'.0.examples.''
        # $.'$Parameter'.'|'.0.examples.''.'|'.0
        res = json_model_26(pval, lpath_34 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Example [$.'$Parameter'.'|'.0.examples.''.'|'.0]", lpath_34 if path is not None else None))
        if not res:
            # $.'$Parameter'.'|'.0.examples.''.'|'.1
            res = json_model_31(pval, lpath_34 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Parameter'.'|'.0.examples.''.'|'.1]", lpath_34 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Parameter'.'|'.0.examples.''.'|']", lpath_34 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_33_map_examples ($.'$Parameter'.'|'.0.examples)
def _jm_f_72(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.0.examples
    res = _jm_obj_34(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Parameter'.'|'.0.examples]", path))
    return res

# check _jm_obj_33_map_explode ($.'$Parameter'.'|'.0.explode)
def _jm_f_73(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.0.explode
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Parameter'.'|'.0.explode]", path))
    return res

# check _jm_obj_33_map_required ($.'$Parameter'.'|'.0.required)
def _jm_f_74(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.0.required
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Parameter'.'|'.0.required]", path))
    return res

# check _jm_obj_33_map_schema ($.'$Parameter'.'|'.0.schema)
def _jm_f_75(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.0.schema
    res = json_model_33(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$Parameter'.'|'.0.schema]", path))
    return res

# check _jm_obj_33_map_style ($.'$Parameter'.'|'.0.style)
def _jm_f_76(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'.'|'.0.style
    res = json_model_16(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Style [$.'$Parameter'.'|'.0.style]", path))
    return res


# object $.'$Parameter'.'|'.0
def _jm_obj_33(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Parameter'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # $.'$Parameter'.'|'.0.name
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Parameter'.'|'.0.name]", lpath_33 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Parameter'.'|'.0.name]", lpath_33 if path is not None else None))
                return False
        elif prop == "in":
            # handle must in property
            must_count += 1
            # $.'$Parameter'.'|'.0.in
            res = (pval is None or isinstance(pval, (bool, int, float, str))) and pval in _jm_cst_3
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("value not in enum [$.'$Parameter'.'|'.0.in.'|']", lpath_33 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Parameter'.'|'.0.in]", lpath_33 if path is not None else None))
                return False
        elif pfun := _jm_obj_33_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_33 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Parameter'.'|'.0]", lpath_33 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Parameter'.'|'.0.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Parameter'.'|'.0.'/^x\\\\-.*$/']", lpath_33 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Parameter'.'|'.0]", lpath_33 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'$Parameter'.'|'.0]", path))
        return False
    return True

# check $Parameter ($.'$Parameter')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Parameter'
    res = isinstance(val, dict)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected type at [$.'$Parameter'.'|']", path))
    if res:
        # $.'$Parameter'.'|'.0
        res = _jm_obj_33(val, path, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("not an expected object at [$.'$Parameter'.'|'.0]", path))
        if not res:
            # $.'$Parameter'.'|'.1
            res = _jm_obj_31(val, path, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("not an expected object at [$.'$Parameter'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Parameter'.'|']", path))
    return res

# object $.'$RequestBody'.content
def _jm_obj_36(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$RequestBody'.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_36: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$RequestBody'.content.''
        res = json_model_21(pval, lpath_36 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $MediaType [$.'$RequestBody'.content.'']", lpath_36 if path is not None else None))
        if not res:
            return False
    return True

# object $.'$RequestBody'
def _jm_obj_35(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$RequestBody']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        if prop == "description":
            # handle may description property
            # $.'$RequestBody'.description
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$RequestBody'.description]", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$RequestBody'.description]", lpath_35 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # $.'$RequestBody'.content
            res = _jm_obj_36(pval, lpath_35 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("not an expected object at [$.'$RequestBody'.content]", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$RequestBody'.content]", lpath_35 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # $.'$RequestBody'.required
            res = isinstance(pval, bool)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("not a bool [$.'$RequestBody'.required]", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$RequestBody'.required]", lpath_35 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$RequestBody'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$RequestBody'.'/^x\\\\-.*$/']", lpath_35 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$RequestBody']", lpath_35 if path is not None else None))
            return False
    return True

# check $RequestBody ($.'$RequestBody')
def json_model_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$RequestBody'
    res = _jm_obj_35(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$RequestBody']", path))
    return res

# object $.'$MediaType'.encoding
def _jm_obj_38(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$MediaType'.encoding]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_38: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$MediaType'.encoding.''
        res = json_model_22(pval, lpath_38 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Encoding [$.'$MediaType'.encoding.'']", lpath_38 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_37_map_encoding ($.'$MediaType'.encoding)
def _jm_f_77(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$MediaType'.encoding
    res = _jm_obj_38(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$MediaType'.encoding]", path))
    return res

# check _jm_obj_37_map_example ($.'$MediaType'.example)
def _jm_f_78(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$MediaType'.example
    res = True
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ANY [$.'$MediaType'.example]", path))
    return res

# object $.'$MediaType'.examples
def _jm_obj_39(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$MediaType'.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_39: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$MediaType'.examples.''
        # $.'$MediaType'.examples.''.'|'.0
        res = json_model_26(pval, lpath_39 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Example [$.'$MediaType'.examples.''.'|'.0]", lpath_39 if path is not None else None))
        if not res:
            # $.'$MediaType'.examples.''.'|'.1
            res = json_model_31(pval, lpath_39 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$MediaType'.examples.''.'|'.1]", lpath_39 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$MediaType'.examples.''.'|']", lpath_39 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_37_map_examples ($.'$MediaType'.examples)
def _jm_f_79(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$MediaType'.examples
    res = _jm_obj_39(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$MediaType'.examples]", path))
    return res

# check _jm_obj_37_map_schema ($.'$MediaType'.schema)
def _jm_f_80(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$MediaType'.schema
    res = json_model_33(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$MediaType'.schema]", path))
    return res


# object $.'$MediaType'
def _jm_obj_37(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$MediaType']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_37: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_37_map.get(prop):
            # handle 4 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_37 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$MediaType']", lpath_37 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$MediaType'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$MediaType'.'/^x\\\\-.*$/']", lpath_37 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$MediaType']", lpath_37 if path is not None else None))
            return False
    return True

# check $MediaType ($.'$MediaType')
def json_model_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$MediaType'
    res = _jm_obj_37(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$MediaType']", path))
    return res

# check _jm_obj_40_map_allowReserved ($.'$Encoding'.allowReserved)
def _jm_f_81(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Encoding'.allowReserved
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Encoding'.allowReserved]", path))
    return res

# check _jm_obj_40_map_contentType ($.'$Encoding'.contentType)
def _jm_f_82(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Encoding'.contentType
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Encoding'.contentType]", path))
    return res

# check _jm_obj_40_map_explode ($.'$Encoding'.explode)
def _jm_f_83(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Encoding'.explode
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Encoding'.explode]", path))
    return res

# object $.'$Encoding'.headers
def _jm_obj_41(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Encoding'.headers]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_41: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Encoding'.headers.''
        # $.'$Encoding'.headers.''.'|'.0
        res = json_model_29(pval, lpath_41 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Header [$.'$Encoding'.headers.''.'|'.0]", lpath_41 if path is not None else None))
        if not res:
            # $.'$Encoding'.headers.''.'|'.1
            res = json_model_31(pval, lpath_41 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Encoding'.headers.''.'|'.1]", lpath_41 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Encoding'.headers.''.'|']", lpath_41 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_40_map_headers ($.'$Encoding'.headers)
def _jm_f_84(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Encoding'.headers
    res = _jm_obj_41(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Encoding'.headers]", path))
    return res

# check _jm_obj_40_map_style ($.'$Encoding'.style)
def _jm_f_85(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Encoding'.style
    res = json_model_16(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Style [$.'$Encoding'.style]", path))
    return res


# object $.'$Encoding'
def _jm_obj_40(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Encoding']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_40: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_40_map.get(prop):
            # handle 5 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_40 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Encoding']", lpath_40 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Encoding'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Encoding'.'/^x\\\\-.*$/']", lpath_40 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Encoding']", lpath_40 if path is not None else None))
            return False
    return True

# check $Encoding ($.'$Encoding')
def json_model_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Encoding'
    res = _jm_obj_40(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Encoding']", path))
    return res


# object $.'$Responses'
def _jm_obj_42(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Responses']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_42: Path = (path + [ prop ]) if path is not None else None
        if prop == "default":
            # handle may default property
            # $.'$Responses'.default
            # $.'$Responses'.default.'|'.0
            res = json_model_24(pval, lpath_42 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Response [$.'$Responses'.default.'|'.0]", lpath_42 if path is not None else None))
            if not res:
                # $.'$Responses'.default.'|'.1
                res = json_model_31(pval, lpath_42 if path is not None else None, rep)
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("unexpected $Reference [$.'$Responses'.default.'|'.1]", lpath_42 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [$.'$Responses'.default.'|']", lpath_42 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$Responses'.default]", lpath_42 if path is not None else None))
                return False
        elif _jm_re_2(prop):
            # handle 2 re props
            # $.'$Responses'.'/^[1-5](\\d\\d|XX)$/'
            # $.'$Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.0
            res = json_model_24(pval, lpath_42 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Response [$.'$Responses'.'/^[1-5](\\\\d\\\\d|XX)$/'.'|'.0]", lpath_42 if path is not None else None))
            if not res:
                # $.'$Responses'.'/^[1-5](\\d\\d|XX)$/'.'|'.1
                res = json_model_31(pval, lpath_42 if path is not None else None, rep)
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("unexpected $Reference [$.'$Responses'.'/^[1-5](\\\\d\\\\d|XX)$/'.'|'.1]", lpath_42 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [$.'$Responses'.'/^[1-5](\\\\d\\\\d|XX)$/'.'|']", lpath_42 if path is not None else None))
            if not res:
                return False
        elif _jm_re_0(prop):
            # handle 2 re props
            # $.'$Responses'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Responses'.'/^x\\\\-.*$/']", lpath_42 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Responses']", lpath_42 if path is not None else None))
            return False
    return True

# check $Responses ($.'$Responses')
def json_model_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Responses'
    res = _jm_obj_42(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Responses']", path))
    return res

# object $.'$Response'.content
def _jm_obj_44(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Response'.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_44: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Response'.content.''
        res = json_model_21(pval, lpath_44 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $MediaType [$.'$Response'.content.'']", lpath_44 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_43_map_content ($.'$Response'.content)
def _jm_f_86(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Response'.content
    res = _jm_obj_44(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Response'.content]", path))
    return res

# check _jm_obj_43_map_description ($.'$Response'.description)
def _jm_f_87(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Response'.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Response'.description]", path))
    return res

# object $.'$Response'.headers
def _jm_obj_45(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Response'.headers]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_45: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Response'.headers.''
        # $.'$Response'.headers.''.'|'.0
        res = json_model_29(pval, lpath_45 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Header [$.'$Response'.headers.''.'|'.0]", lpath_45 if path is not None else None))
        if not res:
            # $.'$Response'.headers.''.'|'.1
            res = json_model_31(pval, lpath_45 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Response'.headers.''.'|'.1]", lpath_45 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Response'.headers.''.'|']", lpath_45 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_43_map_headers ($.'$Response'.headers)
def _jm_f_88(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Response'.headers
    res = _jm_obj_45(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Response'.headers]", path))
    return res

# object $.'$Response'.links
def _jm_obj_46(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Response'.links]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_46: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Response'.links.''
        # $.'$Response'.links.''.'|'.0
        res = json_model_28(pval, lpath_46 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Link [$.'$Response'.links.''.'|'.0]", lpath_46 if path is not None else None))
        if not res:
            # $.'$Response'.links.''.'|'.1
            res = json_model_31(pval, lpath_46 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Response'.links.''.'|'.1]", lpath_46 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Response'.links.''.'|']", lpath_46 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_43_map_links ($.'$Response'.links)
def _jm_f_89(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Response'.links
    res = _jm_obj_46(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Response'.links]", path))
    return res


# object $.'$Response'
def _jm_obj_43(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Response']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_43: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_43_map.get(prop):
            # handle 4 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_43 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Response']", lpath_43 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Response'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Response'.'/^x\\\\-.*$/']", lpath_43 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Response']", lpath_43 if path is not None else None))
            return False
    return True

# check $Response ($.'$Response')
def json_model_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Response'
    res = _jm_obj_43(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Response']", path))
    return res

# object $.'$Callback'
def _jm_obj_47(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Callback']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_47: Path = (path + [ prop ]) if path is not None else None
        if json_model_27(prop, lpath_47 if path is not None else None, rep):
            # handle 1 key props
            # $.'$Callback'.'$Expression'
            # $.'$Callback'.'$Expression'.'|'.0
            res = json_model_11(pval, lpath_47 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $PathItem [$.'$Callback'.'$Expression'.'|'.0]", lpath_47 if path is not None else None))
            if not res:
                # $.'$Callback'.'$Expression'.'|'.1
                res = json_model_31(pval, lpath_47 if path is not None else None, rep)
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("unexpected $Reference [$.'$Callback'.'$Expression'.'|'.1]", lpath_47 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [$.'$Callback'.'$Expression'.'|']", lpath_47 if path is not None else None))
            if not res:
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Callback'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Callback'.'/^x\\\\-.*$/']", lpath_47 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Callback']", lpath_47 if path is not None else None))
            return False
    return True

# check $Callback ($.'$Callback')
def json_model_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Callback'
    res = _jm_obj_47(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Callback']", path))
    return res

# check _jm_obj_48_map_description ($.'$Example'.description)
def _jm_f_90(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Example'.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Example'.description]", path))
    return res

# check _jm_obj_48_map_externalValue ($.'$Example'.externalValue)
def _jm_f_91(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Example'.externalValue
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Example'.externalValue]", path))
    return res

# check _jm_obj_48_map_summary ($.'$Example'.summary)
def _jm_f_92(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Example'.summary
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Example'.summary]", path))
    return res

# check _jm_obj_48_map_value ($.'$Example'.value)
def _jm_f_93(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Example'.value
    res = True
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ANY [$.'$Example'.value]", path))
    return res


# object $.'$Example'
def _jm_obj_48(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Example']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_48: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_48_map.get(prop):
            # handle 4 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_48 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Example']", lpath_48 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Example'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Example'.'/^x\\\\-.*$/']", lpath_48 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Example']", lpath_48 if path is not None else None))
            return False
    return True

# check $Example ($.'$Example')
def json_model_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Example'
    res = _jm_obj_48(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Example']", path))
    return res

# check $Expression ($.'$Expression')
def json_model_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Expression'
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Expression']", path))
    return res

# check _jm_obj_49_map_description ($.'$Link'.'|'.1.description)
def _jm_f_94(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Link'.'|'.1.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Link'.'|'.1.description]", path))
    return res

# object $.'$Link'.'|'.1.parameters
def _jm_obj_50(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Link'.'|'.1.parameters]", path))
        return False
    # accept any object
    return True

# check _jm_obj_49_map_parameters ($.'$Link'.'|'.1.parameters)
def _jm_f_95(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Link'.'|'.1.parameters
    res = _jm_obj_50(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Link'.'|'.1.parameters]", path))
    return res

# check _jm_obj_49_map_requestBody ($.'$Link'.'|'.1.requestBody)
def _jm_f_96(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Link'.'|'.1.requestBody
    res = True
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ANY [$.'$Link'.'|'.1.requestBody]", path))
    return res

# check _jm_obj_49_map_server ($.'$Link'.'|'.1.server)
def _jm_f_97(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Link'.'|'.1.server
    res = json_model_7(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Server [$.'$Link'.'|'.1.server]", path))
    return res


# object $.'$Link'.'|'.1
def _jm_obj_49(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Link'.'|'.1]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_49: Path = (path + [ prop ]) if path is not None else None
        if prop == "operationId":
            # handle must operationId property
            must_count += 1
            # $.'$Link'.'|'.1.operationId
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Link'.'|'.1.operationId]", lpath_49 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Link'.'|'.1.operationId]", lpath_49 if path is not None else None))
                return False
        elif pfun := _jm_obj_49_map.get(prop):
            # handle 4 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_49 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Link'.'|'.1]", lpath_49 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Link'.'|'.1.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Link'.'|'.1.'/^x\\\\-.*$/']", lpath_49 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Link'.'|'.1]", lpath_49 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Link'.'|'.1]", path))
        return False
    return True

# check _jm_obj_51_map_description ($.'$Link'.'|'.0.description)
def _jm_f_98(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Link'.'|'.0.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Link'.'|'.0.description]", path))
    return res

# object $.'$Link'.'|'.0.parameters
def _jm_obj_52(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Link'.'|'.0.parameters]", path))
        return False
    # accept any object
    return True

# check _jm_obj_51_map_parameters ($.'$Link'.'|'.0.parameters)
def _jm_f_99(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Link'.'|'.0.parameters
    res = _jm_obj_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Link'.'|'.0.parameters]", path))
    return res

# check _jm_obj_51_map_requestBody ($.'$Link'.'|'.0.requestBody)
def _jm_f_100(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Link'.'|'.0.requestBody
    res = True
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ANY [$.'$Link'.'|'.0.requestBody]", path))
    return res

# check _jm_obj_51_map_server ($.'$Link'.'|'.0.server)
def _jm_f_101(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Link'.'|'.0.server
    res = json_model_7(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Server [$.'$Link'.'|'.0.server]", path))
    return res


# object $.'$Link'.'|'.0
def _jm_obj_51(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Link'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_50: Path = (path + [ prop ]) if path is not None else None
        if prop == "operationRef":
            # handle must operationRef property
            must_count += 1
            # $.'$Link'.'|'.0.operationRef
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Link'.'|'.0.operationRef]", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Link'.'|'.0.operationRef]", lpath_50 if path is not None else None))
                return False
        elif pfun := _jm_obj_51_map.get(prop):
            # handle 4 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_50 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Link'.'|'.0]", lpath_50 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Link'.'|'.0.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Link'.'|'.0.'/^x\\\\-.*$/']", lpath_50 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Link'.'|'.0]", lpath_50 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Link'.'|'.0]", path))
        return False
    return True

# check $Link ($.'$Link')
def json_model_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Link'
    res = isinstance(val, dict)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected type at [$.'$Link'.'|']", path))
    if res:
        # $.'$Link'.'|'.0
        res = _jm_obj_51(val, path, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("not an expected object at [$.'$Link'.'|'.0]", path))
        if not res:
            # $.'$Link'.'|'.1
            res = _jm_obj_49(val, path, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("not an expected object at [$.'$Link'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Link'.'|']", path))
    return res

# check _jm_obj_53_map_allowEmptyValue ($.'$Header'.'|'.1.allowEmptyValue)
def _jm_f_102(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.1.allowEmptyValue
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Header'.'|'.1.allowEmptyValue]", path))
    return res

# object $.'$Header'.'|'.1.content
def _jm_obj_54(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Header'.'|'.1.content]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_52: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Header'.'|'.1.content.''
        res = json_model_21(pval, lpath_52 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $MediaType [$.'$Header'.'|'.1.content.'']", lpath_52 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_53_map_content ($.'$Header'.'|'.1.content)
def _jm_f_103(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.1.content
    res = _jm_obj_54(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Header'.'|'.1.content]", path))
    return res

# check _jm_obj_53_map_deprecated ($.'$Header'.'|'.1.deprecated)
def _jm_f_104(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.1.deprecated
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Header'.'|'.1.deprecated]", path))
    return res

# check _jm_obj_53_map_description ($.'$Header'.'|'.1.description)
def _jm_f_105(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.1.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Header'.'|'.1.description]", path))
    return res

# check _jm_obj_53_map_required ($.'$Header'.'|'.1.required)
def _jm_f_106(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.1.required
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Header'.'|'.1.required]", path))
    return res


# object $.'$Header'.'|'.1
def _jm_obj_53(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Header'.'|'.1]", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_51: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_53_map.get(prop):
            # handle 5 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_51 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Header'.'|'.1]", lpath_51 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Header'.'|'.1.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Header'.'|'.1.'/^x\\\\-.*$/']", lpath_51 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Header'.'|'.1]", lpath_51 if path is not None else None))
            return False
    return True

# check _jm_obj_55_map_allowEmptyValue ($.'$Header'.'|'.0.allowEmptyValue)
def _jm_f_107(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.0.allowEmptyValue
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Header'.'|'.0.allowEmptyValue]", path))
    return res

# check _jm_obj_55_map_allowReserved ($.'$Header'.'|'.0.allowReserved)
def _jm_f_108(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.0.allowReserved
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Header'.'|'.0.allowReserved]", path))
    return res

# check _jm_obj_55_map_deprecated ($.'$Header'.'|'.0.deprecated)
def _jm_f_109(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.0.deprecated
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Header'.'|'.0.deprecated]", path))
    return res

# check _jm_obj_55_map_description ($.'$Header'.'|'.0.description)
def _jm_f_110(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.0.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Header'.'|'.0.description]", path))
    return res

# check _jm_obj_55_map_example ($.'$Header'.'|'.0.example)
def _jm_f_111(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.0.example
    res = True
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ANY [$.'$Header'.'|'.0.example]", path))
    return res

# object $.'$Header'.'|'.0.examples
def _jm_obj_56(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Header'.'|'.0.examples]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_54: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Header'.'|'.0.examples.''
        # $.'$Header'.'|'.0.examples.''.'|'.0
        res = json_model_26(pval, lpath_54 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Example [$.'$Header'.'|'.0.examples.''.'|'.0]", lpath_54 if path is not None else None))
        if not res:
            # $.'$Header'.'|'.0.examples.''.'|'.1
            res = json_model_31(pval, lpath_54 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Reference [$.'$Header'.'|'.0.examples.''.'|'.1]", lpath_54 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Header'.'|'.0.examples.''.'|']", lpath_54 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_55_map_examples ($.'$Header'.'|'.0.examples)
def _jm_f_112(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.0.examples
    res = _jm_obj_56(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Header'.'|'.0.examples]", path))
    return res

# check _jm_obj_55_map_explode ($.'$Header'.'|'.0.explode)
def _jm_f_113(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.0.explode
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Header'.'|'.0.explode]", path))
    return res

# check _jm_obj_55_map_required ($.'$Header'.'|'.0.required)
def _jm_f_114(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.0.required
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Header'.'|'.0.required]", path))
    return res

# check _jm_obj_55_map_schema ($.'$Header'.'|'.0.schema)
def _jm_f_115(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.0.schema
    res = json_model_33(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$Header'.'|'.0.schema]", path))
    return res

# check _jm_obj_55_map_style ($.'$Header'.'|'.0.style)
def _jm_f_116(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'.'|'.0.style
    res = json_model_16(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Style [$.'$Header'.'|'.0.style]", path))
    return res


# object $.'$Header'.'|'.0
def _jm_obj_55(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Header'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_53: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_55_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_53 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Header'.'|'.0]", lpath_53 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Header'.'|'.0.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Header'.'|'.0.'/^x\\\\-.*$/']", lpath_53 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Header'.'|'.0]", lpath_53 if path is not None else None))
            return False
    return True

# check $Header ($.'$Header')
def json_model_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Header'
    res = isinstance(val, dict)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected type at [$.'$Header'.'|']", path))
    if res:
        # $.'$Header'.'|'.0
        res = _jm_obj_55(val, path, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("not an expected object at [$.'$Header'.'|'.0]", path))
        if not res:
            # $.'$Header'.'|'.1
            res = _jm_obj_53(val, path, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("not an expected object at [$.'$Header'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'$Header'.'|']", path))
    return res

# object $.'$Tag'
def _jm_obj_57(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Tag']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_55: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # $.'$Tag'.name
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Tag'.name]", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Tag'.name]", lpath_55 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # $.'$Tag'.description
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Tag'.description]", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$Tag'.description]", lpath_55 if path is not None else None))
                return False
        elif prop == "externalDocs":
            # handle may externalDocs property
            # $.'$Tag'.externalDocs
            res = json_model_13(pval, lpath_55 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ExternalDocumentation [$.'$Tag'.externalDocs]", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$Tag'.externalDocs]", lpath_55 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Tag'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Tag'.'/^x\\\\-.*$/']", lpath_55 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Tag']", lpath_55 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Tag']", path))
        return False
    return True

# check $Tag ($.'$Tag')
def json_model_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Tag'
    res = _jm_obj_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Tag']", path))
    return res

# object $.'$Reference'
def _jm_obj_58(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Reference']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_56: Path = (path + [ prop ]) if path is not None else None
        if prop == "$ref":
            # handle must $ref property
            must_count += 1
            # $.'$Reference'.'$ref'
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Reference'.'$ref']", lpath_56 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Reference'.$ref]", lpath_56 if path is not None else None))
                return False
        elif prop == "summary":
            # handle may summary property
            # $.'$Reference'.summary
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Reference'.summary]", lpath_56 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$Reference'.summary]", lpath_56 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # $.'$Reference'.description
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Reference'.description]", lpath_56 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$Reference'.description]", lpath_56 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Reference']", lpath_56 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Reference']", path))
        return False
    return True

# check $Reference ($.'$Reference')
def json_model_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Reference'
    res = _jm_obj_58(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Reference']", path))
    return res

# check $schema ($.'$schema')
def json_model_41(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema'
    # $.'$schema'.'@'
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$schema'.'@']", path))
    return res

# check _jm_obj_59_map_$anchor ($.'$Schema'.'$anchor')
def _jm_f_117(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.'$anchor'
    res = json_model_42(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#URI-REFERENCE [$.'$Schema'.'$anchor']", path))
    return res

# check _jm_obj_59_map_$comment ($.'$Schema'.'$comment')
def _jm_f_118(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.'$comment'
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Schema'.'$comment']", path))
    return res

# object $.'$Schema'.'$defs'
def _jm_obj_60(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Schema'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_58: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Schema'.'$defs'.''
        res = json_model_57(pval, lpath_58 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.'$defs'.'']", lpath_58 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_59_map_$defs ($.'$Schema'.'$defs')
def _jm_f_119(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.'$defs'
    res = _jm_obj_60(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Schema'.'$defs']", path))
    return res

# check _jm_obj_59_map_$dynamicAnchor ($.'$Schema'.'$dynamicAnchor')
def _jm_f_120(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.'$dynamicAnchor'
    res = json_model_42(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#URI-REFERENCE [$.'$Schema'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_59_map_$dynamicRef ($.'$Schema'.'$dynamicRef')
def _jm_f_121(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.'$dynamicRef'
    res = json_model_42(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#URI-REFERENCE [$.'$Schema'.'$dynamicRef']", path))
    return res

# check _jm_obj_59_map_$id ($.'$Schema'.'$id')
def _jm_f_122(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.'$id'
    res = json_model_42(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#URI-REFERENCE [$.'$Schema'.'$id']", path))
    return res

# check _jm_obj_59_map_$ref ($.'$Schema'.'$ref')
def _jm_f_123(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.'$ref'
    res = json_model_42(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#URI-REFERENCE [$.'$Schema'.'$ref']", path))
    return res

# check _jm_obj_59_map_$schema ($.'$Schema'.'$schema')
def _jm_f_124(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.'$schema'
    res = isinstance(val, str) and val == "https://json-schema.org/draft/2020-12/schema"
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected _https://json-schema.org/draft/2020-12/schema [$.'$Schema'.'$schema']", path))
    return res

# object $.'$Schema'.'$vocabulary'
def _jm_obj_61(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Schema'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_59: Path = (path + [ prop ]) if path is not None else None
        if is_valid_url(prop, lpath_59 if path is not None else None, rep):
            # handle 1 key props
            # $.'$Schema'.'$vocabulary'.'$URL'
            res = isinstance(pval, bool)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("not a bool [$.'$Schema'.'$vocabulary'.'$URL']", lpath_59 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Schema'.'$vocabulary']", lpath_59 if path is not None else None))
            return False
    return True

# check _jm_obj_59_map_$vocabulary ($.'$Schema'.'$vocabulary')
def _jm_f_125(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.'$vocabulary'
    res = _jm_obj_61(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Schema'.'$vocabulary']", path))
    return res

# check _jm_obj_59_map_additionalProperties ($.'$Schema'.additionalProperties)
def _jm_f_126(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.additionalProperties
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.additionalProperties]", path))
    return res

# check _jm_obj_59_map_allOf ($.'$Schema'.allOf)
def _jm_f_127(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.allOf
    res = json_model_54(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#schemaArray [$.'$Schema'.allOf]", path))
    return res

# check _jm_obj_59_map_anyOf ($.'$Schema'.anyOf)
def _jm_f_128(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.anyOf
    res = json_model_54(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#schemaArray [$.'$Schema'.anyOf]", path))
    return res

# check _jm_obj_59_map_const ($.'$Schema'.const)
def _jm_f_129(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.const
    res = True
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ANY [$.'$Schema'.const]", path))
    return res

# check _jm_obj_59_map_contains ($.'$Schema'.contains)
def _jm_f_130(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.contains
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.contains]", path))
    return res

# check _jm_obj_59_map_contentEncoding ($.'$Schema'.contentEncoding)
def _jm_f_131(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.contentEncoding
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Schema'.contentEncoding]", path))
    return res

# check _jm_obj_59_map_contentMediaType ($.'$Schema'.contentMediaType)
def _jm_f_132(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.contentMediaType
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Schema'.contentMediaType]", path))
    return res

# check _jm_obj_59_map_contentSchema ($.'$Schema'.contentSchema)
def _jm_f_133(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.contentSchema
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.contentSchema]", path))
    return res

# check _jm_obj_59_map_default ($.'$Schema'.default)
def _jm_f_134(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.default
    res = True
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ANY [$.'$Schema'.default]", path))
    return res

# object $.'$Schema'.dependentRequired
def _jm_obj_62(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Schema'.dependentRequired]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_60: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Schema'.dependentRequired.''
        res = json_model_51(pval, lpath_60 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $schema#stringArray [$.'$Schema'.dependentRequired.'']", lpath_60 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_59_map_dependentRequired ($.'$Schema'.dependentRequired)
def _jm_f_135(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.dependentRequired
    res = _jm_obj_62(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Schema'.dependentRequired]", path))
    return res

# object $.'$Schema'.dependentSchemas
def _jm_obj_63(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Schema'.dependentSchemas]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_61: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Schema'.dependentSchemas.''
        res = json_model_57(pval, lpath_61 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.dependentSchemas.'']", lpath_61 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_59_map_dependentSchemas ($.'$Schema'.dependentSchemas)
def _jm_f_136(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.dependentSchemas
    res = _jm_obj_63(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Schema'.dependentSchemas]", path))
    return res

# check _jm_obj_59_map_deprecated ($.'$Schema'.deprecated)
def _jm_f_137(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.deprecated
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Schema'.deprecated]", path))
    return res

# check _jm_obj_59_map_description ($.'$Schema'.description)
def _jm_f_138(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Schema'.description]", path))
    return res

# check _jm_obj_59_map_discriminator ($.'$Schema'.discriminator)
def _jm_f_139(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.discriminator
    res = json_model_34(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Discriminator [$.'$Schema'.discriminator]", path))
    return res

# check _jm_obj_59_map_else ($.'$Schema'.else)
def _jm_f_140(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.else
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.else]", path))
    return res

# check _jm_obj_59_map_enum ($.'$Schema'.enum)
def _jm_f_141(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.enum
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$Schema'.enum]", path))
    return res

# check _jm_obj_59_map_example ($.'$Schema'.example)
def _jm_f_142(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.example
    res = True
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ANY [$.'$Schema'.example]", path))
    return res

# check _jm_obj_59_map_examples ($.'$Schema'.examples)
def _jm_f_143(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$Schema'.examples]", path))
    return res

# check _jm_obj_59_map_exclusiveMaximum ($.'$Schema'.exclusiveMaximum)
def _jm_f_144(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.exclusiveMaximum
    res = isinstance(val, float)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a -1.0 strict float [$.'$Schema'.exclusiveMaximum]", path))
    return res

# check _jm_obj_59_map_exclusiveMinimum ($.'$Schema'.exclusiveMinimum)
def _jm_f_145(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.exclusiveMinimum
    res = isinstance(val, float)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a -1.0 strict float [$.'$Schema'.exclusiveMinimum]", path))
    return res

# check _jm_obj_59_map_externalDocs ($.'$Schema'.externalDocs)
def _jm_f_146(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.externalDocs
    res = json_model_13(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ExternalDocumentation [$.'$Schema'.externalDocs]", path))
    return res

# check _jm_obj_59_map_format ($.'$Schema'.format)
def _jm_f_147(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.format
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Schema'.format]", path))
    return res

# check _jm_obj_59_map_if ($.'$Schema'.if)
def _jm_f_148(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.if
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.if]", path))
    return res

# check _jm_obj_59_map_items ($.'$Schema'.items)
def _jm_f_149(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.items
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.items]", path))
    return res

# check _jm_obj_59_map_maxContains ($.'$Schema'.maxContains)
def _jm_f_150(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.maxContains
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [$.'$Schema'.maxContains]", path))
    return res

# check _jm_obj_59_map_maxItems ($.'$Schema'.maxItems)
def _jm_f_151(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.maxItems
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [$.'$Schema'.maxItems]", path))
    return res

# check _jm_obj_59_map_maxLength ($.'$Schema'.maxLength)
def _jm_f_152(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.maxLength
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [$.'$Schema'.maxLength]", path))
    return res

# check _jm_obj_59_map_maxProperties ($.'$Schema'.maxProperties)
def _jm_f_153(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.maxProperties
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [$.'$Schema'.maxProperties]", path))
    return res

# check _jm_obj_59_map_maximum ($.'$Schema'.maximum)
def _jm_f_154(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.maximum
    res = isinstance(val, float)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a -1.0 strict float [$.'$Schema'.maximum]", path))
    return res

# check _jm_obj_59_map_minContains ($.'$Schema'.minContains)
def _jm_f_155(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.minContains
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [$.'$Schema'.minContains]", path))
    return res

# check _jm_obj_59_map_minItems ($.'$Schema'.minItems)
def _jm_f_156(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.minItems
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [$.'$Schema'.minItems]", path))
    return res

# check _jm_obj_59_map_minLength ($.'$Schema'.minLength)
def _jm_f_157(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.minLength
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [$.'$Schema'.minLength]", path))
    return res

# check _jm_obj_59_map_minProperties ($.'$Schema'.minProperties)
def _jm_f_158(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.minProperties
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#nonNegativeInteger [$.'$Schema'.minProperties]", path))
    return res

# check _jm_obj_59_map_minimum ($.'$Schema'.minimum)
def _jm_f_159(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.minimum
    res = isinstance(val, float)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a -1.0 strict float [$.'$Schema'.minimum]", path))
    return res

# check _jm_obj_59_map_multipleOf ($.'$Schema'.multipleOf)
def _jm_f_160(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.multipleOf
    res = isinstance(val, float) and val > 0.0
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a 1.0 strict float [$.'$Schema'.multipleOf]", path))
    return res

# check _jm_obj_59_map_not ($.'$Schema'.not)
def _jm_f_161(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.not
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.not]", path))
    return res

# check _jm_obj_59_map_oneOf ($.'$Schema'.oneOf)
def _jm_f_162(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.oneOf
    res = json_model_54(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#schemaArray [$.'$Schema'.oneOf]", path))
    return res

# check _jm_obj_59_map_pattern ($.'$Schema'.pattern)
def _jm_f_163(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.pattern
    res = is_valid_regex(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $REGEX [$.'$Schema'.pattern]", path))
    return res

# object $.'$Schema'.patternProperties
def _jm_obj_64(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Schema'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_62: Path = (path + [ prop ]) if path is not None else None
        if is_valid_regex(prop, lpath_62 if path is not None else None, rep):
            # handle 1 key props
            # $.'$Schema'.patternProperties.'$REGEX'
            res = json_model_57(pval, lpath_62 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.patternProperties.'$REGEX']", lpath_62 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Schema'.patternProperties]", lpath_62 if path is not None else None))
            return False
    return True

# check _jm_obj_59_map_patternProperties ($.'$Schema'.patternProperties)
def _jm_f_164(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.patternProperties
    res = _jm_obj_64(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Schema'.patternProperties]", path))
    return res

# check _jm_obj_59_map_prefixItems ($.'$Schema'.prefixItems)
def _jm_f_165(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.prefixItems
    res = json_model_54(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#schemaArray [$.'$Schema'.prefixItems]", path))
    return res

# object $.'$Schema'.properties
def _jm_obj_65(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Schema'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_63: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Schema'.properties.''
        res = json_model_57(pval, lpath_63 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.properties.'']", lpath_63 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_59_map_properties ($.'$Schema'.properties)
def _jm_f_166(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.properties
    res = _jm_obj_65(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Schema'.properties]", path))
    return res

# check _jm_obj_59_map_propertyNames ($.'$Schema'.propertyNames)
def _jm_f_167(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.propertyNames
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.propertyNames]", path))
    return res

# check _jm_obj_59_map_readOnly ($.'$Schema'.readOnly)
def _jm_f_168(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.readOnly
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Schema'.readOnly]", path))
    return res

# check _jm_obj_59_map_required ($.'$Schema'.required)
def _jm_f_169(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.required
    res = json_model_51(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#stringArray [$.'$Schema'.required]", path))
    return res

# check _jm_obj_59_map_then ($.'$Schema'.then)
def _jm_f_170(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.then
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.then]", path))
    return res

# check _jm_obj_59_map_title ($.'$Schema'.title)
def _jm_f_171(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.title
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$Schema'.title]", path))
    return res

# check _jm_obj_59_map_type ($.'$Schema'.type)
def _jm_f_172(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.type
    # $.'$Schema'.type.'|'.0
    res = json_model_49(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#simpleTypes [$.'$Schema'.type.'|'.0]", path))
    if not res:
        # $.'$Schema'.type.'|'.1
        res = json_model_50(val, path, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $schema#simpleTypesArray [$.'$Schema'.type.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [$.'$Schema'.type.'|']", path))
    return res

# check _jm_obj_59_map_unevaluatedItems ($.'$Schema'.unevaluatedItems)
def _jm_f_173(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.unevaluatedItems
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.unevaluatedItems]", path))
    return res

# check _jm_obj_59_map_unevaluatedProperties ($.'$Schema'.unevaluatedProperties)
def _jm_f_174(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.unevaluatedProperties
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schema#Schema [$.'$Schema'.unevaluatedProperties]", path))
    return res

# check _jm_obj_59_map_uniqueItems ($.'$Schema'.uniqueItems)
def _jm_f_175(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.uniqueItems
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Schema'.uniqueItems]", path))
    return res

# check _jm_obj_59_map_writeOnly ($.'$Schema'.writeOnly)
def _jm_f_176(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.writeOnly
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$Schema'.writeOnly]", path))
    return res

# check _jm_obj_59_map_xml ($.'$Schema'.xml)
def _jm_f_177(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'.xml
    res = json_model_35(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $XML [$.'$Schema'.xml]", path))
    return res


# object $.'$Schema'
def _jm_obj_59(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Schema']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_57: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_59_map.get(prop):
            # handle 61 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_57 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Schema']", lpath_57 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Schema']", lpath_57 if path is not None else None))
            return False
    return True

# check $Schema ($.'$Schema')
def json_model_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Schema'
    res = _jm_obj_59(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Schema']", path))
    return res

# object $.'$Discriminator'.mapping
def _jm_obj_67(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Discriminator'.mapping]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_65: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Discriminator'.mapping.''
        res = isinstance(pval, str)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected string [$.'$Discriminator'.mapping.'']", lpath_65 if path is not None else None))
        if not res:
            return False
    return True

# object $.'$Discriminator'
def _jm_obj_66(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Discriminator']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_64: Path = (path + [ prop ]) if path is not None else None
        if prop == "propertyName":
            # handle must propertyName property
            must_count += 1
            # $.'$Discriminator'.propertyName
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$Discriminator'.propertyName]", lpath_64 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$Discriminator'.propertyName]", lpath_64 if path is not None else None))
                return False
        elif prop == "mapping":
            # handle may mapping property
            # $.'$Discriminator'.mapping
            res = _jm_obj_67(pval, lpath_64 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("not an expected object at [$.'$Discriminator'.mapping]", lpath_64 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$Discriminator'.mapping]", lpath_64 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$Discriminator'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Discriminator'.'/^x\\\\-.*$/']", lpath_64 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Discriminator']", lpath_64 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Discriminator']", path))
        return False
    return True

# check $Discriminator ($.'$Discriminator')
def json_model_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Discriminator'
    res = _jm_obj_66(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Discriminator']", path))
    return res

# check _jm_obj_68_map_attribute ($.'$XML'.attribute)
def _jm_f_178(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$XML'.attribute
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$XML'.attribute]", path))
    return res

# check _jm_obj_68_map_name ($.'$XML'.name)
def _jm_f_179(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$XML'.name
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$XML'.name]", path))
    return res

# check _jm_obj_68_map_namespace ($.'$XML'.namespace)
def _jm_f_180(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$XML'.namespace
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$XML'.namespace]", path))
    return res

# check _jm_obj_68_map_prefix ($.'$XML'.prefix)
def _jm_f_181(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$XML'.prefix
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$XML'.prefix]", path))
    return res

# check _jm_obj_68_map_wrapped ($.'$XML'.wrapped)
def _jm_f_182(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$XML'.wrapped
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$XML'.wrapped]", path))
    return res


# object $.'$XML'
def _jm_obj_68(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$XML']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_66: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_68_map.get(prop):
            # handle 5 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_66 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$XML']", lpath_66 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$XML'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$XML'.'/^x\\\\-.*$/']", lpath_66 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$XML']", lpath_66 if path is not None else None))
            return False
    return True

# check $XML ($.'$XML')
def json_model_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$XML'
    res = _jm_obj_68(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$XML']", path))
    return res

# check _jm_obj_69_mup_flows ($.'$SecurityScheme'.flows)
def _jm_f_183(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$SecurityScheme'.flows
    res = json_model_37(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $OAuthFlows [$.'$SecurityScheme'.flows]", path))
    return res


# check _jm_obj_69_mup_in ($.'$SecurityScheme'.in)
def _jm_f_184(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$SecurityScheme'.in
    res = (val is None or isinstance(val, (bool, int, float, str))) and val in _jm_cst_4
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("value not in enum [$.'$SecurityScheme'.in.'|']", path))
    return res

# check _jm_obj_69_mup_name ($.'$SecurityScheme'.name)
def _jm_f_185(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$SecurityScheme'.name
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$SecurityScheme'.name]", path))
    return res

# check _jm_obj_69_mup_openIdConnectUrl ($.'$SecurityScheme'.openIdConnectUrl)
def _jm_f_186(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$SecurityScheme'.openIdConnectUrl
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$SecurityScheme'.openIdConnectUrl]", path))
    return res

# check _jm_obj_69_mup_scheme ($.'$SecurityScheme'.scheme)
def _jm_f_187(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$SecurityScheme'.scheme
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$SecurityScheme'.scheme]", path))
    return res

# check _jm_obj_69_mup_type ($.'$SecurityScheme'.type)
def _jm_f_188(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$SecurityScheme'.type
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$SecurityScheme'.type]", path))
    return res


# object $.'$SecurityScheme'
def _jm_obj_69(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$SecurityScheme']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_67: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_69_mup.get(prop):
            # handle 6 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_67 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$SecurityScheme']", lpath_67 if path is not None else None))
                    return False
        elif prop == "description":
            # handle may description property
            # $.'$SecurityScheme'.description
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$SecurityScheme'.description]", lpath_67 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$SecurityScheme'.description]", lpath_67 if path is not None else None))
                return False
        elif prop == "bearerFormat":
            # handle may bearerFormat property
            # $.'$SecurityScheme'.bearerFormat
            res = isinstance(pval, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$SecurityScheme'.bearerFormat]", lpath_67 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$SecurityScheme'.bearerFormat]", lpath_67 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$SecurityScheme'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$SecurityScheme'.'/^x\\\\-.*$/']", lpath_67 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$SecurityScheme']", lpath_67 if path is not None else None))
            return False
    if must_count != 6:
        rep is None or rep.append(("missing must prop [$.'$SecurityScheme']", path))
        return False
    return True

# check $SecurityScheme ($.'$SecurityScheme')
def json_model_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$SecurityScheme'
    res = _jm_obj_69(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$SecurityScheme']", path))
    return res

# check _jm_obj_70_map_authorizationCode ($.'$OAuthFlows'.authorizationCode)
def _jm_f_189(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OAuthFlows'.authorizationCode
    res = json_model_38(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $OAuthFlow [$.'$OAuthFlows'.authorizationCode]", path))
    return res

# check _jm_obj_70_map_clientCredentials ($.'$OAuthFlows'.clientCredentials)
def _jm_f_190(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OAuthFlows'.clientCredentials
    res = json_model_38(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $OAuthFlow [$.'$OAuthFlows'.clientCredentials]", path))
    return res

# check _jm_obj_70_map_implicit ($.'$OAuthFlows'.implicit)
def _jm_f_191(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OAuthFlows'.implicit
    res = json_model_38(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $OAuthFlow [$.'$OAuthFlows'.implicit]", path))
    return res

# check _jm_obj_70_map_password ($.'$OAuthFlows'.password)
def _jm_f_192(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OAuthFlows'.password
    res = json_model_38(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $OAuthFlow [$.'$OAuthFlows'.password]", path))
    return res


# object $.'$OAuthFlows'
def _jm_obj_70(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$OAuthFlows']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_68: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_70_map.get(prop):
            # handle 4 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_68 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$OAuthFlows']", lpath_68 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$OAuthFlows'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$OAuthFlows'.'/^x\\\\-.*$/']", lpath_68 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$OAuthFlows']", lpath_68 if path is not None else None))
            return False
    return True

# check $OAuthFlows ($.'$OAuthFlows')
def json_model_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OAuthFlows'
    res = _jm_obj_70(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$OAuthFlows']", path))
    return res

# object $.'$OAuthFlow'.scopes
def _jm_obj_72(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$OAuthFlow'.scopes]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_70: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$OAuthFlow'.scopes.''
        res = isinstance(pval, str)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected string [$.'$OAuthFlow'.scopes.'']", lpath_70 if path is not None else None))
        if not res:
            return False
    return True

# object $.'$OAuthFlow'
def _jm_obj_71(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$OAuthFlow']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_69: Path = (path + [ prop ]) if path is not None else None
        if prop == "authorizationUrl":
            # handle must authorizationUrl property
            must_count += 1
            # $.'$OAuthFlow'.authorizationUrl
            res = is_valid_url(pval, lpath_69 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $URL [$.'$OAuthFlow'.authorizationUrl]", lpath_69 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$OAuthFlow'.authorizationUrl]", lpath_69 if path is not None else None))
                return False
        elif prop == "tokenUrl":
            # handle must tokenUrl property
            must_count += 1
            # $.'$OAuthFlow'.tokenUrl
            res = is_valid_url(pval, lpath_69 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $URL [$.'$OAuthFlow'.tokenUrl]", lpath_69 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$OAuthFlow'.tokenUrl]", lpath_69 if path is not None else None))
                return False
        elif prop == "scopes":
            # handle must scopes property
            must_count += 1
            # $.'$OAuthFlow'.scopes
            res = _jm_obj_72(pval, lpath_69 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("not an expected object at [$.'$OAuthFlow'.scopes]", lpath_69 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$OAuthFlow'.scopes]", lpath_69 if path is not None else None))
                return False
        elif prop == "refreshUrl":
            # handle may refreshUrl property
            # $.'$OAuthFlow'.refreshUrl
            res = is_valid_url(pval, lpath_69 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $URL [$.'$OAuthFlow'.refreshUrl]", lpath_69 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [$.'$OAuthFlow'.refreshUrl]", lpath_69 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle 1 re props
            # $.'$OAuthFlow'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$OAuthFlow'.'/^x\\\\-.*$/']", lpath_69 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$OAuthFlow']", lpath_69 if path is not None else None))
            return False
    if must_count != 3:
        rep is None or rep.append(("missing must prop [$.'$OAuthFlow']", path))
        return False
    return True

# check $OAuthFlow ($.'$OAuthFlow')
def json_model_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$OAuthFlow'
    res = _jm_obj_71(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$OAuthFlow']", path))
    return res

# object $.'$SecurityRequirement'
def _jm_obj_73(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$SecurityRequirement']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_71: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$SecurityRequirement'.''
        res = isinstance(pval, list)
        if res:
            for arr_9_idx, arr_9_item in enumerate(pval):
                arr_9_lpath: Path = ((lpath_71 if path is not None else None) + [ arr_9_idx ]) if (lpath_71 if path is not None else None) is not None else None
                # $.'$SecurityRequirement'.''.0
                res = isinstance(arr_9_item, str)
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("unexpected string [$.'$SecurityRequirement'.''.0]", arr_9_lpath if (lpath_71 if path is not None else None) is not None else None))
                if not res:
                    break
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("not array or unexpected array [$.'$SecurityRequirement'.'']", lpath_71 if path is not None else None))
        if not res:
            return False
    return True

# check $SecurityRequirement ($.'$SecurityRequirement')
def json_model_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$SecurityRequirement'
    res = _jm_obj_73(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$SecurityRequirement']", path))
    return res

# object $.'$Extension'
def _jm_obj_74(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Extension']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_72: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_0(prop):
            # handle 1 re props
            # $.'$Extension'.'/^x\\-.*$/'
            res = True
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $ANY [$.'$Extension'.'/^x\\\\-.*$/']", lpath_72 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Extension']", lpath_72 if path is not None else None))
            return False
    return True

# check $Extension ($.'$Extension')
def json_model_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Extension'
    res = _jm_obj_74(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$Extension']", path))
    return res

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = json_model_3(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $OpenAPI [$]", path))
    return res

# check $schema#URI-REFERENCE ($.'$schema#URI-REFERENCE')
def json_model_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#URI-REFERENCE'
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$schema#URI-REFERENCE']", path))
    return res


# check $schema#simpleTypes ($.'$schema#simpleTypes')
def json_model_49(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#simpleTypes'
    res = (val is None or isinstance(val, (bool, int, float, str))) and val in _jm_cst_5
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("value not in enum [$.'$schema#simpleTypes'.'|']", path))
    return res

# check $schema#simpleTypesArray ($.'$schema#simpleTypesArray')
def json_model_50(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#simpleTypesArray'
    # $.'$schema#simpleTypesArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_10_idx, arr_10_item in enumerate(val):
            arr_10_lpath: Path = (path + [ arr_10_idx ]) if path is not None else None
            # $.'$schema#simpleTypesArray'.'@'.0
            res = json_model_49(arr_10_item, arr_10_lpath if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $simpleTypes [$.'$schema#simpleTypesArray'.'@'.0]", arr_10_lpath if path is not None else None))
            if not res:
                break
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$schema#simpleTypesArray'.'@']", path))
    if res:
        ival_0: int = len(val)
        res = is_unique_array(val, path, rep) and ival_0 >= 1
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("constraints failed at [$.'$schema#simpleTypesArray']", path))
    return res

# check $schema#stringArray ($.'$schema#stringArray')
def json_model_51(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#stringArray'
    # $.'$schema#stringArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_11_idx, arr_11_item in enumerate(val):
            arr_11_lpath: Path = (path + [ arr_11_idx ]) if path is not None else None
            # $.'$schema#stringArray'.'@'.0
            res = isinstance(arr_11_item, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.'$schema#stringArray'.'@'.0]", arr_11_lpath if path is not None else None))
            if not res:
                break
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$schema#stringArray'.'@']", path))
    if res:
        res = is_unique_array(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("constraints failed at [$.'$schema#stringArray']", path))
    return res

# check $schema#nonNegativeInteger ($.'$schema#nonNegativeInteger')
def json_model_52(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#nonNegativeInteger'
    res = (isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val)) and val >= 0
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a 0 loose int [$.'$schema#nonNegativeInteger']", path))
    return res

# check $schema#schemaArray ($.'$schema#schemaArray')
def json_model_54(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#schemaArray'
    # $.'$schema#schemaArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_12_idx, arr_12_item in enumerate(val):
            arr_12_lpath: Path = (path + [ arr_12_idx ]) if path is not None else None
            # $.'$schema#schemaArray'.'@'.0
            res = json_model_57(arr_12_item, arr_12_lpath if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Schema [$.'$schema#schemaArray'.'@'.0]", arr_12_lpath if path is not None else None))
            if not res:
                break
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$schema#schemaArray'.'@']", path))
    if res:
        ival_1: int = len(val)
        res = ival_1 >= 1
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("constraints failed at [$.'$schema#schemaArray']", path))
    return res

# check $schema#Schema ($.'$schema#Schema')
def json_model_57(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#Schema'
    # $.'$schema#Schema'.'|'.0
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$schema#Schema'.'|'.0]", path))
    if not res:
        # $.'$schema#Schema'.'|'.1
        res = json_model_56(val, path, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $ObjectSchema [$.'$schema#Schema'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [$.'$schema#Schema'.'|']", path))
    return res

# check _jm_obj_75_map_$anchor ($.'$schema#ObjectSchema'.'$anchor')
def _jm_f_193(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.'$anchor'
    res = json_model_42(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $URI-REFERENCE [$.'$schema#ObjectSchema'.'$anchor']", path))
    return res

# check _jm_obj_75_map_$comment ($.'$schema#ObjectSchema'.'$comment')
def _jm_f_194(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.'$comment'
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$schema#ObjectSchema'.'$comment']", path))
    return res

# object $.'$schema#ObjectSchema'.'$defs'
def _jm_obj_76(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$schema#ObjectSchema'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_74: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$schema#ObjectSchema'.'$defs'.''
        res = json_model_57(pval, lpath_74 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.'$defs'.'']", lpath_74 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_75_map_$defs ($.'$schema#ObjectSchema'.'$defs')
def _jm_f_195(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.'$defs'
    res = _jm_obj_76(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$schema#ObjectSchema'.'$defs']", path))
    return res

# check _jm_obj_75_map_$dynamicAnchor ($.'$schema#ObjectSchema'.'$dynamicAnchor')
def _jm_f_196(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.'$dynamicAnchor'
    res = json_model_42(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $URI-REFERENCE [$.'$schema#ObjectSchema'.'$dynamicAnchor']", path))
    return res

# check _jm_obj_75_map_$dynamicRef ($.'$schema#ObjectSchema'.'$dynamicRef')
def _jm_f_197(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.'$dynamicRef'
    res = json_model_42(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $URI-REFERENCE [$.'$schema#ObjectSchema'.'$dynamicRef']", path))
    return res

# check _jm_obj_75_map_$id ($.'$schema#ObjectSchema'.'$id')
def _jm_f_198(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.'$id'
    res = json_model_42(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $URI-REFERENCE [$.'$schema#ObjectSchema'.'$id']", path))
    return res

# check _jm_obj_75_map_$ref ($.'$schema#ObjectSchema'.'$ref')
def _jm_f_199(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.'$ref'
    res = json_model_42(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $URI-REFERENCE [$.'$schema#ObjectSchema'.'$ref']", path))
    return res

# check _jm_obj_75_map_$schema ($.'$schema#ObjectSchema'.'$schema')
def _jm_f_200(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.'$schema'
    res = isinstance(val, str) and val == "https://json-schema.org/draft/2020-12/schema"
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected _https://json-schema.org/draft/2020-12/schema [$.'$schema#ObjectSchema'.'$schema']", path))
    return res

# object $.'$schema#ObjectSchema'.'$vocabulary'
def _jm_obj_77(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$schema#ObjectSchema'.'$vocabulary']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_75: Path = (path + [ prop ]) if path is not None else None
        if is_valid_url(prop, lpath_75 if path is not None else None, rep):
            # handle 1 key props
            # $.'$schema#ObjectSchema'.'$vocabulary'.'$URL'
            res = isinstance(pval, bool)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("not a bool [$.'$schema#ObjectSchema'.'$vocabulary'.'$URL']", lpath_75 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$schema#ObjectSchema'.'$vocabulary']", lpath_75 if path is not None else None))
            return False
    return True

# check _jm_obj_75_map_$vocabulary ($.'$schema#ObjectSchema'.'$vocabulary')
def _jm_f_201(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.'$vocabulary'
    res = _jm_obj_77(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$schema#ObjectSchema'.'$vocabulary']", path))
    return res

# check _jm_obj_75_map_additionalProperties ($.'$schema#ObjectSchema'.additionalProperties)
def _jm_f_202(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.additionalProperties
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.additionalProperties]", path))
    return res

# check _jm_obj_75_map_allOf ($.'$schema#ObjectSchema'.allOf)
def _jm_f_203(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.allOf
    res = json_model_54(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schemaArray [$.'$schema#ObjectSchema'.allOf]", path))
    return res

# check _jm_obj_75_map_anyOf ($.'$schema#ObjectSchema'.anyOf)
def _jm_f_204(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.anyOf
    res = json_model_54(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schemaArray [$.'$schema#ObjectSchema'.anyOf]", path))
    return res

# check _jm_obj_75_map_const ($.'$schema#ObjectSchema'.const)
def _jm_f_205(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.const
    res = True
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ANY [$.'$schema#ObjectSchema'.const]", path))
    return res

# check _jm_obj_75_map_contains ($.'$schema#ObjectSchema'.contains)
def _jm_f_206(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.contains
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.contains]", path))
    return res

# check _jm_obj_75_map_contentEncoding ($.'$schema#ObjectSchema'.contentEncoding)
def _jm_f_207(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.contentEncoding
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$schema#ObjectSchema'.contentEncoding]", path))
    return res

# check _jm_obj_75_map_contentMediaType ($.'$schema#ObjectSchema'.contentMediaType)
def _jm_f_208(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.contentMediaType
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$schema#ObjectSchema'.contentMediaType]", path))
    return res

# check _jm_obj_75_map_contentSchema ($.'$schema#ObjectSchema'.contentSchema)
def _jm_f_209(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.contentSchema
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.contentSchema]", path))
    return res

# check _jm_obj_75_map_default ($.'$schema#ObjectSchema'.default)
def _jm_f_210(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.default
    res = True
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $ANY [$.'$schema#ObjectSchema'.default]", path))
    return res

# object $.'$schema#ObjectSchema'.dependentRequired
def _jm_obj_78(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$schema#ObjectSchema'.dependentRequired]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_76: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$schema#ObjectSchema'.dependentRequired.''
        res = json_model_51(pval, lpath_76 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $stringArray [$.'$schema#ObjectSchema'.dependentRequired.'']", lpath_76 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_75_map_dependentRequired ($.'$schema#ObjectSchema'.dependentRequired)
def _jm_f_211(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.dependentRequired
    res = _jm_obj_78(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$schema#ObjectSchema'.dependentRequired]", path))
    return res

# object $.'$schema#ObjectSchema'.dependentSchemas
def _jm_obj_79(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$schema#ObjectSchema'.dependentSchemas]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_77: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$schema#ObjectSchema'.dependentSchemas.''
        res = json_model_57(pval, lpath_77 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.dependentSchemas.'']", lpath_77 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_75_map_dependentSchemas ($.'$schema#ObjectSchema'.dependentSchemas)
def _jm_f_212(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.dependentSchemas
    res = _jm_obj_79(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$schema#ObjectSchema'.dependentSchemas]", path))
    return res

# check _jm_obj_75_map_deprecated ($.'$schema#ObjectSchema'.deprecated)
def _jm_f_213(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.deprecated
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$schema#ObjectSchema'.deprecated]", path))
    return res

# check _jm_obj_75_map_description ($.'$schema#ObjectSchema'.description)
def _jm_f_214(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.description
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$schema#ObjectSchema'.description]", path))
    return res

# check _jm_obj_75_map_else ($.'$schema#ObjectSchema'.else)
def _jm_f_215(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.else
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.else]", path))
    return res

# check _jm_obj_75_map_enum ($.'$schema#ObjectSchema'.enum)
def _jm_f_216(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.enum
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$schema#ObjectSchema'.enum]", path))
    return res

# check _jm_obj_75_map_examples ($.'$schema#ObjectSchema'.examples)
def _jm_f_217(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$.'$schema#ObjectSchema'.examples]", path))
    return res

# check _jm_obj_75_map_exclusiveMaximum ($.'$schema#ObjectSchema'.exclusiveMaximum)
def _jm_f_218(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.exclusiveMaximum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a -1.0 loose float [$.'$schema#ObjectSchema'.exclusiveMaximum]", path))
    return res

# check _jm_obj_75_map_exclusiveMinimum ($.'$schema#ObjectSchema'.exclusiveMinimum)
def _jm_f_219(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.exclusiveMinimum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a -1.0 loose float [$.'$schema#ObjectSchema'.exclusiveMinimum]", path))
    return res

# check _jm_obj_75_map_format ($.'$schema#ObjectSchema'.format)
def _jm_f_220(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.format
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$schema#ObjectSchema'.format]", path))
    return res

# check _jm_obj_75_map_if ($.'$schema#ObjectSchema'.if)
def _jm_f_221(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.if
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.if]", path))
    return res

# check _jm_obj_75_map_items ($.'$schema#ObjectSchema'.items)
def _jm_f_222(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.items
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.items]", path))
    return res

# check _jm_obj_75_map_maxContains ($.'$schema#ObjectSchema'.maxContains)
def _jm_f_223(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.maxContains
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $nonNegativeInteger [$.'$schema#ObjectSchema'.maxContains]", path))
    return res

# check _jm_obj_75_map_maxItems ($.'$schema#ObjectSchema'.maxItems)
def _jm_f_224(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.maxItems
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $nonNegativeInteger [$.'$schema#ObjectSchema'.maxItems]", path))
    return res

# check _jm_obj_75_map_maxLength ($.'$schema#ObjectSchema'.maxLength)
def _jm_f_225(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.maxLength
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $nonNegativeInteger [$.'$schema#ObjectSchema'.maxLength]", path))
    return res

# check _jm_obj_75_map_maxProperties ($.'$schema#ObjectSchema'.maxProperties)
def _jm_f_226(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.maxProperties
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $nonNegativeInteger [$.'$schema#ObjectSchema'.maxProperties]", path))
    return res

# check _jm_obj_75_map_maximum ($.'$schema#ObjectSchema'.maximum)
def _jm_f_227(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.maximum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a -1.0 loose float [$.'$schema#ObjectSchema'.maximum]", path))
    return res

# check _jm_obj_75_map_minContains ($.'$schema#ObjectSchema'.minContains)
def _jm_f_228(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.minContains
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $nonNegativeInteger [$.'$schema#ObjectSchema'.minContains]", path))
    return res

# check _jm_obj_75_map_minItems ($.'$schema#ObjectSchema'.minItems)
def _jm_f_229(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.minItems
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $nonNegativeInteger [$.'$schema#ObjectSchema'.minItems]", path))
    return res

# check _jm_obj_75_map_minLength ($.'$schema#ObjectSchema'.minLength)
def _jm_f_230(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.minLength
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $nonNegativeInteger [$.'$schema#ObjectSchema'.minLength]", path))
    return res

# check _jm_obj_75_map_minProperties ($.'$schema#ObjectSchema'.minProperties)
def _jm_f_231(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.minProperties
    res = json_model_52(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $nonNegativeInteger [$.'$schema#ObjectSchema'.minProperties]", path))
    return res

# check _jm_obj_75_map_minimum ($.'$schema#ObjectSchema'.minimum)
def _jm_f_232(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.minimum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a -1.0 loose float [$.'$schema#ObjectSchema'.minimum]", path))
    return res

# check _jm_obj_75_map_multipleOf ($.'$schema#ObjectSchema'.multipleOf)
def _jm_f_233(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.multipleOf
    res = isinstance(val, (int, float)) and not isinstance(val, bool) and val > 0.0
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a 1.0 loose float [$.'$schema#ObjectSchema'.multipleOf]", path))
    return res

# check _jm_obj_75_map_not ($.'$schema#ObjectSchema'.not)
def _jm_f_234(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.not
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.not]", path))
    return res

# check _jm_obj_75_map_oneOf ($.'$schema#ObjectSchema'.oneOf)
def _jm_f_235(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.oneOf
    res = json_model_54(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schemaArray [$.'$schema#ObjectSchema'.oneOf]", path))
    return res

# check _jm_obj_75_map_pattern ($.'$schema#ObjectSchema'.pattern)
def _jm_f_236(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.pattern
    res = is_valid_regex(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $REGEX [$.'$schema#ObjectSchema'.pattern]", path))
    return res

# object $.'$schema#ObjectSchema'.patternProperties
def _jm_obj_80(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$schema#ObjectSchema'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_78: Path = (path + [ prop ]) if path is not None else None
        if is_valid_regex(prop, lpath_78 if path is not None else None, rep):
            # handle 1 key props
            # $.'$schema#ObjectSchema'.patternProperties.'$REGEX'
            res = json_model_57(pval, lpath_78 if path is not None else None, rep)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.patternProperties.'$REGEX']", lpath_78 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$schema#ObjectSchema'.patternProperties]", lpath_78 if path is not None else None))
            return False
    return True

# check _jm_obj_75_map_patternProperties ($.'$schema#ObjectSchema'.patternProperties)
def _jm_f_237(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.patternProperties
    res = _jm_obj_80(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$schema#ObjectSchema'.patternProperties]", path))
    return res

# check _jm_obj_75_map_prefixItems ($.'$schema#ObjectSchema'.prefixItems)
def _jm_f_238(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.prefixItems
    res = json_model_54(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $schemaArray [$.'$schema#ObjectSchema'.prefixItems]", path))
    return res

# object $.'$schema#ObjectSchema'.properties
def _jm_obj_81(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$schema#ObjectSchema'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_79: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$schema#ObjectSchema'.properties.''
        res = json_model_57(pval, lpath_79 if path is not None else None, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.properties.'']", lpath_79 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_75_map_properties ($.'$schema#ObjectSchema'.properties)
def _jm_f_239(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.properties
    res = _jm_obj_81(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$schema#ObjectSchema'.properties]", path))
    return res

# check _jm_obj_75_map_propertyNames ($.'$schema#ObjectSchema'.propertyNames)
def _jm_f_240(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.propertyNames
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.propertyNames]", path))
    return res

# check _jm_obj_75_map_readOnly ($.'$schema#ObjectSchema'.readOnly)
def _jm_f_241(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.readOnly
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$schema#ObjectSchema'.readOnly]", path))
    return res

# check _jm_obj_75_map_required ($.'$schema#ObjectSchema'.required)
def _jm_f_242(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.required
    res = json_model_51(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $stringArray [$.'$schema#ObjectSchema'.required]", path))
    return res

# check _jm_obj_75_map_then ($.'$schema#ObjectSchema'.then)
def _jm_f_243(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.then
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.then]", path))
    return res

# check _jm_obj_75_map_title ($.'$schema#ObjectSchema'.title)
def _jm_f_244(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.title
    res = isinstance(val, str)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected string [$.'$schema#ObjectSchema'.title]", path))
    return res

# check _jm_obj_75_map_type ($.'$schema#ObjectSchema'.type)
def _jm_f_245(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.type
    # $.'$schema#ObjectSchema'.type.'|'.0
    res = json_model_49(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $simpleTypes [$.'$schema#ObjectSchema'.type.'|'.0]", path))
    if not res:
        # $.'$schema#ObjectSchema'.type.'|'.1
        res = json_model_50(val, path, rep)
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("unexpected $simpleTypesArray [$.'$schema#ObjectSchema'.type.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [$.'$schema#ObjectSchema'.type.'|']", path))
    return res

# check _jm_obj_75_map_unevaluatedItems ($.'$schema#ObjectSchema'.unevaluatedItems)
def _jm_f_246(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.unevaluatedItems
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.unevaluatedItems]", path))
    return res

# check _jm_obj_75_map_unevaluatedProperties ($.'$schema#ObjectSchema'.unevaluatedProperties)
def _jm_f_247(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.unevaluatedProperties
    res = json_model_57(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("unexpected $Schema [$.'$schema#ObjectSchema'.unevaluatedProperties]", path))
    return res

# check _jm_obj_75_map_uniqueItems ($.'$schema#ObjectSchema'.uniqueItems)
def _jm_f_248(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.uniqueItems
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$schema#ObjectSchema'.uniqueItems]", path))
    return res

# check _jm_obj_75_map_writeOnly ($.'$schema#ObjectSchema'.writeOnly)
def _jm_f_249(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'.writeOnly
    res = isinstance(val, bool)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not a bool [$.'$schema#ObjectSchema'.writeOnly]", path))
    return res


# object $.'$schema#ObjectSchema'
def _jm_obj_75(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$schema#ObjectSchema']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_73: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_75_map.get(prop):
            # handle 57 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_73 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$schema#ObjectSchema']", lpath_73 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$schema#ObjectSchema']", lpath_73 if path is not None else None))
            return False
    return True

# check $schema#ObjectSchema ($.'$schema#ObjectSchema')
def json_model_56(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$schema#ObjectSchema'
    res = _jm_obj_75(val, path, rep)
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not an expected object at [$.'$schema#ObjectSchema']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_obj_0_map
        _jm_obj_0_map = {
            "component": _jm_f_0,
            "externalDocs": _jm_f_1,
            "jsonSchemaDialect": _jm_f_2,
            "paths": _jm_f_3,
            "security": _jm_f_4,
            "servers": _jm_f_5,
            "tags": _jm_f_6,
            "webhooks": _jm_f_7,
        }
        global _jm_re_0_search, _jm_re_0
        _jm_re_0_search = re.compile("^x\\-.*$").search
        _jm_re_0 = lambda s: _jm_re_0_search(s) is not None
        global _jm_obj_2_map
        _jm_obj_2_map = {
            "contact": _jm_f_8,
            "description": _jm_f_9,
            "license": _jm_f_10,
            "summary": _jm_f_11,
            "termsOfService": _jm_f_12,
        }
        global _jm_obj_9_map
        _jm_obj_9_map = {
            "callbacks": _jm_f_13,
            "examples": _jm_f_14,
            "headers": _jm_f_15,
            "links": _jm_f_16,
            "parameters": _jm_f_17,
            "pathItems": _jm_f_18,
            "requestBodies": _jm_f_19,
            "responses": _jm_f_20,
            "schemas": _jm_f_21,
            "securitySchemes": _jm_f_22,
        }
        global _jm_re_1_search, _jm_re_1
        _jm_re_1_search = re.compile("^/").search
        _jm_re_1 = lambda s: _jm_re_1_search(s) is not None
        global _jm_obj_21_map
        _jm_obj_21_map = {
            "$ref": _jm_f_23,
            "delete": _jm_f_24,
            "description": _jm_f_25,
            "get": _jm_f_26,
            "head": _jm_f_27,
            "options": _jm_f_28,
            "parameters": _jm_f_29,
            "patch": _jm_f_30,
            "post": _jm_f_31,
            "put": _jm_f_32,
            "servers": _jm_f_33,
            "summary": _jm_f_34,
            "trace": _jm_f_35,
        }
        global _jm_obj_22_map
        _jm_obj_22_map = {
            "callbacks": _jm_f_36,
            "deprecated": _jm_f_37,
            "description": _jm_f_38,
            "externalDocs": _jm_f_39,
            "operationId": _jm_f_40,
            "parameters": _jm_f_41,
            "requestBody": _jm_f_42,
            "responses": _jm_f_43,
            "security": _jm_f_44,
            "servers": _jm_f_45,
            "summary": _jm_f_46,
            "tags": _jm_f_47,
        }
        global _jm_obj_25_map
        _jm_obj_25_map = {
            "allowEmptyValue": _jm_f_48,
            "deprecated": _jm_f_49,
            "description": _jm_f_50,
            "required": _jm_f_51,
        }
        global _jm_cst_0
        _jm_cst_0 = {'cookie', 'header', 'path', 'query'}
        global _jm_obj_26_map
        _jm_obj_26_map = {
            "allowEmptyValue": _jm_f_52,
            "deprecated": _jm_f_53,
            "description": _jm_f_54,
            "required": _jm_f_55,
        }
        global _jm_cst_1
        _jm_cst_1 = {'deepObject', 'form', 'label', 'matrix', 'pipeDelimited', 'simple', 'spaceDelimited'}
        global _jm_obj_27_map
        _jm_obj_27_map = {
            "allowReserved": _jm_f_56,
            "example": _jm_f_57,
            "examples": _jm_f_58,
            "explode": _jm_f_59,
            "schema": _jm_f_60,
            "style": _jm_f_61,
        }
        global _jm_cst_2
        _jm_cst_2 = {'cookie', 'header', 'path', 'query'}
        global _jm_obj_31_map
        _jm_obj_31_map = {
            "allowEmptyValue": _jm_f_62,
            "content": _jm_f_63,
            "deprecated": _jm_f_64,
            "description": _jm_f_65,
            "required": _jm_f_66,
        }
        global _jm_cst_3
        _jm_cst_3 = {'cookie', 'header', 'path', 'query'}
        global _jm_obj_33_map
        _jm_obj_33_map = {
            "allowEmptyValue": _jm_f_67,
            "allowReserved": _jm_f_68,
            "deprecated": _jm_f_69,
            "description": _jm_f_70,
            "example": _jm_f_71,
            "examples": _jm_f_72,
            "explode": _jm_f_73,
            "required": _jm_f_74,
            "schema": _jm_f_75,
            "style": _jm_f_76,
        }
        global _jm_obj_37_map
        _jm_obj_37_map = {
            "encoding": _jm_f_77,
            "example": _jm_f_78,
            "examples": _jm_f_79,
            "schema": _jm_f_80,
        }
        global _jm_obj_40_map
        _jm_obj_40_map = {
            "allowReserved": _jm_f_81,
            "contentType": _jm_f_82,
            "explode": _jm_f_83,
            "headers": _jm_f_84,
            "style": _jm_f_85,
        }
        global _jm_re_2_search, _jm_re_2
        _jm_re_2_search = re.compile("^[1-5](\\d\\d|XX)$").search
        _jm_re_2 = lambda s: _jm_re_2_search(s) is not None
        global _jm_obj_43_map
        _jm_obj_43_map = {
            "content": _jm_f_86,
            "description": _jm_f_87,
            "headers": _jm_f_88,
            "links": _jm_f_89,
        }
        global _jm_obj_48_map
        _jm_obj_48_map = {
            "description": _jm_f_90,
            "externalValue": _jm_f_91,
            "summary": _jm_f_92,
            "value": _jm_f_93,
        }
        global _jm_obj_49_map
        _jm_obj_49_map = {
            "description": _jm_f_94,
            "parameters": _jm_f_95,
            "requestBody": _jm_f_96,
            "server": _jm_f_97,
        }
        global _jm_obj_51_map
        _jm_obj_51_map = {
            "description": _jm_f_98,
            "parameters": _jm_f_99,
            "requestBody": _jm_f_100,
            "server": _jm_f_101,
        }
        global _jm_obj_53_map
        _jm_obj_53_map = {
            "allowEmptyValue": _jm_f_102,
            "content": _jm_f_103,
            "deprecated": _jm_f_104,
            "description": _jm_f_105,
            "required": _jm_f_106,
        }
        global _jm_obj_55_map
        _jm_obj_55_map = {
            "allowEmptyValue": _jm_f_107,
            "allowReserved": _jm_f_108,
            "deprecated": _jm_f_109,
            "description": _jm_f_110,
            "example": _jm_f_111,
            "examples": _jm_f_112,
            "explode": _jm_f_113,
            "required": _jm_f_114,
            "schema": _jm_f_115,
            "style": _jm_f_116,
        }
        global _jm_obj_59_map
        _jm_obj_59_map = {
            "$anchor": _jm_f_117,
            "$comment": _jm_f_118,
            "$defs": _jm_f_119,
            "$dynamicAnchor": _jm_f_120,
            "$dynamicRef": _jm_f_121,
            "$id": _jm_f_122,
            "$ref": _jm_f_123,
            "$schema": _jm_f_124,
            "$vocabulary": _jm_f_125,
            "additionalProperties": _jm_f_126,
            "allOf": _jm_f_127,
            "anyOf": _jm_f_128,
            "const": _jm_f_129,
            "contains": _jm_f_130,
            "contentEncoding": _jm_f_131,
            "contentMediaType": _jm_f_132,
            "contentSchema": _jm_f_133,
            "default": _jm_f_134,
            "dependentRequired": _jm_f_135,
            "dependentSchemas": _jm_f_136,
            "deprecated": _jm_f_137,
            "description": _jm_f_138,
            "discriminator": _jm_f_139,
            "else": _jm_f_140,
            "enum": _jm_f_141,
            "example": _jm_f_142,
            "examples": _jm_f_143,
            "exclusiveMaximum": _jm_f_144,
            "exclusiveMinimum": _jm_f_145,
            "externalDocs": _jm_f_146,
            "format": _jm_f_147,
            "if": _jm_f_148,
            "items": _jm_f_149,
            "maxContains": _jm_f_150,
            "maxItems": _jm_f_151,
            "maxLength": _jm_f_152,
            "maxProperties": _jm_f_153,
            "maximum": _jm_f_154,
            "minContains": _jm_f_155,
            "minItems": _jm_f_156,
            "minLength": _jm_f_157,
            "minProperties": _jm_f_158,
            "minimum": _jm_f_159,
            "multipleOf": _jm_f_160,
            "not": _jm_f_161,
            "oneOf": _jm_f_162,
            "pattern": _jm_f_163,
            "patternProperties": _jm_f_164,
            "prefixItems": _jm_f_165,
            "properties": _jm_f_166,
            "propertyNames": _jm_f_167,
            "readOnly": _jm_f_168,
            "required": _jm_f_169,
            "then": _jm_f_170,
            "title": _jm_f_171,
            "type": _jm_f_172,
            "unevaluatedItems": _jm_f_173,
            "unevaluatedProperties": _jm_f_174,
            "uniqueItems": _jm_f_175,
            "writeOnly": _jm_f_176,
            "xml": _jm_f_177,
        }
        global _jm_obj_68_map
        _jm_obj_68_map = {
            "attribute": _jm_f_178,
            "name": _jm_f_179,
            "namespace": _jm_f_180,
            "prefix": _jm_f_181,
            "wrapped": _jm_f_182,
        }
        global _jm_cst_4
        _jm_cst_4 = {'cookie', 'header', 'query'}
        global _jm_obj_69_mup
        _jm_obj_69_mup = {
            "flows": _jm_f_183,
            "in": _jm_f_184,
            "name": _jm_f_185,
            "openIdConnectUrl": _jm_f_186,
            "scheme": _jm_f_187,
            "type": _jm_f_188,
        }
        global _jm_obj_70_map
        _jm_obj_70_map = {
            "authorizationCode": _jm_f_189,
            "clientCredentials": _jm_f_190,
            "implicit": _jm_f_191,
            "password": _jm_f_192,
        }
        global _jm_cst_5
        _jm_cst_5 = {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global _jm_obj_75_map
        _jm_obj_75_map = {
            "$anchor": _jm_f_193,
            "$comment": _jm_f_194,
            "$defs": _jm_f_195,
            "$dynamicAnchor": _jm_f_196,
            "$dynamicRef": _jm_f_197,
            "$id": _jm_f_198,
            "$ref": _jm_f_199,
            "$schema": _jm_f_200,
            "$vocabulary": _jm_f_201,
            "additionalProperties": _jm_f_202,
            "allOf": _jm_f_203,
            "anyOf": _jm_f_204,
            "const": _jm_f_205,
            "contains": _jm_f_206,
            "contentEncoding": _jm_f_207,
            "contentMediaType": _jm_f_208,
            "contentSchema": _jm_f_209,
            "default": _jm_f_210,
            "dependentRequired": _jm_f_211,
            "dependentSchemas": _jm_f_212,
            "deprecated": _jm_f_213,
            "description": _jm_f_214,
            "else": _jm_f_215,
            "enum": _jm_f_216,
            "examples": _jm_f_217,
            "exclusiveMaximum": _jm_f_218,
            "exclusiveMinimum": _jm_f_219,
            "format": _jm_f_220,
            "if": _jm_f_221,
            "items": _jm_f_222,
            "maxContains": _jm_f_223,
            "maxItems": _jm_f_224,
            "maxLength": _jm_f_225,
            "maxProperties": _jm_f_226,
            "maximum": _jm_f_227,
            "minContains": _jm_f_228,
            "minItems": _jm_f_229,
            "minLength": _jm_f_230,
            "minProperties": _jm_f_231,
            "minimum": _jm_f_232,
            "multipleOf": _jm_f_233,
            "not": _jm_f_234,
            "oneOf": _jm_f_235,
            "pattern": _jm_f_236,
            "patternProperties": _jm_f_237,
            "prefixItems": _jm_f_238,
            "properties": _jm_f_239,
            "propertyNames": _jm_f_240,
            "readOnly": _jm_f_241,
            "required": _jm_f_242,
            "then": _jm_f_243,
            "title": _jm_f_244,
            "type": _jm_f_245,
            "unevaluatedItems": _jm_f_246,
            "unevaluatedProperties": _jm_f_247,
            "uniqueItems": _jm_f_248,
            "writeOnly": _jm_f_249,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "URI": json_model_2,
            "OpenAPI": json_model_3,
            "Info": json_model_4,
            "Contact": json_model_5,
            "License": json_model_6,
            "Server": json_model_7,
            "ServerVariable": json_model_8,
            "Components": json_model_9,
            "Paths": json_model_10,
            "PathItem": json_model_11,
            "Operation": json_model_12,
            "ExternalDocumentation": json_model_13,
            "parameterShare": json_model_14,
            "commonParameter": json_model_15,
            "Style": json_model_16,
            "parameterSchemaOnly": json_model_17,
            "parameterContentOnly": json_model_18,
            "Parameter": json_model_19,
            "RequestBody": json_model_20,
            "MediaType": json_model_21,
            "Encoding": json_model_22,
            "Responses": json_model_23,
            "Response": json_model_24,
            "Callback": json_model_25,
            "Example": json_model_26,
            "Expression": json_model_27,
            "Link": json_model_28,
            "Header": json_model_29,
            "Tag": json_model_30,
            "Reference": json_model_31,
            "schema": json_model_41,
            "Schema": json_model_33,
            "Discriminator": json_model_34,
            "XML": json_model_35,
            "SecurityScheme": json_model_36,
            "OAuthFlows": json_model_37,
            "OAuthFlow": json_model_38,
            "SecurityRequirement": json_model_39,
            "Extension": json_model_40,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_search, _jm_re_0
        _jm_re_0_search = None
        _jm_re_0 = None
        global _jm_re_1_search, _jm_re_1
        _jm_re_1_search = None
        _jm_re_1 = None
        global _jm_re_2_search, _jm_re_2
        _jm_re_2_search = None
        _jm_re_2 = None


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
