//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class obj_02 extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> obj_02_map_pmap;

    // check $li0 (.'$li0')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$li0'
        res = json.isArray(val);
        if (res)
        {
            int arr_0_idx = -1;
            Iterator<Object> arr_0_item_loop = json.arrayIterator(val);
            while (arr_0_item_loop.hasNext())
            {
                arr_0_idx++;
                Object arr_0_item = arr_0_item_loop.next();
                Path arr_0_lpath = new Path(arr_0_idx, path);
                // .'$li0'.0
                res = json.isInteger(arr_0_item) && json.asLong(arr_0_item) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.'$li0'.0]", (path != null ? arr_0_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$li0']", path);
        }
        return res;
    }

    // check $ls0 (.'$ls0')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$ls0'
        res = json.isArray(val);
        if (res)
        {
            int arr_1_idx = -1;
            Iterator<Object> arr_1_item_loop = json.arrayIterator(val);
            while (arr_1_item_loop.hasNext())
            {
                arr_1_idx++;
                Object arr_1_item = arr_1_item_loop.next();
                Path arr_1_lpath = new Path(arr_1_idx, path);
                // .'$ls0'.0
                res = json.isString(arr_1_item) && rt.is_valid_url(json.asString(arr_1_item));
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $URL [.'$ls0'.0]", (path != null ? arr_1_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$ls0']", path);
        }
        return res;
    }

    // check $lb0 (.'$lb0')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$lb0'
        res = json.isArray(val);
        if (res)
        {
            int arr_2_idx = -1;
            Iterator<Object> arr_2_item_loop = json.arrayIterator(val);
            while (arr_2_item_loop.hasNext())
            {
                arr_2_idx++;
                Object arr_2_item = arr_2_item_loop.next();
                Path arr_2_lpath = new Path(arr_2_idx, path);
                // .'$lb0'.0
                res = json.isBoolean(arr_2_item);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $BOOL [.'$lb0'.0]", (path != null ? arr_2_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$lb0']", path);
        }
        return res;
    }

    // check $lf0 (.'$lf0')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$lf0'
        res = json.isArray(val);
        if (res)
        {
            int arr_3_idx = -1;
            Iterator<Object> arr_3_item_loop = json.arrayIterator(val);
            while (arr_3_item_loop.hasNext())
            {
                arr_3_idx++;
                Object arr_3_item = arr_3_item_loop.next();
                Path arr_3_lpath = new Path(arr_3_idx, path);
                // .'$lf0'.0
                res = json.isDouble(arr_3_item) && json.asDouble(arr_3_item) >= 0.0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0.0 strict float [.'$lf0'.0]", (path != null ? arr_3_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$lf0']", path);
        }
        return res;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        // .'|'.0
        res = json_model_2(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $li0 [.'|'.0]", path);
        }
        if (! res)
        {
            // .'|'.1
            res = json_model_3(val, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $ls0 [.'|'.1]", path);
            }
            if (! res)
            {
                // .'|'.2
                res = json_model_4(val, path, rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $lb0 [.'|'.2]", path);
                }
                if (! res)
                {
                    // .'|'.3
                    res = json_model_5(val, path, rep);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("unexpected $lf0 [.'|'.3]", path);
                    }
                }
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'|']", path);
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            obj_02_map_pmap = new HashMap<String, Checker>();
            obj_02_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            obj_02_map_pmap.put("li0", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            obj_02_map_pmap.put("ls0", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            obj_02_map_pmap.put("lb0", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            obj_02_map_pmap.put("lf0", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            obj_02_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return obj_02_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return obj_02_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new obj_02();
        Main.main("obj_02", checker, VERSION, args);
    }
}
