#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_3($$$);
sub json_model_1($$$);
sub json_model_18($$$);
sub _jm_obj_1($$$);
sub _jm_obj_2($$$);
sub _jm_obj_3($$$);
sub _jm_obj_4($$$);
sub _jm_obj_5($$$);
sub _jm_obj_7($$$);
sub _jm_obj_6($$$);
sub _jm_obj_8($$$);
sub _jm_obj_9($$$);
sub _jm_obj_10($$$);
sub _jm_obj_0($$$);
sub json_model_17($$$);
sub json_model_4($$$);
my %_jm_cst_0;
sub json_model_10($$$);
sub json_model_11($$$);
sub json_model_12($$$);
sub json_model_13($$$);
sub json_model_15($$$);
my %check_model_map;

# check $schema (.'$schema')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # JSON Schema Draft Next as of 2023 [JSON_MODEL_LOOSE_INT, JSON_MODEL_LOOSE_FLOAT]
    # .'$schema'
    # .'$schema'.'@'
    $res = json_model_18($val, $path, $rep);
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check $schema#Schema (.'$schema#Schema')
sub json_model_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#Schema'
    # .'$schema#Schema'.'|'.0
    $res = jm_is_boolean($val);
    if (! $res)
    {
        # .'$schema#Schema'.'|'.1
        $res = _jm_obj_0($val, $path, $rep);
    }
    return $res;
}

# object .'$schema#ObjectSchema'.'$vocabulary'
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$schema#ObjectSchema'.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$schema#ObjectSchema'.'$defs'
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.'$defs'.''
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$schema#ObjectSchema'.properties
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.properties.''
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$schema#ObjectSchema'.patternProperties
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.patternProperties.''
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$schema#ObjectSchema'.dependentSchemas
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.dependentSchemas.''
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$schema#ObjectSchema'.propertyDependencies.''
sub _jm_obj_7($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.propertyDependencies.''.''
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$schema#ObjectSchema'.propertyDependencies
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.propertyDependencies.''
        $res = _jm_obj_7($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$schema#ObjectSchema'.dependentRequired
sub _jm_obj_8($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.dependentRequired.''
        $res = json_model_12($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$schema#ObjectSchema'.definitions
sub _jm_obj_9($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.definitions.''
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$schema#ObjectSchema'.dependencies
sub _jm_obj_10($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.dependencies.''
        # .'$schema#ObjectSchema'.dependencies.''.'|'.0
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            # .'$schema#ObjectSchema'.dependencies.''.'|'.1
            $res = json_model_12($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$schema#ObjectSchema'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    # check must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'$id'})
    {
        $pval = $$val{'$id'};
        # .'$schema#ObjectSchema'.'$id'
        $res = json_model_4($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$schema'})
    {
        $pval = $$val{'$schema'};
        # .'$schema#ObjectSchema'.'$schema'
        $res = jm_is_string($pval) && jm_is_valid_url($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$ref'})
    {
        $pval = $$val{'$ref'};
        # .'$schema#ObjectSchema'.'$ref'
        $res = json_model_4($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$anchor'})
    {
        $pval = $$val{'$anchor'};
        # .'$schema#ObjectSchema'.'$anchor'
        $res = json_model_4($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$dynamicRef'})
    {
        $pval = $$val{'$dynamicRef'};
        # .'$schema#ObjectSchema'.'$dynamicRef'
        $res = json_model_4($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$dynamicAnchor'})
    {
        $pval = $$val{'$dynamicAnchor'};
        # .'$schema#ObjectSchema'.'$dynamicAnchor'
        $res = json_model_4($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$vocabulary'})
    {
        $pval = $$val{'$vocabulary'};
        # .'$schema#ObjectSchema'.'$vocabulary'
        $res = _jm_obj_1($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$comment'})
    {
        $pval = $$val{'$comment'};
        # .'$schema#ObjectSchema'.'$comment'
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'$defs'})
    {
        $pval = $$val{'$defs'};
        # .'$schema#ObjectSchema'.'$defs'
        $res = _jm_obj_2($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'prefixItems'})
    {
        $pval = $$val{'prefixItems'};
        # .'$schema#ObjectSchema'.prefixItems
        $res = json_model_15($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'items'})
    {
        $pval = $$val{'items'};
        # .'$schema#ObjectSchema'.items
        $res = json_model_18($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'contains'})
    {
        $pval = $$val{'contains'};
        # .'$schema#ObjectSchema'.contains
        $res = json_model_18($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'additionalProperties'})
    {
        $pval = $$val{'additionalProperties'};
        # .'$schema#ObjectSchema'.additionalProperties
        $res = json_model_18($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'properties'})
    {
        $pval = $$val{'properties'};
        # .'$schema#ObjectSchema'.properties
        $res = _jm_obj_3($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'patternProperties'})
    {
        $pval = $$val{'patternProperties'};
        # .'$schema#ObjectSchema'.patternProperties
        $res = _jm_obj_4($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'dependentSchemas'})
    {
        $pval = $$val{'dependentSchemas'};
        # .'$schema#ObjectSchema'.dependentSchemas
        $res = _jm_obj_5($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'propertyDependencies'})
    {
        $pval = $$val{'propertyDependencies'};
        # .'$schema#ObjectSchema'.propertyDependencies
        $res = _jm_obj_6($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'propertyNames'})
    {
        $pval = $$val{'propertyNames'};
        # .'$schema#ObjectSchema'.propertyNames
        $res = json_model_18($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'if'})
    {
        $pval = $$val{'if'};
        # .'$schema#ObjectSchema'.if
        $res = json_model_18($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'then'})
    {
        $pval = $$val{'then'};
        # .'$schema#ObjectSchema'.then
        $res = json_model_18($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'else'})
    {
        $pval = $$val{'else'};
        # .'$schema#ObjectSchema'.else
        $res = json_model_18($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'not'})
    {
        $pval = $$val{'not'};
        # .'$schema#ObjectSchema'.not
        $res = json_model_18($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'allOf'})
    {
        $pval = $$val{'allOf'};
        # .'$schema#ObjectSchema'.allOf
        $res = json_model_15($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'anyOf'})
    {
        $pval = $$val{'anyOf'};
        # .'$schema#ObjectSchema'.anyOf
        $res = json_model_15($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'oneOf'})
    {
        $pval = $$val{'oneOf'};
        # .'$schema#ObjectSchema'.oneOf
        $res = json_model_15($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'unevaluatedItems'})
    {
        $pval = $$val{'unevaluatedItems'};
        # .'$schema#ObjectSchema'.unevaluatedItems
        $res = json_model_18($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'unevaluatedProperties'})
    {
        $pval = $$val{'unevaluatedProperties'};
        # .'$schema#ObjectSchema'.unevaluatedProperties
        $res = json_model_18($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'type'})
    {
        $pval = $$val{'type'};
        # .'$schema#ObjectSchema'.type
        # .'$schema#ObjectSchema'.type.'|'.0
        $res = json_model_10($pval, $path, $rep);
        if (! $res)
        {
            # .'$schema#ObjectSchema'.type.'|'.1
            $res = json_model_11($pval, $path, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'enum'})
    {
        $pval = $$val{'enum'};
        # .'$schema#ObjectSchema'.enum
        $res = jm_is_array($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'multipleOf'})
    {
        $pval = $$val{'multipleOf'};
        # .'$schema#ObjectSchema'.multipleOf
        $res = jm_is_numeric($pval) && $pval > 0.0;
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maximum'})
    {
        $pval = $$val{'maximum'};
        # .'$schema#ObjectSchema'.maximum
        $res = jm_is_numeric($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'exclusiveMaximum'})
    {
        $pval = $$val{'exclusiveMaximum'};
        # .'$schema#ObjectSchema'.exclusiveMaximum
        $res = jm_is_numeric($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minimum'})
    {
        $pval = $$val{'minimum'};
        # .'$schema#ObjectSchema'.minimum
        $res = jm_is_numeric($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'exclusiveMinimum'})
    {
        $pval = $$val{'exclusiveMinimum'};
        # .'$schema#ObjectSchema'.exclusiveMinimum
        $res = jm_is_numeric($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maxLength'})
    {
        $pval = $$val{'maxLength'};
        # .'$schema#ObjectSchema'.maxLength
        $res = json_model_13($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minLength'})
    {
        $pval = $$val{'minLength'};
        # .'$schema#ObjectSchema'.minLength
        $res = json_model_13($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'pattern'})
    {
        $pval = $$val{'pattern'};
        # .'$schema#ObjectSchema'.pattern
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maxItems'})
    {
        $pval = $$val{'maxItems'};
        # .'$schema#ObjectSchema'.maxItems
        $res = json_model_13($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minItems'})
    {
        $pval = $$val{'minItems'};
        # .'$schema#ObjectSchema'.minItems
        $res = json_model_13($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'uniqueItems'})
    {
        $pval = $$val{'uniqueItems'};
        # .'$schema#ObjectSchema'.uniqueItems
        $res = jm_is_boolean($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maxContains'})
    {
        $pval = $$val{'maxContains'};
        # .'$schema#ObjectSchema'.maxContains
        $res = json_model_13($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minContains'})
    {
        $pval = $$val{'minContains'};
        # .'$schema#ObjectSchema'.minContains
        $res = json_model_13($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'maxProperties'})
    {
        $pval = $$val{'maxProperties'};
        # .'$schema#ObjectSchema'.maxProperties
        $res = json_model_13($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'minProperties'})
    {
        $pval = $$val{'minProperties'};
        # .'$schema#ObjectSchema'.minProperties
        $res = json_model_13($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'required'})
    {
        $pval = $$val{'required'};
        # .'$schema#ObjectSchema'.required
        $res = json_model_12($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'dependentRequired'})
    {
        $pval = $$val{'dependentRequired'};
        # .'$schema#ObjectSchema'.dependentRequired
        $res = _jm_obj_8($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'title'})
    {
        $pval = $$val{'title'};
        # .'$schema#ObjectSchema'.title
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'description'})
    {
        $pval = $$val{'description'};
        # .'$schema#ObjectSchema'.description
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'deprecated'})
    {
        $pval = $$val{'deprecated'};
        # .'$schema#ObjectSchema'.deprecated
        $res = jm_is_boolean($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'readOnly'})
    {
        $pval = $$val{'readOnly'};
        # .'$schema#ObjectSchema'.readOnly
        $res = jm_is_boolean($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'writeOnly'})
    {
        $pval = $$val{'writeOnly'};
        # .'$schema#ObjectSchema'.writeOnly
        $res = jm_is_boolean($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'examples'})
    {
        $pval = $$val{'examples'};
        # .'$schema#ObjectSchema'.examples
        $res = jm_is_array($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'format'})
    {
        $pval = $$val{'format'};
        # .'$schema#ObjectSchema'.format
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'contentEncoding'})
    {
        $pval = $$val{'contentEncoding'};
        # .'$schema#ObjectSchema'.contentEncoding
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'contentMediaType'})
    {
        $pval = $$val{'contentMediaType'};
        # .'$schema#ObjectSchema'.contentMediaType
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'contentSchema'})
    {
        $pval = $$val{'contentSchema'};
        # .'$schema#ObjectSchema'.contentSchema
        $res = json_model_18($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'definitions'})
    {
        $pval = $$val{'definitions'};
        # .'$schema#ObjectSchema'.definitions
        $res = _jm_obj_9($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'dependencies'})
    {
        $pval = $$val{'dependencies'};
        # .'$schema#ObjectSchema'.dependencies
        $res = _jm_obj_10($pval, $path, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $schema#ObjectSchema (.'$schema#ObjectSchema')
sub json_model_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# check $schema#URI-REFERENCE (.'$schema#URI-REFERENCE')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#URI-REFERENCE'
    $res = jm_is_string($val);
    return $res;
}


# check $schema#simpleTypes (.'$schema#simpleTypes')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#simpleTypes'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_0{$val};
    return $res;
}

# check $schema#simpleTypesArray (.'$schema#simpleTypesArray')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#simpleTypesArray'
    # .'$schema#simpleTypesArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$schema#simpleTypesArray'.'@'.0
            $res = json_model_10($arr_0_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_0 = scalar @$val;
        $res = jm_is_unique_array($val, $path, $rep) && $ival_0 >= 1;
    }
    return $res;
}

# check $schema#stringArray (.'$schema#stringArray')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#stringArray'
    # .'$schema#stringArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_1_idx (0 .. $#$val)
        {
            my $arr_1_item = $$val[$arr_1_idx];
            # .'$schema#stringArray'.'@'.0
            $res = jm_is_string($arr_1_item);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        $res = jm_is_unique_array($val, $path, $rep);
    }
    return $res;
}

# check $schema#nonNegativeInteger (.'$schema#nonNegativeInteger')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#nonNegativeInteger'
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check $schema#schemaArray (.'$schema#schemaArray')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#schemaArray'
    # .'$schema#schemaArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_2_idx (0 .. $#$val)
        {
            my $arr_2_item = $$val[$arr_2_idx];
            # .'$schema#schemaArray'.'@'.0
            $res = json_model_18($arr_2_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_1 = scalar @$val;
        $res = $ival_1 >= 1;
    }
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            'array' => 1,
            'boolean' => 1,
            'integer' => 1,
            'null' => 1,
            'number' => 1,
            'object' => 1,
            'string' => 1,
        );
        %check_model_map = (
            '' => \&json_model_3,
            'schema' => \&json_model_3,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
