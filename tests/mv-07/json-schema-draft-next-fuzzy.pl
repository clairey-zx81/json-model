#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_3($$$);
sub json_model_1($$$);
sub json_model_18($$$);
sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
sub _jm_f_6($$$);
sub _jm_f_7($$$);
sub _jm_f_8($$$);
sub _jm_f_9($$$);
sub _jm_f_10($$$);
sub _jm_f_11($$$);
sub _jm_f_12($$$);
sub _jm_f_13($$$);
sub _jm_f_14($$$);
sub _jm_f_15($$$);
sub _jm_f_16($$$);
sub _jm_f_17($$$);
sub _jm_f_18($$$);
sub _jm_f_19($$$);
sub _jm_f_20($$$);
sub _jm_f_21($$$);
sub _jm_f_22($$$);
sub _jm_f_23($$$);
sub _jm_f_24($$$);
sub _jm_obj_0($$$);
sub _jm_f_25($$$);
sub _jm_f_26($$$);
sub _jm_f_27($$$);
sub _jm_f_28($$$);
sub _jm_f_29($$$);
sub _jm_f_30($$$);
my %json_model_17_map;
sub json_model_17($$$);
sub json_model_4($$$);
my %_jm_cst_0;
sub json_model_10($$$);
sub json_model_11($$$);
sub json_model_12($$$);
sub json_model_13($$$);
sub json_model_15($$$);
my %check_model_map;

# check $schema (.'$schema')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    # JSON Schema Draft Next as of 2023 [JSON_MODEL_LOOSE_INT, JSON_MODEL_LOOSE_FLOAT]
    # .'$schema'
    # .'$schema'.'@'
    return json_model_18($val, $path, $rep);
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .
    return json_model_3($val, $path, $rep);
}

# check $schema#Schema (.'$schema#Schema')
sub json_model_18($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#Schema'
    # .'$schema#Schema'.'|'.0
    # .'$schema#Schema'.'|'.1
    return jm_is_boolean($val) || json_model_17($val, $path, $rep);
}

# check json_model_17_map_$comment (.'$schema#ObjectSchema'.'$comment')
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.'$comment'
    return jm_is_string($val);
}

# check json_model_17_map_$defs (.'$schema#ObjectSchema'.'$defs')
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.'$defs'.''
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_17_map_$schema (.'$schema#ObjectSchema'.'$schema')
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.'$schema'
    return jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
}

# check json_model_17_map_$vocabulary (.'$schema#ObjectSchema'.'$vocabulary')
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.'$vocabulary'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_url($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$schema#ObjectSchema'.'$vocabulary'.'$URI'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_17_map_const (.'$schema#ObjectSchema'.const)
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.const
    return 1;
}

# check json_model_17_map_contentEncoding (.'$schema#ObjectSchema'.contentEncoding)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.contentEncoding
    return jm_is_string($val);
}

# check json_model_17_map_contentMediaType (.'$schema#ObjectSchema'.contentMediaType)
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.contentMediaType
    return jm_is_string($val);
}

# check json_model_17_map_default (.'$schema#ObjectSchema'.default)
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.default
    return 1;
}

# check json_model_17_map_definitions (.'$schema#ObjectSchema'.definitions)
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.definitions.''
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_17_map_dependencies (.'$schema#ObjectSchema'.dependencies)
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.dependencies
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.dependencies.''
        # .'$schema#ObjectSchema'.dependencies.''.'|'.0
        # .'$schema#ObjectSchema'.dependencies.''.'|'.1
        $res = json_model_18($pval, undef, $rep) || json_model_12($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_17_map_dependentRequired (.'$schema#ObjectSchema'.dependentRequired)
sub _jm_f_10($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.dependentRequired
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.dependentRequired.''
        $res = json_model_12($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_17_map_dependentSchemas (.'$schema#ObjectSchema'.dependentSchemas)
sub _jm_f_11($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.dependentSchemas
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.dependentSchemas.''
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_17_map_deprecated (.'$schema#ObjectSchema'.deprecated)
sub _jm_f_12($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.deprecated
    return jm_is_boolean($val);
}

# check json_model_17_map_description (.'$schema#ObjectSchema'.description)
sub _jm_f_13($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.description
    return jm_is_string($val);
}

# check json_model_17_map_enum (.'$schema#ObjectSchema'.enum)
sub _jm_f_14($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.enum
    return jm_is_array($val);
}

# check json_model_17_map_examples (.'$schema#ObjectSchema'.examples)
sub _jm_f_15($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.examples
    return jm_is_array($val);
}

# check json_model_17_map_exclusiveMaximum (.'$schema#ObjectSchema'.exclusiveMaximum)
sub _jm_f_16($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.exclusiveMaximum
    return jm_is_numeric($val);
}

# check json_model_17_map_exclusiveMinimum (.'$schema#ObjectSchema'.exclusiveMinimum)
sub _jm_f_17($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.exclusiveMinimum
    return jm_is_numeric($val);
}

# check json_model_17_map_format (.'$schema#ObjectSchema'.format)
sub _jm_f_18($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.format
    return jm_is_string($val);
}

# check json_model_17_map_maximum (.'$schema#ObjectSchema'.maximum)
sub _jm_f_19($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.maximum
    return jm_is_numeric($val);
}

# check json_model_17_map_minimum (.'$schema#ObjectSchema'.minimum)
sub _jm_f_20($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.minimum
    return jm_is_numeric($val);
}

# check json_model_17_map_multipleOf (.'$schema#ObjectSchema'.multipleOf)
sub _jm_f_21($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.multipleOf
    return jm_is_numeric($val) && $val > 0.0;
}

# check json_model_17_map_pattern (.'$schema#ObjectSchema'.pattern)
sub _jm_f_22($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.pattern
    return jm_is_string($val);
}

# check json_model_17_map_patternProperties (.'$schema#ObjectSchema'.patternProperties)
sub _jm_f_23($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.patternProperties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.patternProperties.''
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_17_map_properties (.'$schema#ObjectSchema'.properties)
sub _jm_f_24($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.properties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.properties.''
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$schema#ObjectSchema'.propertyDependencies.''
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.propertyDependencies.''.''
        $res = json_model_18($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_17_map_propertyDependencies (.'$schema#ObjectSchema'.propertyDependencies)
sub _jm_f_25($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.propertyDependencies
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.propertyDependencies.''
        $res = _jm_obj_0($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_17_map_readOnly (.'$schema#ObjectSchema'.readOnly)
sub _jm_f_26($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.readOnly
    return jm_is_boolean($val);
}

# check json_model_17_map_title (.'$schema#ObjectSchema'.title)
sub _jm_f_27($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.title
    return jm_is_string($val);
}

# check json_model_17_map_type (.'$schema#ObjectSchema'.type)
sub _jm_f_28($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.type
    # .'$schema#ObjectSchema'.type.'|'.0
    # .'$schema#ObjectSchema'.type.'|'.1
    return json_model_10($val, $path, $rep) || json_model_11($val, $path, $rep);
}

# check json_model_17_map_uniqueItems (.'$schema#ObjectSchema'.uniqueItems)
sub _jm_f_29($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.uniqueItems
    return jm_is_boolean($val);
}

# check json_model_17_map_writeOnly (.'$schema#ObjectSchema'.writeOnly)
sub _jm_f_30($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.writeOnly
    return jm_is_boolean($val);
}


# check $schema#ObjectSchema (.'$schema#ObjectSchema')
sub json_model_17($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_17_map{$prop}))
        {
            # handle 60 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            # accept any other props
            ;
        }
    }
    return 1;
}

# check $schema#URI-REFERENCE (.'$schema#URI-REFERENCE')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#URI-REFERENCE'
    return jm_is_string($val);
}


# check $schema#simpleTypes (.'$schema#simpleTypes')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#simpleTypes'
    return jm_is_string($val) && exists $_jm_cst_0{$val};
}

# check $schema#simpleTypesArray (.'$schema#simpleTypesArray')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#simpleTypesArray'
    # .'$schema#simpleTypesArray'.'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$schema#simpleTypesArray'.'@'.0
            $res = json_model_10($arr_0_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_0 = scalar @$val;
        $res = jm_is_unique_array($val, $path, $rep) && $ival_0 >= 1;
    }
    return $res;
}

# check $schema#stringArray (.'$schema#stringArray')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#stringArray'
    # .'$schema#stringArray'.'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_1_idx (0 .. $#$val)
        {
            my $arr_1_item = $$val[$arr_1_idx];
            # .'$schema#stringArray'.'@'.0
            $res = jm_is_string($arr_1_item);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        $res = jm_is_unique_array($val, $path, $rep);
    }
    return $res;
}

# check $schema#nonNegativeInteger (.'$schema#nonNegativeInteger')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#nonNegativeInteger'
    return jm_is_integer($val) && $val >= 0;
}

# check $schema#schemaArray (.'$schema#schemaArray')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#schemaArray'
    # .'$schema#schemaArray'.'@'
    my $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_2_idx (0 .. $#$val)
        {
            my $arr_2_item = $$val[$arr_2_idx];
            # .'$schema#schemaArray'.'@'.0
            $res = json_model_18($arr_2_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_1 = scalar @$val;
        $res = $ival_1 >= 1;
    }
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %json_model_17_map = (
            '$anchor' => \&json_model_4,
            '$comment' => \&_jm_f_0,
            '$defs' => \&_jm_f_1,
            '$dynamicAnchor' => \&json_model_4,
            '$dynamicRef' => \&json_model_4,
            '$id' => \&json_model_4,
            '$ref' => \&json_model_4,
            '$schema' => \&_jm_f_2,
            '$vocabulary' => \&_jm_f_3,
            'additionalProperties' => \&json_model_18,
            'allOf' => \&json_model_15,
            'anyOf' => \&json_model_15,
            'const' => \&_jm_f_4,
            'contains' => \&json_model_18,
            'contentEncoding' => \&_jm_f_5,
            'contentMediaType' => \&_jm_f_6,
            'contentSchema' => \&json_model_18,
            'default' => \&_jm_f_7,
            'definitions' => \&_jm_f_8,
            'dependencies' => \&_jm_f_9,
            'dependentRequired' => \&_jm_f_10,
            'dependentSchemas' => \&_jm_f_11,
            'deprecated' => \&_jm_f_12,
            'description' => \&_jm_f_13,
            'else' => \&json_model_18,
            'enum' => \&_jm_f_14,
            'examples' => \&_jm_f_15,
            'exclusiveMaximum' => \&_jm_f_16,
            'exclusiveMinimum' => \&_jm_f_17,
            'format' => \&_jm_f_18,
            'if' => \&json_model_18,
            'items' => \&json_model_18,
            'maxContains' => \&json_model_13,
            'maxItems' => \&json_model_13,
            'maxLength' => \&json_model_13,
            'maxProperties' => \&json_model_13,
            'maximum' => \&_jm_f_19,
            'minContains' => \&json_model_13,
            'minItems' => \&json_model_13,
            'minLength' => \&json_model_13,
            'minProperties' => \&json_model_13,
            'minimum' => \&_jm_f_20,
            'multipleOf' => \&_jm_f_21,
            'not' => \&json_model_18,
            'oneOf' => \&json_model_15,
            'pattern' => \&_jm_f_22,
            'patternProperties' => \&_jm_f_23,
            'prefixItems' => \&json_model_15,
            'properties' => \&_jm_f_24,
            'propertyDependencies' => \&_jm_f_25,
            'propertyNames' => \&json_model_18,
            'readOnly' => \&_jm_f_26,
            'required' => \&json_model_12,
            'then' => \&json_model_18,
            'title' => \&_jm_f_27,
            'type' => \&_jm_f_28,
            'unevaluatedItems' => \&json_model_18,
            'unevaluatedProperties' => \&json_model_18,
            'uniqueItems' => \&_jm_f_29,
            'writeOnly' => \&_jm_f_30,
        );
        %_jm_cst_0 = (
            'array' => 1,
            'boolean' => 1,
            'integer' => 1,
            'null' => 1,
            'number' => 1,
            'object' => 1,
            'string' => 1,
        );
        %check_model_map = (
            '' => \&json_model_3,
            'schema' => \&json_model_3,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %json_model_17_map = ();
        %_jm_cst_0 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
