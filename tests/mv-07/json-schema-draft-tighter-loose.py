#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_map_0: dict[str, str]
_jm_cst_0: set[str]
json_model_12_map: PropMap
json_model_13_map: PropMap
json_model_14_map: PropMap
json_model_15_map: PropMap
json_model_16_map: PropMap
check_model_map: PropMap

# check $tight (.'$tight')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight'
    res: bool = json_model_27(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $RootSchema [.'$tight']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .
    res: bool = json_model_27(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $tight#RootSchema [.]", path))
    return res

# object .'$tight#RootSchema'.'&'.0
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#RootSchema'.'&'.0]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("$schema", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <$schema> [.'$tight#RootSchema'.'&'.0]", path))
        return False
    lpath = (path + [ "$schema" ]) if path is not None else None
    # .'$tight#RootSchema'.'&'.0.'$schema'
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#RootSchema'.'&'.0.'$schema']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <$schema> [.'$tight#RootSchema'.'&'.0]", lpath if path is not None else None))
        return False
    return True

# check $tight#RootSchema (.'$tight#RootSchema')
def json_model_27(val: Jsonable, path: Path, rep: Report) -> bool:
    # keyword $schema is mandatory at the root, and optional elsewhere
    # .'$tight#RootSchema'
    res: bool = True
    if res:
        # .'$tight#RootSchema'.'&'.0
        res = _jm_obj_0(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$tight#RootSchema'.'&'.0]", path))
        if res:
            # .'$tight#RootSchema'.'&'.1
            res = json_model_25(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $ObjectSchema [.'$tight#RootSchema'.'&'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not all model match [.'$tight#RootSchema'.'&']", path))
    return res


# check $tight#ObjectSchema (.'$tight#ObjectSchema')
def json_model_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # we could use ^ instead of | below
    # .'$tight#ObjectSchema'
    iso_0: bool = isinstance(val, dict)
    res = iso_0
    if res:
        if "type" in val:
            tag_0: Jsonable = val.get("type", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <type> value not found [.'$tight#ObjectSchema'.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <type> is missing [.'$tight#ObjectSchema'.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'$tight#ObjectSchema'.'|']", path))
    return res or json_model_11(val, path, rep) or json_model_23(val, path, rep) or json_model_22(val, path, rep) or json_model_19(val, path, rep) or json_model_20(val, path, rep) or json_model_21(val, path, rep) or json_model_24(val, path, rep) or json_model_28(val, path, rep) or json_model_29(val, path, rep) or json_model_30(val, path, rep) or json_model_31(val, path, rep) or json_model_32(val, path, rep) or json_model_33(val, path, rep) or json_model_34(val, path, rep)

# object .'$tight#metas'.'$defs'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#metas'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#metas'.'$defs'.''
        res = json_model_26(pval, lpath_1 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#metas'.'$defs'.'']", lpath_1 if path is not None else None))
            return False
    return True

# object .'$tight#metas'.definitions
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#metas'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#metas'.definitions.''
        res = json_model_26(pval, lpath_2 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#metas'.definitions.'']", lpath_2 if path is not None else None))
            return False
    return True

# check $tight#metas (.'$tight#metas')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    # there is a trick with $schemaâ€¦ in RootSchema below
    # .'$tight#metas'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#metas']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "$schema":
            # handle may $schema property
            # .'$tight#metas'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#metas'.'$schema']", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#metas'.'$schema']", lpath_0 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#metas'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#metas'.'$id']", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#metas'.'$id']", lpath_0 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#metas'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#metas'.id]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#metas'.id]", lpath_0 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#metas'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#metas'.'$comment']", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#metas'.'$comment']", lpath_0 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#metas'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#metas'.title]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#metas'.title]", lpath_0 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#metas'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#metas'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#metas'.examples]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#metas'.examples]", lpath_0 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#metas'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#metas'.description]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#metas'.description]", lpath_0 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#metas'.'$defs'
            res = _jm_obj_1(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#metas'.'$defs']", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#metas'.'$defs']", lpath_0 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#metas'.definitions
            res = _jm_obj_2(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#metas'.definitions]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#metas'.definitions]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#metas']", lpath_0 if path is not None else None))
            return False
    return True

# check json_model_12_map_$comment (.'$tight#String'.'$comment')
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.'$comment'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#String'.'$comment']", path))
    return res

# check json_model_12_map_$defs (.'$tight#String'.'$defs')
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.'$defs'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#String'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#String'.'$defs'.''
        res = json_model_26(pval, lpath_4 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#String'.'$defs'.'']", lpath_4 if path is not None else None))
            return False
    return True

# check json_model_12_map_$id (.'$tight#String'.'$id')
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.'$id'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#String'.'$id']", path))
    return res

# check json_model_12_map_$schema (.'$tight#String'.'$schema')
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.'$schema'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#String'.'$schema']", path))
    return res

# check json_model_12_map_default (.'$tight#String'.default)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.default
    return True

# check json_model_12_map_definitions (.'$tight#String'.definitions)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.definitions
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#String'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#String'.definitions.''
        res = json_model_26(pval, lpath_5 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#String'.definitions.'']", lpath_5 if path is not None else None))
            return False
    return True

# check json_model_12_map_description (.'$tight#String'.description)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.description
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#String'.description]", path))
    return res

# check json_model_12_map_examples (.'$tight#String'.examples)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.examples
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#String'.examples]", path))
    return res


# check json_model_12_map_format (.'$tight#String'.format)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.format
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$tight#String'.format.'|']", path))
    return res

# check json_model_12_map_id (.'$tight#String'.id)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.id
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#String'.id]", path))
    return res

# check json_model_12_map_maxLength (.'$tight#String'.maxLength)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.maxLength
    res: bool = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$tight#String'.maxLength]", path))
    return res

# check json_model_12_map_minLength (.'$tight#String'.minLength)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.minLength
    res: bool = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$tight#String'.minLength]", path))
    return res

# check json_model_12_map_pattern (.'$tight#String'.pattern)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.pattern
    res: bool = is_valid_regex(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $REGEX [.'$tight#String'.pattern]", path))
    return res

# check json_model_12_map_title (.'$tight#String'.title)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'.title
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#String'.title]", path))
    return res


# check $tight#String (.'$tight#String')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#String'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#String']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#String'.type
            res = isinstance(pval, str) and pval == "string"
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#String'.type]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#String'.type]", lpath_3 if path is not None else None))
                return False
        elif pfun := json_model_12_map.get(prop):
            # handle 14 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_3 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#String']", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#String']", lpath_3 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#String']", path))
        return False
    return True

# check json_model_13_map_$comment (.'$tight#Array'.'$comment')
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.'$comment'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Array'.'$comment']", path))
    return res

# check json_model_13_map_$defs (.'$tight#Array'.'$defs')
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.'$defs'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Array'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Array'.'$defs'.''
        res = json_model_26(pval, lpath_7 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Array'.'$defs'.'']", lpath_7 if path is not None else None))
            return False
    return True

# check json_model_13_map_$id (.'$tight#Array'.'$id')
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.'$id'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Array'.'$id']", path))
    return res

# check json_model_13_map_$schema (.'$tight#Array'.'$schema')
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.'$schema'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Array'.'$schema']", path))
    return res

# check json_model_13_map_default (.'$tight#Array'.default)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.default
    return True

# check json_model_13_map_definitions (.'$tight#Array'.definitions)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.definitions
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Array'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Array'.definitions.''
        res = json_model_26(pval, lpath_8 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Array'.definitions.'']", lpath_8 if path is not None else None))
            return False
    return True

# check json_model_13_map_description (.'$tight#Array'.description)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.description
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Array'.description]", path))
    return res

# check json_model_13_map_examples (.'$tight#Array'.examples)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.examples
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Array'.examples]", path))
    return res

# check json_model_13_map_id (.'$tight#Array'.id)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.id
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Array'.id]", path))
    return res

# check json_model_13_map_items (.'$tight#Array'.items)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.items
    # .'$tight#Array'.items.'|'.0
    res: bool = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$tight#Array'.items.'|'.0]", path))
    if not res:
        # .'$tight#Array'.items.'|'.1
        res = json_model_6(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$tight#Array'.items.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$tight#Array'.items.'|']", path))
    return res

# check json_model_13_map_maxItems (.'$tight#Array'.maxItems)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.maxItems
    res: bool = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$tight#Array'.maxItems]", path))
    return res

# check json_model_13_map_minItems (.'$tight#Array'.minItems)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.minItems
    res: bool = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$tight#Array'.minItems]", path))
    return res

# check json_model_13_map_title (.'$tight#Array'.title)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.title
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Array'.title]", path))
    return res

# check json_model_13_map_uniqueItems (.'$tight#Array'.uniqueItems)
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'.uniqueItems
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$tight#Array'.uniqueItems]", path))
    return res


# check $tight#Array (.'$tight#Array')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Array'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Array']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#Array'.type
            res = isinstance(pval, str) and pval == "array"
            if not res:
                rep is None or rep.append(("unexpected array [.'$tight#Array'.type]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Array'.type]", lpath_6 if path is not None else None))
                return False
        elif pfun := json_model_13_map.get(prop):
            # handle 16 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_6 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#Array']", lpath_6 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Array']", lpath_6 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#Array']", path))
        return False
    return True

# check $tight#schemaArray (.'$tight#schemaArray')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#schemaArray'
    res: bool = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$tight#schemaArray'.0
            res = json_model_26(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$tight#schemaArray'.0]", arr_0_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#schemaArray']", path))
    return res

# check json_model_14_map_$comment (.'$tight#Object'.'$comment')
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'.'$comment'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Object'.'$comment']", path))
    return res

# check json_model_14_map_$defs (.'$tight#Object'.'$defs')
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'.'$defs'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Object'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Object'.'$defs'.''
        res = json_model_26(pval, lpath_10 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Object'.'$defs'.'']", lpath_10 if path is not None else None))
            return False
    return True

# check json_model_14_map_$id (.'$tight#Object'.'$id')
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'.'$id'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Object'.'$id']", path))
    return res

# check json_model_14_map_$schema (.'$tight#Object'.'$schema')
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'.'$schema'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Object'.'$schema']", path))
    return res

# check json_model_14_map_default (.'$tight#Object'.default)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'.default
    return True

# check json_model_14_map_definitions (.'$tight#Object'.definitions)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'.definitions
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Object'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Object'.definitions.''
        res = json_model_26(pval, lpath_11 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Object'.definitions.'']", lpath_11 if path is not None else None))
            return False
    return True

# check json_model_14_map_description (.'$tight#Object'.description)
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'.description
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Object'.description]", path))
    return res

# check json_model_14_map_examples (.'$tight#Object'.examples)
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'.examples
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Object'.examples]", path))
    return res

# check json_model_14_map_id (.'$tight#Object'.id)
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'.id
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Object'.id]", path))
    return res

# check json_model_14_map_patternProperties (.'$tight#Object'.patternProperties)
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'.patternProperties
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Object'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        if is_valid_regex(prop, lpath_12 if path is not None else None, rep):
            # handle 1 key props
            # .'$tight#Object'.patternProperties.'$REGEX'
            res = json_model_26(pval, lpath_12 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$tight#Object'.patternProperties.'$REGEX']", lpath_12 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Object'.patternProperties]", lpath_12 if path is not None else None))
            return False
    return True

# check json_model_14_map_properties (.'$tight#Object'.properties)
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'.properties
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Object'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Object'.properties.''
        res = json_model_26(pval, lpath_13 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Object'.properties.'']", lpath_13 if path is not None else None))
            return False
    return True

# check json_model_14_map_required (.'$tight#Object'.required)
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'.required
    res: bool = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$tight#Object'.required.0
            res = isinstance(arr_1_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Object'.required.0]", arr_1_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Object'.required]", path))
    return res

# check json_model_14_map_title (.'$tight#Object'.title)
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'.title
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Object'.title]", path))
    return res


# check $tight#Object (.'$tight#Object')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Object'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Object']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#Object'.type
            res = isinstance(pval, str) and pval == "object"
            if not res:
                rep is None or rep.append(("unexpected object [.'$tight#Object'.type]", lpath_9 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Object'.type]", lpath_9 if path is not None else None))
                return False
        elif pfun := json_model_14_map.get(prop):
            # handle 14 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_9 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#Object']", lpath_9 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Object']", lpath_9 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#Object']", path))
        return False
    return True

# check json_model_15_map_$comment (.'$tight#Integer'.'$comment')
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Integer'.'$comment'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Integer'.'$comment']", path))
    return res

# check json_model_15_map_$defs (.'$tight#Integer'.'$defs')
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Integer'.'$defs'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Integer'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Integer'.'$defs'.''
        res = json_model_26(pval, lpath_15 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Integer'.'$defs'.'']", lpath_15 if path is not None else None))
            return False
    return True

# check json_model_15_map_$id (.'$tight#Integer'.'$id')
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Integer'.'$id'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Integer'.'$id']", path))
    return res

# check json_model_15_map_$schema (.'$tight#Integer'.'$schema')
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Integer'.'$schema'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Integer'.'$schema']", path))
    return res

# check json_model_15_map_default (.'$tight#Integer'.default)
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Integer'.default
    return True

# check json_model_15_map_definitions (.'$tight#Integer'.definitions)
def _jm_f_46(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Integer'.definitions
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Integer'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Integer'.definitions.''
        res = json_model_26(pval, lpath_16 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Integer'.definitions.'']", lpath_16 if path is not None else None))
            return False
    return True

# check json_model_15_map_description (.'$tight#Integer'.description)
def _jm_f_47(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Integer'.description
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Integer'.description]", path))
    return res

# check json_model_15_map_examples (.'$tight#Integer'.examples)
def _jm_f_48(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Integer'.examples
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Integer'.examples]", path))
    return res

# check json_model_15_map_id (.'$tight#Integer'.id)
def _jm_f_49(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Integer'.id
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Integer'.id]", path))
    return res

# check json_model_15_map_maximum (.'$tight#Integer'.maximum)
def _jm_f_50(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Integer'.maximum
    res: bool = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$tight#Integer'.maximum]", path))
    return res

# check json_model_15_map_minimum (.'$tight#Integer'.minimum)
def _jm_f_51(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Integer'.minimum
    res: bool = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$tight#Integer'.minimum]", path))
    return res

# check json_model_15_map_title (.'$tight#Integer'.title)
def _jm_f_52(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Integer'.title
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Integer'.title]", path))
    return res


# check $tight#Integer (.'$tight#Integer')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Integer'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Integer']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#Integer'.type
            res = isinstance(pval, str) and pval == "integer"
            if not res:
                rep is None or rep.append(("unexpected integer [.'$tight#Integer'.type]", lpath_14 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Integer'.type]", lpath_14 if path is not None else None))
                return False
        elif pfun := json_model_15_map.get(prop):
            # handle 12 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_14 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#Integer']", lpath_14 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Integer']", lpath_14 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#Integer']", path))
        return False
    return True

# check json_model_16_map_$comment (.'$tight#Number'.'$comment')
def _jm_f_53(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Number'.'$comment'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Number'.'$comment']", path))
    return res

# check json_model_16_map_$defs (.'$tight#Number'.'$defs')
def _jm_f_54(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Number'.'$defs'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Number'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Number'.'$defs'.''
        res = json_model_26(pval, lpath_18 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Number'.'$defs'.'']", lpath_18 if path is not None else None))
            return False
    return True

# check json_model_16_map_$id (.'$tight#Number'.'$id')
def _jm_f_55(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Number'.'$id'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Number'.'$id']", path))
    return res

# check json_model_16_map_$schema (.'$tight#Number'.'$schema')
def _jm_f_56(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Number'.'$schema'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Number'.'$schema']", path))
    return res

# check json_model_16_map_default (.'$tight#Number'.default)
def _jm_f_57(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Number'.default
    return True

# check json_model_16_map_definitions (.'$tight#Number'.definitions)
def _jm_f_58(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Number'.definitions
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Number'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Number'.definitions.''
        res = json_model_26(pval, lpath_19 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Number'.definitions.'']", lpath_19 if path is not None else None))
            return False
    return True

# check json_model_16_map_description (.'$tight#Number'.description)
def _jm_f_59(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Number'.description
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Number'.description]", path))
    return res

# check json_model_16_map_examples (.'$tight#Number'.examples)
def _jm_f_60(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Number'.examples
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Number'.examples]", path))
    return res

# check json_model_16_map_id (.'$tight#Number'.id)
def _jm_f_61(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Number'.id
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Number'.id]", path))
    return res

# check json_model_16_map_maximum (.'$tight#Number'.maximum)
def _jm_f_62(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Number'.maximum
    res: bool = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$tight#Number'.maximum]", path))
    return res

# check json_model_16_map_minimum (.'$tight#Number'.minimum)
def _jm_f_63(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Number'.minimum
    res: bool = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$tight#Number'.minimum]", path))
    return res

# check json_model_16_map_title (.'$tight#Number'.title)
def _jm_f_64(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Number'.title
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Number'.title]", path))
    return res


# check $tight#Number (.'$tight#Number')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Number'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Number']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#Number'.type
            res = isinstance(pval, str) and pval == "number"
            if not res:
                rep is None or rep.append(("unexpected number [.'$tight#Number'.type]", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Number'.type]", lpath_17 if path is not None else None))
                return False
        elif pfun := json_model_16_map.get(prop):
            # handle 12 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_17 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#Number']", lpath_17 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Number']", lpath_17 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#Number']", path))
        return False
    return True

# object .'$tight#Bool'.'$defs'
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Bool'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Bool'.'$defs'.''
        res = json_model_26(pval, lpath_21 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Bool'.'$defs'.'']", lpath_21 if path is not None else None))
            return False
    return True

# object .'$tight#Bool'.definitions
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Bool'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Bool'.definitions.''
        res = json_model_26(pval, lpath_22 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Bool'.definitions.'']", lpath_22 if path is not None else None))
            return False
    return True

# check $tight#Bool (.'$tight#Bool')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Bool'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Bool']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#Bool'.type
            res = isinstance(pval, str) and pval == "boolean"
            if not res:
                rep is None or rep.append(("unexpected boolean [.'$tight#Bool'.type]", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Bool'.type]", lpath_20 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#Bool'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Bool'.'$schema']", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Bool'.'$schema']", lpath_20 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#Bool'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Bool'.'$id']", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Bool'.'$id']", lpath_20 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#Bool'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Bool'.id]", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Bool'.id]", lpath_20 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#Bool'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Bool'.'$comment']", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Bool'.'$comment']", lpath_20 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#Bool'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Bool'.title]", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Bool'.title]", lpath_20 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#Bool'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#Bool'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#Bool'.examples]", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Bool'.examples]", lpath_20 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#Bool'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Bool'.description]", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Bool'.description]", lpath_20 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#Bool'.'$defs'
            res = _jm_obj_3(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#Bool'.'$defs']", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Bool'.'$defs']", lpath_20 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#Bool'.definitions
            res = _jm_obj_4(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#Bool'.definitions]", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Bool'.definitions]", lpath_20 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Bool']", lpath_20 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#Bool']", path))
        return False
    return True

# object .'$tight#Null'.'$defs'
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Null'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Null'.'$defs'.''
        res = json_model_26(pval, lpath_24 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Null'.'$defs'.'']", lpath_24 if path is not None else None))
            return False
    return True

# object .'$tight#Null'.definitions
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Null'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Null'.definitions.''
        res = json_model_26(pval, lpath_25 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Null'.definitions.'']", lpath_25 if path is not None else None))
            return False
    return True

# check $tight#Null (.'$tight#Null')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Null'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Null']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#Null'.type
            res = isinstance(pval, str) and pval == "null"
            if not res:
                rep is None or rep.append(("unexpected null [.'$tight#Null'.type]", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Null'.type]", lpath_23 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#Null'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Null'.'$schema']", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Null'.'$schema']", lpath_23 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#Null'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Null'.'$id']", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Null'.'$id']", lpath_23 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#Null'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Null'.id]", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Null'.id]", lpath_23 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#Null'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Null'.'$comment']", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Null'.'$comment']", lpath_23 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#Null'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Null'.title]", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Null'.title]", lpath_23 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#Null'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#Null'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#Null'.examples]", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Null'.examples]", lpath_23 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#Null'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Null'.description]", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Null'.description]", lpath_23 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#Null'.'$defs'
            res = _jm_obj_5(pval, lpath_23 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#Null'.'$defs']", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Null'.'$defs']", lpath_23 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#Null'.definitions
            res = _jm_obj_6(pval, lpath_23 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#Null'.definitions]", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Null'.definitions]", lpath_23 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Null']", lpath_23 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#Null']", path))
        return False
    return True

# object .'$tight#AllOf'.'$defs'
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#AllOf'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#AllOf'.'$defs'.''
        res = json_model_26(pval, lpath_27 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#AllOf'.'$defs'.'']", lpath_27 if path is not None else None))
            return False
    return True

# object .'$tight#AllOf'.definitions
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#AllOf'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#AllOf'.definitions.''
        res = json_model_26(pval, lpath_28 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#AllOf'.definitions.'']", lpath_28 if path is not None else None))
            return False
    return True

# check $tight#AllOf (.'$tight#AllOf')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#AllOf'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#AllOf']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        if prop == "allOf":
            # handle must allOf property
            must_count += 1
            # .'$tight#AllOf'.allOf
            res = json_model_6(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $schemaArray [.'$tight#AllOf'.allOf]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#AllOf'.allOf]", lpath_26 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#AllOf'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#AllOf'.'$schema']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AllOf'.'$schema']", lpath_26 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#AllOf'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#AllOf'.'$id']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AllOf'.'$id']", lpath_26 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#AllOf'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#AllOf'.id]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AllOf'.id]", lpath_26 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#AllOf'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#AllOf'.'$comment']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AllOf'.'$comment']", lpath_26 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#AllOf'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#AllOf'.title]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AllOf'.title]", lpath_26 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#AllOf'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#AllOf'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#AllOf'.examples]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AllOf'.examples]", lpath_26 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#AllOf'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#AllOf'.description]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AllOf'.description]", lpath_26 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#AllOf'.'$defs'
            res = _jm_obj_7(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#AllOf'.'$defs']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AllOf'.'$defs']", lpath_26 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#AllOf'.definitions
            res = _jm_obj_8(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#AllOf'.definitions]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AllOf'.definitions]", lpath_26 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#AllOf']", lpath_26 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "allOf" in val:
                rep is None or rep.append(("missing mandatory prop <allOf> [.'$tight#AllOf']", path))
        return False
    return True

# object .'$tight#AnyOf'.'$defs'
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#AnyOf'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#AnyOf'.'$defs'.''
        res = json_model_26(pval, lpath_30 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#AnyOf'.'$defs'.'']", lpath_30 if path is not None else None))
            return False
    return True

# object .'$tight#AnyOf'.definitions
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#AnyOf'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#AnyOf'.definitions.''
        res = json_model_26(pval, lpath_31 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#AnyOf'.definitions.'']", lpath_31 if path is not None else None))
            return False
    return True

# check $tight#AnyOf (.'$tight#AnyOf')
def json_model_20(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#AnyOf'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#AnyOf']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        if prop == "anyOf":
            # handle must anyOf property
            must_count += 1
            # .'$tight#AnyOf'.anyOf
            res = json_model_6(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $schemaArray [.'$tight#AnyOf'.anyOf]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#AnyOf'.anyOf]", lpath_29 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#AnyOf'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#AnyOf'.'$schema']", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AnyOf'.'$schema']", lpath_29 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#AnyOf'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#AnyOf'.'$id']", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AnyOf'.'$id']", lpath_29 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#AnyOf'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#AnyOf'.id]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AnyOf'.id]", lpath_29 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#AnyOf'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#AnyOf'.'$comment']", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AnyOf'.'$comment']", lpath_29 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#AnyOf'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#AnyOf'.title]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AnyOf'.title]", lpath_29 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#AnyOf'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#AnyOf'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#AnyOf'.examples]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AnyOf'.examples]", lpath_29 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#AnyOf'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#AnyOf'.description]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AnyOf'.description]", lpath_29 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#AnyOf'.'$defs'
            res = _jm_obj_9(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#AnyOf'.'$defs']", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AnyOf'.'$defs']", lpath_29 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#AnyOf'.definitions
            res = _jm_obj_10(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#AnyOf'.definitions]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#AnyOf'.definitions]", lpath_29 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#AnyOf']", lpath_29 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "anyOf" in val:
                rep is None or rep.append(("missing mandatory prop <anyOf> [.'$tight#AnyOf']", path))
        return False
    return True

# object .'$tight#OneOf'.'$defs'
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#OneOf'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#OneOf'.'$defs'.''
        res = json_model_26(pval, lpath_33 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#OneOf'.'$defs'.'']", lpath_33 if path is not None else None))
            return False
    return True

# object .'$tight#OneOf'.definitions
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#OneOf'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#OneOf'.definitions.''
        res = json_model_26(pval, lpath_34 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#OneOf'.definitions.'']", lpath_34 if path is not None else None))
            return False
    return True

# check $tight#OneOf (.'$tight#OneOf')
def json_model_21(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#OneOf'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#OneOf']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        if prop == "oneOf":
            # handle must oneOf property
            must_count += 1
            # .'$tight#OneOf'.oneOf
            res = json_model_6(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $schemaArray [.'$tight#OneOf'.oneOf]", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#OneOf'.oneOf]", lpath_32 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#OneOf'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#OneOf'.'$schema']", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#OneOf'.'$schema']", lpath_32 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#OneOf'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#OneOf'.'$id']", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#OneOf'.'$id']", lpath_32 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#OneOf'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#OneOf'.id]", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#OneOf'.id]", lpath_32 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#OneOf'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#OneOf'.'$comment']", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#OneOf'.'$comment']", lpath_32 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#OneOf'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#OneOf'.title]", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#OneOf'.title]", lpath_32 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#OneOf'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#OneOf'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#OneOf'.examples]", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#OneOf'.examples]", lpath_32 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#OneOf'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#OneOf'.description]", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#OneOf'.description]", lpath_32 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#OneOf'.'$defs'
            res = _jm_obj_11(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#OneOf'.'$defs']", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#OneOf'.'$defs']", lpath_32 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#OneOf'.definitions
            res = _jm_obj_12(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#OneOf'.definitions]", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#OneOf'.definitions]", lpath_32 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#OneOf']", lpath_32 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "oneOf" in val:
                rep is None or rep.append(("missing mandatory prop <oneOf> [.'$tight#OneOf']", path))
        return False
    return True

# object .'$tight#Enum'.'$defs'
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Enum'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_36: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Enum'.'$defs'.''
        res = json_model_26(pval, lpath_36 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Enum'.'$defs'.'']", lpath_36 if path is not None else None))
            return False
    return True

# object .'$tight#Enum'.definitions
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Enum'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_37: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Enum'.definitions.''
        res = json_model_26(pval, lpath_37 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Enum'.definitions.'']", lpath_37 if path is not None else None))
            return False
    return True

# check $tight#Enum (.'$tight#Enum')
def json_model_22(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Enum'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Enum']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        if prop == "enum":
            # handle must enum property
            must_count += 1
            # .'$tight#Enum'.enum
            res = json_model_5(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $enum [.'$tight#Enum'.enum]", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Enum'.enum]", lpath_35 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#Enum'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Enum'.'$schema']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Enum'.'$schema']", lpath_35 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#Enum'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Enum'.'$id']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Enum'.'$id']", lpath_35 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#Enum'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Enum'.id]", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Enum'.id]", lpath_35 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#Enum'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Enum'.'$comment']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Enum'.'$comment']", lpath_35 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#Enum'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Enum'.title]", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Enum'.title]", lpath_35 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#Enum'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#Enum'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#Enum'.examples]", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Enum'.examples]", lpath_35 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#Enum'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Enum'.description]", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Enum'.description]", lpath_35 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#Enum'.'$defs'
            res = _jm_obj_13(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#Enum'.'$defs']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Enum'.'$defs']", lpath_35 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#Enum'.definitions
            res = _jm_obj_14(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#Enum'.definitions]", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Enum'.definitions]", lpath_35 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Enum']", lpath_35 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "enum" in val:
                rep is None or rep.append(("missing mandatory prop <enum> [.'$tight#Enum']", path))
        return False
    return True

# check $tight#enum (.'$tight#enum')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#enum'
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("unexpected type [.'$tight#enum'.'|']", path))
    if res:
        # .'$tight#enum'.'|'.0
        for arr_4_idx, arr_4_item in enumerate(val):
            arr_4_lpath: Path = (path + [ arr_4_idx ]) if path is not None else None
            # .'$tight#enum'.'|'.0.0
            res = isinstance(arr_4_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#enum'.'|'.0.0]", arr_4_lpath if path is not None else None))
                break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$tight#enum'.'|'.0]", path))
        if not res:
            # .'$tight#enum'.'|'.1
            for arr_3_idx, arr_3_item in enumerate(val):
                arr_3_lpath: Path = (path + [ arr_3_idx ]) if path is not None else None
                # .'$tight#enum'.'|'.1.0
                res = isinstance(arr_3_item, int) and not isinstance(arr_3_item, bool)
                if not res:
                    rep is None or rep.append(("not a -1 strict int [.'$tight#enum'.'|'.1.0]", arr_3_lpath if path is not None else None))
                    break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#enum'.'|'.1]", path))
            if not res:
                # .'$tight#enum'.'|'.2
                for arr_2_idx, arr_2_item in enumerate(val):
                    arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
                    # .'$tight#enum'.'|'.2.0
                    res = isinstance(arr_2_item, bool)
                    if not res:
                        rep is None or rep.append(("not a bool [.'$tight#enum'.'|'.2.0]", arr_2_lpath if path is not None else None))
                        break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$tight#enum'.'|'.2]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$tight#enum'.'|']", path))
    return res

# object .'$tight#Const'.'$defs'
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Const'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_39: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Const'.'$defs'.''
        res = json_model_26(pval, lpath_39 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Const'.'$defs'.'']", lpath_39 if path is not None else None))
            return False
    return True

# object .'$tight#Const'.definitions
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Const'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_40: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Const'.definitions.''
        res = json_model_26(pval, lpath_40 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Const'.definitions.'']", lpath_40 if path is not None else None))
            return False
    return True

# check $tight#Const (.'$tight#Const')
def json_model_23(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Const'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Const']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_38: Path = (path + [ prop ]) if path is not None else None
        if prop == "const":
            # handle must const property
            must_count += 1
            # .'$tight#Const'.const
            res = json_model_4(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $const [.'$tight#Const'.const]", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Const'.const]", lpath_38 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#Const'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Const'.'$schema']", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Const'.'$schema']", lpath_38 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#Const'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Const'.'$id']", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Const'.'$id']", lpath_38 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#Const'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Const'.id]", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Const'.id]", lpath_38 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#Const'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Const'.'$comment']", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Const'.'$comment']", lpath_38 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#Const'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Const'.title]", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Const'.title]", lpath_38 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#Const'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#Const'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#Const'.examples]", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Const'.examples]", lpath_38 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#Const'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Const'.description]", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Const'.description]", lpath_38 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#Const'.'$defs'
            res = _jm_obj_15(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#Const'.'$defs']", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Const'.'$defs']", lpath_38 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#Const'.definitions
            res = _jm_obj_16(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#Const'.definitions]", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Const'.definitions]", lpath_38 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Const']", lpath_38 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "const" in val:
                rep is None or rep.append(("missing mandatory prop <const> [.'$tight#Const']", path))
        return False
    return True

# check $tight#const (.'$tight#const')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#const'
    # .'$tight#const'.'|'.0
    res: bool = val is None
    if not res:
        rep is None or rep.append(("not null [.'$tight#const'.'|'.0]", path))
    if not res:
        # .'$tight#const'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$tight#const'.'|'.1]", path))
        if not res:
            # .'$tight#const'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$tight#const'.'|'.2]", path))
            if not res:
                # .'$tight#const'.'|'.3
                res = isinstance(val, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [.'$tight#const'.'|'.3]", path))
                if not res:
                    # .'$tight#const'.'|'.4
                    res = isinstance(val, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$tight#const'.'|'.4]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$tight#const'.'|']", path))
    return res

# object .'$tight#Ref'.'$defs'
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Ref'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_42: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Ref'.'$defs'.''
        res = json_model_26(pval, lpath_42 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Ref'.'$defs'.'']", lpath_42 if path is not None else None))
            return False
    return True

# object .'$tight#Ref'.definitions
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Ref'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_43: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Ref'.definitions.''
        res = json_model_26(pval, lpath_43 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Ref'.definitions.'']", lpath_43 if path is not None else None))
            return False
    return True

# check $tight#Ref (.'$tight#Ref')
def json_model_24(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Ref'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Ref']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_41: Path = (path + [ prop ]) if path is not None else None
        if prop == "$ref":
            # handle must $ref property
            must_count += 1
            # .'$tight#Ref'.'$ref'
            res = is_valid_url(pval, lpath_41 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$tight#Ref'.'$ref']", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Ref'.'$ref']", lpath_41 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#Ref'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Ref'.'$schema']", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Ref'.'$schema']", lpath_41 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#Ref'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Ref'.'$id']", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Ref'.'$id']", lpath_41 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#Ref'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Ref'.id]", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Ref'.id]", lpath_41 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#Ref'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Ref'.'$comment']", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Ref'.'$comment']", lpath_41 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#Ref'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Ref'.title]", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Ref'.title]", lpath_41 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#Ref'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#Ref'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#Ref'.examples]", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Ref'.examples]", lpath_41 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#Ref'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Ref'.description]", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Ref'.description]", lpath_41 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#Ref'.'$defs'
            res = _jm_obj_17(pval, lpath_41 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#Ref'.'$defs']", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Ref'.'$defs']", lpath_41 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#Ref'.definitions
            res = _jm_obj_18(pval, lpath_41 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#Ref'.definitions]", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#Ref'.definitions]", lpath_41 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Ref']", lpath_41 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "$ref" in val:
                rep is None or rep.append(("missing mandatory prop <$ref> [.'$tight#Ref']", path))
        return False
    return True

# check $tight#Schema (.'$tight#Schema')
def json_model_26(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#Schema'
    # .'$tight#Schema'.'|'.0
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$tight#Schema'.'|'.0]", path))
    if not res:
        # .'$tight#Schema'.'|'.1
        res = json_model_25(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ObjectSchema [.'$tight#Schema'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$tight#Schema'.'|']", path))
    return res

# object .'$tight#EnumString'.'$defs'
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumString'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_45: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#EnumString'.'$defs'.''
        res = json_model_26(pval, lpath_45 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#EnumString'.'$defs'.'']", lpath_45 if path is not None else None))
            return False
    return True

# object .'$tight#EnumString'.definitions
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumString'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_46: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#EnumString'.definitions.''
        res = json_model_26(pval, lpath_46 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#EnumString'.definitions.'']", lpath_46 if path is not None else None))
            return False
    return True

# check $tight#EnumString (.'$tight#EnumString')
def json_model_28(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#EnumString'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumString']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_44: Path = (path + [ prop ]) if path is not None else None
        if prop == "enum":
            # handle must enum property
            must_count += 1
            # .'$tight#EnumString'.enum
            res = isinstance(pval, list)
            if res:
                for arr_5_idx, arr_5_item in enumerate(pval):
                    arr_5_lpath: Path = ((lpath_44 if path is not None else None) + [ arr_5_idx ]) if (lpath_44 if path is not None else None) is not None else None
                    # .'$tight#EnumString'.enum.0
                    res = isinstance(arr_5_item, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$tight#EnumString'.enum.0]", arr_5_lpath if (lpath_44 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#EnumString'.enum]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#EnumString'.enum]", lpath_44 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#EnumString'.type
            res = isinstance(pval, str) and pval == "string"
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumString'.type]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#EnumString'.type]", lpath_44 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#EnumString'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumString'.'$schema']", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumString'.'$schema']", lpath_44 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#EnumString'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumString'.'$id']", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumString'.'$id']", lpath_44 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#EnumString'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumString'.id]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumString'.id]", lpath_44 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#EnumString'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumString'.'$comment']", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumString'.'$comment']", lpath_44 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#EnumString'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumString'.title]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumString'.title]", lpath_44 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#EnumString'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#EnumString'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#EnumString'.examples]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumString'.examples]", lpath_44 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#EnumString'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumString'.description]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumString'.description]", lpath_44 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#EnumString'.'$defs'
            res = _jm_obj_19(pval, lpath_44 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#EnumString'.'$defs']", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumString'.'$defs']", lpath_44 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#EnumString'.definitions
            res = _jm_obj_20(pval, lpath_44 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#EnumString'.definitions]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumString'.definitions]", lpath_44 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#EnumString']", lpath_44 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "enum" in val:
                rep is None or rep.append(("missing mandatory prop <enum> [.'$tight#EnumString']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#EnumString']", path))
        return False
    return True

# object .'$tight#EnumNum'.'$defs'
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumNum'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_48: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#EnumNum'.'$defs'.''
        res = json_model_26(pval, lpath_48 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#EnumNum'.'$defs'.'']", lpath_48 if path is not None else None))
            return False
    return True

# object .'$tight#EnumNum'.definitions
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumNum'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_49: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#EnumNum'.definitions.''
        res = json_model_26(pval, lpath_49 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#EnumNum'.definitions.'']", lpath_49 if path is not None else None))
            return False
    return True

# check $tight#EnumNum (.'$tight#EnumNum')
def json_model_29(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#EnumNum'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumNum']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_47: Path = (path + [ prop ]) if path is not None else None
        if prop == "enum":
            # handle must enum property
            must_count += 1
            # .'$tight#EnumNum'.enum
            res = isinstance(pval, list)
            if res:
                for arr_6_idx, arr_6_item in enumerate(pval):
                    arr_6_lpath: Path = ((lpath_47 if path is not None else None) + [ arr_6_idx ]) if (lpath_47 if path is not None else None) is not None else None
                    # .'$tight#EnumNum'.enum.0
                    res = isinstance(arr_6_item, float)
                    if not res:
                        rep is None or rep.append(("not a -1.0 strict float [.'$tight#EnumNum'.enum.0]", arr_6_lpath if (lpath_47 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#EnumNum'.enum]", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#EnumNum'.enum]", lpath_47 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#EnumNum'.type
            res = isinstance(pval, str) and pval == "number"
            if not res:
                rep is None or rep.append(("unexpected number [.'$tight#EnumNum'.type]", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#EnumNum'.type]", lpath_47 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#EnumNum'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumNum'.'$schema']", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumNum'.'$schema']", lpath_47 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#EnumNum'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumNum'.'$id']", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumNum'.'$id']", lpath_47 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#EnumNum'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumNum'.id]", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumNum'.id]", lpath_47 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#EnumNum'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumNum'.'$comment']", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumNum'.'$comment']", lpath_47 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#EnumNum'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumNum'.title]", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumNum'.title]", lpath_47 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#EnumNum'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#EnumNum'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#EnumNum'.examples]", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumNum'.examples]", lpath_47 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#EnumNum'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumNum'.description]", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumNum'.description]", lpath_47 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#EnumNum'.'$defs'
            res = _jm_obj_21(pval, lpath_47 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#EnumNum'.'$defs']", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumNum'.'$defs']", lpath_47 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#EnumNum'.definitions
            res = _jm_obj_22(pval, lpath_47 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#EnumNum'.definitions]", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumNum'.definitions]", lpath_47 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#EnumNum']", lpath_47 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "enum" in val:
                rep is None or rep.append(("missing mandatory prop <enum> [.'$tight#EnumNum']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#EnumNum']", path))
        return False
    return True

# object .'$tight#EnumInt'.'$defs'
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumInt'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_51: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#EnumInt'.'$defs'.''
        res = json_model_26(pval, lpath_51 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#EnumInt'.'$defs'.'']", lpath_51 if path is not None else None))
            return False
    return True

# object .'$tight#EnumInt'.definitions
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumInt'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_52: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#EnumInt'.definitions.''
        res = json_model_26(pval, lpath_52 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#EnumInt'.definitions.'']", lpath_52 if path is not None else None))
            return False
    return True

# check $tight#EnumInt (.'$tight#EnumInt')
def json_model_30(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#EnumInt'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumInt']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_50: Path = (path + [ prop ]) if path is not None else None
        if prop == "enum":
            # handle must enum property
            must_count += 1
            # .'$tight#EnumInt'.enum
            res = isinstance(pval, list)
            if res:
                for arr_7_idx, arr_7_item in enumerate(pval):
                    arr_7_lpath: Path = ((lpath_50 if path is not None else None) + [ arr_7_idx ]) if (lpath_50 if path is not None else None) is not None else None
                    # .'$tight#EnumInt'.enum.0
                    res = isinstance(arr_7_item, int) and not isinstance(arr_7_item, bool)
                    if not res:
                        rep is None or rep.append(("not a -1 strict int [.'$tight#EnumInt'.enum.0]", arr_7_lpath if (lpath_50 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#EnumInt'.enum]", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#EnumInt'.enum]", lpath_50 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#EnumInt'.type
            res = isinstance(pval, str) and pval == "integer"
            if not res:
                rep is None or rep.append(("unexpected integer [.'$tight#EnumInt'.type]", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#EnumInt'.type]", lpath_50 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#EnumInt'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumInt'.'$schema']", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumInt'.'$schema']", lpath_50 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#EnumInt'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumInt'.'$id']", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumInt'.'$id']", lpath_50 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#EnumInt'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumInt'.id]", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumInt'.id]", lpath_50 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#EnumInt'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumInt'.'$comment']", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumInt'.'$comment']", lpath_50 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#EnumInt'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumInt'.title]", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumInt'.title]", lpath_50 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#EnumInt'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#EnumInt'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#EnumInt'.examples]", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumInt'.examples]", lpath_50 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#EnumInt'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumInt'.description]", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumInt'.description]", lpath_50 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#EnumInt'.'$defs'
            res = _jm_obj_23(pval, lpath_50 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#EnumInt'.'$defs']", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumInt'.'$defs']", lpath_50 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#EnumInt'.definitions
            res = _jm_obj_24(pval, lpath_50 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#EnumInt'.definitions]", lpath_50 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumInt'.definitions]", lpath_50 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#EnumInt']", lpath_50 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "enum" in val:
                rep is None or rep.append(("missing mandatory prop <enum> [.'$tight#EnumInt']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#EnumInt']", path))
        return False
    return True

# object .'$tight#ConstString'.'$defs'
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstString'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_54: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstString'.'$defs'.''
        res = json_model_26(pval, lpath_54 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstString'.'$defs'.'']", lpath_54 if path is not None else None))
            return False
    return True

# object .'$tight#ConstString'.definitions
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstString'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_55: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstString'.definitions.''
        res = json_model_26(pval, lpath_55 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstString'.definitions.'']", lpath_55 if path is not None else None))
            return False
    return True

# check $tight#ConstString (.'$tight#ConstString')
def json_model_31(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#ConstString'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstString']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_53: Path = (path + [ prop ]) if path is not None else None
        if prop == "const":
            # handle must const property
            must_count += 1
            # .'$tight#ConstString'.const
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstString'.const]", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstString'.const]", lpath_53 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#ConstString'.type
            res = isinstance(pval, str) and pval == "string"
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstString'.type]", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstString'.type]", lpath_53 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#ConstString'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstString'.'$schema']", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstString'.'$schema']", lpath_53 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#ConstString'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstString'.'$id']", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstString'.'$id']", lpath_53 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#ConstString'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstString'.id]", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstString'.id]", lpath_53 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#ConstString'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstString'.'$comment']", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstString'.'$comment']", lpath_53 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#ConstString'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstString'.title]", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstString'.title]", lpath_53 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#ConstString'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#ConstString'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#ConstString'.examples]", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstString'.examples]", lpath_53 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#ConstString'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstString'.description]", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstString'.description]", lpath_53 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#ConstString'.'$defs'
            res = _jm_obj_25(pval, lpath_53 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#ConstString'.'$defs']", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstString'.'$defs']", lpath_53 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#ConstString'.definitions
            res = _jm_obj_26(pval, lpath_53 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#ConstString'.definitions]", lpath_53 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstString'.definitions]", lpath_53 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#ConstString']", lpath_53 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "const" in val:
                rep is None or rep.append(("missing mandatory prop <const> [.'$tight#ConstString']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#ConstString']", path))
        return False
    return True

# object .'$tight#ConstNum'.'$defs'
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstNum'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_57: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstNum'.'$defs'.''
        res = json_model_26(pval, lpath_57 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstNum'.'$defs'.'']", lpath_57 if path is not None else None))
            return False
    return True

# object .'$tight#ConstNum'.definitions
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstNum'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_58: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstNum'.definitions.''
        res = json_model_26(pval, lpath_58 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstNum'.definitions.'']", lpath_58 if path is not None else None))
            return False
    return True

# check $tight#ConstNum (.'$tight#ConstNum')
def json_model_32(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#ConstNum'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstNum']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_56: Path = (path + [ prop ]) if path is not None else None
        if prop == "const":
            # handle must const property
            must_count += 1
            # .'$tight#ConstNum'.const
            res = isinstance(pval, float)
            if not res:
                rep is None or rep.append(("not a -1.0 strict float [.'$tight#ConstNum'.const]", lpath_56 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstNum'.const]", lpath_56 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#ConstNum'.type
            res = isinstance(pval, str) and pval == "number"
            if not res:
                rep is None or rep.append(("unexpected number [.'$tight#ConstNum'.type]", lpath_56 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstNum'.type]", lpath_56 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#ConstNum'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstNum'.'$schema']", lpath_56 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstNum'.'$schema']", lpath_56 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#ConstNum'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstNum'.'$id']", lpath_56 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstNum'.'$id']", lpath_56 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#ConstNum'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstNum'.id]", lpath_56 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstNum'.id]", lpath_56 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#ConstNum'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstNum'.'$comment']", lpath_56 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstNum'.'$comment']", lpath_56 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#ConstNum'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstNum'.title]", lpath_56 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstNum'.title]", lpath_56 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#ConstNum'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#ConstNum'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#ConstNum'.examples]", lpath_56 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstNum'.examples]", lpath_56 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#ConstNum'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstNum'.description]", lpath_56 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstNum'.description]", lpath_56 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#ConstNum'.'$defs'
            res = _jm_obj_27(pval, lpath_56 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#ConstNum'.'$defs']", lpath_56 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstNum'.'$defs']", lpath_56 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#ConstNum'.definitions
            res = _jm_obj_28(pval, lpath_56 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#ConstNum'.definitions]", lpath_56 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstNum'.definitions]", lpath_56 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#ConstNum']", lpath_56 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "const" in val:
                rep is None or rep.append(("missing mandatory prop <const> [.'$tight#ConstNum']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#ConstNum']", path))
        return False
    return True

# object .'$tight#ConstInt'.'$defs'
def _jm_obj_29(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstInt'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_60: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstInt'.'$defs'.''
        res = json_model_26(pval, lpath_60 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstInt'.'$defs'.'']", lpath_60 if path is not None else None))
            return False
    return True

# object .'$tight#ConstInt'.definitions
def _jm_obj_30(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstInt'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_61: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstInt'.definitions.''
        res = json_model_26(pval, lpath_61 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstInt'.definitions.'']", lpath_61 if path is not None else None))
            return False
    return True

# check $tight#ConstInt (.'$tight#ConstInt')
def json_model_33(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#ConstInt'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstInt']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_59: Path = (path + [ prop ]) if path is not None else None
        if prop == "const":
            # handle must const property
            must_count += 1
            # .'$tight#ConstInt'.const
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$tight#ConstInt'.const]", lpath_59 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstInt'.const]", lpath_59 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#ConstInt'.type
            res = isinstance(pval, str) and pval == "integer"
            if not res:
                rep is None or rep.append(("unexpected integer [.'$tight#ConstInt'.type]", lpath_59 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstInt'.type]", lpath_59 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#ConstInt'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstInt'.'$schema']", lpath_59 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstInt'.'$schema']", lpath_59 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#ConstInt'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstInt'.'$id']", lpath_59 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstInt'.'$id']", lpath_59 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#ConstInt'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstInt'.id]", lpath_59 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstInt'.id]", lpath_59 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#ConstInt'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstInt'.'$comment']", lpath_59 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstInt'.'$comment']", lpath_59 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#ConstInt'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstInt'.title]", lpath_59 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstInt'.title]", lpath_59 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#ConstInt'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#ConstInt'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#ConstInt'.examples]", lpath_59 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstInt'.examples]", lpath_59 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#ConstInt'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstInt'.description]", lpath_59 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstInt'.description]", lpath_59 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#ConstInt'.'$defs'
            res = _jm_obj_29(pval, lpath_59 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#ConstInt'.'$defs']", lpath_59 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstInt'.'$defs']", lpath_59 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#ConstInt'.definitions
            res = _jm_obj_30(pval, lpath_59 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#ConstInt'.definitions]", lpath_59 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstInt'.definitions]", lpath_59 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#ConstInt']", lpath_59 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "const" in val:
                rep is None or rep.append(("missing mandatory prop <const> [.'$tight#ConstInt']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#ConstInt']", path))
        return False
    return True

# object .'$tight#ConstBool'.'$defs'
def _jm_obj_31(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstBool'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_63: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstBool'.'$defs'.''
        res = json_model_26(pval, lpath_63 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstBool'.'$defs'.'']", lpath_63 if path is not None else None))
            return False
    return True

# object .'$tight#ConstBool'.definitions
def _jm_obj_32(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstBool'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_64: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstBool'.definitions.''
        res = json_model_26(pval, lpath_64 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstBool'.definitions.'']", lpath_64 if path is not None else None))
            return False
    return True

# check $tight#ConstBool (.'$tight#ConstBool')
def json_model_34(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$tight#ConstBool'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstBool']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_62: Path = (path + [ prop ]) if path is not None else None
        if prop == "const":
            # handle must const property
            must_count += 1
            # .'$tight#ConstBool'.const
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$tight#ConstBool'.const]", lpath_62 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstBool'.const]", lpath_62 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#ConstBool'.type
            res = isinstance(pval, str) and pval == "boolean"
            if not res:
                rep is None or rep.append(("unexpected boolean [.'$tight#ConstBool'.type]", lpath_62 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstBool'.type]", lpath_62 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$tight#ConstBool'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstBool'.'$schema']", lpath_62 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstBool'.'$schema']", lpath_62 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$tight#ConstBool'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstBool'.'$id']", lpath_62 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstBool'.'$id']", lpath_62 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$tight#ConstBool'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstBool'.id]", lpath_62 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstBool'.id]", lpath_62 if path is not None else None))
                return False
        elif prop == "$comment":
            # handle may $comment property
            # .'$tight#ConstBool'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstBool'.'$comment']", lpath_62 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstBool'.'$comment']", lpath_62 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$tight#ConstBool'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstBool'.title]", lpath_62 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstBool'.title]", lpath_62 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$tight#ConstBool'.default
            res = True
        elif prop == "examples":
            # handle may examples property
            # .'$tight#ConstBool'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#ConstBool'.examples]", lpath_62 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstBool'.examples]", lpath_62 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$tight#ConstBool'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstBool'.description]", lpath_62 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstBool'.description]", lpath_62 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$tight#ConstBool'.'$defs'
            res = _jm_obj_31(pval, lpath_62 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#ConstBool'.'$defs']", lpath_62 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstBool'.'$defs']", lpath_62 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$tight#ConstBool'.definitions
            res = _jm_obj_32(pval, lpath_62 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$tight#ConstBool'.definitions]", lpath_62 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstBool'.definitions]", lpath_62 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#ConstBool']", lpath_62 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "const" in val:
                rep is None or rep.append(("missing mandatory prop <const> [.'$tight#ConstBool']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#ConstBool']", path))
        return False
    return True


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_map_0
        _jm_map_0 = {
            "null": json_model_18,
            "boolean": json_model_17,
            "integer": json_model_15,
            "number": json_model_16,
            "string": json_model_12,
            "array": json_model_13,
            "object": json_model_14,
        }
        global _jm_cst_0
        _jm_cst_0 = {'byte', 'date', 'date-time', 'double', 'duration', 'email', 'hostname', 'idn-email', 'idn-hostname', 'int', 'int32', 'int64', 'ipv4', 'ipv6', 'iri', 'iri-reference', 'json-pointer', 'mime-type', 'regex', 'relative-json-pointer', 'time', 'uint', 'uint32', 'uint64', 'uri', 'uri-reference', 'uuid'}
        global json_model_12_map
        json_model_12_map = {
            "$comment": _jm_f_0,
            "$defs": _jm_f_1,
            "$id": _jm_f_2,
            "$schema": _jm_f_3,
            "default": _jm_f_4,
            "definitions": _jm_f_5,
            "description": _jm_f_6,
            "examples": _jm_f_7,
            "format": _jm_f_8,
            "id": _jm_f_9,
            "maxLength": _jm_f_10,
            "minLength": _jm_f_11,
            "pattern": _jm_f_12,
            "title": _jm_f_13,
        }
        global json_model_13_map
        json_model_13_map = {
            "$comment": _jm_f_14,
            "$defs": _jm_f_15,
            "$id": _jm_f_16,
            "$schema": _jm_f_17,
            "additionalItems": json_model_26,
            "default": _jm_f_18,
            "definitions": _jm_f_19,
            "description": _jm_f_20,
            "examples": _jm_f_21,
            "id": _jm_f_22,
            "items": _jm_f_23,
            "maxItems": _jm_f_24,
            "minItems": _jm_f_25,
            "prefixItems": json_model_6,
            "title": _jm_f_26,
            "uniqueItems": _jm_f_27,
        }
        global json_model_14_map
        json_model_14_map = {
            "$comment": _jm_f_28,
            "$defs": _jm_f_29,
            "$id": _jm_f_30,
            "$schema": _jm_f_31,
            "additionalProperties": json_model_26,
            "default": _jm_f_32,
            "definitions": _jm_f_33,
            "description": _jm_f_34,
            "examples": _jm_f_35,
            "id": _jm_f_36,
            "patternProperties": _jm_f_37,
            "properties": _jm_f_38,
            "required": _jm_f_39,
            "title": _jm_f_40,
        }
        global json_model_15_map
        json_model_15_map = {
            "$comment": _jm_f_41,
            "$defs": _jm_f_42,
            "$id": _jm_f_43,
            "$schema": _jm_f_44,
            "default": _jm_f_45,
            "definitions": _jm_f_46,
            "description": _jm_f_47,
            "examples": _jm_f_48,
            "id": _jm_f_49,
            "maximum": _jm_f_50,
            "minimum": _jm_f_51,
            "title": _jm_f_52,
        }
        global json_model_16_map
        json_model_16_map = {
            "$comment": _jm_f_53,
            "$defs": _jm_f_54,
            "$id": _jm_f_55,
            "$schema": _jm_f_56,
            "default": _jm_f_57,
            "definitions": _jm_f_58,
            "description": _jm_f_59,
            "examples": _jm_f_60,
            "id": _jm_f_61,
            "maximum": _jm_f_62,
            "minimum": _jm_f_63,
            "title": _jm_f_64,
        }
        global check_model_map
        check_model_map = {
            "": json_model_27,
            "tight": json_model_27,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
