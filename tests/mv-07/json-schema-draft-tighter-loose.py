#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_map_0: dict[str, str]
_jm_obj_1_map: PropMap
_jm_cst_0: set[str]
_jm_obj_4_map: PropMap
_jm_obj_7_map: PropMap
_jm_obj_10_map: PropMap
_jm_obj_15_map: PropMap
_jm_obj_18_map: PropMap
_jm_obj_21_map: PropMap
_jm_obj_24_map: PropMap
_jm_obj_27_map: PropMap
_jm_obj_30_map: PropMap
_jm_obj_33_map: PropMap
_jm_obj_36_map: PropMap
_jm_obj_39_map: PropMap
_jm_obj_42_map: PropMap
_jm_obj_45_map: PropMap
_jm_obj_48_map: PropMap
_jm_obj_51_map: PropMap
_jm_obj_54_map: PropMap
_jm_obj_57_map: PropMap
_jm_obj_60_map: PropMap
_jm_obj_63_map: PropMap
check_model_map: PropMap

# check $tight (.'$tight')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight'
    res = json_model_27(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $RootSchema [.'$tight']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_27(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $tight#RootSchema [.]", path))
    return res

# object .'$tight#RootSchema'.'&'.0
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#RootSchema'.'&'.0]", path))
        return False
    pval: Jsonable
    res: bool
    if not "$schema" in val:
        rep is None or rep.append(("missing mandatory prop <$schema> [.'$tight#RootSchema'.'&'.0]", path))
        return False
    pval = val.get("$schema", UNDEFINED)
    # .'$tight#RootSchema'.'&'.0.'$schema'
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#RootSchema'.'&'.0.'$schema']", path))
    if not res:
        rep is None or rep.append(("unexpected value for mandatory prop <$schema> [.'$tight#RootSchema'.'&'.0]", path))
        return False
    return True

# check $tight#RootSchema (.'$tight#RootSchema')
def json_model_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # keyword $schema is mandatory at the root, and optional elsewhere
    # .'$tight#RootSchema'
    res = True
    if res:
        # .'$tight#RootSchema'.'&'.0
        res = _jm_obj_0(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$tight#RootSchema'.'&'.0]", path))
        if res:
            # .'$tight#RootSchema'.'&'.1
            res = json_model_25(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $ObjectSchema [.'$tight#RootSchema'.'&'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not all model match [.'$tight#RootSchema'.'&']", path))
    return res


# check $tight#ObjectSchema (.'$tight#ObjectSchema')
def json_model_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # we could use ^ instead of | below
    # .'$tight#ObjectSchema'
    iso_0: bool = isinstance(val, dict)
    res = iso_0
    if res:
        if "type" in val:
            tag_0: Jsonable = val.get("type", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <type> value not found [.'$tight#ObjectSchema'.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <type> is missing [.'$tight#ObjectSchema'.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'$tight#ObjectSchema'.'|']", path))
    if not res:
        res = json_model_11(val, path, rep)
        if not res:
            res = json_model_23(val, path, rep)
            if not res:
                res = json_model_22(val, path, rep)
                if not res:
                    res = json_model_19(val, path, rep)
                    if not res:
                        res = json_model_20(val, path, rep)
                        if not res:
                            res = json_model_21(val, path, rep)
                            if not res:
                                res = json_model_24(val, path, rep)
    return res

# check _jm_obj_1_map_$comment (.'$tight#metas'.'$comment')
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#metas'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#metas'.'$comment']", path))
    return res

# object .'$tight#metas'.'$defs'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#metas'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#metas'.'$defs'.''
        res = json_model_26(pval, lpath_1 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#metas'.'$defs'.'']", lpath_1 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_1_map_$defs (.'$tight#metas'.'$defs')
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#metas'.'$defs'
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#metas'.'$defs']", path))
    return res

# check _jm_obj_1_map_$id (.'$tight#metas'.'$id')
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#metas'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#metas'.'$id']", path))
    return res

# check _jm_obj_1_map_$schema (.'$tight#metas'.'$schema')
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#metas'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#metas'.'$schema']", path))
    return res

# check _jm_obj_1_map_default (.'$tight#metas'.default)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#metas'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#metas'.default]", path))
    return res

# object .'$tight#metas'.definitions
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#metas'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#metas'.definitions.''
        res = json_model_26(pval, lpath_2 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#metas'.definitions.'']", lpath_2 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_1_map_definitions (.'$tight#metas'.definitions)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#metas'.definitions
    res = _jm_obj_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#metas'.definitions]", path))
    return res

# check _jm_obj_1_map_description (.'$tight#metas'.description)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#metas'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#metas'.description]", path))
    return res

# check _jm_obj_1_map_examples (.'$tight#metas'.examples)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#metas'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#metas'.examples]", path))
    return res

# check _jm_obj_1_map_id (.'$tight#metas'.id)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#metas'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#metas'.id]", path))
    return res

# check _jm_obj_1_map_title (.'$tight#metas'.title)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#metas'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#metas'.title]", path))
    return res


# object .'$tight#metas'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#metas']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_1_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#metas']", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#metas']", lpath_0 if path is not None else None))
            return False
    return True

# check $tight#metas (.'$tight#metas')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # there is a trick with $schema… in RootSchema below
    # .'$tight#metas'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#metas']", path))
    return res

# check _jm_obj_4_map_$comment (.'$tight#String'.'$comment')
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#String'.'$comment']", path))
    return res

# object .'$tight#String'.'$defs'
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#String'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#String'.'$defs'.''
        res = json_model_26(pval, lpath_4 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#String'.'$defs'.'']", lpath_4 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_4_map_$defs (.'$tight#String'.'$defs')
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.'$defs'
    res = _jm_obj_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#String'.'$defs']", path))
    return res

# check _jm_obj_4_map_$id (.'$tight#String'.'$id')
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#String'.'$id']", path))
    return res

# check _jm_obj_4_map_$schema (.'$tight#String'.'$schema')
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#String'.'$schema']", path))
    return res

# check _jm_obj_4_map_default (.'$tight#String'.default)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#String'.default]", path))
    return res

# object .'$tight#String'.definitions
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#String'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#String'.definitions.''
        res = json_model_26(pval, lpath_5 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#String'.definitions.'']", lpath_5 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_4_map_definitions (.'$tight#String'.definitions)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.definitions
    res = _jm_obj_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#String'.definitions]", path))
    return res

# check _jm_obj_4_map_description (.'$tight#String'.description)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#String'.description]", path))
    return res

# check _jm_obj_4_map_examples (.'$tight#String'.examples)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#String'.examples]", path))
    return res


# check _jm_obj_4_map_format (.'$tight#String'.format)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.format
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$tight#String'.format.'|']", path))
    return res

# check _jm_obj_4_map_id (.'$tight#String'.id)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#String'.id]", path))
    return res

# check _jm_obj_4_map_maxLength (.'$tight#String'.maxLength)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.maxLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$tight#String'.maxLength]", path))
    return res

# check _jm_obj_4_map_minLength (.'$tight#String'.minLength)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.minLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$tight#String'.minLength]", path))
    return res

# check _jm_obj_4_map_pattern (.'$tight#String'.pattern)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.pattern
    res = is_valid_regex(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $REGEX [.'$tight#String'.pattern]", path))
    return res

# check _jm_obj_4_map_title (.'$tight#String'.title)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#String'.title]", path))
    return res


# object .'$tight#String'
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#String']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#String'.type
            res = isinstance(pval, str) and pval == "string"
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#String'.type]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#String'.type]", lpath_3 if path is not None else None))
                return False
        elif pfun := _jm_obj_4_map.get(prop):
            # handle 14 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_3 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#String']", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#String']", lpath_3 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#String']", path))
        return False
    return True

# check $tight#String (.'$tight#String')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#String'
    res = _jm_obj_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#String']", path))
    return res

# check _jm_obj_7_map_$comment (.'$tight#Array'.'$comment')
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Array'.'$comment']", path))
    return res

# object .'$tight#Array'.'$defs'
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Array'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Array'.'$defs'.''
        res = json_model_26(pval, lpath_7 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Array'.'$defs'.'']", lpath_7 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_7_map_$defs (.'$tight#Array'.'$defs')
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.'$defs'
    res = _jm_obj_8(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Array'.'$defs']", path))
    return res

# check _jm_obj_7_map_$id (.'$tight#Array'.'$id')
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Array'.'$id']", path))
    return res

# check _jm_obj_7_map_$schema (.'$tight#Array'.'$schema')
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Array'.'$schema']", path))
    return res

# check _jm_obj_7_map_additionalItems (.'$tight#Array'.additionalItems)
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.additionalItems
    res = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$tight#Array'.additionalItems]", path))
    return res

# check _jm_obj_7_map_default (.'$tight#Array'.default)
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#Array'.default]", path))
    return res

# object .'$tight#Array'.definitions
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Array'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Array'.definitions.''
        res = json_model_26(pval, lpath_8 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Array'.definitions.'']", lpath_8 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_7_map_definitions (.'$tight#Array'.definitions)
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.definitions
    res = _jm_obj_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Array'.definitions]", path))
    return res

# check _jm_obj_7_map_description (.'$tight#Array'.description)
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Array'.description]", path))
    return res

# check _jm_obj_7_map_examples (.'$tight#Array'.examples)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Array'.examples]", path))
    return res

# check _jm_obj_7_map_id (.'$tight#Array'.id)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Array'.id]", path))
    return res

# check _jm_obj_7_map_items (.'$tight#Array'.items)
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.items
    # .'$tight#Array'.items.'|'.0
    res = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$tight#Array'.items.'|'.0]", path))
    if not res:
        # .'$tight#Array'.items.'|'.1
        res = json_model_6(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$tight#Array'.items.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$tight#Array'.items.'|']", path))
    return res

# check _jm_obj_7_map_maxItems (.'$tight#Array'.maxItems)
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.maxItems
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$tight#Array'.maxItems]", path))
    return res

# check _jm_obj_7_map_minItems (.'$tight#Array'.minItems)
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.minItems
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$tight#Array'.minItems]", path))
    return res

# check _jm_obj_7_map_prefixItems (.'$tight#Array'.prefixItems)
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.prefixItems
    res = json_model_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [.'$tight#Array'.prefixItems]", path))
    return res

# check _jm_obj_7_map_title (.'$tight#Array'.title)
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Array'.title]", path))
    return res

# check _jm_obj_7_map_uniqueItems (.'$tight#Array'.uniqueItems)
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'.uniqueItems
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$tight#Array'.uniqueItems]", path))
    return res


# object .'$tight#Array'
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Array']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#Array'.type
            res = isinstance(pval, str) and pval == "array"
            if not res:
                rep is None or rep.append(("unexpected array [.'$tight#Array'.type]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Array'.type]", lpath_6 if path is not None else None))
                return False
        elif pfun := _jm_obj_7_map.get(prop):
            # handle 16 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_6 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#Array']", lpath_6 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Array']", lpath_6 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#Array']", path))
        return False
    return True

# check $tight#Array (.'$tight#Array')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Array'
    res = _jm_obj_7(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Array']", path))
    return res

# check $tight#schemaArray (.'$tight#schemaArray')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#schemaArray'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$tight#schemaArray'.0
            res = json_model_26(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$tight#schemaArray'.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#schemaArray']", path))
    return res

# check _jm_obj_10_map_$comment (.'$tight#Object'.'$comment')
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Object'.'$comment']", path))
    return res

# object .'$tight#Object'.'$defs'
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Object'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Object'.'$defs'.''
        res = json_model_26(pval, lpath_10 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Object'.'$defs'.'']", lpath_10 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_10_map_$defs (.'$tight#Object'.'$defs')
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.'$defs'
    res = _jm_obj_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Object'.'$defs']", path))
    return res

# check _jm_obj_10_map_$id (.'$tight#Object'.'$id')
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Object'.'$id']", path))
    return res

# check _jm_obj_10_map_$schema (.'$tight#Object'.'$schema')
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Object'.'$schema']", path))
    return res

# check _jm_obj_10_map_additionalProperties (.'$tight#Object'.additionalProperties)
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.additionalProperties
    res = json_model_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$tight#Object'.additionalProperties]", path))
    return res

# check _jm_obj_10_map_default (.'$tight#Object'.default)
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#Object'.default]", path))
    return res

# object .'$tight#Object'.definitions
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Object'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Object'.definitions.''
        res = json_model_26(pval, lpath_11 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Object'.definitions.'']", lpath_11 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_10_map_definitions (.'$tight#Object'.definitions)
def _jm_f_46(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.definitions
    res = _jm_obj_12(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Object'.definitions]", path))
    return res

# check _jm_obj_10_map_description (.'$tight#Object'.description)
def _jm_f_47(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Object'.description]", path))
    return res

# check _jm_obj_10_map_examples (.'$tight#Object'.examples)
def _jm_f_48(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Object'.examples]", path))
    return res

# check _jm_obj_10_map_id (.'$tight#Object'.id)
def _jm_f_49(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Object'.id]", path))
    return res

# object .'$tight#Object'.patternProperties
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Object'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        if is_valid_regex(prop, lpath_12 if path is not None else None, rep):
            # handle 1 key props
            # .'$tight#Object'.patternProperties.'$REGEX'
            res = json_model_26(pval, lpath_12 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$tight#Object'.patternProperties.'$REGEX']", lpath_12 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Object'.patternProperties]", lpath_12 if path is not None else None))
            return False
    return True

# check _jm_obj_10_map_patternProperties (.'$tight#Object'.patternProperties)
def _jm_f_50(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.patternProperties
    res = _jm_obj_13(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Object'.patternProperties]", path))
    return res

# object .'$tight#Object'.properties
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Object'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Object'.properties.''
        res = json_model_26(pval, lpath_13 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Object'.properties.'']", lpath_13 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_10_map_properties (.'$tight#Object'.properties)
def _jm_f_51(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.properties
    res = _jm_obj_14(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Object'.properties]", path))
    return res

# check _jm_obj_10_map_required (.'$tight#Object'.required)
def _jm_f_52(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.required
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$tight#Object'.required.0
            res = isinstance(arr_1_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#Object'.required.0]", arr_1_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Object'.required]", path))
    return res

# check _jm_obj_10_map_title (.'$tight#Object'.title)
def _jm_f_53(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Object'.title]", path))
    return res


# object .'$tight#Object'
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Object']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#Object'.type
            res = isinstance(pval, str) and pval == "object"
            if not res:
                rep is None or rep.append(("unexpected object [.'$tight#Object'.type]", lpath_9 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Object'.type]", lpath_9 if path is not None else None))
                return False
        elif pfun := _jm_obj_10_map.get(prop):
            # handle 14 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_9 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#Object']", lpath_9 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Object']", lpath_9 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#Object']", path))
        return False
    return True

# check $tight#Object (.'$tight#Object')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Object'
    res = _jm_obj_10(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Object']", path))
    return res

# check _jm_obj_15_map_$comment (.'$tight#Integer'.'$comment')
def _jm_f_54(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Integer'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Integer'.'$comment']", path))
    return res

# object .'$tight#Integer'.'$defs'
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Integer'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Integer'.'$defs'.''
        res = json_model_26(pval, lpath_15 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Integer'.'$defs'.'']", lpath_15 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_15_map_$defs (.'$tight#Integer'.'$defs')
def _jm_f_55(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Integer'.'$defs'
    res = _jm_obj_16(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Integer'.'$defs']", path))
    return res

# check _jm_obj_15_map_$id (.'$tight#Integer'.'$id')
def _jm_f_56(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Integer'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Integer'.'$id']", path))
    return res

# check _jm_obj_15_map_$schema (.'$tight#Integer'.'$schema')
def _jm_f_57(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Integer'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Integer'.'$schema']", path))
    return res

# check _jm_obj_15_map_default (.'$tight#Integer'.default)
def _jm_f_58(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Integer'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#Integer'.default]", path))
    return res

# object .'$tight#Integer'.definitions
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Integer'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Integer'.definitions.''
        res = json_model_26(pval, lpath_16 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Integer'.definitions.'']", lpath_16 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_15_map_definitions (.'$tight#Integer'.definitions)
def _jm_f_59(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Integer'.definitions
    res = _jm_obj_17(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Integer'.definitions]", path))
    return res

# check _jm_obj_15_map_description (.'$tight#Integer'.description)
def _jm_f_60(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Integer'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Integer'.description]", path))
    return res

# check _jm_obj_15_map_examples (.'$tight#Integer'.examples)
def _jm_f_61(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Integer'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Integer'.examples]", path))
    return res

# check _jm_obj_15_map_id (.'$tight#Integer'.id)
def _jm_f_62(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Integer'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Integer'.id]", path))
    return res

# check _jm_obj_15_map_maximum (.'$tight#Integer'.maximum)
def _jm_f_63(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Integer'.maximum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$tight#Integer'.maximum]", path))
    return res

# check _jm_obj_15_map_minimum (.'$tight#Integer'.minimum)
def _jm_f_64(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Integer'.minimum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$tight#Integer'.minimum]", path))
    return res

# check _jm_obj_15_map_title (.'$tight#Integer'.title)
def _jm_f_65(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Integer'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Integer'.title]", path))
    return res


# object .'$tight#Integer'
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Integer']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#Integer'.type
            res = isinstance(pval, str) and pval == "integer"
            if not res:
                rep is None or rep.append(("unexpected integer [.'$tight#Integer'.type]", lpath_14 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Integer'.type]", lpath_14 if path is not None else None))
                return False
        elif pfun := _jm_obj_15_map.get(prop):
            # handle 12 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_14 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#Integer']", lpath_14 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Integer']", lpath_14 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#Integer']", path))
        return False
    return True

# check $tight#Integer (.'$tight#Integer')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Integer'
    res = _jm_obj_15(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Integer']", path))
    return res

# check _jm_obj_18_map_$comment (.'$tight#Number'.'$comment')
def _jm_f_66(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Number'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Number'.'$comment']", path))
    return res

# object .'$tight#Number'.'$defs'
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Number'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Number'.'$defs'.''
        res = json_model_26(pval, lpath_18 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Number'.'$defs'.'']", lpath_18 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_18_map_$defs (.'$tight#Number'.'$defs')
def _jm_f_67(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Number'.'$defs'
    res = _jm_obj_19(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Number'.'$defs']", path))
    return res

# check _jm_obj_18_map_$id (.'$tight#Number'.'$id')
def _jm_f_68(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Number'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Number'.'$id']", path))
    return res

# check _jm_obj_18_map_$schema (.'$tight#Number'.'$schema')
def _jm_f_69(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Number'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Number'.'$schema']", path))
    return res

# check _jm_obj_18_map_default (.'$tight#Number'.default)
def _jm_f_70(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Number'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#Number'.default]", path))
    return res

# object .'$tight#Number'.definitions
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Number'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Number'.definitions.''
        res = json_model_26(pval, lpath_19 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Number'.definitions.'']", lpath_19 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_18_map_definitions (.'$tight#Number'.definitions)
def _jm_f_71(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Number'.definitions
    res = _jm_obj_20(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Number'.definitions]", path))
    return res

# check _jm_obj_18_map_description (.'$tight#Number'.description)
def _jm_f_72(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Number'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Number'.description]", path))
    return res

# check _jm_obj_18_map_examples (.'$tight#Number'.examples)
def _jm_f_73(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Number'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Number'.examples]", path))
    return res

# check _jm_obj_18_map_id (.'$tight#Number'.id)
def _jm_f_74(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Number'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Number'.id]", path))
    return res

# check _jm_obj_18_map_maximum (.'$tight#Number'.maximum)
def _jm_f_75(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Number'.maximum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$tight#Number'.maximum]", path))
    return res

# check _jm_obj_18_map_minimum (.'$tight#Number'.minimum)
def _jm_f_76(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Number'.minimum
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$tight#Number'.minimum]", path))
    return res

# check _jm_obj_18_map_title (.'$tight#Number'.title)
def _jm_f_77(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Number'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Number'.title]", path))
    return res


# object .'$tight#Number'
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Number']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#Number'.type
            res = isinstance(pval, str) and pval == "number"
            if not res:
                rep is None or rep.append(("unexpected number [.'$tight#Number'.type]", lpath_17 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Number'.type]", lpath_17 if path is not None else None))
                return False
        elif pfun := _jm_obj_18_map.get(prop):
            # handle 12 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_17 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#Number']", lpath_17 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Number']", lpath_17 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#Number']", path))
        return False
    return True

# check $tight#Number (.'$tight#Number')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Number'
    res = _jm_obj_18(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Number']", path))
    return res

# check _jm_obj_21_map_$comment (.'$tight#Bool'.'$comment')
def _jm_f_78(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Bool'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Bool'.'$comment']", path))
    return res

# object .'$tight#Bool'.'$defs'
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Bool'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Bool'.'$defs'.''
        res = json_model_26(pval, lpath_21 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Bool'.'$defs'.'']", lpath_21 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_21_map_$defs (.'$tight#Bool'.'$defs')
def _jm_f_79(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Bool'.'$defs'
    res = _jm_obj_22(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Bool'.'$defs']", path))
    return res

# check _jm_obj_21_map_$id (.'$tight#Bool'.'$id')
def _jm_f_80(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Bool'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Bool'.'$id']", path))
    return res

# check _jm_obj_21_map_$schema (.'$tight#Bool'.'$schema')
def _jm_f_81(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Bool'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Bool'.'$schema']", path))
    return res

# check _jm_obj_21_map_default (.'$tight#Bool'.default)
def _jm_f_82(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Bool'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#Bool'.default]", path))
    return res

# object .'$tight#Bool'.definitions
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Bool'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Bool'.definitions.''
        res = json_model_26(pval, lpath_22 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Bool'.definitions.'']", lpath_22 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_21_map_definitions (.'$tight#Bool'.definitions)
def _jm_f_83(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Bool'.definitions
    res = _jm_obj_23(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Bool'.definitions]", path))
    return res

# check _jm_obj_21_map_description (.'$tight#Bool'.description)
def _jm_f_84(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Bool'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Bool'.description]", path))
    return res

# check _jm_obj_21_map_examples (.'$tight#Bool'.examples)
def _jm_f_85(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Bool'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Bool'.examples]", path))
    return res

# check _jm_obj_21_map_id (.'$tight#Bool'.id)
def _jm_f_86(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Bool'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Bool'.id]", path))
    return res

# check _jm_obj_21_map_title (.'$tight#Bool'.title)
def _jm_f_87(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Bool'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Bool'.title]", path))
    return res


# object .'$tight#Bool'
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Bool']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#Bool'.type
            res = isinstance(pval, str) and pval == "boolean"
            if not res:
                rep is None or rep.append(("unexpected boolean [.'$tight#Bool'.type]", lpath_20 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Bool'.type]", lpath_20 if path is not None else None))
                return False
        elif pfun := _jm_obj_21_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_20 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#Bool']", lpath_20 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Bool']", lpath_20 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#Bool']", path))
        return False
    return True

# check $tight#Bool (.'$tight#Bool')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Bool'
    res = _jm_obj_21(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Bool']", path))
    return res

# check _jm_obj_24_map_$comment (.'$tight#Null'.'$comment')
def _jm_f_88(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Null'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Null'.'$comment']", path))
    return res

# object .'$tight#Null'.'$defs'
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Null'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Null'.'$defs'.''
        res = json_model_26(pval, lpath_24 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Null'.'$defs'.'']", lpath_24 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_24_map_$defs (.'$tight#Null'.'$defs')
def _jm_f_89(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Null'.'$defs'
    res = _jm_obj_25(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Null'.'$defs']", path))
    return res

# check _jm_obj_24_map_$id (.'$tight#Null'.'$id')
def _jm_f_90(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Null'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Null'.'$id']", path))
    return res

# check _jm_obj_24_map_$schema (.'$tight#Null'.'$schema')
def _jm_f_91(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Null'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Null'.'$schema']", path))
    return res

# check _jm_obj_24_map_default (.'$tight#Null'.default)
def _jm_f_92(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Null'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#Null'.default]", path))
    return res

# object .'$tight#Null'.definitions
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Null'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Null'.definitions.''
        res = json_model_26(pval, lpath_25 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Null'.definitions.'']", lpath_25 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_24_map_definitions (.'$tight#Null'.definitions)
def _jm_f_93(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Null'.definitions
    res = _jm_obj_26(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Null'.definitions]", path))
    return res

# check _jm_obj_24_map_description (.'$tight#Null'.description)
def _jm_f_94(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Null'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Null'.description]", path))
    return res

# check _jm_obj_24_map_examples (.'$tight#Null'.examples)
def _jm_f_95(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Null'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Null'.examples]", path))
    return res

# check _jm_obj_24_map_id (.'$tight#Null'.id)
def _jm_f_96(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Null'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Null'.id]", path))
    return res

# check _jm_obj_24_map_title (.'$tight#Null'.title)
def _jm_f_97(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Null'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Null'.title]", path))
    return res


# object .'$tight#Null'
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Null']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#Null'.type
            res = isinstance(pval, str) and pval == "null"
            if not res:
                rep is None or rep.append(("unexpected null [.'$tight#Null'.type]", lpath_23 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Null'.type]", lpath_23 if path is not None else None))
                return False
        elif pfun := _jm_obj_24_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_23 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#Null']", lpath_23 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Null']", lpath_23 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#Null']", path))
        return False
    return True

# check $tight#Null (.'$tight#Null')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Null'
    res = _jm_obj_24(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Null']", path))
    return res

# check _jm_obj_27_map_$comment (.'$tight#AllOf'.'$comment')
def _jm_f_98(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AllOf'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#AllOf'.'$comment']", path))
    return res

# object .'$tight#AllOf'.'$defs'
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#AllOf'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#AllOf'.'$defs'.''
        res = json_model_26(pval, lpath_27 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#AllOf'.'$defs'.'']", lpath_27 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_27_map_$defs (.'$tight#AllOf'.'$defs')
def _jm_f_99(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AllOf'.'$defs'
    res = _jm_obj_28(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#AllOf'.'$defs']", path))
    return res

# check _jm_obj_27_map_$id (.'$tight#AllOf'.'$id')
def _jm_f_100(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AllOf'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#AllOf'.'$id']", path))
    return res

# check _jm_obj_27_map_$schema (.'$tight#AllOf'.'$schema')
def _jm_f_101(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AllOf'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#AllOf'.'$schema']", path))
    return res

# check _jm_obj_27_map_default (.'$tight#AllOf'.default)
def _jm_f_102(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AllOf'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#AllOf'.default]", path))
    return res

# object .'$tight#AllOf'.definitions
def _jm_obj_29(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#AllOf'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#AllOf'.definitions.''
        res = json_model_26(pval, lpath_28 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#AllOf'.definitions.'']", lpath_28 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_27_map_definitions (.'$tight#AllOf'.definitions)
def _jm_f_103(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AllOf'.definitions
    res = _jm_obj_29(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#AllOf'.definitions]", path))
    return res

# check _jm_obj_27_map_description (.'$tight#AllOf'.description)
def _jm_f_104(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AllOf'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#AllOf'.description]", path))
    return res

# check _jm_obj_27_map_examples (.'$tight#AllOf'.examples)
def _jm_f_105(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AllOf'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#AllOf'.examples]", path))
    return res

# check _jm_obj_27_map_id (.'$tight#AllOf'.id)
def _jm_f_106(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AllOf'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#AllOf'.id]", path))
    return res

# check _jm_obj_27_map_title (.'$tight#AllOf'.title)
def _jm_f_107(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AllOf'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#AllOf'.title]", path))
    return res


# object .'$tight#AllOf'
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#AllOf']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        if prop == "allOf":
            # handle must allOf property
            must_count += 1
            # .'$tight#AllOf'.allOf
            res = json_model_6(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $schemaArray [.'$tight#AllOf'.allOf]", lpath_26 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#AllOf'.allOf]", lpath_26 if path is not None else None))
                return False
        elif pfun := _jm_obj_27_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_26 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#AllOf']", lpath_26 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#AllOf']", lpath_26 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "allOf" in val:
                rep is None or rep.append(("missing mandatory prop <allOf> [.'$tight#AllOf']", path))
        return False
    return True

# check $tight#AllOf (.'$tight#AllOf')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AllOf'
    res = _jm_obj_27(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#AllOf']", path))
    return res

# check _jm_obj_30_map_$comment (.'$tight#AnyOf'.'$comment')
def _jm_f_108(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AnyOf'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#AnyOf'.'$comment']", path))
    return res

# object .'$tight#AnyOf'.'$defs'
def _jm_obj_31(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#AnyOf'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#AnyOf'.'$defs'.''
        res = json_model_26(pval, lpath_30 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#AnyOf'.'$defs'.'']", lpath_30 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_30_map_$defs (.'$tight#AnyOf'.'$defs')
def _jm_f_109(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AnyOf'.'$defs'
    res = _jm_obj_31(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#AnyOf'.'$defs']", path))
    return res

# check _jm_obj_30_map_$id (.'$tight#AnyOf'.'$id')
def _jm_f_110(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AnyOf'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#AnyOf'.'$id']", path))
    return res

# check _jm_obj_30_map_$schema (.'$tight#AnyOf'.'$schema')
def _jm_f_111(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AnyOf'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#AnyOf'.'$schema']", path))
    return res

# check _jm_obj_30_map_default (.'$tight#AnyOf'.default)
def _jm_f_112(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AnyOf'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#AnyOf'.default]", path))
    return res

# object .'$tight#AnyOf'.definitions
def _jm_obj_32(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#AnyOf'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#AnyOf'.definitions.''
        res = json_model_26(pval, lpath_31 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#AnyOf'.definitions.'']", lpath_31 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_30_map_definitions (.'$tight#AnyOf'.definitions)
def _jm_f_113(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AnyOf'.definitions
    res = _jm_obj_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#AnyOf'.definitions]", path))
    return res

# check _jm_obj_30_map_description (.'$tight#AnyOf'.description)
def _jm_f_114(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AnyOf'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#AnyOf'.description]", path))
    return res

# check _jm_obj_30_map_examples (.'$tight#AnyOf'.examples)
def _jm_f_115(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AnyOf'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#AnyOf'.examples]", path))
    return res

# check _jm_obj_30_map_id (.'$tight#AnyOf'.id)
def _jm_f_116(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AnyOf'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#AnyOf'.id]", path))
    return res

# check _jm_obj_30_map_title (.'$tight#AnyOf'.title)
def _jm_f_117(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AnyOf'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#AnyOf'.title]", path))
    return res


# object .'$tight#AnyOf'
def _jm_obj_30(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#AnyOf']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        if prop == "anyOf":
            # handle must anyOf property
            must_count += 1
            # .'$tight#AnyOf'.anyOf
            res = json_model_6(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $schemaArray [.'$tight#AnyOf'.anyOf]", lpath_29 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#AnyOf'.anyOf]", lpath_29 if path is not None else None))
                return False
        elif pfun := _jm_obj_30_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_29 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#AnyOf']", lpath_29 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#AnyOf']", lpath_29 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "anyOf" in val:
                rep is None or rep.append(("missing mandatory prop <anyOf> [.'$tight#AnyOf']", path))
        return False
    return True

# check $tight#AnyOf (.'$tight#AnyOf')
def json_model_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#AnyOf'
    res = _jm_obj_30(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#AnyOf']", path))
    return res

# check _jm_obj_33_map_$comment (.'$tight#OneOf'.'$comment')
def _jm_f_118(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#OneOf'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#OneOf'.'$comment']", path))
    return res

# object .'$tight#OneOf'.'$defs'
def _jm_obj_34(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#OneOf'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#OneOf'.'$defs'.''
        res = json_model_26(pval, lpath_33 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#OneOf'.'$defs'.'']", lpath_33 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_33_map_$defs (.'$tight#OneOf'.'$defs')
def _jm_f_119(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#OneOf'.'$defs'
    res = _jm_obj_34(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#OneOf'.'$defs']", path))
    return res

# check _jm_obj_33_map_$id (.'$tight#OneOf'.'$id')
def _jm_f_120(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#OneOf'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#OneOf'.'$id']", path))
    return res

# check _jm_obj_33_map_$schema (.'$tight#OneOf'.'$schema')
def _jm_f_121(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#OneOf'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#OneOf'.'$schema']", path))
    return res

# check _jm_obj_33_map_default (.'$tight#OneOf'.default)
def _jm_f_122(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#OneOf'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#OneOf'.default]", path))
    return res

# object .'$tight#OneOf'.definitions
def _jm_obj_35(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#OneOf'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#OneOf'.definitions.''
        res = json_model_26(pval, lpath_34 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#OneOf'.definitions.'']", lpath_34 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_33_map_definitions (.'$tight#OneOf'.definitions)
def _jm_f_123(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#OneOf'.definitions
    res = _jm_obj_35(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#OneOf'.definitions]", path))
    return res

# check _jm_obj_33_map_description (.'$tight#OneOf'.description)
def _jm_f_124(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#OneOf'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#OneOf'.description]", path))
    return res

# check _jm_obj_33_map_examples (.'$tight#OneOf'.examples)
def _jm_f_125(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#OneOf'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#OneOf'.examples]", path))
    return res

# check _jm_obj_33_map_id (.'$tight#OneOf'.id)
def _jm_f_126(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#OneOf'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#OneOf'.id]", path))
    return res

# check _jm_obj_33_map_title (.'$tight#OneOf'.title)
def _jm_f_127(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#OneOf'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#OneOf'.title]", path))
    return res


# object .'$tight#OneOf'
def _jm_obj_33(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#OneOf']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        if prop == "oneOf":
            # handle must oneOf property
            must_count += 1
            # .'$tight#OneOf'.oneOf
            res = json_model_6(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $schemaArray [.'$tight#OneOf'.oneOf]", lpath_32 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#OneOf'.oneOf]", lpath_32 if path is not None else None))
                return False
        elif pfun := _jm_obj_33_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_32 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#OneOf']", lpath_32 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#OneOf']", lpath_32 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "oneOf" in val:
                rep is None or rep.append(("missing mandatory prop <oneOf> [.'$tight#OneOf']", path))
        return False
    return True

# check $tight#OneOf (.'$tight#OneOf')
def json_model_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#OneOf'
    res = _jm_obj_33(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#OneOf']", path))
    return res

# check _jm_obj_36_map_$comment (.'$tight#Enum'.'$comment')
def _jm_f_128(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Enum'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Enum'.'$comment']", path))
    return res

# object .'$tight#Enum'.'$defs'
def _jm_obj_37(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Enum'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_36: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Enum'.'$defs'.''
        res = json_model_26(pval, lpath_36 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Enum'.'$defs'.'']", lpath_36 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_36_map_$defs (.'$tight#Enum'.'$defs')
def _jm_f_129(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Enum'.'$defs'
    res = _jm_obj_37(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Enum'.'$defs']", path))
    return res

# check _jm_obj_36_map_$id (.'$tight#Enum'.'$id')
def _jm_f_130(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Enum'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Enum'.'$id']", path))
    return res

# check _jm_obj_36_map_$schema (.'$tight#Enum'.'$schema')
def _jm_f_131(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Enum'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Enum'.'$schema']", path))
    return res

# check _jm_obj_36_map_default (.'$tight#Enum'.default)
def _jm_f_132(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Enum'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#Enum'.default]", path))
    return res

# object .'$tight#Enum'.definitions
def _jm_obj_38(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Enum'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_37: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Enum'.definitions.''
        res = json_model_26(pval, lpath_37 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Enum'.definitions.'']", lpath_37 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_36_map_definitions (.'$tight#Enum'.definitions)
def _jm_f_133(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Enum'.definitions
    res = _jm_obj_38(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Enum'.definitions]", path))
    return res

# check _jm_obj_36_map_description (.'$tight#Enum'.description)
def _jm_f_134(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Enum'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Enum'.description]", path))
    return res

# check _jm_obj_36_map_examples (.'$tight#Enum'.examples)
def _jm_f_135(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Enum'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Enum'.examples]", path))
    return res

# check _jm_obj_36_map_id (.'$tight#Enum'.id)
def _jm_f_136(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Enum'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Enum'.id]", path))
    return res

# check _jm_obj_36_map_title (.'$tight#Enum'.title)
def _jm_f_137(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Enum'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Enum'.title]", path))
    return res


# object .'$tight#Enum'
def _jm_obj_36(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Enum']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        if prop == "enum":
            # handle must enum property
            must_count += 1
            # .'$tight#Enum'.enum
            res = json_model_5(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $enum [.'$tight#Enum'.enum]", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Enum'.enum]", lpath_35 if path is not None else None))
                return False
        elif pfun := _jm_obj_36_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_35 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#Enum']", lpath_35 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Enum']", lpath_35 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "enum" in val:
                rep is None or rep.append(("missing mandatory prop <enum> [.'$tight#Enum']", path))
        return False
    return True

# check $tight#Enum (.'$tight#Enum')
def json_model_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Enum'
    res = _jm_obj_36(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Enum']", path))
    return res

# check $tight#enum (.'$tight#enum')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#enum'
    res = isinstance(val, list)
    if not res:
        rep is None or rep.append(("unexpected type [.'$tight#enum'.'|']", path))
    if res:
        # .'$tight#enum'.'|'.0
        for arr_4_idx, arr_4_item in enumerate(val):
            arr_4_lpath: Path = (path + [ arr_4_idx ]) if path is not None else None
            # .'$tight#enum'.'|'.0.0
            res = isinstance(arr_4_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#enum'.'|'.0.0]", arr_4_lpath if path is not None else None))
            if not res:
                break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$tight#enum'.'|'.0]", path))
        if not res:
            # .'$tight#enum'.'|'.1
            for arr_3_idx, arr_3_item in enumerate(val):
                arr_3_lpath: Path = (path + [ arr_3_idx ]) if path is not None else None
                # .'$tight#enum'.'|'.1.0
                res = isinstance(arr_3_item, int) and not isinstance(arr_3_item, bool)
                if not res:
                    rep is None or rep.append(("not a -1 strict int [.'$tight#enum'.'|'.1.0]", arr_3_lpath if path is not None else None))
                if not res:
                    break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#enum'.'|'.1]", path))
            if not res:
                # .'$tight#enum'.'|'.2
                for arr_2_idx, arr_2_item in enumerate(val):
                    arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
                    # .'$tight#enum'.'|'.2.0
                    res = isinstance(arr_2_item, bool)
                    if not res:
                        rep is None or rep.append(("not a bool [.'$tight#enum'.'|'.2.0]", arr_2_lpath if path is not None else None))
                    if not res:
                        break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$tight#enum'.'|'.2]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$tight#enum'.'|']", path))
    return res

# check _jm_obj_39_map_$comment (.'$tight#Const'.'$comment')
def _jm_f_138(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Const'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Const'.'$comment']", path))
    return res

# object .'$tight#Const'.'$defs'
def _jm_obj_40(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Const'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_39: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Const'.'$defs'.''
        res = json_model_26(pval, lpath_39 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Const'.'$defs'.'']", lpath_39 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_39_map_$defs (.'$tight#Const'.'$defs')
def _jm_f_139(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Const'.'$defs'
    res = _jm_obj_40(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Const'.'$defs']", path))
    return res

# check _jm_obj_39_map_$id (.'$tight#Const'.'$id')
def _jm_f_140(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Const'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Const'.'$id']", path))
    return res

# check _jm_obj_39_map_$schema (.'$tight#Const'.'$schema')
def _jm_f_141(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Const'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Const'.'$schema']", path))
    return res

# check _jm_obj_39_map_default (.'$tight#Const'.default)
def _jm_f_142(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Const'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#Const'.default]", path))
    return res

# object .'$tight#Const'.definitions
def _jm_obj_41(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Const'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_40: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Const'.definitions.''
        res = json_model_26(pval, lpath_40 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Const'.definitions.'']", lpath_40 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_39_map_definitions (.'$tight#Const'.definitions)
def _jm_f_143(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Const'.definitions
    res = _jm_obj_41(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Const'.definitions]", path))
    return res

# check _jm_obj_39_map_description (.'$tight#Const'.description)
def _jm_f_144(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Const'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Const'.description]", path))
    return res

# check _jm_obj_39_map_examples (.'$tight#Const'.examples)
def _jm_f_145(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Const'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Const'.examples]", path))
    return res

# check _jm_obj_39_map_id (.'$tight#Const'.id)
def _jm_f_146(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Const'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Const'.id]", path))
    return res

# check _jm_obj_39_map_title (.'$tight#Const'.title)
def _jm_f_147(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Const'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Const'.title]", path))
    return res


# object .'$tight#Const'
def _jm_obj_39(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Const']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_38: Path = (path + [ prop ]) if path is not None else None
        if prop == "const":
            # handle must const property
            must_count += 1
            # .'$tight#Const'.const
            res = json_model_4(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $const [.'$tight#Const'.const]", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Const'.const]", lpath_38 if path is not None else None))
                return False
        elif pfun := _jm_obj_39_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_38 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#Const']", lpath_38 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Const']", lpath_38 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "const" in val:
                rep is None or rep.append(("missing mandatory prop <const> [.'$tight#Const']", path))
        return False
    return True

# check $tight#Const (.'$tight#Const')
def json_model_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Const'
    res = _jm_obj_39(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Const']", path))
    return res

# check $tight#const (.'$tight#const')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#const'
    # .'$tight#const'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$tight#const'.'|'.0]", path))
    if not res:
        # .'$tight#const'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$tight#const'.'|'.1]", path))
        if not res:
            # .'$tight#const'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$tight#const'.'|'.2]", path))
            if not res:
                # .'$tight#const'.'|'.3
                res = isinstance(val, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [.'$tight#const'.'|'.3]", path))
                if not res:
                    # .'$tight#const'.'|'.4
                    res = isinstance(val, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$tight#const'.'|'.4]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$tight#const'.'|']", path))
    return res

# check _jm_obj_42_map_$comment (.'$tight#Ref'.'$comment')
def _jm_f_148(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Ref'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Ref'.'$comment']", path))
    return res

# object .'$tight#Ref'.'$defs'
def _jm_obj_43(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Ref'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_42: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Ref'.'$defs'.''
        res = json_model_26(pval, lpath_42 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Ref'.'$defs'.'']", lpath_42 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_42_map_$defs (.'$tight#Ref'.'$defs')
def _jm_f_149(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Ref'.'$defs'
    res = _jm_obj_43(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Ref'.'$defs']", path))
    return res

# check _jm_obj_42_map_$id (.'$tight#Ref'.'$id')
def _jm_f_150(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Ref'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Ref'.'$id']", path))
    return res

# check _jm_obj_42_map_$schema (.'$tight#Ref'.'$schema')
def _jm_f_151(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Ref'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Ref'.'$schema']", path))
    return res

# check _jm_obj_42_map_default (.'$tight#Ref'.default)
def _jm_f_152(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Ref'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#Ref'.default]", path))
    return res

# object .'$tight#Ref'.definitions
def _jm_obj_44(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Ref'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_43: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#Ref'.definitions.''
        res = json_model_26(pval, lpath_43 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#Ref'.definitions.'']", lpath_43 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_42_map_definitions (.'$tight#Ref'.definitions)
def _jm_f_153(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Ref'.definitions
    res = _jm_obj_44(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Ref'.definitions]", path))
    return res

# check _jm_obj_42_map_description (.'$tight#Ref'.description)
def _jm_f_154(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Ref'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Ref'.description]", path))
    return res

# check _jm_obj_42_map_examples (.'$tight#Ref'.examples)
def _jm_f_155(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Ref'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#Ref'.examples]", path))
    return res

# check _jm_obj_42_map_id (.'$tight#Ref'.id)
def _jm_f_156(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Ref'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Ref'.id]", path))
    return res

# check _jm_obj_42_map_title (.'$tight#Ref'.title)
def _jm_f_157(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Ref'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#Ref'.title]", path))
    return res


# object .'$tight#Ref'
def _jm_obj_42(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#Ref']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_41: Path = (path + [ prop ]) if path is not None else None
        if prop == "$ref":
            # handle must $ref property
            must_count += 1
            # .'$tight#Ref'.'$ref'
            res = is_valid_url(pval, lpath_41 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$tight#Ref'.'$ref']", lpath_41 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#Ref'.'$ref']", lpath_41 if path is not None else None))
                return False
        elif pfun := _jm_obj_42_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_41 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#Ref']", lpath_41 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#Ref']", lpath_41 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "$ref" in val:
                rep is None or rep.append(("missing mandatory prop <$ref> [.'$tight#Ref']", path))
        return False
    return True

# check $tight#Ref (.'$tight#Ref')
def json_model_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Ref'
    res = _jm_obj_42(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#Ref']", path))
    return res

# check $tight#Schema (.'$tight#Schema')
def json_model_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#Schema'
    # .'$tight#Schema'.'|'.0
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$tight#Schema'.'|'.0]", path))
    if not res:
        # .'$tight#Schema'.'|'.1
        res = json_model_25(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ObjectSchema [.'$tight#Schema'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$tight#Schema'.'|']", path))
    return res

# check _jm_obj_45_map_$comment (.'$tight#EnumString'.'$comment')
def _jm_f_158(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumString'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumString'.'$comment']", path))
    return res

# object .'$tight#EnumString'.'$defs'
def _jm_obj_46(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumString'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_45: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#EnumString'.'$defs'.''
        res = json_model_26(pval, lpath_45 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#EnumString'.'$defs'.'']", lpath_45 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_45_map_$defs (.'$tight#EnumString'.'$defs')
def _jm_f_159(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumString'.'$defs'
    res = _jm_obj_46(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#EnumString'.'$defs']", path))
    return res

# check _jm_obj_45_map_$id (.'$tight#EnumString'.'$id')
def _jm_f_160(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumString'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumString'.'$id']", path))
    return res

# check _jm_obj_45_map_$schema (.'$tight#EnumString'.'$schema')
def _jm_f_161(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumString'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumString'.'$schema']", path))
    return res

# check _jm_obj_45_map_default (.'$tight#EnumString'.default)
def _jm_f_162(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumString'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#EnumString'.default]", path))
    return res

# object .'$tight#EnumString'.definitions
def _jm_obj_47(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumString'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_46: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#EnumString'.definitions.''
        res = json_model_26(pval, lpath_46 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#EnumString'.definitions.'']", lpath_46 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_45_map_definitions (.'$tight#EnumString'.definitions)
def _jm_f_163(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumString'.definitions
    res = _jm_obj_47(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#EnumString'.definitions]", path))
    return res

# check _jm_obj_45_map_description (.'$tight#EnumString'.description)
def _jm_f_164(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumString'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumString'.description]", path))
    return res

# check _jm_obj_45_map_examples (.'$tight#EnumString'.examples)
def _jm_f_165(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumString'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#EnumString'.examples]", path))
    return res

# check _jm_obj_45_map_id (.'$tight#EnumString'.id)
def _jm_f_166(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumString'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumString'.id]", path))
    return res

# check _jm_obj_45_map_title (.'$tight#EnumString'.title)
def _jm_f_167(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumString'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumString'.title]", path))
    return res


# object .'$tight#EnumString'
def _jm_obj_45(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumString']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_44: Path = (path + [ prop ]) if path is not None else None
        if prop == "enum":
            # handle must enum property
            must_count += 1
            # .'$tight#EnumString'.enum
            res = isinstance(pval, list)
            if res:
                for arr_5_idx, arr_5_item in enumerate(pval):
                    arr_5_lpath: Path = ((lpath_44 if path is not None else None) + [ arr_5_idx ]) if (lpath_44 if path is not None else None) is not None else None
                    # .'$tight#EnumString'.enum.0
                    res = isinstance(arr_5_item, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$tight#EnumString'.enum.0]", arr_5_lpath if (lpath_44 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#EnumString'.enum]", lpath_44 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#EnumString'.enum]", lpath_44 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#EnumString'.type
            res = isinstance(pval, str) and pval == "string"
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#EnumString'.type]", lpath_44 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#EnumString'.type]", lpath_44 if path is not None else None))
                return False
        elif pfun := _jm_obj_45_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_44 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumString']", lpath_44 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#EnumString']", lpath_44 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "enum" in val:
                rep is None or rep.append(("missing mandatory prop <enum> [.'$tight#EnumString']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#EnumString']", path))
        return False
    return True

# check $tight#EnumString (.'$tight#EnumString')
def json_model_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumString'
    res = _jm_obj_45(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#EnumString']", path))
    return res

# check _jm_obj_48_map_$comment (.'$tight#EnumNum'.'$comment')
def _jm_f_168(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumNum'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumNum'.'$comment']", path))
    return res

# object .'$tight#EnumNum'.'$defs'
def _jm_obj_49(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumNum'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_48: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#EnumNum'.'$defs'.''
        res = json_model_26(pval, lpath_48 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#EnumNum'.'$defs'.'']", lpath_48 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_48_map_$defs (.'$tight#EnumNum'.'$defs')
def _jm_f_169(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumNum'.'$defs'
    res = _jm_obj_49(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#EnumNum'.'$defs']", path))
    return res

# check _jm_obj_48_map_$id (.'$tight#EnumNum'.'$id')
def _jm_f_170(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumNum'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumNum'.'$id']", path))
    return res

# check _jm_obj_48_map_$schema (.'$tight#EnumNum'.'$schema')
def _jm_f_171(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumNum'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumNum'.'$schema']", path))
    return res

# check _jm_obj_48_map_default (.'$tight#EnumNum'.default)
def _jm_f_172(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumNum'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#EnumNum'.default]", path))
    return res

# object .'$tight#EnumNum'.definitions
def _jm_obj_50(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumNum'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_49: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#EnumNum'.definitions.''
        res = json_model_26(pval, lpath_49 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#EnumNum'.definitions.'']", lpath_49 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_48_map_definitions (.'$tight#EnumNum'.definitions)
def _jm_f_173(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumNum'.definitions
    res = _jm_obj_50(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#EnumNum'.definitions]", path))
    return res

# check _jm_obj_48_map_description (.'$tight#EnumNum'.description)
def _jm_f_174(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumNum'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumNum'.description]", path))
    return res

# check _jm_obj_48_map_examples (.'$tight#EnumNum'.examples)
def _jm_f_175(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumNum'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#EnumNum'.examples]", path))
    return res

# check _jm_obj_48_map_id (.'$tight#EnumNum'.id)
def _jm_f_176(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumNum'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumNum'.id]", path))
    return res

# check _jm_obj_48_map_title (.'$tight#EnumNum'.title)
def _jm_f_177(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumNum'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumNum'.title]", path))
    return res


# object .'$tight#EnumNum'
def _jm_obj_48(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumNum']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_47: Path = (path + [ prop ]) if path is not None else None
        if prop == "enum":
            # handle must enum property
            must_count += 1
            # .'$tight#EnumNum'.enum
            res = isinstance(pval, list)
            if res:
                for arr_6_idx, arr_6_item in enumerate(pval):
                    arr_6_lpath: Path = ((lpath_47 if path is not None else None) + [ arr_6_idx ]) if (lpath_47 if path is not None else None) is not None else None
                    # .'$tight#EnumNum'.enum.0
                    res = isinstance(arr_6_item, float)
                    if not res:
                        rep is None or rep.append(("not a -1.0 strict float [.'$tight#EnumNum'.enum.0]", arr_6_lpath if (lpath_47 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#EnumNum'.enum]", lpath_47 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#EnumNum'.enum]", lpath_47 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#EnumNum'.type
            res = isinstance(pval, str) and pval == "number"
            if not res:
                rep is None or rep.append(("unexpected number [.'$tight#EnumNum'.type]", lpath_47 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#EnumNum'.type]", lpath_47 if path is not None else None))
                return False
        elif pfun := _jm_obj_48_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_47 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumNum']", lpath_47 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#EnumNum']", lpath_47 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "enum" in val:
                rep is None or rep.append(("missing mandatory prop <enum> [.'$tight#EnumNum']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#EnumNum']", path))
        return False
    return True

# check $tight#EnumNum (.'$tight#EnumNum')
def json_model_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumNum'
    res = _jm_obj_48(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#EnumNum']", path))
    return res

# check _jm_obj_51_map_$comment (.'$tight#EnumInt'.'$comment')
def _jm_f_178(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumInt'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumInt'.'$comment']", path))
    return res

# object .'$tight#EnumInt'.'$defs'
def _jm_obj_52(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumInt'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_51: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#EnumInt'.'$defs'.''
        res = json_model_26(pval, lpath_51 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#EnumInt'.'$defs'.'']", lpath_51 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_51_map_$defs (.'$tight#EnumInt'.'$defs')
def _jm_f_179(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumInt'.'$defs'
    res = _jm_obj_52(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#EnumInt'.'$defs']", path))
    return res

# check _jm_obj_51_map_$id (.'$tight#EnumInt'.'$id')
def _jm_f_180(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumInt'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumInt'.'$id']", path))
    return res

# check _jm_obj_51_map_$schema (.'$tight#EnumInt'.'$schema')
def _jm_f_181(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumInt'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumInt'.'$schema']", path))
    return res

# check _jm_obj_51_map_default (.'$tight#EnumInt'.default)
def _jm_f_182(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumInt'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#EnumInt'.default]", path))
    return res

# object .'$tight#EnumInt'.definitions
def _jm_obj_53(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumInt'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_52: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#EnumInt'.definitions.''
        res = json_model_26(pval, lpath_52 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#EnumInt'.definitions.'']", lpath_52 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_51_map_definitions (.'$tight#EnumInt'.definitions)
def _jm_f_183(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumInt'.definitions
    res = _jm_obj_53(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#EnumInt'.definitions]", path))
    return res

# check _jm_obj_51_map_description (.'$tight#EnumInt'.description)
def _jm_f_184(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumInt'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumInt'.description]", path))
    return res

# check _jm_obj_51_map_examples (.'$tight#EnumInt'.examples)
def _jm_f_185(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumInt'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#EnumInt'.examples]", path))
    return res

# check _jm_obj_51_map_id (.'$tight#EnumInt'.id)
def _jm_f_186(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumInt'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumInt'.id]", path))
    return res

# check _jm_obj_51_map_title (.'$tight#EnumInt'.title)
def _jm_f_187(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumInt'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#EnumInt'.title]", path))
    return res


# object .'$tight#EnumInt'
def _jm_obj_51(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#EnumInt']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_50: Path = (path + [ prop ]) if path is not None else None
        if prop == "enum":
            # handle must enum property
            must_count += 1
            # .'$tight#EnumInt'.enum
            res = isinstance(pval, list)
            if res:
                for arr_7_idx, arr_7_item in enumerate(pval):
                    arr_7_lpath: Path = ((lpath_50 if path is not None else None) + [ arr_7_idx ]) if (lpath_50 if path is not None else None) is not None else None
                    # .'$tight#EnumInt'.enum.0
                    res = isinstance(arr_7_item, int) and not isinstance(arr_7_item, bool)
                    if not res:
                        rep is None or rep.append(("not a -1 strict int [.'$tight#EnumInt'.enum.0]", arr_7_lpath if (lpath_50 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$tight#EnumInt'.enum]", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#EnumInt'.enum]", lpath_50 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#EnumInt'.type
            res = isinstance(pval, str) and pval == "integer"
            if not res:
                rep is None or rep.append(("unexpected integer [.'$tight#EnumInt'.type]", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#EnumInt'.type]", lpath_50 if path is not None else None))
                return False
        elif pfun := _jm_obj_51_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_50 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#EnumInt']", lpath_50 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#EnumInt']", lpath_50 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "enum" in val:
                rep is None or rep.append(("missing mandatory prop <enum> [.'$tight#EnumInt']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#EnumInt']", path))
        return False
    return True

# check $tight#EnumInt (.'$tight#EnumInt')
def json_model_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#EnumInt'
    res = _jm_obj_51(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#EnumInt']", path))
    return res

# check _jm_obj_54_map_$comment (.'$tight#ConstString'.'$comment')
def _jm_f_188(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstString'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstString'.'$comment']", path))
    return res

# object .'$tight#ConstString'.'$defs'
def _jm_obj_55(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstString'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_54: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstString'.'$defs'.''
        res = json_model_26(pval, lpath_54 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstString'.'$defs'.'']", lpath_54 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_54_map_$defs (.'$tight#ConstString'.'$defs')
def _jm_f_189(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstString'.'$defs'
    res = _jm_obj_55(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#ConstString'.'$defs']", path))
    return res

# check _jm_obj_54_map_$id (.'$tight#ConstString'.'$id')
def _jm_f_190(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstString'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstString'.'$id']", path))
    return res

# check _jm_obj_54_map_$schema (.'$tight#ConstString'.'$schema')
def _jm_f_191(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstString'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstString'.'$schema']", path))
    return res

# check _jm_obj_54_map_default (.'$tight#ConstString'.default)
def _jm_f_192(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstString'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#ConstString'.default]", path))
    return res

# object .'$tight#ConstString'.definitions
def _jm_obj_56(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstString'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_55: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstString'.definitions.''
        res = json_model_26(pval, lpath_55 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstString'.definitions.'']", lpath_55 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_54_map_definitions (.'$tight#ConstString'.definitions)
def _jm_f_193(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstString'.definitions
    res = _jm_obj_56(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#ConstString'.definitions]", path))
    return res

# check _jm_obj_54_map_description (.'$tight#ConstString'.description)
def _jm_f_194(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstString'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstString'.description]", path))
    return res

# check _jm_obj_54_map_examples (.'$tight#ConstString'.examples)
def _jm_f_195(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstString'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#ConstString'.examples]", path))
    return res

# check _jm_obj_54_map_id (.'$tight#ConstString'.id)
def _jm_f_196(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstString'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstString'.id]", path))
    return res

# check _jm_obj_54_map_title (.'$tight#ConstString'.title)
def _jm_f_197(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstString'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstString'.title]", path))
    return res


# object .'$tight#ConstString'
def _jm_obj_54(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstString']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_53: Path = (path + [ prop ]) if path is not None else None
        if prop == "const":
            # handle must const property
            must_count += 1
            # .'$tight#ConstString'.const
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstString'.const]", lpath_53 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstString'.const]", lpath_53 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#ConstString'.type
            res = isinstance(pval, str) and pval == "string"
            if not res:
                rep is None or rep.append(("unexpected string [.'$tight#ConstString'.type]", lpath_53 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstString'.type]", lpath_53 if path is not None else None))
                return False
        elif pfun := _jm_obj_54_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_53 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstString']", lpath_53 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#ConstString']", lpath_53 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "const" in val:
                rep is None or rep.append(("missing mandatory prop <const> [.'$tight#ConstString']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#ConstString']", path))
        return False
    return True

# check $tight#ConstString (.'$tight#ConstString')
def json_model_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstString'
    res = _jm_obj_54(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#ConstString']", path))
    return res

# check _jm_obj_57_map_$comment (.'$tight#ConstNum'.'$comment')
def _jm_f_198(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstNum'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstNum'.'$comment']", path))
    return res

# object .'$tight#ConstNum'.'$defs'
def _jm_obj_58(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstNum'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_57: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstNum'.'$defs'.''
        res = json_model_26(pval, lpath_57 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstNum'.'$defs'.'']", lpath_57 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_57_map_$defs (.'$tight#ConstNum'.'$defs')
def _jm_f_199(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstNum'.'$defs'
    res = _jm_obj_58(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#ConstNum'.'$defs']", path))
    return res

# check _jm_obj_57_map_$id (.'$tight#ConstNum'.'$id')
def _jm_f_200(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstNum'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstNum'.'$id']", path))
    return res

# check _jm_obj_57_map_$schema (.'$tight#ConstNum'.'$schema')
def _jm_f_201(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstNum'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstNum'.'$schema']", path))
    return res

# check _jm_obj_57_map_default (.'$tight#ConstNum'.default)
def _jm_f_202(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstNum'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#ConstNum'.default]", path))
    return res

# object .'$tight#ConstNum'.definitions
def _jm_obj_59(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstNum'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_58: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstNum'.definitions.''
        res = json_model_26(pval, lpath_58 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstNum'.definitions.'']", lpath_58 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_57_map_definitions (.'$tight#ConstNum'.definitions)
def _jm_f_203(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstNum'.definitions
    res = _jm_obj_59(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#ConstNum'.definitions]", path))
    return res

# check _jm_obj_57_map_description (.'$tight#ConstNum'.description)
def _jm_f_204(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstNum'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstNum'.description]", path))
    return res

# check _jm_obj_57_map_examples (.'$tight#ConstNum'.examples)
def _jm_f_205(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstNum'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#ConstNum'.examples]", path))
    return res

# check _jm_obj_57_map_id (.'$tight#ConstNum'.id)
def _jm_f_206(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstNum'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstNum'.id]", path))
    return res

# check _jm_obj_57_map_title (.'$tight#ConstNum'.title)
def _jm_f_207(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstNum'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstNum'.title]", path))
    return res


# object .'$tight#ConstNum'
def _jm_obj_57(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstNum']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_56: Path = (path + [ prop ]) if path is not None else None
        if prop == "const":
            # handle must const property
            must_count += 1
            # .'$tight#ConstNum'.const
            res = isinstance(pval, float)
            if not res:
                rep is None or rep.append(("not a -1.0 strict float [.'$tight#ConstNum'.const]", lpath_56 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstNum'.const]", lpath_56 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#ConstNum'.type
            res = isinstance(pval, str) and pval == "number"
            if not res:
                rep is None or rep.append(("unexpected number [.'$tight#ConstNum'.type]", lpath_56 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstNum'.type]", lpath_56 if path is not None else None))
                return False
        elif pfun := _jm_obj_57_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_56 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstNum']", lpath_56 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#ConstNum']", lpath_56 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "const" in val:
                rep is None or rep.append(("missing mandatory prop <const> [.'$tight#ConstNum']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#ConstNum']", path))
        return False
    return True

# check $tight#ConstNum (.'$tight#ConstNum')
def json_model_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstNum'
    res = _jm_obj_57(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#ConstNum']", path))
    return res

# check _jm_obj_60_map_$comment (.'$tight#ConstInt'.'$comment')
def _jm_f_208(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstInt'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstInt'.'$comment']", path))
    return res

# object .'$tight#ConstInt'.'$defs'
def _jm_obj_61(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstInt'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_60: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstInt'.'$defs'.''
        res = json_model_26(pval, lpath_60 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstInt'.'$defs'.'']", lpath_60 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_60_map_$defs (.'$tight#ConstInt'.'$defs')
def _jm_f_209(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstInt'.'$defs'
    res = _jm_obj_61(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#ConstInt'.'$defs']", path))
    return res

# check _jm_obj_60_map_$id (.'$tight#ConstInt'.'$id')
def _jm_f_210(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstInt'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstInt'.'$id']", path))
    return res

# check _jm_obj_60_map_$schema (.'$tight#ConstInt'.'$schema')
def _jm_f_211(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstInt'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstInt'.'$schema']", path))
    return res

# check _jm_obj_60_map_default (.'$tight#ConstInt'.default)
def _jm_f_212(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstInt'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#ConstInt'.default]", path))
    return res

# object .'$tight#ConstInt'.definitions
def _jm_obj_62(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstInt'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_61: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstInt'.definitions.''
        res = json_model_26(pval, lpath_61 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstInt'.definitions.'']", lpath_61 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_60_map_definitions (.'$tight#ConstInt'.definitions)
def _jm_f_213(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstInt'.definitions
    res = _jm_obj_62(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#ConstInt'.definitions]", path))
    return res

# check _jm_obj_60_map_description (.'$tight#ConstInt'.description)
def _jm_f_214(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstInt'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstInt'.description]", path))
    return res

# check _jm_obj_60_map_examples (.'$tight#ConstInt'.examples)
def _jm_f_215(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstInt'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#ConstInt'.examples]", path))
    return res

# check _jm_obj_60_map_id (.'$tight#ConstInt'.id)
def _jm_f_216(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstInt'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstInt'.id]", path))
    return res

# check _jm_obj_60_map_title (.'$tight#ConstInt'.title)
def _jm_f_217(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstInt'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstInt'.title]", path))
    return res


# object .'$tight#ConstInt'
def _jm_obj_60(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstInt']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_59: Path = (path + [ prop ]) if path is not None else None
        if prop == "const":
            # handle must const property
            must_count += 1
            # .'$tight#ConstInt'.const
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$tight#ConstInt'.const]", lpath_59 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstInt'.const]", lpath_59 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#ConstInt'.type
            res = isinstance(pval, str) and pval == "integer"
            if not res:
                rep is None or rep.append(("unexpected integer [.'$tight#ConstInt'.type]", lpath_59 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstInt'.type]", lpath_59 if path is not None else None))
                return False
        elif pfun := _jm_obj_60_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_59 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstInt']", lpath_59 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#ConstInt']", lpath_59 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "const" in val:
                rep is None or rep.append(("missing mandatory prop <const> [.'$tight#ConstInt']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#ConstInt']", path))
        return False
    return True

# check $tight#ConstInt (.'$tight#ConstInt')
def json_model_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstInt'
    res = _jm_obj_60(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#ConstInt']", path))
    return res

# check _jm_obj_63_map_$comment (.'$tight#ConstBool'.'$comment')
def _jm_f_218(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstBool'.'$comment'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstBool'.'$comment']", path))
    return res

# object .'$tight#ConstBool'.'$defs'
def _jm_obj_64(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstBool'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_63: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstBool'.'$defs'.''
        res = json_model_26(pval, lpath_63 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstBool'.'$defs'.'']", lpath_63 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_63_map_$defs (.'$tight#ConstBool'.'$defs')
def _jm_f_219(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstBool'.'$defs'
    res = _jm_obj_64(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#ConstBool'.'$defs']", path))
    return res

# check _jm_obj_63_map_$id (.'$tight#ConstBool'.'$id')
def _jm_f_220(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstBool'.'$id'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstBool'.'$id']", path))
    return res

# check _jm_obj_63_map_$schema (.'$tight#ConstBool'.'$schema')
def _jm_f_221(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstBool'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstBool'.'$schema']", path))
    return res

# check _jm_obj_63_map_default (.'$tight#ConstBool'.default)
def _jm_f_222(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstBool'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$tight#ConstBool'.default]", path))
    return res

# object .'$tight#ConstBool'.definitions
def _jm_obj_65(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstBool'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_64: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$tight#ConstBool'.definitions.''
        res = json_model_26(pval, lpath_64 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$tight#ConstBool'.definitions.'']", lpath_64 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_63_map_definitions (.'$tight#ConstBool'.definitions)
def _jm_f_223(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstBool'.definitions
    res = _jm_obj_65(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#ConstBool'.definitions]", path))
    return res

# check _jm_obj_63_map_description (.'$tight#ConstBool'.description)
def _jm_f_224(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstBool'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstBool'.description]", path))
    return res

# check _jm_obj_63_map_examples (.'$tight#ConstBool'.examples)
def _jm_f_225(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstBool'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$tight#ConstBool'.examples]", path))
    return res

# check _jm_obj_63_map_id (.'$tight#ConstBool'.id)
def _jm_f_226(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstBool'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstBool'.id]", path))
    return res

# check _jm_obj_63_map_title (.'$tight#ConstBool'.title)
def _jm_f_227(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstBool'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$tight#ConstBool'.title]", path))
    return res


# object .'$tight#ConstBool'
def _jm_obj_63(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$tight#ConstBool']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_62: Path = (path + [ prop ]) if path is not None else None
        if prop == "const":
            # handle must const property
            must_count += 1
            # .'$tight#ConstBool'.const
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$tight#ConstBool'.const]", lpath_62 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstBool'.const]", lpath_62 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$tight#ConstBool'.type
            res = isinstance(pval, str) and pval == "boolean"
            if not res:
                rep is None or rep.append(("unexpected boolean [.'$tight#ConstBool'.type]", lpath_62 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$tight#ConstBool'.type]", lpath_62 if path is not None else None))
                return False
        elif pfun := _jm_obj_63_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_62 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$tight#ConstBool']", lpath_62 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$tight#ConstBool']", lpath_62 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "const" in val:
                rep is None or rep.append(("missing mandatory prop <const> [.'$tight#ConstBool']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$tight#ConstBool']", path))
        return False
    return True

# check $tight#ConstBool (.'$tight#ConstBool')
def json_model_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$tight#ConstBool'
    res = _jm_obj_63(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$tight#ConstBool']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_map_0
        _jm_map_0 = {
            "null": json_model_18,
            "boolean": json_model_34,
            "integer": json_model_33,
            "number": json_model_32,
            "string": json_model_31,
            "array": json_model_13,
            "object": json_model_14,
        }
        global _jm_obj_1_map
        _jm_obj_1_map = {
            "$comment": _jm_f_0,
            "$defs": _jm_f_1,
            "$id": _jm_f_2,
            "$schema": _jm_f_3,
            "default": _jm_f_4,
            "definitions": _jm_f_5,
            "description": _jm_f_6,
            "examples": _jm_f_7,
            "id": _jm_f_8,
            "title": _jm_f_9,
        }
        global _jm_cst_0
        _jm_cst_0 = {'byte', 'date', 'date-time', 'double', 'duration', 'email', 'hostname', 'idn-email', 'idn-hostname', 'int', 'int32', 'int64', 'ipv4', 'ipv6', 'iri', 'iri-reference', 'json-pointer', 'mime-type', 'regex', 'relative-json-pointer', 'time', 'uint', 'uint32', 'uint64', 'uri', 'uri-reference', 'uuid'}
        global _jm_obj_4_map
        _jm_obj_4_map = {
            "$comment": _jm_f_10,
            "$defs": _jm_f_11,
            "$id": _jm_f_12,
            "$schema": _jm_f_13,
            "default": _jm_f_14,
            "definitions": _jm_f_15,
            "description": _jm_f_16,
            "examples": _jm_f_17,
            "format": _jm_f_18,
            "id": _jm_f_19,
            "maxLength": _jm_f_20,
            "minLength": _jm_f_21,
            "pattern": _jm_f_22,
            "title": _jm_f_23,
        }
        global _jm_obj_7_map
        _jm_obj_7_map = {
            "$comment": _jm_f_24,
            "$defs": _jm_f_25,
            "$id": _jm_f_26,
            "$schema": _jm_f_27,
            "additionalItems": _jm_f_28,
            "default": _jm_f_29,
            "definitions": _jm_f_30,
            "description": _jm_f_31,
            "examples": _jm_f_32,
            "id": _jm_f_33,
            "items": _jm_f_34,
            "maxItems": _jm_f_35,
            "minItems": _jm_f_36,
            "prefixItems": _jm_f_37,
            "title": _jm_f_38,
            "uniqueItems": _jm_f_39,
        }
        global _jm_obj_10_map
        _jm_obj_10_map = {
            "$comment": _jm_f_40,
            "$defs": _jm_f_41,
            "$id": _jm_f_42,
            "$schema": _jm_f_43,
            "additionalProperties": _jm_f_44,
            "default": _jm_f_45,
            "definitions": _jm_f_46,
            "description": _jm_f_47,
            "examples": _jm_f_48,
            "id": _jm_f_49,
            "patternProperties": _jm_f_50,
            "properties": _jm_f_51,
            "required": _jm_f_52,
            "title": _jm_f_53,
        }
        global _jm_obj_15_map
        _jm_obj_15_map = {
            "$comment": _jm_f_54,
            "$defs": _jm_f_55,
            "$id": _jm_f_56,
            "$schema": _jm_f_57,
            "default": _jm_f_58,
            "definitions": _jm_f_59,
            "description": _jm_f_60,
            "examples": _jm_f_61,
            "id": _jm_f_62,
            "maximum": _jm_f_63,
            "minimum": _jm_f_64,
            "title": _jm_f_65,
        }
        global _jm_obj_18_map
        _jm_obj_18_map = {
            "$comment": _jm_f_66,
            "$defs": _jm_f_67,
            "$id": _jm_f_68,
            "$schema": _jm_f_69,
            "default": _jm_f_70,
            "definitions": _jm_f_71,
            "description": _jm_f_72,
            "examples": _jm_f_73,
            "id": _jm_f_74,
            "maximum": _jm_f_75,
            "minimum": _jm_f_76,
            "title": _jm_f_77,
        }
        global _jm_obj_21_map
        _jm_obj_21_map = {
            "$comment": _jm_f_78,
            "$defs": _jm_f_79,
            "$id": _jm_f_80,
            "$schema": _jm_f_81,
            "default": _jm_f_82,
            "definitions": _jm_f_83,
            "description": _jm_f_84,
            "examples": _jm_f_85,
            "id": _jm_f_86,
            "title": _jm_f_87,
        }
        global _jm_obj_24_map
        _jm_obj_24_map = {
            "$comment": _jm_f_88,
            "$defs": _jm_f_89,
            "$id": _jm_f_90,
            "$schema": _jm_f_91,
            "default": _jm_f_92,
            "definitions": _jm_f_93,
            "description": _jm_f_94,
            "examples": _jm_f_95,
            "id": _jm_f_96,
            "title": _jm_f_97,
        }
        global _jm_obj_27_map
        _jm_obj_27_map = {
            "$comment": _jm_f_98,
            "$defs": _jm_f_99,
            "$id": _jm_f_100,
            "$schema": _jm_f_101,
            "default": _jm_f_102,
            "definitions": _jm_f_103,
            "description": _jm_f_104,
            "examples": _jm_f_105,
            "id": _jm_f_106,
            "title": _jm_f_107,
        }
        global _jm_obj_30_map
        _jm_obj_30_map = {
            "$comment": _jm_f_108,
            "$defs": _jm_f_109,
            "$id": _jm_f_110,
            "$schema": _jm_f_111,
            "default": _jm_f_112,
            "definitions": _jm_f_113,
            "description": _jm_f_114,
            "examples": _jm_f_115,
            "id": _jm_f_116,
            "title": _jm_f_117,
        }
        global _jm_obj_33_map
        _jm_obj_33_map = {
            "$comment": _jm_f_118,
            "$defs": _jm_f_119,
            "$id": _jm_f_120,
            "$schema": _jm_f_121,
            "default": _jm_f_122,
            "definitions": _jm_f_123,
            "description": _jm_f_124,
            "examples": _jm_f_125,
            "id": _jm_f_126,
            "title": _jm_f_127,
        }
        global _jm_obj_36_map
        _jm_obj_36_map = {
            "$comment": _jm_f_128,
            "$defs": _jm_f_129,
            "$id": _jm_f_130,
            "$schema": _jm_f_131,
            "default": _jm_f_132,
            "definitions": _jm_f_133,
            "description": _jm_f_134,
            "examples": _jm_f_135,
            "id": _jm_f_136,
            "title": _jm_f_137,
        }
        global _jm_obj_39_map
        _jm_obj_39_map = {
            "$comment": _jm_f_138,
            "$defs": _jm_f_139,
            "$id": _jm_f_140,
            "$schema": _jm_f_141,
            "default": _jm_f_142,
            "definitions": _jm_f_143,
            "description": _jm_f_144,
            "examples": _jm_f_145,
            "id": _jm_f_146,
            "title": _jm_f_147,
        }
        global _jm_obj_42_map
        _jm_obj_42_map = {
            "$comment": _jm_f_148,
            "$defs": _jm_f_149,
            "$id": _jm_f_150,
            "$schema": _jm_f_151,
            "default": _jm_f_152,
            "definitions": _jm_f_153,
            "description": _jm_f_154,
            "examples": _jm_f_155,
            "id": _jm_f_156,
            "title": _jm_f_157,
        }
        global _jm_obj_45_map
        _jm_obj_45_map = {
            "$comment": _jm_f_158,
            "$defs": _jm_f_159,
            "$id": _jm_f_160,
            "$schema": _jm_f_161,
            "default": _jm_f_162,
            "definitions": _jm_f_163,
            "description": _jm_f_164,
            "examples": _jm_f_165,
            "id": _jm_f_166,
            "title": _jm_f_167,
        }
        global _jm_obj_48_map
        _jm_obj_48_map = {
            "$comment": _jm_f_168,
            "$defs": _jm_f_169,
            "$id": _jm_f_170,
            "$schema": _jm_f_171,
            "default": _jm_f_172,
            "definitions": _jm_f_173,
            "description": _jm_f_174,
            "examples": _jm_f_175,
            "id": _jm_f_176,
            "title": _jm_f_177,
        }
        global _jm_obj_51_map
        _jm_obj_51_map = {
            "$comment": _jm_f_178,
            "$defs": _jm_f_179,
            "$id": _jm_f_180,
            "$schema": _jm_f_181,
            "default": _jm_f_182,
            "definitions": _jm_f_183,
            "description": _jm_f_184,
            "examples": _jm_f_185,
            "id": _jm_f_186,
            "title": _jm_f_187,
        }
        global _jm_obj_54_map
        _jm_obj_54_map = {
            "$comment": _jm_f_188,
            "$defs": _jm_f_189,
            "$id": _jm_f_190,
            "$schema": _jm_f_191,
            "default": _jm_f_192,
            "definitions": _jm_f_193,
            "description": _jm_f_194,
            "examples": _jm_f_195,
            "id": _jm_f_196,
            "title": _jm_f_197,
        }
        global _jm_obj_57_map
        _jm_obj_57_map = {
            "$comment": _jm_f_198,
            "$defs": _jm_f_199,
            "$id": _jm_f_200,
            "$schema": _jm_f_201,
            "default": _jm_f_202,
            "definitions": _jm_f_203,
            "description": _jm_f_204,
            "examples": _jm_f_205,
            "id": _jm_f_206,
            "title": _jm_f_207,
        }
        global _jm_obj_60_map
        _jm_obj_60_map = {
            "$comment": _jm_f_208,
            "$defs": _jm_f_209,
            "$id": _jm_f_210,
            "$schema": _jm_f_211,
            "default": _jm_f_212,
            "definitions": _jm_f_213,
            "description": _jm_f_214,
            "examples": _jm_f_215,
            "id": _jm_f_216,
            "title": _jm_f_217,
        }
        global _jm_obj_63_map
        _jm_obj_63_map = {
            "$comment": _jm_f_218,
            "$defs": _jm_f_219,
            "$id": _jm_f_220,
            "$schema": _jm_f_221,
            "default": _jm_f_222,
            "definitions": _jm_f_223,
            "description": _jm_f_224,
            "examples": _jm_f_225,
            "id": _jm_f_226,
            "title": _jm_f_227,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "tight": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
