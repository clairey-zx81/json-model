#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_3($$$);
sub json_model_1($$$);
sub _jm_obj_0($$$);
sub json_model_27($$$);
my %_jm_map_0;
sub json_model_25($$$);
sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
sub _jm_f_6($$$);
sub _jm_f_7($$$);
sub _jm_f_8($$$);
sub _jm_f_9($$$);
my %json_model_11_map;
sub json_model_11($$$);
sub _jm_f_10($$$);
sub _jm_f_11($$$);
sub _jm_f_12($$$);
sub _jm_f_13($$$);
sub _jm_f_14($$$);
sub _jm_f_15($$$);
sub _jm_f_16($$$);
sub _jm_f_17($$$);
my %_jm_cst_0;
sub _jm_f_18($$$);
sub _jm_f_19($$$);
sub _jm_f_20($$$);
sub _jm_f_21($$$);
sub _jm_f_22($$$);
sub _jm_f_23($$$);
my %json_model_12_map;
sub json_model_12($$$);
sub _jm_f_24($$$);
sub _jm_f_25($$$);
sub _jm_f_26($$$);
sub _jm_f_27($$$);
sub _jm_f_28($$$);
sub _jm_f_29($$$);
sub _jm_f_30($$$);
sub _jm_f_31($$$);
sub _jm_f_32($$$);
sub _jm_f_33($$$);
sub _jm_f_34($$$);
sub _jm_f_35($$$);
sub _jm_f_36($$$);
sub _jm_f_37($$$);
my %json_model_13_map;
sub json_model_13($$$);
sub json_model_6($$$);
sub _jm_f_38($$$);
sub _jm_f_39($$$);
sub _jm_f_40($$$);
sub _jm_f_41($$$);
sub _jm_f_42($$$);
sub _jm_f_43($$$);
sub _jm_f_44($$$);
sub _jm_f_45($$$);
sub _jm_f_46($$$);
sub _jm_f_47($$$);
sub _jm_f_48($$$);
sub _jm_f_49($$$);
sub _jm_f_50($$$);
my %json_model_14_map;
sub json_model_14($$$);
sub _jm_f_51($$$);
sub _jm_f_52($$$);
sub _jm_f_53($$$);
sub _jm_f_54($$$);
sub _jm_f_55($$$);
sub _jm_f_56($$$);
sub _jm_f_57($$$);
sub _jm_f_58($$$);
sub _jm_f_59($$$);
sub _jm_f_60($$$);
sub _jm_f_61($$$);
sub _jm_f_62($$$);
my %json_model_15_map;
sub json_model_15($$$);
sub _jm_f_63($$$);
sub _jm_f_64($$$);
sub _jm_f_65($$$);
sub _jm_f_66($$$);
sub _jm_f_67($$$);
sub _jm_f_68($$$);
sub _jm_f_69($$$);
sub _jm_f_70($$$);
sub _jm_f_71($$$);
sub _jm_f_72($$$);
sub _jm_f_73($$$);
sub _jm_f_74($$$);
my %json_model_16_map;
sub json_model_16($$$);
sub _jm_f_75($$$);
sub _jm_f_76($$$);
sub _jm_f_77($$$);
sub _jm_f_78($$$);
sub _jm_f_79($$$);
sub _jm_f_80($$$);
sub _jm_f_81($$$);
sub _jm_f_82($$$);
sub _jm_f_83($$$);
sub _jm_f_84($$$);
my %json_model_17_map;
sub json_model_17($$$);
sub _jm_f_85($$$);
sub _jm_f_86($$$);
sub _jm_f_87($$$);
sub _jm_f_88($$$);
sub _jm_f_89($$$);
sub _jm_f_90($$$);
sub _jm_f_91($$$);
sub _jm_f_92($$$);
sub _jm_f_93($$$);
sub _jm_f_94($$$);
my %json_model_18_map;
sub json_model_18($$$);
sub _jm_f_95($$$);
sub _jm_f_96($$$);
sub _jm_f_97($$$);
sub _jm_f_98($$$);
sub _jm_f_99($$$);
sub _jm_f_100($$$);
sub _jm_f_101($$$);
sub _jm_f_102($$$);
sub _jm_f_103($$$);
sub _jm_f_104($$$);
my %json_model_19_map;
sub json_model_19($$$);
sub _jm_f_105($$$);
sub _jm_f_106($$$);
sub _jm_f_107($$$);
sub _jm_f_108($$$);
sub _jm_f_109($$$);
sub _jm_f_110($$$);
sub _jm_f_111($$$);
sub _jm_f_112($$$);
sub _jm_f_113($$$);
sub _jm_f_114($$$);
my %json_model_20_map;
sub json_model_20($$$);
sub _jm_f_115($$$);
sub _jm_f_116($$$);
sub _jm_f_117($$$);
sub _jm_f_118($$$);
sub _jm_f_119($$$);
sub _jm_f_120($$$);
sub _jm_f_121($$$);
sub _jm_f_122($$$);
sub _jm_f_123($$$);
sub _jm_f_124($$$);
my %json_model_21_map;
sub json_model_21($$$);
sub _jm_f_125($$$);
sub _jm_f_126($$$);
sub _jm_f_127($$$);
sub _jm_f_128($$$);
sub _jm_f_129($$$);
sub _jm_f_130($$$);
sub _jm_f_131($$$);
sub _jm_f_132($$$);
sub _jm_f_133($$$);
sub _jm_f_134($$$);
my %json_model_22_map;
sub json_model_22($$$);
sub json_model_5($$$);
sub _jm_f_135($$$);
sub _jm_f_136($$$);
sub _jm_f_137($$$);
sub _jm_f_138($$$);
sub _jm_f_139($$$);
sub _jm_f_140($$$);
sub _jm_f_141($$$);
sub _jm_f_142($$$);
sub _jm_f_143($$$);
sub _jm_f_144($$$);
my %json_model_23_map;
sub json_model_23($$$);
sub json_model_4($$$);
sub _jm_f_145($$$);
sub _jm_f_146($$$);
sub _jm_f_147($$$);
sub _jm_f_148($$$);
sub _jm_f_149($$$);
sub _jm_f_150($$$);
sub _jm_f_151($$$);
sub _jm_f_152($$$);
sub _jm_f_153($$$);
sub _jm_f_154($$$);
my %json_model_24_map;
sub json_model_24($$$);
sub json_model_26($$$);
sub _jm_f_155($$$);
sub _jm_f_156($$$);
sub _jm_f_157($$$);
sub _jm_f_158($$$);
sub _jm_f_159($$$);
sub _jm_f_160($$$);
sub _jm_f_161($$$);
sub _jm_f_162($$$);
sub _jm_f_163($$$);
sub _jm_f_164($$$);
my %json_model_28_map;
sub json_model_28($$$);
sub _jm_f_165($$$);
sub _jm_f_166($$$);
sub _jm_f_167($$$);
sub _jm_f_168($$$);
sub _jm_f_169($$$);
sub _jm_f_170($$$);
sub _jm_f_171($$$);
sub _jm_f_172($$$);
sub _jm_f_173($$$);
sub _jm_f_174($$$);
my %json_model_29_map;
sub json_model_29($$$);
sub _jm_f_175($$$);
sub _jm_f_176($$$);
sub _jm_f_177($$$);
sub _jm_f_178($$$);
sub _jm_f_179($$$);
sub _jm_f_180($$$);
sub _jm_f_181($$$);
sub _jm_f_182($$$);
sub _jm_f_183($$$);
sub _jm_f_184($$$);
my %json_model_30_map;
sub json_model_30($$$);
sub _jm_f_185($$$);
sub _jm_f_186($$$);
sub _jm_f_187($$$);
sub _jm_f_188($$$);
sub _jm_f_189($$$);
sub _jm_f_190($$$);
sub _jm_f_191($$$);
sub _jm_f_192($$$);
sub _jm_f_193($$$);
sub _jm_f_194($$$);
my %json_model_31_map;
sub json_model_31($$$);
sub _jm_f_195($$$);
sub _jm_f_196($$$);
sub _jm_f_197($$$);
sub _jm_f_198($$$);
sub _jm_f_199($$$);
sub _jm_f_200($$$);
sub _jm_f_201($$$);
sub _jm_f_202($$$);
sub _jm_f_203($$$);
sub _jm_f_204($$$);
my %json_model_32_map;
sub json_model_32($$$);
sub _jm_f_205($$$);
sub _jm_f_206($$$);
sub _jm_f_207($$$);
sub _jm_f_208($$$);
sub _jm_f_209($$$);
sub _jm_f_210($$$);
sub _jm_f_211($$$);
sub _jm_f_212($$$);
sub _jm_f_213($$$);
sub _jm_f_214($$$);
my %json_model_33_map;
sub json_model_33($$$);
sub _jm_f_215($$$);
sub _jm_f_216($$$);
sub _jm_f_217($$$);
sub _jm_f_218($$$);
sub _jm_f_219($$$);
sub _jm_f_220($$$);
sub _jm_f_221($$$);
sub _jm_f_222($$$);
sub _jm_f_223($$$);
sub _jm_f_224($$$);
my %json_model_34_map;
sub json_model_34($$$);
my %check_model_map;

# check $tight (.'$tight')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight'
    return json_model_27($val, $path, $rep);
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .
    return json_model_27($val, $path, $rep);
}

# object .'$tight#RootSchema'.'&'.0
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'$schema'})
    {
        return 0;
    }
    $pval = $$val{'$schema'};
    # .'$tight#RootSchema'.'&'.0.'$schema'
    return jm_is_string($pval);
}

# check $tight#RootSchema (.'$tight#RootSchema')
sub json_model_27($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # keyword $schema is mandatory at the root, and optional elsewhere
    # .'$tight#RootSchema'
    $res = 1;
    if ($res)
    {
        # .'$tight#RootSchema'.'&'.0
        $res = _jm_obj_0($val, $path, $rep);
        if ($res)
        {
            # .'$tight#RootSchema'.'&'.1
            $res = json_model_25($val, $path, $rep);
        }
    }
    return $res;
}


# check $tight#ObjectSchema (.'$tight#ObjectSchema')
sub json_model_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # we could use ^ instead of | below
    # .'$tight#ObjectSchema'
    my $iso_0 = jm_is_object($val);
    $res = $iso_0;
    if ($res)
    {
        if (exists $$val{'type'})
        {
            my $tag_0 = $$val{'type'};
            my $fun_0 = $_jm_map_0{$tag_0};
            if (defined($fun_0))
            {
                $res = &$fun_0($val, $path, $rep);
            }
            else
            {
                $res = 0;
            }
        }
        else
        {
            $res = 0;
        }
    }
    else
    {
        ;
    }
    if (! $res)
    {
        $res = json_model_11($val, $path, $rep);
        if (! $res)
        {
            $res = json_model_23($val, $path, $rep);
            if (! $res)
            {
                $res = json_model_22($val, $path, $rep);
                if (! $res)
                {
                    $res = json_model_19($val, $path, $rep);
                    if (! $res)
                    {
                        $res = json_model_20($val, $path, $rep);
                        if (! $res)
                        {
                            $res = json_model_21($val, $path, $rep);
                            if (! $res)
                            {
                                $res = json_model_24($val, $path, $rep);
                                if (! $res)
                                {
                                    $res = json_model_28($val, $path, $rep);
                                    if (! $res)
                                    {
                                        $res = json_model_29($val, $path, $rep);
                                        if (! $res)
                                        {
                                            $res = json_model_30($val, $path, $rep);
                                            if (! $res)
                                            {
                                                $res = json_model_31($val, $path, $rep);
                                                if (! $res)
                                                {
                                                    $res = json_model_32($val, $path, $rep);
                                                    if (! $res)
                                                    {
                                                        $res = json_model_33($val, $path, $rep);
                                                        if (! $res)
                                                        {
                                                            $res = json_model_34($val, $path, $rep);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# check json_model_11_map_$comment (.'$tight#metas'.'$comment')
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#metas'.'$comment'
    return jm_is_string($val);
}

# check json_model_11_map_$defs (.'$tight#metas'.'$defs')
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#metas'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#metas'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_11_map_$id (.'$tight#metas'.'$id')
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#metas'.'$id'
    return jm_is_string($val);
}

# check json_model_11_map_$schema (.'$tight#metas'.'$schema')
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#metas'.'$schema'
    return jm_is_string($val);
}

# check json_model_11_map_default (.'$tight#metas'.default)
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#metas'.default
    return 1;
}

# check json_model_11_map_definitions (.'$tight#metas'.definitions)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#metas'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#metas'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_11_map_description (.'$tight#metas'.description)
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#metas'.description
    return jm_is_string($val);
}

# check json_model_11_map_examples (.'$tight#metas'.examples)
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#metas'.examples
    return jm_is_array($val);
}

# check json_model_11_map_id (.'$tight#metas'.id)
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#metas'.id
    return jm_is_string($val);
}

# check json_model_11_map_title (.'$tight#metas'.title)
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#metas'.title
    return jm_is_string($val);
}


# check $tight#metas (.'$tight#metas')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    # there is a trick with $schema… in RootSchema below
    # .'$tight#metas'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_11_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_12_map_$comment (.'$tight#String'.'$comment')
sub _jm_f_10($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.'$comment'
    return jm_is_string($val);
}

# check json_model_12_map_$defs (.'$tight#String'.'$defs')
sub _jm_f_11($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#String'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_12_map_$id (.'$tight#String'.'$id')
sub _jm_f_12($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.'$id'
    return jm_is_string($val);
}

# check json_model_12_map_$schema (.'$tight#String'.'$schema')
sub _jm_f_13($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.'$schema'
    return jm_is_string($val);
}

# check json_model_12_map_default (.'$tight#String'.default)
sub _jm_f_14($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.default
    return 1;
}

# check json_model_12_map_definitions (.'$tight#String'.definitions)
sub _jm_f_15($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#String'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_12_map_description (.'$tight#String'.description)
sub _jm_f_16($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.description
    return jm_is_string($val);
}

# check json_model_12_map_examples (.'$tight#String'.examples)
sub _jm_f_17($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.examples
    return jm_is_array($val);
}


# check json_model_12_map_format (.'$tight#String'.format)
sub _jm_f_18($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.format
    return jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_0{$val};
}

# check json_model_12_map_id (.'$tight#String'.id)
sub _jm_f_19($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.id
    return jm_is_string($val);
}

# check json_model_12_map_maxLength (.'$tight#String'.maxLength)
sub _jm_f_20($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.maxLength
    return jm_is_integer($val) && $val >= 0;
}

# check json_model_12_map_minLength (.'$tight#String'.minLength)
sub _jm_f_21($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.minLength
    return jm_is_integer($val) && $val >= 0;
}

# check json_model_12_map_pattern (.'$tight#String'.pattern)
sub _jm_f_22($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.pattern
    return jm_is_string($val) && jm_is_valid_regex($val, $path, $rep);
}

# check json_model_12_map_title (.'$tight#String'.title)
sub _jm_f_23($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'.title
    return jm_is_string($val);
}


# check $tight#String (.'$tight#String')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#String'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#String'.type
            $res = jm_is_string($pval) && $pval eq 'string';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_12_map{$prop}))
        {
            # handle 14 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check json_model_13_map_$comment (.'$tight#Array'.'$comment')
sub _jm_f_24($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'.'$comment'
    return jm_is_string($val);
}

# check json_model_13_map_$defs (.'$tight#Array'.'$defs')
sub _jm_f_25($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Array'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_13_map_$id (.'$tight#Array'.'$id')
sub _jm_f_26($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'.'$id'
    return jm_is_string($val);
}

# check json_model_13_map_$schema (.'$tight#Array'.'$schema')
sub _jm_f_27($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'.'$schema'
    return jm_is_string($val);
}

# check json_model_13_map_default (.'$tight#Array'.default)
sub _jm_f_28($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'.default
    return 1;
}

# check json_model_13_map_definitions (.'$tight#Array'.definitions)
sub _jm_f_29($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Array'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_13_map_description (.'$tight#Array'.description)
sub _jm_f_30($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'.description
    return jm_is_string($val);
}

# check json_model_13_map_examples (.'$tight#Array'.examples)
sub _jm_f_31($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'.examples
    return jm_is_array($val);
}

# check json_model_13_map_id (.'$tight#Array'.id)
sub _jm_f_32($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'.id
    return jm_is_string($val);
}

# check json_model_13_map_items (.'$tight#Array'.items)
sub _jm_f_33($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$tight#Array'.items
    # .'$tight#Array'.items.'|'.0
    $res = json_model_26($val, $path, $rep);
    if (! $res)
    {
        # .'$tight#Array'.items.'|'.1
        $res = json_model_6($val, $path, $rep);
    }
    return $res;
}

# check json_model_13_map_maxItems (.'$tight#Array'.maxItems)
sub _jm_f_34($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'.maxItems
    return jm_is_integer($val) && $val >= 0;
}

# check json_model_13_map_minItems (.'$tight#Array'.minItems)
sub _jm_f_35($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'.minItems
    return jm_is_integer($val) && $val >= 0;
}

# check json_model_13_map_title (.'$tight#Array'.title)
sub _jm_f_36($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'.title
    return jm_is_string($val);
}

# check json_model_13_map_uniqueItems (.'$tight#Array'.uniqueItems)
sub _jm_f_37($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'.uniqueItems
    return jm_is_boolean($val);
}


# check $tight#Array (.'$tight#Array')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Array'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#Array'.type
            $res = jm_is_string($pval) && $pval eq 'array';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_13_map{$prop}))
        {
            # handle 16 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check $tight#schemaArray (.'$tight#schemaArray')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$tight#schemaArray'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$tight#schemaArray'.0
            $res = json_model_26($arr_0_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check json_model_14_map_$comment (.'$tight#Object'.'$comment')
sub _jm_f_38($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Object'.'$comment'
    return jm_is_string($val);
}

# check json_model_14_map_$defs (.'$tight#Object'.'$defs')
sub _jm_f_39($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Object'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Object'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_14_map_$id (.'$tight#Object'.'$id')
sub _jm_f_40($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Object'.'$id'
    return jm_is_string($val);
}

# check json_model_14_map_$schema (.'$tight#Object'.'$schema')
sub _jm_f_41($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Object'.'$schema'
    return jm_is_string($val);
}

# check json_model_14_map_default (.'$tight#Object'.default)
sub _jm_f_42($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Object'.default
    return 1;
}

# check json_model_14_map_definitions (.'$tight#Object'.definitions)
sub _jm_f_43($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Object'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Object'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_14_map_description (.'$tight#Object'.description)
sub _jm_f_44($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Object'.description
    return jm_is_string($val);
}

# check json_model_14_map_examples (.'$tight#Object'.examples)
sub _jm_f_45($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Object'.examples
    return jm_is_array($val);
}

# check json_model_14_map_id (.'$tight#Object'.id)
sub _jm_f_46($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Object'.id
    return jm_is_string($val);
}

# check json_model_14_map_patternProperties (.'$tight#Object'.patternProperties)
sub _jm_f_47($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Object'.patternProperties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_regex($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$tight#Object'.patternProperties.'$REGEX'
            $res = json_model_26($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_14_map_properties (.'$tight#Object'.properties)
sub _jm_f_48($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Object'.properties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Object'.properties.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_14_map_required (.'$tight#Object'.required)
sub _jm_f_49($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$tight#Object'.required
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_1_idx (0 .. $#$val)
        {
            my $arr_1_item = $$val[$arr_1_idx];
            # .'$tight#Object'.required.0
            $res = jm_is_string($arr_1_item);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check json_model_14_map_title (.'$tight#Object'.title)
sub _jm_f_50($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Object'.title
    return jm_is_string($val);
}


# check $tight#Object (.'$tight#Object')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Object'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#Object'.type
            $res = jm_is_string($pval) && $pval eq 'object';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_14_map{$prop}))
        {
            # handle 14 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check json_model_15_map_$comment (.'$tight#Integer'.'$comment')
sub _jm_f_51($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Integer'.'$comment'
    return jm_is_string($val);
}

# check json_model_15_map_$defs (.'$tight#Integer'.'$defs')
sub _jm_f_52($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Integer'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Integer'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_15_map_$id (.'$tight#Integer'.'$id')
sub _jm_f_53($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Integer'.'$id'
    return jm_is_string($val);
}

# check json_model_15_map_$schema (.'$tight#Integer'.'$schema')
sub _jm_f_54($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Integer'.'$schema'
    return jm_is_string($val);
}

# check json_model_15_map_default (.'$tight#Integer'.default)
sub _jm_f_55($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Integer'.default
    return 1;
}

# check json_model_15_map_definitions (.'$tight#Integer'.definitions)
sub _jm_f_56($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Integer'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Integer'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_15_map_description (.'$tight#Integer'.description)
sub _jm_f_57($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Integer'.description
    return jm_is_string($val);
}

# check json_model_15_map_examples (.'$tight#Integer'.examples)
sub _jm_f_58($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Integer'.examples
    return jm_is_array($val);
}

# check json_model_15_map_id (.'$tight#Integer'.id)
sub _jm_f_59($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Integer'.id
    return jm_is_string($val);
}

# check json_model_15_map_maximum (.'$tight#Integer'.maximum)
sub _jm_f_60($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Integer'.maximum
    return jm_is_numeric($val);
}

# check json_model_15_map_minimum (.'$tight#Integer'.minimum)
sub _jm_f_61($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Integer'.minimum
    return jm_is_numeric($val);
}

# check json_model_15_map_title (.'$tight#Integer'.title)
sub _jm_f_62($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Integer'.title
    return jm_is_string($val);
}


# check $tight#Integer (.'$tight#Integer')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Integer'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#Integer'.type
            $res = jm_is_string($pval) && $pval eq 'integer';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_15_map{$prop}))
        {
            # handle 12 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check json_model_16_map_$comment (.'$tight#Number'.'$comment')
sub _jm_f_63($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Number'.'$comment'
    return jm_is_string($val);
}

# check json_model_16_map_$defs (.'$tight#Number'.'$defs')
sub _jm_f_64($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Number'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Number'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_16_map_$id (.'$tight#Number'.'$id')
sub _jm_f_65($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Number'.'$id'
    return jm_is_string($val);
}

# check json_model_16_map_$schema (.'$tight#Number'.'$schema')
sub _jm_f_66($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Number'.'$schema'
    return jm_is_string($val);
}

# check json_model_16_map_default (.'$tight#Number'.default)
sub _jm_f_67($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Number'.default
    return 1;
}

# check json_model_16_map_definitions (.'$tight#Number'.definitions)
sub _jm_f_68($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Number'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Number'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_16_map_description (.'$tight#Number'.description)
sub _jm_f_69($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Number'.description
    return jm_is_string($val);
}

# check json_model_16_map_examples (.'$tight#Number'.examples)
sub _jm_f_70($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Number'.examples
    return jm_is_array($val);
}

# check json_model_16_map_id (.'$tight#Number'.id)
sub _jm_f_71($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Number'.id
    return jm_is_string($val);
}

# check json_model_16_map_maximum (.'$tight#Number'.maximum)
sub _jm_f_72($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Number'.maximum
    return jm_is_numeric($val);
}

# check json_model_16_map_minimum (.'$tight#Number'.minimum)
sub _jm_f_73($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Number'.minimum
    return jm_is_numeric($val);
}

# check json_model_16_map_title (.'$tight#Number'.title)
sub _jm_f_74($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Number'.title
    return jm_is_string($val);
}


# check $tight#Number (.'$tight#Number')
sub json_model_16($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Number'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#Number'.type
            $res = jm_is_string($pval) && $pval eq 'number';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_16_map{$prop}))
        {
            # handle 12 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check json_model_17_map_$comment (.'$tight#Bool'.'$comment')
sub _jm_f_75($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Bool'.'$comment'
    return jm_is_string($val);
}

# check json_model_17_map_$defs (.'$tight#Bool'.'$defs')
sub _jm_f_76($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Bool'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Bool'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_17_map_$id (.'$tight#Bool'.'$id')
sub _jm_f_77($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Bool'.'$id'
    return jm_is_string($val);
}

# check json_model_17_map_$schema (.'$tight#Bool'.'$schema')
sub _jm_f_78($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Bool'.'$schema'
    return jm_is_string($val);
}

# check json_model_17_map_default (.'$tight#Bool'.default)
sub _jm_f_79($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Bool'.default
    return 1;
}

# check json_model_17_map_definitions (.'$tight#Bool'.definitions)
sub _jm_f_80($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Bool'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Bool'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_17_map_description (.'$tight#Bool'.description)
sub _jm_f_81($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Bool'.description
    return jm_is_string($val);
}

# check json_model_17_map_examples (.'$tight#Bool'.examples)
sub _jm_f_82($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Bool'.examples
    return jm_is_array($val);
}

# check json_model_17_map_id (.'$tight#Bool'.id)
sub _jm_f_83($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Bool'.id
    return jm_is_string($val);
}

# check json_model_17_map_title (.'$tight#Bool'.title)
sub _jm_f_84($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Bool'.title
    return jm_is_string($val);
}


# check $tight#Bool (.'$tight#Bool')
sub json_model_17($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Bool'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#Bool'.type
            $res = jm_is_string($pval) && $pval eq 'boolean';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_17_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check json_model_18_map_$comment (.'$tight#Null'.'$comment')
sub _jm_f_85($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Null'.'$comment'
    return jm_is_string($val);
}

# check json_model_18_map_$defs (.'$tight#Null'.'$defs')
sub _jm_f_86($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Null'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Null'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_18_map_$id (.'$tight#Null'.'$id')
sub _jm_f_87($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Null'.'$id'
    return jm_is_string($val);
}

# check json_model_18_map_$schema (.'$tight#Null'.'$schema')
sub _jm_f_88($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Null'.'$schema'
    return jm_is_string($val);
}

# check json_model_18_map_default (.'$tight#Null'.default)
sub _jm_f_89($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Null'.default
    return 1;
}

# check json_model_18_map_definitions (.'$tight#Null'.definitions)
sub _jm_f_90($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Null'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Null'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_18_map_description (.'$tight#Null'.description)
sub _jm_f_91($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Null'.description
    return jm_is_string($val);
}

# check json_model_18_map_examples (.'$tight#Null'.examples)
sub _jm_f_92($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Null'.examples
    return jm_is_array($val);
}

# check json_model_18_map_id (.'$tight#Null'.id)
sub _jm_f_93($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Null'.id
    return jm_is_string($val);
}

# check json_model_18_map_title (.'$tight#Null'.title)
sub _jm_f_94($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Null'.title
    return jm_is_string($val);
}


# check $tight#Null (.'$tight#Null')
sub json_model_18($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Null'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#Null'.type
            $res = jm_is_string($pval) && $pval eq 'null';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_18_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check json_model_19_map_$comment (.'$tight#AllOf'.'$comment')
sub _jm_f_95($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AllOf'.'$comment'
    return jm_is_string($val);
}

# check json_model_19_map_$defs (.'$tight#AllOf'.'$defs')
sub _jm_f_96($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AllOf'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#AllOf'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_19_map_$id (.'$tight#AllOf'.'$id')
sub _jm_f_97($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AllOf'.'$id'
    return jm_is_string($val);
}

# check json_model_19_map_$schema (.'$tight#AllOf'.'$schema')
sub _jm_f_98($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AllOf'.'$schema'
    return jm_is_string($val);
}

# check json_model_19_map_default (.'$tight#AllOf'.default)
sub _jm_f_99($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AllOf'.default
    return 1;
}

# check json_model_19_map_definitions (.'$tight#AllOf'.definitions)
sub _jm_f_100($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AllOf'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#AllOf'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_19_map_description (.'$tight#AllOf'.description)
sub _jm_f_101($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AllOf'.description
    return jm_is_string($val);
}

# check json_model_19_map_examples (.'$tight#AllOf'.examples)
sub _jm_f_102($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AllOf'.examples
    return jm_is_array($val);
}

# check json_model_19_map_id (.'$tight#AllOf'.id)
sub _jm_f_103($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AllOf'.id
    return jm_is_string($val);
}

# check json_model_19_map_title (.'$tight#AllOf'.title)
sub _jm_f_104($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AllOf'.title
    return jm_is_string($val);
}


# check $tight#AllOf (.'$tight#AllOf')
sub json_model_19($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AllOf'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'allOf')
        {
            # handle must allOf property
            $must_count++;
            # .'$tight#AllOf'.allOf
            $res = json_model_6($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_19_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check json_model_20_map_$comment (.'$tight#AnyOf'.'$comment')
sub _jm_f_105($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AnyOf'.'$comment'
    return jm_is_string($val);
}

# check json_model_20_map_$defs (.'$tight#AnyOf'.'$defs')
sub _jm_f_106($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AnyOf'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#AnyOf'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_20_map_$id (.'$tight#AnyOf'.'$id')
sub _jm_f_107($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AnyOf'.'$id'
    return jm_is_string($val);
}

# check json_model_20_map_$schema (.'$tight#AnyOf'.'$schema')
sub _jm_f_108($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AnyOf'.'$schema'
    return jm_is_string($val);
}

# check json_model_20_map_default (.'$tight#AnyOf'.default)
sub _jm_f_109($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AnyOf'.default
    return 1;
}

# check json_model_20_map_definitions (.'$tight#AnyOf'.definitions)
sub _jm_f_110($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AnyOf'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#AnyOf'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_20_map_description (.'$tight#AnyOf'.description)
sub _jm_f_111($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AnyOf'.description
    return jm_is_string($val);
}

# check json_model_20_map_examples (.'$tight#AnyOf'.examples)
sub _jm_f_112($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AnyOf'.examples
    return jm_is_array($val);
}

# check json_model_20_map_id (.'$tight#AnyOf'.id)
sub _jm_f_113($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AnyOf'.id
    return jm_is_string($val);
}

# check json_model_20_map_title (.'$tight#AnyOf'.title)
sub _jm_f_114($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AnyOf'.title
    return jm_is_string($val);
}


# check $tight#AnyOf (.'$tight#AnyOf')
sub json_model_20($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#AnyOf'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'anyOf')
        {
            # handle must anyOf property
            $must_count++;
            # .'$tight#AnyOf'.anyOf
            $res = json_model_6($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_20_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check json_model_21_map_$comment (.'$tight#OneOf'.'$comment')
sub _jm_f_115($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#OneOf'.'$comment'
    return jm_is_string($val);
}

# check json_model_21_map_$defs (.'$tight#OneOf'.'$defs')
sub _jm_f_116($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#OneOf'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#OneOf'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_21_map_$id (.'$tight#OneOf'.'$id')
sub _jm_f_117($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#OneOf'.'$id'
    return jm_is_string($val);
}

# check json_model_21_map_$schema (.'$tight#OneOf'.'$schema')
sub _jm_f_118($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#OneOf'.'$schema'
    return jm_is_string($val);
}

# check json_model_21_map_default (.'$tight#OneOf'.default)
sub _jm_f_119($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#OneOf'.default
    return 1;
}

# check json_model_21_map_definitions (.'$tight#OneOf'.definitions)
sub _jm_f_120($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#OneOf'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#OneOf'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_21_map_description (.'$tight#OneOf'.description)
sub _jm_f_121($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#OneOf'.description
    return jm_is_string($val);
}

# check json_model_21_map_examples (.'$tight#OneOf'.examples)
sub _jm_f_122($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#OneOf'.examples
    return jm_is_array($val);
}

# check json_model_21_map_id (.'$tight#OneOf'.id)
sub _jm_f_123($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#OneOf'.id
    return jm_is_string($val);
}

# check json_model_21_map_title (.'$tight#OneOf'.title)
sub _jm_f_124($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#OneOf'.title
    return jm_is_string($val);
}


# check $tight#OneOf (.'$tight#OneOf')
sub json_model_21($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#OneOf'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'oneOf')
        {
            # handle must oneOf property
            $must_count++;
            # .'$tight#OneOf'.oneOf
            $res = json_model_6($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_21_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check json_model_22_map_$comment (.'$tight#Enum'.'$comment')
sub _jm_f_125($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Enum'.'$comment'
    return jm_is_string($val);
}

# check json_model_22_map_$defs (.'$tight#Enum'.'$defs')
sub _jm_f_126($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Enum'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Enum'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_22_map_$id (.'$tight#Enum'.'$id')
sub _jm_f_127($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Enum'.'$id'
    return jm_is_string($val);
}

# check json_model_22_map_$schema (.'$tight#Enum'.'$schema')
sub _jm_f_128($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Enum'.'$schema'
    return jm_is_string($val);
}

# check json_model_22_map_default (.'$tight#Enum'.default)
sub _jm_f_129($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Enum'.default
    return 1;
}

# check json_model_22_map_definitions (.'$tight#Enum'.definitions)
sub _jm_f_130($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Enum'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Enum'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_22_map_description (.'$tight#Enum'.description)
sub _jm_f_131($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Enum'.description
    return jm_is_string($val);
}

# check json_model_22_map_examples (.'$tight#Enum'.examples)
sub _jm_f_132($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Enum'.examples
    return jm_is_array($val);
}

# check json_model_22_map_id (.'$tight#Enum'.id)
sub _jm_f_133($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Enum'.id
    return jm_is_string($val);
}

# check json_model_22_map_title (.'$tight#Enum'.title)
sub _jm_f_134($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Enum'.title
    return jm_is_string($val);
}


# check $tight#Enum (.'$tight#Enum')
sub json_model_22($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Enum'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'enum')
        {
            # handle must enum property
            $must_count++;
            # .'$tight#Enum'.enum
            $res = json_model_5($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_22_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check $tight#enum (.'$tight#enum')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$tight#enum'
    $res = jm_is_array($val);
    if ($res)
    {
        # .'$tight#enum'.'|'.0
        for my $arr_4_idx (0 .. $#$val)
        {
            my $arr_4_item = $$val[$arr_4_idx];
            # .'$tight#enum'.'|'.0.0
            $res = jm_is_string($arr_4_item);
            if (! $res)
            {
                last;
            }
        }
        if (! $res)
        {
            # .'$tight#enum'.'|'.1
            for my $arr_3_idx (0 .. $#$val)
            {
                my $arr_3_item = $$val[$arr_3_idx];
                # .'$tight#enum'.'|'.1.0
                $res = jm_is_integer($arr_3_item);
                if (! $res)
                {
                    last;
                }
            }
            if (! $res)
            {
                # .'$tight#enum'.'|'.2
                for my $arr_2_idx (0 .. $#$val)
                {
                    my $arr_2_item = $$val[$arr_2_idx];
                    # .'$tight#enum'.'|'.2.0
                    $res = jm_is_boolean($arr_2_item);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
        }
    }
    return $res;
}

# check json_model_23_map_$comment (.'$tight#Const'.'$comment')
sub _jm_f_135($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Const'.'$comment'
    return jm_is_string($val);
}

# check json_model_23_map_$defs (.'$tight#Const'.'$defs')
sub _jm_f_136($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Const'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Const'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_23_map_$id (.'$tight#Const'.'$id')
sub _jm_f_137($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Const'.'$id'
    return jm_is_string($val);
}

# check json_model_23_map_$schema (.'$tight#Const'.'$schema')
sub _jm_f_138($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Const'.'$schema'
    return jm_is_string($val);
}

# check json_model_23_map_default (.'$tight#Const'.default)
sub _jm_f_139($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Const'.default
    return 1;
}

# check json_model_23_map_definitions (.'$tight#Const'.definitions)
sub _jm_f_140($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Const'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Const'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_23_map_description (.'$tight#Const'.description)
sub _jm_f_141($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Const'.description
    return jm_is_string($val);
}

# check json_model_23_map_examples (.'$tight#Const'.examples)
sub _jm_f_142($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Const'.examples
    return jm_is_array($val);
}

# check json_model_23_map_id (.'$tight#Const'.id)
sub _jm_f_143($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Const'.id
    return jm_is_string($val);
}

# check json_model_23_map_title (.'$tight#Const'.title)
sub _jm_f_144($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Const'.title
    return jm_is_string($val);
}


# check $tight#Const (.'$tight#Const')
sub json_model_23($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Const'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'const')
        {
            # handle must const property
            $must_count++;
            # .'$tight#Const'.const
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_23_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check $tight#const (.'$tight#const')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$tight#const'
    # .'$tight#const'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$tight#const'.'|'.1
        $res = jm_is_boolean($val);
        if (! $res)
        {
            # .'$tight#const'.'|'.2
            $res = jm_is_integer($val);
            if (! $res)
            {
                # .'$tight#const'.'|'.3
                $res = jm_is_numeric($val);
                if (! $res)
                {
                    # .'$tight#const'.'|'.4
                    $res = jm_is_string($val);
                }
            }
        }
    }
    return $res;
}

# check json_model_24_map_$comment (.'$tight#Ref'.'$comment')
sub _jm_f_145($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Ref'.'$comment'
    return jm_is_string($val);
}

# check json_model_24_map_$defs (.'$tight#Ref'.'$defs')
sub _jm_f_146($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Ref'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Ref'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_24_map_$id (.'$tight#Ref'.'$id')
sub _jm_f_147($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Ref'.'$id'
    return jm_is_string($val);
}

# check json_model_24_map_$schema (.'$tight#Ref'.'$schema')
sub _jm_f_148($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Ref'.'$schema'
    return jm_is_string($val);
}

# check json_model_24_map_default (.'$tight#Ref'.default)
sub _jm_f_149($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Ref'.default
    return 1;
}

# check json_model_24_map_definitions (.'$tight#Ref'.definitions)
sub _jm_f_150($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Ref'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#Ref'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_24_map_description (.'$tight#Ref'.description)
sub _jm_f_151($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Ref'.description
    return jm_is_string($val);
}

# check json_model_24_map_examples (.'$tight#Ref'.examples)
sub _jm_f_152($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Ref'.examples
    return jm_is_array($val);
}

# check json_model_24_map_id (.'$tight#Ref'.id)
sub _jm_f_153($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Ref'.id
    return jm_is_string($val);
}

# check json_model_24_map_title (.'$tight#Ref'.title)
sub _jm_f_154($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Ref'.title
    return jm_is_string($val);
}


# check $tight#Ref (.'$tight#Ref')
sub json_model_24($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#Ref'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '$ref')
        {
            # handle must $ref property
            $must_count++;
            # .'$tight#Ref'.'$ref'
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_24_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 1;
}

# check $tight#Schema (.'$tight#Schema')
sub json_model_26($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$tight#Schema'
    # .'$tight#Schema'.'|'.0
    $res = jm_is_boolean($val);
    if (! $res)
    {
        # .'$tight#Schema'.'|'.1
        $res = json_model_25($val, $path, $rep);
    }
    return $res;
}

# check json_model_28_map_$comment (.'$tight#EnumString'.'$comment')
sub _jm_f_155($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumString'.'$comment'
    return jm_is_string($val);
}

# check json_model_28_map_$defs (.'$tight#EnumString'.'$defs')
sub _jm_f_156($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumString'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#EnumString'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_28_map_$id (.'$tight#EnumString'.'$id')
sub _jm_f_157($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumString'.'$id'
    return jm_is_string($val);
}

# check json_model_28_map_$schema (.'$tight#EnumString'.'$schema')
sub _jm_f_158($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumString'.'$schema'
    return jm_is_string($val);
}

# check json_model_28_map_default (.'$tight#EnumString'.default)
sub _jm_f_159($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumString'.default
    return 1;
}

# check json_model_28_map_definitions (.'$tight#EnumString'.definitions)
sub _jm_f_160($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumString'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#EnumString'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_28_map_description (.'$tight#EnumString'.description)
sub _jm_f_161($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumString'.description
    return jm_is_string($val);
}

# check json_model_28_map_examples (.'$tight#EnumString'.examples)
sub _jm_f_162($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumString'.examples
    return jm_is_array($val);
}

# check json_model_28_map_id (.'$tight#EnumString'.id)
sub _jm_f_163($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumString'.id
    return jm_is_string($val);
}

# check json_model_28_map_title (.'$tight#EnumString'.title)
sub _jm_f_164($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumString'.title
    return jm_is_string($val);
}


# check $tight#EnumString (.'$tight#EnumString')
sub json_model_28($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumString'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'enum')
        {
            # handle must enum property
            $must_count++;
            # .'$tight#EnumString'.enum
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_5_idx (0 .. $#$pval)
                {
                    my $arr_5_item = $$pval[$arr_5_idx];
                    # .'$tight#EnumString'.enum.0
                    $res = jm_is_string($arr_5_item);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#EnumString'.type
            $res = jm_is_string($pval) && $pval eq 'string';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_28_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# check json_model_29_map_$comment (.'$tight#EnumNum'.'$comment')
sub _jm_f_165($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumNum'.'$comment'
    return jm_is_string($val);
}

# check json_model_29_map_$defs (.'$tight#EnumNum'.'$defs')
sub _jm_f_166($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumNum'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#EnumNum'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_29_map_$id (.'$tight#EnumNum'.'$id')
sub _jm_f_167($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumNum'.'$id'
    return jm_is_string($val);
}

# check json_model_29_map_$schema (.'$tight#EnumNum'.'$schema')
sub _jm_f_168($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumNum'.'$schema'
    return jm_is_string($val);
}

# check json_model_29_map_default (.'$tight#EnumNum'.default)
sub _jm_f_169($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumNum'.default
    return 1;
}

# check json_model_29_map_definitions (.'$tight#EnumNum'.definitions)
sub _jm_f_170($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumNum'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#EnumNum'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_29_map_description (.'$tight#EnumNum'.description)
sub _jm_f_171($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumNum'.description
    return jm_is_string($val);
}

# check json_model_29_map_examples (.'$tight#EnumNum'.examples)
sub _jm_f_172($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumNum'.examples
    return jm_is_array($val);
}

# check json_model_29_map_id (.'$tight#EnumNum'.id)
sub _jm_f_173($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumNum'.id
    return jm_is_string($val);
}

# check json_model_29_map_title (.'$tight#EnumNum'.title)
sub _jm_f_174($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumNum'.title
    return jm_is_string($val);
}


# check $tight#EnumNum (.'$tight#EnumNum')
sub json_model_29($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumNum'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'enum')
        {
            # handle must enum property
            $must_count++;
            # .'$tight#EnumNum'.enum
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_6_idx (0 .. $#$pval)
                {
                    my $arr_6_item = $$pval[$arr_6_idx];
                    # .'$tight#EnumNum'.enum.0
                    $res = jm_is_numeric($arr_6_item);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#EnumNum'.type
            $res = jm_is_string($pval) && $pval eq 'number';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_29_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# check json_model_30_map_$comment (.'$tight#EnumInt'.'$comment')
sub _jm_f_175($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumInt'.'$comment'
    return jm_is_string($val);
}

# check json_model_30_map_$defs (.'$tight#EnumInt'.'$defs')
sub _jm_f_176($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumInt'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#EnumInt'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_30_map_$id (.'$tight#EnumInt'.'$id')
sub _jm_f_177($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumInt'.'$id'
    return jm_is_string($val);
}

# check json_model_30_map_$schema (.'$tight#EnumInt'.'$schema')
sub _jm_f_178($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumInt'.'$schema'
    return jm_is_string($val);
}

# check json_model_30_map_default (.'$tight#EnumInt'.default)
sub _jm_f_179($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumInt'.default
    return 1;
}

# check json_model_30_map_definitions (.'$tight#EnumInt'.definitions)
sub _jm_f_180($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumInt'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#EnumInt'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_30_map_description (.'$tight#EnumInt'.description)
sub _jm_f_181($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumInt'.description
    return jm_is_string($val);
}

# check json_model_30_map_examples (.'$tight#EnumInt'.examples)
sub _jm_f_182($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumInt'.examples
    return jm_is_array($val);
}

# check json_model_30_map_id (.'$tight#EnumInt'.id)
sub _jm_f_183($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumInt'.id
    return jm_is_string($val);
}

# check json_model_30_map_title (.'$tight#EnumInt'.title)
sub _jm_f_184($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumInt'.title
    return jm_is_string($val);
}


# check $tight#EnumInt (.'$tight#EnumInt')
sub json_model_30($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#EnumInt'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'enum')
        {
            # handle must enum property
            $must_count++;
            # .'$tight#EnumInt'.enum
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_7_idx (0 .. $#$pval)
                {
                    my $arr_7_item = $$pval[$arr_7_idx];
                    # .'$tight#EnumInt'.enum.0
                    $res = jm_is_integer($arr_7_item);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#EnumInt'.type
            $res = jm_is_string($pval) && $pval eq 'integer';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_30_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# check json_model_31_map_$comment (.'$tight#ConstString'.'$comment')
sub _jm_f_185($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstString'.'$comment'
    return jm_is_string($val);
}

# check json_model_31_map_$defs (.'$tight#ConstString'.'$defs')
sub _jm_f_186($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstString'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#ConstString'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_31_map_$id (.'$tight#ConstString'.'$id')
sub _jm_f_187($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstString'.'$id'
    return jm_is_string($val);
}

# check json_model_31_map_$schema (.'$tight#ConstString'.'$schema')
sub _jm_f_188($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstString'.'$schema'
    return jm_is_string($val);
}

# check json_model_31_map_default (.'$tight#ConstString'.default)
sub _jm_f_189($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstString'.default
    return 1;
}

# check json_model_31_map_definitions (.'$tight#ConstString'.definitions)
sub _jm_f_190($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstString'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#ConstString'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_31_map_description (.'$tight#ConstString'.description)
sub _jm_f_191($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstString'.description
    return jm_is_string($val);
}

# check json_model_31_map_examples (.'$tight#ConstString'.examples)
sub _jm_f_192($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstString'.examples
    return jm_is_array($val);
}

# check json_model_31_map_id (.'$tight#ConstString'.id)
sub _jm_f_193($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstString'.id
    return jm_is_string($val);
}

# check json_model_31_map_title (.'$tight#ConstString'.title)
sub _jm_f_194($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstString'.title
    return jm_is_string($val);
}


# check $tight#ConstString (.'$tight#ConstString')
sub json_model_31($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstString'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'const')
        {
            # handle must const property
            $must_count++;
            # .'$tight#ConstString'.const
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#ConstString'.type
            $res = jm_is_string($pval) && $pval eq 'string';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_31_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# check json_model_32_map_$comment (.'$tight#ConstNum'.'$comment')
sub _jm_f_195($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstNum'.'$comment'
    return jm_is_string($val);
}

# check json_model_32_map_$defs (.'$tight#ConstNum'.'$defs')
sub _jm_f_196($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstNum'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#ConstNum'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_32_map_$id (.'$tight#ConstNum'.'$id')
sub _jm_f_197($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstNum'.'$id'
    return jm_is_string($val);
}

# check json_model_32_map_$schema (.'$tight#ConstNum'.'$schema')
sub _jm_f_198($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstNum'.'$schema'
    return jm_is_string($val);
}

# check json_model_32_map_default (.'$tight#ConstNum'.default)
sub _jm_f_199($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstNum'.default
    return 1;
}

# check json_model_32_map_definitions (.'$tight#ConstNum'.definitions)
sub _jm_f_200($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstNum'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#ConstNum'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_32_map_description (.'$tight#ConstNum'.description)
sub _jm_f_201($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstNum'.description
    return jm_is_string($val);
}

# check json_model_32_map_examples (.'$tight#ConstNum'.examples)
sub _jm_f_202($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstNum'.examples
    return jm_is_array($val);
}

# check json_model_32_map_id (.'$tight#ConstNum'.id)
sub _jm_f_203($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstNum'.id
    return jm_is_string($val);
}

# check json_model_32_map_title (.'$tight#ConstNum'.title)
sub _jm_f_204($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstNum'.title
    return jm_is_string($val);
}


# check $tight#ConstNum (.'$tight#ConstNum')
sub json_model_32($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstNum'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'const')
        {
            # handle must const property
            $must_count++;
            # .'$tight#ConstNum'.const
            $res = jm_is_numeric($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#ConstNum'.type
            $res = jm_is_string($pval) && $pval eq 'number';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_32_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# check json_model_33_map_$comment (.'$tight#ConstInt'.'$comment')
sub _jm_f_205($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstInt'.'$comment'
    return jm_is_string($val);
}

# check json_model_33_map_$defs (.'$tight#ConstInt'.'$defs')
sub _jm_f_206($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstInt'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#ConstInt'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_33_map_$id (.'$tight#ConstInt'.'$id')
sub _jm_f_207($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstInt'.'$id'
    return jm_is_string($val);
}

# check json_model_33_map_$schema (.'$tight#ConstInt'.'$schema')
sub _jm_f_208($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstInt'.'$schema'
    return jm_is_string($val);
}

# check json_model_33_map_default (.'$tight#ConstInt'.default)
sub _jm_f_209($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstInt'.default
    return 1;
}

# check json_model_33_map_definitions (.'$tight#ConstInt'.definitions)
sub _jm_f_210($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstInt'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#ConstInt'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_33_map_description (.'$tight#ConstInt'.description)
sub _jm_f_211($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstInt'.description
    return jm_is_string($val);
}

# check json_model_33_map_examples (.'$tight#ConstInt'.examples)
sub _jm_f_212($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstInt'.examples
    return jm_is_array($val);
}

# check json_model_33_map_id (.'$tight#ConstInt'.id)
sub _jm_f_213($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstInt'.id
    return jm_is_string($val);
}

# check json_model_33_map_title (.'$tight#ConstInt'.title)
sub _jm_f_214($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstInt'.title
    return jm_is_string($val);
}


# check $tight#ConstInt (.'$tight#ConstInt')
sub json_model_33($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstInt'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'const')
        {
            # handle must const property
            $must_count++;
            # .'$tight#ConstInt'.const
            $res = jm_is_integer($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#ConstInt'.type
            $res = jm_is_string($pval) && $pval eq 'integer';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_33_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}

# check json_model_34_map_$comment (.'$tight#ConstBool'.'$comment')
sub _jm_f_215($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstBool'.'$comment'
    return jm_is_string($val);
}

# check json_model_34_map_$defs (.'$tight#ConstBool'.'$defs')
sub _jm_f_216($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstBool'.'$defs'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#ConstBool'.'$defs'.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_34_map_$id (.'$tight#ConstBool'.'$id')
sub _jm_f_217($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstBool'.'$id'
    return jm_is_string($val);
}

# check json_model_34_map_$schema (.'$tight#ConstBool'.'$schema')
sub _jm_f_218($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstBool'.'$schema'
    return jm_is_string($val);
}

# check json_model_34_map_default (.'$tight#ConstBool'.default)
sub _jm_f_219($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstBool'.default
    return 1;
}

# check json_model_34_map_definitions (.'$tight#ConstBool'.definitions)
sub _jm_f_220($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstBool'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$tight#ConstBool'.definitions.''
        $res = json_model_26($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_34_map_description (.'$tight#ConstBool'.description)
sub _jm_f_221($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstBool'.description
    return jm_is_string($val);
}

# check json_model_34_map_examples (.'$tight#ConstBool'.examples)
sub _jm_f_222($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstBool'.examples
    return jm_is_array($val);
}

# check json_model_34_map_id (.'$tight#ConstBool'.id)
sub _jm_f_223($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstBool'.id
    return jm_is_string($val);
}

# check json_model_34_map_title (.'$tight#ConstBool'.title)
sub _jm_f_224($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstBool'.title
    return jm_is_string($val);
}


# check $tight#ConstBool (.'$tight#ConstBool')
sub json_model_34($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$tight#ConstBool'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'const')
        {
            # handle must const property
            $must_count++;
            # .'$tight#ConstBool'.const
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$tight#ConstBool'.type
            $res = jm_is_string($pval) && $pval eq 'boolean';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $json_model_34_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return $must_count == 2;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_map_0 = (
            'null' => \&json_model_18,
            'boolean' => \&json_model_17,
            'integer' => \&json_model_15,
            'number' => \&json_model_16,
            'string' => \&json_model_12,
            'array' => \&json_model_13,
            'object' => \&json_model_14,
        );
        %json_model_11_map = (
            '$comment' => \&_jm_f_0,
            '$defs' => \&_jm_f_1,
            '$id' => \&_jm_f_2,
            '$schema' => \&_jm_f_3,
            'default' => \&_jm_f_4,
            'definitions' => \&_jm_f_5,
            'description' => \&_jm_f_6,
            'examples' => \&_jm_f_7,
            'id' => \&_jm_f_8,
            'title' => \&_jm_f_9,
        );
        %_jm_cst_0 = (
            'uri' => 1,
            'uri-reference' => 1,
            'iri' => 1,
            'iri-reference' => 1,
            'date' => 1,
            'time' => 1,
            'date-time' => 1,
            'ipv4' => 1,
            'ipv6' => 1,
            'regex' => 1,
            'uuid' => 1,
            'hostname' => 1,
            'email' => 1,
            'idn-hostname' => 1,
            'idn-email' => 1,
            'duration' => 1,
            'int32' => 1,
            'int64' => 1,
            'uint' => 1,
            'uint32' => 1,
            'uint64' => 1,
            'json-pointer' => 1,
            'relative-json-pointer' => 1,
            'byte' => 1,
            'double' => 1,
            'int' => 1,
            'mime-type' => 1,
        );
        %json_model_12_map = (
            '$comment' => \&_jm_f_10,
            '$defs' => \&_jm_f_11,
            '$id' => \&_jm_f_12,
            '$schema' => \&_jm_f_13,
            'default' => \&_jm_f_14,
            'definitions' => \&_jm_f_15,
            'description' => \&_jm_f_16,
            'examples' => \&_jm_f_17,
            'format' => \&_jm_f_18,
            'id' => \&_jm_f_19,
            'maxLength' => \&_jm_f_20,
            'minLength' => \&_jm_f_21,
            'pattern' => \&_jm_f_22,
            'title' => \&_jm_f_23,
        );
        %json_model_13_map = (
            '$comment' => \&_jm_f_24,
            '$defs' => \&_jm_f_25,
            '$id' => \&_jm_f_26,
            '$schema' => \&_jm_f_27,
            'additionalItems' => \&json_model_26,
            'default' => \&_jm_f_28,
            'definitions' => \&_jm_f_29,
            'description' => \&_jm_f_30,
            'examples' => \&_jm_f_31,
            'id' => \&_jm_f_32,
            'items' => \&_jm_f_33,
            'maxItems' => \&_jm_f_34,
            'minItems' => \&_jm_f_35,
            'prefixItems' => \&json_model_6,
            'title' => \&_jm_f_36,
            'uniqueItems' => \&_jm_f_37,
        );
        %json_model_14_map = (
            '$comment' => \&_jm_f_38,
            '$defs' => \&_jm_f_39,
            '$id' => \&_jm_f_40,
            '$schema' => \&_jm_f_41,
            'additionalProperties' => \&json_model_26,
            'default' => \&_jm_f_42,
            'definitions' => \&_jm_f_43,
            'description' => \&_jm_f_44,
            'examples' => \&_jm_f_45,
            'id' => \&_jm_f_46,
            'patternProperties' => \&_jm_f_47,
            'properties' => \&_jm_f_48,
            'required' => \&_jm_f_49,
            'title' => \&_jm_f_50,
        );
        %json_model_15_map = (
            '$comment' => \&_jm_f_51,
            '$defs' => \&_jm_f_52,
            '$id' => \&_jm_f_53,
            '$schema' => \&_jm_f_54,
            'default' => \&_jm_f_55,
            'definitions' => \&_jm_f_56,
            'description' => \&_jm_f_57,
            'examples' => \&_jm_f_58,
            'id' => \&_jm_f_59,
            'maximum' => \&_jm_f_60,
            'minimum' => \&_jm_f_61,
            'title' => \&_jm_f_62,
        );
        %json_model_16_map = (
            '$comment' => \&_jm_f_63,
            '$defs' => \&_jm_f_64,
            '$id' => \&_jm_f_65,
            '$schema' => \&_jm_f_66,
            'default' => \&_jm_f_67,
            'definitions' => \&_jm_f_68,
            'description' => \&_jm_f_69,
            'examples' => \&_jm_f_70,
            'id' => \&_jm_f_71,
            'maximum' => \&_jm_f_72,
            'minimum' => \&_jm_f_73,
            'title' => \&_jm_f_74,
        );
        %json_model_17_map = (
            '$comment' => \&_jm_f_75,
            '$defs' => \&_jm_f_76,
            '$id' => \&_jm_f_77,
            '$schema' => \&_jm_f_78,
            'default' => \&_jm_f_79,
            'definitions' => \&_jm_f_80,
            'description' => \&_jm_f_81,
            'examples' => \&_jm_f_82,
            'id' => \&_jm_f_83,
            'title' => \&_jm_f_84,
        );
        %json_model_18_map = (
            '$comment' => \&_jm_f_85,
            '$defs' => \&_jm_f_86,
            '$id' => \&_jm_f_87,
            '$schema' => \&_jm_f_88,
            'default' => \&_jm_f_89,
            'definitions' => \&_jm_f_90,
            'description' => \&_jm_f_91,
            'examples' => \&_jm_f_92,
            'id' => \&_jm_f_93,
            'title' => \&_jm_f_94,
        );
        %json_model_19_map = (
            '$comment' => \&_jm_f_95,
            '$defs' => \&_jm_f_96,
            '$id' => \&_jm_f_97,
            '$schema' => \&_jm_f_98,
            'default' => \&_jm_f_99,
            'definitions' => \&_jm_f_100,
            'description' => \&_jm_f_101,
            'examples' => \&_jm_f_102,
            'id' => \&_jm_f_103,
            'title' => \&_jm_f_104,
        );
        %json_model_20_map = (
            '$comment' => \&_jm_f_105,
            '$defs' => \&_jm_f_106,
            '$id' => \&_jm_f_107,
            '$schema' => \&_jm_f_108,
            'default' => \&_jm_f_109,
            'definitions' => \&_jm_f_110,
            'description' => \&_jm_f_111,
            'examples' => \&_jm_f_112,
            'id' => \&_jm_f_113,
            'title' => \&_jm_f_114,
        );
        %json_model_21_map = (
            '$comment' => \&_jm_f_115,
            '$defs' => \&_jm_f_116,
            '$id' => \&_jm_f_117,
            '$schema' => \&_jm_f_118,
            'default' => \&_jm_f_119,
            'definitions' => \&_jm_f_120,
            'description' => \&_jm_f_121,
            'examples' => \&_jm_f_122,
            'id' => \&_jm_f_123,
            'title' => \&_jm_f_124,
        );
        %json_model_22_map = (
            '$comment' => \&_jm_f_125,
            '$defs' => \&_jm_f_126,
            '$id' => \&_jm_f_127,
            '$schema' => \&_jm_f_128,
            'default' => \&_jm_f_129,
            'definitions' => \&_jm_f_130,
            'description' => \&_jm_f_131,
            'examples' => \&_jm_f_132,
            'id' => \&_jm_f_133,
            'title' => \&_jm_f_134,
        );
        %json_model_23_map = (
            '$comment' => \&_jm_f_135,
            '$defs' => \&_jm_f_136,
            '$id' => \&_jm_f_137,
            '$schema' => \&_jm_f_138,
            'default' => \&_jm_f_139,
            'definitions' => \&_jm_f_140,
            'description' => \&_jm_f_141,
            'examples' => \&_jm_f_142,
            'id' => \&_jm_f_143,
            'title' => \&_jm_f_144,
        );
        %json_model_24_map = (
            '$comment' => \&_jm_f_145,
            '$defs' => \&_jm_f_146,
            '$id' => \&_jm_f_147,
            '$schema' => \&_jm_f_148,
            'default' => \&_jm_f_149,
            'definitions' => \&_jm_f_150,
            'description' => \&_jm_f_151,
            'examples' => \&_jm_f_152,
            'id' => \&_jm_f_153,
            'title' => \&_jm_f_154,
        );
        %json_model_28_map = (
            '$comment' => \&_jm_f_155,
            '$defs' => \&_jm_f_156,
            '$id' => \&_jm_f_157,
            '$schema' => \&_jm_f_158,
            'default' => \&_jm_f_159,
            'definitions' => \&_jm_f_160,
            'description' => \&_jm_f_161,
            'examples' => \&_jm_f_162,
            'id' => \&_jm_f_163,
            'title' => \&_jm_f_164,
        );
        %json_model_29_map = (
            '$comment' => \&_jm_f_165,
            '$defs' => \&_jm_f_166,
            '$id' => \&_jm_f_167,
            '$schema' => \&_jm_f_168,
            'default' => \&_jm_f_169,
            'definitions' => \&_jm_f_170,
            'description' => \&_jm_f_171,
            'examples' => \&_jm_f_172,
            'id' => \&_jm_f_173,
            'title' => \&_jm_f_174,
        );
        %json_model_30_map = (
            '$comment' => \&_jm_f_175,
            '$defs' => \&_jm_f_176,
            '$id' => \&_jm_f_177,
            '$schema' => \&_jm_f_178,
            'default' => \&_jm_f_179,
            'definitions' => \&_jm_f_180,
            'description' => \&_jm_f_181,
            'examples' => \&_jm_f_182,
            'id' => \&_jm_f_183,
            'title' => \&_jm_f_184,
        );
        %json_model_31_map = (
            '$comment' => \&_jm_f_185,
            '$defs' => \&_jm_f_186,
            '$id' => \&_jm_f_187,
            '$schema' => \&_jm_f_188,
            'default' => \&_jm_f_189,
            'definitions' => \&_jm_f_190,
            'description' => \&_jm_f_191,
            'examples' => \&_jm_f_192,
            'id' => \&_jm_f_193,
            'title' => \&_jm_f_194,
        );
        %json_model_32_map = (
            '$comment' => \&_jm_f_195,
            '$defs' => \&_jm_f_196,
            '$id' => \&_jm_f_197,
            '$schema' => \&_jm_f_198,
            'default' => \&_jm_f_199,
            'definitions' => \&_jm_f_200,
            'description' => \&_jm_f_201,
            'examples' => \&_jm_f_202,
            'id' => \&_jm_f_203,
            'title' => \&_jm_f_204,
        );
        %json_model_33_map = (
            '$comment' => \&_jm_f_205,
            '$defs' => \&_jm_f_206,
            '$id' => \&_jm_f_207,
            '$schema' => \&_jm_f_208,
            'default' => \&_jm_f_209,
            'definitions' => \&_jm_f_210,
            'description' => \&_jm_f_211,
            'examples' => \&_jm_f_212,
            'id' => \&_jm_f_213,
            'title' => \&_jm_f_214,
        );
        %json_model_34_map = (
            '$comment' => \&_jm_f_215,
            '$defs' => \&_jm_f_216,
            '$id' => \&_jm_f_217,
            '$schema' => \&_jm_f_218,
            'default' => \&_jm_f_219,
            'definitions' => \&_jm_f_220,
            'description' => \&_jm_f_221,
            'examples' => \&_jm_f_222,
            'id' => \&_jm_f_223,
            'title' => \&_jm_f_224,
        );
        %check_model_map = (
            '' => \&json_model_27,
            'tight' => \&json_model_27,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_map_0 = ();
        %json_model_11_map = ();
        %_jm_cst_0 = ();
        %json_model_12_map = ();
        %json_model_13_map = ();
        %json_model_14_map = ();
        %json_model_15_map = ();
        %json_model_16_map = ();
        %json_model_17_map = ();
        %json_model_18_map = ();
        %json_model_19_map = ();
        %json_model_20_map = ();
        %json_model_21_map = ();
        %json_model_22_map = ();
        %json_model_23_map = ();
        %json_model_24_map = ();
        %json_model_28_map = ();
        %json_model_29_map = ();
        %json_model_30_map = ();
        %json_model_31_map = ();
        %json_model_32_map = ();
        %json_model_33_map = ();
        %json_model_34_map = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
