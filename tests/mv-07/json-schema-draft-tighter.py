#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
_jm_cst_1: set[str]
json_model_10_map: PropMap
json_model_11_map: PropMap
json_model_12_map: PropMap
json_model_13_map: PropMap
json_model_14_map: PropMap
_jm_map_0: dict[str, str]
check_model_map: PropMap

# check $const (.'$const')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$const'
    # .'$const'.'|'.0
    res: bool = val is None
    if not res:
        rep is None or rep.append(("not null [.'$const'.'|'.0]", path))
    if not res:
        # .'$const'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$const'.'|'.1]", path))
        if not res:
            # .'$const'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$const'.'|'.2]", path))
            if not res:
                # .'$const'.'|'.3
                res = isinstance(val, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [.'$const'.'|'.3]", path))
                if not res:
                    # .'$const'.'|'.4
                    res = isinstance(val, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$const'.'|'.4]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$const'.'|']", path))
    return res

# check $enum (.'$enum')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$enum'
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("unexpected type [.'$enum'.'|']", path))
    if res:
        # .'$enum'.'|'.0
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # .'$enum'.'|'.0.0
            res = isinstance(arr_2_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$enum'.'|'.0.0]", arr_2_lpath if path is not None else None))
                break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$enum'.'|'.0]", path))
        if not res:
            # .'$enum'.'|'.1
            for arr_1_idx, arr_1_item in enumerate(val):
                arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
                # .'$enum'.'|'.1.0
                res = isinstance(arr_1_item, int) and not isinstance(arr_1_item, bool)
                if not res:
                    rep is None or rep.append(("not a -1 strict int [.'$enum'.'|'.1.0]", arr_1_lpath if path is not None else None))
                    break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$enum'.'|'.1]", path))
            if not res:
                # .'$enum'.'|'.2
                for arr_0_idx, arr_0_item in enumerate(val):
                    arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
                    # .'$enum'.'|'.2.0
                    res = isinstance(arr_0_item, bool)
                    if not res:
                        rep is None or rep.append(("not a bool [.'$enum'.'|'.2.0]", arr_0_lpath if path is not None else None))
                        break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$enum'.'|'.2]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$enum'.'|']", path))
    return res

# check $schemaArray (.'$schemaArray')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schemaArray'
    res: bool = isinstance(val, list)
    if res:
        for arr_3_idx, arr_3_item in enumerate(val):
            arr_3_lpath: Path = (path + [ arr_3_idx ]) if path is not None else None
            # .'$schemaArray'.0
            res = json_model_24(arr_3_item, arr_3_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schemaArray'.0]", arr_3_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schemaArray']", path))
    return res


# check $stringKeywords (.'$stringKeywords')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$stringKeywords'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$stringKeywords']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "format":
            # handle may format property
            # .'$stringKeywords'.format
            res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_0
            if not res:
                rep is None or rep.append(("value not in enum [.'$stringKeywords'.format.'|']", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$stringKeywords'.format]", lpath_0 if path is not None else None))
                return False
        elif prop == "pattern":
            # handle may pattern property
            # .'$stringKeywords'.pattern
            res = is_valid_regex(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $REGEX [.'$stringKeywords'.pattern]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$stringKeywords'.pattern]", lpath_0 if path is not None else None))
                return False
        elif prop == "maxLength":
            # handle may maxLength property
            # .'$stringKeywords'.maxLength
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.'$stringKeywords'.maxLength]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$stringKeywords'.maxLength]", lpath_0 if path is not None else None))
                return False
        elif prop == "minLength":
            # handle may minLength property
            # .'$stringKeywords'.minLength
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.'$stringKeywords'.minLength]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$stringKeywords'.minLength]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$stringKeywords']", lpath_0 if path is not None else None))
            return False
    return True

# check $arrayKeywords (.'$arrayKeywords')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # not included: containsâ€¦
    # .'$arrayKeywords'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$arrayKeywords']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "items":
            # handle may items property
            # .'$arrayKeywords'.items
            # .'$arrayKeywords'.items.'|'.0
            res = json_model_24(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$arrayKeywords'.items.'|'.0]", lpath_1 if path is not None else None))
            if not res:
                # .'$arrayKeywords'.items.'|'.1
                res = json_model_4(pval, lpath_1 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $schemaArray [.'$arrayKeywords'.items.'|'.1]", lpath_1 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$arrayKeywords'.items.'|']", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$arrayKeywords'.items]", lpath_1 if path is not None else None))
                return False
        elif prop == "maxItems":
            # handle may maxItems property
            # .'$arrayKeywords'.maxItems
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.'$arrayKeywords'.maxItems]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$arrayKeywords'.maxItems]", lpath_1 if path is not None else None))
                return False
        elif prop == "minItems":
            # handle may minItems property
            # .'$arrayKeywords'.minItems
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.'$arrayKeywords'.minItems]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$arrayKeywords'.minItems]", lpath_1 if path is not None else None))
                return False
        elif prop == "prefixItems":
            # handle may prefixItems property
            # .'$arrayKeywords'.prefixItems
            res = json_model_4(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $schemaArray [.'$arrayKeywords'.prefixItems]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$arrayKeywords'.prefixItems]", lpath_1 if path is not None else None))
                return False
        elif prop == "uniqueItems":
            # handle may uniqueItems property
            # .'$arrayKeywords'.uniqueItems
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$arrayKeywords'.uniqueItems]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$arrayKeywords'.uniqueItems]", lpath_1 if path is not None else None))
                return False
        elif prop == "additionalItems":
            # handle may additionalItems property
            # .'$arrayKeywords'.additionalItems
            res = json_model_24(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$arrayKeywords'.additionalItems]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$arrayKeywords'.additionalItems]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$arrayKeywords']", lpath_1 if path is not None else None))
            return False
    return True

# object .'$objectKeywords'.properties
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$objectKeywords'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$objectKeywords'.properties.''
        res = json_model_24(pval, lpath_3 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$objectKeywords'.properties.'']", lpath_3 if path is not None else None))
            return False
    return True

# object .'$objectKeywords'.patternProperties
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$objectKeywords'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if is_valid_regex(prop, lpath_4 if path is not None else None, rep):
            # handle 1 key props
            # .'$objectKeywords'.patternProperties.'$REGEX'
            res = json_model_24(pval, lpath_4 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$objectKeywords'.patternProperties.'$REGEX']", lpath_4 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$objectKeywords'.patternProperties]", lpath_4 if path is not None else None))
            return False
    return True

# check $objectKeywords (.'$objectKeywords')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # not included: dependentRequired, min/maxPropsâ€¦
    # .'$objectKeywords'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$objectKeywords']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "required":
            # handle may required property
            # .'$objectKeywords'.required
            res = isinstance(pval, list)
            if res:
                for arr_4_idx, arr_4_item in enumerate(pval):
                    arr_4_lpath: Path = ((lpath_2 if path is not None else None) + [ arr_4_idx ]) if (lpath_2 if path is not None else None) is not None else None
                    # .'$objectKeywords'.required.0
                    res = isinstance(arr_4_item, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$objectKeywords'.required.0]", arr_4_lpath if (lpath_2 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$objectKeywords'.required]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$objectKeywords'.required]", lpath_2 if path is not None else None))
                return False
        elif prop == "properties":
            # handle may properties property
            # .'$objectKeywords'.properties
            res = _jm_obj_0(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$objectKeywords'.properties]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$objectKeywords'.properties]", lpath_2 if path is not None else None))
                return False
        elif prop == "patternProperties":
            # handle may patternProperties property
            # .'$objectKeywords'.patternProperties
            res = _jm_obj_1(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$objectKeywords'.patternProperties]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$objectKeywords'.patternProperties]", lpath_2 if path is not None else None))
                return False
        elif prop == "additionalProperties":
            # handle may additionalProperties property
            # .'$objectKeywords'.additionalProperties
            res = json_model_24(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$objectKeywords'.additionalProperties]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$objectKeywords'.additionalProperties]", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$objectKeywords']", lpath_2 if path is not None else None))
            return False
    return True

# check $numberKeywords (.'$numberKeywords')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # not included: exclusive*, multipleOfâ€¦
    # .'$numberKeywords'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$numberKeywords']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "maximum":
            # handle may maximum property
            # .'$numberKeywords'.maximum
            res = isinstance(pval, float)
            if not res:
                rep is None or rep.append(("not a -1.0 strict float [.'$numberKeywords'.maximum]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$numberKeywords'.maximum]", lpath_5 if path is not None else None))
                return False
        elif prop == "minimum":
            # handle may minimum property
            # .'$numberKeywords'.minimum
            res = isinstance(pval, float)
            if not res:
                rep is None or rep.append(("not a -1.0 strict float [.'$numberKeywords'.minimum]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$numberKeywords'.minimum]", lpath_5 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$numberKeywords']", lpath_5 if path is not None else None))
            return False
    return True

# object .'$metas'.'$defs'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$metas'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$metas'.'$defs'.''
        res = json_model_24(pval, lpath_7 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$metas'.'$defs'.'']", lpath_7 if path is not None else None))
            return False
    return True

# object .'$metas'.definitions
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$metas'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$metas'.definitions.''
        res = json_model_24(pval, lpath_8 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$metas'.definitions.'']", lpath_8 if path is not None else None))
            return False
    return True

# check $metas (.'$metas')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # there is a trick with $schemaâ€¦ in RootSchema below
    # .'$metas'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$metas']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "id":
            # handle may id property
            # .'$metas'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$metas'.id]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$metas'.id]", lpath_6 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$metas'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$metas'.'$id']", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$metas'.'$id']", lpath_6 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$metas'.'$defs'
            res = _jm_obj_2(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$metas'.'$defs']", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$metas'.'$defs']", lpath_6 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$metas'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$metas'.title]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$metas'.title]", lpath_6 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$metas'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$metas'.'$schema']", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$metas'.'$schema']", lpath_6 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$metas'.default
            res = True
        elif prop == "$comment":
            # handle may $comment property
            # .'$metas'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$metas'.'$comment']", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$metas'.'$comment']", lpath_6 if path is not None else None))
                return False
        elif prop == "examples":
            # handle may examples property
            # .'$metas'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$metas'.examples]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$metas'.examples]", lpath_6 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$metas'.definitions
            res = _jm_obj_3(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$metas'.definitions]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$metas'.definitions]", lpath_6 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$metas'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$metas'.description]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$metas'.description]", lpath_6 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$metas']", lpath_6 if path is not None else None))
            return False
    return True

# check json_model_10_map_$comment (.'$String'.'$comment')
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.'$comment'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$String'.'$comment']", path))
    return res

# check json_model_10_map_$defs (.'$String'.'$defs')
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.'$defs'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$String'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$String'.'$defs'.''
        res = json_model_24(pval, lpath_10 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$String'.'$defs'.'']", lpath_10 if path is not None else None))
            return False
    return True

# check json_model_10_map_$id (.'$String'.'$id')
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.'$id'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$String'.'$id']", path))
    return res

# check json_model_10_map_$schema (.'$String'.'$schema')
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.'$schema'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$String'.'$schema']", path))
    return res

# check json_model_10_map_default (.'$String'.default)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.default
    return True

# check json_model_10_map_definitions (.'$String'.definitions)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.definitions
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$String'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$String'.definitions.''
        res = json_model_24(pval, lpath_11 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$String'.definitions.'']", lpath_11 if path is not None else None))
            return False
    return True

# check json_model_10_map_description (.'$String'.description)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.description
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$String'.description]", path))
    return res

# check json_model_10_map_examples (.'$String'.examples)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.examples
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$String'.examples]", path))
    return res


# check json_model_10_map_format (.'$String'.format)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.format
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_1
    if not res:
        rep is None or rep.append(("value not in enum [.'$String'.format.'|']", path))
    return res

# check json_model_10_map_id (.'$String'.id)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.id
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$String'.id]", path))
    return res

# check json_model_10_map_maxLength (.'$String'.maxLength)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.maxLength
    res: bool = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$String'.maxLength]", path))
    return res

# check json_model_10_map_minLength (.'$String'.minLength)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.minLength
    res: bool = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$String'.minLength]", path))
    return res

# check json_model_10_map_pattern (.'$String'.pattern)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.pattern
    res: bool = is_valid_regex(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $REGEX [.'$String'.pattern]", path))
    return res

# check json_model_10_map_title (.'$String'.title)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'.title
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$String'.title]", path))
    return res


# check $String (.'$String')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$String'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$String']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$String'.type
            res = isinstance(pval, str) and pval == "string"
            if not res:
                rep is None or rep.append(("unexpected string [.'$String'.type]", lpath_9 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$String'.type]", lpath_9 if path is not None else None))
                return False
        elif pfun := json_model_10_map.get(prop):
            # handle 14 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_9 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$String']", lpath_9 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$String']", lpath_9 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$String']", path))
        return False
    return True

# check json_model_11_map_$comment (.'$Array'.'$comment')
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.'$comment'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Array'.'$comment']", path))
    return res

# check json_model_11_map_$defs (.'$Array'.'$defs')
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.'$defs'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Array'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Array'.'$defs'.''
        res = json_model_24(pval, lpath_13 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Array'.'$defs'.'']", lpath_13 if path is not None else None))
            return False
    return True

# check json_model_11_map_$id (.'$Array'.'$id')
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.'$id'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Array'.'$id']", path))
    return res

# check json_model_11_map_$schema (.'$Array'.'$schema')
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.'$schema'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Array'.'$schema']", path))
    return res

# check json_model_11_map_default (.'$Array'.default)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.default
    return True

# check json_model_11_map_definitions (.'$Array'.definitions)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.definitions
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Array'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Array'.definitions.''
        res = json_model_24(pval, lpath_14 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Array'.definitions.'']", lpath_14 if path is not None else None))
            return False
    return True

# check json_model_11_map_description (.'$Array'.description)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.description
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Array'.description]", path))
    return res

# check json_model_11_map_examples (.'$Array'.examples)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.examples
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Array'.examples]", path))
    return res

# check json_model_11_map_id (.'$Array'.id)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.id
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Array'.id]", path))
    return res

# check json_model_11_map_items (.'$Array'.items)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.items
    # .'$Array'.items.'|'.0
    res: bool = json_model_24(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$Array'.items.'|'.0]", path))
    if not res:
        # .'$Array'.items.'|'.1
        res = json_model_4(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$Array'.items.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Array'.items.'|']", path))
    return res

# check json_model_11_map_maxItems (.'$Array'.maxItems)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.maxItems
    res: bool = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$Array'.maxItems]", path))
    return res

# check json_model_11_map_minItems (.'$Array'.minItems)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.minItems
    res: bool = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$Array'.minItems]", path))
    return res

# check json_model_11_map_title (.'$Array'.title)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.title
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Array'.title]", path))
    return res

# check json_model_11_map_uniqueItems (.'$Array'.uniqueItems)
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'.uniqueItems
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Array'.uniqueItems]", path))
    return res


# check $Array (.'$Array')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Array'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Array']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Array'.type
            res = isinstance(pval, str) and pval == "array"
            if not res:
                rep is None or rep.append(("unexpected array [.'$Array'.type]", lpath_12 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Array'.type]", lpath_12 if path is not None else None))
                return False
        elif pfun := json_model_11_map.get(prop):
            # handle 16 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_12 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Array']", lpath_12 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Array']", lpath_12 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Array']", path))
        return False
    return True

# check json_model_12_map_$comment (.'$Object'.'$comment')
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'.'$comment'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Object'.'$comment']", path))
    return res

# check json_model_12_map_$defs (.'$Object'.'$defs')
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'.'$defs'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Object'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Object'.'$defs'.''
        res = json_model_24(pval, lpath_16 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Object'.'$defs'.'']", lpath_16 if path is not None else None))
            return False
    return True

# check json_model_12_map_$id (.'$Object'.'$id')
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'.'$id'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Object'.'$id']", path))
    return res

# check json_model_12_map_$schema (.'$Object'.'$schema')
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'.'$schema'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Object'.'$schema']", path))
    return res

# check json_model_12_map_default (.'$Object'.default)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'.default
    return True

# check json_model_12_map_definitions (.'$Object'.definitions)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'.definitions
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Object'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Object'.definitions.''
        res = json_model_24(pval, lpath_17 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Object'.definitions.'']", lpath_17 if path is not None else None))
            return False
    return True

# check json_model_12_map_description (.'$Object'.description)
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'.description
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Object'.description]", path))
    return res

# check json_model_12_map_examples (.'$Object'.examples)
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'.examples
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Object'.examples]", path))
    return res

# check json_model_12_map_id (.'$Object'.id)
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'.id
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Object'.id]", path))
    return res

# check json_model_12_map_patternProperties (.'$Object'.patternProperties)
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'.patternProperties
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Object'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        if is_valid_regex(prop, lpath_18 if path is not None else None, rep):
            # handle 1 key props
            # .'$Object'.patternProperties.'$REGEX'
            res = json_model_24(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$Object'.patternProperties.'$REGEX']", lpath_18 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Object'.patternProperties]", lpath_18 if path is not None else None))
            return False
    return True

# check json_model_12_map_properties (.'$Object'.properties)
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'.properties
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Object'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Object'.properties.''
        res = json_model_24(pval, lpath_19 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Object'.properties.'']", lpath_19 if path is not None else None))
            return False
    return True

# check json_model_12_map_required (.'$Object'.required)
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'.required
    res: bool = isinstance(val, list)
    if res:
        for arr_5_idx, arr_5_item in enumerate(val):
            arr_5_lpath: Path = (path + [ arr_5_idx ]) if path is not None else None
            # .'$Object'.required.0
            res = isinstance(arr_5_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Object'.required.0]", arr_5_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Object'.required]", path))
    return res

# check json_model_12_map_title (.'$Object'.title)
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'.title
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Object'.title]", path))
    return res


# check $Object (.'$Object')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Object']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Object'.type
            res = isinstance(pval, str) and pval == "object"
            if not res:
                rep is None or rep.append(("unexpected object [.'$Object'.type]", lpath_15 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Object'.type]", lpath_15 if path is not None else None))
                return False
        elif pfun := json_model_12_map.get(prop):
            # handle 14 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_15 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Object']", lpath_15 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Object']", lpath_15 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Object']", path))
        return False
    return True

# check json_model_13_map_$comment (.'$Integer'.'$comment')
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Integer'.'$comment'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Integer'.'$comment']", path))
    return res

# check json_model_13_map_$defs (.'$Integer'.'$defs')
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Integer'.'$defs'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Integer'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Integer'.'$defs'.''
        res = json_model_24(pval, lpath_21 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Integer'.'$defs'.'']", lpath_21 if path is not None else None))
            return False
    return True

# check json_model_13_map_$id (.'$Integer'.'$id')
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Integer'.'$id'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Integer'.'$id']", path))
    return res

# check json_model_13_map_$schema (.'$Integer'.'$schema')
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Integer'.'$schema'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Integer'.'$schema']", path))
    return res

# check json_model_13_map_default (.'$Integer'.default)
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Integer'.default
    return True

# check json_model_13_map_definitions (.'$Integer'.definitions)
def _jm_f_46(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Integer'.definitions
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Integer'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Integer'.definitions.''
        res = json_model_24(pval, lpath_22 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Integer'.definitions.'']", lpath_22 if path is not None else None))
            return False
    return True

# check json_model_13_map_description (.'$Integer'.description)
def _jm_f_47(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Integer'.description
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Integer'.description]", path))
    return res

# check json_model_13_map_examples (.'$Integer'.examples)
def _jm_f_48(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Integer'.examples
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Integer'.examples]", path))
    return res

# check json_model_13_map_id (.'$Integer'.id)
def _jm_f_49(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Integer'.id
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Integer'.id]", path))
    return res

# check json_model_13_map_maximum (.'$Integer'.maximum)
def _jm_f_50(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Integer'.maximum
    res: bool = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$Integer'.maximum]", path))
    return res

# check json_model_13_map_minimum (.'$Integer'.minimum)
def _jm_f_51(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Integer'.minimum
    res: bool = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$Integer'.minimum]", path))
    return res

# check json_model_13_map_title (.'$Integer'.title)
def _jm_f_52(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Integer'.title
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Integer'.title]", path))
    return res


# check $Integer (.'$Integer')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Integer'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Integer']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Integer'.type
            res = isinstance(pval, str) and pval == "integer"
            if not res:
                rep is None or rep.append(("unexpected integer [.'$Integer'.type]", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Integer'.type]", lpath_20 if path is not None else None))
                return False
        elif pfun := json_model_13_map.get(prop):
            # handle 12 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_20 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Integer']", lpath_20 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Integer']", lpath_20 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Integer']", path))
        return False
    return True

# check json_model_14_map_$comment (.'$Number'.'$comment')
def _jm_f_53(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Number'.'$comment'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Number'.'$comment']", path))
    return res

# check json_model_14_map_$defs (.'$Number'.'$defs')
def _jm_f_54(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Number'.'$defs'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Number'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Number'.'$defs'.''
        res = json_model_24(pval, lpath_24 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Number'.'$defs'.'']", lpath_24 if path is not None else None))
            return False
    return True

# check json_model_14_map_$id (.'$Number'.'$id')
def _jm_f_55(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Number'.'$id'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Number'.'$id']", path))
    return res

# check json_model_14_map_$schema (.'$Number'.'$schema')
def _jm_f_56(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Number'.'$schema'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Number'.'$schema']", path))
    return res

# check json_model_14_map_default (.'$Number'.default)
def _jm_f_57(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Number'.default
    return True

# check json_model_14_map_definitions (.'$Number'.definitions)
def _jm_f_58(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Number'.definitions
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Number'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Number'.definitions.''
        res = json_model_24(pval, lpath_25 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Number'.definitions.'']", lpath_25 if path is not None else None))
            return False
    return True

# check json_model_14_map_description (.'$Number'.description)
def _jm_f_59(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Number'.description
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Number'.description]", path))
    return res

# check json_model_14_map_examples (.'$Number'.examples)
def _jm_f_60(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Number'.examples
    res: bool = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Number'.examples]", path))
    return res

# check json_model_14_map_id (.'$Number'.id)
def _jm_f_61(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Number'.id
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Number'.id]", path))
    return res

# check json_model_14_map_maximum (.'$Number'.maximum)
def _jm_f_62(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Number'.maximum
    res: bool = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$Number'.maximum]", path))
    return res

# check json_model_14_map_minimum (.'$Number'.minimum)
def _jm_f_63(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Number'.minimum
    res: bool = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$Number'.minimum]", path))
    return res

# check json_model_14_map_title (.'$Number'.title)
def _jm_f_64(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Number'.title
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Number'.title]", path))
    return res


# check $Number (.'$Number')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Number'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Number']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Number'.type
            res = isinstance(pval, str) and pval == "number"
            if not res:
                rep is None or rep.append(("unexpected number [.'$Number'.type]", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Number'.type]", lpath_23 if path is not None else None))
                return False
        elif pfun := json_model_14_map.get(prop):
            # handle 12 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_23 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Number']", lpath_23 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Number']", lpath_23 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Number']", path))
        return False
    return True

# object .'$Bool'.'$defs'
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Bool'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Bool'.'$defs'.''
        res = json_model_24(pval, lpath_27 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Bool'.'$defs'.'']", lpath_27 if path is not None else None))
            return False
    return True

# object .'$Bool'.definitions
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Bool'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Bool'.definitions.''
        res = json_model_24(pval, lpath_28 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Bool'.definitions.'']", lpath_28 if path is not None else None))
            return False
    return True

# check $Bool (.'$Bool')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Bool'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Bool']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Bool'.type
            res = isinstance(pval, str) and pval == "boolean"
            if not res:
                rep is None or rep.append(("unexpected boolean [.'$Bool'.type]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Bool'.type]", lpath_26 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$Bool'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Bool'.id]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Bool'.id]", lpath_26 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$Bool'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Bool'.'$id']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Bool'.'$id']", lpath_26 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$Bool'.'$defs'
            res = _jm_obj_4(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Bool'.'$defs']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Bool'.'$defs']", lpath_26 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$Bool'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Bool'.title]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Bool'.title]", lpath_26 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$Bool'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Bool'.'$schema']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Bool'.'$schema']", lpath_26 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$Bool'.default
            res = True
        elif prop == "$comment":
            # handle may $comment property
            # .'$Bool'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Bool'.'$comment']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Bool'.'$comment']", lpath_26 if path is not None else None))
                return False
        elif prop == "examples":
            # handle may examples property
            # .'$Bool'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Bool'.examples]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Bool'.examples]", lpath_26 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$Bool'.definitions
            res = _jm_obj_5(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Bool'.definitions]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Bool'.definitions]", lpath_26 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Bool'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Bool'.description]", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Bool'.description]", lpath_26 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Bool']", lpath_26 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Bool']", path))
        return False
    return True

# object .'$Null'.'$defs'
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Null'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Null'.'$defs'.''
        res = json_model_24(pval, lpath_30 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Null'.'$defs'.'']", lpath_30 if path is not None else None))
            return False
    return True

# object .'$Null'.definitions
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Null'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Null'.definitions.''
        res = json_model_24(pval, lpath_31 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Null'.definitions.'']", lpath_31 if path is not None else None))
            return False
    return True

# check $Null (.'$Null')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Null'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Null']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        if prop == "type":
            # handle must type property
            must_count += 1
            # .'$Null'.type
            res = isinstance(pval, str) and pval == "null"
            if not res:
                rep is None or rep.append(("unexpected null [.'$Null'.type]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Null'.type]", lpath_29 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$Null'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Null'.id]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Null'.id]", lpath_29 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$Null'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Null'.'$id']", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Null'.'$id']", lpath_29 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$Null'.'$defs'
            res = _jm_obj_6(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Null'.'$defs']", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Null'.'$defs']", lpath_29 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$Null'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Null'.title]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Null'.title]", lpath_29 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$Null'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Null'.'$schema']", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Null'.'$schema']", lpath_29 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$Null'.default
            res = True
        elif prop == "$comment":
            # handle may $comment property
            # .'$Null'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Null'.'$comment']", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Null'.'$comment']", lpath_29 if path is not None else None))
                return False
        elif prop == "examples":
            # handle may examples property
            # .'$Null'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Null'.examples]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Null'.examples]", lpath_29 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$Null'.definitions
            res = _jm_obj_7(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Null'.definitions]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Null'.definitions]", lpath_29 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Null'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Null'.description]", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Null'.description]", lpath_29 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Null']", lpath_29 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Null']", path))
        return False
    return True

# object .'$AllOf'.'$defs'
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$AllOf'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$AllOf'.'$defs'.''
        res = json_model_24(pval, lpath_33 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$AllOf'.'$defs'.'']", lpath_33 if path is not None else None))
            return False
    return True

# object .'$AllOf'.definitions
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$AllOf'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$AllOf'.definitions.''
        res = json_model_24(pval, lpath_34 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$AllOf'.definitions.'']", lpath_34 if path is not None else None))
            return False
    return True

# check $AllOf (.'$AllOf')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$AllOf'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$AllOf']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        if prop == "allOf":
            # handle must allOf property
            must_count += 1
            # .'$AllOf'.allOf
            res = json_model_4(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $schemaArray [.'$AllOf'.allOf]", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$AllOf'.allOf]", lpath_32 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$AllOf'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$AllOf'.id]", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AllOf'.id]", lpath_32 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$AllOf'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$AllOf'.'$id']", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AllOf'.'$id']", lpath_32 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$AllOf'.'$defs'
            res = _jm_obj_8(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$AllOf'.'$defs']", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AllOf'.'$defs']", lpath_32 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$AllOf'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$AllOf'.title]", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AllOf'.title]", lpath_32 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$AllOf'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$AllOf'.'$schema']", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AllOf'.'$schema']", lpath_32 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$AllOf'.default
            res = True
        elif prop == "$comment":
            # handle may $comment property
            # .'$AllOf'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$AllOf'.'$comment']", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AllOf'.'$comment']", lpath_32 if path is not None else None))
                return False
        elif prop == "examples":
            # handle may examples property
            # .'$AllOf'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$AllOf'.examples]", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AllOf'.examples]", lpath_32 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$AllOf'.definitions
            res = _jm_obj_9(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$AllOf'.definitions]", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AllOf'.definitions]", lpath_32 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$AllOf'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$AllOf'.description]", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AllOf'.description]", lpath_32 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$AllOf']", lpath_32 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "allOf" in val:
                rep is None or rep.append(("missing mandatory prop <allOf> [.'$AllOf']", path))
        return False
    return True

# object .'$AnyOf'.'$defs'
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$AnyOf'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_36: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$AnyOf'.'$defs'.''
        res = json_model_24(pval, lpath_36 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$AnyOf'.'$defs'.'']", lpath_36 if path is not None else None))
            return False
    return True

# object .'$AnyOf'.definitions
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$AnyOf'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_37: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$AnyOf'.definitions.''
        res = json_model_24(pval, lpath_37 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$AnyOf'.definitions.'']", lpath_37 if path is not None else None))
            return False
    return True

# check $AnyOf (.'$AnyOf')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$AnyOf'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$AnyOf']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        if prop == "anyOf":
            # handle must anyOf property
            must_count += 1
            # .'$AnyOf'.anyOf
            res = json_model_4(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $schemaArray [.'$AnyOf'.anyOf]", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$AnyOf'.anyOf]", lpath_35 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$AnyOf'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$AnyOf'.id]", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AnyOf'.id]", lpath_35 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$AnyOf'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$AnyOf'.'$id']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AnyOf'.'$id']", lpath_35 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$AnyOf'.'$defs'
            res = _jm_obj_10(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$AnyOf'.'$defs']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AnyOf'.'$defs']", lpath_35 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$AnyOf'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$AnyOf'.title]", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AnyOf'.title]", lpath_35 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$AnyOf'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$AnyOf'.'$schema']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AnyOf'.'$schema']", lpath_35 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$AnyOf'.default
            res = True
        elif prop == "$comment":
            # handle may $comment property
            # .'$AnyOf'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$AnyOf'.'$comment']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AnyOf'.'$comment']", lpath_35 if path is not None else None))
                return False
        elif prop == "examples":
            # handle may examples property
            # .'$AnyOf'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$AnyOf'.examples]", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AnyOf'.examples]", lpath_35 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$AnyOf'.definitions
            res = _jm_obj_11(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$AnyOf'.definitions]", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AnyOf'.definitions]", lpath_35 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$AnyOf'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$AnyOf'.description]", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$AnyOf'.description]", lpath_35 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$AnyOf']", lpath_35 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "anyOf" in val:
                rep is None or rep.append(("missing mandatory prop <anyOf> [.'$AnyOf']", path))
        return False
    return True

# object .'$OneOf'.'$defs'
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$OneOf'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_39: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$OneOf'.'$defs'.''
        res = json_model_24(pval, lpath_39 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$OneOf'.'$defs'.'']", lpath_39 if path is not None else None))
            return False
    return True

# object .'$OneOf'.definitions
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$OneOf'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_40: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$OneOf'.definitions.''
        res = json_model_24(pval, lpath_40 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$OneOf'.definitions.'']", lpath_40 if path is not None else None))
            return False
    return True

# check $OneOf (.'$OneOf')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$OneOf'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$OneOf']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_38: Path = (path + [ prop ]) if path is not None else None
        if prop == "oneOf":
            # handle must oneOf property
            must_count += 1
            # .'$OneOf'.oneOf
            res = json_model_4(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $schemaArray [.'$OneOf'.oneOf]", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$OneOf'.oneOf]", lpath_38 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$OneOf'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$OneOf'.id]", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$OneOf'.id]", lpath_38 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$OneOf'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$OneOf'.'$id']", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$OneOf'.'$id']", lpath_38 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$OneOf'.'$defs'
            res = _jm_obj_12(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$OneOf'.'$defs']", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$OneOf'.'$defs']", lpath_38 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$OneOf'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$OneOf'.title]", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$OneOf'.title]", lpath_38 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$OneOf'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$OneOf'.'$schema']", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$OneOf'.'$schema']", lpath_38 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$OneOf'.default
            res = True
        elif prop == "$comment":
            # handle may $comment property
            # .'$OneOf'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$OneOf'.'$comment']", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$OneOf'.'$comment']", lpath_38 if path is not None else None))
                return False
        elif prop == "examples":
            # handle may examples property
            # .'$OneOf'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$OneOf'.examples]", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$OneOf'.examples]", lpath_38 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$OneOf'.definitions
            res = _jm_obj_13(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$OneOf'.definitions]", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$OneOf'.definitions]", lpath_38 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$OneOf'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$OneOf'.description]", lpath_38 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$OneOf'.description]", lpath_38 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$OneOf']", lpath_38 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "oneOf" in val:
                rep is None or rep.append(("missing mandatory prop <oneOf> [.'$OneOf']", path))
        return False
    return True

# object .'$Enum'.'$defs'
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Enum'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_42: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Enum'.'$defs'.''
        res = json_model_24(pval, lpath_42 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Enum'.'$defs'.'']", lpath_42 if path is not None else None))
            return False
    return True

# object .'$Enum'.definitions
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Enum'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_43: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Enum'.definitions.''
        res = json_model_24(pval, lpath_43 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Enum'.definitions.'']", lpath_43 if path is not None else None))
            return False
    return True

# check $Enum (.'$Enum')
def json_model_20(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Enum'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Enum']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_41: Path = (path + [ prop ]) if path is not None else None
        if prop == "enum":
            # handle must enum property
            must_count += 1
            # .'$Enum'.enum
            res = json_model_3(pval, lpath_41 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $enum [.'$Enum'.enum]", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Enum'.enum]", lpath_41 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$Enum'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Enum'.id]", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Enum'.id]", lpath_41 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$Enum'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Enum'.'$id']", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Enum'.'$id']", lpath_41 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$Enum'.'$defs'
            res = _jm_obj_14(pval, lpath_41 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Enum'.'$defs']", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Enum'.'$defs']", lpath_41 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$Enum'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Enum'.title]", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Enum'.title]", lpath_41 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$Enum'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Enum'.'$schema']", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Enum'.'$schema']", lpath_41 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$Enum'.default
            res = True
        elif prop == "$comment":
            # handle may $comment property
            # .'$Enum'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Enum'.'$comment']", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Enum'.'$comment']", lpath_41 if path is not None else None))
                return False
        elif prop == "examples":
            # handle may examples property
            # .'$Enum'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Enum'.examples]", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Enum'.examples]", lpath_41 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$Enum'.definitions
            res = _jm_obj_15(pval, lpath_41 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Enum'.definitions]", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Enum'.definitions]", lpath_41 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Enum'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Enum'.description]", lpath_41 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Enum'.description]", lpath_41 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Enum']", lpath_41 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "enum" in val:
                rep is None or rep.append(("missing mandatory prop <enum> [.'$Enum']", path))
        return False
    return True

# object .'$Const'.'$defs'
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Const'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_45: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Const'.'$defs'.''
        res = json_model_24(pval, lpath_45 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Const'.'$defs'.'']", lpath_45 if path is not None else None))
            return False
    return True

# object .'$Const'.definitions
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Const'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_46: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Const'.definitions.''
        res = json_model_24(pval, lpath_46 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Const'.definitions.'']", lpath_46 if path is not None else None))
            return False
    return True

# check $Const (.'$Const')
def json_model_21(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Const'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Const']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_44: Path = (path + [ prop ]) if path is not None else None
        if prop == "const":
            # handle must const property
            must_count += 1
            # .'$Const'.const
            res = json_model_2(pval, lpath_44 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $const [.'$Const'.const]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Const'.const]", lpath_44 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$Const'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Const'.id]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Const'.id]", lpath_44 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$Const'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Const'.'$id']", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Const'.'$id']", lpath_44 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$Const'.'$defs'
            res = _jm_obj_16(pval, lpath_44 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Const'.'$defs']", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Const'.'$defs']", lpath_44 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$Const'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Const'.title]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Const'.title]", lpath_44 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$Const'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Const'.'$schema']", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Const'.'$schema']", lpath_44 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$Const'.default
            res = True
        elif prop == "$comment":
            # handle may $comment property
            # .'$Const'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Const'.'$comment']", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Const'.'$comment']", lpath_44 if path is not None else None))
                return False
        elif prop == "examples":
            # handle may examples property
            # .'$Const'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Const'.examples]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Const'.examples]", lpath_44 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$Const'.definitions
            res = _jm_obj_17(pval, lpath_44 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Const'.definitions]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Const'.definitions]", lpath_44 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Const'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Const'.description]", lpath_44 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Const'.description]", lpath_44 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Const']", lpath_44 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "const" in val:
                rep is None or rep.append(("missing mandatory prop <const> [.'$Const']", path))
        return False
    return True

# object .'$Ref'.'$defs'
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Ref'.'$defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_48: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Ref'.'$defs'.''
        res = json_model_24(pval, lpath_48 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Ref'.'$defs'.'']", lpath_48 if path is not None else None))
            return False
    return True

# object .'$Ref'.definitions
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Ref'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_49: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Ref'.definitions.''
        res = json_model_24(pval, lpath_49 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$Ref'.definitions.'']", lpath_49 if path is not None else None))
            return False
    return True

# check $Ref (.'$Ref')
def json_model_22(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Ref'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Ref']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_47: Path = (path + [ prop ]) if path is not None else None
        if prop == "$ref":
            # handle must $ref property
            must_count += 1
            # .'$Ref'.'$ref'
            res = is_valid_url(pval, lpath_47 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$Ref'.'$ref']", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Ref'.'$ref']", lpath_47 if path is not None else None))
                return False
        elif prop == "id":
            # handle may id property
            # .'$Ref'.id
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Ref'.id]", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Ref'.id]", lpath_47 if path is not None else None))
                return False
        elif prop == "$id":
            # handle may $id property
            # .'$Ref'.'$id'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Ref'.'$id']", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Ref'.'$id']", lpath_47 if path is not None else None))
                return False
        elif prop == "$defs":
            # handle may $defs property
            # .'$Ref'.'$defs'
            res = _jm_obj_18(pval, lpath_47 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Ref'.'$defs']", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Ref'.'$defs']", lpath_47 if path is not None else None))
                return False
        elif prop == "title":
            # handle may title property
            # .'$Ref'.title
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Ref'.title]", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Ref'.title]", lpath_47 if path is not None else None))
                return False
        elif prop == "$schema":
            # handle may $schema property
            # .'$Ref'.'$schema'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Ref'.'$schema']", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Ref'.'$schema']", lpath_47 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$Ref'.default
            res = True
        elif prop == "$comment":
            # handle may $comment property
            # .'$Ref'.'$comment'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Ref'.'$comment']", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Ref'.'$comment']", lpath_47 if path is not None else None))
                return False
        elif prop == "examples":
            # handle may examples property
            # .'$Ref'.examples
            res = isinstance(pval, list)
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Ref'.examples]", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Ref'.examples]", lpath_47 if path is not None else None))
                return False
        elif prop == "definitions":
            # handle may definitions property
            # .'$Ref'.definitions
            res = _jm_obj_19(pval, lpath_47 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Ref'.definitions]", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Ref'.definitions]", lpath_47 if path is not None else None))
                return False
        elif prop == "description":
            # handle may description property
            # .'$Ref'.description
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Ref'.description]", lpath_47 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Ref'.description]", lpath_47 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Ref']", lpath_47 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "$ref" in val:
                rep is None or rep.append(("missing mandatory prop <$ref> [.'$Ref']", path))
        return False
    return True


# check $ObjectSchema (.'$ObjectSchema')
def json_model_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # we could use ^ instead of | below
    # .'$ObjectSchema'
    iso_0: bool = isinstance(val, dict)
    res = iso_0
    if res:
        if "type" in val:
            tag_0: Jsonable = val.get("type", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <type> value not found [.'$ObjectSchema'.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <type> is missing [.'$ObjectSchema'.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'$ObjectSchema'.'|']", path))
    return res or json_model_9(val, path, rep) or json_model_21(val, path, rep) or json_model_20(val, path, rep) or json_model_17(val, path, rep) or json_model_18(val, path, rep) or json_model_19(val, path, rep) or json_model_22(val, path, rep)

# check $Schema (.'$Schema')
def json_model_24(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Schema'
    # .'$Schema'.'|'.0
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Schema'.'|'.0]", path))
    if not res:
        # .'$Schema'.'|'.1
        res = json_model_23(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ObjectSchema [.'$Schema'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Schema'.'|']", path))
    return res

# object .'$RootSchema'.'&'.0
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootSchema'.'&'.0]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("$schema", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <$schema> [.'$RootSchema'.'&'.0]", path))
        return False
    lpath = (path + [ "$schema" ]) if path is not None else None
    # .'$RootSchema'.'&'.0.'$schema'
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$RootSchema'.'&'.0.'$schema']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <$schema> [.'$RootSchema'.'&'.0]", lpath if path is not None else None))
        return False
    return True

# check $RootSchema (.'$RootSchema')
def json_model_25(val: Jsonable, path: Path, rep: Report) -> bool:
    # keyword $schema is mandatory at the root, and optional elsewhere
    # .'$RootSchema'
    res: bool = True
    if res:
        # .'$RootSchema'.'&'.0
        res = _jm_obj_20(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$RootSchema'.'&'.0]", path))
        if res:
            # .'$RootSchema'.'&'.1
            res = json_model_23(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $ObjectSchema [.'$RootSchema'.'&'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not all model match [.'$RootSchema'.'&']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .
    res: bool = json_model_25(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $RootSchema [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'byte', 'date', 'date-time', 'double', 'duration', 'email', 'hostname', 'idn-email', 'idn-hostname', 'int', 'int32', 'int64', 'ipv4', 'ipv6', 'iri', 'iri-reference', 'json-pointer', 'mime-type', 'regex', 'relative-json-pointer', 'time', 'uint', 'uint32', 'uint64', 'uri', 'uri-reference', 'uuid'}
        global _jm_cst_1
        _jm_cst_1 = {'byte', 'date', 'date-time', 'double', 'duration', 'email', 'hostname', 'idn-email', 'idn-hostname', 'int', 'int32', 'int64', 'ipv4', 'ipv6', 'iri', 'iri-reference', 'json-pointer', 'mime-type', 'regex', 'relative-json-pointer', 'time', 'uint', 'uint32', 'uint64', 'uri', 'uri-reference', 'uuid'}
        global json_model_10_map
        json_model_10_map = {
            "$comment": _jm_f_0,
            "$defs": _jm_f_1,
            "$id": _jm_f_2,
            "$schema": _jm_f_3,
            "default": _jm_f_4,
            "definitions": _jm_f_5,
            "description": _jm_f_6,
            "examples": _jm_f_7,
            "format": _jm_f_8,
            "id": _jm_f_9,
            "maxLength": _jm_f_10,
            "minLength": _jm_f_11,
            "pattern": _jm_f_12,
            "title": _jm_f_13,
        }
        global json_model_11_map
        json_model_11_map = {
            "$comment": _jm_f_14,
            "$defs": _jm_f_15,
            "$id": _jm_f_16,
            "$schema": _jm_f_17,
            "additionalItems": json_model_24,
            "default": _jm_f_18,
            "definitions": _jm_f_19,
            "description": _jm_f_20,
            "examples": _jm_f_21,
            "id": _jm_f_22,
            "items": _jm_f_23,
            "maxItems": _jm_f_24,
            "minItems": _jm_f_25,
            "prefixItems": json_model_4,
            "title": _jm_f_26,
            "uniqueItems": _jm_f_27,
        }
        global json_model_12_map
        json_model_12_map = {
            "$comment": _jm_f_28,
            "$defs": _jm_f_29,
            "$id": _jm_f_30,
            "$schema": _jm_f_31,
            "additionalProperties": json_model_24,
            "default": _jm_f_32,
            "definitions": _jm_f_33,
            "description": _jm_f_34,
            "examples": _jm_f_35,
            "id": _jm_f_36,
            "patternProperties": _jm_f_37,
            "properties": _jm_f_38,
            "required": _jm_f_39,
            "title": _jm_f_40,
        }
        global json_model_13_map
        json_model_13_map = {
            "$comment": _jm_f_41,
            "$defs": _jm_f_42,
            "$id": _jm_f_43,
            "$schema": _jm_f_44,
            "default": _jm_f_45,
            "definitions": _jm_f_46,
            "description": _jm_f_47,
            "examples": _jm_f_48,
            "id": _jm_f_49,
            "maximum": _jm_f_50,
            "minimum": _jm_f_51,
            "title": _jm_f_52,
        }
        global json_model_14_map
        json_model_14_map = {
            "$comment": _jm_f_53,
            "$defs": _jm_f_54,
            "$id": _jm_f_55,
            "$schema": _jm_f_56,
            "default": _jm_f_57,
            "definitions": _jm_f_58,
            "description": _jm_f_59,
            "examples": _jm_f_60,
            "id": _jm_f_61,
            "maximum": _jm_f_62,
            "minimum": _jm_f_63,
            "title": _jm_f_64,
        }
        global _jm_map_0
        _jm_map_0 = {
            "null": json_model_16,
            "boolean": json_model_15,
            "integer": json_model_13,
            "number": json_model_14,
            "string": json_model_10,
            "array": json_model_11,
            "object": json_model_12,
        }
        global check_model_map
        check_model_map = {
            "": json_model_25,
            "const": json_model_2,
            "enum": json_model_3,
            "schemaArray": json_model_4,
            "stringKeywords": json_model_5,
            "arrayKeywords": json_model_6,
            "objectKeywords": json_model_7,
            "numberKeywords": json_model_8,
            "metas": json_model_9,
            "String": json_model_10,
            "Array": json_model_11,
            "Object": json_model_12,
            "Integer": json_model_13,
            "Number": json_model_14,
            "Bool": json_model_15,
            "Null": json_model_16,
            "AllOf": json_model_17,
            "AnyOf": json_model_18,
            "OneOf": json_model_19,
            "Enum": json_model_20,
            "Const": json_model_21,
            "Ref": json_model_22,
            "ObjectSchema": json_model_23,
            "Schema": json_model_24,
            "RootSchema": json_model_25,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
