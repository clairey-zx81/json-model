#! /bin/env node
//
// Generated by JSON Model Compiler version 2.0a0
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2.0a0";

const _jm_re_0_re = new RegExp("^[a-z]+$", "i")
var check_model_map = new Map()

const _jm_re_0 = (s) => _jm_re_0_re.exec(s) !== null

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    // not-case xor list
    let is_0;
    // .'^'.1
    // "/^[a-z]+$/i"
    is_0 = ((typeof val === 'string' || val instanceof String)) && _jm_re_0(val);
    if (! is_0)
    {
        rep !== null && rep.push(["unexpected /^[a-z]+$/i [.'^'.1]", path])
    }
    res = ! is_0;
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["not one model match [.'^']", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        check_model_map[""] = json_model_1
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    check_model_init()

    let checker = check_model_map[name]
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model)
