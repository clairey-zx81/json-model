#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_obj_0_map: PropMap
_jm_cst_0: set[str]
check_model_map: PropMap

# check _jm_obj_0_map_$ref (.'$schema'.'$ref')
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.'$ref'
    res = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI [.'$schema'.'$ref']", path))
    return res

# check _jm_obj_0_map_$schema (.'$schema'.'$schema')
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema'.'$schema']", path))
    return res

# check _jm_obj_0_map_additionalItems (.'$schema'.additionalItems)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.additionalItems
    # .'$schema'.additionalItems.'|'.0
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema'.additionalItems.'|'.0]", path))
    if not res:
        # .'$schema'.additionalItems.'|'.1
        res = json_model_3(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.additionalItems.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$schema'.additionalItems.'|']", path))
    return res

# check _jm_obj_0_map_additionalProperties (.'$schema'.additionalProperties)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.additionalProperties
    # .'$schema'.additionalProperties.'|'.0
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema'.additionalProperties.'|'.0]", path))
    if not res:
        # .'$schema'.additionalProperties.'|'.1
        res = json_model_3(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.additionalProperties.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$schema'.additionalProperties.'|']", path))
    return res

# check _jm_obj_0_map_allOf (.'$schema'.allOf)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.allOf
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [.'$schema'.allOf]", path))
    return res

# check _jm_obj_0_map_anyOf (.'$schema'.anyOf)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.anyOf
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [.'$schema'.anyOf]", path))
    return res

# check _jm_obj_0_map_default (.'$schema'.default)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$schema'.default]", path))
    return res

# object .'$schema'.definitions
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema'.definitions.''
        res = json_model_3(pval, lpath_1 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.definitions.'']", lpath_1 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_0_map_definitions (.'$schema'.definitions)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.definitions
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$schema'.definitions]", path))
    return res

# object .'$schema'.dependencies
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema'.dependencies]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema'.dependencies.''
        # .'$schema'.dependencies.''.'|'.0
        res = json_model_3(pval, lpath_2 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.dependencies.''.'|'.0]", lpath_2 if path is not None else None))
        if not res:
            # .'$schema'.dependencies.''.'|'.1
            res = json_model_6(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $stringArray [.'$schema'.dependencies.''.'|'.1]", lpath_2 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema'.dependencies.''.'|']", lpath_2 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_0_map_dependencies (.'$schema'.dependencies)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.dependencies
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$schema'.dependencies]", path))
    return res

# check _jm_obj_0_map_description (.'$schema'.description)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema'.description]", path))
    return res

# check _jm_obj_0_map_enum (.'$schema'.enum)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.enum
    # .'$schema'.enum.'@'
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema'.enum.'@']", path))
    if res:
        ival_0: int = len(val)
        res = is_unique_array(val, path, rep) and ival_0 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema'.enum]", path))
    return res

# check _jm_obj_0_map_exclusiveMaximum (.'$schema'.exclusiveMaximum)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.exclusiveMaximum
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema'.exclusiveMaximum]", path))
    return res

# check _jm_obj_0_map_exclusiveMinimum (.'$schema'.exclusiveMinimum)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.exclusiveMinimum
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema'.exclusiveMinimum]", path))
    return res

# check _jm_obj_0_map_format (.'$schema'.format)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.format
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema'.format]", path))
    return res

# check _jm_obj_0_map_id (.'$schema'.id)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema'.id]", path))
    return res

# check _jm_obj_0_map_items (.'$schema'.items)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.items
    # .'$schema'.items.'|'.0
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema'.items.'|'.0]", path))
    if not res:
        # .'$schema'.items.'|'.1
        res = json_model_4(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$schema'.items.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$schema'.items.'|']", path))
    return res

# check _jm_obj_0_map_maxItems (.'$schema'.maxItems)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.maxItems
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$schema'.maxItems]", path))
    return res

# check _jm_obj_0_map_maxLength (.'$schema'.maxLength)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.maxLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$schema'.maxLength]", path))
    return res

# check _jm_obj_0_map_maxProperties (.'$schema'.maxProperties)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.maxProperties
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$schema'.maxProperties]", path))
    return res

# check _jm_obj_0_map_maximum (.'$schema'.maximum)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.maximum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$schema'.maximum]", path))
    return res

# check _jm_obj_0_map_minItems (.'$schema'.minItems)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.minItems
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$schema'.minItems]", path))
    return res

# check _jm_obj_0_map_minLength (.'$schema'.minLength)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.minLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$schema'.minLength]", path))
    return res

# check _jm_obj_0_map_minProperties (.'$schema'.minProperties)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.minProperties
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$schema'.minProperties]", path))
    return res

# check _jm_obj_0_map_minimum (.'$schema'.minimum)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.minimum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$schema'.minimum]", path))
    return res

# check _jm_obj_0_map_multipleOf (.'$schema'.multipleOf)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.multipleOf
    res = isinstance(val, (int, float)) and not isinstance(val, bool) and val > 0.0
    if not res:
        rep is None or rep.append(("not a 1.0 loose float [.'$schema'.multipleOf]", path))
    return res

# check _jm_obj_0_map_not (.'$schema'.not)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.not
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema'.not]", path))
    return res

# check _jm_obj_0_map_oneOf (.'$schema'.oneOf)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.oneOf
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [.'$schema'.oneOf]", path))
    return res

# check _jm_obj_0_map_pattern (.'$schema'.pattern)
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.pattern
    res = is_valid_regex(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $REGEX [.'$schema'.pattern]", path))
    return res

# object .'$schema'.patternProperties
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema'.patternProperties.''
        res = json_model_3(pval, lpath_3 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.patternProperties.'']", lpath_3 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_0_map_patternProperties (.'$schema'.patternProperties)
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.patternProperties
    res = _jm_obj_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$schema'.patternProperties]", path))
    return res

# object .'$schema'.properties
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema'.properties.''
        res = json_model_3(pval, lpath_4 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.properties.'']", lpath_4 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_0_map_properties (.'$schema'.properties)
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.properties
    res = _jm_obj_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$schema'.properties]", path))
    return res

# check _jm_obj_0_map_required (.'$schema'.required)
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.required
    res = json_model_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $stringArray [.'$schema'.required]", path))
    return res

# check _jm_obj_0_map_title (.'$schema'.title)
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema'.title]", path))
    return res

# check _jm_obj_0_map_type (.'$schema'.type)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.type
    # .'$schema'.type.'|'.0
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $simpleTypes [.'$schema'.type.'|'.0]", path))
    if not res:
        # .'$schema'.type.'|'.1
        res = json_model_7(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $typeArray [.'$schema'.type.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$schema'.type.'|']", path))
    return res

# check _jm_obj_0_map_uniqueItems (.'$schema'.uniqueItems)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'.uniqueItems
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema'.uniqueItems]", path))
    return res


# object .'$schema'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_map.get(prop):
            # handle 34 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$schema']", lpath_0 if path is not None else None))
                return False
        else:
            # handle other props
            # .'$schema'.''
            res = json_model_3(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schema'.'']", lpath_0 if path is not None else None))
            if not res:
                return False
    return True

# check $schema (.'$schema')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # JSON Model for JSON Schema Draft 04 [JSON_MODEL_STRICT_INT, JSON_MODEL_LOOSE_FLOAT]
    # .'$schema'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$schema']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema [.]", path))
    return res

# check $schema#schemaArray (.'$schema#schemaArray')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#schemaArray'
    # .'$schema#schemaArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$schema#schemaArray'.'@'.0
            res = json_model_3(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schema#schemaArray'.'@'.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#schemaArray'.'@']", path))
    if res:
        ival_1: int = len(val)
        res = ival_1 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#schemaArray']", path))
    return res


# check $schema#simpleTypes (.'$schema#simpleTypes')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#simpleTypes'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$schema#simpleTypes'.'|']", path))
    return res

# check $schema#stringArray (.'$schema#stringArray')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#stringArray'
    # .'$schema#stringArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$schema#stringArray'.'@'.0
            res = isinstance(arr_1_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$schema#stringArray'.'@'.0]", arr_1_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#stringArray'.'@']", path))
    if res:
        ival_2: int = len(val)
        res = is_unique_array(val, path, rep) and ival_2 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#stringArray']", path))
    return res

# check $schema#typeArray (.'$schema#typeArray')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#typeArray'
    # .'$schema#typeArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # .'$schema#typeArray'.'@'.0
            res = json_model_5(arr_2_item, arr_2_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $simpleTypes [.'$schema#typeArray'.'@'.0]", arr_2_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#typeArray'.'@']", path))
    if res:
        ival_3: int = len(val)
        res = is_unique_array(val, path, rep) and ival_3 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#typeArray']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_obj_0_map
        _jm_obj_0_map = {
            "$ref": _jm_f_0,
            "$schema": _jm_f_1,
            "additionalItems": _jm_f_2,
            "additionalProperties": _jm_f_3,
            "allOf": _jm_f_4,
            "anyOf": _jm_f_5,
            "default": _jm_f_6,
            "definitions": _jm_f_7,
            "dependencies": _jm_f_8,
            "description": _jm_f_9,
            "enum": _jm_f_10,
            "exclusiveMaximum": _jm_f_11,
            "exclusiveMinimum": _jm_f_12,
            "format": _jm_f_13,
            "id": _jm_f_14,
            "items": _jm_f_15,
            "maxItems": _jm_f_16,
            "maxLength": _jm_f_17,
            "maxProperties": _jm_f_18,
            "maximum": _jm_f_19,
            "minItems": _jm_f_20,
            "minLength": _jm_f_21,
            "minProperties": _jm_f_22,
            "minimum": _jm_f_23,
            "multipleOf": _jm_f_24,
            "not": _jm_f_25,
            "oneOf": _jm_f_26,
            "pattern": _jm_f_27,
            "patternProperties": _jm_f_28,
            "properties": _jm_f_29,
            "required": _jm_f_30,
            "title": _jm_f_31,
            "type": _jm_f_32,
            "uniqueItems": _jm_f_33,
        }
        global _jm_cst_0
        _jm_cst_0 = {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global check_model_map
        check_model_map = {
            "": json_model_3,
            "schema": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
