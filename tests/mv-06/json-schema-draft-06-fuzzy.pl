#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_3($$$);
sub json_model_1($$$);
sub json_model_10($$$);
sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
sub _jm_f_6($$$);
sub _jm_f_7($$$);
sub _jm_f_8($$$);
sub _jm_f_9($$$);
sub _jm_f_10($$$);
sub _jm_f_11($$$);
sub _jm_f_12($$$);
sub _jm_f_13($$$);
sub _jm_f_14($$$);
sub _jm_f_15($$$);
sub _jm_f_16($$$);
sub _jm_f_17($$$);
sub _jm_f_18($$$);
sub _jm_f_19($$$);
sub _jm_f_20($$$);
sub _jm_f_21($$$);
sub _jm_f_22($$$);
sub _jm_f_23($$$);
sub _jm_f_24($$$);
sub _jm_f_25($$$);
sub _jm_f_26($$$);
sub _jm_f_27($$$);
sub _jm_f_28($$$);
sub _jm_f_29($$$);
sub _jm_f_30($$$);
sub _jm_f_31($$$);
sub _jm_f_32($$$);
sub _jm_f_33($$$);
sub _jm_f_34($$$);
sub _jm_f_35($$$);
sub _jm_f_36($$$);
sub _jm_f_37($$$);
my %json_model_9_map;
sub json_model_9($$$);
sub json_model_4($$$);
sub json_model_5($$$);
my %_jm_cst_0;
sub json_model_6($$$);
sub json_model_7($$$);
sub json_model_8($$$);
my %check_model_map;

# check $schema (.'$schema')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # JSON Model for JSON Schema Draft 06 [JSON_MODEL_LOOSE_INT, JSON_MODEL_LOOSE_FLOAT]
    # .'$schema'
    # .'$schema'.'@'
    $res = json_model_10($val, $path, $rep);
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check $schema#Schema (.'$schema#Schema')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#Schema'
    # .'$schema#Schema'.'|'.0
    $res = jm_is_boolean($val);
    if (! $res)
    {
        # .'$schema#Schema'.'|'.1
        $res = json_model_9($val, $path, $rep);
    }
    return $res;
}

# check json_model_9_map_$id (.'$schema#ObjectSchema'.'$id')
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.'$id'
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check json_model_9_map_$ref (.'$schema#ObjectSchema'.'$ref')
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.'$ref'
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check json_model_9_map_$schema (.'$schema#ObjectSchema'.'$schema')
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.'$schema'
    $res = jm_is_string($val) && jm_is_valid_url($val, $path, $rep);
    return $res;
}

# check json_model_9_map_additionalItems (.'$schema#ObjectSchema'.additionalItems)
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.additionalItems
    $res = json_model_10($val, $path, $rep);
    return $res;
}

# check json_model_9_map_additionalProperties (.'$schema#ObjectSchema'.additionalProperties)
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.additionalProperties
    $res = json_model_10($val, $path, $rep);
    return $res;
}

# check json_model_9_map_allOf (.'$schema#ObjectSchema'.allOf)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.allOf
    $res = json_model_5($val, $path, $rep);
    return $res;
}

# check json_model_9_map_anyOf (.'$schema#ObjectSchema'.anyOf)
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.anyOf
    $res = json_model_5($val, $path, $rep);
    return $res;
}

# check json_model_9_map_const (.'$schema#ObjectSchema'.const)
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.const
    $res = 1;
    return $res;
}

# check json_model_9_map_contains (.'$schema#ObjectSchema'.contains)
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.contains
    $res = json_model_10($val, $path, $rep);
    return $res;
}

# check json_model_9_map_default (.'$schema#ObjectSchema'.default)
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.default
    $res = 1;
    return $res;
}

# check json_model_9_map_definitions (.'$schema#ObjectSchema'.definitions)
sub _jm_f_10($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.definitions
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.definitions.''
        $res = json_model_10($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_9_map_dependencies (.'$schema#ObjectSchema'.dependencies)
sub _jm_f_11($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.dependencies
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.dependencies.''
        # .'$schema#ObjectSchema'.dependencies.''.'|'.0
        $res = json_model_10($pval, undef, $rep);
        if (! $res)
        {
            # .'$schema#ObjectSchema'.dependencies.''.'|'.1
            $res = json_model_8($pval, undef, $rep);
        }
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_9_map_description (.'$schema#ObjectSchema'.description)
sub _jm_f_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.description
    $res = jm_is_string($val);
    return $res;
}

# check json_model_9_map_enum (.'$schema#ObjectSchema'.enum)
sub _jm_f_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.enum
    # .'$schema#ObjectSchema'.enum.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        my $ival_0 = scalar @$val;
        $res = jm_is_unique_array($val, $path, $rep) && $ival_0 >= 1;
    }
    return $res;
}

# check json_model_9_map_examples (.'$schema#ObjectSchema'.examples)
sub _jm_f_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.examples
    $res = jm_is_array($val);
    return $res;
}

# check json_model_9_map_exclusiveMaximum (.'$schema#ObjectSchema'.exclusiveMaximum)
sub _jm_f_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.exclusiveMaximum
    $res = jm_is_numeric($val);
    return $res;
}

# check json_model_9_map_exclusiveMinimum (.'$schema#ObjectSchema'.exclusiveMinimum)
sub _jm_f_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.exclusiveMinimum
    $res = jm_is_numeric($val);
    return $res;
}

# check json_model_9_map_format (.'$schema#ObjectSchema'.format)
sub _jm_f_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.format
    $res = jm_is_string($val);
    return $res;
}

# check json_model_9_map_items (.'$schema#ObjectSchema'.items)
sub _jm_f_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.items
    # .'$schema#ObjectSchema'.items.'|'.0
    $res = json_model_10($val, $path, $rep);
    if (! $res)
    {
        # .'$schema#ObjectSchema'.items.'|'.1
        $res = json_model_5($val, $path, $rep);
    }
    return $res;
}

# check json_model_9_map_maxItems (.'$schema#ObjectSchema'.maxItems)
sub _jm_f_19($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.maxItems
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check json_model_9_map_maxLength (.'$schema#ObjectSchema'.maxLength)
sub _jm_f_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.maxLength
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check json_model_9_map_maxProperties (.'$schema#ObjectSchema'.maxProperties)
sub _jm_f_21($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.maxProperties
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check json_model_9_map_maximum (.'$schema#ObjectSchema'.maximum)
sub _jm_f_22($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.maximum
    $res = jm_is_numeric($val);
    return $res;
}

# check json_model_9_map_minItems (.'$schema#ObjectSchema'.minItems)
sub _jm_f_23($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.minItems
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check json_model_9_map_minLength (.'$schema#ObjectSchema'.minLength)
sub _jm_f_24($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.minLength
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check json_model_9_map_minProperties (.'$schema#ObjectSchema'.minProperties)
sub _jm_f_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.minProperties
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check json_model_9_map_minimum (.'$schema#ObjectSchema'.minimum)
sub _jm_f_26($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.minimum
    $res = jm_is_numeric($val);
    return $res;
}

# check json_model_9_map_multipleOf (.'$schema#ObjectSchema'.multipleOf)
sub _jm_f_27($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.multipleOf
    $res = jm_is_numeric($val) && $val > 0.0;
    return $res;
}

# check json_model_9_map_not (.'$schema#ObjectSchema'.not)
sub _jm_f_28($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.not
    $res = json_model_10($val, $path, $rep);
    return $res;
}

# check json_model_9_map_oneOf (.'$schema#ObjectSchema'.oneOf)
sub _jm_f_29($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.oneOf
    $res = json_model_5($val, $path, $rep);
    return $res;
}

# check json_model_9_map_pattern (.'$schema#ObjectSchema'.pattern)
sub _jm_f_30($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.pattern
    $res = jm_is_string($val);
    return $res;
}

# check json_model_9_map_patternProperties (.'$schema#ObjectSchema'.patternProperties)
sub _jm_f_31($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.patternProperties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.patternProperties.''
        $res = json_model_10($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_9_map_properties (.'$schema#ObjectSchema'.properties)
sub _jm_f_32($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'.properties
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$schema#ObjectSchema'.properties.''
        $res = json_model_10($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check json_model_9_map_propertyNames (.'$schema#ObjectSchema'.propertyNames)
sub _jm_f_33($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.propertyNames
    $res = json_model_10($val, $path, $rep);
    return $res;
}

# check json_model_9_map_required (.'$schema#ObjectSchema'.required)
sub _jm_f_34($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.required
    $res = json_model_8($val, $path, $rep);
    return $res;
}

# check json_model_9_map_title (.'$schema#ObjectSchema'.title)
sub _jm_f_35($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.title
    $res = jm_is_string($val);
    return $res;
}

# check json_model_9_map_type (.'$schema#ObjectSchema'.type)
sub _jm_f_36($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.type
    # .'$schema#ObjectSchema'.type.'|'.0
    $res = json_model_6($val, $path, $rep);
    if (! $res)
    {
        # .'$schema#ObjectSchema'.type.'|'.1
        $res = json_model_7($val, $path, $rep);
    }
    return $res;
}

# check json_model_9_map_uniqueItems (.'$schema#ObjectSchema'.uniqueItems)
sub _jm_f_37($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#ObjectSchema'.uniqueItems
    $res = jm_is_boolean($val);
    return $res;
}


# check $schema#ObjectSchema (.'$schema#ObjectSchema')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$schema#ObjectSchema'
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_9_map{$prop}))
        {
            # handle 38 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            # accept any other props
            ;
        }
    }
    return 1;
}

# check $schema#URI-REFERENCE (.'$schema#URI-REFERENCE')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#URI-REFERENCE'
    $res = jm_is_string($val);
    return $res;
}

# check $schema#schemaArray (.'$schema#schemaArray')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#schemaArray'
    # .'$schema#schemaArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$schema#schemaArray'.'@'.0
            $res = json_model_10($arr_0_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_1 = scalar @$val;
        $res = $ival_1 >= 1;
    }
    return $res;
}


# check $schema#simpleTypes (.'$schema#simpleTypes')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#simpleTypes'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_0{$val};
    return $res;
}

# check $schema#typeArray (.'$schema#typeArray')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#typeArray'
    # .'$schema#typeArray'.'@'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_1_idx (0 .. $#$val)
        {
            my $arr_1_item = $$val[$arr_1_idx];
            # .'$schema#typeArray'.'@'.0
            $res = json_model_6($arr_1_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    if ($res)
    {
        my $ival_2 = scalar @$val;
        $res = $ival_2 >= 1;
    }
    return $res;
}

# check $schema#stringArray (.'$schema#stringArray')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schema#stringArray'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_2_idx (0 .. $#$val)
        {
            my $arr_2_item = $$val[$arr_2_idx];
            # .'$schema#stringArray'.0
            $res = jm_is_string($arr_2_item);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %json_model_9_map = (
            '$id' => \&_jm_f_0,
            '$ref' => \&_jm_f_1,
            '$schema' => \&_jm_f_2,
            'additionalItems' => \&_jm_f_3,
            'additionalProperties' => \&_jm_f_4,
            'allOf' => \&_jm_f_5,
            'anyOf' => \&_jm_f_6,
            'const' => \&_jm_f_7,
            'contains' => \&_jm_f_8,
            'default' => \&_jm_f_9,
            'definitions' => \&_jm_f_10,
            'dependencies' => \&_jm_f_11,
            'description' => \&_jm_f_12,
            'enum' => \&_jm_f_13,
            'examples' => \&_jm_f_14,
            'exclusiveMaximum' => \&_jm_f_15,
            'exclusiveMinimum' => \&_jm_f_16,
            'format' => \&_jm_f_17,
            'items' => \&_jm_f_18,
            'maxItems' => \&_jm_f_19,
            'maxLength' => \&_jm_f_20,
            'maxProperties' => \&_jm_f_21,
            'maximum' => \&_jm_f_22,
            'minItems' => \&_jm_f_23,
            'minLength' => \&_jm_f_24,
            'minProperties' => \&_jm_f_25,
            'minimum' => \&_jm_f_26,
            'multipleOf' => \&_jm_f_27,
            'not' => \&_jm_f_28,
            'oneOf' => \&_jm_f_29,
            'pattern' => \&_jm_f_30,
            'patternProperties' => \&_jm_f_31,
            'properties' => \&_jm_f_32,
            'propertyNames' => \&_jm_f_33,
            'required' => \&_jm_f_34,
            'title' => \&_jm_f_35,
            'type' => \&_jm_f_36,
            'uniqueItems' => \&_jm_f_37,
        );
        %_jm_cst_0 = (
            'null' => 1,
            'boolean' => 1,
            'integer' => 1,
            'number' => 1,
            'string' => 1,
            'array' => 1,
            'object' => 1,
        );
        %check_model_map = (
            '' => \&json_model_3,
            'schema' => \&json_model_3,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %json_model_9_map = ();
        %_jm_cst_0 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
