#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
json_model_1_map: PropMap
check_model_map: PropMap

# check $schemaArray (.'$schemaArray')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schemaArray'
    # .'$schemaArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$schemaArray'.'@'.0
            res = json_model_1(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schemaArray'.'@'.0]", arr_0_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schemaArray'.'@']", path))
    if res:
        ival_0: int = len(val)
        res = ival_0 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schemaArray']", path))
    return res


# check $simpleTypes (.'$simpleTypes')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$simpleTypes'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$simpleTypes'.'|']", path))
    return res

# check $stringArray (.'$stringArray')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$stringArray'
    # .'$stringArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$stringArray'.'@'.0
            res = isinstance(arr_1_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$stringArray'.'@'.0]", arr_1_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$stringArray'.'@']", path))
    if res:
        ival_1: int = len(val)
        res = is_unique_array(val, path, rep) and ival_1 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$stringArray']", path))
    return res

# check $typeArray (.'$typeArray')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$typeArray'
    # .'$typeArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # .'$typeArray'.'@'.0
            res = json_model_3(arr_2_item, arr_2_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $simpleTypes [.'$typeArray'.'@'.0]", arr_2_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$typeArray'.'@']", path))
    if res:
        ival_2: int = len(val)
        res = is_unique_array(val, path, rep) and ival_2 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$typeArray']", path))
    return res

# check json_model_1_map_$ref (.'$ref')
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ref'
    res = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI [.'$ref']", path))
    return res

# check json_model_1_map_$schema (.'$schema')
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema']", path))
    return res

# check json_model_1_map_additionalItems (.additionalItems)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .additionalItems
    # .additionalItems.'|'.0
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.additionalItems.'|'.0]", path))
    if not res:
        # .additionalItems.'|'.1
        res = json_model_1(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.additionalItems.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.additionalItems.'|']", path))
    return res

# check json_model_1_map_additionalProperties (.additionalProperties)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .additionalProperties
    # .additionalProperties.'|'.0
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.additionalProperties.'|'.0]", path))
    if not res:
        # .additionalProperties.'|'.1
        res = json_model_1(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.additionalProperties.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.additionalProperties.'|']", path))
    return res

# check json_model_1_map_default (.default)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.default]", path))
    return res

# check json_model_1_map_definitions (.definitions)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .definitions
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .definitions.''
        res = json_model_1(pval, lpath_1 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.definitions.'']", lpath_1 if path is not None else None))
            return False
    return True

# check json_model_1_map_dependencies (.dependencies)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .dependencies
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.dependencies]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .dependencies.''
        # .dependencies.''.'|'.0
        res = json_model_1(pval, lpath_2 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.dependencies.''.'|'.0]", lpath_2 if path is not None else None))
        if not res:
            # .dependencies.''.'|'.1
            res = json_model_4(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $stringArray [.dependencies.''.'|'.1]", lpath_2 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.dependencies.''.'|']", lpath_2 if path is not None else None))
            return False
    return True

# check json_model_1_map_description (.description)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.description]", path))
    return res

# check json_model_1_map_enum (.enum)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .enum
    # .enum.'@'
    res = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.enum.'@']", path))
    if res:
        ival_3: int = len(val)
        res = is_unique_array(val, path, rep) and ival_3 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.enum]", path))
    return res

# check json_model_1_map_exclusiveMaximum (.exclusiveMaximum)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .exclusiveMaximum
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.exclusiveMaximum]", path))
    return res

# check json_model_1_map_exclusiveMinimum (.exclusiveMinimum)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .exclusiveMinimum
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.exclusiveMinimum]", path))
    return res

# check json_model_1_map_format (.format)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .format
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.format]", path))
    return res

# check json_model_1_map_id (.id)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .id
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.id]", path))
    return res

# check json_model_1_map_items (.items)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .items
    # .items.'|'.0
    res = json_model_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.items.'|'.0]", path))
    if not res:
        # .items.'|'.1
        res = json_model_2(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.items.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.items.'|']", path))
    return res

# check json_model_1_map_maxItems (.maxItems)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .maxItems
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.maxItems]", path))
    return res

# check json_model_1_map_maxLength (.maxLength)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .maxLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.maxLength]", path))
    return res

# check json_model_1_map_maxProperties (.maxProperties)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .maxProperties
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.maxProperties]", path))
    return res

# check json_model_1_map_maximum (.maximum)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .maximum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.maximum]", path))
    return res

# check json_model_1_map_minItems (.minItems)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .minItems
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.minItems]", path))
    return res

# check json_model_1_map_minLength (.minLength)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .minLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.minLength]", path))
    return res

# check json_model_1_map_minProperties (.minProperties)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .minProperties
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.minProperties]", path))
    return res

# check json_model_1_map_minimum (.minimum)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .minimum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.minimum]", path))
    return res

# check json_model_1_map_multipleOf (.multipleOf)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .multipleOf
    res = isinstance(val, (int, float)) and not isinstance(val, bool) and val > 0.0
    if not res:
        rep is None or rep.append(("not a 1.0 loose float [.multipleOf]", path))
    return res

# check json_model_1_map_pattern (.pattern)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .pattern
    res = is_valid_regex(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $REGEX [.pattern]", path))
    return res

# check json_model_1_map_patternProperties (.patternProperties)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    # .patternProperties
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .patternProperties.''
        res = json_model_1(pval, lpath_3 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.patternProperties.'']", lpath_3 if path is not None else None))
            return False
    return True

# check json_model_1_map_properties (.properties)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    # .properties
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .properties.''
        res = json_model_1(pval, lpath_4 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.properties.'']", lpath_4 if path is not None else None))
            return False
    return True

# check json_model_1_map_title (.title)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.title]", path))
    return res

# check json_model_1_map_type (.type)
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .type
    # .type.'|'.0
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $simpleTypes [.type.'|'.0]", path))
    if not res:
        # .type.'|'.1
        res = json_model_5(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $typeArray [.type.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.type.'|']", path))
    return res

# check json_model_1_map_uniqueItems (.uniqueItems)
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .uniqueItems
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.uniqueItems]", path))
    return res


# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # JSON Model for JSON Schema Draft 04 [JSON_MODEL_STRICT_INT, JSON_MODEL_LOOSE_FLOAT]
    # .
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := json_model_1_map.get(prop):
            # handle 34 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.]", lpath_0 if path is not None else None))
            return False
    return True


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global json_model_1_map
        json_model_1_map = {
            "$ref": _jm_f_0,
            "$schema": _jm_f_1,
            "additionalItems": _jm_f_2,
            "additionalProperties": _jm_f_3,
            "allOf": json_model_2,
            "anyOf": json_model_2,
            "default": _jm_f_4,
            "definitions": _jm_f_5,
            "dependencies": _jm_f_6,
            "description": _jm_f_7,
            "enum": _jm_f_8,
            "exclusiveMaximum": _jm_f_9,
            "exclusiveMinimum": _jm_f_10,
            "format": _jm_f_11,
            "id": _jm_f_12,
            "items": _jm_f_13,
            "maxItems": _jm_f_14,
            "maxLength": _jm_f_15,
            "maxProperties": _jm_f_16,
            "maximum": _jm_f_17,
            "minItems": _jm_f_18,
            "minLength": _jm_f_19,
            "minProperties": _jm_f_20,
            "minimum": _jm_f_21,
            "multipleOf": _jm_f_22,
            "not": json_model_1,
            "oneOf": json_model_2,
            "pattern": _jm_f_23,
            "patternProperties": _jm_f_24,
            "properties": _jm_f_25,
            "required": json_model_4,
            "title": _jm_f_26,
            "type": _jm_f_27,
            "uniqueItems": _jm_f_28,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "schemaArray": json_model_2,
            "simpleTypes": json_model_3,
            "stringArray": json_model_4,
            "typeArray": json_model_5,
            "Schema": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
