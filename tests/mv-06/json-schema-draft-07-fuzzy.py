#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
check_model_map: PropMap

# check $schema (.'$schema')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # JSON Model for JSON Schema Draft 07 [JSON_MODEL_LOOSE_INT, JSON_MODEL_LOOSE_FLOAT]
    # .'$schema'
    # .'$schema'.'@'
    res: bool = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema'.'@']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .
    res: bool = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema [.]", path))
    return res

# check $schema#Schema (.'$schema#Schema')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#Schema'
    # .'$schema#Schema'.'|'.0
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema#Schema'.'|'.0]", path))
    if not res:
        # .'$schema#Schema'.'|'.1
        res = json_model_8(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ObjectSchema [.'$schema#Schema'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$schema#Schema'.'|']", path))
    return res

# object .'$schema#ObjectSchema'.definitions
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.definitions.''
        res = json_model_9(pval, lpath_0 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.definitions.'']", lpath_0 if path is not None else None))
            return False
    return True

# object .'$schema#ObjectSchema'.properties
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.properties.''
        res = json_model_9(pval, lpath_1 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.properties.'']", lpath_1 if path is not None else None))
            return False
    return True

# object .'$schema#ObjectSchema'.dependencies
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.dependencies]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.dependencies.''
        # .'$schema#ObjectSchema'.dependencies.''.'|'.0
        res = json_model_9(pval, lpath_2 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.dependencies.''.'|'.0]", lpath_2 if path is not None else None))
        if not res:
            # .'$schema#ObjectSchema'.dependencies.''.'|'.1
            res = isinstance(pval, list)
            if res:
                for arr_1_idx, arr_1_item in enumerate(pval):
                    arr_1_lpath: Path = ((lpath_2 if path is not None else None) + [ arr_1_idx ]) if (lpath_2 if path is not None else None) is not None else None
                    # .'$schema#ObjectSchema'.dependencies.''.'|'.1.0
                    res = isinstance(arr_1_item, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.dependencies.''.'|'.1.0]", arr_1_lpath if (lpath_2 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$schema#ObjectSchema'.dependencies.''.'|'.1]", lpath_2 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema#ObjectSchema'.dependencies.''.'|']", lpath_2 if path is not None else None))
            return False
    return True

# object .'$schema#ObjectSchema'.patternProperties
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.patternProperties.''
        res = json_model_9(pval, lpath_3 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.patternProperties.'']", lpath_3 if path is not None else None))
            return False
    return True

# check $schema#ObjectSchema (.'$schema#ObjectSchema')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#ObjectSchema'
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if (pval := val.get("$id", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "$id" ]) if path is not None else None
        # .'$schema#ObjectSchema'.'$id'
        res = json_model_4(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $URI-REFERENCE [.'$schema#ObjectSchema'.'$id']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <$id> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("$schema", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "$schema" ]) if path is not None else None
        # .'$schema#ObjectSchema'.'$schema'
        res = is_valid_url(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $URI [.'$schema#ObjectSchema'.'$schema']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <$schema> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("$comment", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "$comment" ]) if path is not None else None
        # .'$schema#ObjectSchema'.'$comment'
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.'$comment']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <$comment> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("title", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "title" ]) if path is not None else None
        # .'$schema#ObjectSchema'.title
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.title]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <title> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("description", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "description" ]) if path is not None else None
        # .'$schema#ObjectSchema'.description
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.description]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <description> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    # ignored .'$schema#ObjectSchema'.default
    if (pval := val.get("readOnly", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "readOnly" ]) if path is not None else None
        # .'$schema#ObjectSchema'.readOnly
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema#ObjectSchema'.readOnly]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <readOnly> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("writeOnly", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "writeOnly" ]) if path is not None else None
        # .'$schema#ObjectSchema'.writeOnly
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema#ObjectSchema'.writeOnly]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <writeOnly> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("examples", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "examples" ]) if path is not None else None
        # .'$schema#ObjectSchema'.examples
        res = isinstance(pval, list)
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$schema#ObjectSchema'.examples]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <examples> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("multipleOf", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "multipleOf" ]) if path is not None else None
        # .'$schema#ObjectSchema'.multipleOf
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool) and pval > 0.0
        if not res:
            rep is None or rep.append(("not a 1.0 loose float [.'$schema#ObjectSchema'.multipleOf]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <multipleOf> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("maximum", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "maximum" ]) if path is not None else None
        # .'$schema#ObjectSchema'.maximum
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.maximum]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <maximum> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("exclusiveMaximum", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "exclusiveMaximum" ]) if path is not None else None
        # .'$schema#ObjectSchema'.exclusiveMaximum
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.exclusiveMaximum]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <exclusiveMaximum> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("minimum", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "minimum" ]) if path is not None else None
        # .'$schema#ObjectSchema'.minimum
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.minimum]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <minimum> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("exclusiveMinimum", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "exclusiveMinimum" ]) if path is not None else None
        # .'$schema#ObjectSchema'.exclusiveMinimum
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.exclusiveMinimum]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <exclusiveMinimum> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("maxLength", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "maxLength" ]) if path is not None else None
        # .'$schema#ObjectSchema'.maxLength
        res = ((isinstance(pval, int) and not isinstance(pval, bool) or isinstance(pval, float) and pval == int(pval))) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.maxLength]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <maxLength> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("minLength", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "minLength" ]) if path is not None else None
        # .'$schema#ObjectSchema'.minLength
        res = ((isinstance(pval, int) and not isinstance(pval, bool) or isinstance(pval, float) and pval == int(pval))) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.minLength]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <minLength> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("additionalItems", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "additionalItems" ]) if path is not None else None
        # .'$schema#ObjectSchema'.additionalItems
        res = json_model_9(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.additionalItems]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <additionalItems> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("items", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "items" ]) if path is not None else None
        # .'$schema#ObjectSchema'.items
        # .'$schema#ObjectSchema'.items.'|'.0
        res = json_model_9(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.items.'|'.0]", lpath if path is not None else None))
        if not res:
            # .'$schema#ObjectSchema'.items.'|'.1
            res = json_model_5(pval, lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $schemaArray [.'$schema#ObjectSchema'.items.'|'.1]", lpath if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema#ObjectSchema'.items.'|']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <items> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("maxItems", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "maxItems" ]) if path is not None else None
        # .'$schema#ObjectSchema'.maxItems
        res = ((isinstance(pval, int) and not isinstance(pval, bool) or isinstance(pval, float) and pval == int(pval))) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.maxItems]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <maxItems> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("minItems", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "minItems" ]) if path is not None else None
        # .'$schema#ObjectSchema'.minItems
        res = ((isinstance(pval, int) and not isinstance(pval, bool) or isinstance(pval, float) and pval == int(pval))) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.minItems]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <minItems> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("uniqueItems", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "uniqueItems" ]) if path is not None else None
        # .'$schema#ObjectSchema'.uniqueItems
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema#ObjectSchema'.uniqueItems]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <uniqueItems> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("contains", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "contains" ]) if path is not None else None
        # .'$schema#ObjectSchema'.contains
        res = json_model_9(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.contains]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <contains> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("maxProperties", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "maxProperties" ]) if path is not None else None
        # .'$schema#ObjectSchema'.maxProperties
        res = ((isinstance(pval, int) and not isinstance(pval, bool) or isinstance(pval, float) and pval == int(pval))) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.maxProperties]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <maxProperties> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("minProperties", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "minProperties" ]) if path is not None else None
        # .'$schema#ObjectSchema'.minProperties
        res = ((isinstance(pval, int) and not isinstance(pval, bool) or isinstance(pval, float) and pval == int(pval))) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.minProperties]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <minProperties> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("required", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "required" ]) if path is not None else None
        # .'$schema#ObjectSchema'.required
        res = isinstance(pval, list)
        if res:
            for arr_0_idx, arr_0_item in enumerate(pval):
                arr_0_lpath: Path = ((lpath if path is not None else None) + [ arr_0_idx ]) if (lpath if path is not None else None) is not None else None
                # .'$schema#ObjectSchema'.required.0
                res = isinstance(arr_0_item, str)
                if not res:
                    rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.required.0]", arr_0_lpath if (lpath if path is not None else None) is not None else None))
                    break
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$schema#ObjectSchema'.required]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <required> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("additionalProperties", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "additionalProperties" ]) if path is not None else None
        # .'$schema#ObjectSchema'.additionalProperties
        res = json_model_9(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.additionalProperties]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <additionalProperties> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("definitions", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "definitions" ]) if path is not None else None
        # .'$schema#ObjectSchema'.definitions
        res = _jm_obj_0(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.definitions]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <definitions> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("properties", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "properties" ]) if path is not None else None
        # .'$schema#ObjectSchema'.properties
        res = _jm_obj_1(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.properties]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <properties> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("propertyNames", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "propertyNames" ]) if path is not None else None
        # .'$schema#ObjectSchema'.propertyNames
        res = json_model_9(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.propertyNames]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <propertyNames> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("dependencies", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "dependencies" ]) if path is not None else None
        # .'$schema#ObjectSchema'.dependencies
        res = _jm_obj_2(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.dependencies]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <dependencies> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("enum", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "enum" ]) if path is not None else None
        # .'$schema#ObjectSchema'.enum
        # .'$schema#ObjectSchema'.enum.'@'
        res = isinstance(pval, list)
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$schema#ObjectSchema'.enum.'@']", lpath if path is not None else None))
        if res:
            ival_0: int = len(pval)
            res = is_unique_array(pval, lpath if path is not None else None, rep) and ival_0 >= 1
            if not res:
                rep is None or rep.append(("constraints failed [.'$schema#ObjectSchema'.enum]", lpath if path is not None else None))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <enum> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    # ignored .'$schema#ObjectSchema'.const
    if (pval := val.get("type", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "type" ]) if path is not None else None
        # .'$schema#ObjectSchema'.type
        # .'$schema#ObjectSchema'.type.'|'.0
        res = json_model_6(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $simpleTypes [.'$schema#ObjectSchema'.type.'|'.0]", lpath if path is not None else None))
        if not res:
            # .'$schema#ObjectSchema'.type.'|'.1
            res = json_model_7(pval, lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $arrayTypes [.'$schema#ObjectSchema'.type.'|'.1]", lpath if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema#ObjectSchema'.type.'|']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <type> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("format", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "format" ]) if path is not None else None
        # .'$schema#ObjectSchema'.format
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.format]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <format> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("contentMediaType", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "contentMediaType" ]) if path is not None else None
        # .'$schema#ObjectSchema'.contentMediaType
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.contentMediaType]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <contentMediaType> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("contentEncoding", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "contentEncoding" ]) if path is not None else None
        # .'$schema#ObjectSchema'.contentEncoding
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.contentEncoding]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <contentEncoding> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("if", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "if" ]) if path is not None else None
        # .'$schema#ObjectSchema'.if
        res = json_model_9(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.if]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <if> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("then", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "then" ]) if path is not None else None
        # .'$schema#ObjectSchema'.then
        res = json_model_9(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.then]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <then> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("else", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "else" ]) if path is not None else None
        # .'$schema#ObjectSchema'.else
        res = json_model_9(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.else]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <else> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("allOf", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "allOf" ]) if path is not None else None
        # .'$schema#ObjectSchema'.allOf
        res = json_model_5(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$schema#ObjectSchema'.allOf]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <allOf> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("anyOf", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "anyOf" ]) if path is not None else None
        # .'$schema#ObjectSchema'.anyOf
        res = json_model_5(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$schema#ObjectSchema'.anyOf]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <anyOf> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("oneOf", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "oneOf" ]) if path is not None else None
        # .'$schema#ObjectSchema'.oneOf
        res = json_model_5(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$schema#ObjectSchema'.oneOf]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <oneOf> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("not", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "not" ]) if path is not None else None
        # .'$schema#ObjectSchema'.not
        res = json_model_9(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.not]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <not> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("$ref", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "$ref" ]) if path is not None else None
        # .'$schema#ObjectSchema'.'$ref'
        res = json_model_4(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $URI-REFERENCE [.'$schema#ObjectSchema'.'$ref']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <$ref> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("pattern", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "pattern" ]) if path is not None else None
        # .'$schema#ObjectSchema'.pattern
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.pattern]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <pattern> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    if (pval := val.get("patternProperties", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "patternProperties" ]) if path is not None else None
        # .'$schema#ObjectSchema'.patternProperties
        res = _jm_obj_3(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.patternProperties]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <patternProperties> [.'$schema#ObjectSchema']", lpath if path is not None else None))
            return False
    return True

# check $schema#URI-REFERENCE (.'$schema#URI-REFERENCE')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#URI-REFERENCE'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#URI-REFERENCE']", path))
    return res

# check $schema#schemaArray (.'$schema#schemaArray')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#schemaArray'
    # .'$schema#schemaArray'.'@'
    res: bool = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # .'$schema#schemaArray'.'@'.0
            res = json_model_9(arr_2_item, arr_2_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schema#schemaArray'.'@'.0]", arr_2_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#schemaArray'.'@']", path))
    if res:
        ival_1: int = len(val)
        res = ival_1 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#schemaArray']", path))
    return res


# check $schema#simpleTypes (.'$schema#simpleTypes')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#simpleTypes'
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$schema#simpleTypes'.'|']", path))
    return res

# check $schema#arrayTypes (.'$schema#arrayTypes')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#arrayTypes'
    # .'$schema#arrayTypes'.'@'
    res: bool = isinstance(val, list)
    if res:
        for arr_3_idx, arr_3_item in enumerate(val):
            arr_3_lpath: Path = (path + [ arr_3_idx ]) if path is not None else None
            # .'$schema#arrayTypes'.'@'.0
            res = json_model_6(arr_3_item, arr_3_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $simpleTypes [.'$schema#arrayTypes'.'@'.0]", arr_3_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#arrayTypes'.'@']", path))
    if res:
        ival_2: int = len(val)
        res = is_unique_array(val, path, rep) and ival_2 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#arrayTypes']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global check_model_map
        check_model_map = {
            "": json_model_3,
            "schema": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
