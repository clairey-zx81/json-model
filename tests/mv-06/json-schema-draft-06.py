#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
_jm_obj_0_map: PropMap
check_model_map: PropMap

# check $URI-REFERENCE (.'$URI-REFERENCE')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$URI-REFERENCE'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$URI-REFERENCE']", path))
    return res

# check $URI (.'$URI')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$URI'
    res = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URL [.'$URI']", path))
    return res

# check $schemaArray (.'$schemaArray')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schemaArray'
    # .'$schemaArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$schemaArray'.'@'.0
            res = json_model_9(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schemaArray'.'@'.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schemaArray'.'@']", path))
    if res:
        ival_0: int = len(val)
        res = ival_0 >= 1
    if not res:
        rep is None or rep.append(("constraints failed at [.'$schemaArray']", path))
    return res


# check $simpleTypes (.'$simpleTypes')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$simpleTypes'
    res = (val is None or isinstance(val, (bool, int, float, str))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$simpleTypes'.'|']", path))
    return res

# check $typeArray (.'$typeArray')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$typeArray'
    # .'$typeArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$typeArray'.'@'.0
            res = json_model_5(arr_1_item, arr_1_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $simpleTypes [.'$typeArray'.'@'.0]", arr_1_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$typeArray'.'@']", path))
    if res:
        ival_1: int = len(val)
        res = ival_1 >= 1
    if not res:
        rep is None or rep.append(("constraints failed at [.'$typeArray']", path))
    return res

# check $stringArray (.'$stringArray')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$stringArray'
    res = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # .'$stringArray'.0
            res = isinstance(arr_2_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$stringArray'.0]", arr_2_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$stringArray']", path))
    return res

# check _jm_obj_0_map_$id (.'$ObjectSchema'.'$id')
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.'$id'
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI-REFERENCE [.'$ObjectSchema'.'$id']", path))
    return res

# check _jm_obj_0_map_$ref (.'$ObjectSchema'.'$ref')
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.'$ref'
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI-REFERENCE [.'$ObjectSchema'.'$ref']", path))
    return res

# check _jm_obj_0_map_$schema (.'$ObjectSchema'.'$schema')
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.'$schema'
    res = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URL [.'$ObjectSchema'.'$schema']", path))
    return res

# check _jm_obj_0_map_additionalItems (.'$ObjectSchema'.additionalItems)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.additionalItems
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.additionalItems]", path))
    return res

# check _jm_obj_0_map_additionalProperties (.'$ObjectSchema'.additionalProperties)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.additionalProperties
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.additionalProperties]", path))
    return res

# check _jm_obj_0_map_allOf (.'$ObjectSchema'.allOf)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.allOf
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [.'$ObjectSchema'.allOf]", path))
    return res

# check _jm_obj_0_map_anyOf (.'$ObjectSchema'.anyOf)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.anyOf
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [.'$ObjectSchema'.anyOf]", path))
    return res

# check _jm_obj_0_map_const (.'$ObjectSchema'.const)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.const
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$ObjectSchema'.const]", path))
    return res

# check _jm_obj_0_map_contains (.'$ObjectSchema'.contains)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.contains
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.contains]", path))
    return res

# check _jm_obj_0_map_default (.'$ObjectSchema'.default)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$ObjectSchema'.default]", path))
    return res

# object .'$ObjectSchema'.definitions
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$ObjectSchema'.definitions.''
        res = json_model_9(pval, lpath_1 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.definitions.'']", lpath_1 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_0_map_definitions (.'$ObjectSchema'.definitions)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.definitions
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [.'$ObjectSchema'.definitions]", path))
    return res

# object .'$ObjectSchema'.dependencies
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema'.dependencies]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$ObjectSchema'.dependencies.''
        # .'$ObjectSchema'.dependencies.''.'|'.0
        res = json_model_9(pval, lpath_2 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.dependencies.''.'|'.0]", lpath_2 if path is not None else None))
        if not res:
            # .'$ObjectSchema'.dependencies.''.'|'.1
            res = json_model_7(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $stringArray [.'$ObjectSchema'.dependencies.''.'|'.1]", lpath_2 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$ObjectSchema'.dependencies.''.'|']", lpath_2 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_0_map_dependencies (.'$ObjectSchema'.dependencies)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.dependencies
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [.'$ObjectSchema'.dependencies]", path))
    return res

# check _jm_obj_0_map_description (.'$ObjectSchema'.description)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$ObjectSchema'.description]", path))
    return res

# check _jm_obj_0_map_enum (.'$ObjectSchema'.enum)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.enum
    # .'$ObjectSchema'.enum.'@'
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$ObjectSchema'.enum.'@']", path))
    if res:
        ival_2: int = len(val)
        res = is_unique_array(val, path, rep) and ival_2 >= 1
    if not res:
        rep is None or rep.append(("constraints failed at [.'$ObjectSchema'.enum]", path))
    return res

# check _jm_obj_0_map_examples (.'$ObjectSchema'.examples)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.examples
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$ObjectSchema'.examples]", path))
    return res

# check _jm_obj_0_map_exclusiveMaximum (.'$ObjectSchema'.exclusiveMaximum)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.exclusiveMaximum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$ObjectSchema'.exclusiveMaximum]", path))
    return res

# check _jm_obj_0_map_exclusiveMinimum (.'$ObjectSchema'.exclusiveMinimum)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.exclusiveMinimum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$ObjectSchema'.exclusiveMinimum]", path))
    return res

# check _jm_obj_0_map_format (.'$ObjectSchema'.format)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.format
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$ObjectSchema'.format]", path))
    return res

# check _jm_obj_0_map_items (.'$ObjectSchema'.items)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.items
    # .'$ObjectSchema'.items.'|'.0
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.items.'|'.0]", path))
    if not res:
        # .'$ObjectSchema'.items.'|'.1
        res = json_model_4(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$ObjectSchema'.items.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$ObjectSchema'.items.'|']", path))
    return res

# check _jm_obj_0_map_maxItems (.'$ObjectSchema'.maxItems)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.maxItems
    res = (isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val)) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$ObjectSchema'.maxItems]", path))
    return res

# check _jm_obj_0_map_maxLength (.'$ObjectSchema'.maxLength)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.maxLength
    res = (isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val)) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$ObjectSchema'.maxLength]", path))
    return res

# check _jm_obj_0_map_maxProperties (.'$ObjectSchema'.maxProperties)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.maxProperties
    res = (isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val)) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$ObjectSchema'.maxProperties]", path))
    return res

# check _jm_obj_0_map_maximum (.'$ObjectSchema'.maximum)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.maximum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$ObjectSchema'.maximum]", path))
    return res

# check _jm_obj_0_map_minItems (.'$ObjectSchema'.minItems)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.minItems
    res = (isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val)) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$ObjectSchema'.minItems]", path))
    return res

# check _jm_obj_0_map_minLength (.'$ObjectSchema'.minLength)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.minLength
    res = (isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val)) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$ObjectSchema'.minLength]", path))
    return res

# check _jm_obj_0_map_minProperties (.'$ObjectSchema'.minProperties)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.minProperties
    res = (isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val)) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$ObjectSchema'.minProperties]", path))
    return res

# check _jm_obj_0_map_minimum (.'$ObjectSchema'.minimum)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.minimum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$ObjectSchema'.minimum]", path))
    return res

# check _jm_obj_0_map_multipleOf (.'$ObjectSchema'.multipleOf)
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.multipleOf
    res = isinstance(val, (int, float)) and not isinstance(val, bool) and val > 0.0
    if not res:
        rep is None or rep.append(("not a 1.0 loose float [.'$ObjectSchema'.multipleOf]", path))
    return res

# check _jm_obj_0_map_not (.'$ObjectSchema'.not)
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.not
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.not]", path))
    return res

# check _jm_obj_0_map_oneOf (.'$ObjectSchema'.oneOf)
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.oneOf
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schemaArray [.'$ObjectSchema'.oneOf]", path))
    return res

# check _jm_obj_0_map_pattern (.'$ObjectSchema'.pattern)
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.pattern
    res = is_valid_regex(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $REGEX [.'$ObjectSchema'.pattern]", path))
    return res

# object .'$ObjectSchema'.patternProperties
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if is_valid_regex(prop, lpath_3 if path is not None else None, rep):
            # handle 1 key props
            # .'$ObjectSchema'.patternProperties.'$REGEX'
            res = json_model_9(pval, lpath_3 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.patternProperties.'$REGEX']", lpath_3 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [.'$ObjectSchema'.patternProperties]", lpath_3 if path is not None else None))
            return False
    return True

# check _jm_obj_0_map_patternProperties (.'$ObjectSchema'.patternProperties)
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.patternProperties
    res = _jm_obj_3(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [.'$ObjectSchema'.patternProperties]", path))
    return res

# object .'$ObjectSchema'.properties
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$ObjectSchema'.properties.''
        res = json_model_9(pval, lpath_4 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.properties.'']", lpath_4 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_0_map_properties (.'$ObjectSchema'.properties)
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.properties
    res = _jm_obj_4(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [.'$ObjectSchema'.properties]", path))
    return res

# check _jm_obj_0_map_propertyNames (.'$ObjectSchema'.propertyNames)
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.propertyNames
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$ObjectSchema'.propertyNames]", path))
    return res

# check _jm_obj_0_map_required (.'$ObjectSchema'.required)
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.required
    res = json_model_7(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $stringArray [.'$ObjectSchema'.required]", path))
    return res

# check _jm_obj_0_map_title (.'$ObjectSchema'.title)
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$ObjectSchema'.title]", path))
    return res

# check _jm_obj_0_map_type (.'$ObjectSchema'.type)
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.type
    # .'$ObjectSchema'.type.'|'.0
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $simpleTypes [.'$ObjectSchema'.type.'|'.0]", path))
    if not res:
        # .'$ObjectSchema'.type.'|'.1
        res = json_model_6(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $typeArray [.'$ObjectSchema'.type.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$ObjectSchema'.type.'|']", path))
    return res

# check _jm_obj_0_map_uniqueItems (.'$ObjectSchema'.uniqueItems)
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'.uniqueItems
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$ObjectSchema'.uniqueItems]", path))
    return res


# object .'$ObjectSchema'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectSchema']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_map.get(prop):
            # handle 38 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [.'$ObjectSchema']", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [.'$ObjectSchema']", lpath_0 if path is not None else None))
            return False
    return True

# check $ObjectSchema (.'$ObjectSchema')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectSchema'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [.'$ObjectSchema']", path))
    return res

# check $Schema (.'$Schema')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Schema'
    # .'$Schema'.'|'.0
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Schema'.'|'.0]", path))
    if not res:
        # .'$Schema'.'|'.1
        res = json_model_8(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ObjectSchema [.'$Schema'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Schema'.'|']", path))
    return res

# check $ ()
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    #
    # .'@'
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'@']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global _jm_obj_0_map
        _jm_obj_0_map = {
            "$id": _jm_f_0,
            "$ref": _jm_f_1,
            "$schema": _jm_f_2,
            "additionalItems": _jm_f_3,
            "additionalProperties": _jm_f_4,
            "allOf": _jm_f_5,
            "anyOf": _jm_f_6,
            "const": _jm_f_7,
            "contains": _jm_f_8,
            "default": _jm_f_9,
            "definitions": _jm_f_10,
            "dependencies": _jm_f_11,
            "description": _jm_f_12,
            "enum": _jm_f_13,
            "examples": _jm_f_14,
            "exclusiveMaximum": _jm_f_15,
            "exclusiveMinimum": _jm_f_16,
            "format": _jm_f_17,
            "items": _jm_f_18,
            "maxItems": _jm_f_19,
            "maxLength": _jm_f_20,
            "maxProperties": _jm_f_21,
            "maximum": _jm_f_22,
            "minItems": _jm_f_23,
            "minLength": _jm_f_24,
            "minProperties": _jm_f_25,
            "minimum": _jm_f_26,
            "multipleOf": _jm_f_27,
            "not": _jm_f_28,
            "oneOf": _jm_f_29,
            "pattern": _jm_f_30,
            "patternProperties": _jm_f_31,
            "properties": _jm_f_32,
            "propertyNames": _jm_f_33,
            "required": _jm_f_34,
            "title": _jm_f_35,
            "type": _jm_f_36,
            "uniqueItems": _jm_f_37,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "URI-REFERENCE": json_model_2,
            "URI": json_model_3,
            "schemaArray": json_model_4,
            "simpleTypes": json_model_5,
            "typeArray": json_model_6,
            "stringArray": json_model_7,
            "ObjectSchema": json_model_8,
            "Schema": json_model_9,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
