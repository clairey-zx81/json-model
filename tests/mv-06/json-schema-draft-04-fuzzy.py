#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
check_model_map: PropMap

# object .'$schema'.definitions
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema'.definitions.''
        res = json_model_3(pval, lpath_0 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.definitions.'']", lpath_0 if path is not None else None))
            return False
    return True

# object .'$schema'.properties
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema'.properties.''
        res = json_model_3(pval, lpath_1 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.properties.'']", lpath_1 if path is not None else None))
            return False
    return True

# object .'$schema'.patternProperties
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema'.patternProperties.''
        res = json_model_3(pval, lpath_2 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.patternProperties.'']", lpath_2 if path is not None else None))
            return False
    return True

# object .'$schema'.dependencies
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema'.dependencies]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema'.dependencies.''
        # .'$schema'.dependencies.''.'|'.0
        res = json_model_3(pval, lpath_3 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.dependencies.''.'|'.0]", lpath_3 if path is not None else None))
        if not res:
            # .'$schema'.dependencies.''.'|'.1
            res = json_model_6(pval, lpath_3 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $stringArray [.'$schema'.dependencies.''.'|'.1]", lpath_3 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema'.dependencies.''.'|']", lpath_3 if path is not None else None))
            return False
    return True

# check $schema (.'$schema')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # JSON Model for JSON Schema Draft 04 [JSON_MODEL_STRICT_INT, JSON_MODEL_LOOSE_FLOAT]
    # .'$schema'
    # check open must/may only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if (pval := val.get("id", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "id" ]) if path is not None else None
        # .'$schema'.id
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.id]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <id> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("$schema", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "$schema" ]) if path is not None else None
        # .'$schema'.'$schema'
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.'$schema']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <$schema> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("title", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "title" ]) if path is not None else None
        # .'$schema'.title
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.title]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <title> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("description", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "description" ]) if path is not None else None
        # .'$schema'.description
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.description]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <description> [.'$schema']", lpath if path is not None else None))
            return False
    # ignored .'$schema'.default
    if (pval := val.get("multipleOf", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "multipleOf" ]) if path is not None else None
        # .'$schema'.multipleOf
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool) and pval > 0.0
        if not res:
            rep is None or rep.append(("not a 1.0 loose float [.'$schema'.multipleOf]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <multipleOf> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("maximum", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "maximum" ]) if path is not None else None
        # .'$schema'.maximum
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a -1.0 loose float [.'$schema'.maximum]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <maximum> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("exclusiveMaximum", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "exclusiveMaximum" ]) if path is not None else None
        # .'$schema'.exclusiveMaximum
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema'.exclusiveMaximum]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <exclusiveMaximum> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("minimum", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "minimum" ]) if path is not None else None
        # .'$schema'.minimum
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a -1.0 loose float [.'$schema'.minimum]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <minimum> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("exclusiveMinimum", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "exclusiveMinimum" ]) if path is not None else None
        # .'$schema'.exclusiveMinimum
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema'.exclusiveMinimum]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <exclusiveMinimum> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("maxLength", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "maxLength" ]) if path is not None else None
        # .'$schema'.maxLength
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 strict int [.'$schema'.maxLength]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <maxLength> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("minLength", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "minLength" ]) if path is not None else None
        # .'$schema'.minLength
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 strict int [.'$schema'.minLength]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <minLength> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("additionalItems", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "additionalItems" ]) if path is not None else None
        # .'$schema'.additionalItems
        # .'$schema'.additionalItems.'|'.0
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema'.additionalItems.'|'.0]", lpath if path is not None else None))
        if not res:
            # .'$schema'.additionalItems.'|'.1
            res = json_model_3(pval, lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schema'.additionalItems.'|'.1]", lpath if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema'.additionalItems.'|']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <additionalItems> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("items", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "items" ]) if path is not None else None
        # .'$schema'.items
        # .'$schema'.items.'|'.0
        res = json_model_3(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.items.'|'.0]", lpath if path is not None else None))
        if not res:
            # .'$schema'.items.'|'.1
            res = json_model_4(pval, lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $schemaArray [.'$schema'.items.'|'.1]", lpath if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema'.items.'|']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <items> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("maxItems", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "maxItems" ]) if path is not None else None
        # .'$schema'.maxItems
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 strict int [.'$schema'.maxItems]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <maxItems> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("minItems", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "minItems" ]) if path is not None else None
        # .'$schema'.minItems
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 strict int [.'$schema'.minItems]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <minItems> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("uniqueItems", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "uniqueItems" ]) if path is not None else None
        # .'$schema'.uniqueItems
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema'.uniqueItems]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <uniqueItems> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("maxProperties", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "maxProperties" ]) if path is not None else None
        # .'$schema'.maxProperties
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 strict int [.'$schema'.maxProperties]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <maxProperties> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("minProperties", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "minProperties" ]) if path is not None else None
        # .'$schema'.minProperties
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 strict int [.'$schema'.minProperties]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <minProperties> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("required", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "required" ]) if path is not None else None
        # .'$schema'.required
        res = json_model_6(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $stringArray [.'$schema'.required]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <required> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("additionalProperties", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "additionalProperties" ]) if path is not None else None
        # .'$schema'.additionalProperties
        # .'$schema'.additionalProperties.'|'.0
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema'.additionalProperties.'|'.0]", lpath if path is not None else None))
        if not res:
            # .'$schema'.additionalProperties.'|'.1
            res = json_model_3(pval, lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schema'.additionalProperties.'|'.1]", lpath if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema'.additionalProperties.'|']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <additionalProperties> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("definitions", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "definitions" ]) if path is not None else None
        # .'$schema'.definitions
        res = _jm_obj_0(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$schema'.definitions]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <definitions> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("properties", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "properties" ]) if path is not None else None
        # .'$schema'.properties
        res = _jm_obj_1(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$schema'.properties]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <properties> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("patternProperties", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "patternProperties" ]) if path is not None else None
        # .'$schema'.patternProperties
        res = _jm_obj_2(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$schema'.patternProperties]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <patternProperties> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("dependencies", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "dependencies" ]) if path is not None else None
        # .'$schema'.dependencies
        res = _jm_obj_3(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$schema'.dependencies]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <dependencies> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("enum", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "enum" ]) if path is not None else None
        # .'$schema'.enum
        # .'$schema'.enum.'@'
        res = isinstance(pval, list)
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$schema'.enum.'@']", lpath if path is not None else None))
        if res:
            ival_0: int = len(pval)
            res = is_unique_array(pval, lpath if path is not None else None, rep) and ival_0 >= 1
            if not res:
                rep is None or rep.append(("constraints failed [.'$schema'.enum]", lpath if path is not None else None))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <enum> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("type", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "type" ]) if path is not None else None
        # .'$schema'.type
        # .'$schema'.type.'|'.0
        res = json_model_5(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $simpleTypes [.'$schema'.type.'|'.0]", lpath if path is not None else None))
        if not res:
            # .'$schema'.type.'|'.1
            res = json_model_7(pval, lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $typeArray [.'$schema'.type.'|'.1]", lpath if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema'.type.'|']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <type> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("format", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "format" ]) if path is not None else None
        # .'$schema'.format
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.format]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <format> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("allOf", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "allOf" ]) if path is not None else None
        # .'$schema'.allOf
        res = json_model_4(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$schema'.allOf]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <allOf> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("anyOf", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "anyOf" ]) if path is not None else None
        # .'$schema'.anyOf
        res = json_model_4(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$schema'.anyOf]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <anyOf> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("oneOf", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "oneOf" ]) if path is not None else None
        # .'$schema'.oneOf
        res = json_model_4(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$schema'.oneOf]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <oneOf> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("not", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "not" ]) if path is not None else None
        # .'$schema'.not
        res = json_model_3(pval, lpath if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema'.not]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <not> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("pattern", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "pattern" ]) if path is not None else None
        # .'$schema'.pattern
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.pattern]", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <pattern> [.'$schema']", lpath if path is not None else None))
            return False
    if (pval := val.get("$ref", UNDEFINED)) != UNDEFINED:
        lpath = (path + [ "$ref" ]) if path is not None else None
        # .'$schema'.'$ref'
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema'.'$ref']", lpath if path is not None else None))
            rep is None or rep.append(("unexpected value for optional prop <$ref> [.'$schema']", lpath if path is not None else None))
            return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .
    res: bool = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema [.]", path))
    return res

# check $schema#schemaArray (.'$schema#schemaArray')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#schemaArray'
    # .'$schema#schemaArray'.'@'
    res: bool = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$schema#schemaArray'.'@'.0
            res = json_model_3(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schema#schemaArray'.'@'.0]", arr_0_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#schemaArray'.'@']", path))
    if res:
        ival_1: int = len(val)
        res = ival_1 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#schemaArray']", path))
    return res


# check $schema#simpleTypes (.'$schema#simpleTypes')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#simpleTypes'
    res: bool = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$schema#simpleTypes'.'|']", path))
    return res

# check $schema#stringArray (.'$schema#stringArray')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#stringArray'
    # .'$schema#stringArray'.'@'
    res: bool = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$schema#stringArray'.'@'.0
            res = isinstance(arr_1_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$schema#stringArray'.'@'.0]", arr_1_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#stringArray'.'@']", path))
    if res:
        ival_2: int = len(val)
        res = is_unique_array(val, path, rep) and ival_2 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#stringArray']", path))
    return res

# check $schema#typeArray (.'$schema#typeArray')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#typeArray'
    # .'$schema#typeArray'.'@'
    res: bool = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # .'$schema#typeArray'.'@'.0
            res = json_model_5(arr_2_item, arr_2_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $simpleTypes [.'$schema#typeArray'.'@'.0]", arr_2_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#typeArray'.'@']", path))
    if res:
        ival_3: int = len(val)
        res = is_unique_array(val, path, rep) and ival_3 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#typeArray']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global check_model_map
        check_model_map = {
            "": json_model_3,
            "schema": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
