#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_2($$$);
sub json_model_3($$$);
sub json_model_4($$$);
my %_jm_cst_0;
sub _jm_obj_0($$$);
sub json_model_5($$$);
sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
my %_jm_obj_1_map;
sub _jm_obj_1($$$);
sub json_model_6($$$);
sub _jm_obj_3($$$);
sub _jm_obj_4($$$);
sub _jm_obj_2($$$);
sub json_model_7($$$);
sub _jm_obj_5($$$);
sub json_model_8($$$);
sub _jm_f_6($$$);
sub _jm_obj_7($$$);
sub _jm_f_7($$$);
sub _jm_f_8($$$);
sub _jm_f_9($$$);
sub _jm_f_10($$$);
sub _jm_obj_8($$$);
sub _jm_f_11($$$);
sub _jm_f_12($$$);
sub _jm_f_13($$$);
sub _jm_f_14($$$);
sub _jm_f_15($$$);
my %_jm_obj_6_map;
sub _jm_obj_6($$$);
sub json_model_9($$$);
sub _jm_f_16($$$);
sub _jm_obj_10($$$);
sub _jm_f_17($$$);
sub _jm_f_18($$$);
sub _jm_f_19($$$);
sub _jm_f_20($$$);
sub _jm_obj_11($$$);
sub _jm_f_21($$$);
sub _jm_f_22($$$);
sub _jm_f_23($$$);
my %_jm_cst_1;
sub _jm_f_24($$$);
sub _jm_f_25($$$);
sub _jm_f_26($$$);
sub _jm_f_27($$$);
sub _jm_f_28($$$);
sub _jm_f_29($$$);
my %_jm_obj_9_map;
sub _jm_obj_9($$$);
sub json_model_10($$$);
sub _jm_f_30($$$);
sub _jm_obj_13($$$);
sub _jm_f_31($$$);
sub _jm_f_32($$$);
sub _jm_f_33($$$);
sub _jm_f_34($$$);
sub _jm_f_35($$$);
sub _jm_obj_14($$$);
sub _jm_f_36($$$);
sub _jm_f_37($$$);
sub _jm_f_38($$$);
sub _jm_f_39($$$);
sub _jm_f_40($$$);
sub _jm_f_41($$$);
sub _jm_f_42($$$);
sub _jm_f_43($$$);
sub _jm_f_44($$$);
sub _jm_f_45($$$);
my %_jm_obj_12_map;
sub _jm_obj_12($$$);
sub json_model_11($$$);
sub _jm_f_46($$$);
sub _jm_obj_16($$$);
sub _jm_f_47($$$);
sub _jm_f_48($$$);
sub _jm_f_49($$$);
sub _jm_f_50($$$);
sub _jm_f_51($$$);
sub _jm_obj_17($$$);
sub _jm_f_52($$$);
sub _jm_f_53($$$);
sub _jm_f_54($$$);
sub _jm_f_55($$$);
sub _jm_obj_18($$$);
sub _jm_f_56($$$);
sub _jm_obj_19($$$);
sub _jm_f_57($$$);
sub _jm_f_58($$$);
sub _jm_f_59($$$);
my %_jm_obj_15_map;
sub _jm_obj_15($$$);
sub json_model_12($$$);
sub _jm_f_60($$$);
sub _jm_obj_21($$$);
sub _jm_f_61($$$);
sub _jm_f_62($$$);
sub _jm_f_63($$$);
sub _jm_f_64($$$);
sub _jm_obj_22($$$);
sub _jm_f_65($$$);
sub _jm_f_66($$$);
sub _jm_f_67($$$);
sub _jm_f_68($$$);
sub _jm_f_69($$$);
sub _jm_f_70($$$);
sub _jm_f_71($$$);
my %_jm_obj_20_map;
sub _jm_obj_20($$$);
sub json_model_13($$$);
sub _jm_f_72($$$);
sub _jm_obj_24($$$);
sub _jm_f_73($$$);
sub _jm_f_74($$$);
sub _jm_f_75($$$);
sub _jm_f_76($$$);
sub _jm_obj_25($$$);
sub _jm_f_77($$$);
sub _jm_f_78($$$);
sub _jm_f_79($$$);
sub _jm_f_80($$$);
sub _jm_f_81($$$);
sub _jm_f_82($$$);
sub _jm_f_83($$$);
my %_jm_obj_23_map;
sub _jm_obj_23($$$);
sub json_model_14($$$);
sub _jm_f_84($$$);
sub _jm_obj_27($$$);
sub _jm_f_85($$$);
sub _jm_f_86($$$);
sub _jm_f_87($$$);
sub _jm_f_88($$$);
sub _jm_obj_28($$$);
sub _jm_f_89($$$);
sub _jm_f_90($$$);
sub _jm_f_91($$$);
sub _jm_f_92($$$);
sub _jm_f_93($$$);
my %_jm_obj_26_map;
sub _jm_obj_26($$$);
sub json_model_15($$$);
sub _jm_f_94($$$);
sub _jm_obj_30($$$);
sub _jm_f_95($$$);
sub _jm_f_96($$$);
sub _jm_f_97($$$);
sub _jm_f_98($$$);
sub _jm_obj_31($$$);
sub _jm_f_99($$$);
sub _jm_f_100($$$);
sub _jm_f_101($$$);
sub _jm_f_102($$$);
sub _jm_f_103($$$);
my %_jm_obj_29_map;
sub _jm_obj_29($$$);
sub json_model_16($$$);
sub _jm_f_104($$$);
sub _jm_obj_33($$$);
sub _jm_f_105($$$);
sub _jm_f_106($$$);
sub _jm_f_107($$$);
sub _jm_f_108($$$);
sub _jm_obj_34($$$);
sub _jm_f_109($$$);
sub _jm_f_110($$$);
sub _jm_f_111($$$);
sub _jm_f_112($$$);
sub _jm_f_113($$$);
my %_jm_obj_32_map;
sub _jm_obj_32($$$);
sub json_model_17($$$);
sub _jm_f_114($$$);
sub _jm_obj_36($$$);
sub _jm_f_115($$$);
sub _jm_f_116($$$);
sub _jm_f_117($$$);
sub _jm_f_118($$$);
sub _jm_obj_37($$$);
sub _jm_f_119($$$);
sub _jm_f_120($$$);
sub _jm_f_121($$$);
sub _jm_f_122($$$);
sub _jm_f_123($$$);
my %_jm_obj_35_map;
sub _jm_obj_35($$$);
sub json_model_18($$$);
sub _jm_f_124($$$);
sub _jm_obj_39($$$);
sub _jm_f_125($$$);
sub _jm_f_126($$$);
sub _jm_f_127($$$);
sub _jm_f_128($$$);
sub _jm_obj_40($$$);
sub _jm_f_129($$$);
sub _jm_f_130($$$);
sub _jm_f_131($$$);
sub _jm_f_132($$$);
sub _jm_f_133($$$);
my %_jm_obj_38_map;
sub _jm_obj_38($$$);
sub json_model_19($$$);
sub _jm_f_134($$$);
sub _jm_obj_42($$$);
sub _jm_f_135($$$);
sub _jm_f_136($$$);
sub _jm_f_137($$$);
sub _jm_f_138($$$);
sub _jm_obj_43($$$);
sub _jm_f_139($$$);
sub _jm_f_140($$$);
sub _jm_f_141($$$);
sub _jm_f_142($$$);
sub _jm_f_143($$$);
my %_jm_obj_41_map;
sub _jm_obj_41($$$);
sub json_model_20($$$);
sub _jm_f_144($$$);
sub _jm_obj_45($$$);
sub _jm_f_145($$$);
sub _jm_f_146($$$);
sub _jm_f_147($$$);
sub _jm_f_148($$$);
sub _jm_obj_46($$$);
sub _jm_f_149($$$);
sub _jm_f_150($$$);
sub _jm_f_151($$$);
sub _jm_f_152($$$);
sub _jm_f_153($$$);
my %_jm_obj_44_map;
sub _jm_obj_44($$$);
sub json_model_21($$$);
sub _jm_f_154($$$);
sub _jm_obj_48($$$);
sub _jm_f_155($$$);
sub _jm_f_156($$$);
sub _jm_f_157($$$);
sub _jm_f_158($$$);
sub _jm_obj_49($$$);
sub _jm_f_159($$$);
sub _jm_f_160($$$);
sub _jm_f_161($$$);
sub _jm_f_162($$$);
sub _jm_f_163($$$);
my %_jm_obj_47_map;
sub _jm_obj_47($$$);
sub json_model_22($$$);
my %_jm_map_0;
sub json_model_23($$$);
sub json_model_24($$$);
sub _jm_obj_50($$$);
sub json_model_25($$$);
sub json_model_1($$$);
my %check_model_map;

# check $const (.'$const')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$const'
    # .'$const'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$const'.'|'.1
        $res = jm_is_boolean($val);
        if (! $res)
        {
            # .'$const'.'|'.2
            $res = jm_is_integer($val);
            if (! $res)
            {
                # .'$const'.'|'.3
                $res = jm_is_numeric($val);
                if (! $res)
                {
                    # .'$const'.'|'.4
                    $res = jm_is_string($val);
                }
            }
        }
    }
    return $res;
}

# check $enum (.'$enum')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$enum'
    $res = jm_is_array($val);
    if ($res)
    {
        # .'$enum'.'|'.0
        for my $arr_2_idx (0 .. $#$val)
        {
            my $arr_2_item = $$val[$arr_2_idx];
            # .'$enum'.'|'.0.0
            $res = jm_is_string($arr_2_item);
            if (! $res)
            {
                last;
            }
        }
        if (! $res)
        {
            # .'$enum'.'|'.1
            for my $arr_1_idx (0 .. $#$val)
            {
                my $arr_1_item = $$val[$arr_1_idx];
                # .'$enum'.'|'.1.0
                $res = jm_is_integer($arr_1_item);
                if (! $res)
                {
                    last;
                }
            }
            if (! $res)
            {
                # .'$enum'.'|'.2
                for my $arr_0_idx (0 .. $#$val)
                {
                    my $arr_0_item = $$val[$arr_0_idx];
                    # .'$enum'.'|'.2.0
                    $res = jm_is_boolean($arr_0_item);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
        }
    }
    return $res;
}

# check $schemaArray (.'$schemaArray')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$schemaArray'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_3_idx (0 .. $#$val)
        {
            my $arr_3_item = $$val[$arr_3_idx];
            # .'$schemaArray'.0
            $res = json_model_24($arr_3_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}


# object .'$stringKeywords'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'pattern')
        {
            # handle may pattern property
            # .'$stringKeywords'.pattern
            $res = jm_is_string($pval) && jm_is_valid_regex($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'minLength')
        {
            # handle may minLength property
            # .'$stringKeywords'.minLength
            $res = jm_is_integer($pval) && $pval >= 0;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'maxLength')
        {
            # handle may maxLength property
            # .'$stringKeywords'.maxLength
            $res = jm_is_integer($pval) && $pval >= 0;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'format')
        {
            # handle may format property
            # .'$stringKeywords'.format
            $res = jm_is_scalar($pval) && jm_is_string($pval) && exists $_jm_cst_0{$pval};
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $stringKeywords (.'$stringKeywords')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$stringKeywords'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# check _jm_obj_1_map_additionalItems (.'$arrayKeywords'.additionalItems)
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$arrayKeywords'.additionalItems
    $res = json_model_24($val, $path, $rep);
    return $res;
}

# check _jm_obj_1_map_items (.'$arrayKeywords'.items)
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$arrayKeywords'.items
    # .'$arrayKeywords'.items.'|'.0
    $res = json_model_24($val, $path, $rep);
    if (! $res)
    {
        # .'$arrayKeywords'.items.'|'.1
        $res = json_model_4($val, $path, $rep);
    }
    return $res;
}

# check _jm_obj_1_map_maxItems (.'$arrayKeywords'.maxItems)
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$arrayKeywords'.maxItems
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_1_map_minItems (.'$arrayKeywords'.minItems)
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$arrayKeywords'.minItems
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_1_map_prefixItems (.'$arrayKeywords'.prefixItems)
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$arrayKeywords'.prefixItems
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_1_map_uniqueItems (.'$arrayKeywords'.uniqueItems)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$arrayKeywords'.uniqueItems
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$arrayKeywords'
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_1_map{$prop}))
        {
            # handle 6 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $arrayKeywords (.'$arrayKeywords')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # not included: contains…
    # .'$arrayKeywords'
    $res = _jm_obj_1($val, $path, $rep);
    return $res;
}

# object .'$objectKeywords'.properties
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$objectKeywords'.properties.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$objectKeywords'.patternProperties
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_regex($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$objectKeywords'.patternProperties.'$REGEX'
            $res = json_model_24($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$objectKeywords'
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'properties')
        {
            # handle may properties property
            # .'$objectKeywords'.properties
            $res = _jm_obj_3($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'required')
        {
            # handle may required property
            # .'$objectKeywords'.required
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_4_idx (0 .. $#$pval)
                {
                    my $arr_4_item = $$pval[$arr_4_idx];
                    # .'$objectKeywords'.required.0
                    $res = jm_is_string($arr_4_item);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'additionalProperties')
        {
            # handle may additionalProperties property
            # .'$objectKeywords'.additionalProperties
            $res = json_model_24($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'patternProperties')
        {
            # handle may patternProperties property
            # .'$objectKeywords'.patternProperties
            $res = _jm_obj_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $objectKeywords (.'$objectKeywords')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # not included: dependentRequired, min/maxProps…
    # .'$objectKeywords'
    $res = _jm_obj_2($val, $path, $rep);
    return $res;
}

# object .'$numberKeywords'
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'minimum')
        {
            # handle may minimum property
            # .'$numberKeywords'.minimum
            $res = jm_is_numeric($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'maximum')
        {
            # handle may maximum property
            # .'$numberKeywords'.maximum
            $res = jm_is_numeric($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $numberKeywords (.'$numberKeywords')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # not included: exclusive*, multipleOf…
    # .'$numberKeywords'
    $res = _jm_obj_5($val, $path, $rep);
    return $res;
}

# check _jm_obj_6_map_$comment (.'$metas'.'$comment')
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$metas'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$metas'.'$defs'
sub _jm_obj_7($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$metas'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_6_map_$defs (.'$metas'.'$defs')
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$metas'.'$defs'
    $res = _jm_obj_7($val, $path, $rep);
    return $res;
}

# check _jm_obj_6_map_$id (.'$metas'.'$id')
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$metas'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_6_map_$schema (.'$metas'.'$schema')
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$metas'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_6_map_default (.'$metas'.default)
sub _jm_f_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$metas'.default
    $res = 1;
    return $res;
}

# object .'$metas'.definitions
sub _jm_obj_8($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$metas'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_6_map_definitions (.'$metas'.definitions)
sub _jm_f_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$metas'.definitions
    $res = _jm_obj_8($val, $path, $rep);
    return $res;
}

# check _jm_obj_6_map_description (.'$metas'.description)
sub _jm_f_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$metas'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_6_map_examples (.'$metas'.examples)
sub _jm_f_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$metas'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_6_map_id (.'$metas'.id)
sub _jm_f_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$metas'.id
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_6_map_title (.'$metas'.title)
sub _jm_f_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$metas'.title
    $res = jm_is_string($val);
    return $res;
}


sub _jm_re_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^x-.*/;
    return $res;
}

# object .'$metas'
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $_jm_obj_6_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$metas'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $metas (.'$metas')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # there is a trick with $schema… in RootSchema below
    # .'$metas'
    $res = _jm_obj_6($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_$comment (.'$String'.'$comment')
sub _jm_f_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$String'.'$defs'
sub _jm_obj_10($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$String'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_$defs (.'$String'.'$defs')
sub _jm_f_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.'$defs'
    $res = _jm_obj_10($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_$id (.'$String'.'$id')
sub _jm_f_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_9_map_$schema (.'$String'.'$schema')
sub _jm_f_19($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_9_map_default (.'$String'.default)
sub _jm_f_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.default
    $res = 1;
    return $res;
}

# object .'$String'.definitions
sub _jm_obj_11($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$String'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_9_map_definitions (.'$String'.definitions)
sub _jm_f_21($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.definitions
    $res = _jm_obj_11($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_description (.'$String'.description)
sub _jm_f_22($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_9_map_examples (.'$String'.examples)
sub _jm_f_23($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.examples
    $res = jm_is_array($val);
    return $res;
}


# check _jm_obj_9_map_format (.'$String'.format)
sub _jm_f_24($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.format
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_1{$val};
    return $res;
}

# check _jm_obj_9_map_id (.'$String'.id)
sub _jm_f_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.id
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_9_map_maxLength (.'$String'.maxLength)
sub _jm_f_26($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.maxLength
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_9_map_minLength (.'$String'.minLength)
sub _jm_f_27($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.minLength
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_9_map_pattern (.'$String'.pattern)
sub _jm_f_28($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.pattern
    $res = jm_is_string($val) && jm_is_valid_regex($val, $path, $rep);
    return $res;
}

# check _jm_obj_9_map_title (.'$String'.title)
sub _jm_f_29($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'.title
    $res = jm_is_string($val);
    return $res;
}


# object .'$String'
sub _jm_obj_9($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$String'.type
            $res = jm_is_string($pval) && $pval eq 'string';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_9_map{$prop}))
        {
            # handle 14 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$String'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $String (.'$String')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$String'
    $res = _jm_obj_9($val, $path, $rep);
    return $res;
}

# check _jm_obj_12_map_$comment (.'$Array'.'$comment')
sub _jm_f_30($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Array'.'$defs'
sub _jm_obj_13($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Array'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_12_map_$defs (.'$Array'.'$defs')
sub _jm_f_31($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.'$defs'
    $res = _jm_obj_13($val, $path, $rep);
    return $res;
}

# check _jm_obj_12_map_$id (.'$Array'.'$id')
sub _jm_f_32($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_12_map_$schema (.'$Array'.'$schema')
sub _jm_f_33($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_12_map_additionalItems (.'$Array'.additionalItems)
sub _jm_f_34($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.additionalItems
    $res = json_model_24($val, $path, $rep);
    return $res;
}

# check _jm_obj_12_map_default (.'$Array'.default)
sub _jm_f_35($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.default
    $res = 1;
    return $res;
}

# object .'$Array'.definitions
sub _jm_obj_14($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Array'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_12_map_definitions (.'$Array'.definitions)
sub _jm_f_36($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.definitions
    $res = _jm_obj_14($val, $path, $rep);
    return $res;
}

# check _jm_obj_12_map_description (.'$Array'.description)
sub _jm_f_37($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_12_map_examples (.'$Array'.examples)
sub _jm_f_38($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_12_map_id (.'$Array'.id)
sub _jm_f_39($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.id
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_12_map_items (.'$Array'.items)
sub _jm_f_40($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.items
    # .'$Array'.items.'|'.0
    $res = json_model_24($val, $path, $rep);
    if (! $res)
    {
        # .'$Array'.items.'|'.1
        $res = json_model_4($val, $path, $rep);
    }
    return $res;
}

# check _jm_obj_12_map_maxItems (.'$Array'.maxItems)
sub _jm_f_41($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.maxItems
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_12_map_minItems (.'$Array'.minItems)
sub _jm_f_42($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.minItems
    $res = jm_is_integer($val) && $val >= 0;
    return $res;
}

# check _jm_obj_12_map_prefixItems (.'$Array'.prefixItems)
sub _jm_f_43($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.prefixItems
    $res = json_model_4($val, $path, $rep);
    return $res;
}

# check _jm_obj_12_map_title (.'$Array'.title)
sub _jm_f_44($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.title
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_12_map_uniqueItems (.'$Array'.uniqueItems)
sub _jm_f_45($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'.uniqueItems
    $res = jm_is_boolean($val);
    return $res;
}


# object .'$Array'
sub _jm_obj_12($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Array'.type
            $res = jm_is_string($pval) && $pval eq 'array';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_12_map{$prop}))
        {
            # handle 16 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Array'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Array (.'$Array')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'
    $res = _jm_obj_12($val, $path, $rep);
    return $res;
}

# check _jm_obj_15_map_$comment (.'$Object'.'$comment')
sub _jm_f_46($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Object'.'$defs'
sub _jm_obj_16($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Object'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_15_map_$defs (.'$Object'.'$defs')
sub _jm_f_47($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.'$defs'
    $res = _jm_obj_16($val, $path, $rep);
    return $res;
}

# check _jm_obj_15_map_$id (.'$Object'.'$id')
sub _jm_f_48($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_15_map_$schema (.'$Object'.'$schema')
sub _jm_f_49($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_15_map_additionalProperties (.'$Object'.additionalProperties)
sub _jm_f_50($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.additionalProperties
    $res = json_model_24($val, $path, $rep);
    return $res;
}

# check _jm_obj_15_map_default (.'$Object'.default)
sub _jm_f_51($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.default
    $res = 1;
    return $res;
}

# object .'$Object'.definitions
sub _jm_obj_17($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Object'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_15_map_definitions (.'$Object'.definitions)
sub _jm_f_52($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.definitions
    $res = _jm_obj_17($val, $path, $rep);
    return $res;
}

# check _jm_obj_15_map_description (.'$Object'.description)
sub _jm_f_53($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_15_map_examples (.'$Object'.examples)
sub _jm_f_54($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_15_map_id (.'$Object'.id)
sub _jm_f_55($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.id
    $res = jm_is_string($val);
    return $res;
}

# object .'$Object'.patternProperties
sub _jm_obj_18($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (jm_is_string($prop) && jm_is_valid_regex($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Object'.patternProperties.'$REGEX'
            $res = json_model_24($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_15_map_patternProperties (.'$Object'.patternProperties)
sub _jm_f_56($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.patternProperties
    $res = _jm_obj_18($val, $path, $rep);
    return $res;
}

# object .'$Object'.properties
sub _jm_obj_19($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Object'.properties.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_15_map_properties (.'$Object'.properties)
sub _jm_f_57($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.properties
    $res = _jm_obj_19($val, $path, $rep);
    return $res;
}

# check _jm_obj_15_map_required (.'$Object'.required)
sub _jm_f_58($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.required
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_5_idx (0 .. $#$val)
        {
            my $arr_5_item = $$val[$arr_5_idx];
            # .'$Object'.required.0
            $res = jm_is_string($arr_5_item);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check _jm_obj_15_map_title (.'$Object'.title)
sub _jm_f_59($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'.title
    $res = jm_is_string($val);
    return $res;
}


# object .'$Object'
sub _jm_obj_15($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Object'.type
            $res = jm_is_string($pval) && $pval eq 'object';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_15_map{$prop}))
        {
            # handle 14 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Object'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Object (.'$Object')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Object'
    $res = _jm_obj_15($val, $path, $rep);
    return $res;
}

# check _jm_obj_20_map_$comment (.'$Integer'.'$comment')
sub _jm_f_60($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Integer'.'$defs'
sub _jm_obj_21($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Integer'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_20_map_$defs (.'$Integer'.'$defs')
sub _jm_f_61($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'.'$defs'
    $res = _jm_obj_21($val, $path, $rep);
    return $res;
}

# check _jm_obj_20_map_$id (.'$Integer'.'$id')
sub _jm_f_62($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_20_map_$schema (.'$Integer'.'$schema')
sub _jm_f_63($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_20_map_default (.'$Integer'.default)
sub _jm_f_64($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'.default
    $res = 1;
    return $res;
}

# object .'$Integer'.definitions
sub _jm_obj_22($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Integer'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_20_map_definitions (.'$Integer'.definitions)
sub _jm_f_65($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'.definitions
    $res = _jm_obj_22($val, $path, $rep);
    return $res;
}

# check _jm_obj_20_map_description (.'$Integer'.description)
sub _jm_f_66($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_20_map_examples (.'$Integer'.examples)
sub _jm_f_67($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_20_map_id (.'$Integer'.id)
sub _jm_f_68($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'.id
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_20_map_maximum (.'$Integer'.maximum)
sub _jm_f_69($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'.maximum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_20_map_minimum (.'$Integer'.minimum)
sub _jm_f_70($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'.minimum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_20_map_title (.'$Integer'.title)
sub _jm_f_71($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'.title
    $res = jm_is_string($val);
    return $res;
}


# object .'$Integer'
sub _jm_obj_20($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Integer'.type
            $res = jm_is_string($pval) && $pval eq 'integer';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_20_map{$prop}))
        {
            # handle 12 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Integer'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Integer (.'$Integer')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Integer'
    $res = _jm_obj_20($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_$comment (.'$Number'.'$comment')
sub _jm_f_72($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Number'.'$defs'
sub _jm_obj_24($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Number'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_23_map_$defs (.'$Number'.'$defs')
sub _jm_f_73($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'.'$defs'
    $res = _jm_obj_24($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_$id (.'$Number'.'$id')
sub _jm_f_74($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_23_map_$schema (.'$Number'.'$schema')
sub _jm_f_75($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_23_map_default (.'$Number'.default)
sub _jm_f_76($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'.default
    $res = 1;
    return $res;
}

# object .'$Number'.definitions
sub _jm_obj_25($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Number'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_23_map_definitions (.'$Number'.definitions)
sub _jm_f_77($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'.definitions
    $res = _jm_obj_25($val, $path, $rep);
    return $res;
}

# check _jm_obj_23_map_description (.'$Number'.description)
sub _jm_f_78($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_23_map_examples (.'$Number'.examples)
sub _jm_f_79($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_23_map_id (.'$Number'.id)
sub _jm_f_80($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'.id
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_23_map_maximum (.'$Number'.maximum)
sub _jm_f_81($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'.maximum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_23_map_minimum (.'$Number'.minimum)
sub _jm_f_82($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'.minimum
    $res = jm_is_numeric($val);
    return $res;
}

# check _jm_obj_23_map_title (.'$Number'.title)
sub _jm_f_83($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'.title
    $res = jm_is_string($val);
    return $res;
}


# object .'$Number'
sub _jm_obj_23($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Number'.type
            $res = jm_is_string($pval) && $pval eq 'number';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_23_map{$prop}))
        {
            # handle 12 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Number'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Number (.'$Number')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Number'
    $res = _jm_obj_23($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_$comment (.'$Bool'.'$comment')
sub _jm_f_84($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Bool'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Bool'.'$defs'
sub _jm_obj_27($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Bool'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_26_map_$defs (.'$Bool'.'$defs')
sub _jm_f_85($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Bool'.'$defs'
    $res = _jm_obj_27($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_$id (.'$Bool'.'$id')
sub _jm_f_86($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Bool'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_26_map_$schema (.'$Bool'.'$schema')
sub _jm_f_87($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Bool'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_26_map_default (.'$Bool'.default)
sub _jm_f_88($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Bool'.default
    $res = 1;
    return $res;
}

# object .'$Bool'.definitions
sub _jm_obj_28($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Bool'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_26_map_definitions (.'$Bool'.definitions)
sub _jm_f_89($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Bool'.definitions
    $res = _jm_obj_28($val, $path, $rep);
    return $res;
}

# check _jm_obj_26_map_description (.'$Bool'.description)
sub _jm_f_90($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Bool'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_26_map_examples (.'$Bool'.examples)
sub _jm_f_91($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Bool'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_26_map_id (.'$Bool'.id)
sub _jm_f_92($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Bool'.id
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_26_map_title (.'$Bool'.title)
sub _jm_f_93($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Bool'.title
    $res = jm_is_string($val);
    return $res;
}


# object .'$Bool'
sub _jm_obj_26($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Bool'.type
            $res = jm_is_string($pval) && $pval eq 'boolean';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_26_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Bool'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Bool (.'$Bool')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Bool'
    $res = _jm_obj_26($val, $path, $rep);
    return $res;
}

# check _jm_obj_29_map_$comment (.'$Null'.'$comment')
sub _jm_f_94($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Null'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Null'.'$defs'
sub _jm_obj_30($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Null'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_29_map_$defs (.'$Null'.'$defs')
sub _jm_f_95($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Null'.'$defs'
    $res = _jm_obj_30($val, $path, $rep);
    return $res;
}

# check _jm_obj_29_map_$id (.'$Null'.'$id')
sub _jm_f_96($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Null'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_29_map_$schema (.'$Null'.'$schema')
sub _jm_f_97($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Null'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_29_map_default (.'$Null'.default)
sub _jm_f_98($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Null'.default
    $res = 1;
    return $res;
}

# object .'$Null'.definitions
sub _jm_obj_31($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Null'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_29_map_definitions (.'$Null'.definitions)
sub _jm_f_99($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Null'.definitions
    $res = _jm_obj_31($val, $path, $rep);
    return $res;
}

# check _jm_obj_29_map_description (.'$Null'.description)
sub _jm_f_100($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Null'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_29_map_examples (.'$Null'.examples)
sub _jm_f_101($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Null'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_29_map_id (.'$Null'.id)
sub _jm_f_102($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Null'.id
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_29_map_title (.'$Null'.title)
sub _jm_f_103($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Null'.title
    $res = jm_is_string($val);
    return $res;
}


# object .'$Null'
sub _jm_obj_29($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'type')
        {
            # handle must type property
            $must_count++;
            # .'$Null'.type
            $res = jm_is_string($pval) && $pval eq 'null';
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_29_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Null'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Null (.'$Null')
sub json_model_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Null'
    $res = _jm_obj_29($val, $path, $rep);
    return $res;
}

# check _jm_obj_32_map_$comment (.'$AllOf'.'$comment')
sub _jm_f_104($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AllOf'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$AllOf'.'$defs'
sub _jm_obj_33($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$AllOf'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_32_map_$defs (.'$AllOf'.'$defs')
sub _jm_f_105($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AllOf'.'$defs'
    $res = _jm_obj_33($val, $path, $rep);
    return $res;
}

# check _jm_obj_32_map_$id (.'$AllOf'.'$id')
sub _jm_f_106($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AllOf'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_32_map_$schema (.'$AllOf'.'$schema')
sub _jm_f_107($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AllOf'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_32_map_default (.'$AllOf'.default)
sub _jm_f_108($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AllOf'.default
    $res = 1;
    return $res;
}

# object .'$AllOf'.definitions
sub _jm_obj_34($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$AllOf'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_32_map_definitions (.'$AllOf'.definitions)
sub _jm_f_109($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AllOf'.definitions
    $res = _jm_obj_34($val, $path, $rep);
    return $res;
}

# check _jm_obj_32_map_description (.'$AllOf'.description)
sub _jm_f_110($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AllOf'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_32_map_examples (.'$AllOf'.examples)
sub _jm_f_111($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AllOf'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_32_map_id (.'$AllOf'.id)
sub _jm_f_112($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AllOf'.id
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_32_map_title (.'$AllOf'.title)
sub _jm_f_113($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AllOf'.title
    $res = jm_is_string($val);
    return $res;
}


# object .'$AllOf'
sub _jm_obj_32($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'allOf')
        {
            # handle must allOf property
            $must_count++;
            # .'$AllOf'.allOf
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_32_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$AllOf'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $AllOf (.'$AllOf')
sub json_model_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AllOf'
    $res = _jm_obj_32($val, $path, $rep);
    return $res;
}

# check _jm_obj_35_map_$comment (.'$AnyOf'.'$comment')
sub _jm_f_114($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AnyOf'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$AnyOf'.'$defs'
sub _jm_obj_36($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$AnyOf'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_35_map_$defs (.'$AnyOf'.'$defs')
sub _jm_f_115($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AnyOf'.'$defs'
    $res = _jm_obj_36($val, $path, $rep);
    return $res;
}

# check _jm_obj_35_map_$id (.'$AnyOf'.'$id')
sub _jm_f_116($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AnyOf'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_35_map_$schema (.'$AnyOf'.'$schema')
sub _jm_f_117($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AnyOf'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_35_map_default (.'$AnyOf'.default)
sub _jm_f_118($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AnyOf'.default
    $res = 1;
    return $res;
}

# object .'$AnyOf'.definitions
sub _jm_obj_37($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$AnyOf'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_35_map_definitions (.'$AnyOf'.definitions)
sub _jm_f_119($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AnyOf'.definitions
    $res = _jm_obj_37($val, $path, $rep);
    return $res;
}

# check _jm_obj_35_map_description (.'$AnyOf'.description)
sub _jm_f_120($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AnyOf'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_35_map_examples (.'$AnyOf'.examples)
sub _jm_f_121($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AnyOf'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_35_map_id (.'$AnyOf'.id)
sub _jm_f_122($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AnyOf'.id
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_35_map_title (.'$AnyOf'.title)
sub _jm_f_123($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AnyOf'.title
    $res = jm_is_string($val);
    return $res;
}


# object .'$AnyOf'
sub _jm_obj_35($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'anyOf')
        {
            # handle must anyOf property
            $must_count++;
            # .'$AnyOf'.anyOf
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_35_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$AnyOf'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $AnyOf (.'$AnyOf')
sub json_model_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$AnyOf'
    $res = _jm_obj_35($val, $path, $rep);
    return $res;
}

# check _jm_obj_38_map_$comment (.'$OneOf'.'$comment')
sub _jm_f_124($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OneOf'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$OneOf'.'$defs'
sub _jm_obj_39($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$OneOf'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_38_map_$defs (.'$OneOf'.'$defs')
sub _jm_f_125($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OneOf'.'$defs'
    $res = _jm_obj_39($val, $path, $rep);
    return $res;
}

# check _jm_obj_38_map_$id (.'$OneOf'.'$id')
sub _jm_f_126($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OneOf'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_38_map_$schema (.'$OneOf'.'$schema')
sub _jm_f_127($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OneOf'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_38_map_default (.'$OneOf'.default)
sub _jm_f_128($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OneOf'.default
    $res = 1;
    return $res;
}

# object .'$OneOf'.definitions
sub _jm_obj_40($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$OneOf'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_38_map_definitions (.'$OneOf'.definitions)
sub _jm_f_129($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OneOf'.definitions
    $res = _jm_obj_40($val, $path, $rep);
    return $res;
}

# check _jm_obj_38_map_description (.'$OneOf'.description)
sub _jm_f_130($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OneOf'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_38_map_examples (.'$OneOf'.examples)
sub _jm_f_131($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OneOf'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_38_map_id (.'$OneOf'.id)
sub _jm_f_132($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OneOf'.id
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_38_map_title (.'$OneOf'.title)
sub _jm_f_133($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OneOf'.title
    $res = jm_is_string($val);
    return $res;
}


# object .'$OneOf'
sub _jm_obj_38($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'oneOf')
        {
            # handle must oneOf property
            $must_count++;
            # .'$OneOf'.oneOf
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_38_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$OneOf'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $OneOf (.'$OneOf')
sub json_model_19($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$OneOf'
    $res = _jm_obj_38($val, $path, $rep);
    return $res;
}

# check _jm_obj_41_map_$comment (.'$Enum'.'$comment')
sub _jm_f_134($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Enum'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Enum'.'$defs'
sub _jm_obj_42($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Enum'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_41_map_$defs (.'$Enum'.'$defs')
sub _jm_f_135($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Enum'.'$defs'
    $res = _jm_obj_42($val, $path, $rep);
    return $res;
}

# check _jm_obj_41_map_$id (.'$Enum'.'$id')
sub _jm_f_136($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Enum'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_41_map_$schema (.'$Enum'.'$schema')
sub _jm_f_137($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Enum'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_41_map_default (.'$Enum'.default)
sub _jm_f_138($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Enum'.default
    $res = 1;
    return $res;
}

# object .'$Enum'.definitions
sub _jm_obj_43($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Enum'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_41_map_definitions (.'$Enum'.definitions)
sub _jm_f_139($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Enum'.definitions
    $res = _jm_obj_43($val, $path, $rep);
    return $res;
}

# check _jm_obj_41_map_description (.'$Enum'.description)
sub _jm_f_140($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Enum'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_41_map_examples (.'$Enum'.examples)
sub _jm_f_141($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Enum'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_41_map_id (.'$Enum'.id)
sub _jm_f_142($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Enum'.id
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_41_map_title (.'$Enum'.title)
sub _jm_f_143($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Enum'.title
    $res = jm_is_string($val);
    return $res;
}


# object .'$Enum'
sub _jm_obj_41($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'enum')
        {
            # handle must enum property
            $must_count++;
            # .'$Enum'.enum
            $res = json_model_3($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_41_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Enum'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Enum (.'$Enum')
sub json_model_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Enum'
    $res = _jm_obj_41($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_$comment (.'$Const'.'$comment')
sub _jm_f_144($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Const'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Const'.'$defs'
sub _jm_obj_45($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Const'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_44_map_$defs (.'$Const'.'$defs')
sub _jm_f_145($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Const'.'$defs'
    $res = _jm_obj_45($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_$id (.'$Const'.'$id')
sub _jm_f_146($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Const'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_44_map_$schema (.'$Const'.'$schema')
sub _jm_f_147($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Const'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_44_map_default (.'$Const'.default)
sub _jm_f_148($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Const'.default
    $res = 1;
    return $res;
}

# object .'$Const'.definitions
sub _jm_obj_46($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Const'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_44_map_definitions (.'$Const'.definitions)
sub _jm_f_149($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Const'.definitions
    $res = _jm_obj_46($val, $path, $rep);
    return $res;
}

# check _jm_obj_44_map_description (.'$Const'.description)
sub _jm_f_150($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Const'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_44_map_examples (.'$Const'.examples)
sub _jm_f_151($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Const'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_44_map_id (.'$Const'.id)
sub _jm_f_152($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Const'.id
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_44_map_title (.'$Const'.title)
sub _jm_f_153($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Const'.title
    $res = jm_is_string($val);
    return $res;
}


# object .'$Const'
sub _jm_obj_44($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'const')
        {
            # handle must const property
            $must_count++;
            # .'$Const'.const
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_44_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Const'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Const (.'$Const')
sub json_model_21($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Const'
    $res = _jm_obj_44($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_$comment (.'$Ref'.'$comment')
sub _jm_f_154($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ref'.'$comment'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Ref'.'$defs'
sub _jm_obj_48($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Ref'.'$defs'.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_47_map_$defs (.'$Ref'.'$defs')
sub _jm_f_155($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ref'.'$defs'
    $res = _jm_obj_48($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_$id (.'$Ref'.'$id')
sub _jm_f_156($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ref'.'$id'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_47_map_$schema (.'$Ref'.'$schema')
sub _jm_f_157($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ref'.'$schema'
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_47_map_default (.'$Ref'.default)
sub _jm_f_158($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ref'.default
    $res = 1;
    return $res;
}

# object .'$Ref'.definitions
sub _jm_obj_49($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Ref'.definitions.''
        $res = json_model_24($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_47_map_definitions (.'$Ref'.definitions)
sub _jm_f_159($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ref'.definitions
    $res = _jm_obj_49($val, $path, $rep);
    return $res;
}

# check _jm_obj_47_map_description (.'$Ref'.description)
sub _jm_f_160($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ref'.description
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_47_map_examples (.'$Ref'.examples)
sub _jm_f_161($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ref'.examples
    $res = jm_is_array($val);
    return $res;
}

# check _jm_obj_47_map_id (.'$Ref'.id)
sub _jm_f_162($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ref'.id
    $res = jm_is_string($val);
    return $res;
}

# check _jm_obj_47_map_title (.'$Ref'.title)
sub _jm_f_163($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ref'.title
    $res = jm_is_string($val);
    return $res;
}


# object .'$Ref'
sub _jm_obj_47($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '$ref')
        {
            # handle must $ref property
            $must_count++;
            # .'$Ref'.'$ref'
            $res = jm_is_string($pval) && jm_is_valid_url($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_47_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Ref'.'/^x-.*/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Ref (.'$Ref')
sub json_model_22($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ref'
    $res = _jm_obj_47($val, $path, $rep);
    return $res;
}


# check $ObjectSchema (.'$ObjectSchema')
sub json_model_23($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # we could use ^ instead of | below
    # .'$ObjectSchema'
    my $iso_0 = jm_is_object($val);
    $res = $iso_0;
    if ($res)
    {
        if (exists $$val{'type'})
        {
            my $tag_0 = $$val{'type'};
            my $fun_0 = $_jm_map_0{$tag_0};
            if (defined($fun_0))
            {
                $res = &$fun_0($val, $path, $rep);
            }
            else
            {
                $res = 0;
            }
        }
        else
        {
            $res = 0;
        }
    }
    if (! $res)
    {
        $res = _jm_obj_6($val, $path, $rep);
        if (! $res)
        {
            $res = _jm_obj_44($val, $path, $rep);
            if (! $res)
            {
                $res = _jm_obj_41($val, $path, $rep);
                if (! $res)
                {
                    $res = _jm_obj_32($val, $path, $rep);
                    if (! $res)
                    {
                        $res = _jm_obj_35($val, $path, $rep);
                        if (! $res)
                        {
                            $res = _jm_obj_38($val, $path, $rep);
                            if (! $res)
                            {
                                $res = _jm_obj_47($val, $path, $rep);
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# check $Schema (.'$Schema')
sub json_model_24($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Schema'
    # .'$Schema'.'|'.0
    $res = jm_is_boolean($val);
    if (! $res)
    {
        # .'$Schema'.'|'.1
        $res = json_model_23($val, $path, $rep);
    }
    return $res;
}

# object .'$RootSchema'.'&'.0
sub _jm_obj_50($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'$schema'})
    {
        return 0;
    }
    $pval = $$val{'$schema'};
    # .'$RootSchema'.'&'.0.'$schema'
    $res = jm_is_string($pval);
    if (! $res)
    {
        return 0;
    }
    return 1;
}

# check $RootSchema (.'$RootSchema')
sub json_model_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # keyword $schema is mandatory at the root, and optional elsewhere
    # .'$RootSchema'
    $res = 1;
    if ($res)
    {
        # .'$RootSchema'.'&'.0
        $res = _jm_obj_50($val, $path, $rep);
        if ($res)
        {
            # .'$RootSchema'.'&'.1
            $res = json_model_23($val, $path, $rep);
        }
    }
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_25($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            'uri' => 1,
            'uri-reference' => 1,
            'iri' => 1,
            'iri-reference' => 1,
            'date' => 1,
            'time' => 1,
            'date-time' => 1,
            'ipv4' => 1,
            'ipv6' => 1,
            'regex' => 1,
            'uuid' => 1,
            'hostname' => 1,
            'email' => 1,
            'idn-hostname' => 1,
            'idn-email' => 1,
            'duration' => 1,
            'int32' => 1,
            'int64' => 1,
            'uint' => 1,
            'uint32' => 1,
            'uint64' => 1,
            'json-pointer' => 1,
            'relative-json-pointer' => 1,
            'byte' => 1,
            'double' => 1,
            'int' => 1,
            'mime-type' => 1,
        );
        %_jm_obj_1_map = (
            'additionalItems' => \&_jm_f_0,
            'items' => \&_jm_f_1,
            'maxItems' => \&_jm_f_2,
            'minItems' => \&_jm_f_3,
            'prefixItems' => \&_jm_f_4,
            'uniqueItems' => \&_jm_f_5,
        );
        %_jm_obj_6_map = (
            '$comment' => \&_jm_f_6,
            '$defs' => \&_jm_f_7,
            '$id' => \&_jm_f_8,
            '$schema' => \&_jm_f_9,
            'default' => \&_jm_f_10,
            'definitions' => \&_jm_f_11,
            'description' => \&_jm_f_12,
            'examples' => \&_jm_f_13,
            'id' => \&_jm_f_14,
            'title' => \&_jm_f_15,
        );
        %_jm_cst_1 = (
            'uri' => 1,
            'uri-reference' => 1,
            'iri' => 1,
            'iri-reference' => 1,
            'date' => 1,
            'time' => 1,
            'date-time' => 1,
            'ipv4' => 1,
            'ipv6' => 1,
            'regex' => 1,
            'uuid' => 1,
            'hostname' => 1,
            'email' => 1,
            'idn-hostname' => 1,
            'idn-email' => 1,
            'duration' => 1,
            'int32' => 1,
            'int64' => 1,
            'uint' => 1,
            'uint32' => 1,
            'uint64' => 1,
            'json-pointer' => 1,
            'relative-json-pointer' => 1,
            'byte' => 1,
            'double' => 1,
            'int' => 1,
            'mime-type' => 1,
        );
        %_jm_obj_9_map = (
            '$comment' => \&_jm_f_16,
            '$defs' => \&_jm_f_17,
            '$id' => \&_jm_f_18,
            '$schema' => \&_jm_f_19,
            'default' => \&_jm_f_20,
            'definitions' => \&_jm_f_21,
            'description' => \&_jm_f_22,
            'examples' => \&_jm_f_23,
            'format' => \&_jm_f_24,
            'id' => \&_jm_f_25,
            'maxLength' => \&_jm_f_26,
            'minLength' => \&_jm_f_27,
            'pattern' => \&_jm_f_28,
            'title' => \&_jm_f_29,
        );
        %_jm_obj_12_map = (
            '$comment' => \&_jm_f_30,
            '$defs' => \&_jm_f_31,
            '$id' => \&_jm_f_32,
            '$schema' => \&_jm_f_33,
            'additionalItems' => \&_jm_f_34,
            'default' => \&_jm_f_35,
            'definitions' => \&_jm_f_36,
            'description' => \&_jm_f_37,
            'examples' => \&_jm_f_38,
            'id' => \&_jm_f_39,
            'items' => \&_jm_f_40,
            'maxItems' => \&_jm_f_41,
            'minItems' => \&_jm_f_42,
            'prefixItems' => \&_jm_f_43,
            'title' => \&_jm_f_44,
            'uniqueItems' => \&_jm_f_45,
        );
        %_jm_obj_15_map = (
            '$comment' => \&_jm_f_46,
            '$defs' => \&_jm_f_47,
            '$id' => \&_jm_f_48,
            '$schema' => \&_jm_f_49,
            'additionalProperties' => \&_jm_f_50,
            'default' => \&_jm_f_51,
            'definitions' => \&_jm_f_52,
            'description' => \&_jm_f_53,
            'examples' => \&_jm_f_54,
            'id' => \&_jm_f_55,
            'patternProperties' => \&_jm_f_56,
            'properties' => \&_jm_f_57,
            'required' => \&_jm_f_58,
            'title' => \&_jm_f_59,
        );
        %_jm_obj_20_map = (
            '$comment' => \&_jm_f_60,
            '$defs' => \&_jm_f_61,
            '$id' => \&_jm_f_62,
            '$schema' => \&_jm_f_63,
            'default' => \&_jm_f_64,
            'definitions' => \&_jm_f_65,
            'description' => \&_jm_f_66,
            'examples' => \&_jm_f_67,
            'id' => \&_jm_f_68,
            'maximum' => \&_jm_f_69,
            'minimum' => \&_jm_f_70,
            'title' => \&_jm_f_71,
        );
        %_jm_obj_23_map = (
            '$comment' => \&_jm_f_72,
            '$defs' => \&_jm_f_73,
            '$id' => \&_jm_f_74,
            '$schema' => \&_jm_f_75,
            'default' => \&_jm_f_76,
            'definitions' => \&_jm_f_77,
            'description' => \&_jm_f_78,
            'examples' => \&_jm_f_79,
            'id' => \&_jm_f_80,
            'maximum' => \&_jm_f_81,
            'minimum' => \&_jm_f_82,
            'title' => \&_jm_f_83,
        );
        %_jm_obj_26_map = (
            '$comment' => \&_jm_f_84,
            '$defs' => \&_jm_f_85,
            '$id' => \&_jm_f_86,
            '$schema' => \&_jm_f_87,
            'default' => \&_jm_f_88,
            'definitions' => \&_jm_f_89,
            'description' => \&_jm_f_90,
            'examples' => \&_jm_f_91,
            'id' => \&_jm_f_92,
            'title' => \&_jm_f_93,
        );
        %_jm_obj_29_map = (
            '$comment' => \&_jm_f_94,
            '$defs' => \&_jm_f_95,
            '$id' => \&_jm_f_96,
            '$schema' => \&_jm_f_97,
            'default' => \&_jm_f_98,
            'definitions' => \&_jm_f_99,
            'description' => \&_jm_f_100,
            'examples' => \&_jm_f_101,
            'id' => \&_jm_f_102,
            'title' => \&_jm_f_103,
        );
        %_jm_obj_32_map = (
            '$comment' => \&_jm_f_104,
            '$defs' => \&_jm_f_105,
            '$id' => \&_jm_f_106,
            '$schema' => \&_jm_f_107,
            'default' => \&_jm_f_108,
            'definitions' => \&_jm_f_109,
            'description' => \&_jm_f_110,
            'examples' => \&_jm_f_111,
            'id' => \&_jm_f_112,
            'title' => \&_jm_f_113,
        );
        %_jm_obj_35_map = (
            '$comment' => \&_jm_f_114,
            '$defs' => \&_jm_f_115,
            '$id' => \&_jm_f_116,
            '$schema' => \&_jm_f_117,
            'default' => \&_jm_f_118,
            'definitions' => \&_jm_f_119,
            'description' => \&_jm_f_120,
            'examples' => \&_jm_f_121,
            'id' => \&_jm_f_122,
            'title' => \&_jm_f_123,
        );
        %_jm_obj_38_map = (
            '$comment' => \&_jm_f_124,
            '$defs' => \&_jm_f_125,
            '$id' => \&_jm_f_126,
            '$schema' => \&_jm_f_127,
            'default' => \&_jm_f_128,
            'definitions' => \&_jm_f_129,
            'description' => \&_jm_f_130,
            'examples' => \&_jm_f_131,
            'id' => \&_jm_f_132,
            'title' => \&_jm_f_133,
        );
        %_jm_obj_41_map = (
            '$comment' => \&_jm_f_134,
            '$defs' => \&_jm_f_135,
            '$id' => \&_jm_f_136,
            '$schema' => \&_jm_f_137,
            'default' => \&_jm_f_138,
            'definitions' => \&_jm_f_139,
            'description' => \&_jm_f_140,
            'examples' => \&_jm_f_141,
            'id' => \&_jm_f_142,
            'title' => \&_jm_f_143,
        );
        %_jm_obj_44_map = (
            '$comment' => \&_jm_f_144,
            '$defs' => \&_jm_f_145,
            '$id' => \&_jm_f_146,
            '$schema' => \&_jm_f_147,
            'default' => \&_jm_f_148,
            'definitions' => \&_jm_f_149,
            'description' => \&_jm_f_150,
            'examples' => \&_jm_f_151,
            'id' => \&_jm_f_152,
            'title' => \&_jm_f_153,
        );
        %_jm_obj_47_map = (
            '$comment' => \&_jm_f_154,
            '$defs' => \&_jm_f_155,
            '$id' => \&_jm_f_156,
            '$schema' => \&_jm_f_157,
            'default' => \&_jm_f_158,
            'definitions' => \&_jm_f_159,
            'description' => \&_jm_f_160,
            'examples' => \&_jm_f_161,
            'id' => \&_jm_f_162,
            'title' => \&_jm_f_163,
        );
        %_jm_map_0 = (
            'null' => \&_jm_obj_29,
            'boolean' => \&_jm_obj_26,
            'integer' => \&_jm_obj_20,
            'number' => \&_jm_obj_23,
            'string' => \&_jm_obj_9,
            'array' => \&_jm_obj_12,
            'object' => \&_jm_obj_15,
        );
        %check_model_map = (
            '' => \&json_model_25,
            'const' => \&json_model_2,
            'enum' => \&json_model_3,
            'schemaArray' => \&json_model_4,
            'stringKeywords' => \&_jm_obj_0,
            'arrayKeywords' => \&_jm_obj_1,
            'objectKeywords' => \&_jm_obj_2,
            'numberKeywords' => \&_jm_obj_5,
            'metas' => \&_jm_obj_6,
            'String' => \&_jm_obj_9,
            'Array' => \&_jm_obj_12,
            'Object' => \&_jm_obj_15,
            'Integer' => \&_jm_obj_20,
            'Number' => \&_jm_obj_23,
            'Bool' => \&_jm_obj_26,
            'Null' => \&_jm_obj_29,
            'AllOf' => \&_jm_obj_32,
            'AnyOf' => \&_jm_obj_35,
            'OneOf' => \&_jm_obj_38,
            'Enum' => \&_jm_obj_41,
            'Const' => \&_jm_obj_44,
            'Ref' => \&_jm_obj_47,
            'ObjectSchema' => \&json_model_23,
            'Schema' => \&json_model_24,
            'RootSchema' => \&json_model_25,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %_jm_obj_1_map = ();
        %_jm_obj_6_map = ();
        %_jm_cst_1 = ();
        %_jm_obj_9_map = ();
        %_jm_obj_12_map = ();
        %_jm_obj_15_map = ();
        %_jm_obj_20_map = ();
        %_jm_obj_23_map = ();
        %_jm_obj_26_map = ();
        %_jm_obj_29_map = ();
        %_jm_obj_32_map = ();
        %_jm_obj_35_map = ();
        %_jm_obj_38_map = ();
        %_jm_obj_41_map = ();
        %_jm_obj_44_map = ();
        %_jm_obj_47_map = ();
        %_jm_map_0 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
