//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class json_schema_draft_04_fuzzy extends ModelChecker
{
    static public final String VERSION = "2";

    Set<Object> _jm_cst_0_set;
    public Map<String, Checker> json_schema_draft_04_fuzzy_map_pmap;

    // object .'$schema'.definitions
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$schema'.definitions]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            // handle other props
            // .'$schema'.definitions.''
            res = json_model_3(pval, (path != null ? lpath_0 : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.definitions.'']", (path != null ? lpath_0 : null));
                return false;
            }
        }
        return true;
    }

    // object .'$schema'.properties
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$schema'.properties]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            // handle other props
            // .'$schema'.properties.''
            res = json_model_3(pval, (path != null ? lpath_1 : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.properties.'']", (path != null ? lpath_1 : null));
                return false;
            }
        }
        return true;
    }

    // object .'$schema'.patternProperties
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$schema'.patternProperties]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_2 = new Path(prop, path);
            // handle other props
            // .'$schema'.patternProperties.''
            res = json_model_3(pval, (path != null ? lpath_2 : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.patternProperties.'']", (path != null ? lpath_2 : null));
                return false;
            }
        }
        return true;
    }

    // object .'$schema'.dependencies
    public boolean _jm_obj_3(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$schema'.dependencies]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_3 = new Path(prop, path);
            // handle other props
            // .'$schema'.dependencies.''
            // .'$schema'.dependencies.''.'|'.0
            res = json_model_3(pval, (path != null ? lpath_3 : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.dependencies.''.'|'.0]", (path != null ? lpath_3 : null));
            }
            if (! res)
            {
                // .'$schema'.dependencies.''.'|'.1
                res = json_model_6(pval, (path != null ? lpath_3 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $stringArray [.'$schema'.dependencies.''.'|'.1]", (path != null ? lpath_3 : null));
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$schema'.dependencies.''.'|']", (path != null ? lpath_3 : null));
                return false;
            }
        }
        return true;
    }

    // check $schema (.'$schema')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        // JSON Model for JSON Schema Draft 04 [JSON_MODEL_STRICT_INT, JSON_MODEL_LOOSE_FLOAT]
        // .'$schema'
        // check open must/may only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$schema']", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if ((pval = json.objectValue(val, "id")) != null)
        {
            lpath = new Path("id", path);
            // .'$schema'.id
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.id]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <id> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "$schema")) != null)
        {
            lpath = new Path("$schema", path);
            // .'$schema'.'$schema'
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.'$schema']", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <$schema> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "title")) != null)
        {
            lpath = new Path("title", path);
            // .'$schema'.title
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.title]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <title> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "description")) != null)
        {
            lpath = new Path("description", path);
            // .'$schema'.description
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.description]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <description> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        // ignored .'$schema'.default
        if ((pval = json.objectValue(val, "multipleOf")) != null)
        {
            lpath = new Path("multipleOf", path);
            // .'$schema'.multipleOf
            res = json.isNumber(pval) && json.asNumber(pval) > 0.0;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 1.0 loose float [.'$schema'.multipleOf]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <multipleOf> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "maximum")) != null)
        {
            lpath = new Path("maximum", path);
            // .'$schema'.maximum
            res = json.isNumber(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a -1.0 loose float [.'$schema'.maximum]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <maximum> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "exclusiveMaximum")) != null)
        {
            lpath = new Path("exclusiveMaximum", path);
            // .'$schema'.exclusiveMaximum
            res = json.isBoolean(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a bool [.'$schema'.exclusiveMaximum]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <exclusiveMaximum> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "minimum")) != null)
        {
            lpath = new Path("minimum", path);
            // .'$schema'.minimum
            res = json.isNumber(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a -1.0 loose float [.'$schema'.minimum]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <minimum> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "exclusiveMinimum")) != null)
        {
            lpath = new Path("exclusiveMinimum", path);
            // .'$schema'.exclusiveMinimum
            res = json.isBoolean(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a bool [.'$schema'.exclusiveMinimum]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <exclusiveMinimum> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "maxLength")) != null)
        {
            lpath = new Path("maxLength", path);
            // .'$schema'.maxLength
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 0 strict int [.'$schema'.maxLength]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <maxLength> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "minLength")) != null)
        {
            lpath = new Path("minLength", path);
            // .'$schema'.minLength
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 0 strict int [.'$schema'.minLength]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <minLength> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "additionalItems")) != null)
        {
            lpath = new Path("additionalItems", path);
            // .'$schema'.additionalItems
            // .'$schema'.additionalItems.'|'.0
            res = json.isBoolean(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a bool [.'$schema'.additionalItems.'|'.0]", (path != null ? lpath : null));
            }
            if (! res)
            {
                // .'$schema'.additionalItems.'|'.1
                res = json_model_3(pval, (path != null ? lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.additionalItems.'|'.1]", (path != null ? lpath : null));
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$schema'.additionalItems.'|']", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <additionalItems> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "items")) != null)
        {
            lpath = new Path("items", path);
            // .'$schema'.items
            // .'$schema'.items.'|'.0
            res = json_model_3(pval, (path != null ? lpath : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.items.'|'.0]", (path != null ? lpath : null));
            }
            if (! res)
            {
                // .'$schema'.items.'|'.1
                res = json_model_4(pval, (path != null ? lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $schemaArray [.'$schema'.items.'|'.1]", (path != null ? lpath : null));
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$schema'.items.'|']", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <items> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "maxItems")) != null)
        {
            lpath = new Path("maxItems", path);
            // .'$schema'.maxItems
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 0 strict int [.'$schema'.maxItems]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <maxItems> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "minItems")) != null)
        {
            lpath = new Path("minItems", path);
            // .'$schema'.minItems
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 0 strict int [.'$schema'.minItems]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <minItems> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "uniqueItems")) != null)
        {
            lpath = new Path("uniqueItems", path);
            // .'$schema'.uniqueItems
            res = json.isBoolean(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a bool [.'$schema'.uniqueItems]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <uniqueItems> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "maxProperties")) != null)
        {
            lpath = new Path("maxProperties", path);
            // .'$schema'.maxProperties
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 0 strict int [.'$schema'.maxProperties]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <maxProperties> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "minProperties")) != null)
        {
            lpath = new Path("minProperties", path);
            // .'$schema'.minProperties
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 0 strict int [.'$schema'.minProperties]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <minProperties> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "required")) != null)
        {
            lpath = new Path("required", path);
            // .'$schema'.required
            res = json_model_6(pval, (path != null ? lpath : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $stringArray [.'$schema'.required]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <required> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "additionalProperties")) != null)
        {
            lpath = new Path("additionalProperties", path);
            // .'$schema'.additionalProperties
            // .'$schema'.additionalProperties.'|'.0
            res = json.isBoolean(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a bool [.'$schema'.additionalProperties.'|'.0]", (path != null ? lpath : null));
            }
            if (! res)
            {
                // .'$schema'.additionalProperties.'|'.1
                res = json_model_3(pval, (path != null ? lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.additionalProperties.'|'.1]", (path != null ? lpath : null));
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$schema'.additionalProperties.'|']", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <additionalProperties> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "definitions")) != null)
        {
            lpath = new Path("definitions", path);
            // .'$schema'.definitions
            res = _jm_obj_0(pval, (path != null ? lpath : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected element [.'$schema'.definitions]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <definitions> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "properties")) != null)
        {
            lpath = new Path("properties", path);
            // .'$schema'.properties
            res = _jm_obj_1(pval, (path != null ? lpath : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected element [.'$schema'.properties]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <properties> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "patternProperties")) != null)
        {
            lpath = new Path("patternProperties", path);
            // .'$schema'.patternProperties
            res = _jm_obj_2(pval, (path != null ? lpath : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected element [.'$schema'.patternProperties]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <patternProperties> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "dependencies")) != null)
        {
            lpath = new Path("dependencies", path);
            // .'$schema'.dependencies
            res = _jm_obj_3(pval, (path != null ? lpath : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected element [.'$schema'.dependencies]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <dependencies> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "enum")) != null)
        {
            lpath = new Path("enum", path);
            // .'$schema'.enum
            // .'$schema'.enum.'@'
            res = json.isArray(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$schema'.enum.'@']", (path != null ? lpath : null));
            }
            if (res)
            {
                long ival_0 = json.arrayLength(pval);
                res = rt.array_is_unique(pval, (path != null ? lpath : null), rep) && ival_0 >= 1;
                if (! res)
                {
                    if (rep != null) rep.addEntry("constraints failed [.'$schema'.enum]", (path != null ? lpath : null));
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <enum> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "type")) != null)
        {
            lpath = new Path("type", path);
            // .'$schema'.type
            // .'$schema'.type.'|'.0
            res = json_model_5(pval, (path != null ? lpath : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $simpleTypes [.'$schema'.type.'|'.0]", (path != null ? lpath : null));
            }
            if (! res)
            {
                // .'$schema'.type.'|'.1
                res = json_model_7(pval, (path != null ? lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $typeArray [.'$schema'.type.'|'.1]", (path != null ? lpath : null));
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$schema'.type.'|']", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <type> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "format")) != null)
        {
            lpath = new Path("format", path);
            // .'$schema'.format
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.format]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <format> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "allOf")) != null)
        {
            lpath = new Path("allOf", path);
            // .'$schema'.allOf
            res = json_model_4(pval, (path != null ? lpath : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $schemaArray [.'$schema'.allOf]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <allOf> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "anyOf")) != null)
        {
            lpath = new Path("anyOf", path);
            // .'$schema'.anyOf
            res = json_model_4(pval, (path != null ? lpath : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $schemaArray [.'$schema'.anyOf]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <anyOf> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "oneOf")) != null)
        {
            lpath = new Path("oneOf", path);
            // .'$schema'.oneOf
            res = json_model_4(pval, (path != null ? lpath : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $schemaArray [.'$schema'.oneOf]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <oneOf> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "not")) != null)
        {
            lpath = new Path("not", path);
            // .'$schema'.not
            res = json_model_3(pval, (path != null ? lpath : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Schema [.'$schema'.not]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <not> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "pattern")) != null)
        {
            lpath = new Path("pattern", path);
            // .'$schema'.pattern
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.pattern]", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <pattern> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        if ((pval = json.objectValue(val, "$ref")) != null)
        {
            lpath = new Path("$ref", path);
            // .'$schema'.'$ref'
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$schema'.'$ref']", (path != null ? lpath : null));
                if (rep != null) rep.addEntry("unexpected value for optional prop <$ref> [.'$schema']", (path != null ? lpath : null));
                return false;
            }
        }
        return true;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // .
        boolean res = json_model_3(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $schema [.]", path);
        }
        return res;
    }

    // check $schema#schemaArray (.'$schema#schemaArray')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        // .'$schema#schemaArray'
        // .'$schema#schemaArray'.'@'
        boolean res = json.isArray(val);
        if (res)
        {
            int arr_0_idx = -1;
            Iterator<Object> arr_0_item_loop = json.arrayIterator(val);
            while (arr_0_item_loop.hasNext())
            {
                arr_0_idx++;
                Object arr_0_item = arr_0_item_loop.next();
                Path arr_0_lpath = new Path(arr_0_idx, path);
                // .'$schema#schemaArray'.'@'.0
                res = json_model_3(arr_0_item, (path != null ? arr_0_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $Schema [.'$schema#schemaArray'.'@'.0]", (path != null ? arr_0_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$schema#schemaArray'.'@']", path);
        }
        if (res)
        {
            long ival_1 = json.arrayLength(val);
            res = ival_1 >= 1;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.'$schema#schemaArray']", path);
            }
        }
        return res;
    }


    // check $schema#simpleTypes (.'$schema#simpleTypes')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        // .'$schema#simpleTypes'
        boolean res = json.isScalar(val) && _jm_cst_0_set.contains(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("value not in enum [.'$schema#simpleTypes'.'|']", path);
        }
        return res;
    }

    // check $schema#stringArray (.'$schema#stringArray')
    public boolean json_model_6(Object val, Path path, Report rep)
    {
        // .'$schema#stringArray'
        // .'$schema#stringArray'.'@'
        boolean res = json.isArray(val);
        if (res)
        {
            int arr_1_idx = -1;
            Iterator<Object> arr_1_item_loop = json.arrayIterator(val);
            while (arr_1_item_loop.hasNext())
            {
                arr_1_idx++;
                Object arr_1_item = arr_1_item_loop.next();
                Path arr_1_lpath = new Path(arr_1_idx, path);
                // .'$schema#stringArray'.'@'.0
                res = json.isString(arr_1_item);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$schema#stringArray'.'@'.0]", (path != null ? arr_1_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$schema#stringArray'.'@']", path);
        }
        if (res)
        {
            long ival_2 = json.arrayLength(val);
            res = rt.array_is_unique(val, path, rep) && ival_2 >= 1;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.'$schema#stringArray']", path);
            }
        }
        return res;
    }

    // check $schema#typeArray (.'$schema#typeArray')
    public boolean json_model_7(Object val, Path path, Report rep)
    {
        // .'$schema#typeArray'
        // .'$schema#typeArray'.'@'
        boolean res = json.isArray(val);
        if (res)
        {
            int arr_2_idx = -1;
            Iterator<Object> arr_2_item_loop = json.arrayIterator(val);
            while (arr_2_item_loop.hasNext())
            {
                arr_2_idx++;
                Object arr_2_item = arr_2_item_loop.next();
                Path arr_2_lpath = new Path(arr_2_idx, path);
                // .'$schema#typeArray'.'@'.0
                res = json_model_5(arr_2_item, (path != null ? arr_2_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $simpleTypes [.'$schema#typeArray'.'@'.0]", (path != null ? arr_2_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$schema#typeArray'.'@']", path);
        }
        if (res)
        {
            long ival_3 = json.arrayLength(val);
            res = rt.array_is_unique(val, path, rep) && ival_3 >= 1;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.'$schema#typeArray']", path);
            }
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_cst_0_set = new HashSet<Object>();
            _jm_cst_0_set.add(json.safeJSON("\"null\""));
            _jm_cst_0_set.add(json.safeJSON("\"boolean\""));
            _jm_cst_0_set.add(json.safeJSON("\"integer\""));
            _jm_cst_0_set.add(json.safeJSON("\"number\""));
            _jm_cst_0_set.add(json.safeJSON("\"string\""));
            _jm_cst_0_set.add(json.safeJSON("\"array\""));
            _jm_cst_0_set.add(json.safeJSON("\"object\""));
            json_schema_draft_04_fuzzy_map_pmap = new HashMap<String, Checker>();
            json_schema_draft_04_fuzzy_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            json_schema_draft_04_fuzzy_map_pmap.put("schema", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_cst_0_set = null;
            json_schema_draft_04_fuzzy_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return json_schema_draft_04_fuzzy_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return json_schema_draft_04_fuzzy_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new json_schema_draft_04_fuzzy();
        Main.main("json_schema_draft_04_fuzzy", checker, VERSION, args);
    }
}
