#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

json_model_9_map: PropMap
_jm_cst_0: set[str]
check_model_map: PropMap

# check $schema (.'$schema')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # JSON Model for JSON Schema Draft 06 [JSON_MODEL_LOOSE_INT, JSON_MODEL_LOOSE_FLOAT]
    # .'$schema'
    # .'$schema'.'@'
    res = json_model_10(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema'.'@']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema [.]", path))
    return res

# check $schema#Schema (.'$schema#Schema')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#Schema'
    # .'$schema#Schema'.'|'.0
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema#Schema'.'|'.0]", path))
    if not res:
        # .'$schema#Schema'.'|'.1
        res = json_model_9(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ObjectSchema [.'$schema#Schema'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$schema#Schema'.'|']", path))
    return res

# check json_model_9_map_$schema (.'$schema#ObjectSchema'.'$schema')
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.'$schema'
    res = is_valid_url(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $URI [.'$schema#ObjectSchema'.'$schema']", path))
    return res

# check json_model_9_map_const (.'$schema#ObjectSchema'.const)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.const
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$schema#ObjectSchema'.const]", path))
    return res

# check json_model_9_map_default (.'$schema#ObjectSchema'.default)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.default
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$schema#ObjectSchema'.default]", path))
    return res

# check json_model_9_map_definitions (.'$schema#ObjectSchema'.definitions)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#ObjectSchema'.definitions
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.definitions.''
        res = json_model_10(pval, lpath_1 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.definitions.'']", lpath_1 if path is not None else None))
            return False
    return True

# check json_model_9_map_dependencies (.'$schema#ObjectSchema'.dependencies)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#ObjectSchema'.dependencies
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.dependencies]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.dependencies.''
        # .'$schema#ObjectSchema'.dependencies.''.'|'.0
        res = json_model_10(pval, lpath_2 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.dependencies.''.'|'.0]", lpath_2 if path is not None else None))
        if not res:
            # .'$schema#ObjectSchema'.dependencies.''.'|'.1
            res = json_model_8(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $stringArray [.'$schema#ObjectSchema'.dependencies.''.'|'.1]", lpath_2 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema#ObjectSchema'.dependencies.''.'|']", lpath_2 if path is not None else None))
            return False
    return True

# check json_model_9_map_description (.'$schema#ObjectSchema'.description)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.description
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.description]", path))
    return res

# check json_model_9_map_enum (.'$schema#ObjectSchema'.enum)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.enum
    # .'$schema#ObjectSchema'.enum.'@'
    res = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#ObjectSchema'.enum.'@']", path))
    if res:
        ival_0: int = len(val)
        res = is_unique_array(val, path, rep) and ival_0 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#ObjectSchema'.enum]", path))
    return res

# check json_model_9_map_examples (.'$schema#ObjectSchema'.examples)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.examples
    res = isinstance(val, list)
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#ObjectSchema'.examples]", path))
    return res

# check json_model_9_map_exclusiveMaximum (.'$schema#ObjectSchema'.exclusiveMaximum)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.exclusiveMaximum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.exclusiveMaximum]", path))
    return res

# check json_model_9_map_exclusiveMinimum (.'$schema#ObjectSchema'.exclusiveMinimum)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.exclusiveMinimum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.exclusiveMinimum]", path))
    return res

# check json_model_9_map_format (.'$schema#ObjectSchema'.format)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.format
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.format]", path))
    return res

# check json_model_9_map_items (.'$schema#ObjectSchema'.items)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.items
    # .'$schema#ObjectSchema'.items.'|'.0
    res = json_model_10(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.items.'|'.0]", path))
    if not res:
        # .'$schema#ObjectSchema'.items.'|'.1
        res = json_model_5(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$schema#ObjectSchema'.items.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$schema#ObjectSchema'.items.'|']", path))
    return res

# check json_model_9_map_maxItems (.'$schema#ObjectSchema'.maxItems)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.maxItems
    res = ((isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val))) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.maxItems]", path))
    return res

# check json_model_9_map_maxLength (.'$schema#ObjectSchema'.maxLength)
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.maxLength
    res = ((isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val))) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.maxLength]", path))
    return res

# check json_model_9_map_maxProperties (.'$schema#ObjectSchema'.maxProperties)
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.maxProperties
    res = ((isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val))) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.maxProperties]", path))
    return res

# check json_model_9_map_maximum (.'$schema#ObjectSchema'.maximum)
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.maximum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.maximum]", path))
    return res

# check json_model_9_map_minItems (.'$schema#ObjectSchema'.minItems)
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.minItems
    res = ((isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val))) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.minItems]", path))
    return res

# check json_model_9_map_minLength (.'$schema#ObjectSchema'.minLength)
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.minLength
    res = ((isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val))) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.minLength]", path))
    return res

# check json_model_9_map_minProperties (.'$schema#ObjectSchema'.minProperties)
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.minProperties
    res = ((isinstance(val, int) and not isinstance(val, bool) or isinstance(val, float) and val == int(val))) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.minProperties]", path))
    return res

# check json_model_9_map_minimum (.'$schema#ObjectSchema'.minimum)
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.minimum
    res = isinstance(val, (int, float)) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.minimum]", path))
    return res

# check json_model_9_map_multipleOf (.'$schema#ObjectSchema'.multipleOf)
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.multipleOf
    res = isinstance(val, (int, float)) and not isinstance(val, bool) and val > 0.0
    if not res:
        rep is None or rep.append(("not a 1.0 loose float [.'$schema#ObjectSchema'.multipleOf]", path))
    return res

# check json_model_9_map_pattern (.'$schema#ObjectSchema'.pattern)
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.pattern
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.pattern]", path))
    return res

# check json_model_9_map_patternProperties (.'$schema#ObjectSchema'.patternProperties)
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#ObjectSchema'.patternProperties
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.patternProperties.''
        res = json_model_10(pval, lpath_3 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.patternProperties.'']", lpath_3 if path is not None else None))
            return False
    return True

# check json_model_9_map_properties (.'$schema#ObjectSchema'.properties)
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#ObjectSchema'.properties
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.properties.''
        res = json_model_10(pval, lpath_4 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.properties.'']", lpath_4 if path is not None else None))
            return False
    return True

# check json_model_9_map_title (.'$schema#ObjectSchema'.title)
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.title]", path))
    return res

# check json_model_9_map_type (.'$schema#ObjectSchema'.type)
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.type
    # .'$schema#ObjectSchema'.type.'|'.0
    res = json_model_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $simpleTypes [.'$schema#ObjectSchema'.type.'|'.0]", path))
    if not res:
        # .'$schema#ObjectSchema'.type.'|'.1
        res = json_model_7(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $typeArray [.'$schema#ObjectSchema'.type.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$schema#ObjectSchema'.type.'|']", path))
    return res

# check json_model_9_map_uniqueItems (.'$schema#ObjectSchema'.uniqueItems)
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'.uniqueItems
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema#ObjectSchema'.uniqueItems]", path))
    return res


# check $schema#ObjectSchema (.'$schema#ObjectSchema')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$schema#ObjectSchema'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema']", path))
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := json_model_9_map.get(prop):
            # handle 38 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$schema#ObjectSchema']", lpath_0 if path is not None else None))
                return False
        else:
            # accept any other props
            pass
    return True

# check $schema#URI-REFERENCE (.'$schema#URI-REFERENCE')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#URI-REFERENCE'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#URI-REFERENCE']", path))
    return res

# check $schema#schemaArray (.'$schema#schemaArray')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#schemaArray'
    # .'$schema#schemaArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$schema#schemaArray'.'@'.0
            res = json_model_10(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schema#schemaArray'.'@'.0]", arr_0_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#schemaArray'.'@']", path))
    if res:
        ival_1: int = len(val)
        res = ival_1 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#schemaArray']", path))
    return res


# check $schema#simpleTypes (.'$schema#simpleTypes')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#simpleTypes'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$schema#simpleTypes'.'|']", path))
    return res

# check $schema#typeArray (.'$schema#typeArray')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#typeArray'
    # .'$schema#typeArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$schema#typeArray'.'@'.0
            res = json_model_6(arr_1_item, arr_1_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $simpleTypes [.'$schema#typeArray'.'@'.0]", arr_1_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#typeArray'.'@']", path))
    if res:
        ival_2: int = len(val)
        res = ival_2 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#typeArray']", path))
    return res

# check $schema#stringArray (.'$schema#stringArray')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#stringArray'
    res = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # .'$schema#stringArray'.0
            res = isinstance(arr_2_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$schema#stringArray'.0]", arr_2_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#stringArray']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global json_model_9_map
        json_model_9_map = {
            "$id": json_model_4,
            "$ref": json_model_4,
            "$schema": _jm_f_0,
            "additionalItems": json_model_10,
            "additionalProperties": json_model_10,
            "allOf": json_model_5,
            "anyOf": json_model_5,
            "const": _jm_f_1,
            "contains": json_model_10,
            "default": _jm_f_2,
            "definitions": _jm_f_3,
            "dependencies": _jm_f_4,
            "description": _jm_f_5,
            "enum": _jm_f_6,
            "examples": _jm_f_7,
            "exclusiveMaximum": _jm_f_8,
            "exclusiveMinimum": _jm_f_9,
            "format": _jm_f_10,
            "items": _jm_f_11,
            "maxItems": _jm_f_12,
            "maxLength": _jm_f_13,
            "maxProperties": _jm_f_14,
            "maximum": _jm_f_15,
            "minItems": _jm_f_16,
            "minLength": _jm_f_17,
            "minProperties": _jm_f_18,
            "minimum": _jm_f_19,
            "multipleOf": _jm_f_20,
            "not": json_model_10,
            "oneOf": json_model_5,
            "pattern": _jm_f_21,
            "patternProperties": _jm_f_22,
            "properties": _jm_f_23,
            "propertyNames": json_model_10,
            "required": json_model_8,
            "title": _jm_f_24,
            "type": _jm_f_25,
            "uniqueItems": _jm_f_26,
        }
        global _jm_cst_0
        _jm_cst_0 = {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global check_model_map
        check_model_map = {
            "": json_model_3,
            "schema": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
