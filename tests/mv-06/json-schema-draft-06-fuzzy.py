#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
_jm_cst_1: set[str]
check_model_map: PropMap

# check $schema (.'$schema')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # JSON Model for JSON Schema Draft 06 [JSON_MODEL_LOOSE_INT, JSON_MODEL_LOOSE_FLOAT]
    # .'$schema'
    # .'$schema'.'@'
    res = json_model_10(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.'$schema'.'@']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $schema [.]", path))
    return res

# check $schema#Schema (.'$schema#Schema')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#Schema'
    # .'$schema#Schema'.'|'.0
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$schema#Schema'.'|'.0]", path))
    if not res:
        # .'$schema#Schema'.'|'.1
        res = json_model_9(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ObjectSchema [.'$schema#Schema'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$schema#Schema'.'|']", path))
    return res

# object .'$schema#ObjectSchema'.definitions
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.definitions]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.definitions.''
        res = json_model_10(pval, lpath_0 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.definitions.'']", lpath_0 if path is not None else None))
        if not res:
            return False
    return True

# object .'$schema#ObjectSchema'.properties
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.properties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.properties.''
        res = json_model_10(pval, lpath_1 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.properties.'']", lpath_1 if path is not None else None))
        if not res:
            return False
    return True

# object .'$schema#ObjectSchema'.dependencies
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.dependencies]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.dependencies.''
        # .'$schema#ObjectSchema'.dependencies.''.'|'.0
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema#ObjectSchema'.dependencies.''.'|'.0]", lpath_2 if path is not None else None))
        if not res:
            # .'$schema#ObjectSchema'.dependencies.''.'|'.1
            res = json_model_9(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $ObjectSchema [.'$schema#ObjectSchema'.dependencies.''.'|'.1]", lpath_2 if path is not None else None))
            if not res:
                # .'$schema#ObjectSchema'.dependencies.''.'|'.2
                res = json_model_8(pval, lpath_2 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected $stringArray [.'$schema#ObjectSchema'.dependencies.''.'|'.2]", lpath_2 if path is not None else None))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema#ObjectSchema'.dependencies.''.'|']", lpath_2 if path is not None else None))
        if not res:
            return False
    return True


# object .'$schema#ObjectSchema'.patternProperties
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema'.patternProperties]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$schema#ObjectSchema'.patternProperties.''
        res = json_model_10(pval, lpath_3 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.patternProperties.'']", lpath_3 if path is not None else None))
        if not res:
            return False
    return True

# object .'$schema#ObjectSchema'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$schema#ObjectSchema']", path))
        return False
    pval: Jsonable
    res: bool
    if "$id" in val:
        pval = val.get("$id", UNDEFINED)
        # .'$schema#ObjectSchema'.'$id'
        res = json_model_4(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $URI-REFERENCE [.'$schema#ObjectSchema'.'$id']", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <$id> [.'$schema#ObjectSchema']", path))
            return False
    if "$schema" in val:
        pval = val.get("$schema", UNDEFINED)
        # .'$schema#ObjectSchema'.'$schema'
        res = is_valid_url(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $URI [.'$schema#ObjectSchema'.'$schema']", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <$schema> [.'$schema#ObjectSchema']", path))
            return False
    if "title" in val:
        pval = val.get("title", UNDEFINED)
        # .'$schema#ObjectSchema'.title
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.title]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <title> [.'$schema#ObjectSchema']", path))
            return False
    if "description" in val:
        pval = val.get("description", UNDEFINED)
        # .'$schema#ObjectSchema'.description
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.description]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <description> [.'$schema#ObjectSchema']", path))
            return False
    if "examples" in val:
        pval = val.get("examples", UNDEFINED)
        # .'$schema#ObjectSchema'.examples
        res = isinstance(pval, list)
        if res:
            # accept any array
            pass
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$schema#ObjectSchema'.examples]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <examples> [.'$schema#ObjectSchema']", path))
            return False
    if "multipleOf" in val:
        pval = val.get("multipleOf", UNDEFINED)
        # .'$schema#ObjectSchema'.multipleOf
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool) and pval > 0.0
        if not res:
            rep is None or rep.append(("not a 1.0 loose float [.'$schema#ObjectSchema'.multipleOf]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <multipleOf> [.'$schema#ObjectSchema']", path))
            return False
    if "maximum" in val:
        pval = val.get("maximum", UNDEFINED)
        # .'$schema#ObjectSchema'.maximum
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.maximum]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <maximum> [.'$schema#ObjectSchema']", path))
            return False
    if "exclusiveMaximum" in val:
        pval = val.get("exclusiveMaximum", UNDEFINED)
        # .'$schema#ObjectSchema'.exclusiveMaximum
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.exclusiveMaximum]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <exclusiveMaximum> [.'$schema#ObjectSchema']", path))
            return False
    if "minimum" in val:
        pval = val.get("minimum", UNDEFINED)
        # .'$schema#ObjectSchema'.minimum
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.minimum]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <minimum> [.'$schema#ObjectSchema']", path))
            return False
    if "exclusiveMinimum" in val:
        pval = val.get("exclusiveMinimum", UNDEFINED)
        # .'$schema#ObjectSchema'.exclusiveMinimum
        res = isinstance(pval, (int, float)) and not isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a -1.0 loose float [.'$schema#ObjectSchema'.exclusiveMinimum]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <exclusiveMinimum> [.'$schema#ObjectSchema']", path))
            return False
    if "maxLength" in val:
        pval = val.get("maxLength", UNDEFINED)
        # .'$schema#ObjectSchema'.maxLength
        res = ((isinstance(pval, int) and not isinstance(pval, bool) or isinstance(pval, float) and pval == int(pval))) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.maxLength]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <maxLength> [.'$schema#ObjectSchema']", path))
            return False
    if "minLength" in val:
        pval = val.get("minLength", UNDEFINED)
        # .'$schema#ObjectSchema'.minLength
        res = ((isinstance(pval, int) and not isinstance(pval, bool) or isinstance(pval, float) and pval == int(pval))) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.minLength]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <minLength> [.'$schema#ObjectSchema']", path))
            return False
    if "additionalItems" in val:
        pval = val.get("additionalItems", UNDEFINED)
        # .'$schema#ObjectSchema'.additionalItems
        res = json_model_10(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.additionalItems]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <additionalItems> [.'$schema#ObjectSchema']", path))
            return False
    if "items" in val:
        pval = val.get("items", UNDEFINED)
        # .'$schema#ObjectSchema'.items
        # .'$schema#ObjectSchema'.items.'|'.0
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema#ObjectSchema'.items.'|'.0]", path))
        if not res:
            # .'$schema#ObjectSchema'.items.'|'.1
            res = json_model_9(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $ObjectSchema [.'$schema#ObjectSchema'.items.'|'.1]", path))
            if not res:
                # .'$schema#ObjectSchema'.items.'|'.2
                res = json_model_5(pval, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected $schemaArray [.'$schema#ObjectSchema'.items.'|'.2]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$schema#ObjectSchema'.items.'|']", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <items> [.'$schema#ObjectSchema']", path))
            return False
    if "maxItems" in val:
        pval = val.get("maxItems", UNDEFINED)
        # .'$schema#ObjectSchema'.maxItems
        res = ((isinstance(pval, int) and not isinstance(pval, bool) or isinstance(pval, float) and pval == int(pval))) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.maxItems]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <maxItems> [.'$schema#ObjectSchema']", path))
            return False
    if "minItems" in val:
        pval = val.get("minItems", UNDEFINED)
        # .'$schema#ObjectSchema'.minItems
        res = ((isinstance(pval, int) and not isinstance(pval, bool) or isinstance(pval, float) and pval == int(pval))) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.minItems]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <minItems> [.'$schema#ObjectSchema']", path))
            return False
    if "uniqueItems" in val:
        pval = val.get("uniqueItems", UNDEFINED)
        # .'$schema#ObjectSchema'.uniqueItems
        res = isinstance(pval, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$schema#ObjectSchema'.uniqueItems]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <uniqueItems> [.'$schema#ObjectSchema']", path))
            return False
    if "contains" in val:
        pval = val.get("contains", UNDEFINED)
        # .'$schema#ObjectSchema'.contains
        res = json_model_10(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.contains]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <contains> [.'$schema#ObjectSchema']", path))
            return False
    if "maxProperties" in val:
        pval = val.get("maxProperties", UNDEFINED)
        # .'$schema#ObjectSchema'.maxProperties
        res = ((isinstance(pval, int) and not isinstance(pval, bool) or isinstance(pval, float) and pval == int(pval))) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.maxProperties]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <maxProperties> [.'$schema#ObjectSchema']", path))
            return False
    if "minProperties" in val:
        pval = val.get("minProperties", UNDEFINED)
        # .'$schema#ObjectSchema'.minProperties
        res = ((isinstance(pval, int) and not isinstance(pval, bool) or isinstance(pval, float) and pval == int(pval))) and pval >= 0
        if not res:
            rep is None or rep.append(("not a 0 loose int [.'$schema#ObjectSchema'.minProperties]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <minProperties> [.'$schema#ObjectSchema']", path))
            return False
    if "required" in val:
        pval = val.get("required", UNDEFINED)
        # .'$schema#ObjectSchema'.required
        res = json_model_8(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $stringArray [.'$schema#ObjectSchema'.required]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <required> [.'$schema#ObjectSchema']", path))
            return False
    if "additionalProperties" in val:
        pval = val.get("additionalProperties", UNDEFINED)
        # .'$schema#ObjectSchema'.additionalProperties
        res = json_model_10(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.additionalProperties]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <additionalProperties> [.'$schema#ObjectSchema']", path))
            return False
    if "definitions" in val:
        pval = val.get("definitions", UNDEFINED)
        # .'$schema#ObjectSchema'.definitions
        res = _jm_obj_1(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.definitions]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <definitions> [.'$schema#ObjectSchema']", path))
            return False
    if "properties" in val:
        pval = val.get("properties", UNDEFINED)
        # .'$schema#ObjectSchema'.properties
        res = _jm_obj_2(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.properties]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <properties> [.'$schema#ObjectSchema']", path))
            return False
    if "propertyNames" in val:
        pval = val.get("propertyNames", UNDEFINED)
        # .'$schema#ObjectSchema'.propertyNames
        res = json_model_10(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.propertyNames]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <propertyNames> [.'$schema#ObjectSchema']", path))
            return False
    if "dependencies" in val:
        pval = val.get("dependencies", UNDEFINED)
        # .'$schema#ObjectSchema'.dependencies
        res = _jm_obj_3(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.dependencies]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <dependencies> [.'$schema#ObjectSchema']", path))
            return False
    if "enum" in val:
        pval = val.get("enum", UNDEFINED)
        # .'$schema#ObjectSchema'.enum
        # .'$schema#ObjectSchema'.enum.'@'
        res = isinstance(pval, list)
        if res:
            # accept any array
            pass
        if not res:
            rep is None or rep.append(("not array or unexpected array [.'$schema#ObjectSchema'.enum.'@']", path))
        if res:
            ival_0: int = len(pval)
            res = is_unique_array(pval, path, rep) and ival_0 >= 1
            if not res:
                rep is None or rep.append(("constraints failed [.'$schema#ObjectSchema'.enum]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <enum> [.'$schema#ObjectSchema']", path))
            return False
    if "type" in val:
        pval = val.get("type", UNDEFINED)
        # .'$schema#ObjectSchema'.type
        res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_0
        if not res:
            rep is None or rep.append(("value not in enum [.'$schema#ObjectSchema'.type.'|']", path))
        if not res:
            # .'$schema#ObjectSchema'.type.'|'.0
            res = json_model_7(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $typeArray [.'$schema#ObjectSchema'.type.'|'.0]", path))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$schema#ObjectSchema'.type.'|']", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <type> [.'$schema#ObjectSchema']", path))
            return False
    if "format" in val:
        pval = val.get("format", UNDEFINED)
        # .'$schema#ObjectSchema'.format
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.format]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <format> [.'$schema#ObjectSchema']", path))
            return False
    if "allOf" in val:
        pval = val.get("allOf", UNDEFINED)
        # .'$schema#ObjectSchema'.allOf
        res = json_model_5(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$schema#ObjectSchema'.allOf]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <allOf> [.'$schema#ObjectSchema']", path))
            return False
    if "anyOf" in val:
        pval = val.get("anyOf", UNDEFINED)
        # .'$schema#ObjectSchema'.anyOf
        res = json_model_5(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$schema#ObjectSchema'.anyOf]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <anyOf> [.'$schema#ObjectSchema']", path))
            return False
    if "oneOf" in val:
        pval = val.get("oneOf", UNDEFINED)
        # .'$schema#ObjectSchema'.oneOf
        res = json_model_5(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $schemaArray [.'$schema#ObjectSchema'.oneOf]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <oneOf> [.'$schema#ObjectSchema']", path))
            return False
    if "not" in val:
        pval = val.get("not", UNDEFINED)
        # .'$schema#ObjectSchema'.not
        res = json_model_10(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Schema [.'$schema#ObjectSchema'.not]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <not> [.'$schema#ObjectSchema']", path))
            return False
    if "$ref" in val:
        pval = val.get("$ref", UNDEFINED)
        # .'$schema#ObjectSchema'.'$ref'
        res = json_model_4(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $URI-REFERENCE [.'$schema#ObjectSchema'.'$ref']", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <$ref> [.'$schema#ObjectSchema']", path))
            return False
    if "pattern" in val:
        pval = val.get("pattern", UNDEFINED)
        # .'$schema#ObjectSchema'.pattern
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$schema#ObjectSchema'.pattern]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <pattern> [.'$schema#ObjectSchema']", path))
            return False
    if "patternProperties" in val:
        pval = val.get("patternProperties", UNDEFINED)
        # .'$schema#ObjectSchema'.patternProperties
        res = _jm_obj_4(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema'.patternProperties]", path))
        if not res:
            rep is None or rep.append(("unexpected value for optional prop <patternProperties> [.'$schema#ObjectSchema']", path))
            return False
    return True

# check $schema#ObjectSchema (.'$schema#ObjectSchema')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#ObjectSchema'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$schema#ObjectSchema']", path))
    return res

# check $schema#URI-REFERENCE (.'$schema#URI-REFERENCE')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#URI-REFERENCE'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$schema#URI-REFERENCE']", path))
    return res

# check $schema#schemaArray (.'$schema#schemaArray')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#schemaArray'
    # .'$schema#schemaArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$schema#schemaArray'.'@'.0
            res = json_model_10(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Schema [.'$schema#schemaArray'.'@'.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#schemaArray'.'@']", path))
    if res:
        ival_1: int = len(val)
        res = ival_1 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#schemaArray']", path))
    return res

# check $schema#typeArray (.'$schema#typeArray')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#typeArray'
    # .'$schema#typeArray'.'@'
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # .'$schema#typeArray'.'@'.0
            res = json_model_6(arr_1_item, arr_1_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $simpleTypes [.'$schema#typeArray'.'@'.0]", arr_1_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#typeArray'.'@']", path))
    if res:
        ival_2: int = len(val)
        res = ival_2 >= 1
        if not res:
            rep is None or rep.append(("constraints failed [.'$schema#typeArray']", path))
    return res


# check $schema#simpleTypes (.'$schema#simpleTypes')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#simpleTypes'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_1
    if not res:
        rep is None or rep.append(("value not in enum [.'$schema#simpleTypes'.'|']", path))
    return res

# check $schema#stringArray (.'$schema#stringArray')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$schema#stringArray'
    res = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # .'$schema#stringArray'.0
            res = isinstance(arr_2_item, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$schema#stringArray'.0]", arr_2_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$schema#stringArray']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global _jm_cst_1
        _jm_cst_1 = {'array', 'boolean', 'integer', 'null', 'number', 'object', 'string'}
        global check_model_map
        check_model_map = {
            "": json_model_3,
            "schema": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
