#! /bin/env node
//
// Generated by JSON Model Compiler version 2.0b0
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2.0b0";

var _jm_obj_0_mup = new Map()
var check_model_map = new Map()

// check _jm_obj_0_mup_! (.'!')
function _jm_f_0(val, path, rep)
{
    let res;
    // .'!'
    res = ((typeof val === 'number' || val instanceof Number) && Number.isInteger(val)) && val >= 0;
    if (! res)
    {
        rep !== null && rep.push(["not a 0 strict int [.'!']", path])
    }
    return res;
}

// check _jm_obj_0_mup_/ (.'/')
function _jm_f_1(val, path, rep)
{
    let res;
    // .'/'
    res = ((typeof val === 'number' || val instanceof Number) && Number.isInteger(val)) && val == 17;
    if (! res)
    {
        rep !== null && rep.push(["unexpected =17 [.'/']", path])
    }
    return res;
}

// check _jm_obj_0_mup_? (.'?')
function _jm_f_2(val, path, rep)
{
    let res;
    // .'?'
    res = ((typeof val === 'number' || val instanceof Number)) && val >= 0.0;
    if (! res)
    {
        rep !== null && rep.push(["not a 0.0 strict float [.'?']", path])
    }
    return res;
}

// check _jm_obj_0_mup__ (._)
function _jm_f_3(val, path, rep)
{
    let res;
    // ._
    res = (typeof val === 'boolean' || val instanceof Boolean);
    if (! res)
    {
        rep !== null && rep.push(["not a bool [._]", path])
    }
    return res;
}

// check _jm_obj_0_mup_a (.a)
function _jm_f_4(val, path, rep)
{
    let res;
    // .a
    res = ((typeof val === 'number' || val instanceof Number) && Number.isInteger(val)) && val >= 0;
    if (! res)
    {
        rep !== null && rep.push(["not a 0 strict int [.a]", path])
    }
    return res;
}


// object .
function _jm_obj_0(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.]", path])
        return false;
    }
    let res;
    let pfun;
    let must_count = 0;
    for(const [prop, pval] of Object.entries(val))
    {
        let lpath_0 = path ? path.concat([prop]) : null;
        if ((pfun = _jm_obj_0_mup.get(prop)))
        {
            // handle 5 mandatory props
            if (pfun !== undefined)
            {
                must_count += 1;
                if (! pfun(pval, (path ? lpath_0 : null), rep))
                {
                    rep !== null && rep.push(["invalid mandatory prop value [.]", (path ? lpath_0 : null)])
                    return false;
                }
            }
        }
        else if (prop == "b")
        {
            // handle may b property
            // .b
            res = pval === null;
            if (! res)
            {
                rep !== null && rep.push(["not null [.b]", (path ? lpath_0 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid optional prop value [.b]", (path ? lpath_0 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.]", (path ? lpath_0 : null)])
            return false;
        }
    }
    if (must_count != 5)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("!"))
            {
                rep !== null && rep.push(["missing mandatory prop <!> [.]", path])
            }
            if (! val.hasOwnProperty("/"))
            {
                rep !== null && rep.push(["missing mandatory prop </> [.]", path])
            }
            if (! val.hasOwnProperty("?"))
            {
                rep !== null && rep.push(["missing mandatory prop <?> [.]", path])
            }
            if (! val.hasOwnProperty("_"))
            {
                rep !== null && rep.push(["missing mandatory prop <_> [.]", path])
            }
            if (! val.hasOwnProperty("a"))
            {
                rep !== null && rep.push(["missing mandatory prop <a> [.]", path])
            }
        }
        return false;
    }
    return true;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = _jm_obj_0(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected object [.]", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        _jm_obj_0_mup.set("!", _jm_f_0)
        _jm_obj_0_mup.set("/", _jm_f_1)
        _jm_obj_0_mup.set("?", _jm_f_2)
        _jm_obj_0_mup.set("_", _jm_f_3)
        _jm_obj_0_mup.set("a", _jm_f_4)
        check_model_map.set("", json_model_1)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
