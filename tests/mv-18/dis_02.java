//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class dis_02 extends ModelChecker
{
    static public final String VERSION = "2";

    Map<Object, Checker> _jm_map_0_cmap;
    public Map<String, Checker> dis_02_map_pmap;

    // object .'|'.0
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.0]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'|'.0]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "t"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'|'.0]", path);
            return false;
        }
        pval = json.objectValue(val, "t");
        // .'|'.0.t
        res = json.isDouble(pval) && json.asDouble(pval) == 3.1415927;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =3.1415927 [.'|'.0.t]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'|'.0]", path);
            return false;
        }
        if (! json.objectHasProp(val, "pi"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <pi> [.'|'.0]", path);
            return false;
        }
        pval = json.objectValue(val, "pi");
        // .'|'.0.pi
        res = json.isString(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.'|'.0.pi]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <pi> [.'|'.0]", path);
            return false;
        }
        return true;
    }

    // object .'|'.1
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.1]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'|'.1]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "t"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'|'.1]", path);
            return false;
        }
        pval = json.objectValue(val, "t");
        // .'|'.1.t
        res = json.isDouble(pval) && json.asDouble(pval) == 1.0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =1.0 [.'|'.1.t]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'|'.1]", path);
            return false;
        }
        if (! json.objectHasProp(val, "one"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <one> [.'|'.1]", path);
            return false;
        }
        pval = json.objectValue(val, "one");
        // .'|'.1.one
        res = json.isString(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.'|'.1.one]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <one> [.'|'.1]", path);
            return false;
        }
        return true;
    }

    // object .'|'.2
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.2]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'|'.2]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "t"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'|'.2]", path);
            return false;
        }
        pval = json.objectValue(val, "t");
        // .'|'.2.t
        res = json.isDouble(pval) && json.asDouble(pval) == 0.5;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =0.5 [.'|'.2.t]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'|'.2]", path);
            return false;
        }
        if (! json.objectHasProp(val, "half"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <half> [.'|'.2]", path);
            return false;
        }
        pval = json.objectValue(val, "half");
        // .'|'.2.half
        res = json.isString(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.'|'.2.half]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <half> [.'|'.2]", path);
            return false;
        }
        return true;
    }


    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // disjunction on float
        // .
        boolean iso_0 = json.isObject(val);
        res = iso_0;
        if (res)
        {
            if (json.objectHasProp(val, "t"))
            {
                Object tag_0 = json.objectValue(val, "t");
                Checker fun_0 = _jm_map_0_cmap.get(tag_0);
                if (fun_0 != null)
                {
                    res = fun_0.call(val, path, rep);
                }
                else
                {
                    res = false;
                    if (rep != null) rep.addEntry("tag <t> value not found [.'|']", path);
                }
            }
            else
            {
                res = false;
                if (rep != null) rep.addEntry("tag prop <t> is missing [.'|']", path);
            }
        }
        else
        {
            if (rep != null) rep.addEntry("value is not an object [.'|']", path);
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_map_0_cmap = new HashMap<Object, Checker>();
            _jm_map_0_cmap.put(json.safeJSON("3.1415927"), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_0(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("1.0"), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_1(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("0.5"), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_2(o, p, r);} });
            dis_02_map_pmap = new HashMap<String, Checker>();
            dis_02_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_map_0_cmap = null;
            dis_02_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return dis_02_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return dis_02_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new dis_02();
        Main.main("dis_02", checker, VERSION, args);
    }
}
