//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class dis_04 extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> dis_04_map_pmap;

    // object .'|'.5
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.5]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'|'.5]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'|'.5]", path);
            return false;
        }
        lpath = new Path("t", path);
        // .'|'.5.t
        res = json.isString(pval) && json.asString(pval).compareTo("t") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected t [.'|'.5.t]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'|'.5]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "v")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <v> [.'|'.5]", path);
            return false;
        }
        lpath = new Path("v", path);
        // .'|'.5.v
        // "/./s"
        res = json.isString(pval) && json.asString(pval).length() > 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected /./s [.'|'.5.v]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <v> [.'|'.5]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .'|'.4
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.4]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'|'.4]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'|'.4]", path);
            return false;
        }
        lpath = new Path("t", path);
        // .'|'.4.t
        res = json.isString(pval) && json.asString(pval).compareTo("s") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected s [.'|'.4.t]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'|'.4]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "v")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <v> [.'|'.4]", path);
            return false;
        }
        lpath = new Path("v", path);
        // .'|'.4.v
        res = json.isString(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.'|'.4.v]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <v> [.'|'.4]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .'|'.3
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.3]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'|'.3]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'|'.3]", path);
            return false;
        }
        lpath = new Path("t", path);
        // .'|'.3.t
        res = json.isDouble(pval) && json.asDouble(pval) == 0.0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =0.0 [.'|'.3.t]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'|'.3]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "v")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <v> [.'|'.3]", path);
            return false;
        }
        lpath = new Path("v", path);
        // .'|'.3.v
        res = json.isDouble(pval) && json.asDouble(pval) >= 0.0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0.0 strict float [.'|'.3.v]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <v> [.'|'.3]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .'|'.2
    public boolean _jm_obj_3(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.2]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'|'.2]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'|'.2]", path);
            return false;
        }
        lpath = new Path("t", path);
        // .'|'.2.t
        res = json.isInteger(pval) && json.asLong(pval) == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =0 [.'|'.2.t]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'|'.2]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "v")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <v> [.'|'.2]", path);
            return false;
        }
        lpath = new Path("v", path);
        // .'|'.2.v
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'|'.2.v]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <v> [.'|'.2]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .'|'.1
    public boolean _jm_obj_4(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.1]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'|'.1]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'|'.1]", path);
            return false;
        }
        lpath = new Path("t", path);
        // .'|'.1.t
        res = json.isBoolean(pval) && json.asBoolean(pval) == true;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =true [.'|'.1.t]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'|'.1]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "v")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <v> [.'|'.1]", path);
            return false;
        }
        lpath = new Path("v", path);
        // .'|'.1.v
        res = json.isBoolean(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("not a bool [.'|'.1.v]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <v> [.'|'.1]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .'|'.0
    public boolean _jm_obj_5(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.0]", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'|'.0]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'|'.0]", path);
            return false;
        }
        lpath = new Path("t", path);
        // .'|'.0.t
        res = json.isNull(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =null [.'|'.0.t]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'|'.0]", (path != null ? lpath : null));
            return false;
        }
        if (! ((pval = json.objectValue(val, "v")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <v> [.'|'.0]", path);
            return false;
        }
        lpath = new Path("v", path);
        // .'|'.0.v
        res = json.isNull(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("not null [.'|'.0.v]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <v> [.'|'.0]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // multi-type discriminator
        // .
        boolean res = json.isObject(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected type [.'|']", path);
        }
        if (res)
        {
            // .'|'.0
            res = _jm_obj_5(val, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected element [.'|'.0]", path);
            }
            if (! res)
            {
                // .'|'.1
                res = _jm_obj_4(val, path, rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected element [.'|'.1]", path);
                }
                if (! res)
                {
                    // .'|'.2
                    res = _jm_obj_3(val, path, rep);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("unexpected element [.'|'.2]", path);
                    }
                    if (! res)
                    {
                        // .'|'.3
                        res = _jm_obj_2(val, path, rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected element [.'|'.3]", path);
                        }
                        if (! res)
                        {
                            // .'|'.4
                            res = _jm_obj_1(val, path, rep);
                            if (! res)
                            {
                                if (rep != null) rep.addEntry("unexpected element [.'|'.4]", path);
                            }
                            if (! res)
                            {
                                // .'|'.5
                                res = _jm_obj_0(val, path, rep);
                                if (! res)
                                {
                                    if (rep != null) rep.addEntry("unexpected element [.'|'.5]", path);
                                }
                            }
                        }
                    }
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'|']", path);
            }
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            dis_04_map_pmap = new HashMap<String, Checker>();
            dis_04_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            dis_04_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return dis_04_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return dis_04_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new dis_04();
        Main.main("dis_04", checker, VERSION, args);
    }
}
