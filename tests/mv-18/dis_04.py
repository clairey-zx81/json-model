#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# object .'|'.5
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.5]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'|'.5]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <t> [.'|'.5]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    # .'|'.5.t
    res = isinstance(pval, str) and pval == "t"
    if not res:
        rep is None or rep.append(("unexpected t [.'|'.5.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'|'.5]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("v", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <v> [.'|'.5]", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    # .'|'.5.v
    # "/./s"
    res = isinstance(pval, str) and len(pval) > 0
    if not res:
        rep is None or rep.append(("unexpected /./s [.'|'.5.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'|'.5]", lpath if path is not None else None))
        return False
    return True

# object .'|'.4
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.4]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'|'.4]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <t> [.'|'.4]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    # .'|'.4.t
    res = isinstance(pval, str) and pval == "s"
    if not res:
        rep is None or rep.append(("unexpected s [.'|'.4.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'|'.4]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("v", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <v> [.'|'.4]", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    # .'|'.4.v
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'|'.4.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'|'.4]", lpath if path is not None else None))
        return False
    return True

# object .'|'.3
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.3]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'|'.3]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <t> [.'|'.3]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    # .'|'.3.t
    res = isinstance(pval, float) and pval == 0.0
    if not res:
        rep is None or rep.append(("unexpected =0.0 [.'|'.3.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'|'.3]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("v", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <v> [.'|'.3]", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    # .'|'.3.v
    res = isinstance(pval, float) and pval >= 0.0
    if not res:
        rep is None or rep.append(("not a 0.0 strict float [.'|'.3.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'|'.3]", lpath if path is not None else None))
        return False
    return True

# object .'|'.2
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.2]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'|'.2]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <t> [.'|'.2]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    # .'|'.2.t
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval == 0
    if not res:
        rep is None or rep.append(("unexpected =0 [.'|'.2.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'|'.2]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("v", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <v> [.'|'.2]", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    # .'|'.2.v
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'|'.2.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'|'.2]", lpath if path is not None else None))
        return False
    return True

# object .'|'.1
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.1]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'|'.1]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <t> [.'|'.1]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    # .'|'.1.t
    res = isinstance(pval, bool) and pval == True
    if not res:
        rep is None or rep.append(("unexpected =true [.'|'.1.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'|'.1]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("v", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <v> [.'|'.1]", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    # .'|'.1.v
    res = isinstance(pval, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'|'.1.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'|'.1]", lpath if path is not None else None))
        return False
    return True

# object .'|'.0
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.0]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.'|'.0]", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <t> [.'|'.0]", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    # .'|'.0.t
    res = pval is None
    if not res:
        rep is None or rep.append(("unexpected =null [.'|'.0.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'|'.0]", lpath if path is not None else None))
        return False
    if not ((pval := val.get("v", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <v> [.'|'.0]", path))
        return False
    lpath = (path + [ "v" ]) if path is not None else None
    # .'|'.0.v
    res = pval is None
    if not res:
        rep is None or rep.append(("not null [.'|'.0.v]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <v> [.'|'.0]", lpath if path is not None else None))
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # multi-type discriminator
    # .
    res: bool = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'|']", path))
    if res:
        # .'|'.0
        res = _jm_obj_5(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'|'.0]", path))
        if not res:
            # .'|'.1
            res = _jm_obj_4(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'|'.1]", path))
            if not res:
                # .'|'.2
                res = _jm_obj_3(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'|'.2]", path))
                if not res:
                    # .'|'.3
                    res = _jm_obj_2(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'|'.3]", path))
                    if not res:
                        # .'|'.4
                        res = _jm_obj_1(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'|'.4]", path))
                        if not res:
                            # .'|'.5
                            res = _jm_obj_0(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'|'.5]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
