#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0b0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0b0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# object .'|'.5
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.5]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.5.t
            res = isinstance(pval, str) and pval == "t"
            if not res:
                rep is None or rep.append(("unexpected t [.'|'.5.t]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.5.t]", lpath_0 if path is not None else None))
                return False
        elif prop == "v":
            # handle must v property
            must_count += 1
            # .'|'.5.v
            # "/./s"
            res = isinstance(pval, str) and len(pval) > 0
            if not res:
                rep is None or rep.append(("unexpected /./s [.'|'.5.v]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.5.v]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.5]", lpath_0 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.5]", path))
            if not "v" in val:
                rep is None or rep.append(("missing mandatory prop <v> [.'|'.5]", path))
        return False
    return True

# object .'|'.4
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.4.t
            res = isinstance(pval, str) and pval == "s"
            if not res:
                rep is None or rep.append(("unexpected s [.'|'.4.t]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.4.t]", lpath_1 if path is not None else None))
                return False
        elif prop == "v":
            # handle must v property
            must_count += 1
            # .'|'.4.v
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'|'.4.v]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.4.v]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.4]", lpath_1 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.4]", path))
            if not "v" in val:
                rep is None or rep.append(("missing mandatory prop <v> [.'|'.4]", path))
        return False
    return True

# object .'|'.3
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.3.t
            res = isinstance(pval, float) and pval == 0.0
            if not res:
                rep is None or rep.append(("unexpected =0.0 [.'|'.3.t]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.3.t]", lpath_2 if path is not None else None))
                return False
        elif prop == "v":
            # handle must v property
            must_count += 1
            # .'|'.3.v
            res = isinstance(pval, float) and pval >= 0.0
            if not res:
                rep is None or rep.append(("not a 0.0 strict float [.'|'.3.v]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.3.v]", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.3]", lpath_2 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.3]", path))
            if not "v" in val:
                rep is None or rep.append(("missing mandatory prop <v> [.'|'.3]", path))
        return False
    return True

# object .'|'.2
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.2.t
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval == 0
            if not res:
                rep is None or rep.append(("unexpected =0 [.'|'.2.t]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.2.t]", lpath_3 if path is not None else None))
                return False
        elif prop == "v":
            # handle must v property
            must_count += 1
            # .'|'.2.v
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.'|'.2.v]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.2.v]", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.2]", lpath_3 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.2]", path))
            if not "v" in val:
                rep is None or rep.append(("missing mandatory prop <v> [.'|'.2]", path))
        return False
    return True

# object .'|'.1
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.1.t
            res = isinstance(pval, bool) and pval == True
            if not res:
                rep is None or rep.append(("unexpected =true [.'|'.1.t]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.1.t]", lpath_4 if path is not None else None))
                return False
        elif prop == "v":
            # handle must v property
            must_count += 1
            # .'|'.1.v
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'|'.1.v]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.1.v]", lpath_4 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.1]", lpath_4 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.1]", path))
            if not "v" in val:
                rep is None or rep.append(("missing mandatory prop <v> [.'|'.1]", path))
        return False
    return True

# object .'|'.0
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'|'.0.t
            res = pval is None
            if not res:
                rep is None or rep.append(("unexpected =null [.'|'.0.t]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.0.t]", lpath_5 if path is not None else None))
                return False
        elif prop == "v":
            # handle must v property
            must_count += 1
            # .'|'.0.v
            res = pval is None
            if not res:
                rep is None or rep.append(("not null [.'|'.0.v]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'|'.0.v]", lpath_5 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'|'.0]", lpath_5 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'|'.0]", path))
            if not "v" in val:
                rep is None or rep.append(("missing mandatory prop <v> [.'|'.0]", path))
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # multi-type discriminator
    # .
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'|']", path))
    if res:
        # .'|'.0
        res = _jm_obj_5(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'|'.0]", path))
        if not res:
            # .'|'.1
            res = _jm_obj_4(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'|'.1]", path))
            if not res:
                # .'|'.2
                res = _jm_obj_3(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'|'.2]", path))
                if not res:
                    # .'|'.3
                    res = _jm_obj_2(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'|'.3]", path))
                    if not res:
                        # .'|'.4
                        res = _jm_obj_1(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'|'.4]", path))
                        if not res:
                            # .'|'.5
                            res = _jm_obj_0(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'|'.5]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
