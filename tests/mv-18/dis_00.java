//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class dis_00 extends ModelChecker
{
    static public final String VERSION = "2";

    Map<Object, Checker> _jm_map_0_cmap;
    public Map<String, Checker> dis_00_map_pmap;

    // object .'|'.0
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.0]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (prop.compareTo("tag") == 0)
            {
                // handle must tag property
                must_count += 1;
                // .'|'.0.tag
                res = json.isString(pval) && json.asString(pval).compareTo("a") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected a [.'|'.0.tag]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'|'.0.tag]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("a") == 0)
            {
                // handle must a property
                must_count += 1;
                // .'|'.0.a
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'|'.0.a]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'|'.0.a]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'|'.0]", (path != null ? lpath_0 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "a"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <a> [.'|'.0]", path);
                }
                if (! json.objectHasProp(val, "tag"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <tag> [.'|'.0]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // object .'|'.1
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.1]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            if (prop.compareTo("tag") == 0)
            {
                // handle must tag property
                must_count += 1;
                // .'|'.1.tag
                res = json.isString(pval) && json.asString(pval).compareTo("b") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected b [.'|'.1.tag]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'|'.1.tag]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("b") == 0)
            {
                // handle must b property
                must_count += 1;
                // .'|'.1.b
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'|'.1.b]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'|'.1.b]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'|'.1]", (path != null ? lpath_1 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "b"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <b> [.'|'.1]", path);
                }
                if (! json.objectHasProp(val, "tag"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <tag> [.'|'.1]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // object .'|'.2
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.2]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_2 = new Path(prop, path);
            if (prop.compareTo("tag") == 0)
            {
                // handle must tag property
                must_count += 1;
                // .'|'.2.tag
                res = json.isString(pval) && json.asString(pval).compareTo("c") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected c [.'|'.2.tag]", (path != null ? lpath_2 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'|'.2.tag]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("c") == 0)
            {
                // handle must c property
                must_count += 1;
                // .'|'.2.c
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'|'.2.c]", (path != null ? lpath_2 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'|'.2.c]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'|'.2]", (path != null ? lpath_2 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "c"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <c> [.'|'.2]", path);
                }
                if (! json.objectHasProp(val, "tag"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <tag> [.'|'.2]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // string discriminant
        // .
        res = json.isObject(val);
        if (res)
        {
            if (json.objectHasProp(val, "tag"))
            {
                Object tag_0 = json.objectValue(val, "tag");
                Checker fun_0 = _jm_map_0_cmap.get(tag_0);
                if (fun_0 != null)
                {
                    res = fun_0.call(val, path, rep);
                }
                else
                {
                    res = false;
                    if (rep != null) rep.addEntry("tag <tag> value not found [.'|']", path);
                }
            }
            else
            {
                res = false;
                if (rep != null) rep.addEntry("tag prop <tag> is missing [.'|']", path);
            }
        }
        else
        {
            if (rep != null) rep.addEntry("value is not an object [.'|']", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_map_0_cmap = new HashMap<Object, Checker>();
            _jm_map_0_cmap.put(json.safeJSON("\"a\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_0(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"b\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_1(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"c\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_2(o, p, r);} });
            dis_00_map_pmap = new HashMap<String, Checker>();
            dis_00_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_map_0_cmap = null;
            dis_00_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return dis_00_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return dis_00_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new dis_00();
        Main.main("dis_00", checker, VERSION, args);
    }
}
