--
-- Generated by JSON Model Compiler version 2
-- see https://github.com/clairey-zx81/json-model
--
-- JSON_MODEL_VERSION is 2
CREATE EXTENSION IF NOT EXISTS json_model;

-- object .'|'.0
CREATE OR REPLACE FUNCTION _jm_obj_0(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 2 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'discriminator' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'discriminator';
  -- .'|'.0.discriminator
  res := JSONB_TYPEOF(pval) = 'boolean' AND (pval)::BOOL = TRUE;
  IF NOT res THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'x' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'x';
  -- .'|'.0.x
  RETURN JSONB_TYPEOF(pval) = 'string';
END;
$$ LANGUAGE PLpgSQL;

-- object .'|'.1
CREATE OR REPLACE FUNCTION _jm_obj_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 2 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'discriminator' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'discriminator';
  -- .'|'.1.discriminator
  res := JSONB_TYPEOF(pval) = 'boolean' AND (pval)::BOOL = FALSE;
  IF NOT res THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'y' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'y';
  -- .'|'.1.y
  RETURN JSONB_TYPEOF(pval) = 'string';
END;
$$ LANGUAGE PLpgSQL;


-- check $ (.)
CREATE OR REPLACE FUNCTION json_model_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  iso_0 bool;
  tag_0 JSONB;
  fun_0 TEXT;
BEGIN
  -- boolean tag
  -- .
  iso_0 := JSONB_TYPEOF(val) = 'object';
  res := iso_0;
  IF res THEN
    IF val ? 'discriminator' THEN
      tag_0 := val -> 'discriminator';
      fun_0 := jm_cmap_get('_jm_map_0', tag_0);
      res := fun_0 IS NOT NULL AND jm_call(fun_0, val, path, rep);
    ELSE
      res := FALSE;
    END IF;
  ELSE
    NULL;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION check_model_map(name TEXT)
RETURNS TEXT STRICT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  map JSONB := JSONB '{"":"json_model_1"}';
BEGIN
  RETURN map->>name;
END;
$$ LANGUAGE plpgsql;

--
-- constant maps initialization
--
TRUNCATE jm_constant_maps;
INSERT INTO jm_constant_maps(mapname, tagval, value) VALUES
  ('_jm_map_0', JSONB 'true', '_jm_obj_0'),
  ('_jm_map_0', JSONB 'false', '_jm_obj_1')
;

--
-- JSON Model checking entry point
--
-- TODO INOUT rep?
CREATE OR REPLACE FUNCTION check_model(val JSONB, name TEXT, rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  fun TEXT;
BEGIN
  fun := check_model_map(name);
  IF fun IS NULL THEN
    RAISE EXCEPTION 'model for % not found', name;
  END IF;
  RETURN jm_call(fun, val, NULL, rep);
END;
$$ LANGUAGE plpgsql;
