--
-- Generated by JSON Model Compiler version 2
-- see https://github.com/clairey-zx81/json-model
--
-- JSON_MODEL_VERSION is 2
CREATE EXTENSION IF NOT EXISTS json_model;

-- object .'|'.5
CREATE OR REPLACE FUNCTION _jm_obj_0(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 2 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 't' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 't';
  -- .'|'.5.t
  res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 't';
  IF NOT res THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'v' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'v';
  -- .'|'.5.v
  -- "/./s"
  RETURN JSONB_TYPEOF(pval) = 'string' AND LENGTH(JSON_VALUE(pval, '$' RETURNING TEXT)) > 0;
END;
$$ LANGUAGE PLpgSQL;

-- object .'|'.4
CREATE OR REPLACE FUNCTION _jm_obj_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 2 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 't' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 't';
  -- .'|'.4.t
  res := JSONB_TYPEOF(pval) = 'string' AND JSON_VALUE(pval, '$' RETURNING TEXT) = 's';
  IF NOT res THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'v' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'v';
  -- .'|'.4.v
  RETURN JSONB_TYPEOF(pval) = 'string';
END;
$$ LANGUAGE PLpgSQL;

-- object .'|'.3
CREATE OR REPLACE FUNCTION _jm_obj_2(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 2 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 't' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 't';
  -- .'|'.3.t
  res := JSONB_TYPEOF(pval) = 'number' AND (pval)::FLOAT8 = 0.0;
  IF NOT res THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'v' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'v';
  -- .'|'.3.v
  RETURN JSONB_TYPEOF(pval) = 'number' AND (pval)::FLOAT8 >= 0.0;
END;
$$ LANGUAGE PLpgSQL;

-- object .'|'.2
CREATE OR REPLACE FUNCTION _jm_obj_3(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 2 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 't' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 't';
  -- .'|'.2.t
  res := JSONB_TYPEOF(pval) = 'number' AND (pval)::INT8 = (pval)::FLOAT8 AND (pval)::INT8 = 0;
  IF NOT res THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'v' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'v';
  -- .'|'.2.v
  RETURN JSONB_TYPEOF(pval) = 'number' AND (pval)::INT8 = (pval)::FLOAT8 AND (pval)::INT8 >= 0;
END;
$$ LANGUAGE PLpgSQL;

-- object .'|'.1
CREATE OR REPLACE FUNCTION _jm_obj_4(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 2 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 't' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 't';
  -- .'|'.1.t
  res := JSONB_TYPEOF(pval) = 'boolean' AND (pval)::BOOL = TRUE;
  IF NOT res THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'v' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'v';
  -- .'|'.1.v
  RETURN JSONB_TYPEOF(pval) = 'boolean';
END;
$$ LANGUAGE PLpgSQL;

-- object .'|'.0
CREATE OR REPLACE FUNCTION _jm_obj_5(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pval JSONB;
  res bool;
BEGIN
  -- check close must only props
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  IF jm_object_size(val) <> 2 THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 't' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 't';
  -- .'|'.0.t
  res := JSONB_TYPEOF(pval) = 'null';
  IF NOT res THEN
    RETURN FALSE;
  END IF;
  IF NOT val ? 'v' THEN
    RETURN FALSE;
  END IF;
  pval := val -> 'v';
  -- .'|'.0.v
  RETURN JSONB_TYPEOF(pval) = 'null';
END;
$$ LANGUAGE PLpgSQL;

-- check $ (.)
CREATE OR REPLACE FUNCTION json_model_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- multi-type discriminator
  -- .
  -- .'|'.0
  -- .'|'.1
  -- .'|'.2
  -- .'|'.3
  -- .'|'.4
  -- .'|'.5
  RETURN JSONB_TYPEOF(val) = 'object' AND (_jm_obj_5(val, path, rep) OR _jm_obj_4(val, path, rep) OR _jm_obj_3(val, path, rep) OR _jm_obj_2(val, path, rep) OR _jm_obj_1(val, path, rep) OR _jm_obj_0(val, path, rep));
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION check_model_map(name TEXT)
RETURNS TEXT STRICT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  map JSONB := JSONB '{"":"json_model_1"}';
BEGIN
  RETURN map->>name;
END;
$$ LANGUAGE plpgsql;

--
-- constant maps initialization
--
TRUNCATE jm_constant_maps;

--
-- JSON Model checking entry point
--
-- TODO INOUT rep?
CREATE OR REPLACE FUNCTION check_model(val JSONB, name TEXT, rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  fun TEXT;
BEGIN
  fun := check_model_map(name);
  IF fun IS NULL THEN
    RAISE EXCEPTION 'model for % not found', name;
  END IF;
  RETURN jm_call(fun, val, NULL, rep);
END;
$$ LANGUAGE plpgsql;
