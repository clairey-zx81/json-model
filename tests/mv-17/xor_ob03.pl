#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2.0b1
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JsonModel;
use constant JMC_VERSION => '2';


my %_jm_map_0;
my %check_model_map;

# object .movie.'|'.0
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 't')
        {
            # handle must t property
            $must_count++;
            # .movie.'|'.0.t
            $res = jm_is_string($pval) && $pval eq 'fr';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'titre')
        {
            # handle must titre property
            $must_count++;
            # .movie.'|'.0.titre
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# object .movie.'|'.1
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 't')
        {
            # handle must t property
            $must_count++;
            # .movie.'|'.1.t
            $res = jm_is_string($pval) && $pval eq 'en';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'title')
        {
            # handle must title property
            $must_count++;
            # .movie.'|'.1.title
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}

# object .movie.'|'.2
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 't')
        {
            # handle must t property
            $must_count++;
            # .movie.'|'.2.t
            $res = jm_is_string($pval) && $pval eq 'ru';
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'suti')
        {
            # handle must suti property
            $must_count++;
            # .movie.'|'.2.suti
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 2)
    {
        return 0;
    }
    return 1;
}


# object .
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'movie')
        {
            # handle must movie property
            $must_count++;
            # .movie
            $res = jm_is_object($pval);
            if ($res)
            {
                if (exists $$pval{'t'})
                {
                    my $tag_0 = $$pval{'t'};
                    my $fun_0 = $_jm_map_0{$tag_0};
                    if (defined($fun_0))
                    {
                        $res = &$fun_0($pval, undef, $rep);
                    }
                    else
                    {
                        $res = 0;
                    }
                }
                else
                {
                    $res = 0;
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # exemple d'un rapport
    # .
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_map_0 = (
            'fr' => \&_jm_obj_1,
            'en' => \&_jm_obj_2,
            'ru' => \&_jm_obj_3,
        );
        %check_model_map = (
            '' => \&json_model_1,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_map_0 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
