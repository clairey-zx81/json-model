#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# object $.'$B'.'|'.1
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$B'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "b":
            # handle must b property
            must_count += 1
            # $.'$B'.'|'.1.b
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [$.'$B'.'|'.1.b]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$B'.'|'.1.b]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$B'.'|'.1]", lpath_0 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$B'.'|'.1]", path))
        return False
    return True

# object $.'$B'.'|'.0
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$B'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "a":
            # handle must a property
            must_count += 1
            # $.'$B'.'|'.0.a
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [$.'$B'.'|'.0.a]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$B'.'|'.0.a]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$B'.'|'.0]", lpath_1 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$B'.'|'.0]", path))
        return False
    return True

# check $B ($.'$B')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$B'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'$B'.'|']", path))
    if res:
        # $.'$B'.'|'.0
        res = _jm_obj_1(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$B'.'|'.0]", path))
        if not res:
            # $.'$B'.'|'.1
            res = _jm_obj_0(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'$B'.'|'.1]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'$B'.'|']", path))
    return res

# object $.'$C'.'|'.1
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$C'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "c":
            # handle must c property
            must_count += 1
            # $.'$C'.'|'.1.c
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [$.'$C'.'|'.1.c]", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$C'.'|'.1.c]", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$C'.'|'.1]", lpath_2 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$C'.'|'.1]", path))
        return False
    return True

# object $.'$C'.'|'.0
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$C'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "a":
            # handle must a property
            must_count += 1
            # $.'$C'.'|'.0.a
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [$.'$C'.'|'.0.a]", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'$C'.'|'.0.a]", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$C'.'|'.0]", lpath_3 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$C'.'|'.0]", path))
        return False
    return True

# check $C ($.'$C')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$C'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'$C'.'|']", path))
    if res:
        # $.'$C'.'|'.0
        res = _jm_obj_3(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$C'.'|'.0]", path))
        if not res:
            # $.'$C'.'|'.1
            res = _jm_obj_2(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'$C'.'|'.1]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'$C'.'|']", path))
    return res

# object $.'|'.3
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "b":
            # handle must b property
            must_count += 1
            # $.'|'.3.b
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [$.'|'.3.b]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'|'.3.b]", lpath_4 if path is not None else None))
                return False
        elif prop == "c":
            # handle must c property
            must_count += 1
            # $.'|'.3.c
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [$.'|'.3.c]", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'|'.3.c]", lpath_4 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.3]", lpath_4 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'|'.3]", path))
        return False
    return True

# object $.'|'.2
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "b":
            # handle must b property
            must_count += 1
            # $.'|'.2.b
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [$.'|'.2.b]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'|'.2.b]", lpath_5 if path is not None else None))
                return False
        elif prop == "a":
            # handle must a property
            must_count += 1
            # $.'|'.2.a
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [$.'|'.2.a]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'|'.2.a]", lpath_5 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.2]", lpath_5 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'|'.2]", path))
        return False
    return True

# object $.'|'.1
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "a":
            # handle must a property
            must_count += 1
            # $.'|'.1.a
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [$.'|'.1.a]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'|'.1.a]", lpath_6 if path is not None else None))
                return False
        elif prop == "c":
            # handle must c property
            must_count += 1
            # $.'|'.1.c
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [$.'|'.1.c]", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'|'.1.c]", lpath_6 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.1]", lpath_6 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.'|'.1]", path))
        return False
    return True

# object $.'|'.0
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        if prop == "a":
            # handle must a property
            must_count += 1
            # $.'|'.0.a
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [$.'|'.0.a]", lpath_7 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid must property value [$.'|'.0.a]", lpath_7 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'|'.0]", lpath_7 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'|'.0]", path))
        return False
    return True

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'|']", path))
    if res:
        # $.'|'.0
        res = _jm_obj_7(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'|'.0]", path))
        if not res:
            # $.'|'.1
            res = _jm_obj_6(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'|'.1]", path))
            if not res:
                # $.'|'.2
                res = _jm_obj_5(val, path, rep)
                if not res:
                    rep is None or rep.append(("not an expected object at [$.'|'.2]", path))
                if not res:
                    # $.'|'.3
                    res = _jm_obj_4(val, path, rep)
                    if not res:
                        rep is None or rep.append(("not an expected object at [$.'|'.3]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "B": json_model_2,
            "C": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
