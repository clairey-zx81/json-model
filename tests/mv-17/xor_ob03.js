#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

let _jm_map_0 = new Map()
var check_model_map = new Map()

// object .movie.'|'.0
function _jm_obj_1(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.movie.'|'.0]", path])
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_1 = path ? path.concat([prop]) : null;
        if (prop == "t")
        {
            // handle must t property
            must_count += 1;
            // .movie.'|'.0.t
            res = ((typeof pval === 'string' || pval instanceof String)) && pval == "fr";
            if (! res)
            {
                rep !== null && rep.push(["unexpected fr [.movie.'|'.0.t]", (path ? lpath_1 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid mandatory prop value [.movie.'|'.0.t]", (path ? lpath_1 : null)])
                return false;
            }
        }
        else if (prop == "titre")
        {
            // handle must titre property
            must_count += 1;
            // .movie.'|'.0.titre
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.movie.'|'.0.titre]", (path ? lpath_1 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid mandatory prop value [.movie.'|'.0.titre]", (path ? lpath_1 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.movie.'|'.0]", (path ? lpath_1 : null)])
            return false;
        }
    }
    if (must_count != 2)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("t"))
            {
                rep !== null && rep.push(["missing mandatory prop <t> [.movie.'|'.0]", path])
            }
            if (! val.hasOwnProperty("titre"))
            {
                rep !== null && rep.push(["missing mandatory prop <titre> [.movie.'|'.0]", path])
            }
        }
        return false;
    }
    return true;
}

// object .movie.'|'.1
function _jm_obj_2(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.movie.'|'.1]", path])
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_2 = path ? path.concat([prop]) : null;
        if (prop == "t")
        {
            // handle must t property
            must_count += 1;
            // .movie.'|'.1.t
            res = ((typeof pval === 'string' || pval instanceof String)) && pval == "en";
            if (! res)
            {
                rep !== null && rep.push(["unexpected en [.movie.'|'.1.t]", (path ? lpath_2 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid mandatory prop value [.movie.'|'.1.t]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "title")
        {
            // handle must title property
            must_count += 1;
            // .movie.'|'.1.title
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.movie.'|'.1.title]", (path ? lpath_2 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid mandatory prop value [.movie.'|'.1.title]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.movie.'|'.1]", (path ? lpath_2 : null)])
            return false;
        }
    }
    if (must_count != 2)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("t"))
            {
                rep !== null && rep.push(["missing mandatory prop <t> [.movie.'|'.1]", path])
            }
            if (! val.hasOwnProperty("title"))
            {
                rep !== null && rep.push(["missing mandatory prop <title> [.movie.'|'.1]", path])
            }
        }
        return false;
    }
    return true;
}

// object .movie.'|'.2
function _jm_obj_3(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.movie.'|'.2]", path])
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_3 = path ? path.concat([prop]) : null;
        if (prop == "t")
        {
            // handle must t property
            must_count += 1;
            // .movie.'|'.2.t
            res = ((typeof pval === 'string' || pval instanceof String)) && pval == "ru";
            if (! res)
            {
                rep !== null && rep.push(["unexpected ru [.movie.'|'.2.t]", (path ? lpath_3 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid mandatory prop value [.movie.'|'.2.t]", (path ? lpath_3 : null)])
                return false;
            }
        }
        else if (prop == "suti")
        {
            // handle must suti property
            must_count += 1;
            // .movie.'|'.2.suti
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.movie.'|'.2.suti]", (path ? lpath_3 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid mandatory prop value [.movie.'|'.2.suti]", (path ? lpath_3 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.movie.'|'.2]", (path ? lpath_3 : null)])
            return false;
        }
    }
    if (must_count != 2)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("suti"))
            {
                rep !== null && rep.push(["missing mandatory prop <suti> [.movie.'|'.2]", path])
            }
            if (! val.hasOwnProperty("t"))
            {
                rep !== null && rep.push(["missing mandatory prop <t> [.movie.'|'.2]", path])
            }
        }
        return false;
    }
    return true;
}


// object .
function _jm_obj_0(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.]", path])
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_0 = path ? path.concat([prop]) : null;
        if (prop == "movie")
        {
            // handle must movie property
            must_count += 1;
            // .movie
            res = Object.prototype.toString.call(pval) === '[object Object]';
            if (res)
            {
                if (pval.hasOwnProperty("t"))
                {
                    let tag_0 = pval["t"];
                    let fun_0 = _jm_map_0.get(tag_0);
                    if (fun_0 !== undefined)
                    {
                        res = fun_0(pval, (path ? lpath_0 : null), rep);
                    }
                    else
                    {
                        res = false;
                        rep !== null && rep.push(["tag <t> value not found [.movie.'|']", (path ? lpath_0 : null)])
                    }
                }
                else
                {
                    res = false;
                    rep !== null && rep.push(["tag prop <t> is missing [.movie.'|']", (path ? lpath_0 : null)])
                }
            }
            else
            {
                rep !== null && rep.push(["value is not an object [.movie.'|']", (path ? lpath_0 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid mandatory prop value [.movie]", (path ? lpath_0 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.]", (path ? lpath_0 : null)])
            return false;
        }
    }
    if (must_count != 1)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("movie"))
            {
                rep !== null && rep.push(["missing mandatory prop <movie> [.]", path])
            }
        }
        return false;
    }
    return true;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // exemple d'un rapport
    // .
    res = _jm_obj_0(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected element [.]", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        _jm_map_0.set("fr", _jm_obj_1)
        _jm_map_0.set("en", _jm_obj_2)
        _jm_map_0.set("ru", _jm_obj_3)
        check_model_map.set("", json_model_1)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
