#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_map_0: dict[str, str]
check_model_map: PropMap

# object .movie.'|'.0
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.movie.'|'.0]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.movie.'|'.0]", path))
        return False
    pval: Jsonable
    res: bool
    if not "t" in val:
        rep is None or rep.append(("missing mandatory prop <t> [.movie.'|'.0]", path))
        return False
    pval = val.get("t", UNDEFINED)
    # .movie.'|'.0.t
    res = isinstance(pval, str) and pval == "fr"
    if not res:
        rep is None or rep.append(("unexpected fr [.movie.'|'.0.t]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.movie.'|'.0]", path))
        return False
    if not "titre" in val:
        rep is None or rep.append(("missing mandatory prop <titre> [.movie.'|'.0]", path))
        return False
    pval = val.get("titre", UNDEFINED)
    # .movie.'|'.0.titre
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.movie.'|'.0.titre]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <titre> [.movie.'|'.0]", path))
        return False
    return True

# object .movie.'|'.1
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.movie.'|'.1]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.movie.'|'.1]", path))
        return False
    pval: Jsonable
    res: bool
    if not "t" in val:
        rep is None or rep.append(("missing mandatory prop <t> [.movie.'|'.1]", path))
        return False
    pval = val.get("t", UNDEFINED)
    # .movie.'|'.1.t
    res = isinstance(pval, str) and pval == "en"
    if not res:
        rep is None or rep.append(("unexpected en [.movie.'|'.1.t]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.movie.'|'.1]", path))
        return False
    if not "title" in val:
        rep is None or rep.append(("missing mandatory prop <title> [.movie.'|'.1]", path))
        return False
    pval = val.get("title", UNDEFINED)
    # .movie.'|'.1.title
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.movie.'|'.1.title]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <title> [.movie.'|'.1]", path))
        return False
    return True

# object .movie.'|'.2
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.movie.'|'.2]", path))
        return False
    if len(val) != 2:
        rep is None or rep.append(("bad property count [.movie.'|'.2]", path))
        return False
    pval: Jsonable
    res: bool
    if not "t" in val:
        rep is None or rep.append(("missing mandatory prop <t> [.movie.'|'.2]", path))
        return False
    pval = val.get("t", UNDEFINED)
    # .movie.'|'.2.t
    res = isinstance(pval, str) and pval == "ru"
    if not res:
        rep is None or rep.append(("unexpected ru [.movie.'|'.2.t]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.movie.'|'.2]", path))
        return False
    if not "suti" in val:
        rep is None or rep.append(("missing mandatory prop <suti> [.movie.'|'.2]", path))
        return False
    pval = val.get("suti", UNDEFINED)
    # .movie.'|'.2.suti
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.movie.'|'.2.suti]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <suti> [.movie.'|'.2]", path))
        return False
    return True


# object .
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.]", path))
        return False
    pval: Jsonable
    res: bool
    if not "movie" in val:
        rep is None or rep.append(("missing mandatory prop <movie> [.]", path))
        return False
    pval = val.get("movie", UNDEFINED)
    # .movie
    iso_0: bool = isinstance(pval, dict)
    res = iso_0
    if res:
        if "t" in pval:
            tag_0: Jsonable = pval.get("t", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(pval, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <t> value not found [.movie.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <t> is missing [.movie.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.movie.'|']", path))
    if not res:
        rep is None or rep.append(("unexpected value for mandatory prop <movie> [.]", path))
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # exemple d'un rapport
    # .
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_map_0
        _jm_map_0 = {
            "fr": _jm_obj_1,
            "en": _jm_obj_2,
            "ru": _jm_obj_3,
        }
        global check_model_map
        check_model_map = {
            "": _jm_obj_0,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
