#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_map_0: ConstMap = ConstMap()
check_model_map: PropMap

# object .'$Aa'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Aa']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'$Aa'.t
            res = isinstance(pval, bool) and pval == True
            if not res:
                rep is None or rep.append(("unexpected =true [.'$Aa'.t]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Aa'.t]", lpath_0 if path is not None else None))
                return False
        elif prop == "a":
            # handle must a property
            must_count += 1
            # .'$Aa'.a
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.'$Aa'.a]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Aa'.a]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Aa']", lpath_0 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "a" in val:
                rep is None or rep.append(("missing mandatory prop <a> [.'$Aa']", path))
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'$Aa']", path))
        return False
    return True

# check $Aa (.'$Aa')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Aa'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Aa']", path))
    return res

# object .'$Bb'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Bb']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'$Bb'.t
            res = isinstance(pval, bool) and pval == False
            if not res:
                rep is None or rep.append(("unexpected =false [.'$Bb'.t]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Bb'.t]", lpath_1 if path is not None else None))
                return False
        elif prop == "b":
            # handle must b property
            must_count += 1
            # .'$Bb'.b
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.'$Bb'.b]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Bb'.b]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Bb']", lpath_1 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "b" in val:
                rep is None or rep.append(("missing mandatory prop <b> [.'$Bb']", path))
            if not "t" in val:
                rep is None or rep.append(("missing mandatory prop <t> [.'$Bb']", path))
        return False
    return True

# check $Bb (.'$Bb')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Bb'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Bb']", path))
    return res


# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    iso_0: bool = isinstance(val, dict)
    res = iso_0
    if res:
        if "t" in val:
            tag_0: Jsonable = val.get("t", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <t> value not found [.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <t> is missing [.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_map_0
        _jm_map_0[True] = json_model_2
        _jm_map_0[False] = json_model_3
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "Aa": _jm_obj_0,
            "Bb": _jm_obj_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
