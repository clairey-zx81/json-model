#! /bin/env node
//
// Generated by JSON Model Compiler version 2.0a0
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2.0a0";

let _jm_map_0 = new Map()
var check_model_map = new Map()

// object .'|'.0
function _jm_obj_0(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'|'.0]", path])
        return false;
    }
    let res;
    let must_count = 0;
    for(const [prop, pval] of Object.entries(val))
    {
        let lpath_0 = path ? path.concat([prop]) : null;
        if (prop == "t")
        {
            // handle must t property
            must_count += 1;
            // .'|'.0.t
            res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval == 1;
            if (! res)
            {
                rep !== null && rep.push(["unexpected =1 [.'|'.0.t]", (path ? lpath_0 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid mandatory prop value [.'|'.0.t]", (path ? lpath_0 : null)])
                return false;
            }
        }
        else if (prop == "a")
        {
            // handle must a property
            must_count += 1;
            // .'|'.0.a
            res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
            if (! res)
            {
                rep !== null && rep.push(["not a 0 strict int [.'|'.0.a]", (path ? lpath_0 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid mandatory prop value [.'|'.0.a]", (path ? lpath_0 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.'|'.0]", (path ? lpath_0 : null)])
            return false;
        }
    }
    if (must_count != 2)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("a"))
            {
                rep !== null && rep.push(["missing mandatory prop <a> [.'|'.0]", path])
            }
            if (! val.hasOwnProperty("t"))
            {
                rep !== null && rep.push(["missing mandatory prop <t> [.'|'.0]", path])
            }
        }
        return false;
    }
    return true;
}

// object .'|'.1
function _jm_obj_1(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'|'.1]", path])
        return false;
    }
    let res;
    let must_count = 0;
    for(const [prop, pval] of Object.entries(val))
    {
        let lpath_1 = path ? path.concat([prop]) : null;
        if (prop == "t")
        {
            // handle must t property
            must_count += 1;
            // .'|'.1.t
            res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval == 2;
            if (! res)
            {
                rep !== null && rep.push(["unexpected =2 [.'|'.1.t]", (path ? lpath_1 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid mandatory prop value [.'|'.1.t]", (path ? lpath_1 : null)])
                return false;
            }
        }
        else if (prop == "b")
        {
            // handle must b property
            must_count += 1;
            // .'|'.1.b
            res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
            if (! res)
            {
                rep !== null && rep.push(["not a 0 strict int [.'|'.1.b]", (path ? lpath_1 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid mandatory prop value [.'|'.1.b]", (path ? lpath_1 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.'|'.1]", (path ? lpath_1 : null)])
            return false;
        }
    }
    if (must_count != 2)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("b"))
            {
                rep !== null && rep.push(["missing mandatory prop <b> [.'|'.1]", path])
            }
            if (! val.hasOwnProperty("t"))
            {
                rep !== null && rep.push(["missing mandatory prop <t> [.'|'.1]", path])
            }
        }
        return false;
    }
    return true;
}


// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = Object.prototype.toString.call(val) === '[object Object]';
    if (res)
    {
        let tag_0 = val["t"];
        if (tag_0 !== undefined)
        {
            let fun_0 = _jm_map_0.get(tag_0);
            if (fun_0 !== undefined)
            {
                res = fun_0(val, path, rep);
            }
            else
            {
                res = false;
                rep !== null && rep.push(["tag <t> value not found [.'|']", path])
            }
        }
        else
        {
            res = false;
            rep !== null && rep.push(["tag prop <t> is missing [.'|']", path])
        }
    }
    else
    {
        rep !== null && rep.push(["value is not an object [.'|']", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        _jm_map_0.set(1, _jm_obj_0)
        _jm_map_0.set(2, _jm_obj_1)
        check_model_map.set("", json_model_1)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
