#! /bin/env node
//
// Generated by JSON Model Compiler version 2.0a0
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2.0a0";

let _jm_cst_0 = new Set()
const _jm_re_0_re = new RegExp("^[0-9]+$", "")
var check_model_map = new Map()

// check $XXX (.'$XXX')
function json_model_2(val, path, rep)
{
    let res;
    // .'$XXX'
    res = ((val === null || (typeof val === 'number' || val instanceof Number) || (typeof val === 'boolean' || val instanceof Boolean) || (typeof val === 'string' || val instanceof String))) && _jm_cst_0.has(val);
    if (! res)
    {
        rep !== null && rep.push(["value not in enum [.'$XXX'.'|']", path])
    }
    return res;
}

const _jm_re_0 = (s) => _jm_re_0_re.exec(s) !== null

// object .
function _jm_obj_0(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.]", path])
        return false;
    }
    let res;
    let must_count = 0;
    for(const [prop, pval] of Object.entries(val))
    {
        let lpath_0 = path ? path.concat([prop]) : null;
        if (prop == "foo")
        {
            // handle must foo property
            must_count += 1;
            // .foo
            res = runtime.jm_is_valid_date(pval);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $DATE [.foo]", (path ? lpath_0 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid mandatory prop value [.foo]", (path ? lpath_0 : null)])
                return false;
            }
        }
        else if (prop == "bla")
        {
            // handle may bla property
            // .bla
            res = (typeof pval === 'boolean' || pval instanceof Boolean);
            if (! res)
            {
                rep !== null && rep.push(["not a bool [.bla]", (path ? lpath_0 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid optional prop value [.bla]", (path ? lpath_0 : null)])
                return false;
            }
        }
        else if (json_model_2(prop, (path ? lpath_0 : null), rep))
        {
            // handle 1 key props
            // .'$XXX'
            res = ((typeof pval === 'number' || pval instanceof Number)) && pval >= 0.0;
            if (! res)
            {
                rep !== null && rep.push(["not a 0.0 strict float [.'$XXX']", (path ? lpath_0 : null)])
            }
            if (! res)
            {
                return false;
            }
        }
        else if (_jm_re_0(prop, path, rep))
        {
            // handle 1 re props
            // .'/^[0-9]+$/'
            res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
            if (! res)
            {
                rep !== null && rep.push(["not a 0 strict int [.'/^[0-9]+$/']", (path ? lpath_0 : null)])
            }
            if (! res)
            {
                return false;
            }
        }
        else
        {
            // handle other props
            // .''
            res = pval === null;
            if (! res)
            {
                rep !== null && rep.push(["not null [.'']", (path ? lpath_0 : null)])
            }
            if (! res)
            {
                return false;
            }
        }
    }
    if (must_count != 1)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("foo"))
            {
                rep !== null && rep.push(["missing mandatory prop <foo> [.'']", path])
            }
        }
        return false;
    }
    return true;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = _jm_obj_0(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["not an expected object [.]", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        _jm_cst_0.add("X")
        _jm_cst_0.add("XX")
        _jm_cst_0.add("XXX")
        check_model_map.set("", json_model_1)
        check_model_map.set("XXX", json_model_2)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
