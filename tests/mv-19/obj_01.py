#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0b0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0b0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
_jm_re_0_reco: object
_jm_re_0: RegexFun
check_model_map: PropMap

# check $XXX (.'$XXX')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$XXX'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$XXX'.'|']", path))
    return res


# object .
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "foo":
            # handle must foo property
            must_count += 1
            # .foo
            res = is_valid_date(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $DATE [.foo]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.foo]", lpath_0 if path is not None else None))
                return False
        elif prop == "bla":
            # handle may bla property
            # .bla
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.bla]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.bla]", lpath_0 if path is not None else None))
                return False
        elif json_model_2(prop, lpath_0 if path is not None else None, rep):
            # handle 1 key props
            # .'$XXX'
            res = isinstance(pval, float) and pval >= 0.0
            if not res:
                rep is None or rep.append(("not a 0.0 strict float [.'$XXX']", lpath_0 if path is not None else None))
            if not res:
                return False
        elif _jm_re_0(prop, path, rep):
            # handle 1 re props
            # .'/^[0-9]+$/'
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.'/^[0-9]+$/']", lpath_0 if path is not None else None))
            if not res:
                return False
        else:
            # handle other props
            # .''
            res = pval is None
            if not res:
                rep is None or rep.append(("not null [.'']", lpath_0 if path is not None else None))
            if not res:
                return False
    if must_count != 1:
        if rep is not None:
            if not "foo" in val:
                rep is None or rep.append(("missing mandatory prop <foo> [.'']", path))
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'X', 'XX', 'XXX'}
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile("^[0-9]+$")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "XXX": json_model_2,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
