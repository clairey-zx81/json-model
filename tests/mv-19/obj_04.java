//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//
import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class obj_04 extends ModelChecker
{
    static public final String VERSION = "2.0b1";

    Set<Object> _jm_cst_0_set;
    public Map<String, Checker> obj_04_map_pmap;

    // check $XXX (.'$XXX')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$XXX'
        res = json.isScalar(val) && _jm_cst_0_set.contains(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("value not in enum [.'$XXX'.'|']", path);
        }
        return res;
    }
    
    // object .
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (json_model_2(json.strToJSON(prop), (path != null ? lpath_0 : null), rep))
            {
                // handle 1 key props
                // .'$XXX'
                res = json.isDouble(pval) && json.asDouble(pval) >= 0.0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0.0 strict float [.'$XXX']", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.]", (path != null ? lpath_0 : null));
                return false;
            }
        }
        return true;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // prop ref to enum
        // .
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.]", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_cst_0_set = new HashSet<Object>();
            _jm_cst_0_set.add(json.safeJSON("\"X\""));
            _jm_cst_0_set.add(json.safeJSON("\"XX\""));
            _jm_cst_0_set.add(json.safeJSON("\"XXX\""));
            obj_04_map_pmap = new HashMap<String, Checker>();
            obj_04_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            obj_04_map_pmap.put("XXX", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_cst_0_set = null;
            obj_04_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return obj_04_map_pmap.get(name);
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new obj_04();
        Main.main("obj_04", checker, VERSION, args);
    }
}
