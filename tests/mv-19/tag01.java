//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class tag01 extends ModelChecker
{
    static public final String VERSION = "2";

    Map<Object, Checker> _jm_map_0_cmap;
    public Map<String, Checker> tag01_map_pmap;

    // object .'$Aa'
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Aa']", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'$Aa']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "t"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'$Aa']", path);
            return false;
        }
        pval = json.objectValue(val, "t");
        // .'$Aa'.t
        res = json.isBoolean(pval) && json.asBoolean(pval) == true;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =true [.'$Aa'.t]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'$Aa']", path);
            return false;
        }
        if (! json.objectHasProp(val, "a"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.'$Aa']", path);
            return false;
        }
        pval = json.objectValue(val, "a");
        // .'$Aa'.a
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$Aa'.a]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.'$Aa']", path);
            return false;
        }
        return true;
    }

    // check $Aa (.'$Aa')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Aa'
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$Aa']", path);
        }
        return res;
    }

    // object .'$Bb'
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Bb']", path);
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            if (rep != null) rep.addEntry("bad property count [.'$Bb']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "t"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <t> [.'$Bb']", path);
            return false;
        }
        pval = json.objectValue(val, "t");
        // .'$Bb'.t
        res = json.isBoolean(pval) && json.asBoolean(pval) == false;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected =false [.'$Bb'.t]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <t> [.'$Bb']", path);
            return false;
        }
        if (! json.objectHasProp(val, "b"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <b> [.'$Bb']", path);
            return false;
        }
        pval = json.objectValue(val, "b");
        // .'$Bb'.b
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$Bb'.b]", path);
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <b> [.'$Bb']", path);
            return false;
        }
        return true;
    }

    // check $Bb (.'$Bb')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Bb'
        res = _jm_obj_1(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$Bb']", path);
        }
        return res;
    }


    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        boolean iso_0 = json.isObject(val);
        res = iso_0;
        if (res)
        {
            if (json.objectHasProp(val, "t"))
            {
                Object tag_0 = json.objectValue(val, "t");
                Checker fun_0 = _jm_map_0_cmap.get(tag_0);
                if (fun_0 != null)
                {
                    res = fun_0.call(val, path, rep);
                }
                else
                {
                    res = false;
                    if (rep != null) rep.addEntry("tag <t> value not found [.'|']", path);
                }
            }
            else
            {
                res = false;
                if (rep != null) rep.addEntry("tag prop <t> is missing [.'|']", path);
            }
        }
        else
        {
            if (rep != null) rep.addEntry("value is not an object [.'|']", path);
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_map_0_cmap = new HashMap<Object, Checker>();
            _jm_map_0_cmap.put(json.safeJSON("true"), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_0(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("false"), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_1(o, p, r);} });
            tag01_map_pmap = new HashMap<String, Checker>();
            tag01_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            tag01_map_pmap.put("Aa", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_0(o, p, r);} });
            tag01_map_pmap.put("Bb", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_1(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_map_0_cmap = null;
            tag01_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return tag01_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return tag01_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new tag01();
        Main.main("tag01", checker, VERSION, args);
    }
}
