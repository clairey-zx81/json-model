#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


my %_jm_cst_0;
sub json_model_2($$$);
sub json_model_1($$$);
my %check_model_map;


# check $Xxx (.'$Xxx')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Xxx'
    return jm_is_string($val) && exists $_jm_cst_0{$val};
}

sub _jm_re_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[0-9]+$/;
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    # object with must/may/regex/ref/others
    # .
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq 'foo')
        {
            # handle must foo property
            $must_count++;
            # .foo
            $res = jm_is_string($pval) && jm_is_valid_date($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq 'bla')
        {
            # handle may bla property
            # .bla
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_2($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Xxx'
            $res = jm_is_numeric($pval) && $pval >= 0.0;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_0($prop, $path, $rep))
        {
            # handle 1 re props
            # .'/^[0-9]+$/'
            $res = jm_is_integer($pval) && $pval >= 0;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            # handle other props
            # .''
            $res = !defined($pval);
            if (! $res)
            {
                return 0;
            }
        }
    }
    return $must_count == 1;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            'X' => 1,
            'XX' => 1,
            'XXX' => 1,
        );
        %check_model_map = (
            '' => \&json_model_1,
            'Xxx' => \&json_model_2,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
