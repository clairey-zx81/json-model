#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $N ($.'$N')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$N'
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.'$N']", path))
    return res

# check $B ($.'$B')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$B'
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$B']", path))
    return res

# check $I ($.'$I')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$I'
    res = isinstance(val, int) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1 strict int [$.'$I']", path))
    return res

# check $F ($.'$F')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$F'
    res = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [$.'$F']", path))
    return res

# check $S ($.'$S')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$S'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$S']", path))
    return res

# check $A ($.'$A')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$A'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # $.'$A'.0
            res = json_model_9(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Any [$.'$A'.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$A']", path))
    return res

# object $.'$O'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$O']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$O'.''
        res = json_model_9(pval, lpath_0 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Any [$.'$O'.'']", lpath_0 if path is not None else None))
        if not res:
            return False
    return True

# check $O ($.'$O')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$O'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$O']", path))
    return res

# check $Any ($.'$Any')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Any'
    # $.'$Any'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.'$Any'.'|'.0]", path))
    if not res:
        # $.'$Any'.'|'.1
        res = json_model_3(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $B [$.'$Any'.'|'.1]", path))
        if not res:
            # $.'$Any'.'|'.2
            res = json_model_4(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $I [$.'$Any'.'|'.2]", path))
            if not res:
                # $.'$Any'.'|'.3
                res = json_model_5(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected $F [$.'$Any'.'|'.3]", path))
                if not res:
                    # $.'$Any'.'|'.4
                    res = json_model_6(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $S [$.'$Any'.'|'.4]", path))
                    if not res:
                        # $.'$Any'.'|'.5
                        res = json_model_7(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $A [$.'$Any'.'|'.5]", path))
                        if not res:
                            # $.'$Any'.'|'.6
                            res = json_model_8(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected $O [$.'$Any'.'|'.6]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Any'.'|']", path))
    return res

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Any [$]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "N": json_model_2,
            "B": json_model_3,
            "I": json_model_4,
            "F": json_model_5,
            "S": json_model_6,
            "A": json_model_7,
            "O": json_model_8,
            "Any": json_model_9,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
