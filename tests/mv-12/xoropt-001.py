#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $Nn (.'$Nn')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Nn'
    res: bool = val is None
    if not res:
        rep is None or rep.append(("not null [.'$Nn']", path))
    return res

# check $Bb (.'$Bb')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Bb'
    res: bool = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'$Bb']", path))
    return res

# check $Ii (.'$Ii')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Ii'
    res: bool = isinstance(val, int) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1 strict int [.'$Ii']", path))
    return res

# check $Ff (.'$Ff')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Ff'
    res: bool = isinstance(val, float)
    if not res:
        rep is None or rep.append(("not a -1.0 strict float [.'$Ff']", path))
    return res

# check $Ss (.'$Ss')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Ss'
    res: bool = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Ss']", path))
    return res

# check $Aa (.'$Aa')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Aa'
    res: bool = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$Aa'.0
            res = json_model_9(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Any [.'$Aa'.0]", arr_0_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Aa']", path))
    return res

# check $Oo (.'$Oo')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Oo'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Oo']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Oo'.''
        res = json_model_9(pval, lpath_0 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Any [.'$Oo'.'']", lpath_0 if path is not None else None))
            return False
    return True

# check $Any (.'$Any')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Any'
    # .'$Any'.'|'.0
    res: bool = val is None
    if not res:
        rep is None or rep.append(("not null [.'$Any'.'|'.0]", path))
    if not res:
        # .'$Any'.'|'.1
        res = json_model_3(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Bb [.'$Any'.'|'.1]", path))
        if not res:
            # .'$Any'.'|'.2
            res = json_model_4(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ii [.'$Any'.'|'.2]", path))
            if not res:
                # .'$Any'.'|'.3
                res = json_model_5(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Ff [.'$Any'.'|'.3]", path))
                if not res:
                    # .'$Any'.'|'.4
                    res = json_model_6(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Ss [.'$Any'.'|'.4]", path))
                    if not res:
                        # .'$Any'.'|'.5
                        res = json_model_7(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Aa [.'$Any'.'|'.5]", path))
                        if not res:
                            # .'$Any'.'|'.6
                            res = json_model_8(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected $Oo [.'$Any'.'|'.6]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Any'.'|']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .
    res: bool = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Any [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_9,
            "Nn": json_model_2,
            "Bb": json_model_3,
            "Ii": json_model_4,
            "Ff": json_model_5,
            "Ss": json_model_6,
            "Aa": json_model_7,
            "Oo": json_model_8,
            "Any": json_model_9,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
