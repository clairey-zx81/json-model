#! /bin/env node
//
// Generated by JSON Model Compiler version 2.0a0
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2.0a0";

const _jm_re_0_re = new RegExp("a", "")
var check_model_map = new Map()

const _jm_re_0 = (s) => _jm_re_0_re.exec(s) !== null

// object .'^'.0
function _jm_obj_0(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'^'.0]", path])
        return false;
    }
    let res;
    for(const [prop, pval] of Object.entries(val))
    {
        let lpath_0 = path ? path.concat([prop]) : null;
        if (_jm_re_0(prop))
        {
            // handle 1 re props
            // .'^'.0.'/a/'
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'^'.0.'/a/']", (path ? lpath_0 : null)])
            }
            if (! res)
            {
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.'^'.0]", (path ? lpath_0 : null)])
            return false;
        }
    }
    return true;
}

// object .'^'.1
function _jm_obj_1(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'^'.1]", path])
        return false;
    }
    let res;
    for(const [prop, pval] of Object.entries(val))
    {
        let lpath_1 = path ? path.concat([prop]) : null;
        if (prop == "a")
        {
            // handle may a property
            // .'^'.1.a
            res = pval === null;
            if (! res)
            {
                rep !== null && rep.push(["not null [.'^'.1.a]", (path ? lpath_1 : null)])
            }
            if (! res)
            {
                rep !== null && rep.push(["invalid optional prop value [.'^'.1.a]", (path ? lpath_1 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.'^'.1]", (path ? lpath_1 : null)])
            return false;
        }
    }
    return true;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    // generic xor list
    let xc_0 = 0;
    let xr_0;
    // .'^'.0
    xr_0 = _jm_obj_0(val, path, rep);
    if (! xr_0)
    {
        rep !== null && rep.push(["not an expected object [.'^'.0]", path])
    }
    if (xr_0)
    {
        xc_0 += 1;
    }
    // .'^'.1
    xr_0 = _jm_obj_1(val, path, rep);
    if (! xr_0)
    {
        rep !== null && rep.push(["not an expected object [.'^'.1]", path])
    }
    if (xr_0)
    {
        xc_0 += 1;
    }
    res = xc_0 == 1;
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["not one model match [.'^']", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        check_model_map.set("", json_model_1)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
