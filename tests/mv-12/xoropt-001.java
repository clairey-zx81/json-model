//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class xoropt_001 extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> xoropt_001_map_pmap;

    // check $N (.'$N')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$N'
        res = json.isNull(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not null [.'$N']", path);
        }
        return res;
    }
    
    // check $B (.'$B')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$B'
        res = json.isBoolean(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not a bool [.'$B']", path);
        }
        return res;
    }
    
    // check $I (.'$I')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$I'
        res = json.isInteger(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not a -1 strict int [.'$I']", path);
        }
        return res;
    }
    
    // check $F (.'$F')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$F'
        res = json.isDouble(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not a -1.0 strict float [.'$F']", path);
        }
        return res;
    }
    
    // check $S (.'$S')
    public boolean json_model_6(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$S'
        res = json.isString(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.'$S']", path);
        }
        return res;
    }
    
    // check $A (.'$A')
    public boolean json_model_7(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$A'
        res = json.isArray(val);
        if (res)
        {
            int arr_0_idx = -1;
            Iterator<Object> arr_0_item_loop = json.arrayIterator(val);
            while (arr_0_item_loop.hasNext())
            {
                arr_0_idx++;
                Object arr_0_item = arr_0_item_loop.next();
                Path arr_0_lpath = new Path(arr_0_idx, path);
                // .'$A'.0
                res = json_model_9(arr_0_item, (path != null ? arr_0_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $Any [.'$A'.0]", (path != null ? arr_0_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$A']", path);
        }
        return res;
    }
    
    // object .'$O'
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$O']", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            // handle other props
            // .'$O'.''
            res = json_model_9(pval, (path != null ? lpath_0 : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Any [.'$O'.'']", (path != null ? lpath_0 : null));
            }
            if (! res)
            {
                return false;
            }
        }
        return true;
    }
    
    // check $O (.'$O')
    public boolean json_model_8(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$O'
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$O']", path);
        }
        return res;
    }
    
    // object .'$Any'.'|'.6
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Any'.'|'.6]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            // handle other props
            // .'$Any'.'|'.6.''
            res = json_model_9(pval, (path != null ? lpath_1 : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Any [.'$Any'.'|'.6.'']", (path != null ? lpath_1 : null));
            }
            if (! res)
            {
                return false;
            }
        }
        return true;
    }
    
    // check $Any (.'$Any')
    public boolean json_model_9(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Any'
        // .'$Any'.'|'.0
        res = json.isNull(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not null [.'$Any'.'|'.0]", path);
        }
        if (! res)
        {
            // .'$Any'.'|'.1
            res = json_model_3(val, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $B [.'$Any'.'|'.1]", path);
            }
            if (! res)
            {
                // .'$Any'.'|'.2
                res = json_model_4(val, path, rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $I [.'$Any'.'|'.2]", path);
                }
                if (! res)
                {
                    // .'$Any'.'|'.3
                    res = json_model_5(val, path, rep);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("unexpected $F [.'$Any'.'|'.3]", path);
                    }
                    if (! res)
                    {
                        // .'$Any'.'|'.4
                        res = json_model_6(val, path, rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $S [.'$Any'.'|'.4]", path);
                        }
                        if (! res)
                        {
                            // .'$Any'.'|'.5
                            res = json_model_7(val, path, rep);
                            if (! res)
                            {
                                if (rep != null) rep.addEntry("unexpected $A [.'$Any'.'|'.5]", path);
                            }
                            if (! res)
                            {
                                // .'$Any'.'|'.6
                                res = _jm_obj_1(val, path, rep);
                                if (! res)
                                {
                                    if (rep != null) rep.addEntry("unexpected element [.'$Any'.'|'.6]", path);
                                }
                            }
                        }
                    }
                }
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'$Any'.'|']", path);
        }
        return res;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = json_model_9(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $Any [.]", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            xoropt_001_map_pmap = new HashMap<String, Checker>();
            xoropt_001_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_9(o, p, r);} });
            xoropt_001_map_pmap.put("N", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            xoropt_001_map_pmap.put("B", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            xoropt_001_map_pmap.put("I", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            xoropt_001_map_pmap.put("F", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
            xoropt_001_map_pmap.put("S", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_6(o, p, r);} });
            xoropt_001_map_pmap.put("A", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_7(o, p, r);} });
            xoropt_001_map_pmap.put("O", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_8(o, p, r);} });
            xoropt_001_map_pmap.put("Any", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_9(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            xoropt_001_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return xoropt_001_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return xoropt_001_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new xoropt_001();
        Main.main("xoropt_001", checker, VERSION, args);
    }
}
