#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0b0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0b0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_re_0_reco: object
_jm_re_0: RegexFun
check_model_map: PropMap

# object .'^'.0
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'^'.0]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_0(prop, path, rep):
            # handle 1 re props
            # .'^'.0.'/a/'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'^'.0.'/a/']", lpath_0 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'^'.0]", lpath_0 if path is not None else None))
            return False
    return True

# object .'^'.1
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'^'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "a":
            # handle may a property
            # .'^'.1.a
            res = pval is None
            if not res:
                rep is None or rep.append(("not null [.'^'.1.a]", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'^'.1.a]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'^'.1]", lpath_1 if path is not None else None))
            return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    # generic xor list
    xc_0: int = 0
    xr_0: bool
    # .'^'.0
    xr_0 = _jm_obj_0(val, path, rep)
    if not xr_0:
        rep is None or rep.append(("unexpected element [.'^'.0]", path))
    if xr_0:
        xc_0 += 1
    # .'^'.1
    xr_0 = _jm_obj_1(val, path, rep)
    if not xr_0:
        rep is None or rep.append(("unexpected element [.'^'.1]", path))
    if xr_0:
        xc_0 += 1
    res = xc_0 == 1
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not one model match [.'^']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile("a")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
