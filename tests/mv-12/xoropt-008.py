#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# object .'|'.2
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.2]", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'|'.2]", path))
        return False
    pval: Jsonable
    res: bool
    if not "a" in val:
        rep is None or rep.append(("missing mandatory prop <a> [.'|'.2]", path))
        return False
    pval = val.get("a", UNDEFINED)
    # .'|'.2.a
    res = isinstance(pval, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(pval):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'|'.2.a.0
            res = isinstance(arr_0_item, int) and not isinstance(arr_0_item, bool) and arr_0_item >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.'|'.2.a.0]", arr_0_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'|'.2.a]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <a> [.'|'.2]", path))
        return False
    return True

# object .'|'.1
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.1]", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'|'.1]", path))
        return False
    pval: Jsonable
    res: bool
    if not "a" in val:
        rep is None or rep.append(("missing mandatory prop <a> [.'|'.1]", path))
        return False
    pval = val.get("a", UNDEFINED)
    # .'|'.1.a
    res = isinstance(pval, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'|'.1.a]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <a> [.'|'.1]", path))
        return False
    return True

# object .'|'.0
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'|'.0]", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'|'.0]", path))
        return False
    pval: Jsonable
    res: bool
    if not "a" in val:
        rep is None or rep.append(("missing mandatory prop <a> [.'|'.0]", path))
        return False
    pval = val.get("a", UNDEFINED)
    # .'|'.0.a
    res = isinstance(pval, bool)
    if not res:
        rep is None or rep.append(("not a bool [.'|'.0.a]", path))
        rep is None or rep.append(("unexpected value for mandatory prop <a> [.'|'.0]", path))
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # ^ to | based on distinct types on same property
    # .
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'|']", path))
    if res:
        # .'|'.0
        res = _jm_obj_2(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'|'.0]", path))
        if not res:
            # .'|'.1
            res = _jm_obj_1(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'|'.1]", path))
            if not res:
                # .'|'.2
                res = _jm_obj_0(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'|'.2]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
