//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class xoropt_003 extends ModelChecker
{
    static public final String VERSION = "2";

    public Pattern _jm_re_0_pat = null;
    public Map<String, Checker> xoropt_003_map_pmap;

    public boolean _jm_re_0(String val, Path path, Report rep)
    {
        return _jm_re_0_pat.matcher(val).find();
    }

    // check $Aa (.'$Aa')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        // .'$Aa'
        // .'$Aa'.'|'.0
        boolean res = json.isBoolean(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not a bool [.'$Aa'.'|'.0]", path);
        }
        if (! res)
        {
            // .'$Aa'.'|'.1
            res = json.isInteger(val) && json.asLong(val) >= 1;
            if (! res)
            {
                if (rep != null) rep.addEntry("not a 1 strict int [.'$Aa'.'|'.1]", path);
            }
            if (! res)
            {
                // .'$Aa'.'|'.2
                res = json.isDouble(val) && json.asDouble(val) > 0.0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 1.0 strict float [.'$Aa'.'|'.2]", path);
                }
                if (! res)
                {
                    // .'$Aa'.'|'.3
                    // "/[a-z]/"
                    res = json.isString(val) && _jm_re_0(json.asString(val), path, rep);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("unexpected /[a-z]/ [.'$Aa'.'|'.3]", path);
                    }
                }
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'$Aa'.'|']", path);
        }
        return res;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // .
        boolean res = json_model_2(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $Aa [.]", path);
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_re_0_pat = Pattern.compile("[a-z]");
            xoropt_003_map_pmap = new HashMap<String, Checker>();
            xoropt_003_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            xoropt_003_map_pmap.put("Aa", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_re_0_pat = null;
            xoropt_003_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return xoropt_003_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return xoropt_003_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new xoropt_003();
        Main.main("xoropt_003", checker, VERSION, args);
    }
}
