#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_2($$$);
sub json_model_3($$$);
sub json_model_4($$$);
sub json_model_5($$$);
sub json_model_6($$$);
sub json_model_7($$$);
sub json_model_8($$$);
sub json_model_9($$$);
sub json_model_1($$$);
my %check_model_map;

# check $N (.'$N')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$N'
    $res = !defined($val);
    return $res;
}

# check $B (.'$B')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$B'
    $res = jm_is_boolean($val);
    return $res;
}

# check $I (.'$I')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$I'
    $res = jm_is_integer($val);
    return $res;
}

# check $F (.'$F')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$F'
    $res = jm_is_numeric($val);
    return $res;
}

# check $S (.'$S')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$S'
    $res = jm_is_string($val);
    return $res;
}

# check $A (.'$A')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$A'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$A'.0
            $res = json_model_9($arr_0_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# object .'$O'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$O'.''
        $res = json_model_9($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $O (.'$O')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$O'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# object .'$Any'.'|'.6
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Any'.'|'.6.''
        $res = json_model_9($pval, undef, $rep);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $Any (.'$Any')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Any'
    # .'$Any'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$Any'.'|'.1
        $res = json_model_3($val, $path, $rep);
        if (! $res)
        {
            # .'$Any'.'|'.2
            $res = json_model_4($val, $path, $rep);
            if (! $res)
            {
                # .'$Any'.'|'.3
                $res = json_model_5($val, $path, $rep);
                if (! $res)
                {
                    # .'$Any'.'|'.4
                    $res = json_model_6($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Any'.'|'.5
                        $res = json_model_7($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$Any'.'|'.6
                            $res = _jm_obj_1($val, $path, $rep);
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_9($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&json_model_9,
            'N' => \&json_model_2,
            'B' => \&json_model_3,
            'I' => \&json_model_4,
            'F' => \&json_model_5,
            'S' => \&json_model_6,
            'A' => \&json_model_7,
            'O' => \&json_model_8,
            'Any' => \&json_model_9,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
