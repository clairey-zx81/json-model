//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class xoropt_006 extends ModelChecker
{
    static public final String VERSION = "2";

    public Pattern _jm_re_0_pat = null;
    public Map<String, Checker> xoropt_006_map_pmap;

    // check $None (.'$None')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        // .'$None'
        boolean res = false;
        if (rep != null) rep.addEntry("unexpected $NONE [.'$None']", path);
        return res;
    }

    public boolean _jm_re_0(String val, Path path, Report rep)
    {
        return _jm_re_0_pat.matcher(val).find();
    }

    // object .'|'.2
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.2]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (_jm_re_0(prop, path, rep))
            {
                // handle 1 re props
                // .'|'.2.'/^[ab]$/'
                res = false;
                if (rep != null) rep.addEntry("unexpected $NONE [.'|'.2.'/^[ab]$/']", (path != null ? lpath_0 : null));
                return false;
            }
            else
            {
                // handle other props
                // .'|'.2.''
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.'|'.2.'']", (path != null ? lpath_0 : null));
                    return false;
                }
            }
        }
        return true;
    }

    // object .'|'.1
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.1]", path);
            return false;
        }
        if (json.objectSize(val) != 1)
        {
            if (rep != null) rep.addEntry("bad property count [.'|'.1]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "b")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <b> [.'|'.1]", path);
            return false;
        }
        lpath = new Path("b", path);
        // .'|'.1.b
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'|'.1.b]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <b> [.'|'.1]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // object .'|'.0
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'|'.0]", path);
            return false;
        }
        if (json.objectSize(val) != 1)
        {
            if (rep != null) rep.addEntry("bad property count [.'|'.0]", path);
            return false;
        }
        Path lpath;
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "a")) != null))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <a> [.'|'.0]", path);
            return false;
        }
        lpath = new Path("a", path);
        // .'|'.0.a
        res = json.isInteger(pval) && json.asLong(pval) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'|'.0.a]", (path != null ? lpath : null));
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <a> [.'|'.0]", (path != null ? lpath : null));
            return false;
        }
        return true;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // .
        boolean res = json.isObject(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected type [.'|']", path);
        }
        if (res)
        {
            // .'|'.0
            res = _jm_obj_2(val, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected element [.'|'.0]", path);
            }
            if (! res)
            {
                // .'|'.1
                res = _jm_obj_1(val, path, rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected element [.'|'.1]", path);
                }
                if (! res)
                {
                    // .'|'.2
                    res = _jm_obj_0(val, path, rep);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("unexpected element [.'|'.2]", path);
                    }
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'|']", path);
            }
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_re_0_pat = Pattern.compile("^[ab]$");
            xoropt_006_map_pmap = new HashMap<String, Checker>();
            xoropt_006_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            xoropt_006_map_pmap.put("None", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_re_0_pat = null;
            xoropt_006_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return xoropt_006_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return xoropt_006_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new xoropt_006();
        Main.main("xoropt_006", checker, VERSION, args);
    }
}
