#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2.0b0
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2.0b0";

var check_model_map = new Map()

// check $N (.'$N')
function json_model_2(val, path, rep)
{
    let res;
    // .'$N'
    res = val === null;
    if (! res)
    {
        rep !== null && rep.push(["not null [.'$N']", path])
    }
    return res;
}

// check $B (.'$B')
function json_model_3(val, path, rep)
{
    let res;
    // .'$B'
    res = (typeof val === 'boolean' || val instanceof Boolean);
    if (! res)
    {
        rep !== null && rep.push(["not a bool [.'$B']", path])
    }
    return res;
}

// check $I (.'$I')
function json_model_4(val, path, rep)
{
    let res;
    // .'$I'
    res = (typeof val === 'number' || val instanceof Number) && Number.isInteger(val);
    if (! res)
    {
        rep !== null && rep.push(["not a -1 strict int [.'$I']", path])
    }
    return res;
}

// check $F (.'$F')
function json_model_5(val, path, rep)
{
    let res;
    // .'$F'
    res = (typeof val === 'number' || val instanceof Number);
    if (! res)
    {
        rep !== null && rep.push(["not a -1.0 strict float [.'$F']", path])
    }
    return res;
}

// check $S (.'$S')
function json_model_6(val, path, rep)
{
    let res;
    // .'$S'
    res = (typeof val === 'string' || val instanceof String);
    if (! res)
    {
        rep !== null && rep.push(["unexpected string [.'$S']", path])
    }
    return res;
}

// check $A (.'$A')
function json_model_7(val, path, rep)
{
    let res;
    // .'$A'
    res = Array.isArray(val);
    if (res)
    {
        for (let arr_0_idx = 0; arr_0_idx < val.length; arr_0_idx++)
        {
            let arr_0_item = val[arr_0_idx]
            let arr_0_lpath = path ? path.concat([arr_0_idx]) : null;
            // .'$A'.0
            res = json_model_9(arr_0_item, (path ? arr_0_lpath : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $Any [.'$A'.0]", (path ? arr_0_lpath : null)])
            }
            if (! res)
            {
                break;
            }
        }
    }
    if (! res)
    {
        rep !== null && rep.push(["not array or unexpected array [.'$A']", path])
    }
    return res;
}

// object .'$O'
function _jm_obj_0(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'$O']", path])
        return false;
    }
    let res;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_0 = path ? path.concat([prop]) : null;
        // handle other props
        // .'$O'.''
        res = json_model_9(pval, (path ? lpath_0 : null), rep);
        if (! res)
        {
            rep !== null && rep.push(["unexpected $Any [.'$O'.'']", (path ? lpath_0 : null)])
        }
        if (! res)
        {
            return false;
        }
    }
    return true;
}

// check $O (.'$O')
function json_model_8(val, path, rep)
{
    let res;
    // .'$O'
    res = _jm_obj_0(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected element [.'$O']", path])
    }
    return res;
}

// check $Any (.'$Any')
function json_model_9(val, path, rep)
{
    let res;
    // .'$Any'
    // .'$Any'.'|'.0
    res = val === null;
    if (! res)
    {
        rep !== null && rep.push(["not null [.'$Any'.'|'.0]", path])
    }
    if (! res)
    {
        // .'$Any'.'|'.1
        res = json_model_3(val, path, rep);
        if (! res)
        {
            rep !== null && rep.push(["unexpected $B [.'$Any'.'|'.1]", path])
        }
        if (! res)
        {
            // .'$Any'.'|'.2
            res = json_model_4(val, path, rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $I [.'$Any'.'|'.2]", path])
            }
            if (! res)
            {
                // .'$Any'.'|'.3
                res = json_model_5(val, path, rep);
                if (! res)
                {
                    rep !== null && rep.push(["unexpected $F [.'$Any'.'|'.3]", path])
                }
                if (! res)
                {
                    // .'$Any'.'|'.4
                    res = json_model_6(val, path, rep);
                    if (! res)
                    {
                        rep !== null && rep.push(["unexpected $S [.'$Any'.'|'.4]", path])
                    }
                    if (! res)
                    {
                        // .'$Any'.'|'.5
                        res = json_model_7(val, path, rep);
                        if (! res)
                        {
                            rep !== null && rep.push(["unexpected $A [.'$Any'.'|'.5]", path])
                        }
                        if (! res)
                        {
                            // .'$Any'.'|'.6
                            res = json_model_8(val, path, rep);
                            if (! res)
                            {
                                rep !== null && rep.push(["unexpected $O [.'$Any'.'|'.6]", path])
                            }
                        }
                    }
                }
            }
        }
    }
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["no model matched [.'$Any'.'|']", path])
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = json_model_9(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected $Any [.]", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_1)
        check_model_map.set("N", json_model_2)
        check_model_map.set("B", json_model_3)
        check_model_map.set("I", json_model_4)
        check_model_map.set("F", json_model_5)
        check_model_map.set("S", json_model_6)
        check_model_map.set("A", json_model_7)
        check_model_map.set("O", json_model_8)
        check_model_map.set("Any", json_model_9)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
