//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//
import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class l10n extends ModelChecker
{
    static public final String VERSION = "2.0b1";

    public Pattern _jm_re_0_pat = null;
    public Pattern _jm_re_1_pat = null;
    public Map<String, Checker> l10n_map_pmap;

    // object .'$'
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            if (prop.compareTo("Model") == 0)
            {
                // handle must Model property
                must_count += 1;
                // .'$'.Model
                res = json.isString(pval) && json.asString(pval).compareTo("$https://json-model.org/models/json-model") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected _$https://json-model.org/models/json-model [.'$'.Model]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$'.Model]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("") == 0)
            {
                // handle may  property
                // .'$'.''
                res = json.isString(pval) && rt.is_valid_url(json.asString(pval));
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $URL [.'$'.'']", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$'.'']", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$']", (path != null ? lpath_1 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "Model"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <Model> [.'$']", path);
                }
            }
            return false;
        }
        return true;
    }
    
    public boolean _jm_re_0(String val, Path path, Report rep)
    {
        return _jm_re_0_pat.matcher(val).find();
    }
    
    public boolean _jm_re_1(String val, Path path, Report rep)
    {
        return _jm_re_1_pat.matcher(val).find();
    }
    
    // object .'%'
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'%']", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_2 = new Path(prop, path);
            if (prop.compareTo("#") == 0)
            {
                // handle may # property
                // .'%'.'#'
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'%'.'#']", (path != null ? lpath_2 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.'%'.'#']", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (_jm_re_0(prop, path, rep))
            {
                // handle 1 re props
                // .'%'.'/^\\..+$/'
                // "/^([#~$%@|&+^/*=]|[<>!]=?)$/"
                res = json.isString(pval) && _jm_re_1(json.asString(pval), (path != null ? lpath_2 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected /^([#~$%@|&+^/*=]|[<>!]=?)$/ [.'%'.'/^\\\\..+$/']", (path != null ? lpath_2 : null));
                }
                if (! res)
                {
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'%']", (path != null ? lpath_2 : null));
                return false;
            }
        }
        return true;
    }
    
    // object .
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.]", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (prop.compareTo("$") == 0)
            {
                // handle must $ property
                must_count += 1;
                // .'$'
                res = _jm_obj_1(pval, (path != null ? lpath_0 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected element [.'$']", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$']", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("~") == 0)
            {
                // handle must ~ property
                must_count += 1;
                // .'~'
                res = json.isString(pval) && json.asString(pval).compareTo("https://json-model.org/models/l10n") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected _https://json-model.org/models/l10n [.'~']", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'~']", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("%") == 0)
            {
                // handle must % property
                must_count += 1;
                // dot-prefixed arbitrary key, one or two char keyword values
                // .'%'
                res = _jm_obj_2(pval, (path != null ? lpath_0 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected element [.'%']", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'%']", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("@") == 0)
            {
                // handle must @ property
                must_count += 1;
                // .'@'
                res = json.isString(pval) && json.asString(pval).compareTo("$Model") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected _$Model [.'@']", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'@']", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("#") == 0)
            {
                // handle may # property
                // .'#'
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'#']", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.'#']", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.]", (path != null ? lpath_0 : null));
                return false;
            }
        }
        if (must_count != 4)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "$"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <$> [.]", path);
                }
                if (! json.objectHasProp(val, "%"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <%> [.]", path);
                }
                if (! json.objectHasProp(val, "@"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <@> [.]", path);
                }
                if (! json.objectHasProp(val, "~"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <~> [.]", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // JSON Model Subset for Localization Renames
        // .
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.]", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_re_0_pat = Pattern.compile("^\\..+$");
            _jm_re_1_pat = Pattern.compile("^([#~$%@|&+^/*=]|[<>!]=?)$");
            l10n_map_pmap = new HashMap<String, Checker>();
            l10n_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_re_0_pat = null;
            _jm_re_1_pat = null;
            l10n_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return l10n_map_pmap.get(name);
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new l10n();
        Main.main("l10n", checker, VERSION, args);
    }
}
