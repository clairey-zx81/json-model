#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_3($$$);
sub json_model_1($$$);
sub json_model_42($$$);
sub json_model_21($$$);
sub json_model_20($$$);
sub json_model_7($$$);
sub json_model_34($$$);
sub json_model_16($$$);
sub json_model_17($$$);
my %_jm_cst_0;
sub json_model_5($$$);
sub json_model_9($$$);
sub json_model_10($$$);
sub json_model_11($$$);
sub _jm_xre_0($$$);
sub _jm_xre_1($$$);
sub json_model_12($$$);
sub json_model_35($$$);
sub _jm_obj_1($$$);
sub _jm_obj_0($$$);
sub _jm_obj_3($$$);
sub _jm_obj_2($$$);
sub _jm_obj_5($$$);
sub _jm_obj_4($$$);
sub _jm_obj_7($$$);
sub _jm_obj_6($$$);
sub _jm_obj_9($$$);
sub _jm_obj_8($$$);
sub _jm_obj_11($$$);
sub _jm_obj_10($$$);
sub json_model_31($$$);
sub json_model_14($$$);
sub json_model_15($$$);
sub json_model_28($$$);
sub json_model_13($$$);
sub _jm_obj_14($$$);
sub _jm_obj_13($$$);
sub _jm_obj_16($$$);
sub _jm_obj_15($$$);
sub _jm_obj_17($$$);
sub _jm_obj_12($$$);
sub _jm_obj_20($$$);
sub _jm_obj_19($$$);
sub _jm_obj_22($$$);
sub _jm_obj_21($$$);
sub _jm_obj_23($$$);
sub _jm_obj_18($$$);
sub _jm_obj_26($$$);
sub _jm_obj_25($$$);
sub _jm_obj_28($$$);
sub _jm_obj_27($$$);
sub _jm_obj_29($$$);
sub _jm_obj_24($$$);
sub _jm_obj_32($$$);
sub _jm_obj_31($$$);
sub _jm_obj_34($$$);
sub _jm_obj_33($$$);
sub _jm_obj_35($$$);
sub _jm_obj_30($$$);
sub _jm_obj_38($$$);
sub _jm_obj_37($$$);
sub _jm_obj_40($$$);
sub _jm_obj_39($$$);
sub _jm_obj_41($$$);
sub _jm_obj_36($$$);
sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_obj_44($$$);
sub _jm_obj_43($$$);
sub _jm_f_2($$$);
sub _jm_obj_46($$$);
sub _jm_obj_45($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
sub _jm_obj_47($$$);
sub _jm_f_6($$$);
sub _jm_f_7($$$);
my %_jm_obj_42_map;
sub _jm_obj_42($$$);
sub json_model_41($$$);
sub json_model_4($$$);
sub json_model_6($$$);
sub _jm_obj_49($$$);
sub _jm_obj_50($$$);
sub _jm_obj_48($$$);
sub json_model_33($$$);
my %check_model_map;

# check $Model (.'$Model')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model'
    $res = json_model_42($val, $path, $rep);
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_42($val, $path, $rep);
    return $res;
}

# check $Model#RootModel (.'$Model#RootModel')
sub json_model_42($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#RootModel'
    # .'$Model#RootModel'.'|'.0
    $res = json_model_34($val, $path, $rep);
    if (! $res)
    {
        # .'$Model#RootModel'.'|'.1
        $res = json_model_21($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#RootModel'.'|'.2
            $res = json_model_41($val, $path, $rep);
        }
    }
    return $res;
}

# check $Model#Array (.'$Model#Array')
sub json_model_21($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Array'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$Model#Array'.0
            $res = json_model_20($arr_0_item, undef, $rep);
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check $Model#CModel (.'$Model#CModel')
sub json_model_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#CModel'
    # .'$Model#CModel'.'|'.0
    $res = json_model_35($val, $path, $rep);
    if (! $res)
    {
        # .'$Model#CModel'.'|'.1
        $res = json_model_7($val, $path, $rep);
    }
    return $res;
}

# check $Model#ArrayComment (.'$Model#ArrayComment')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#ArrayComment'
    # "/^#/"
    $res = jm_is_string($val) && jm_starts_with($val, '#');
    return $res;
}

# check $Model#ScalarModel (.'$Model#ScalarModel')
sub json_model_34($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#ScalarModel'
    # .'$Model#ScalarModel'.'|'.0
    $res = json_model_16($val, $path, $rep);
    if (! $res)
    {
        # .'$Model#ScalarModel'.'|'.1
        $res = json_model_17($val, $path, $rep);
    }
    return $res;
}

# check $Model#ValModel (.'$Model#ValModel')
sub json_model_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#ValModel'
    # .'$Model#ValModel'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$Model#ValModel'.'|'.1
        $res = jm_is_boolean($val) && $val == 1;
        if (! $res)
        {
            # .'$Model#ValModel'.'|'.2
            $res = jm_is_integer($val) && $val == 0;
            if (! $res)
            {
                # .'$Model#ValModel'.'|'.3
                $res = jm_is_integer($val) && $val == 1;
                if (! $res)
                {
                    # .'$Model#ValModel'.'|'.4
                    $res = jm_is_integer($val) && $val == -1;
                    if (! $res)
                    {
                        # .'$Model#ValModel'.'|'.5
                        $res = jm_is_numeric($val) && $val == 0.0;
                        if (! $res)
                        {
                            # .'$Model#ValModel'.'|'.6
                            $res = jm_is_numeric($val) && $val == 1.0;
                            if (! $res)
                            {
                                # .'$Model#ValModel'.'|'.7
                                $res = jm_is_numeric($val) && $val == -1.0;
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# check $Model#StrModel (.'$Model#StrModel')
sub json_model_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#StrModel'
    # .'$Model#StrModel'.'|'.0
    $res = json_model_11($val, $path, $rep);
    if (! $res)
    {
        # .'$Model#StrModel'.'|'.1
        $res = json_model_10($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#StrModel'.'|'.2
            $res = json_model_12($val, $path, $rep);
            if (! $res)
            {
                # .'$Model#StrModel'.'|'.3
                $res = json_model_5($val, $path, $rep);
                if (! $res)
                {
                    # .'$Model#StrModel'.'|'.4
                    $res = json_model_9($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Model#StrModel'.'|'.5
                        $res = jm_is_string($val) && $val eq '';
                    }
                }
            }
        }
    }
    return $res;
}


# check $Model#PreDef (.'$Model#PreDef')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#PreDef'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_0{$val};
    return $res;
}

sub _jm_re_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\$./;
    return $res;
}

# check $Model#Ref (.'$Model#Ref')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Ref'
    # "/^\\$./"
    $res = jm_is_string($val) && _jm_re_0($val, $path, $rep);
    return $res;
}

sub _jm_re_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^=(null|true|false|[-+]?\d+(\.\d+)?([Ee][-+]?\d+)?)$/;
    return $res;
}

# check $Model#ValConst (.'$Model#ValConst')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#ValConst'
    # "/^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$/"
    $res = jm_is_string($val) && _jm_re_1($val, $path, $rep);
    return $res;
}

sub _jm_re_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[A-Za-z0-9_]/;
    return $res;
}

# check $Model#StrConst (.'$Model#StrConst')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#StrConst'
    # "/^[A-Za-z0-9_]/"
    $res = jm_is_string($val) && _jm_re_2($val, $path, $rep);
    return $res;
}

sub _jm_xre_0_re($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\/(?<s1>.*)\/[a-z]*$/;
    return $res;
}

sub _jm_xre_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $extract;
    my $match = $val =~ /^\/(?<s1>.*)\/[a-z]*$/;
    if (! $match)
    {
        return 0;
    }
    $extract = $+{'s1'};
    if (! (jm_is_string($extract) && jm_is_valid_regex($extract, $path, $rep)))
    {
        return 0;
    }
    return 1;
}

sub _jm_xre_1_re($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\/(?<s1>.*)\/[a-z]*X[a-z]*$/;
    return $res;
}

sub _jm_xre_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $extract;
    my $match = $val =~ /^\/(?<s1>.*)\/[a-z]*X[a-z]*$/;
    if (! $match)
    {
        return 0;
    }
    $extract = $+{'s1'};
    if (! (jm_is_string($extract) && jm_is_valid_exreg($extract, $path, $rep)))
    {
        return 0;
    }
    return 1;
}

# check $Model#Regex (.'$Model#Regex')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Regex'
    $res = jm_is_string($val);
    if ($res)
    {
        # .'$Model#Regex'.'|'.0
        # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
        $res = _jm_xre_1($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#Regex'.'|'.1
            # "/^/($REGEX)/[a-z]*$/X"
            $res = _jm_xre_0($val, $path, $rep);
        }
    }
    return $res;
}

# check $Model#Model (.'$Model#Model')
sub json_model_35($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Model'
    # .'$Model#Model'.'|'.0
    $res = json_model_34($val, $path, $rep);
    if (! $res)
    {
        # .'$Model#Model'.'|'.1
        $res = json_model_21($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#Model'.'|'.2
            $res = json_model_31($val, $path, $rep);
        }
    }
    return $res;
}

# object .'$Model#Element'.'|'.5.'.schema'
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Element'.'|'.5
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Element'.'|'.5.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Element'.'|'.5.'.schema'
            $res = _jm_obj_1($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_28($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Element'.'|'.5.'$Prop'
            $res = json_model_35($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Element'.'|'.5.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Element'.'|'.4.'.schema'
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Element'.'|'.4
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '+')
        {
            # handle must + property
            $must_count++;
            # .'$Model#Element'.'|'.4.'+'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_1_idx (0 .. $#$pval)
                {
                    my $arr_1_item = $$pval[$arr_1_idx];
                    # .'$Model#Element'.'|'.4.'+'.0
                    $res = json_model_20($arr_1_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Element'.'|'.4.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Element'.'|'.4.'.schema'
            $res = _jm_obj_3($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Element'.'|'.4.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Element'.'|'.3.'.schema'
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Element'.'|'.3
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Model#Element'.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_2_idx (0 .. $#$pval)
                {
                    my $arr_2_item = $$pval[$arr_2_idx];
                    # .'$Model#Element'.'|'.3.'^'.0
                    $res = json_model_20($arr_2_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Element'.'|'.3.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Element'.'|'.3.'.schema'
            $res = _jm_obj_5($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Element'.'|'.3.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Element'.'|'.2.'.schema'
sub _jm_obj_7($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Element'.'|'.2
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$Model#Element'.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_3_idx (0 .. $#$pval)
                {
                    my $arr_3_item = $$pval[$arr_3_idx];
                    # .'$Model#Element'.'|'.2.'&'.0
                    $res = json_model_20($arr_3_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Element'.'|'.2.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Element'.'|'.2.'.schema'
            $res = _jm_obj_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Element'.'|'.2.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Element'.'|'.1.'.schema'
sub _jm_obj_9($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Element'.'|'.1
sub _jm_obj_8($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Model#Element'.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_4_idx (0 .. $#$pval)
                {
                    my $arr_4_item = $$pval[$arr_4_idx];
                    # .'$Model#Element'.'|'.1.'|'.0
                    $res = json_model_20($arr_4_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Element'.'|'.1.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Element'.'|'.1.'.schema'
            $res = _jm_obj_9($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Element'.'|'.1.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Element'.'|'.0.'.schema'
sub _jm_obj_11($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

sub _jm_re_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^(<=|>=|<|>)$/;
    return $res;
}

sub _jm_re_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^(=|!=)$/;
    return $res;
}

# object .'$Model#Element'.'|'.0
sub _jm_obj_10($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Model#Element'.'|'.0.'@'
            $res = json_model_35($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Element'.'|'.0.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Element'.'|'.0.'.schema'
            $res = _jm_obj_11($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$Model#Element'.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.mo')
        {
            # handle may .mo property
            # .'$Model#Element'.'|'.0.'.mo'
            $res = jm_is_integer($pval) && $pval >= 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.in')
        {
            # handle may .in property
            # .'$Model#Element'.'|'.0.'.in'
            $res = json_model_35($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 3 re props
            # .'$Model#Element'.'|'.0.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_3($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Model#Element'.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_14($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_4($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Model#Element'.'|'.0.'/^(=|!=)$/'
            $res = json_model_15($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Model#Element (.'$Model#Element')
sub json_model_31($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Element'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Model#Element'.'|'.0
        $res = _jm_obj_10($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#Element'.'|'.1
            $res = _jm_obj_8($val, $path, $rep);
            if (! $res)
            {
                # .'$Model#Element'.'|'.2
                $res = _jm_obj_6($val, $path, $rep);
                if (! $res)
                {
                    # .'$Model#Element'.'|'.3
                    $res = _jm_obj_4($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Model#Element'.'|'.4
                        $res = _jm_obj_2($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$Model#Element'.'|'.5
                            $res = _jm_obj_0($val, $path, $rep);
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# check $Model#CmpValue (.'$Model#CmpValue')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#CmpValue'
    # .'$Model#CmpValue'.'|'.0
    $res = jm_is_integer($val);
    if (! $res)
    {
        # .'$Model#CmpValue'.'|'.1
        $res = jm_is_numeric($val);
        if (! $res)
        {
            # .'$Model#CmpValue'.'|'.2
            $res = jm_is_string($val);
        }
    }
    return $res;
}

# check $Model#EqValue (.'$Model#EqValue')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#EqValue'
    # .'$Model#EqValue'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$Model#EqValue'.'|'.1
        $res = jm_is_boolean($val);
        if (! $res)
        {
            # .'$Model#EqValue'.'|'.2
            $res = json_model_14($val, $path, $rep);
        }
    }
    return $res;
}

sub _jm_re_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[?!]/;
    return $res;
}

# check $Model#Prop (.'$Model#Prop')
sub json_model_28($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Prop'
    # .'$Model#Prop'.'|'.0
    # "/^[?!]/"
    $res = jm_is_string($val) && _jm_re_5($val, $path, $rep);
    if (! $res)
    {
        # .'$Model#Prop'.'|'.1
        $res = json_model_11($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#Prop'.'|'.2
            $res = json_model_12($val, $path, $rep);
            if (! $res)
            {
                # .'$Model#Prop'.'|'.3
                $res = json_model_9($val, $path, $rep);
                if (! $res)
                {
                    # .'$Model#Prop'.'|'.4
                    $res = json_model_13($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Model#Prop'.'|'.5
                        $res = jm_is_string($val) && $val eq '';
                    }
                }
            }
        }
    }
    return $res;
}

sub _jm_re_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\..+$/;
    return $res;
}

# check $Model#Name (.'$Model#Name')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Name'
    # "/^\\..+$/"
    $res = jm_is_string($val) && _jm_re_6($val, $path, $rep);
    return $res;
}

# object .'$Model#Root'.'|'.5.'$'.'.schema'
sub _jm_obj_14($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.5.'$'
sub _jm_obj_13($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.5.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.5.'$'.'.schema'
            $res = _jm_obj_14($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Model#Root'.'|'.5.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.5.'$'.'$Identifier'
            $res = json_model_35($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.5.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.5.'%'.'.schema'
sub _jm_obj_16($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

sub _jm_re_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^([#|&^+\/*@~=\$%]|[<>!]=?)$/;
    return $res;
}

sub _jm_re_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\$.*$/;
    return $res;
}

# object .'$Model#Root'.'|'.5.'%'
sub _jm_obj_15($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.5.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.5.'%'.'.schema'
            $res = _jm_obj_16($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Model#Root'.'|'.5.'%'.'<'
            # .'$Model#Root'.'|'.5.'%'.'<'.'|'.0
            $res = json_model_9($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#Root'.'|'.5.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_5_idx (0 .. $#$pval)
                    {
                        my $arr_5_item = $$pval[$arr_5_idx];
                        # .'$Model#Root'.'|'.5.'%'.'<'.'|'.1.0
                        $res = json_model_9($arr_5_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_13($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.5.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.5.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.5.'%'.'/^\\$.*$/'
            $res = json_model_33($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.5.'.schema'
sub _jm_obj_17($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.5
sub _jm_obj_12($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#Root'.'|'.5.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#Root'.'|'.5.'$'
            $res = _jm_obj_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#Root'.'|'.5.'%'
            $res = _jm_obj_15($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.5.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.5.'.schema'
            $res = _jm_obj_17($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_28($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.5.'$Prop'
            $res = json_model_35($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.5.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.4.'$'.'.schema'
sub _jm_obj_20($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.4.'$'
sub _jm_obj_19($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.4.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.4.'$'.'.schema'
            $res = _jm_obj_20($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Model#Root'.'|'.4.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.4.'$'.'$Identifier'
            $res = json_model_35($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.4.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.4.'%'.'.schema'
sub _jm_obj_22($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.4.'%'
sub _jm_obj_21($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.4.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.4.'%'.'.schema'
            $res = _jm_obj_22($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Model#Root'.'|'.4.'%'.'<'
            # .'$Model#Root'.'|'.4.'%'.'<'.'|'.0
            $res = json_model_9($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#Root'.'|'.4.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_7_idx (0 .. $#$pval)
                    {
                        my $arr_7_item = $$pval[$arr_7_idx];
                        # .'$Model#Root'.'|'.4.'%'.'<'.'|'.1.0
                        $res = json_model_9($arr_7_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_13($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.4.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.4.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.4.'%'.'/^\\$.*$/'
            $res = json_model_33($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.4.'.schema'
sub _jm_obj_23($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.4
sub _jm_obj_18($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '+')
        {
            # handle must + property
            $must_count++;
            # .'$Model#Root'.'|'.4.'+'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_6_idx (0 .. $#$pval)
                {
                    my $arr_6_item = $$pval[$arr_6_idx];
                    # .'$Model#Root'.'|'.4.'+'.0
                    $res = json_model_20($arr_6_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#Root'.'|'.4.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#Root'.'|'.4.'$'
            $res = _jm_obj_19($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#Root'.'|'.4.'%'
            $res = _jm_obj_21($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.4.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.4.'.schema'
            $res = _jm_obj_23($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.4.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Root'.'|'.3.'$'.'.schema'
sub _jm_obj_26($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.3.'$'
sub _jm_obj_25($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.3.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.3.'$'.'.schema'
            $res = _jm_obj_26($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Model#Root'.'|'.3.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.3.'$'.'$Identifier'
            $res = json_model_35($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.3.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.3.'%'.'.schema'
sub _jm_obj_28($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.3.'%'
sub _jm_obj_27($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.3.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.3.'%'.'.schema'
            $res = _jm_obj_28($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Model#Root'.'|'.3.'%'.'<'
            # .'$Model#Root'.'|'.3.'%'.'<'.'|'.0
            $res = json_model_9($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#Root'.'|'.3.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_9_idx (0 .. $#$pval)
                    {
                        my $arr_9_item = $$pval[$arr_9_idx];
                        # .'$Model#Root'.'|'.3.'%'.'<'.'|'.1.0
                        $res = json_model_9($arr_9_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_13($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.3.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.3.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.3.'%'.'/^\\$.*$/'
            $res = json_model_33($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.3.'.schema'
sub _jm_obj_29($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.3
sub _jm_obj_24($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Model#Root'.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_8_idx (0 .. $#$pval)
                {
                    my $arr_8_item = $$pval[$arr_8_idx];
                    # .'$Model#Root'.'|'.3.'^'.0
                    $res = json_model_20($arr_8_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#Root'.'|'.3.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#Root'.'|'.3.'$'
            $res = _jm_obj_25($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#Root'.'|'.3.'%'
            $res = _jm_obj_27($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.3.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.3.'.schema'
            $res = _jm_obj_29($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.3.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Root'.'|'.2.'$'.'.schema'
sub _jm_obj_32($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.2.'$'
sub _jm_obj_31($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.2.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.2.'$'.'.schema'
            $res = _jm_obj_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Model#Root'.'|'.2.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.2.'$'.'$Identifier'
            $res = json_model_35($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.2.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.2.'%'.'.schema'
sub _jm_obj_34($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.2.'%'
sub _jm_obj_33($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.2.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.2.'%'.'.schema'
            $res = _jm_obj_34($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Model#Root'.'|'.2.'%'.'<'
            # .'$Model#Root'.'|'.2.'%'.'<'.'|'.0
            $res = json_model_9($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#Root'.'|'.2.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_11_idx (0 .. $#$pval)
                    {
                        my $arr_11_item = $$pval[$arr_11_idx];
                        # .'$Model#Root'.'|'.2.'%'.'<'.'|'.1.0
                        $res = json_model_9($arr_11_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_13($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.2.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.2.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.2.'%'.'/^\\$.*$/'
            $res = json_model_33($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.2.'.schema'
sub _jm_obj_35($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.2
sub _jm_obj_30($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$Model#Root'.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_10_idx (0 .. $#$pval)
                {
                    my $arr_10_item = $$pval[$arr_10_idx];
                    # .'$Model#Root'.'|'.2.'&'.0
                    $res = json_model_20($arr_10_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#Root'.'|'.2.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#Root'.'|'.2.'$'
            $res = _jm_obj_31($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#Root'.'|'.2.'%'
            $res = _jm_obj_33($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.2.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.2.'.schema'
            $res = _jm_obj_35($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.2.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Root'.'|'.1.'$'.'.schema'
sub _jm_obj_38($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.1.'$'
sub _jm_obj_37($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.1.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.1.'$'.'.schema'
            $res = _jm_obj_38($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Model#Root'.'|'.1.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.1.'$'.'$Identifier'
            $res = json_model_35($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.1.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.1.'%'.'.schema'
sub _jm_obj_40($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.1.'%'
sub _jm_obj_39($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.1.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.1.'%'.'.schema'
            $res = _jm_obj_40($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Model#Root'.'|'.1.'%'.'<'
            # .'$Model#Root'.'|'.1.'%'.'<'.'|'.0
            $res = json_model_9($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#Root'.'|'.1.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_13_idx (0 .. $#$pval)
                    {
                        my $arr_13_item = $$pval[$arr_13_idx];
                        # .'$Model#Root'.'|'.1.'%'.'<'.'|'.1.0
                        $res = json_model_9($arr_13_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_13($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.1.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.1.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.1.'%'.'/^\\$.*$/'
            $res = json_model_33($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.1.'.schema'
sub _jm_obj_41($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.1
sub _jm_obj_36($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Model#Root'.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_12_idx (0 .. $#$pval)
                {
                    my $arr_12_item = $$pval[$arr_12_idx];
                    # .'$Model#Root'.'|'.1.'|'.0
                    $res = json_model_20($arr_12_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#Root'.'|'.1.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#Root'.'|'.1.'$'
            $res = _jm_obj_37($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#Root'.'|'.1.'%'
            $res = _jm_obj_39($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.1.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.1.'.schema'
            $res = _jm_obj_41($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.1.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check _jm_obj_42_map_! (.'$Model#Root'.'|'.0.'!')
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Root'.'|'.0.'!'
    $res = jm_is_boolean($val);
    return $res;
}

# check _jm_obj_42_map_# (.'$Model#Root'.'|'.0.'#')
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Root'.'|'.0.'#'
    $res = jm_is_string($val);
    return $res;
}

# object .'$Model#Root'.'|'.0.'$'.'.schema'
sub _jm_obj_44($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.0.'$'
sub _jm_obj_43($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.0.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.0.'$'.'.schema'
            $res = _jm_obj_44($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Model#Root'.'|'.0.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.0.'$'.'$Identifier'
            $res = json_model_35($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.0.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_42_map_$ (.'$Model#Root'.'|'.0.'$')
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Root'.'|'.0.'$'
    $res = _jm_obj_43($val, $path, $rep);
    return $res;
}

# object .'$Model#Root'.'|'.0.'%'.'.schema'
sub _jm_obj_46($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Root'.'|'.0.'%'
sub _jm_obj_45($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Root'.'|'.0.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Root'.'|'.0.'%'.'.schema'
            $res = _jm_obj_46($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Model#Root'.'|'.0.'%'.'<'
            # .'$Model#Root'.'|'.0.'%'.'<'.'|'.0
            $res = json_model_9($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#Root'.'|'.0.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_14_idx (0 .. $#$pval)
                    {
                        my $arr_14_item = $$pval[$arr_14_idx];
                        # .'$Model#Root'.'|'.0.'%'.'<'.'|'.1.0
                        $res = json_model_9($arr_14_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_13($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.0.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.0.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.0.'%'.'/^\\$.*$/'
            $res = json_model_33($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check _jm_obj_42_map_% (.'$Model#Root'.'|'.0.'%')
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Root'.'|'.0.'%'
    $res = _jm_obj_45($val, $path, $rep);
    return $res;
}

# check _jm_obj_42_map_.in (.'$Model#Root'.'|'.0.'.in')
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Root'.'|'.0.'.in'
    $res = json_model_35($val, $path, $rep);
    return $res;
}

# check _jm_obj_42_map_.mo (.'$Model#Root'.'|'.0.'.mo')
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Root'.'|'.0.'.mo'
    $res = jm_is_integer($val) && $val >= 1;
    return $res;
}

# object .'$Model#Root'.'|'.0.'.schema'
sub _jm_obj_47($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# check _jm_obj_42_map_.schema (.'$Model#Root'.'|'.0.'.schema')
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Root'.'|'.0.'.schema'
    $res = _jm_obj_47($val, $path, $rep);
    return $res;
}

# check _jm_obj_42_map_~ (.'$Model#Root'.'|'.0.'~')
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Root'.'|'.0.'~'
    $res = json_model_4($val, $path, $rep);
    return $res;
}


# object .'$Model#Root'.'|'.0
sub _jm_obj_42($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $pfun;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Model#Root'.'|'.0.'@'
            $res = json_model_35($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (($pfun = $_jm_obj_42_map{$prop}))
        {
            # handle 8 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 3 re props
            # .'$Model#Root'.'|'.0.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_3($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Model#Root'.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_14($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_4($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Model#Root'.'|'.0.'/^(=|!=)$/'
            $res = json_model_15($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Model#Root (.'$Model#Root')
sub json_model_41($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Root'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Model#Root'.'|'.0
        $res = _jm_obj_42($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#Root'.'|'.1
            $res = _jm_obj_36($val, $path, $rep);
            if (! $res)
            {
                # .'$Model#Root'.'|'.2
                $res = _jm_obj_30($val, $path, $rep);
                if (! $res)
                {
                    # .'$Model#Root'.'|'.3
                    $res = _jm_obj_24($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Model#Root'.'|'.4
                        $res = _jm_obj_18($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$Model#Root'.'|'.5
                            $res = _jm_obj_12($val, $path, $rep);
                        }
                    }
                }
            }
        }
    }
    return $res;
}

sub _jm_re_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^((file|https?):\/\/.+|\.\/.*|\.\.\/.*)$/;
    return $res;
}

# check $Model#Url (.'$Model#Url')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    $res = jm_is_string($val) && _jm_re_9($val, $path, $rep);
    return $res;
}

sub _jm_re_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /[^A-Z0-9]/;
    return $res;
}

sub _jm_re_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\w(\w|-)*$/;
    return $res;
}

# check $Model#Identifier (.'$Model#Identifier')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Identifier'
    $res = jm_is_string($val);
    if ($res)
    {
        # .'$Model#Identifier'.'&'.0
        # "/^\\w(\\w|-)*$/"
        $res = _jm_re_11($val, $path, $rep);
        if ($res)
        {
            # .'$Model#Identifier'.'&'.1
            # "/[^A-Z0-9]/"
            $res = _jm_re_10($val, $path, $rep);
        }
    }
    return $res;
}

# object .'$Model#Transformation'.'|'.1.'.schema'
sub _jm_obj_49($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    # accept any object
    return 1;
}

# object .'$Model#Transformation'.'|'.1.'~'
sub _jm_obj_50($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Model#Transformation'.'|'.1.'~'.''
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Transformation'.'|'.1
sub _jm_obj_48($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Transformation'.'|'.1.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '.schema')
        {
            # handle may .schema property
            # .'$Model#Transformation'.'|'.1.'.schema'
            $res = _jm_obj_49($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '/')
        {
            # handle may / property
            # .'$Model#Transformation'.'|'.1.'/'
            # .'$Model#Transformation'.'|'.1.'/'.'|'.0
            $res = json_model_15($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#Transformation'.'|'.1.'/'.'|'.1
                $res = jm_is_array($pval);
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#Transformation'.'|'.1.'~'
            $res = _jm_obj_50($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '*')
        {
            # handle may * property
            # .'$Model#Transformation'.'|'.1.'*'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Transformation'.'|'.1.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Model#Transformation (.'$Model#Transformation')
sub json_model_33($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Transformation'
    # .'$Model#Transformation'.'|'.0
    $res = json_model_35($val, $path, $rep);
    if (! $res)
    {
        # .'$Model#Transformation'.'|'.1
        $res = _jm_obj_48($val, $path, $rep);
    }
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            '$DATE' => 1,
            '$TIME' => 1,
            '$DATETIME' => 1,
            '$URL' => 1,
            '$URI' => 1,
            '$UUID' => 1,
            '$EMAIL' => 1,
            '$REGEX' => 1,
            '$EXREG' => 1,
            '$NULL' => 1,
            '$BOOL' => 1,
            '$FLOAT' => 1,
            '$F16' => 1,
            '$F32' => 1,
            '$F64' => 1,
            '$NUMBER' => 1,
            '$INT' => 1,
            '$INTEGER' => 1,
            '$I8' => 1,
            '$I16' => 1,
            '$I32' => 1,
            '$I64' => 1,
            '$U8' => 1,
            '$U16' => 1,
            '$U32' => 1,
            '$U64' => 1,
            '$STRING' => 1,
            '$NONE' => 1,
            '$ANY' => 1,
        );
        %_jm_obj_42_map = (
            '!' => \&_jm_f_0,
            '#' => \&_jm_f_1,
            '$' => \&_jm_f_2,
            '%' => \&_jm_f_3,
            '.in' => \&_jm_f_4,
            '.mo' => \&_jm_f_5,
            '.schema' => \&_jm_f_6,
            '~' => \&_jm_f_7,
        );
        %check_model_map = (
            '' => \&json_model_42,
            'Model' => \&json_model_42,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %_jm_obj_42_map = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
