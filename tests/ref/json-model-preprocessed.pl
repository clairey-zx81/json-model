#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2.0b1
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


my %_jm_cst_0;
my %check_model_map;

# check $Model (.'$Model')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model'
    $res = json_model_39($val, $path, $rep);
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# check $Model#RootModel (.'$Model#RootModel')
sub json_model_39($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#RootModel'
    # .'$Model#RootModel'.'|'.0
    $res = json_model_31($val, $path, $rep);
    if (! $res)
    {
        # .'$Model#RootModel'.'|'.1
        $res = json_model_19($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#RootModel'.'|'.2
            $res = json_model_38($val, $path, $rep);
        }
    }
    return $res;
}

# check $Model#Array (.'$Model#Array')
sub json_model_19($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Array'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$Model#Array'.0
            # .'$Model#Array'.0.'|'.0
            $res = json_model_32($arr_0_item, undef, $rep);
            if (! $res)
            {
                # .'$Model#Array'.0.'|'.1
                $res = json_model_6($arr_0_item, undef, $rep);
            }
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check $Model#Comment (.'$Model#Comment')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Comment'
    # "/^#/"
    $res = jm_is_string($val) && jm_starts_with($val, '#');
    return $res;
}

# check $Model#ScalarModel (.'$Model#ScalarModel')
sub json_model_31($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#ScalarModel'
    # .'$Model#ScalarModel'.'|'.0
    $res = json_model_14($val, $path, $rep);
    if (! $res)
    {
        # .'$Model#ScalarModel'.'|'.1
        $res = json_model_15($val, $path, $rep);
    }
    return $res;
}

# check $Model#ValModel (.'$Model#ValModel')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#ValModel'
    # .'$Model#ValModel'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$Model#ValModel'.'|'.1
        $res = jm_is_boolean($val) && $val == 1;
        if (! $res)
        {
            # .'$Model#ValModel'.'|'.2
            $res = jm_is_integer($val) && $val == 0;
            if (! $res)
            {
                # .'$Model#ValModel'.'|'.3
                $res = jm_is_integer($val) && $val == 1;
                if (! $res)
                {
                    # .'$Model#ValModel'.'|'.4
                    $res = jm_is_integer($val) && $val == -1;
                    if (! $res)
                    {
                        # .'$Model#ValModel'.'|'.5
                        $res = jm_is_numeric($val) && $val == 0.0;
                        if (! $res)
                        {
                            # .'$Model#ValModel'.'|'.6
                            $res = jm_is_numeric($val) && $val == 1.0;
                            if (! $res)
                            {
                                # .'$Model#ValModel'.'|'.7
                                $res = jm_is_numeric($val) && $val == -1.0;
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# check $Model#StrModel (.'$Model#StrModel')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#StrModel'
    # .'$Model#StrModel'.'|'.0
    $res = json_model_9($val, $path, $rep);
    if (! $res)
    {
        # .'$Model#StrModel'.'|'.1
        $res = json_model_8($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#StrModel'.'|'.2
            $res = json_model_10($val, $path, $rep);
            if (! $res)
            {
                # .'$Model#StrModel'.'|'.3
                $res = json_model_5($val, $path, $rep);
                if (! $res)
                {
                    # .'$Model#StrModel'.'|'.4
                    $res = json_model_7($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Model#StrModel'.'|'.5
                        $res = jm_is_string($val) && $val eq '';
                    }
                }
            }
        }
    }
    return $res;
}


# check $Model#PreDef (.'$Model#PreDef')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#PreDef'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_0{$val};
    return $res;
}

sub _jm_re_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\$/;
    return $res;
}

# check $Model#Ref (.'$Model#Ref')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Ref'
    # "/^\\$/"
    $res = jm_is_string($val) && _jm_re_0($val, $path, $rep);
    return $res;
}

sub _jm_re_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^=(null|true|false|-?\d+(\.\d+)?([Ee]-?\d+)?)$/;
    return $res;
}

# check $Model#ValConst (.'$Model#ValConst')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#ValConst'
    # "/^=(null|true|false|-?\\d+(\\.\\d+)?([Ee]-?\\d+)?)$/"
    $res = jm_is_string($val) && _jm_re_1($val, $path, $rep);
    return $res;
}

sub _jm_re_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[_a-zA-Z0-9]/;
    return $res;
}

# check $Model#StrConst (.'$Model#StrConst')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#StrConst'
    # "/^[_a-zA-Z0-9]/"
    $res = jm_is_string($val) && _jm_re_2($val, $path, $rep);
    return $res;
}

sub _jm_xre_0_re($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\/(?<s1>.*)\/[a-z]*$/;
    return $res;
}

sub _jm_xre_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $extract;
    my $match = $val =~ /^\/(?<s1>.*)\/[a-z]*$/;
    if (! $match)
    {
        return 0;
    }
    $extract = $+{'s1'};
    if (! (jm_is_string($extract) && jm_is_valid_regex($extract, $path, $rep)))
    {
        return 0;
    }
    return 1;
}

sub _jm_xre_1_re($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\/(?<s1>.*)\/[a-z]*X[a-z]*$/;
    return $res;
}

sub _jm_xre_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $extract;
    my $match = $val =~ /^\/(?<s1>.*)\/[a-z]*X[a-z]*$/;
    if (! $match)
    {
        return 0;
    }
    $extract = $+{'s1'};
    if (! (jm_is_string($extract) && jm_is_valid_exreg($extract, $path, $rep)))
    {
        return 0;
    }
    return 1;
}

# check $Model#Regex (.'$Model#Regex')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Regex'
    $res = jm_is_string($val);
    if ($res)
    {
        # .'$Model#Regex'.'|'.0
        # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
        $res = _jm_xre_1($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#Regex'.'|'.1
            # "/^/($REGEX)/[a-z]*$/X"
            $res = _jm_xre_0($val, $path, $rep);
        }
    }
    return $res;
}

# check $Model#Model (.'$Model#Model')
sub json_model_32($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Model'
    # .'$Model#Model'.'|'.0
    $res = json_model_31($val, $path, $rep);
    if (! $res)
    {
        # .'$Model#Model'.'|'.1
        $res = json_model_19($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#Model'.'|'.2
            $res = json_model_28($val, $path, $rep);
        }
    }
    return $res;
}

# object .'$Model#Element'.'|'.4
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (json_model_6($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Element'.'|'.4.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_25($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Element'.'|'.4.'$Prop'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Element'.'|'.3
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Model#Element'.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_1_idx (0 .. $#$pval)
                {
                    my $arr_1_item = $$pval[$arr_1_idx];
                    # .'$Model#Element'.'|'.3.'^'.0
                    $res = json_model_32($arr_1_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Element'.'|'.3.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Element'.'|'.2
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$Model#Element'.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_2_idx (0 .. $#$pval)
                {
                    my $arr_2_item = $$pval[$arr_2_idx];
                    # .'$Model#Element'.'|'.2.'&'.0
                    $res = json_model_32($arr_2_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Element'.'|'.2.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Element'.'|'.1
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Model#Element'.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_3_idx (0 .. $#$pval)
                {
                    my $arr_3_item = $$pval[$arr_3_idx];
                    # .'$Model#Element'.'|'.1.'|'.0
                    $res = json_model_32($arr_3_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Element'.'|'.1.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

sub _jm_re_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^(<=|>=|<|>)$/;
    return $res;
}

sub _jm_re_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^(=|!=)$/;
    return $res;
}

# object .'$Model#Element'.'|'.0
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Model#Element'.'|'.0.'@'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$Model#Element'.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Element'.'|'.0.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_3($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Model#Element'.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_12($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_4($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Model#Element'.'|'.0.'/^(=|!=)$/'
            $res = json_model_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Model#Element (.'$Model#Element')
sub json_model_28($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Element'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Model#Element'.'|'.0
        $res = _jm_obj_4($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#Element'.'|'.1
            $res = _jm_obj_3($val, $path, $rep);
            if (! $res)
            {
                # .'$Model#Element'.'|'.2
                $res = _jm_obj_2($val, $path, $rep);
                if (! $res)
                {
                    # .'$Model#Element'.'|'.3
                    $res = _jm_obj_1($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Model#Element'.'|'.4
                        $res = _jm_obj_0($val, $path, $rep);
                    }
                }
            }
        }
    }
    return $res;
}

# check $Model#CmpValue (.'$Model#CmpValue')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#CmpValue'
    # .'$Model#CmpValue'.'|'.0
    $res = jm_is_integer($val);
    if (! $res)
    {
        # .'$Model#CmpValue'.'|'.1
        $res = jm_is_numeric($val);
        if (! $res)
        {
            # .'$Model#CmpValue'.'|'.2
            $res = jm_is_string($val);
        }
    }
    return $res;
}

# check $Model#EqValue (.'$Model#EqValue')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#EqValue'
    # .'$Model#EqValue'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$Model#EqValue'.'|'.1
        $res = jm_is_boolean($val);
        if (! $res)
        {
            # .'$Model#EqValue'.'|'.2
            $res = json_model_12($val, $path, $rep);
        }
    }
    return $res;
}

sub _jm_re_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[?!]/;
    return $res;
}

# check $Model#Prop (.'$Model#Prop')
sub json_model_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Prop'
    # .'$Model#Prop'.'|'.0
    # "/^[?!]/"
    $res = jm_is_string($val) && _jm_re_5($val, $path, $rep);
    if (! $res)
    {
        # .'$Model#Prop'.'|'.1
        $res = json_model_9($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#Prop'.'|'.2
            $res = json_model_10($val, $path, $rep);
            if (! $res)
            {
                # .'$Model#Prop'.'|'.3
                $res = json_model_7($val, $path, $rep);
                if (! $res)
                {
                    # .'$Model#Prop'.'|'.4
                    $res = json_model_11($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Model#Prop'.'|'.5
                        $res = jm_is_string($val) && $val eq '';
                    }
                }
            }
        }
    }
    return $res;
}

sub _jm_re_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\..+$/;
    return $res;
}

# check $Model#Name (.'$Model#Name')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Name'
    # "/^\\..+$/"
    $res = jm_is_string($val) && _jm_re_6($val, $path, $rep);
    return $res;
}

sub _jm_re_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /./;
    return $res;
}

# object .'$Model#Root'.'|'.4.'$'
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '')
        {
            # handle may  property
            # .'$Model#Root'.'|'.4.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.4.'$'.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_7($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.4.'$'.'/./'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

sub _jm_re_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^([#|&^+\/*@~=\$%]|[<>!]=?)$/;
    return $res;
}

# object .'$Model#Root'.'|'.4.'%'
sub _jm_obj_7($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '<')
        {
            # handle may < property
            # .'$Model#Root'.'|'.4.'%'.'<'
            # .'$Model#Root'.'|'.4.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#Root'.'|'.4.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_4_idx (0 .. $#$pval)
                    {
                        my $arr_4_item = $$pval[$arr_4_idx];
                        # .'$Model#Root'.'|'.4.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_4_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Root'.'|'.4.'%'.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Root'.'|'.4.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_8($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.4
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#Root'.'|'.4.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#Root'.'|'.4.'$'
            $res = _jm_obj_6($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#Root'.'|'.4.'%'
            $res = _jm_obj_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Root'.'|'.4.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_25($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Root'.'|'.4.'$Prop'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.3.'$'
sub _jm_obj_9($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '')
        {
            # handle may  property
            # .'$Model#Root'.'|'.3.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.3.'$'.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_7($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.3.'$'.'/./'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.3.'%'
sub _jm_obj_10($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '<')
        {
            # handle may < property
            # .'$Model#Root'.'|'.3.'%'.'<'
            # .'$Model#Root'.'|'.3.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#Root'.'|'.3.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_6_idx (0 .. $#$pval)
                    {
                        my $arr_6_item = $$pval[$arr_6_idx];
                        # .'$Model#Root'.'|'.3.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_6_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Root'.'|'.3.'%'.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Root'.'|'.3.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_8($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.3
sub _jm_obj_8($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Model#Root'.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_5_idx (0 .. $#$pval)
                {
                    my $arr_5_item = $$pval[$arr_5_idx];
                    # .'$Model#Root'.'|'.3.'^'.0
                    $res = json_model_32($arr_5_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#Root'.'|'.3.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#Root'.'|'.3.'$'
            $res = _jm_obj_9($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#Root'.'|'.3.'%'
            $res = _jm_obj_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.3.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Root'.'|'.2.'$'
sub _jm_obj_12($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '')
        {
            # handle may  property
            # .'$Model#Root'.'|'.2.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.2.'$'.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_7($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.2.'$'.'/./'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.2.'%'
sub _jm_obj_13($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '<')
        {
            # handle may < property
            # .'$Model#Root'.'|'.2.'%'.'<'
            # .'$Model#Root'.'|'.2.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#Root'.'|'.2.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_8_idx (0 .. $#$pval)
                    {
                        my $arr_8_item = $$pval[$arr_8_idx];
                        # .'$Model#Root'.'|'.2.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_8_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Root'.'|'.2.'%'.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Root'.'|'.2.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_8($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.2
sub _jm_obj_11($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$Model#Root'.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_7_idx (0 .. $#$pval)
                {
                    my $arr_7_item = $$pval[$arr_7_idx];
                    # .'$Model#Root'.'|'.2.'&'.0
                    $res = json_model_32($arr_7_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#Root'.'|'.2.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#Root'.'|'.2.'$'
            $res = _jm_obj_12($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#Root'.'|'.2.'%'
            $res = _jm_obj_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.2.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Root'.'|'.1.'$'
sub _jm_obj_15($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '')
        {
            # handle may  property
            # .'$Model#Root'.'|'.1.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.1.'$'.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_7($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.1.'$'.'/./'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.1.'%'
sub _jm_obj_16($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '<')
        {
            # handle may < property
            # .'$Model#Root'.'|'.1.'%'.'<'
            # .'$Model#Root'.'|'.1.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#Root'.'|'.1.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_10_idx (0 .. $#$pval)
                    {
                        my $arr_10_item = $$pval[$arr_10_idx];
                        # .'$Model#Root'.'|'.1.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_10_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Root'.'|'.1.'%'.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Root'.'|'.1.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_8($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.1
sub _jm_obj_14($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Model#Root'.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_9_idx (0 .. $#$pval)
                {
                    my $arr_9_item = $$pval[$arr_9_idx];
                    # .'$Model#Root'.'|'.1.'|'.0
                    $res = json_model_32($arr_9_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#Root'.'|'.1.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#Root'.'|'.1.'$'
            $res = _jm_obj_15($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#Root'.'|'.1.'%'
            $res = _jm_obj_16($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.1.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Root'.'|'.0.'$'
sub _jm_obj_18($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '')
        {
            # handle may  property
            # .'$Model#Root'.'|'.0.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.0.'$'.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_7($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Model#Root'.'|'.0.'$'.'/./'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.0.'%'
sub _jm_obj_19($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '<')
        {
            # handle may < property
            # .'$Model#Root'.'|'.0.'%'.'<'
            # .'$Model#Root'.'|'.0.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#Root'.'|'.0.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_11_idx (0 .. $#$pval)
                    {
                        my $arr_11_item = $$pval[$arr_11_idx];
                        # .'$Model#Root'.'|'.0.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_11_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Root'.'|'.0.'%'.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 2 key props
            # .'$Model#Root'.'|'.0.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_8($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Root'.'|'.0
sub _jm_obj_17($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Model#Root'.'|'.0.'@'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#Root'.'|'.0.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#Root'.'|'.0.'$'
            $res = _jm_obj_18($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#Root'.'|'.0.'%'
            $res = _jm_obj_19($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$Model#Root'.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Root'.'|'.0.'$Comment'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_3($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_12($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_4($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Model#Root'.'|'.0.'/^(=|!=)$/'
            $res = json_model_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Model#Root (.'$Model#Root')
sub json_model_38($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Root'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Model#Root'.'|'.0
        $res = _jm_obj_17($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#Root'.'|'.1
            $res = _jm_obj_14($val, $path, $rep);
            if (! $res)
            {
                # .'$Model#Root'.'|'.2
                $res = _jm_obj_11($val, $path, $rep);
                if (! $res)
                {
                    # .'$Model#Root'.'|'.3
                    $res = _jm_obj_8($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Model#Root'.'|'.4
                        $res = _jm_obj_5($val, $path, $rep);
                    }
                }
            }
        }
    }
    return $res;
}

sub _jm_re_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^((file|https?):\/\/.+|\.\/.*|\.\.\/.*)$/;
    return $res;
}

# check $Model#Url (.'$Model#Url')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    $res = jm_is_string($val) && _jm_re_9($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            '$DATE' => 1,
            '$TIME' => 1,
            '$DATETIME' => 1,
            '$URL' => 1,
            '$URI' => 1,
            '$UUID' => 1,
            '$EMAIL' => 1,
            '$REGEX' => 1,
            '$EXREG' => 1,
            '$NULL' => 1,
            '$BOOL' => 1,
            '$FLOAT' => 1,
            '$F32' => 1,
            '$F64' => 1,
            '$NUMBER' => 1,
            '$INT' => 1,
            '$INTEGER' => 1,
            '$I32' => 1,
            '$I64' => 1,
            '$U32' => 1,
            '$U64' => 1,
            '$STRING' => 1,
            '$NONE' => 1,
            '$ANY' => 1,
        );
        %check_model_map = (
            '' => \&json_model_1,
            'Model' => \&json_model_3,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
