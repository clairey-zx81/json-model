#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_3($$$);
sub json_model_1($$$);
my %_jm_cst_0;
sub _jm_xre_0($$$);
sub _jm_xre_1($$$);
sub json_model_41($$$);
sub json_model_4($$$);
sub json_model_6($$$);
sub json_model_9($$$);
sub json_model_10($$$);
sub json_model_11($$$);
sub json_model_13($$$);
sub json_model_14($$$);
sub json_model_15($$$);
my %_jm_cst_1;
sub json_model_20($$$);
sub json_model_7($$$);
sub json_model_27($$$);
my %_jm_cst_2;
sub json_model_34($$$);
my %check_model_map;

# check $Model (.'$Model')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model'
    $res = json_model_41($val, $path, $rep);
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_3($val, $path, $rep);
    return $res;
}

# object .'$Model#RootModel'.'|'.4.'$'
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.4.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Model#RootModel'.'|'.4.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#RootModel'.'|'.4.'$'.'$Identifier'
            $res = json_model_34($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.4.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

sub _jm_re_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^([#|&^+\/*@~=\$%]|[<>!]=?)$/;
    return $res;
}

# object .'$Model#RootModel'.'|'.4.'%'
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.4.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Model#RootModel'.'|'.4.'%'.'<'
            # .'$Model#RootModel'.'|'.4.'%'.'<'.'|'.0
            $res = json_model_9($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#RootModel'.'|'.4.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_0_idx (0 .. $#$pval)
                    {
                        my $arr_0_item = $$pval[$arr_0_idx];
                        # .'$Model#RootModel'.'|'.4.'%'.'<'.'|'.1.0
                        $res = json_model_9($arr_0_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_13($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#RootModel'.'|'.4.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_0($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.4.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#RootModel'.'|'.4
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#RootModel'.'|'.4.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#RootModel'.'|'.4.'$'
            $res = _jm_obj_1($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#RootModel'.'|'.4.'%'
            $res = _jm_obj_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.4.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_27($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#RootModel'.'|'.4.'$Prop'
            $res = json_model_34($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.4.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#RootModel'.'|'.3.'$'
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.3.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Model#RootModel'.'|'.3.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#RootModel'.'|'.3.'$'.'$Identifier'
            $res = json_model_34($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.3.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#RootModel'.'|'.3.'%'
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.3.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Model#RootModel'.'|'.3.'%'.'<'
            # .'$Model#RootModel'.'|'.3.'%'.'<'.'|'.0
            $res = json_model_9($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#RootModel'.'|'.3.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_2_idx (0 .. $#$pval)
                    {
                        my $arr_2_item = $$pval[$arr_2_idx];
                        # .'$Model#RootModel'.'|'.3.'%'.'<'.'|'.1.0
                        $res = json_model_9($arr_2_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_13($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#RootModel'.'|'.3.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_0($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.3.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#RootModel'.'|'.3
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Model#RootModel'.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_1_idx (0 .. $#$pval)
                {
                    my $arr_1_item = $$pval[$arr_1_idx];
                    # .'$Model#RootModel'.'|'.3.'^'.0
                    $res = json_model_34($arr_1_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#RootModel'.'|'.3.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#RootModel'.'|'.3.'$'
            $res = _jm_obj_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#RootModel'.'|'.3.'%'
            $res = _jm_obj_5($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.3.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.3.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#RootModel'.'|'.2.'$'
sub _jm_obj_7($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.2.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Model#RootModel'.'|'.2.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#RootModel'.'|'.2.'$'.'$Identifier'
            $res = json_model_34($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.2.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#RootModel'.'|'.2.'%'
sub _jm_obj_8($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.2.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Model#RootModel'.'|'.2.'%'.'<'
            # .'$Model#RootModel'.'|'.2.'%'.'<'.'|'.0
            $res = json_model_9($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#RootModel'.'|'.2.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_4_idx (0 .. $#$pval)
                    {
                        my $arr_4_item = $$pval[$arr_4_idx];
                        # .'$Model#RootModel'.'|'.2.'%'.'<'.'|'.1.0
                        $res = json_model_9($arr_4_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_13($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#RootModel'.'|'.2.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_0($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.2.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#RootModel'.'|'.2
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$Model#RootModel'.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_3_idx (0 .. $#$pval)
                {
                    my $arr_3_item = $$pval[$arr_3_idx];
                    # .'$Model#RootModel'.'|'.2.'&'.0
                    $res = json_model_34($arr_3_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#RootModel'.'|'.2.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#RootModel'.'|'.2.'$'
            $res = _jm_obj_7($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#RootModel'.'|'.2.'%'
            $res = _jm_obj_8($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.2.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.2.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#RootModel'.'|'.1.'$'
sub _jm_obj_10($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.1.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Model#RootModel'.'|'.1.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#RootModel'.'|'.1.'$'.'$Identifier'
            $res = json_model_34($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.1.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#RootModel'.'|'.1.'%'
sub _jm_obj_11($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.1.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Model#RootModel'.'|'.1.'%'.'<'
            # .'$Model#RootModel'.'|'.1.'%'.'<'.'|'.0
            $res = json_model_9($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#RootModel'.'|'.1.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_6_idx (0 .. $#$pval)
                    {
                        my $arr_6_item = $$pval[$arr_6_idx];
                        # .'$Model#RootModel'.'|'.1.'%'.'<'.'|'.1.0
                        $res = json_model_9($arr_6_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_13($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#RootModel'.'|'.1.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_0($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.1.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#RootModel'.'|'.1
sub _jm_obj_9($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Model#RootModel'.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_5_idx (0 .. $#$pval)
                {
                    my $arr_5_item = $$pval[$arr_5_idx];
                    # .'$Model#RootModel'.'|'.1.'|'.0
                    $res = json_model_34($arr_5_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#RootModel'.'|'.1.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#RootModel'.'|'.1.'$'
            $res = _jm_obj_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#RootModel'.'|'.1.'%'
            $res = _jm_obj_11($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.1.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.1.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#RootModel'.'|'.0.'$'
sub _jm_obj_13($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.0.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Model#RootModel'.'|'.0.'$'.''
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_6($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#RootModel'.'|'.0.'$'.'$Identifier'
            $res = json_model_34($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.0.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#RootModel'.'|'.0.'%'
sub _jm_obj_14($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.0.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Model#RootModel'.'|'.0.'%'.'<'
            # .'$Model#RootModel'.'|'.0.'%'.'<'.'|'.0
            $res = json_model_9($pval, undef, $rep);
            if (! $res)
            {
                # .'$Model#RootModel'.'|'.0.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_7_idx (0 .. $#$pval)
                    {
                        my $arr_7_item = $$pval[$arr_7_idx];
                        # .'$Model#RootModel'.'|'.0.'%'.'<'.'|'.1.0
                        $res = json_model_9($arr_7_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_13($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#RootModel'.'|'.0.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_0($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#RootModel'.'|'.0.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

sub _jm_re_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^(<=|>=|<|>)$/;
    return $res;
}

sub _jm_re_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^(=|!=)$/;
    return $res;
}

# object .'$Model#RootModel'.'|'.0
sub _jm_obj_12($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Model#RootModel'.'|'.0.'@'
            $res = json_model_34($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Model#RootModel'.'|'.0.'~'
            $res = json_model_4($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Model#RootModel'.'|'.0.'$'
            $res = _jm_obj_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Model#RootModel'.'|'.0.'%'
            $res = _jm_obj_14($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#RootModel'.'|'.0.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$Model#RootModel'.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 3 re props
            # .'$Model#RootModel'.'|'.0.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Model#RootModel'.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_14($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_2($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Model#RootModel'.'|'.0.'/^(=|!=)$/'
            $res = json_model_15($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}


sub _jm_xre_0_re($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\/(?<s1>.*)\/[a-z]*$/;
    return $res;
}

sub _jm_xre_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $extract;
    my $match = $val =~ /^\/(?<s1>.*)\/[a-z]*$/;
    if (! $match)
    {
        return 0;
    }
    $extract = $+{'s1'};
    if (! (jm_is_string($extract) && jm_is_valid_regex($extract, $path, $rep)))
    {
        return 0;
    }
    return 1;
}

sub _jm_xre_1_re($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\/(?<s1>.*)\/[a-z]*X[a-z]*$/;
    return $res;
}

sub _jm_xre_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $extract;
    my $match = $val =~ /^\/(?<s1>.*)\/[a-z]*X[a-z]*$/;
    if (! $match)
    {
        return 0;
    }
    $extract = $+{'s1'};
    if (! (jm_is_string($extract) && jm_is_valid_exreg($extract, $path, $rep)))
    {
        return 0;
    }
    return 1;
}

# check $Model#RootModel (.'$Model#RootModel')
sub json_model_41($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#RootModel'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Model#RootModel'.'|'.0
        $res = _jm_obj_12($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#RootModel'.'|'.1
            $res = _jm_obj_9($val, $path, $rep);
            if (! $res)
            {
                # .'$Model#RootModel'.'|'.2
                $res = _jm_obj_6($val, $path, $rep);
                if (! $res)
                {
                    # .'$Model#RootModel'.'|'.3
                    $res = _jm_obj_3($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Model#RootModel'.'|'.4
                        $res = _jm_obj_0($val, $path, $rep);
                    }
                }
            }
        }
    }
    if (! $res)
    {
        $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_0{$val};
        if (! $res)
        {
            # .'$Model#RootModel'.'|'.0
            $res = !defined($val);
            if (! $res)
            {
                # .'$Model#RootModel'.'|'.1
                $res = jm_is_boolean($val) && $val == 1;
                if (! $res)
                {
                    # .'$Model#RootModel'.'|'.2
                    $res = jm_is_integer($val) && $val == 0;
                    if (! $res)
                    {
                        # .'$Model#RootModel'.'|'.3
                        $res = jm_is_integer($val) && $val == 1;
                        if (! $res)
                        {
                            # .'$Model#RootModel'.'|'.4
                            $res = jm_is_integer($val) && $val == -1;
                            if (! $res)
                            {
                                # .'$Model#RootModel'.'|'.5
                                $res = jm_is_numeric($val) && $val == 0.0;
                                if (! $res)
                                {
                                    # .'$Model#RootModel'.'|'.6
                                    $res = jm_is_numeric($val) && $val == 1.0;
                                    if (! $res)
                                    {
                                        # .'$Model#RootModel'.'|'.7
                                        $res = jm_is_numeric($val) && $val == -1.0;
                                        if (! $res)
                                        {
                                            # .'$Model#RootModel'.'|'.8
                                            $res = json_model_11($val, $path, $rep);
                                            if (! $res)
                                            {
                                                # .'$Model#RootModel'.'|'.9
                                                $res = json_model_10($val, $path, $rep);
                                                if (! $res)
                                                {
                                                    # .'$Model#RootModel'.'|'.10
                                                    # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                                                    $res = jm_is_string($val) && _jm_xre_1($val, $path, $rep);
                                                    if (! $res)
                                                    {
                                                        # .'$Model#RootModel'.'|'.11
                                                        # "/^/($REGEX)/[a-z]*$/X"
                                                        $res = jm_is_string($val) && _jm_xre_0($val, $path, $rep);
                                                        if (! $res)
                                                        {
                                                            # .'$Model#RootModel'.'|'.12
                                                            $res = json_model_9($val, $path, $rep);
                                                            if (! $res)
                                                            {
                                                                # .'$Model#RootModel'.'|'.13
                                                                $res = json_model_20($val, $path, $rep);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}

sub _jm_re_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^((file|https?):\/\/.+|\.\/.*|\.\.\/.*)$/;
    return $res;
}

# check $Model#Url (.'$Model#Url')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    $res = jm_is_string($val) && _jm_re_3($val, $path, $rep);
    return $res;
}

sub _jm_re_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /[^A-Z0-9]/;
    return $res;
}

sub _jm_re_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\w+$/;
    return $res;
}

# check $Model#Identifier (.'$Model#Identifier')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Identifier'
    $res = jm_is_string($val);
    if ($res)
    {
        # .'$Model#Identifier'.'&'.0
        # "/^\\w+$/"
        $res = _jm_re_5($val, $path, $rep);
        if ($res)
        {
            # .'$Model#Identifier'.'&'.1
            # "/[^A-Z0-9]/"
            $res = _jm_re_4($val, $path, $rep);
        }
    }
    return $res;
}

sub _jm_re_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\$./;
    return $res;
}

# check $Model#Ref (.'$Model#Ref')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Ref'
    # "/^\\$./"
    $res = jm_is_string($val) && _jm_re_6($val, $path, $rep);
    return $res;
}

sub _jm_re_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^=(null|true|false|[-+]?\d+(\.\d+)?([Ee][-+]?\d+)?)$/;
    return $res;
}

# check $Model#ValConst (.'$Model#ValConst')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#ValConst'
    # "/^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$/"
    $res = jm_is_string($val) && _jm_re_7($val, $path, $rep);
    return $res;
}

sub _jm_re_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[A-Za-z0-9_]/;
    return $res;
}

# check $Model#StrConst (.'$Model#StrConst')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#StrConst'
    # "/^[A-Za-z0-9_]/"
    $res = jm_is_string($val) && _jm_re_8($val, $path, $rep);
    return $res;
}

sub _jm_re_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\..+$/;
    return $res;
}

# check $Model#Name (.'$Model#Name')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Name'
    # "/^\\..+$/"
    $res = jm_is_string($val) && _jm_re_9($val, $path, $rep);
    return $res;
}

# check $Model#CmpValue (.'$Model#CmpValue')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#CmpValue'
    # .'$Model#CmpValue'.'|'.0
    $res = jm_is_integer($val);
    if (! $res)
    {
        # .'$Model#CmpValue'.'|'.1
        $res = jm_is_numeric($val);
        if (! $res)
        {
            # .'$Model#CmpValue'.'|'.2
            $res = jm_is_string($val);
        }
    }
    return $res;
}

# check $Model#EqValue (.'$Model#EqValue')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#EqValue'
    # .'$Model#EqValue'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$Model#EqValue'.'|'.1
        $res = jm_is_boolean($val);
        if (! $res)
        {
            # .'$Model#EqValue'.'|'.2
            $res = jm_is_integer($val);
            if (! $res)
            {
                # .'$Model#EqValue'.'|'.3
                $res = jm_is_numeric($val);
                if (! $res)
                {
                    # .'$Model#EqValue'.'|'.4
                    $res = jm_is_string($val);
                }
            }
        }
    }
    return $res;
}

# object .'$Model#Array'.0.'|'.4
sub _jm_obj_15($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Array'.0.'|'.4.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_27($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Array'.0.'|'.4.'$Prop'
            $res = json_model_34($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Array'.0.'|'.4.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Array'.0.'|'.3
sub _jm_obj_16($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Model#Array'.0.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_9_idx (0 .. $#$pval)
                {
                    my $arr_9_item = $$pval[$arr_9_idx];
                    # .'$Model#Array'.0.'|'.3.'^'.0
                    $res = json_model_34($arr_9_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Array'.0.'|'.3.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Array'.0.'|'.3.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Array'.0.'|'.2
sub _jm_obj_17($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$Model#Array'.0.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_10_idx (0 .. $#$pval)
                {
                    my $arr_10_item = $$pval[$arr_10_idx];
                    # .'$Model#Array'.0.'|'.2.'&'.0
                    $res = json_model_34($arr_10_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Array'.0.'|'.2.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Array'.0.'|'.2.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Array'.0.'|'.1
sub _jm_obj_18($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Model#Array'.0.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_11_idx (0 .. $#$pval)
                {
                    my $arr_11_item = $$pval[$arr_11_idx];
                    # .'$Model#Array'.0.'|'.1.'|'.0
                    $res = json_model_34($arr_11_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Array'.0.'|'.1.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Array'.0.'|'.1.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Array'.0.'|'.0
sub _jm_obj_19($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Model#Array'.0.'|'.0.'@'
            $res = json_model_34($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Array'.0.'|'.0.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$Model#Array'.0.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 3 re props
            # .'$Model#Array'.0.'|'.0.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Model#Array'.0.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_14($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_2($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Model#Array'.0.'|'.0.'/^(=|!=)$/'
            $res = json_model_15($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}


# check $Model#Array (.'$Model#Array')
sub json_model_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Array'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_8_idx (0 .. $#$val)
        {
            my $arr_8_item = $$val[$arr_8_idx];
            # .'$Model#Array'.0
            $res = jm_is_object($arr_8_item);
            if ($res)
            {
                # .'$Model#Array'.0.'|'.0
                $res = _jm_obj_19($arr_8_item, undef, $rep);
                if (! $res)
                {
                    # .'$Model#Array'.0.'|'.1
                    $res = _jm_obj_18($arr_8_item, undef, $rep);
                    if (! $res)
                    {
                        # .'$Model#Array'.0.'|'.2
                        $res = _jm_obj_17($arr_8_item, undef, $rep);
                        if (! $res)
                        {
                            # .'$Model#Array'.0.'|'.3
                            $res = _jm_obj_16($arr_8_item, undef, $rep);
                            if (! $res)
                            {
                                # .'$Model#Array'.0.'|'.4
                                $res = _jm_obj_15($arr_8_item, undef, $rep);
                            }
                        }
                    }
                }
            }
            if (! $res)
            {
                $res = jm_is_scalar($arr_8_item) && jm_is_string($arr_8_item) && exists $_jm_cst_1{$arr_8_item};
                if (! $res)
                {
                    # .'$Model#Array'.0.'|'.0
                    $res = !defined($arr_8_item);
                    if (! $res)
                    {
                        # .'$Model#Array'.0.'|'.1
                        $res = jm_is_boolean($arr_8_item) && $arr_8_item == 1;
                        if (! $res)
                        {
                            # .'$Model#Array'.0.'|'.2
                            $res = jm_is_integer($arr_8_item) && $arr_8_item == 0;
                            if (! $res)
                            {
                                # .'$Model#Array'.0.'|'.3
                                $res = jm_is_integer($arr_8_item) && $arr_8_item == 1;
                                if (! $res)
                                {
                                    # .'$Model#Array'.0.'|'.4
                                    $res = jm_is_integer($arr_8_item) && $arr_8_item == -1;
                                    if (! $res)
                                    {
                                        # .'$Model#Array'.0.'|'.5
                                        $res = jm_is_numeric($arr_8_item) && $arr_8_item == 0.0;
                                        if (! $res)
                                        {
                                            # .'$Model#Array'.0.'|'.6
                                            $res = jm_is_numeric($arr_8_item) && $arr_8_item == 1.0;
                                            if (! $res)
                                            {
                                                # .'$Model#Array'.0.'|'.7
                                                $res = jm_is_numeric($arr_8_item) && $arr_8_item == -1.0;
                                                if (! $res)
                                                {
                                                    # .'$Model#Array'.0.'|'.8
                                                    $res = json_model_11($arr_8_item, undef, $rep);
                                                    if (! $res)
                                                    {
                                                        # .'$Model#Array'.0.'|'.9
                                                        $res = json_model_10($arr_8_item, undef, $rep);
                                                        if (! $res)
                                                        {
                                                            # .'$Model#Array'.0.'|'.10
                                                            # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                                                            $res = jm_is_string($arr_8_item) && _jm_xre_1($arr_8_item, undef, $rep);
                                                            if (! $res)
                                                            {
                                                                # .'$Model#Array'.0.'|'.11
                                                                # "/^/($REGEX)/[a-z]*$/X"
                                                                $res = jm_is_string($arr_8_item) && _jm_xre_0($arr_8_item, undef, $rep);
                                                                if (! $res)
                                                                {
                                                                    # .'$Model#Array'.0.'|'.12
                                                                    $res = json_model_9($arr_8_item, undef, $rep);
                                                                    if (! $res)
                                                                    {
                                                                        # .'$Model#Array'.0.'|'.13
                                                                        $res = json_model_20($arr_8_item, undef, $rep);
                                                                        if (! $res)
                                                                        {
                                                                            # .'$Model#Array'.0.'|'.14
                                                                            $res = json_model_7($arr_8_item, undef, $rep);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check $Model#ArrayComment (.'$Model#ArrayComment')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#ArrayComment'
    # "/^#/"
    $res = jm_is_string($val) && jm_starts_with($val, '#');
    return $res;
}

sub _jm_re_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[?!]/;
    return $res;
}

# check $Model#Prop (.'$Model#Prop')
sub json_model_27($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Prop'
    # .'$Model#Prop'.'|'.0
    # "/^[?!]/"
    $res = jm_is_string($val) && _jm_re_10($val, $path, $rep);
    if (! $res)
    {
        # .'$Model#Prop'.'|'.1
        $res = json_model_11($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#Prop'.'|'.2
            # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
            $res = jm_is_string($val) && _jm_xre_1($val, $path, $rep);
            if (! $res)
            {
                # .'$Model#Prop'.'|'.3
                # "/^/($REGEX)/[a-z]*$/X"
                $res = jm_is_string($val) && _jm_xre_0($val, $path, $rep);
                if (! $res)
                {
                    # .'$Model#Prop'.'|'.4
                    $res = json_model_9($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Model#Prop'.'|'.5
                        $res = json_model_13($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$Model#Prop'.'|'.6
                            $res = jm_is_string($val) && $val eq '';
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# object .'$Model#Model'.'|'.4
sub _jm_obj_20($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Model'.'|'.4.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_27($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model#Model'.'|'.4.'$Prop'
            $res = json_model_34($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Model'.'|'.4.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model#Model'.'|'.3
sub _jm_obj_21($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Model#Model'.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_12_idx (0 .. $#$pval)
                {
                    my $arr_12_item = $$pval[$arr_12_idx];
                    # .'$Model#Model'.'|'.3.'^'.0
                    $res = json_model_34($arr_12_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Model'.'|'.3.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Model'.'|'.3.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Model'.'|'.2
sub _jm_obj_22($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$Model#Model'.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_13_idx (0 .. $#$pval)
                {
                    my $arr_13_item = $$pval[$arr_13_idx];
                    # .'$Model#Model'.'|'.2.'&'.0
                    $res = json_model_34($arr_13_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Model'.'|'.2.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Model'.'|'.2.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Model'.'|'.1
sub _jm_obj_23($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Model#Model'.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_14_idx (0 .. $#$pval)
                {
                    my $arr_14_item = $$pval[$arr_14_idx];
                    # .'$Model#Model'.'|'.1.'|'.0
                    $res = json_model_34($arr_14_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Model'.'|'.1.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model#Model'.'|'.1.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model#Model'.'|'.0
sub _jm_obj_24($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Model#Model'.'|'.0.'@'
            $res = json_model_34($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model#Model'.'|'.0.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$Model#Model'.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 3 re props
            # .'$Model#Model'.'|'.0.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_1($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Model#Model'.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_14($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_2($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Model#Model'.'|'.0.'/^(=|!=)$/'
            $res = json_model_15($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}


# check $Model#Model (.'$Model#Model')
sub json_model_34($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model#Model'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Model#Model'.'|'.0
        $res = _jm_obj_24($val, $path, $rep);
        if (! $res)
        {
            # .'$Model#Model'.'|'.1
            $res = _jm_obj_23($val, $path, $rep);
            if (! $res)
            {
                # .'$Model#Model'.'|'.2
                $res = _jm_obj_22($val, $path, $rep);
                if (! $res)
                {
                    # .'$Model#Model'.'|'.3
                    $res = _jm_obj_21($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Model#Model'.'|'.4
                        $res = _jm_obj_20($val, $path, $rep);
                    }
                }
            }
        }
    }
    if (! $res)
    {
        $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_2{$val};
        if (! $res)
        {
            # .'$Model#Model'.'|'.0
            $res = !defined($val);
            if (! $res)
            {
                # .'$Model#Model'.'|'.1
                $res = jm_is_boolean($val) && $val == 1;
                if (! $res)
                {
                    # .'$Model#Model'.'|'.2
                    $res = jm_is_integer($val) && $val == 0;
                    if (! $res)
                    {
                        # .'$Model#Model'.'|'.3
                        $res = jm_is_integer($val) && $val == 1;
                        if (! $res)
                        {
                            # .'$Model#Model'.'|'.4
                            $res = jm_is_integer($val) && $val == -1;
                            if (! $res)
                            {
                                # .'$Model#Model'.'|'.5
                                $res = jm_is_numeric($val) && $val == 0.0;
                                if (! $res)
                                {
                                    # .'$Model#Model'.'|'.6
                                    $res = jm_is_numeric($val) && $val == 1.0;
                                    if (! $res)
                                    {
                                        # .'$Model#Model'.'|'.7
                                        $res = jm_is_numeric($val) && $val == -1.0;
                                        if (! $res)
                                        {
                                            # .'$Model#Model'.'|'.8
                                            $res = json_model_11($val, $path, $rep);
                                            if (! $res)
                                            {
                                                # .'$Model#Model'.'|'.9
                                                $res = json_model_10($val, $path, $rep);
                                                if (! $res)
                                                {
                                                    # .'$Model#Model'.'|'.10
                                                    # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                                                    $res = jm_is_string($val) && _jm_xre_1($val, $path, $rep);
                                                    if (! $res)
                                                    {
                                                        # .'$Model#Model'.'|'.11
                                                        # "/^/($REGEX)/[a-z]*$/X"
                                                        $res = jm_is_string($val) && _jm_xre_0($val, $path, $rep);
                                                        if (! $res)
                                                        {
                                                            # .'$Model#Model'.'|'.12
                                                            $res = json_model_9($val, $path, $rep);
                                                            if (! $res)
                                                            {
                                                                # .'$Model#Model'.'|'.13
                                                                $res = json_model_20($val, $path, $rep);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            '$DATE' => 1,
            '$TIME' => 1,
            '$DATETIME' => 1,
            '$URL' => 1,
            '$URI' => 1,
            '$UUID' => 1,
            '$EMAIL' => 1,
            '$REGEX' => 1,
            '$EXREG' => 1,
            '$NULL' => 1,
            '$BOOL' => 1,
            '$FLOAT' => 1,
            '$F16' => 1,
            '$F32' => 1,
            '$F64' => 1,
            '$NUMBER' => 1,
            '$INT' => 1,
            '$INTEGER' => 1,
            '$I8' => 1,
            '$I16' => 1,
            '$I32' => 1,
            '$I64' => 1,
            '$U8' => 1,
            '$U16' => 1,
            '$U32' => 1,
            '$U64' => 1,
            '$STRING' => 1,
            '$NONE' => 1,
            '$ANY' => 1,
            '' => 1,
        );
        %_jm_cst_1 = (
            '$DATE' => 1,
            '$TIME' => 1,
            '$DATETIME' => 1,
            '$URL' => 1,
            '$URI' => 1,
            '$UUID' => 1,
            '$EMAIL' => 1,
            '$REGEX' => 1,
            '$EXREG' => 1,
            '$NULL' => 1,
            '$BOOL' => 1,
            '$FLOAT' => 1,
            '$F16' => 1,
            '$F32' => 1,
            '$F64' => 1,
            '$NUMBER' => 1,
            '$INT' => 1,
            '$INTEGER' => 1,
            '$I8' => 1,
            '$I16' => 1,
            '$I32' => 1,
            '$I64' => 1,
            '$U8' => 1,
            '$U16' => 1,
            '$U32' => 1,
            '$U64' => 1,
            '$STRING' => 1,
            '$NONE' => 1,
            '$ANY' => 1,
            '' => 1,
        );
        %_jm_cst_2 = (
            '$DATE' => 1,
            '$TIME' => 1,
            '$DATETIME' => 1,
            '$URL' => 1,
            '$URI' => 1,
            '$UUID' => 1,
            '$EMAIL' => 1,
            '$REGEX' => 1,
            '$EXREG' => 1,
            '$NULL' => 1,
            '$BOOL' => 1,
            '$FLOAT' => 1,
            '$F16' => 1,
            '$F32' => 1,
            '$F64' => 1,
            '$NUMBER' => 1,
            '$INT' => 1,
            '$INTEGER' => 1,
            '$I8' => 1,
            '$I16' => 1,
            '$I32' => 1,
            '$I64' => 1,
            '$U8' => 1,
            '$U16' => 1,
            '$U32' => 1,
            '$U64' => 1,
            '$STRING' => 1,
            '$NONE' => 1,
            '$ANY' => 1,
            '' => 1,
        );
        %check_model_map = (
            '' => \&json_model_3,
            'Model' => \&json_model_3,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %_jm_cst_1 = ();
        %_jm_cst_2 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
