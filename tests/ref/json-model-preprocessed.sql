--
-- Generated by JSON Model Compiler version 2
-- see https://github.com/clairey-zx81/json-model
--
-- JSON_MODEL_VERSION is 2
CREATE EXTENSION IF NOT EXISTS json_model;

-- check $Model (.'$Model')
CREATE OR REPLACE FUNCTION json_model_3(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$Model'
  res := json_model_41(val, path, rep);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $ (.)
CREATE OR REPLACE FUNCTION json_model_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .
  res := json_model_3(val, path, rep);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#RootModel'.'|'.4.'$'
CREATE OR REPLACE FUNCTION _jm_obj_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.4.'$'.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '' THEN
      -- handle may  property
      -- .'$Model#RootModel'.'|'.4.'$'.''
      res := json_model_4(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF json_model_6(TO_JSONB(prop), NULL, rep) THEN
      -- handle 1 key props
      -- .'$Model#RootModel'.'|'.4.'$'.'$Identifier'
      res := json_model_34(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.4.'$'.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- regex=^([#|&^+/*@~=$%]|[<>!]=?)$ opts=n
CREATE OR REPLACE FUNCTION _jm_re_0(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^([#|&^+/*@~=$%]|[<>!]=?)$', 'n');
END;
$$ LANGUAGE plpgsql;

-- object .'$Model#RootModel'.'|'.4.'%'
CREATE OR REPLACE FUNCTION _jm_obj_2(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
  arr_0_idx INT8;
  arr_0_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.4.'%'.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '<' THEN
      -- handle may < property
      -- .'$Model#RootModel'.'|'.4.'%'.'<'
      -- .'$Model#RootModel'.'|'.4.'%'.'<'.'|'.0
      res := json_model_9(pval, NULL, rep);
      IF NOT res THEN
        -- .'$Model#RootModel'.'|'.4.'%'.'<'.'|'.1
        res := JSONB_TYPEOF(pval) = 'array';
        IF res THEN
          FOR arr_0_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
            arr_0_item := pval -> arr_0_idx;
            -- .'$Model#RootModel'.'|'.4.'%'.'<'.'|'.1.0
            res := json_model_9(arr_0_item, NULL, rep);
            IF NOT res THEN
              EXIT;
            END IF;
          END LOOP;
        END IF;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF json_model_13(TO_JSONB(prop), NULL, rep) THEN
      -- handle 1 key props
      -- .'$Model#RootModel'.'|'.4.'%'.'$Name'
      -- "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
      res := JSONB_TYPEOF(pval) = 'string' AND _jm_re_0(JSON_VALUE(pval, '$' RETURNING TEXT), NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.4.'%'.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#RootModel'.'|'.4
CREATE OR REPLACE FUNCTION _jm_obj_0(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '~' THEN
      -- handle may ~ property
      -- .'$Model#RootModel'.'|'.4.'~'
      res := json_model_4(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '$' THEN
      -- handle may $ property
      -- .'$Model#RootModel'.'|'.4.'$'
      res := _jm_obj_1(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '%' THEN
      -- handle may % property
      -- .'$Model#RootModel'.'|'.4.'%'
      res := _jm_obj_2(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.4.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF json_model_27(TO_JSONB(prop), NULL, rep) THEN
      -- handle 1 key props
      -- .'$Model#RootModel'.'|'.4.'$Prop'
      res := json_model_34(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.4.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#RootModel'.'|'.3.'$'
CREATE OR REPLACE FUNCTION _jm_obj_4(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.3.'$'.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '' THEN
      -- handle may  property
      -- .'$Model#RootModel'.'|'.3.'$'.''
      res := json_model_4(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF json_model_6(TO_JSONB(prop), NULL, rep) THEN
      -- handle 1 key props
      -- .'$Model#RootModel'.'|'.3.'$'.'$Identifier'
      res := json_model_34(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.3.'$'.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#RootModel'.'|'.3.'%'
CREATE OR REPLACE FUNCTION _jm_obj_5(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
  arr_2_idx INT8;
  arr_2_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.3.'%'.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '<' THEN
      -- handle may < property
      -- .'$Model#RootModel'.'|'.3.'%'.'<'
      -- .'$Model#RootModel'.'|'.3.'%'.'<'.'|'.0
      res := json_model_9(pval, NULL, rep);
      IF NOT res THEN
        -- .'$Model#RootModel'.'|'.3.'%'.'<'.'|'.1
        res := JSONB_TYPEOF(pval) = 'array';
        IF res THEN
          FOR arr_2_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
            arr_2_item := pval -> arr_2_idx;
            -- .'$Model#RootModel'.'|'.3.'%'.'<'.'|'.1.0
            res := json_model_9(arr_2_item, NULL, rep);
            IF NOT res THEN
              EXIT;
            END IF;
          END LOOP;
        END IF;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF json_model_13(TO_JSONB(prop), NULL, rep) THEN
      -- handle 1 key props
      -- .'$Model#RootModel'.'|'.3.'%'.'$Name'
      -- "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
      res := JSONB_TYPEOF(pval) = 'string' AND _jm_re_0(JSON_VALUE(pval, '$' RETURNING TEXT), NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.3.'%'.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#RootModel'.'|'.3
CREATE OR REPLACE FUNCTION _jm_obj_3(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_1_idx INT8;
  arr_1_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '^' THEN
      -- handle must ^ property
      must_count := must_count + 1;
      -- .'$Model#RootModel'.'|'.3.'^'
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_1_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_1_item := pval -> arr_1_idx;
          -- .'$Model#RootModel'.'|'.3.'^'.0
          res := json_model_34(arr_1_item, NULL, rep);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '~' THEN
      -- handle may ~ property
      -- .'$Model#RootModel'.'|'.3.'~'
      res := json_model_4(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '$' THEN
      -- handle may $ property
      -- .'$Model#RootModel'.'|'.3.'$'
      res := _jm_obj_4(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '%' THEN
      -- handle may % property
      -- .'$Model#RootModel'.'|'.3.'%'
      res := _jm_obj_5(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.3.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.3.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  IF must_count <> 1 THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#RootModel'.'|'.2.'$'
CREATE OR REPLACE FUNCTION _jm_obj_7(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.2.'$'.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '' THEN
      -- handle may  property
      -- .'$Model#RootModel'.'|'.2.'$'.''
      res := json_model_4(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF json_model_6(TO_JSONB(prop), NULL, rep) THEN
      -- handle 1 key props
      -- .'$Model#RootModel'.'|'.2.'$'.'$Identifier'
      res := json_model_34(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.2.'$'.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#RootModel'.'|'.2.'%'
CREATE OR REPLACE FUNCTION _jm_obj_8(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
  arr_4_idx INT8;
  arr_4_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.2.'%'.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '<' THEN
      -- handle may < property
      -- .'$Model#RootModel'.'|'.2.'%'.'<'
      -- .'$Model#RootModel'.'|'.2.'%'.'<'.'|'.0
      res := json_model_9(pval, NULL, rep);
      IF NOT res THEN
        -- .'$Model#RootModel'.'|'.2.'%'.'<'.'|'.1
        res := JSONB_TYPEOF(pval) = 'array';
        IF res THEN
          FOR arr_4_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
            arr_4_item := pval -> arr_4_idx;
            -- .'$Model#RootModel'.'|'.2.'%'.'<'.'|'.1.0
            res := json_model_9(arr_4_item, NULL, rep);
            IF NOT res THEN
              EXIT;
            END IF;
          END LOOP;
        END IF;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF json_model_13(TO_JSONB(prop), NULL, rep) THEN
      -- handle 1 key props
      -- .'$Model#RootModel'.'|'.2.'%'.'$Name'
      -- "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
      res := JSONB_TYPEOF(pval) = 'string' AND _jm_re_0(JSON_VALUE(pval, '$' RETURNING TEXT), NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.2.'%'.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#RootModel'.'|'.2
CREATE OR REPLACE FUNCTION _jm_obj_6(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_3_idx INT8;
  arr_3_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '&' THEN
      -- handle must & property
      must_count := must_count + 1;
      -- .'$Model#RootModel'.'|'.2.'&'
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_3_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_3_item := pval -> arr_3_idx;
          -- .'$Model#RootModel'.'|'.2.'&'.0
          res := json_model_34(arr_3_item, NULL, rep);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '~' THEN
      -- handle may ~ property
      -- .'$Model#RootModel'.'|'.2.'~'
      res := json_model_4(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '$' THEN
      -- handle may $ property
      -- .'$Model#RootModel'.'|'.2.'$'
      res := _jm_obj_7(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '%' THEN
      -- handle may % property
      -- .'$Model#RootModel'.'|'.2.'%'
      res := _jm_obj_8(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.2.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.2.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  IF must_count <> 1 THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#RootModel'.'|'.1.'$'
CREATE OR REPLACE FUNCTION _jm_obj_10(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.1.'$'.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '' THEN
      -- handle may  property
      -- .'$Model#RootModel'.'|'.1.'$'.''
      res := json_model_4(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF json_model_6(TO_JSONB(prop), NULL, rep) THEN
      -- handle 1 key props
      -- .'$Model#RootModel'.'|'.1.'$'.'$Identifier'
      res := json_model_34(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.1.'$'.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#RootModel'.'|'.1.'%'
CREATE OR REPLACE FUNCTION _jm_obj_11(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
  arr_6_idx INT8;
  arr_6_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.1.'%'.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '<' THEN
      -- handle may < property
      -- .'$Model#RootModel'.'|'.1.'%'.'<'
      -- .'$Model#RootModel'.'|'.1.'%'.'<'.'|'.0
      res := json_model_9(pval, NULL, rep);
      IF NOT res THEN
        -- .'$Model#RootModel'.'|'.1.'%'.'<'.'|'.1
        res := JSONB_TYPEOF(pval) = 'array';
        IF res THEN
          FOR arr_6_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
            arr_6_item := pval -> arr_6_idx;
            -- .'$Model#RootModel'.'|'.1.'%'.'<'.'|'.1.0
            res := json_model_9(arr_6_item, NULL, rep);
            IF NOT res THEN
              EXIT;
            END IF;
          END LOOP;
        END IF;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF json_model_13(TO_JSONB(prop), NULL, rep) THEN
      -- handle 1 key props
      -- .'$Model#RootModel'.'|'.1.'%'.'$Name'
      -- "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
      res := JSONB_TYPEOF(pval) = 'string' AND _jm_re_0(JSON_VALUE(pval, '$' RETURNING TEXT), NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.1.'%'.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#RootModel'.'|'.1
CREATE OR REPLACE FUNCTION _jm_obj_9(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_5_idx INT8;
  arr_5_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '|' THEN
      -- handle must | property
      must_count := must_count + 1;
      -- .'$Model#RootModel'.'|'.1.'|'
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_5_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_5_item := pval -> arr_5_idx;
          -- .'$Model#RootModel'.'|'.1.'|'.0
          res := json_model_34(arr_5_item, NULL, rep);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '~' THEN
      -- handle may ~ property
      -- .'$Model#RootModel'.'|'.1.'~'
      res := json_model_4(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '$' THEN
      -- handle may $ property
      -- .'$Model#RootModel'.'|'.1.'$'
      res := _jm_obj_10(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '%' THEN
      -- handle may % property
      -- .'$Model#RootModel'.'|'.1.'%'
      res := _jm_obj_11(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.1.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.1.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  IF must_count <> 1 THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#RootModel'.'|'.0.'$'
CREATE OR REPLACE FUNCTION _jm_obj_13(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.0.'$'.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '' THEN
      -- handle may  property
      -- .'$Model#RootModel'.'|'.0.'$'.''
      res := json_model_4(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF json_model_6(TO_JSONB(prop), NULL, rep) THEN
      -- handle 1 key props
      -- .'$Model#RootModel'.'|'.0.'$'.'$Identifier'
      res := json_model_34(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.0.'$'.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#RootModel'.'|'.0.'%'
CREATE OR REPLACE FUNCTION _jm_obj_14(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
  arr_7_idx INT8;
  arr_7_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.0.'%'.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '<' THEN
      -- handle may < property
      -- .'$Model#RootModel'.'|'.0.'%'.'<'
      -- .'$Model#RootModel'.'|'.0.'%'.'<'.'|'.0
      res := json_model_9(pval, NULL, rep);
      IF NOT res THEN
        -- .'$Model#RootModel'.'|'.0.'%'.'<'.'|'.1
        res := JSONB_TYPEOF(pval) = 'array';
        IF res THEN
          FOR arr_7_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
            arr_7_item := pval -> arr_7_idx;
            -- .'$Model#RootModel'.'|'.0.'%'.'<'.'|'.1.0
            res := json_model_9(arr_7_item, NULL, rep);
            IF NOT res THEN
              EXIT;
            END IF;
          END LOOP;
        END IF;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF json_model_13(TO_JSONB(prop), NULL, rep) THEN
      -- handle 1 key props
      -- .'$Model#RootModel'.'|'.0.'%'.'$Name'
      -- "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
      res := JSONB_TYPEOF(pval) = 'string' AND _jm_re_0(JSON_VALUE(pval, '$' RETURNING TEXT), NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#RootModel'.'|'.0.'%'.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- regex=^(<=|>=|<|>)$ opts=n
CREATE OR REPLACE FUNCTION _jm_re_1(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^(<=|>=|<|>)$', 'n');
END;
$$ LANGUAGE plpgsql;

-- regex=^(=|!=)$ opts=n
CREATE OR REPLACE FUNCTION _jm_re_2(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^(=|!=)$', 'n');
END;
$$ LANGUAGE plpgsql;

-- object .'$Model#RootModel'.'|'.0
CREATE OR REPLACE FUNCTION _jm_obj_12(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '@' THEN
      -- handle must @ property
      must_count := must_count + 1;
      -- .'$Model#RootModel'.'|'.0.'@'
      res := json_model_34(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '~' THEN
      -- handle may ~ property
      -- .'$Model#RootModel'.'|'.0.'~'
      res := json_model_4(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '$' THEN
      -- handle may $ property
      -- .'$Model#RootModel'.'|'.0.'$'
      res := _jm_obj_13(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '%' THEN
      -- handle may % property
      -- .'$Model#RootModel'.'|'.0.'%'
      res := _jm_obj_14(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '#' THEN
      -- handle may # property
      -- .'$Model#RootModel'.'|'.0.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '!' THEN
      -- handle may ! property
      -- .'$Model#RootModel'.'|'.0.'!'
      res := JSONB_TYPEOF(pval) = 'boolean';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 3 re props
      -- .'$Model#RootModel'.'|'.0.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF _jm_re_1(prop, path, rep) THEN
      -- handle 3 re props
      -- .'$Model#RootModel'.'|'.0.'/^(<=|>=|<|>)$/'
      res := json_model_14(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF _jm_re_2(prop, path, rep) THEN
      -- handle 3 re props
      -- .'$Model#RootModel'.'|'.0.'/^(=|!=)$/'
      res := json_model_15(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  IF must_count <> 1 THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION _jm_cst_0(value JSONB)
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  constants JSONB = JSONB '[null,true,0,1,-1,0.0,1.0,-1.0,"$DATE","$TIME","$DATETIME","$URL","$URI","$UUID","$EMAIL","$REGEX","$EXREG","$NULL","$BOOL","$FLOAT","$F16","$F32","$F64","$NUMBER","$INT","$INTEGER","$I8","$I16","$I32","$I64","$U8","$U16","$U32","$U64","$STRING","$NONE","$ANY",""]';
BEGIN
  RETURN constants @> value;
END;
$$ LANGUAGE plpgsql;

-- regex=^/(.*)/[a-z]*$ opts=n
CREATE OR REPLACE FUNCTION _jm_xre_0_re(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^/(.*)/[a-z]*$', 'n');
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION _jm_xre_0(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOL CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  extract TEXT;
  match TEXT[];
BEGIN
  match := regexp_match(val, '^/(.*)/[a-z]*$', 'n');
  IF match IS NULL THEN
    RETURN FALSE;
  END IF;
  extract := match[1];
  IF NOT jm_is_valid_regex(extract, path, rep) THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- regex=^/(.*)/[a-z]*X[a-z]*$ opts=n
CREATE OR REPLACE FUNCTION _jm_xre_1_re(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^/(.*)/[a-z]*X[a-z]*$', 'n');
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION _jm_xre_1(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOL CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  extract TEXT;
  match TEXT[];
BEGIN
  match := regexp_match(val, '^/(.*)/[a-z]*X[a-z]*$', 'n');
  IF match IS NULL THEN
    RETURN FALSE;
  END IF;
  extract := match[1];
  IF NOT jm_is_valid_extreg(extract, path, rep) THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- check $Model#RootModel (.'$Model#RootModel')
CREATE OR REPLACE FUNCTION json_model_41(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$Model#RootModel'
  res := JSONB_TYPEOF(val) = 'object';
  IF res THEN
    -- .'$Model#RootModel'.'|'.0
    res := _jm_obj_12(val, path, rep);
    IF NOT res THEN
      -- .'$Model#RootModel'.'|'.1
      res := _jm_obj_9(val, path, rep);
      IF NOT res THEN
        -- .'$Model#RootModel'.'|'.2
        res := _jm_obj_6(val, path, rep);
        IF NOT res THEN
          -- .'$Model#RootModel'.'|'.3
          res := _jm_obj_3(val, path, rep);
          IF NOT res THEN
            -- .'$Model#RootModel'.'|'.4
            res := _jm_obj_0(val, path, rep);
          END IF;
        END IF;
      END IF;
    END IF;
  END IF;
  IF NOT res THEN
    res := JSONB_TYPEOF(val) IN ('null', 'boolean', 'number', 'string') AND _jm_cst_0(val);
    IF NOT res THEN
      -- .'$Model#RootModel'.'|'.0
      res := json_model_11(val, path, rep);
      IF NOT res THEN
        -- .'$Model#RootModel'.'|'.1
        res := json_model_10(val, path, rep);
        IF NOT res THEN
          -- .'$Model#RootModel'.'|'.2
          -- "/^/($EXREG)/[a-z]*X[a-z]*$/X"
          res := JSONB_TYPEOF(val) = 'string' AND _jm_xre_1(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
          IF NOT res THEN
            -- .'$Model#RootModel'.'|'.3
            -- "/^/($REGEX)/[a-z]*$/X"
            res := JSONB_TYPEOF(val) = 'string' AND _jm_xre_0(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
            IF NOT res THEN
              -- .'$Model#RootModel'.'|'.4
              res := json_model_9(val, path, rep);
              IF NOT res THEN
                -- .'$Model#RootModel'.'|'.5
                res := json_model_20(val, path, rep);
              END IF;
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- regex=^((file|https?)://.+|\./.*|\.\./.*)$ opts=n
CREATE OR REPLACE FUNCTION _jm_re_3(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^((file|https?)://.+|\./.*|\.\./.*)$', 'n');
END;
$$ LANGUAGE plpgsql;

-- check $Model#Url (.'$Model#Url')
CREATE OR REPLACE FUNCTION json_model_4(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$Model#Url'
  -- "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
  res := JSONB_TYPEOF(val) = 'string' AND _jm_re_3(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- regex=[^A-Z0-9] opts=n
CREATE OR REPLACE FUNCTION _jm_re_4(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '[^A-Z0-9]', 'n');
END;
$$ LANGUAGE plpgsql;

-- regex=^\w+$ opts=n
CREATE OR REPLACE FUNCTION _jm_re_5(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^\w+$', 'n');
END;
$$ LANGUAGE plpgsql;

-- check $Model#Identifier (.'$Model#Identifier')
CREATE OR REPLACE FUNCTION json_model_6(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$Model#Identifier'
  res := JSONB_TYPEOF(val) = 'string';
  IF res THEN
    -- .'$Model#Identifier'.'&'.0
    -- "/^\\w+$/"
    res := _jm_re_5(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
    IF res THEN
      -- .'$Model#Identifier'.'&'.1
      -- "/[^A-Z0-9]/"
      res := _jm_re_4(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
    END IF;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- regex=^\$. opts=n
CREATE OR REPLACE FUNCTION _jm_re_6(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^\$.', 'n');
END;
$$ LANGUAGE plpgsql;

-- check $Model#Ref (.'$Model#Ref')
CREATE OR REPLACE FUNCTION json_model_9(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$Model#Ref'
  -- "/^\\$./"
  res := JSONB_TYPEOF(val) = 'string' AND _jm_re_6(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- regex=^=(null|true|false|[-+]?\d+(\.\d+)?([Ee][-+]?\d+)?)$ opts=n
CREATE OR REPLACE FUNCTION _jm_re_7(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^=(null|true|false|[-+]?\d+(\.\d+)?([Ee][-+]?\d+)?)$', 'n');
END;
$$ LANGUAGE plpgsql;

-- check $Model#ValConst (.'$Model#ValConst')
CREATE OR REPLACE FUNCTION json_model_10(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$Model#ValConst'
  -- "/^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$/"
  res := JSONB_TYPEOF(val) = 'string' AND _jm_re_7(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- regex=^[A-Za-z0-9_] opts=n
CREATE OR REPLACE FUNCTION _jm_re_8(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^[A-Za-z0-9_]', 'n');
END;
$$ LANGUAGE plpgsql;

-- check $Model#StrConst (.'$Model#StrConst')
CREATE OR REPLACE FUNCTION json_model_11(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$Model#StrConst'
  -- "/^[A-Za-z0-9_]/"
  res := JSONB_TYPEOF(val) = 'string' AND _jm_re_8(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- regex=^\..+$ opts=n
CREATE OR REPLACE FUNCTION _jm_re_9(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^\..+$', 'n');
END;
$$ LANGUAGE plpgsql;

-- check $Model#Name (.'$Model#Name')
CREATE OR REPLACE FUNCTION json_model_13(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$Model#Name'
  -- "/^\\..+$/"
  res := JSONB_TYPEOF(val) = 'string' AND _jm_re_9(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $Model#CmpValue (.'$Model#CmpValue')
CREATE OR REPLACE FUNCTION json_model_14(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$Model#CmpValue'
  -- .'$Model#CmpValue'.'|'.0
  res := JSONB_TYPEOF(val) = 'number' AND (val)::INT8 = (val)::FLOAT8;
  IF NOT res THEN
    -- .'$Model#CmpValue'.'|'.1
    res := JSONB_TYPEOF(val) = 'number';
    IF NOT res THEN
      -- .'$Model#CmpValue'.'|'.2
      res := JSONB_TYPEOF(val) = 'string';
    END IF;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $Model#EqValue (.'$Model#EqValue')
CREATE OR REPLACE FUNCTION json_model_15(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$Model#EqValue'
  -- .'$Model#EqValue'.'|'.0
  res := JSONB_TYPEOF(val) = 'null';
  IF NOT res THEN
    -- .'$Model#EqValue'.'|'.1
    res := JSONB_TYPEOF(val) = 'boolean';
    IF NOT res THEN
      -- .'$Model#EqValue'.'|'.2
      res := JSONB_TYPEOF(val) = 'number' AND (val)::INT8 = (val)::FLOAT8;
      IF NOT res THEN
        -- .'$Model#EqValue'.'|'.3
        res := JSONB_TYPEOF(val) = 'number';
        IF NOT res THEN
          -- .'$Model#EqValue'.'|'.4
          res := JSONB_TYPEOF(val) = 'string';
        END IF;
      END IF;
    END IF;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#Array'.0.'|'.4
CREATE OR REPLACE FUNCTION _jm_obj_15(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '#' THEN
      -- handle may # property
      -- .'$Model#Array'.0.'|'.4.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF json_model_27(TO_JSONB(prop), NULL, rep) THEN
      -- handle 1 key props
      -- .'$Model#Array'.0.'|'.4.'$Prop'
      res := json_model_34(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#Array'.0.'|'.4.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#Array'.0.'|'.3
CREATE OR REPLACE FUNCTION _jm_obj_16(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_9_idx INT8;
  arr_9_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '^' THEN
      -- handle must ^ property
      must_count := must_count + 1;
      -- .'$Model#Array'.0.'|'.3.'^'
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_9_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_9_item := pval -> arr_9_idx;
          -- .'$Model#Array'.0.'|'.3.'^'.0
          res := json_model_34(arr_9_item, NULL, rep);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '#' THEN
      -- handle may # property
      -- .'$Model#Array'.0.'|'.3.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#Array'.0.'|'.3.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  IF must_count <> 1 THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#Array'.0.'|'.2
CREATE OR REPLACE FUNCTION _jm_obj_17(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_10_idx INT8;
  arr_10_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '&' THEN
      -- handle must & property
      must_count := must_count + 1;
      -- .'$Model#Array'.0.'|'.2.'&'
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_10_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_10_item := pval -> arr_10_idx;
          -- .'$Model#Array'.0.'|'.2.'&'.0
          res := json_model_34(arr_10_item, NULL, rep);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '#' THEN
      -- handle may # property
      -- .'$Model#Array'.0.'|'.2.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#Array'.0.'|'.2.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  IF must_count <> 1 THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#Array'.0.'|'.1
CREATE OR REPLACE FUNCTION _jm_obj_18(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_11_idx INT8;
  arr_11_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '|' THEN
      -- handle must | property
      must_count := must_count + 1;
      -- .'$Model#Array'.0.'|'.1.'|'
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_11_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_11_item := pval -> arr_11_idx;
          -- .'$Model#Array'.0.'|'.1.'|'.0
          res := json_model_34(arr_11_item, NULL, rep);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '#' THEN
      -- handle may # property
      -- .'$Model#Array'.0.'|'.1.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#Array'.0.'|'.1.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  IF must_count <> 1 THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#Array'.0.'|'.0
CREATE OR REPLACE FUNCTION _jm_obj_19(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '@' THEN
      -- handle must @ property
      must_count := must_count + 1;
      -- .'$Model#Array'.0.'|'.0.'@'
      res := json_model_34(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '#' THEN
      -- handle may # property
      -- .'$Model#Array'.0.'|'.0.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '!' THEN
      -- handle may ! property
      -- .'$Model#Array'.0.'|'.0.'!'
      res := JSONB_TYPEOF(pval) = 'boolean';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 3 re props
      -- .'$Model#Array'.0.'|'.0.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF _jm_re_1(prop, path, rep) THEN
      -- handle 3 re props
      -- .'$Model#Array'.0.'|'.0.'/^(<=|>=|<|>)$/'
      res := json_model_14(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF _jm_re_2(prop, path, rep) THEN
      -- handle 3 re props
      -- .'$Model#Array'.0.'|'.0.'/^(=|!=)$/'
      res := json_model_15(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  IF must_count <> 1 THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION _jm_cst_1(value JSONB)
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  constants JSONB = JSONB '[null,true,0,1,-1,0.0,1.0,-1.0,"$DATE","$TIME","$DATETIME","$URL","$URI","$UUID","$EMAIL","$REGEX","$EXREG","$NULL","$BOOL","$FLOAT","$F16","$F32","$F64","$NUMBER","$INT","$INTEGER","$I8","$I16","$I32","$I64","$U8","$U16","$U32","$U64","$STRING","$NONE","$ANY",""]';
BEGIN
  RETURN constants @> value;
END;
$$ LANGUAGE plpgsql;

-- check $Model#Array (.'$Model#Array')
CREATE OR REPLACE FUNCTION json_model_20(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  arr_8_idx INT8;
  arr_8_item JSONB;
BEGIN
  -- .'$Model#Array'
  res := JSONB_TYPEOF(val) = 'array';
  IF res THEN
    FOR arr_8_idx IN 0 .. JSONB_ARRAY_LENGTH(val) - 1 LOOP
      arr_8_item := val -> arr_8_idx;
      -- .'$Model#Array'.0
      res := JSONB_TYPEOF(arr_8_item) = 'object';
      IF res THEN
        -- .'$Model#Array'.0.'|'.0
        res := _jm_obj_19(arr_8_item, NULL, rep);
        IF NOT res THEN
          -- .'$Model#Array'.0.'|'.1
          res := _jm_obj_18(arr_8_item, NULL, rep);
          IF NOT res THEN
            -- .'$Model#Array'.0.'|'.2
            res := _jm_obj_17(arr_8_item, NULL, rep);
            IF NOT res THEN
              -- .'$Model#Array'.0.'|'.3
              res := _jm_obj_16(arr_8_item, NULL, rep);
              IF NOT res THEN
                -- .'$Model#Array'.0.'|'.4
                res := _jm_obj_15(arr_8_item, NULL, rep);
              END IF;
            END IF;
          END IF;
        END IF;
      END IF;
      IF NOT res THEN
        res := JSONB_TYPEOF(arr_8_item) IN ('null', 'boolean', 'number', 'string') AND _jm_cst_1(arr_8_item);
        IF NOT res THEN
          -- .'$Model#Array'.0.'|'.0
          res := json_model_11(arr_8_item, NULL, rep);
          IF NOT res THEN
            -- .'$Model#Array'.0.'|'.1
            res := json_model_10(arr_8_item, NULL, rep);
            IF NOT res THEN
              -- .'$Model#Array'.0.'|'.2
              -- "/^/($EXREG)/[a-z]*X[a-z]*$/X"
              res := JSONB_TYPEOF(arr_8_item) = 'string' AND _jm_xre_1(JSON_VALUE(arr_8_item, '$' RETURNING TEXT), NULL, rep);
              IF NOT res THEN
                -- .'$Model#Array'.0.'|'.3
                -- "/^/($REGEX)/[a-z]*$/X"
                res := JSONB_TYPEOF(arr_8_item) = 'string' AND _jm_xre_0(JSON_VALUE(arr_8_item, '$' RETURNING TEXT), NULL, rep);
                IF NOT res THEN
                  -- .'$Model#Array'.0.'|'.4
                  res := json_model_9(arr_8_item, NULL, rep);
                  IF NOT res THEN
                    -- .'$Model#Array'.0.'|'.5
                    res := json_model_20(arr_8_item, NULL, rep);
                    IF NOT res THEN
                      -- .'$Model#Array'.0.'|'.6
                      res := json_model_7(arr_8_item, NULL, rep);
                    END IF;
                  END IF;
                END IF;
              END IF;
            END IF;
          END IF;
        END IF;
      END IF;
      IF NOT res THEN
        EXIT;
      END IF;
    END LOOP;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- check $Model#ArrayComment (.'$Model#ArrayComment')
CREATE OR REPLACE FUNCTION json_model_7(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$Model#ArrayComment'
  -- "/^#/"
  res := JSONB_TYPEOF(val) = 'string' AND STARTS_WITH(JSON_VALUE(val, '$' RETURNING TEXT), '#');
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- regex=^[?!] opts=n
CREATE OR REPLACE FUNCTION _jm_re_10(val TEXT, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  RETURN regexp_like(val, '^[?!]', 'n');
END;
$$ LANGUAGE plpgsql;

-- check $Model#Prop (.'$Model#Prop')
CREATE OR REPLACE FUNCTION json_model_27(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$Model#Prop'
  -- .'$Model#Prop'.'|'.0
  -- "/^[?!]/"
  res := JSONB_TYPEOF(val) = 'string' AND _jm_re_10(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
  IF NOT res THEN
    -- .'$Model#Prop'.'|'.1
    res := json_model_11(val, path, rep);
    IF NOT res THEN
      -- .'$Model#Prop'.'|'.2
      -- "/^/($EXREG)/[a-z]*X[a-z]*$/X"
      res := JSONB_TYPEOF(val) = 'string' AND _jm_xre_1(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
      IF NOT res THEN
        -- .'$Model#Prop'.'|'.3
        -- "/^/($REGEX)/[a-z]*$/X"
        res := JSONB_TYPEOF(val) = 'string' AND _jm_xre_0(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
        IF NOT res THEN
          -- .'$Model#Prop'.'|'.4
          res := json_model_9(val, path, rep);
          IF NOT res THEN
            -- .'$Model#Prop'.'|'.5
            res := json_model_13(val, path, rep);
            IF NOT res THEN
              -- .'$Model#Prop'.'|'.6
              res := JSONB_TYPEOF(val) = 'string' AND JSON_VALUE(val, '$' RETURNING TEXT) = '';
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#Model'.'|'.4
CREATE OR REPLACE FUNCTION _jm_obj_20(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '#' THEN
      -- handle may # property
      -- .'$Model#Model'.'|'.4.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF json_model_27(TO_JSONB(prop), NULL, rep) THEN
      -- handle 1 key props
      -- .'$Model#Model'.'|'.4.'$Prop'
      res := json_model_34(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#Model'.'|'.4.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#Model'.'|'.3
CREATE OR REPLACE FUNCTION _jm_obj_21(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_12_idx INT8;
  arr_12_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '^' THEN
      -- handle must ^ property
      must_count := must_count + 1;
      -- .'$Model#Model'.'|'.3.'^'
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_12_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_12_item := pval -> arr_12_idx;
          -- .'$Model#Model'.'|'.3.'^'.0
          res := json_model_34(arr_12_item, NULL, rep);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '#' THEN
      -- handle may # property
      -- .'$Model#Model'.'|'.3.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#Model'.'|'.3.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  IF must_count <> 1 THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#Model'.'|'.2
CREATE OR REPLACE FUNCTION _jm_obj_22(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_13_idx INT8;
  arr_13_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '&' THEN
      -- handle must & property
      must_count := must_count + 1;
      -- .'$Model#Model'.'|'.2.'&'
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_13_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_13_item := pval -> arr_13_idx;
          -- .'$Model#Model'.'|'.2.'&'.0
          res := json_model_34(arr_13_item, NULL, rep);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '#' THEN
      -- handle may # property
      -- .'$Model#Model'.'|'.2.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#Model'.'|'.2.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  IF must_count <> 1 THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#Model'.'|'.1
CREATE OR REPLACE FUNCTION _jm_obj_23(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
  arr_14_idx INT8;
  arr_14_item JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '|' THEN
      -- handle must | property
      must_count := must_count + 1;
      -- .'$Model#Model'.'|'.1.'|'
      res := JSONB_TYPEOF(pval) = 'array';
      IF res THEN
        FOR arr_14_idx IN 0 .. JSONB_ARRAY_LENGTH(pval) - 1 LOOP
          arr_14_item := pval -> arr_14_idx;
          -- .'$Model#Model'.'|'.1.'|'.0
          res := json_model_34(arr_14_item, NULL, rep);
          IF NOT res THEN
            EXIT;
          END IF;
        END LOOP;
      END IF;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '#' THEN
      -- handle may # property
      -- .'$Model#Model'.'|'.1.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 1 re props
      -- .'$Model#Model'.'|'.1.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  IF must_count <> 1 THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

-- object .'$Model#Model'.'|'.0
CREATE OR REPLACE FUNCTION _jm_obj_24(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
  must_count int;
  prop TEXT;
  pval JSONB;
BEGIN
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  must_count := 0;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF prop = '@' THEN
      -- handle must @ property
      must_count := must_count + 1;
      -- .'$Model#Model'.'|'.0.'@'
      res := json_model_34(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '#' THEN
      -- handle may # property
      -- .'$Model#Model'.'|'.0.'#'
      res := JSONB_TYPEOF(pval) = 'string';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF prop = '!' THEN
      -- handle may ! property
      -- .'$Model#Model'.'|'.0.'!'
      res := JSONB_TYPEOF(pval) = 'boolean';
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF STARTS_WITH(prop, '#') THEN
      -- handle 3 re props
      -- .'$Model#Model'.'|'.0.'/^#/'
      res := TRUE;
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF _jm_re_1(prop, path, rep) THEN
      -- handle 3 re props
      -- .'$Model#Model'.'|'.0.'/^(<=|>=|<|>)$/'
      res := json_model_14(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSEIF _jm_re_2(prop, path, rep) THEN
      -- handle 3 re props
      -- .'$Model#Model'.'|'.0.'/^(=|!=)$/'
      res := json_model_15(pval, NULL, rep);
      IF NOT res THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  IF must_count <> 1 THEN
    RETURN FALSE;
  END IF;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION _jm_cst_2(value JSONB)
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  constants JSONB = JSONB '[null,true,0,1,-1,0.0,1.0,-1.0,"$DATE","$TIME","$DATETIME","$URL","$URI","$UUID","$EMAIL","$REGEX","$EXREG","$NULL","$BOOL","$FLOAT","$F16","$F32","$F64","$NUMBER","$INT","$INTEGER","$I8","$I16","$I32","$I64","$U8","$U16","$U32","$U64","$STRING","$NONE","$ANY",""]';
BEGIN
  RETURN constants @> value;
END;
$$ LANGUAGE plpgsql;

-- check $Model#Model (.'$Model#Model')
CREATE OR REPLACE FUNCTION json_model_34(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  res bool;
BEGIN
  -- .'$Model#Model'
  res := JSONB_TYPEOF(val) = 'object';
  IF res THEN
    -- .'$Model#Model'.'|'.0
    res := _jm_obj_24(val, path, rep);
    IF NOT res THEN
      -- .'$Model#Model'.'|'.1
      res := _jm_obj_23(val, path, rep);
      IF NOT res THEN
        -- .'$Model#Model'.'|'.2
        res := _jm_obj_22(val, path, rep);
        IF NOT res THEN
          -- .'$Model#Model'.'|'.3
          res := _jm_obj_21(val, path, rep);
          IF NOT res THEN
            -- .'$Model#Model'.'|'.4
            res := _jm_obj_20(val, path, rep);
          END IF;
        END IF;
      END IF;
    END IF;
  END IF;
  IF NOT res THEN
    res := JSONB_TYPEOF(val) IN ('null', 'boolean', 'number', 'string') AND _jm_cst_2(val);
    IF NOT res THEN
      -- .'$Model#Model'.'|'.0
      res := json_model_11(val, path, rep);
      IF NOT res THEN
        -- .'$Model#Model'.'|'.1
        res := json_model_10(val, path, rep);
        IF NOT res THEN
          -- .'$Model#Model'.'|'.2
          -- "/^/($EXREG)/[a-z]*X[a-z]*$/X"
          res := JSONB_TYPEOF(val) = 'string' AND _jm_xre_1(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
          IF NOT res THEN
            -- .'$Model#Model'.'|'.3
            -- "/^/($REGEX)/[a-z]*$/X"
            res := JSONB_TYPEOF(val) = 'string' AND _jm_xre_0(JSON_VALUE(val, '$' RETURNING TEXT), path, rep);
            IF NOT res THEN
              -- .'$Model#Model'.'|'.4
              res := json_model_9(val, path, rep);
              IF NOT res THEN
                -- .'$Model#Model'.'|'.5
                res := json_model_20(val, path, rep);
              END IF;
            END IF;
          END IF;
        END IF;
      END IF;
    END IF;
  END IF;
  RETURN res;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION check_model_map(name TEXT)
RETURNS TEXT STRICT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  map JSONB := JSONB '{"":"json_model_3","Model":"json_model_3"}';
BEGIN
  RETURN map->>name;
END;
$$ LANGUAGE plpgsql;

--
-- constant maps initialization
--
TRUNCATE jm_constant_maps;

--
-- JSON Model checking entry point
--
-- TODO INOUT rep?
CREATE OR REPLACE FUNCTION check_model(val JSONB, name TEXT, rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  fun TEXT;
BEGIN
  fun := check_model_map(name);
  IF fun IS NULL THEN
    RAISE EXCEPTION 'model for % not found', name;
  END IF;
  RETURN jm_call(fun, val, NULL, rep);
END;
$$ LANGUAGE plpgsql;
