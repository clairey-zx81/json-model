#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_2($$$);
my %_jm_cst_0;
sub json_model_3($$$);
sub json_model_4($$$);
sub json_model_5($$$);
sub json_model_6($$$);
sub json_model_7($$$);
sub json_model_8($$$);
sub json_model_9($$$);
sub _jm_xre_0($$$);
sub _jm_xre_1($$$);
sub json_model_10($$$);
sub json_model_11($$$);
sub json_model_12($$$);
sub json_model_13($$$);
sub json_model_14($$$);
my %_jm_cst_1;
sub json_model_15($$$);
sub json_model_16($$$);
sub json_model_17($$$);
my %_jm_cst_2;
sub json_model_18($$$);
sub json_model_19($$$);
sub json_model_20($$$);
sub json_model_21($$$);
sub json_model_22($$$);
sub json_model_23($$$);
sub json_model_24($$$);
sub json_model_25($$$);
sub json_model_26($$$);
sub json_model_27($$$);
sub json_model_28($$$);
sub json_model_29($$$);
my %_jm_cst_3;
sub json_model_30($$$);
my %_jm_cst_4;
sub json_model_31($$$);
my %_jm_cst_5;
sub json_model_32($$$);
sub json_model_33($$$);
sub json_model_34($$$);
sub json_model_35($$$);
sub json_model_36($$$);
sub json_model_37($$$);
sub json_model_38($$$);
my %_jm_cst_6;
sub json_model_39($$$);
sub json_model_1($$$);
my %check_model_map;

sub _jm_re_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^((file|https?):\/\/.+|\.\/.*|\.\.\/.*)$/;
    return $res;
}

# check $Url (.'$Url')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    $res = jm_is_string($val) && _jm_re_0($val, $path, $rep);
    return $res;
}


# check $PreDef (.'$PreDef')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$PreDef'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_0{$val};
    return $res;
}

sub _jm_re_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /[^A-Z0-9]/;
    return $res;
}

sub _jm_re_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\w+$/;
    return $res;
}

# check $Identifier (.'$Identifier')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Identifier'
    $res = jm_is_string($val);
    if ($res)
    {
        # .'$Identifier'.'&'.0
        # "/^\\w+$/"
        $res = _jm_re_2($val, $path, $rep);
        if ($res)
        {
            # .'$Identifier'.'&'.1
            # "/[^A-Z0-9]/"
            $res = _jm_re_1($val, $path, $rep);
        }
    }
    return $res;
}

# check $ArrayComment (.'$ArrayComment')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ArrayComment'
    # "/^#/"
    $res = jm_is_string($val) && jm_starts_with($val, '#');
    return $res;
}

# object .'$ObjectComment'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$ObjectComment'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$ObjectComment'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $ObjectComment (.'$ObjectComment')
sub json_model_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ObjectComment'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

sub _jm_re_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\$./;
    return $res;
}

# check $Ref (.'$Ref')
sub json_model_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ref'
    # "/^\\$./"
    $res = jm_is_string($val) && _jm_re_3($val, $path, $rep);
    return $res;
}

sub _jm_re_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^=(null|true|false|[-+]?\d+(\.\d+)?([Ee][-+]?\d+)?)$/;
    return $res;
}

# check $ValConst (.'$ValConst')
sub json_model_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ValConst'
    # "/^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$/"
    $res = jm_is_string($val) && _jm_re_4($val, $path, $rep);
    return $res;
}

sub _jm_re_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[A-Za-z0-9_]/;
    return $res;
}

# check $StrConst (.'$StrConst')
sub json_model_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$StrConst'
    # "/^[A-Za-z0-9_]/"
    $res = jm_is_string($val) && _jm_re_5($val, $path, $rep);
    return $res;
}

sub _jm_xre_0_re($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\/(?<s1>.*)\/[a-z]*$/;
    return $res;
}

sub _jm_xre_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $extract;
    my $match = $val =~ /^\/(?<s1>.*)\/[a-z]*$/;
    if (! $match)
    {
        return 0;
    }
    $extract = $+{'s1'};
    if (! (jm_is_string($extract) && jm_is_valid_regex($extract, $path, $rep)))
    {
        return 0;
    }
    return 1;
}

sub _jm_xre_1_re($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\/(?<s1>.*)\/[a-z]*X[a-z]*$/;
    return $res;
}

sub _jm_xre_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $extract;
    my $match = $val =~ /^\/(?<s1>.*)\/[a-z]*X[a-z]*$/;
    if (! $match)
    {
        return 0;
    }
    $extract = $+{'s1'};
    if (! (jm_is_string($extract) && jm_is_valid_exreg($extract, $path, $rep)))
    {
        return 0;
    }
    return 1;
}

# check $Regex (.'$Regex')
sub json_model_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Regex'
    $res = jm_is_string($val);
    if ($res)
    {
        # .'$Regex'.'|'.0
        # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
        $res = _jm_xre_1($val, $path, $rep);
        if (! $res)
        {
            # .'$Regex'.'|'.1
            # "/^/($REGEX)/[a-z]*$/X"
            $res = _jm_xre_0($val, $path, $rep);
        }
    }
    return $res;
}

sub _jm_re_6($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\..+$/;
    return $res;
}

# check $Name (.'$Name')
sub json_model_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Name'
    # "/^\\..+$/"
    $res = jm_is_string($val) && _jm_re_6($val, $path, $rep);
    return $res;
}

# check $CmpValue (.'$CmpValue')
sub json_model_12($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$CmpValue'
    # .'$CmpValue'.'|'.0
    $res = jm_is_integer($val);
    if (! $res)
    {
        # .'$CmpValue'.'|'.1
        $res = jm_is_numeric($val);
        if (! $res)
        {
            # .'$CmpValue'.'|'.2
            $res = jm_is_string($val);
        }
    }
    return $res;
}

# check $EqValue (.'$EqValue')
sub json_model_13($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$EqValue'
    # .'$EqValue'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$EqValue'.'|'.1
        $res = jm_is_boolean($val);
        if (! $res)
        {
            # .'$EqValue'.'|'.2
            $res = jm_is_integer($val);
            if (! $res)
            {
                # .'$EqValue'.'|'.3
                $res = jm_is_numeric($val);
                if (! $res)
                {
                    # .'$EqValue'.'|'.4
                    $res = jm_is_string($val);
                }
            }
        }
    }
    return $res;
}

# check $ValModel (.'$ValModel')
sub json_model_14($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ValModel'
    # .'$ValModel'.'|'.0
    $res = !defined($val);
    if (! $res)
    {
        # .'$ValModel'.'|'.1
        $res = jm_is_boolean($val) && $val == 1;
        if (! $res)
        {
            # .'$ValModel'.'|'.2
            $res = jm_is_integer($val) && $val == 0;
            if (! $res)
            {
                # .'$ValModel'.'|'.3
                $res = jm_is_integer($val) && $val == 1;
                if (! $res)
                {
                    # .'$ValModel'.'|'.4
                    $res = jm_is_integer($val) && $val == -1;
                    if (! $res)
                    {
                        # .'$ValModel'.'|'.5
                        $res = jm_is_numeric($val) && $val == 0.0;
                        if (! $res)
                        {
                            # .'$ValModel'.'|'.6
                            $res = jm_is_numeric($val) && $val == 1.0;
                            if (! $res)
                            {
                                # .'$ValModel'.'|'.7
                                $res = jm_is_numeric($val) && $val == -1.0;
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}


# check $StrModel (.'$StrModel')
sub json_model_15($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$StrModel'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_1{$val};
    if (! $res)
    {
        # .'$StrModel'.'|'.0
        $res = json_model_9($val, $path, $rep);
        if (! $res)
        {
            # .'$StrModel'.'|'.1
            $res = json_model_8($val, $path, $rep);
            if (! $res)
            {
                # .'$StrModel'.'|'.2
                # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                $res = jm_is_string($val) && _jm_xre_1($val, $path, $rep);
                if (! $res)
                {
                    # .'$StrModel'.'|'.3
                    # "/^/($REGEX)/[a-z]*$/X"
                    $res = jm_is_string($val) && _jm_xre_0($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$StrModel'.'|'.4
                        $res = json_model_7($val, $path, $rep);
                    }
                }
            }
        }
    }
    return $res;
}

# check $Any (.'$Any')
sub json_model_16($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Any'
    $res = 1;
    return $res;
}

# check $None (.'$None')
sub json_model_17($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$None'
    $res = 0;
    return $res;
}

# object .'$Array'.0.'|'.5
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Array'.0.'|'.5.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_25($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Array'.0.'|'.5.'$Prop'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Array'.0.'|'.5.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Array'.0.'|'.4
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '+')
        {
            # handle must + property
            $must_count++;
            # .'$Array'.0.'|'.4.'+'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_1_idx (0 .. $#$pval)
                {
                    my $arr_1_item = $$pval[$arr_1_idx];
                    # .'$Array'.0.'|'.4.'+'.0
                    $res = json_model_32($arr_1_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Array'.0.'|'.4.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Array'.0.'|'.4.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Array'.0.'|'.3
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Array'.0.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_2_idx (0 .. $#$pval)
                {
                    my $arr_2_item = $$pval[$arr_2_idx];
                    # .'$Array'.0.'|'.3.'^'.0
                    $res = json_model_32($arr_2_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Array'.0.'|'.3.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Array'.0.'|'.3.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Array'.0.'|'.2
sub _jm_obj_4($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$Array'.0.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_3_idx (0 .. $#$pval)
                {
                    my $arr_3_item = $$pval[$arr_3_idx];
                    # .'$Array'.0.'|'.2.'&'.0
                    $res = json_model_32($arr_3_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Array'.0.'|'.2.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Array'.0.'|'.2.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Array'.0.'|'.1
sub _jm_obj_5($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Array'.0.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_4_idx (0 .. $#$pval)
                {
                    my $arr_4_item = $$pval[$arr_4_idx];
                    # .'$Array'.0.'|'.1.'|'.0
                    $res = json_model_32($arr_4_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Array'.0.'|'.1.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Array'.0.'|'.1.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

sub _jm_re_7($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^(<=|>=|<|>)$/;
    return $res;
}

sub _jm_re_8($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^(=|!=)$/;
    return $res;
}

# object .'$Array'.0.'|'.0
sub _jm_obj_6($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Array'.0.'|'.0.'@'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Array'.0.'|'.0.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$Array'.0.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 3 re props
            # .'$Array'.0.'|'.0.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_7($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Array'.0.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_12($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Array'.0.'|'.0.'/^(=|!=)$/'
            $res = json_model_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}


# check $Array (.'$Array')
sub json_model_18($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Array'
    $res = jm_is_array($val);
    if ($res)
    {
        for my $arr_0_idx (0 .. $#$val)
        {
            my $arr_0_item = $$val[$arr_0_idx];
            # .'$Array'.0
            $res = jm_is_object($arr_0_item);
            if ($res)
            {
                # .'$Array'.0.'|'.0
                $res = _jm_obj_6($arr_0_item, undef, $rep);
                if (! $res)
                {
                    # .'$Array'.0.'|'.1
                    $res = _jm_obj_5($arr_0_item, undef, $rep);
                    if (! $res)
                    {
                        # .'$Array'.0.'|'.2
                        $res = _jm_obj_4($arr_0_item, undef, $rep);
                        if (! $res)
                        {
                            # .'$Array'.0.'|'.3
                            $res = _jm_obj_3($arr_0_item, undef, $rep);
                            if (! $res)
                            {
                                # .'$Array'.0.'|'.4
                                $res = _jm_obj_2($arr_0_item, undef, $rep);
                                if (! $res)
                                {
                                    # .'$Array'.0.'|'.5
                                    $res = _jm_obj_1($arr_0_item, undef, $rep);
                                }
                            }
                        }
                    }
                }
            }
            if (! $res)
            {
                $res = jm_is_scalar($arr_0_item) && jm_is_string($arr_0_item) && exists $_jm_cst_2{$arr_0_item};
                if (! $res)
                {
                    # .'$Array'.0.'|'.0
                    $res = !defined($arr_0_item);
                    if (! $res)
                    {
                        # .'$Array'.0.'|'.1
                        $res = jm_is_boolean($arr_0_item) && $arr_0_item == 1;
                        if (! $res)
                        {
                            # .'$Array'.0.'|'.2
                            $res = jm_is_integer($arr_0_item) && $arr_0_item == 0;
                            if (! $res)
                            {
                                # .'$Array'.0.'|'.3
                                $res = jm_is_integer($arr_0_item) && $arr_0_item == 1;
                                if (! $res)
                                {
                                    # .'$Array'.0.'|'.4
                                    $res = jm_is_integer($arr_0_item) && $arr_0_item == -1;
                                    if (! $res)
                                    {
                                        # .'$Array'.0.'|'.5
                                        $res = jm_is_numeric($arr_0_item) && $arr_0_item == 0.0;
                                        if (! $res)
                                        {
                                            # .'$Array'.0.'|'.6
                                            $res = jm_is_numeric($arr_0_item) && $arr_0_item == 1.0;
                                            if (! $res)
                                            {
                                                # .'$Array'.0.'|'.7
                                                $res = jm_is_numeric($arr_0_item) && $arr_0_item == -1.0;
                                                if (! $res)
                                                {
                                                    # .'$Array'.0.'|'.8
                                                    $res = json_model_9($arr_0_item, undef, $rep);
                                                    if (! $res)
                                                    {
                                                        # .'$Array'.0.'|'.9
                                                        $res = json_model_8($arr_0_item, undef, $rep);
                                                        if (! $res)
                                                        {
                                                            # .'$Array'.0.'|'.10
                                                            # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                                                            $res = jm_is_string($arr_0_item) && _jm_xre_1($arr_0_item, undef, $rep);
                                                            if (! $res)
                                                            {
                                                                # .'$Array'.0.'|'.11
                                                                # "/^/($REGEX)/[a-z]*$/X"
                                                                $res = jm_is_string($arr_0_item) && _jm_xre_0($arr_0_item, undef, $rep);
                                                                if (! $res)
                                                                {
                                                                    # .'$Array'.0.'|'.12
                                                                    $res = json_model_7($arr_0_item, undef, $rep);
                                                                    if (! $res)
                                                                    {
                                                                        # .'$Array'.0.'|'.13
                                                                        $res = json_model_18($arr_0_item, undef, $rep);
                                                                        if (! $res)
                                                                        {
                                                                            # .'$Array'.0.'|'.14
                                                                            $res = json_model_5($arr_0_item, undef, $rep);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (! $res)
            {
                last;
            }
        }
    }
    return $res;
}

# check $Common (.'$Common')
sub json_model_19($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Common'
    $res = json_model_6($val, $path, $rep);
    return $res;
}

# object .'$Constraint'
sub _jm_obj_7($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Constraint'.'@'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$Constraint'.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_7($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Constraint'.'/^(<=|>=|<|>)$/'
            $res = json_model_12($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Constraint'.'/^(=|!=)$/'
            $res = json_model_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Constraint (.'$Constraint')
sub json_model_20($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Constraint'
    $res = _jm_obj_7($val, $path, $rep);
    return $res;
}

# object .'$Or'
sub _jm_obj_8($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Or'.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_5_idx (0 .. $#$pval)
                {
                    my $arr_5_item = $$pval[$arr_5_idx];
                    # .'$Or'.'|'.0
                    $res = json_model_32($arr_5_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Or (.'$Or')
sub json_model_21($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Or'
    $res = _jm_obj_8($val, $path, $rep);
    return $res;
}

# object .'$And'
sub _jm_obj_9($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$And'.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_6_idx (0 .. $#$pval)
                {
                    my $arr_6_item = $$pval[$arr_6_idx];
                    # .'$And'.'&'.0
                    $res = json_model_32($arr_6_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $And (.'$And')
sub json_model_22($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$And'
    $res = _jm_obj_9($val, $path, $rep);
    return $res;
}

# object .'$Xor'
sub _jm_obj_10($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Xor'.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_7_idx (0 .. $#$pval)
                {
                    my $arr_7_item = $$pval[$arr_7_idx];
                    # .'$Xor'.'^'.0
                    $res = json_model_32($arr_7_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Xor (.'$Xor')
sub json_model_23($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Xor'
    $res = _jm_obj_10($val, $path, $rep);
    return $res;
}

# object .'$Add'
sub _jm_obj_11($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '+')
        {
            # handle must + property
            $must_count++;
            # .'$Add'.'+'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_8_idx (0 .. $#$pval)
                {
                    my $arr_8_item = $$pval[$arr_8_idx];
                    # .'$Add'.'+'.0
                    $res = json_model_32($arr_8_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Add (.'$Add')
sub json_model_24($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Add'
    $res = _jm_obj_11($val, $path, $rep);
    return $res;
}

sub _jm_re_9($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^[?!]/;
    return $res;
}

# check $Prop (.'$Prop')
sub json_model_25($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Prop'
    # .'$Prop'.'|'.0
    # "/^[?!]/"
    $res = jm_is_string($val) && _jm_re_9($val, $path, $rep);
    if (! $res)
    {
        # .'$Prop'.'|'.1
        $res = json_model_9($val, $path, $rep);
        if (! $res)
        {
            # .'$Prop'.'|'.2
            # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
            $res = jm_is_string($val) && _jm_xre_1($val, $path, $rep);
            if (! $res)
            {
                # .'$Prop'.'|'.3
                # "/^/($REGEX)/[a-z]*$/X"
                $res = jm_is_string($val) && _jm_xre_0($val, $path, $rep);
                if (! $res)
                {
                    # .'$Prop'.'|'.4
                    $res = json_model_7($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Prop'.'|'.5
                        $res = json_model_11($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$Prop'.'|'.6
                            $res = jm_is_string($val) && $val eq '';
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# object .'$Obj'
sub _jm_obj_12($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (json_model_25($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Obj'.'$Prop'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Obj (.'$Obj')
sub json_model_26($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Obj'
    $res = _jm_obj_12($val, $path, $rep);
    return $res;
}

# object .'$Elem'.'|'.5
sub _jm_obj_13($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (json_model_25($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Elem'.'|'.5.'$Prop'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Elem'.'|'.4
sub _jm_obj_14($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '+')
        {
            # handle must + property
            $must_count++;
            # .'$Elem'.'|'.4.'+'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_9_idx (0 .. $#$pval)
                {
                    my $arr_9_item = $$pval[$arr_9_idx];
                    # .'$Elem'.'|'.4.'+'.0
                    $res = json_model_32($arr_9_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Elem'.'|'.3
sub _jm_obj_15($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Elem'.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_10_idx (0 .. $#$pval)
                {
                    my $arr_10_item = $$pval[$arr_10_idx];
                    # .'$Elem'.'|'.3.'^'.0
                    $res = json_model_32($arr_10_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Elem'.'|'.2
sub _jm_obj_16($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$Elem'.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_11_idx (0 .. $#$pval)
                {
                    my $arr_11_item = $$pval[$arr_11_idx];
                    # .'$Elem'.'|'.2.'&'.0
                    $res = json_model_32($arr_11_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Elem'.'|'.1
sub _jm_obj_17($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Elem'.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_12_idx (0 .. $#$pval)
                {
                    my $arr_12_item = $$pval[$arr_12_idx];
                    # .'$Elem'.'|'.1.'|'.0
                    $res = json_model_32($arr_12_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Elem'.'|'.0
sub _jm_obj_18($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Elem'.'|'.0.'@'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$Elem'.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_7($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Elem'.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_12($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Elem'.'|'.0.'/^(=|!=)$/'
            $res = json_model_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Elem (.'$Elem')
sub json_model_27($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Elem'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Elem'.'|'.0
        $res = _jm_obj_18($val, $path, $rep);
        if (! $res)
        {
            # .'$Elem'.'|'.1
            $res = _jm_obj_17($val, $path, $rep);
            if (! $res)
            {
                # .'$Elem'.'|'.2
                $res = _jm_obj_16($val, $path, $rep);
                if (! $res)
                {
                    # .'$Elem'.'|'.3
                    $res = _jm_obj_15($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Elem'.'|'.4
                        $res = _jm_obj_14($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$Elem'.'|'.5
                            $res = _jm_obj_13($val, $path, $rep);
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# object .'$Element'.'|'.5
sub _jm_obj_19($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Element'.'|'.5.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_25($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Element'.'|'.5.'$Prop'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Element'.'|'.5.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Element'.'|'.4
sub _jm_obj_20($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '+')
        {
            # handle must + property
            $must_count++;
            # .'$Element'.'|'.4.'+'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_13_idx (0 .. $#$pval)
                {
                    my $arr_13_item = $$pval[$arr_13_idx];
                    # .'$Element'.'|'.4.'+'.0
                    $res = json_model_32($arr_13_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Element'.'|'.4.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Element'.'|'.4.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Element'.'|'.3
sub _jm_obj_21($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Element'.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_14_idx (0 .. $#$pval)
                {
                    my $arr_14_item = $$pval[$arr_14_idx];
                    # .'$Element'.'|'.3.'^'.0
                    $res = json_model_32($arr_14_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Element'.'|'.3.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Element'.'|'.3.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Element'.'|'.2
sub _jm_obj_22($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$Element'.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_15_idx (0 .. $#$pval)
                {
                    my $arr_15_item = $$pval[$arr_15_idx];
                    # .'$Element'.'|'.2.'&'.0
                    $res = json_model_32($arr_15_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Element'.'|'.2.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Element'.'|'.2.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Element'.'|'.1
sub _jm_obj_23($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Element'.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_16_idx (0 .. $#$pval)
                {
                    my $arr_16_item = $$pval[$arr_16_idx];
                    # .'$Element'.'|'.1.'|'.0
                    $res = json_model_32($arr_16_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Element'.'|'.1.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Element'.'|'.1.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Element'.'|'.0
sub _jm_obj_24($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Element'.'|'.0.'@'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Element'.'|'.0.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$Element'.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 3 re props
            # .'$Element'.'|'.0.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_7($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Element'.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_12($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Element'.'|'.0.'/^(=|!=)$/'
            $res = json_model_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Element (.'$Element')
sub json_model_28($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Element'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Element'.'|'.0
        $res = _jm_obj_24($val, $path, $rep);
        if (! $res)
        {
            # .'$Element'.'|'.1
            $res = _jm_obj_23($val, $path, $rep);
            if (! $res)
            {
                # .'$Element'.'|'.2
                $res = _jm_obj_22($val, $path, $rep);
                if (! $res)
                {
                    # .'$Element'.'|'.3
                    $res = _jm_obj_21($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Element'.'|'.4
                        $res = _jm_obj_20($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$Element'.'|'.5
                            $res = _jm_obj_19($val, $path, $rep);
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# object .'$Trafo'.'~'
sub _jm_obj_26($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Trafo'.'~'.''
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Trafo'
sub _jm_obj_25($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '/')
        {
            # handle may / property
            # .'$Trafo'.'/'
            # .'$Trafo'.'/'.'|'.0
            $res = !defined($pval);
            if (! $res)
            {
                # .'$Trafo'.'/'.'|'.1
                $res = jm_is_boolean($pval);
                if (! $res)
                {
                    # .'$Trafo'.'/'.'|'.2
                    $res = jm_is_integer($pval);
                    if (! $res)
                    {
                        # .'$Trafo'.'/'.'|'.3
                        $res = jm_is_numeric($pval);
                        if (! $res)
                        {
                            # .'$Trafo'.'/'.'|'.4
                            $res = jm_is_string($pval);
                            if (! $res)
                            {
                                # .'$Trafo'.'/'.'|'.5
                                $res = jm_is_array($pval);
                                if ($res)
                                {
                                    # accept any array
                                    ;
                                }
                            }
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Trafo'.'~'
            $res = _jm_obj_26($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '*')
        {
            # handle may * property
            # .'$Trafo'.'*'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Trafo (.'$Trafo')
sub json_model_29($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # remove, rename or add stuff
    # .'$Trafo'
    $res = _jm_obj_25($val, $path, $rep);
    return $res;
}

# object .'$Transformation'.'|'.6.'~'
sub _jm_obj_28($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        # handle other props
        # .'$Transformation'.'|'.6.'~'.''
        $res = jm_is_string($pval);
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Transformation'.'|'.6
sub _jm_obj_27($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Transformation'.'|'.6.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '/')
        {
            # handle may / property
            # .'$Transformation'.'|'.6.'/'
            # .'$Transformation'.'|'.6.'/'.'|'.0
            $res = !defined($pval);
            if (! $res)
            {
                # .'$Transformation'.'|'.6.'/'.'|'.1
                $res = jm_is_boolean($pval);
                if (! $res)
                {
                    # .'$Transformation'.'|'.6.'/'.'|'.2
                    $res = jm_is_integer($pval);
                    if (! $res)
                    {
                        # .'$Transformation'.'|'.6.'/'.'|'.3
                        $res = jm_is_numeric($pval);
                        if (! $res)
                        {
                            # .'$Transformation'.'|'.6.'/'.'|'.4
                            $res = jm_is_string($pval);
                            if (! $res)
                            {
                                # .'$Transformation'.'|'.6.'/'.'|'.5
                                $res = jm_is_array($pval);
                                if ($res)
                                {
                                    # accept any array
                                    ;
                                }
                            }
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Transformation'.'|'.6.'~'
            $res = _jm_obj_28($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '*')
        {
            # handle may * property
            # .'$Transformation'.'|'.6.'*'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Transformation'.'|'.6.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Transformation'.'|'.5
sub _jm_obj_29($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Transformation'.'|'.5.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_25($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Transformation'.'|'.5.'$Prop'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Transformation'.'|'.5.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Transformation'.'|'.4
sub _jm_obj_30($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '+')
        {
            # handle must + property
            $must_count++;
            # .'$Transformation'.'|'.4.'+'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_17_idx (0 .. $#$pval)
                {
                    my $arr_17_item = $$pval[$arr_17_idx];
                    # .'$Transformation'.'|'.4.'+'.0
                    $res = json_model_32($arr_17_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Transformation'.'|'.4.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Transformation'.'|'.4.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Transformation'.'|'.3
sub _jm_obj_31($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Transformation'.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_18_idx (0 .. $#$pval)
                {
                    my $arr_18_item = $$pval[$arr_18_idx];
                    # .'$Transformation'.'|'.3.'^'.0
                    $res = json_model_32($arr_18_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Transformation'.'|'.3.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Transformation'.'|'.3.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Transformation'.'|'.2
sub _jm_obj_32($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$Transformation'.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_19_idx (0 .. $#$pval)
                {
                    my $arr_19_item = $$pval[$arr_19_idx];
                    # .'$Transformation'.'|'.2.'&'.0
                    $res = json_model_32($arr_19_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Transformation'.'|'.2.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Transformation'.'|'.2.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Transformation'.'|'.1
sub _jm_obj_33($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Transformation'.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_20_idx (0 .. $#$pval)
                {
                    my $arr_20_item = $$pval[$arr_20_idx];
                    # .'$Transformation'.'|'.1.'|'.0
                    $res = json_model_32($arr_20_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Transformation'.'|'.1.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Transformation'.'|'.1.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Transformation'.'|'.0
sub _jm_obj_34($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Transformation'.'|'.0.'@'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Transformation'.'|'.0.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$Transformation'.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 3 re props
            # .'$Transformation'.'|'.0.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_7($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Transformation'.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_12($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Transformation'.'|'.0.'/^(=|!=)$/'
            $res = json_model_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}


# check $Transformation (.'$Transformation')
sub json_model_30($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Transformation'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Transformation'.'|'.0
        $res = _jm_obj_34($val, $path, $rep);
        if (! $res)
        {
            # .'$Transformation'.'|'.1
            $res = _jm_obj_33($val, $path, $rep);
            if (! $res)
            {
                # .'$Transformation'.'|'.2
                $res = _jm_obj_32($val, $path, $rep);
                if (! $res)
                {
                    # .'$Transformation'.'|'.3
                    $res = _jm_obj_31($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Transformation'.'|'.4
                        $res = _jm_obj_30($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$Transformation'.'|'.5
                            $res = _jm_obj_29($val, $path, $rep);
                            if (! $res)
                            {
                                # .'$Transformation'.'|'.6
                                $res = _jm_obj_27($val, $path, $rep);
                            }
                        }
                    }
                }
            }
        }
    }
    if (! $res)
    {
        $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_3{$val};
        if (! $res)
        {
            # .'$Transformation'.'|'.0
            $res = !defined($val);
            if (! $res)
            {
                # .'$Transformation'.'|'.1
                $res = jm_is_boolean($val) && $val == 1;
                if (! $res)
                {
                    # .'$Transformation'.'|'.2
                    $res = jm_is_integer($val) && $val == 0;
                    if (! $res)
                    {
                        # .'$Transformation'.'|'.3
                        $res = jm_is_integer($val) && $val == 1;
                        if (! $res)
                        {
                            # .'$Transformation'.'|'.4
                            $res = jm_is_integer($val) && $val == -1;
                            if (! $res)
                            {
                                # .'$Transformation'.'|'.5
                                $res = jm_is_numeric($val) && $val == 0.0;
                                if (! $res)
                                {
                                    # .'$Transformation'.'|'.6
                                    $res = jm_is_numeric($val) && $val == 1.0;
                                    if (! $res)
                                    {
                                        # .'$Transformation'.'|'.7
                                        $res = jm_is_numeric($val) && $val == -1.0;
                                        if (! $res)
                                        {
                                            # .'$Transformation'.'|'.8
                                            $res = json_model_9($val, $path, $rep);
                                            if (! $res)
                                            {
                                                # .'$Transformation'.'|'.9
                                                $res = json_model_8($val, $path, $rep);
                                                if (! $res)
                                                {
                                                    # .'$Transformation'.'|'.10
                                                    # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                                                    $res = jm_is_string($val) && _jm_xre_1($val, $path, $rep);
                                                    if (! $res)
                                                    {
                                                        # .'$Transformation'.'|'.11
                                                        # "/^/($REGEX)/[a-z]*$/X"
                                                        $res = jm_is_string($val) && _jm_xre_0($val, $path, $rep);
                                                        if (! $res)
                                                        {
                                                            # .'$Transformation'.'|'.12
                                                            $res = json_model_7($val, $path, $rep);
                                                            if (! $res)
                                                            {
                                                                # .'$Transformation'.'|'.13
                                                                $res = json_model_18($val, $path, $rep);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}


# check $ScalarModel (.'$ScalarModel')
sub json_model_31($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$ScalarModel'
    $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_4{$val};
    if (! $res)
    {
        # .'$ScalarModel'.'|'.0
        $res = !defined($val);
        if (! $res)
        {
            # .'$ScalarModel'.'|'.1
            $res = jm_is_boolean($val) && $val == 1;
            if (! $res)
            {
                # .'$ScalarModel'.'|'.2
                $res = jm_is_integer($val) && $val == 0;
                if (! $res)
                {
                    # .'$ScalarModel'.'|'.3
                    $res = jm_is_integer($val) && $val == 1;
                    if (! $res)
                    {
                        # .'$ScalarModel'.'|'.4
                        $res = jm_is_integer($val) && $val == -1;
                        if (! $res)
                        {
                            # .'$ScalarModel'.'|'.5
                            $res = jm_is_numeric($val) && $val == 0.0;
                            if (! $res)
                            {
                                # .'$ScalarModel'.'|'.6
                                $res = jm_is_numeric($val) && $val == 1.0;
                                if (! $res)
                                {
                                    # .'$ScalarModel'.'|'.7
                                    $res = jm_is_numeric($val) && $val == -1.0;
                                    if (! $res)
                                    {
                                        # .'$ScalarModel'.'|'.8
                                        $res = json_model_9($val, $path, $rep);
                                        if (! $res)
                                        {
                                            # .'$ScalarModel'.'|'.9
                                            $res = json_model_8($val, $path, $rep);
                                            if (! $res)
                                            {
                                                # .'$ScalarModel'.'|'.10
                                                # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                                                $res = jm_is_string($val) && _jm_xre_1($val, $path, $rep);
                                                if (! $res)
                                                {
                                                    # .'$ScalarModel'.'|'.11
                                                    # "/^/($REGEX)/[a-z]*$/X"
                                                    $res = jm_is_string($val) && _jm_xre_0($val, $path, $rep);
                                                    if (! $res)
                                                    {
                                                        # .'$ScalarModel'.'|'.12
                                                        $res = json_model_7($val, $path, $rep);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# object .'$Model'.'|'.5
sub _jm_obj_35($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Model'.'|'.5.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_25($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Model'.'|'.5.'$Prop'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model'.'|'.5.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Model'.'|'.4
sub _jm_obj_36($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '+')
        {
            # handle must + property
            $must_count++;
            # .'$Model'.'|'.4.'+'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_21_idx (0 .. $#$pval)
                {
                    my $arr_21_item = $$pval[$arr_21_idx];
                    # .'$Model'.'|'.4.'+'.0
                    $res = json_model_32($arr_21_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model'.'|'.4.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model'.'|'.4.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model'.'|'.3
sub _jm_obj_37($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Model'.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_22_idx (0 .. $#$pval)
                {
                    my $arr_22_item = $$pval[$arr_22_idx];
                    # .'$Model'.'|'.3.'^'.0
                    $res = json_model_32($arr_22_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model'.'|'.3.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model'.'|'.3.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model'.'|'.2
sub _jm_obj_38($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$Model'.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_23_idx (0 .. $#$pval)
                {
                    my $arr_23_item = $$pval[$arr_23_idx];
                    # .'$Model'.'|'.2.'&'.0
                    $res = json_model_32($arr_23_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model'.'|'.2.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model'.'|'.2.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model'.'|'.1
sub _jm_obj_39($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Model'.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_24_idx (0 .. $#$pval)
                {
                    my $arr_24_item = $$pval[$arr_24_idx];
                    # .'$Model'.'|'.1.'|'.0
                    $res = json_model_32($arr_24_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model'.'|'.1.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Model'.'|'.1.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Model'.'|'.0
sub _jm_obj_40($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Model'.'|'.0.'@'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Model'.'|'.0.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$Model'.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 3 re props
            # .'$Model'.'|'.0.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_7($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Model'.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_12($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Model'.'|'.0.'/^(=|!=)$/'
            $res = json_model_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}


# check $Model (.'$Model')
sub json_model_32($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Model'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Model'.'|'.0
        $res = _jm_obj_40($val, $path, $rep);
        if (! $res)
        {
            # .'$Model'.'|'.1
            $res = _jm_obj_39($val, $path, $rep);
            if (! $res)
            {
                # .'$Model'.'|'.2
                $res = _jm_obj_38($val, $path, $rep);
                if (! $res)
                {
                    # .'$Model'.'|'.3
                    $res = _jm_obj_37($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Model'.'|'.4
                        $res = _jm_obj_36($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$Model'.'|'.5
                            $res = _jm_obj_35($val, $path, $rep);
                        }
                    }
                }
            }
        }
    }
    if (! $res)
    {
        $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_5{$val};
        if (! $res)
        {
            # .'$Model'.'|'.0
            $res = !defined($val);
            if (! $res)
            {
                # .'$Model'.'|'.1
                $res = jm_is_boolean($val) && $val == 1;
                if (! $res)
                {
                    # .'$Model'.'|'.2
                    $res = jm_is_integer($val) && $val == 0;
                    if (! $res)
                    {
                        # .'$Model'.'|'.3
                        $res = jm_is_integer($val) && $val == 1;
                        if (! $res)
                        {
                            # .'$Model'.'|'.4
                            $res = jm_is_integer($val) && $val == -1;
                            if (! $res)
                            {
                                # .'$Model'.'|'.5
                                $res = jm_is_numeric($val) && $val == 0.0;
                                if (! $res)
                                {
                                    # .'$Model'.'|'.6
                                    $res = jm_is_numeric($val) && $val == 1.0;
                                    if (! $res)
                                    {
                                        # .'$Model'.'|'.7
                                        $res = jm_is_numeric($val) && $val == -1.0;
                                        if (! $res)
                                        {
                                            # .'$Model'.'|'.8
                                            $res = json_model_9($val, $path, $rep);
                                            if (! $res)
                                            {
                                                # .'$Model'.'|'.9
                                                $res = json_model_8($val, $path, $rep);
                                                if (! $res)
                                                {
                                                    # .'$Model'.'|'.10
                                                    # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                                                    $res = jm_is_string($val) && _jm_xre_1($val, $path, $rep);
                                                    if (! $res)
                                                    {
                                                        # .'$Model'.'|'.11
                                                        # "/^/($REGEX)/[a-z]*$/X"
                                                        $res = jm_is_string($val) && _jm_xre_0($val, $path, $rep);
                                                        if (! $res)
                                                        {
                                                            # .'$Model'.'|'.12
                                                            $res = json_model_7($val, $path, $rep);
                                                            if (! $res)
                                                            {
                                                                # .'$Model'.'|'.13
                                                                $res = json_model_18($val, $path, $rep);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# object .'$Defs'
sub _jm_obj_41($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '')
        {
            # handle may  property
            # .'$Defs'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Defs'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Defs (.'$Defs')
sub json_model_33($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Defs'
    $res = _jm_obj_41($val, $path, $rep);
    return $res;
}

sub _jm_re_10($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^([#|&^+\/*@~=\$%]|[<>!]=?)$/;
    return $res;
}

# object .'$Rename'
sub _jm_obj_42($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Rename'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Rename (.'$Rename')
sub json_model_34($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Rename'
    $res = _jm_obj_42($val, $path, $rep);
    return $res;
}

sub _jm_re_11($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /^\$.*$/;
    return $res;
}

# object .'$Rewrite'
sub _jm_obj_43($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (_jm_re_11($prop, $path, $rep))
        {
            # handle 1 re props
            # .'$Rewrite'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Rewrite (.'$Rewrite')
sub json_model_35($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Rewrite'
    $res = _jm_obj_43($val, $path, $rep);
    return $res;
}

# object .'$Import'
sub _jm_obj_44($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '<')
        {
            # handle may < property
            # .'$Import'.'<'
            # .'$Import'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$Import'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_25_idx (0 .. $#$pval)
                    {
                        my $arr_25_item = $$pval[$arr_25_idx];
                        # .'$Import'.'<'.'|'.1.0
                        $res = json_model_7($arr_25_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $Import (.'$Import')
sub json_model_36($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Import'
    $res = _jm_obj_44($val, $path, $rep);
    return $res;
}

# object .'$RootOnly'.'$'
sub _jm_obj_46($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootOnly'.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$RootOnly'.'$'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootOnly'.'$'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$RootOnly'.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootOnly'.'%'
sub _jm_obj_47($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootOnly'.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$RootOnly'.'%'.'<'
            # .'$RootOnly'.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$RootOnly'.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_26_idx (0 .. $#$pval)
                    {
                        my $arr_26_item = $$pval[$arr_26_idx];
                        # .'$RootOnly'.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_26_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootOnly'.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$RootOnly'.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_11($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$RootOnly'.'%'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootOnly'
sub _jm_obj_45($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '~')
        {
            # handle may ~ property
            # .'$RootOnly'.'~'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$RootOnly'.'$'
            $res = _jm_obj_46($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$RootOnly'.'%'
            $res = _jm_obj_47($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# check $RootOnly (.'$RootOnly')
sub json_model_37($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # symbols that can only appear at the model's root
    # .'$RootOnly'
    $res = _jm_obj_45($val, $path, $rep);
    return $res;
}

# object .'$Root'.'|'.5.'$'
sub _jm_obj_49($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.5.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Root'.'|'.5.'$'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Root'.'|'.5.'$'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Root'.'|'.5.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Root'.'|'.5.'%'
sub _jm_obj_50($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.5.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Root'.'|'.5.'%'.'<'
            # .'$Root'.'|'.5.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$Root'.'|'.5.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_27_idx (0 .. $#$pval)
                    {
                        my $arr_27_item = $$pval[$arr_27_idx];
                        # .'$Root'.'|'.5.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_27_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Root'.'|'.5.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$Root'.'|'.5.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_11($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Root'.'|'.5.'%'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Root'.'|'.5
sub _jm_obj_48($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '~')
        {
            # handle may ~ property
            # .'$Root'.'|'.5.'~'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Root'.'|'.5.'$'
            $res = _jm_obj_49($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Root'.'|'.5.'%'
            $res = _jm_obj_50($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.5.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_25($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Root'.'|'.5.'$Prop'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Root'.'|'.5.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Root'.'|'.4.'$'
sub _jm_obj_52($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.4.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Root'.'|'.4.'$'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Root'.'|'.4.'$'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Root'.'|'.4.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Root'.'|'.4.'%'
sub _jm_obj_53($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.4.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Root'.'|'.4.'%'.'<'
            # .'$Root'.'|'.4.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$Root'.'|'.4.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_29_idx (0 .. $#$pval)
                    {
                        my $arr_29_item = $$pval[$arr_29_idx];
                        # .'$Root'.'|'.4.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_29_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Root'.'|'.4.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$Root'.'|'.4.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_11($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Root'.'|'.4.'%'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Root'.'|'.4
sub _jm_obj_51($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '+')
        {
            # handle must + property
            $must_count++;
            # .'$Root'.'|'.4.'+'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_28_idx (0 .. $#$pval)
                {
                    my $arr_28_item = $$pval[$arr_28_idx];
                    # .'$Root'.'|'.4.'+'.0
                    $res = json_model_32($arr_28_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Root'.'|'.4.'~'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Root'.'|'.4.'$'
            $res = _jm_obj_52($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Root'.'|'.4.'%'
            $res = _jm_obj_53($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.4.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Root'.'|'.4.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Root'.'|'.3.'$'
sub _jm_obj_55($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.3.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Root'.'|'.3.'$'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Root'.'|'.3.'$'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Root'.'|'.3.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Root'.'|'.3.'%'
sub _jm_obj_56($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.3.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Root'.'|'.3.'%'.'<'
            # .'$Root'.'|'.3.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$Root'.'|'.3.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_31_idx (0 .. $#$pval)
                    {
                        my $arr_31_item = $$pval[$arr_31_idx];
                        # .'$Root'.'|'.3.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_31_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Root'.'|'.3.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$Root'.'|'.3.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_11($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Root'.'|'.3.'%'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Root'.'|'.3
sub _jm_obj_54($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$Root'.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_30_idx (0 .. $#$pval)
                {
                    my $arr_30_item = $$pval[$arr_30_idx];
                    # .'$Root'.'|'.3.'^'.0
                    $res = json_model_32($arr_30_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Root'.'|'.3.'~'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Root'.'|'.3.'$'
            $res = _jm_obj_55($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Root'.'|'.3.'%'
            $res = _jm_obj_56($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.3.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Root'.'|'.3.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Root'.'|'.2.'$'
sub _jm_obj_58($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.2.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Root'.'|'.2.'$'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Root'.'|'.2.'$'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Root'.'|'.2.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Root'.'|'.2.'%'
sub _jm_obj_59($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.2.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Root'.'|'.2.'%'.'<'
            # .'$Root'.'|'.2.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$Root'.'|'.2.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_33_idx (0 .. $#$pval)
                    {
                        my $arr_33_item = $$pval[$arr_33_idx];
                        # .'$Root'.'|'.2.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_33_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Root'.'|'.2.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$Root'.'|'.2.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_11($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Root'.'|'.2.'%'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Root'.'|'.2
sub _jm_obj_57($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$Root'.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_32_idx (0 .. $#$pval)
                {
                    my $arr_32_item = $$pval[$arr_32_idx];
                    # .'$Root'.'|'.2.'&'.0
                    $res = json_model_32($arr_32_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Root'.'|'.2.'~'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Root'.'|'.2.'$'
            $res = _jm_obj_58($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Root'.'|'.2.'%'
            $res = _jm_obj_59($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.2.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Root'.'|'.2.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Root'.'|'.1.'$'
sub _jm_obj_61($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.1.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Root'.'|'.1.'$'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Root'.'|'.1.'$'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Root'.'|'.1.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Root'.'|'.1.'%'
sub _jm_obj_62($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.1.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Root'.'|'.1.'%'.'<'
            # .'$Root'.'|'.1.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$Root'.'|'.1.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_35_idx (0 .. $#$pval)
                    {
                        my $arr_35_item = $$pval[$arr_35_idx];
                        # .'$Root'.'|'.1.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_35_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Root'.'|'.1.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$Root'.'|'.1.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_11($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Root'.'|'.1.'%'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Root'.'|'.1
sub _jm_obj_60($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$Root'.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_34_idx (0 .. $#$pval)
                {
                    my $arr_34_item = $$pval[$arr_34_idx];
                    # .'$Root'.'|'.1.'|'.0
                    $res = json_model_32($arr_34_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Root'.'|'.1.'~'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Root'.'|'.1.'$'
            $res = _jm_obj_61($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Root'.'|'.1.'%'
            $res = _jm_obj_62($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.1.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Root'.'|'.1.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$Root'.'|'.0.'$'
sub _jm_obj_64($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.0.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$Root'.'|'.0.'$'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Root'.'|'.0.'$'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$Root'.'|'.0.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Root'.'|'.0.'%'
sub _jm_obj_65($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.0.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$Root'.'|'.0.'%'.'<'
            # .'$Root'.'|'.0.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$Root'.'|'.0.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_36_idx (0 .. $#$pval)
                    {
                        my $arr_36_item = $$pval[$arr_36_idx];
                        # .'$Root'.'|'.0.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_36_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$Root'.'|'.0.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$Root'.'|'.0.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_11($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$Root'.'|'.0.'%'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$Root'.'|'.0
sub _jm_obj_63($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$Root'.'|'.0.'@'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$Root'.'|'.0.'~'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$Root'.'|'.0.'$'
            $res = _jm_obj_64($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$Root'.'|'.0.'%'
            $res = _jm_obj_65($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$Root'.'|'.0.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$Root'.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 3 re props
            # .'$Root'.'|'.0.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_7($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Root'.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_12($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$Root'.'|'.0.'/^(=|!=)$/'
            $res = json_model_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# check $Root (.'$Root')
sub json_model_38($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Root'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$Root'.'|'.0
        $res = _jm_obj_63($val, $path, $rep);
        if (! $res)
        {
            # .'$Root'.'|'.1
            $res = _jm_obj_60($val, $path, $rep);
            if (! $res)
            {
                # .'$Root'.'|'.2
                $res = _jm_obj_57($val, $path, $rep);
                if (! $res)
                {
                    # .'$Root'.'|'.3
                    $res = _jm_obj_54($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$Root'.'|'.4
                        $res = _jm_obj_51($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$Root'.'|'.5
                            $res = _jm_obj_48($val, $path, $rep);
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# object .'$RootModel'.'|'.5.'$'
sub _jm_obj_67($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.5.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$RootModel'.'|'.5.'$'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootModel'.'|'.5.'$'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$RootModel'.'|'.5.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootModel'.'|'.5.'%'
sub _jm_obj_68($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.5.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$RootModel'.'|'.5.'%'.'<'
            # .'$RootModel'.'|'.5.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$RootModel'.'|'.5.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_37_idx (0 .. $#$pval)
                    {
                        my $arr_37_item = $$pval[$arr_37_idx];
                        # .'$RootModel'.'|'.5.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_37_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootModel'.'|'.5.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$RootModel'.'|'.5.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_11($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$RootModel'.'|'.5.'%'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootModel'.'|'.5
sub _jm_obj_66($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '~')
        {
            # handle may ~ property
            # .'$RootModel'.'|'.5.'~'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$RootModel'.'|'.5.'$'
            $res = _jm_obj_67($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$RootModel'.'|'.5.'%'
            $res = _jm_obj_68($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.5.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_25($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootModel'.'|'.5.'$Prop'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$RootModel'.'|'.5.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootModel'.'|'.4.'$'
sub _jm_obj_70($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.4.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$RootModel'.'|'.4.'$'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootModel'.'|'.4.'$'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$RootModel'.'|'.4.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootModel'.'|'.4.'%'
sub _jm_obj_71($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.4.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$RootModel'.'|'.4.'%'.'<'
            # .'$RootModel'.'|'.4.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$RootModel'.'|'.4.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_39_idx (0 .. $#$pval)
                    {
                        my $arr_39_item = $$pval[$arr_39_idx];
                        # .'$RootModel'.'|'.4.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_39_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootModel'.'|'.4.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$RootModel'.'|'.4.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_11($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$RootModel'.'|'.4.'%'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootModel'.'|'.4
sub _jm_obj_69($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '+')
        {
            # handle must + property
            $must_count++;
            # .'$RootModel'.'|'.4.'+'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_38_idx (0 .. $#$pval)
                {
                    my $arr_38_item = $$pval[$arr_38_idx];
                    # .'$RootModel'.'|'.4.'+'.0
                    $res = json_model_32($arr_38_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$RootModel'.'|'.4.'~'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$RootModel'.'|'.4.'$'
            $res = _jm_obj_70($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$RootModel'.'|'.4.'%'
            $res = _jm_obj_71($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.4.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$RootModel'.'|'.4.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$RootModel'.'|'.3.'$'
sub _jm_obj_73($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.3.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$RootModel'.'|'.3.'$'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootModel'.'|'.3.'$'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$RootModel'.'|'.3.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootModel'.'|'.3.'%'
sub _jm_obj_74($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.3.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$RootModel'.'|'.3.'%'.'<'
            # .'$RootModel'.'|'.3.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$RootModel'.'|'.3.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_41_idx (0 .. $#$pval)
                    {
                        my $arr_41_item = $$pval[$arr_41_idx];
                        # .'$RootModel'.'|'.3.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_41_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootModel'.'|'.3.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$RootModel'.'|'.3.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_11($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$RootModel'.'|'.3.'%'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootModel'.'|'.3
sub _jm_obj_72($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '^')
        {
            # handle must ^ property
            $must_count++;
            # .'$RootModel'.'|'.3.'^'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_40_idx (0 .. $#$pval)
                {
                    my $arr_40_item = $$pval[$arr_40_idx];
                    # .'$RootModel'.'|'.3.'^'.0
                    $res = json_model_32($arr_40_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$RootModel'.'|'.3.'~'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$RootModel'.'|'.3.'$'
            $res = _jm_obj_73($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$RootModel'.'|'.3.'%'
            $res = _jm_obj_74($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.3.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$RootModel'.'|'.3.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$RootModel'.'|'.2.'$'
sub _jm_obj_76($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.2.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$RootModel'.'|'.2.'$'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootModel'.'|'.2.'$'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$RootModel'.'|'.2.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootModel'.'|'.2.'%'
sub _jm_obj_77($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.2.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$RootModel'.'|'.2.'%'.'<'
            # .'$RootModel'.'|'.2.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$RootModel'.'|'.2.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_43_idx (0 .. $#$pval)
                    {
                        my $arr_43_item = $$pval[$arr_43_idx];
                        # .'$RootModel'.'|'.2.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_43_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootModel'.'|'.2.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$RootModel'.'|'.2.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_11($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$RootModel'.'|'.2.'%'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootModel'.'|'.2
sub _jm_obj_75($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '&')
        {
            # handle must & property
            $must_count++;
            # .'$RootModel'.'|'.2.'&'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_42_idx (0 .. $#$pval)
                {
                    my $arr_42_item = $$pval[$arr_42_idx];
                    # .'$RootModel'.'|'.2.'&'.0
                    $res = json_model_32($arr_42_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$RootModel'.'|'.2.'~'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$RootModel'.'|'.2.'$'
            $res = _jm_obj_76($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$RootModel'.'|'.2.'%'
            $res = _jm_obj_77($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.2.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$RootModel'.'|'.2.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$RootModel'.'|'.1.'$'
sub _jm_obj_79($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.1.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$RootModel'.'|'.1.'$'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootModel'.'|'.1.'$'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$RootModel'.'|'.1.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootModel'.'|'.1.'%'
sub _jm_obj_80($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.1.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$RootModel'.'|'.1.'%'.'<'
            # .'$RootModel'.'|'.1.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$RootModel'.'|'.1.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_45_idx (0 .. $#$pval)
                    {
                        my $arr_45_item = $$pval[$arr_45_idx];
                        # .'$RootModel'.'|'.1.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_45_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootModel'.'|'.1.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$RootModel'.'|'.1.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_11($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$RootModel'.'|'.1.'%'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootModel'.'|'.1
sub _jm_obj_78($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '|')
        {
            # handle must | property
            $must_count++;
            # .'$RootModel'.'|'.1.'|'
            $res = jm_is_array($pval);
            if ($res)
            {
                for my $arr_44_idx (0 .. $#$pval)
                {
                    my $arr_44_item = $$pval[$arr_44_idx];
                    # .'$RootModel'.'|'.1.'|'.0
                    $res = json_model_32($arr_44_item, undef, $rep);
                    if (! $res)
                    {
                        last;
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$RootModel'.'|'.1.'~'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$RootModel'.'|'.1.'$'
            $res = _jm_obj_79($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$RootModel'.'|'.1.'%'
            $res = _jm_obj_80($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.1.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$RootModel'.'|'.1.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}

# object .'$RootModel'.'|'.0.'$'
sub _jm_obj_82($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.0.'$'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '')
        {
            # handle may  property
            # .'$RootModel'.'|'.0.'$'.''
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_4($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootModel'.'|'.0.'$'.'$Identifier'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 1 re props
            # .'$RootModel'.'|'.0.'$'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootModel'.'|'.0.'%'
sub _jm_obj_83($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.0.'%'.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '<')
        {
            # handle may < property
            # .'$RootModel'.'|'.0.'%'.'<'
            # .'$RootModel'.'|'.0.'%'.'<'.'|'.0
            $res = json_model_7($pval, undef, $rep);
            if (! $res)
            {
                # .'$RootModel'.'|'.0.'%'.'<'.'|'.1
                $res = jm_is_array($pval);
                if ($res)
                {
                    for my $arr_46_idx (0 .. $#$pval)
                    {
                        my $arr_46_item = $$pval[$arr_46_idx];
                        # .'$RootModel'.'|'.0.'%'.'<'.'|'.1.0
                        $res = json_model_7($arr_46_item, undef, $rep);
                        if (! $res)
                        {
                            last;
                        }
                    }
                }
            }
            if (! $res)
            {
                return 0;
            }
        }
        elsif (json_model_11($prop, undef, $rep))
        {
            # handle 1 key props
            # .'$RootModel'.'|'.0.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            $res = jm_is_string($pval) && _jm_re_10($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 2 re props
            # .'$RootModel'.'|'.0.'%'.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_11($prop, $path, $rep))
        {
            # handle 2 re props
            # .'$RootModel'.'|'.0.'%'.'/^\\$.*$/'
            $res = json_model_30($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}

# object .'$RootModel'.'|'.0
sub _jm_obj_81($$$)
{
    my ($val, $path, $rep) = @_;
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $res;
    my $must_count = 0;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if ($prop eq '@')
        {
            # handle must @ property
            $must_count++;
            # .'$RootModel'.'|'.0.'@'
            $res = json_model_32($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '~')
        {
            # handle may ~ property
            # .'$RootModel'.'|'.0.'~'
            $res = json_model_2($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '$')
        {
            # handle may $ property
            # .'$RootModel'.'|'.0.'$'
            $res = _jm_obj_82($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '%')
        {
            # handle may % property
            # .'$RootModel'.'|'.0.'%'
            $res = _jm_obj_83($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '#')
        {
            # handle may # property
            # .'$RootModel'.'|'.0.'#'
            $res = jm_is_string($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif ($prop eq '!')
        {
            # handle may ! property
            # .'$RootModel'.'|'.0.'!'
            $res = jm_is_boolean($pval);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (jm_starts_with($prop, '#'))
        {
            # handle 3 re props
            # .'$RootModel'.'|'.0.'/^#/'
            $res = 1;
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_7($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$RootModel'.'|'.0.'/^(<=|>=|<|>)$/'
            $res = json_model_12($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        elsif (_jm_re_8($prop, $path, $rep))
        {
            # handle 3 re props
            # .'$RootModel'.'|'.0.'/^(=|!=)$/'
            $res = json_model_13($pval, undef, $rep);
            if (! $res)
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    if ($must_count != 1)
    {
        return 0;
    }
    return 1;
}


# check $RootModel (.'$RootModel')
sub json_model_39($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$RootModel'
    $res = jm_is_object($val);
    if ($res)
    {
        # .'$RootModel'.'|'.0
        $res = _jm_obj_81($val, $path, $rep);
        if (! $res)
        {
            # .'$RootModel'.'|'.1
            $res = _jm_obj_78($val, $path, $rep);
            if (! $res)
            {
                # .'$RootModel'.'|'.2
                $res = _jm_obj_75($val, $path, $rep);
                if (! $res)
                {
                    # .'$RootModel'.'|'.3
                    $res = _jm_obj_72($val, $path, $rep);
                    if (! $res)
                    {
                        # .'$RootModel'.'|'.4
                        $res = _jm_obj_69($val, $path, $rep);
                        if (! $res)
                        {
                            # .'$RootModel'.'|'.5
                            $res = _jm_obj_66($val, $path, $rep);
                        }
                    }
                }
            }
        }
    }
    if (! $res)
    {
        $res = jm_is_scalar($val) && jm_is_string($val) && exists $_jm_cst_6{$val};
        if (! $res)
        {
            # .'$RootModel'.'|'.0
            $res = !defined($val);
            if (! $res)
            {
                # .'$RootModel'.'|'.1
                $res = jm_is_boolean($val) && $val == 1;
                if (! $res)
                {
                    # .'$RootModel'.'|'.2
                    $res = jm_is_integer($val) && $val == 0;
                    if (! $res)
                    {
                        # .'$RootModel'.'|'.3
                        $res = jm_is_integer($val) && $val == 1;
                        if (! $res)
                        {
                            # .'$RootModel'.'|'.4
                            $res = jm_is_integer($val) && $val == -1;
                            if (! $res)
                            {
                                # .'$RootModel'.'|'.5
                                $res = jm_is_numeric($val) && $val == 0.0;
                                if (! $res)
                                {
                                    # .'$RootModel'.'|'.6
                                    $res = jm_is_numeric($val) && $val == 1.0;
                                    if (! $res)
                                    {
                                        # .'$RootModel'.'|'.7
                                        $res = jm_is_numeric($val) && $val == -1.0;
                                        if (! $res)
                                        {
                                            # .'$RootModel'.'|'.8
                                            $res = json_model_9($val, $path, $rep);
                                            if (! $res)
                                            {
                                                # .'$RootModel'.'|'.9
                                                $res = json_model_8($val, $path, $rep);
                                                if (! $res)
                                                {
                                                    # .'$RootModel'.'|'.10
                                                    # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                                                    $res = jm_is_string($val) && _jm_xre_1($val, $path, $rep);
                                                    if (! $res)
                                                    {
                                                        # .'$RootModel'.'|'.11
                                                        # "/^/($REGEX)/[a-z]*$/X"
                                                        $res = jm_is_string($val) && _jm_xre_0($val, $path, $rep);
                                                        if (! $res)
                                                        {
                                                            # .'$RootModel'.'|'.12
                                                            $res = json_model_7($val, $path, $rep);
                                                            if (! $res)
                                                            {
                                                                # .'$RootModel'.'|'.13
                                                                $res = json_model_18($val, $path, $rep);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    $res = json_model_39($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            '$DATE' => 1,
            '$TIME' => 1,
            '$DATETIME' => 1,
            '$URL' => 1,
            '$URI' => 1,
            '$UUID' => 1,
            '$EMAIL' => 1,
            '$REGEX' => 1,
            '$EXREG' => 1,
            '$NULL' => 1,
            '$BOOL' => 1,
            '$FLOAT' => 1,
            '$F16' => 1,
            '$F32' => 1,
            '$F64' => 1,
            '$NUMBER' => 1,
            '$INT' => 1,
            '$INTEGER' => 1,
            '$I8' => 1,
            '$I16' => 1,
            '$I32' => 1,
            '$I64' => 1,
            '$U8' => 1,
            '$U16' => 1,
            '$U32' => 1,
            '$U64' => 1,
            '$STRING' => 1,
            '$NONE' => 1,
            '$ANY' => 1,
        );
        %_jm_cst_1 = (
            '$DATE' => 1,
            '$TIME' => 1,
            '$DATETIME' => 1,
            '$URL' => 1,
            '$URI' => 1,
            '$UUID' => 1,
            '$EMAIL' => 1,
            '$REGEX' => 1,
            '$EXREG' => 1,
            '$NULL' => 1,
            '$BOOL' => 1,
            '$FLOAT' => 1,
            '$F16' => 1,
            '$F32' => 1,
            '$F64' => 1,
            '$NUMBER' => 1,
            '$INT' => 1,
            '$INTEGER' => 1,
            '$I8' => 1,
            '$I16' => 1,
            '$I32' => 1,
            '$I64' => 1,
            '$U8' => 1,
            '$U16' => 1,
            '$U32' => 1,
            '$U64' => 1,
            '$STRING' => 1,
            '$NONE' => 1,
            '$ANY' => 1,
            '' => 1,
        );
        %_jm_cst_2 = (
            '$DATE' => 1,
            '$TIME' => 1,
            '$DATETIME' => 1,
            '$URL' => 1,
            '$URI' => 1,
            '$UUID' => 1,
            '$EMAIL' => 1,
            '$REGEX' => 1,
            '$EXREG' => 1,
            '$NULL' => 1,
            '$BOOL' => 1,
            '$FLOAT' => 1,
            '$F16' => 1,
            '$F32' => 1,
            '$F64' => 1,
            '$NUMBER' => 1,
            '$INT' => 1,
            '$INTEGER' => 1,
            '$I8' => 1,
            '$I16' => 1,
            '$I32' => 1,
            '$I64' => 1,
            '$U8' => 1,
            '$U16' => 1,
            '$U32' => 1,
            '$U64' => 1,
            '$STRING' => 1,
            '$NONE' => 1,
            '$ANY' => 1,
            '' => 1,
        );
        %_jm_cst_3 = (
            '$DATE' => 1,
            '$TIME' => 1,
            '$DATETIME' => 1,
            '$URL' => 1,
            '$URI' => 1,
            '$UUID' => 1,
            '$EMAIL' => 1,
            '$REGEX' => 1,
            '$EXREG' => 1,
            '$NULL' => 1,
            '$BOOL' => 1,
            '$FLOAT' => 1,
            '$F16' => 1,
            '$F32' => 1,
            '$F64' => 1,
            '$NUMBER' => 1,
            '$INT' => 1,
            '$INTEGER' => 1,
            '$I8' => 1,
            '$I16' => 1,
            '$I32' => 1,
            '$I64' => 1,
            '$U8' => 1,
            '$U16' => 1,
            '$U32' => 1,
            '$U64' => 1,
            '$STRING' => 1,
            '$NONE' => 1,
            '$ANY' => 1,
            '' => 1,
        );
        %_jm_cst_4 = (
            '$DATE' => 1,
            '$TIME' => 1,
            '$DATETIME' => 1,
            '$URL' => 1,
            '$URI' => 1,
            '$UUID' => 1,
            '$EMAIL' => 1,
            '$REGEX' => 1,
            '$EXREG' => 1,
            '$NULL' => 1,
            '$BOOL' => 1,
            '$FLOAT' => 1,
            '$F16' => 1,
            '$F32' => 1,
            '$F64' => 1,
            '$NUMBER' => 1,
            '$INT' => 1,
            '$INTEGER' => 1,
            '$I8' => 1,
            '$I16' => 1,
            '$I32' => 1,
            '$I64' => 1,
            '$U8' => 1,
            '$U16' => 1,
            '$U32' => 1,
            '$U64' => 1,
            '$STRING' => 1,
            '$NONE' => 1,
            '$ANY' => 1,
            '' => 1,
        );
        %_jm_cst_5 = (
            '$DATE' => 1,
            '$TIME' => 1,
            '$DATETIME' => 1,
            '$URL' => 1,
            '$URI' => 1,
            '$UUID' => 1,
            '$EMAIL' => 1,
            '$REGEX' => 1,
            '$EXREG' => 1,
            '$NULL' => 1,
            '$BOOL' => 1,
            '$FLOAT' => 1,
            '$F16' => 1,
            '$F32' => 1,
            '$F64' => 1,
            '$NUMBER' => 1,
            '$INT' => 1,
            '$INTEGER' => 1,
            '$I8' => 1,
            '$I16' => 1,
            '$I32' => 1,
            '$I64' => 1,
            '$U8' => 1,
            '$U16' => 1,
            '$U32' => 1,
            '$U64' => 1,
            '$STRING' => 1,
            '$NONE' => 1,
            '$ANY' => 1,
            '' => 1,
        );
        %_jm_cst_6 = (
            '$DATE' => 1,
            '$TIME' => 1,
            '$DATETIME' => 1,
            '$URL' => 1,
            '$URI' => 1,
            '$UUID' => 1,
            '$EMAIL' => 1,
            '$REGEX' => 1,
            '$EXREG' => 1,
            '$NULL' => 1,
            '$BOOL' => 1,
            '$FLOAT' => 1,
            '$F16' => 1,
            '$F32' => 1,
            '$F64' => 1,
            '$NUMBER' => 1,
            '$INT' => 1,
            '$INTEGER' => 1,
            '$I8' => 1,
            '$I16' => 1,
            '$I32' => 1,
            '$I64' => 1,
            '$U8' => 1,
            '$U16' => 1,
            '$U32' => 1,
            '$U64' => 1,
            '$STRING' => 1,
            '$NONE' => 1,
            '$ANY' => 1,
            '' => 1,
        );
        %check_model_map = (
            '' => \&json_model_39,
            'Url' => \&json_model_2,
            'PreDef' => \&json_model_3,
            'Identifier' => \&json_model_4,
            'ArrayComment' => \&json_model_5,
            'ObjectComment' => \&json_model_6,
            'Ref' => \&json_model_7,
            'ValConst' => \&json_model_8,
            'StrConst' => \&json_model_9,
            'Regex' => \&json_model_10,
            'Name' => \&json_model_11,
            'CmpValue' => \&json_model_12,
            'EqValue' => \&json_model_13,
            'ValModel' => \&json_model_14,
            'StrModel' => \&json_model_15,
            'Any' => \&json_model_16,
            'None' => \&json_model_17,
            'Array' => \&json_model_18,
            'Common' => \&json_model_6,
            'Constraint' => \&json_model_20,
            'Or' => \&json_model_21,
            'And' => \&json_model_22,
            'Xor' => \&json_model_23,
            'Add' => \&json_model_24,
            'Prop' => \&json_model_25,
            'Obj' => \&json_model_26,
            'Elem' => \&json_model_27,
            'Element' => \&json_model_28,
            'Trafo' => \&json_model_29,
            'Transformation' => \&json_model_30,
            'ScalarModel' => \&json_model_31,
            'Model' => \&json_model_32,
            'Defs' => \&json_model_33,
            'Rename' => \&json_model_34,
            'Rewrite' => \&json_model_35,
            'Import' => \&json_model_36,
            'RootOnly' => \&json_model_37,
            'Root' => \&json_model_38,
            'RootModel' => \&json_model_39,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %_jm_cst_1 = ();
        %_jm_cst_2 = ();
        %_jm_cst_3 = ();
        %_jm_cst_4 = ();
        %_jm_cst_5 = ();
        %_jm_cst_6 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
