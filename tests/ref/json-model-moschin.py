#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_obj_0_may: PropMap
_jm_re_0_search: Callable
_jm_re_0: RegexFun
_jm_obj_2_must: PropMap
_jm_obj_2_may: PropMap
_jm_obj_4_must: PropMap
_jm_obj_4_may: PropMap
_jm_obj_6_must: PropMap
_jm_obj_6_may: PropMap
_jm_obj_8_must: PropMap
_jm_obj_8_may: PropMap
_jm_obj_10_must: PropMap
_jm_obj_10_may: PropMap
_jm_re_1_search: Callable
_jm_re_1: RegexFun
_jm_re_2_search: Callable
_jm_re_2: RegexFun
_jm_obj_13_may: PropMap
_jm_re_3_search: Callable
_jm_re_3: RegexFun
_jm_obj_15_may: PropMap
_jm_re_4_search: Callable
_jm_re_4: RegexFun
_jm_re_5_search: Callable
_jm_re_5: RegexFun
_jm_re_6_search: Callable
_jm_re_6: RegexFun
_jm_obj_12_may: PropMap
_jm_obj_18_must: PropMap
_jm_obj_19_may: PropMap
_jm_obj_21_may: PropMap
_jm_obj_18_may: PropMap
_jm_obj_24_must: PropMap
_jm_obj_25_may: PropMap
_jm_obj_27_may: PropMap
_jm_obj_24_may: PropMap
_jm_obj_30_must: PropMap
_jm_obj_31_may: PropMap
_jm_obj_33_may: PropMap
_jm_obj_30_may: PropMap
_jm_obj_36_must: PropMap
_jm_obj_37_may: PropMap
_jm_obj_39_may: PropMap
_jm_obj_36_may: PropMap
_jm_obj_42_must: PropMap
_jm_obj_43_may: PropMap
_jm_obj_45_may: PropMap
_jm_obj_42_may: PropMap
_jm_re_7_search: Callable
_jm_re_7: RegexFun
_jm_obj_48_must: PropMap
_jm_obj_48_may: PropMap
_jm_obj_51_must: PropMap
_jm_obj_51_may: PropMap
check_model_map: PropMap

# check $Model ($.'$Model')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model'
    res = json_model_25(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $RootModel [$.'$Model']", path))
    return res

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [$]", path))
    return res

# check $Model#RootModel ($.'$Model#RootModel')
def json_model_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#RootModel'
    # $.'$Model#RootModel'.'|'.0
    res = json_model_18(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Scalar [$.'$Model#RootModel'.'|'.0]", path))
    if not res:
        # $.'$Model#RootModel'.'|'.1
        res = json_model_9(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Array [$.'$Model#RootModel'.'|'.1]", path))
        if not res:
            # $.'$Model#RootModel'.'|'.2
            res = json_model_24(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Root [$.'$Model#RootModel'.'|'.2]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Model#RootModel'.'|']", path))
    return res

# check $Model#Array ($.'$Model#Array')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Array'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # $.'$Model#Array'.0
            res = json_model_19(arr_0_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Array'.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Model#Array']", path))
    return res

# check $Model#Scalar ($.'$Model#Scalar')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Scalar'
    # $.'$Model#Scalar'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.'$Model#Scalar'.'|'.0]", path))
    if not res:
        # $.'$Model#Scalar'.'|'.1
        res = isinstance(val, bool) and val == True
        if not res:
            rep is None or rep.append(("unexpected =true [$.'$Model#Scalar'.'|'.1]", path))
        if not res:
            # $.'$Model#Scalar'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool) and val == 0
            if not res:
                rep is None or rep.append(("unexpected =0 [$.'$Model#Scalar'.'|'.2]", path))
            if not res:
                # $.'$Model#Scalar'.'|'.3
                res = isinstance(val, int) and not isinstance(val, bool) and val == 1
                if not res:
                    rep is None or rep.append(("unexpected =1 [$.'$Model#Scalar'.'|'.3]", path))
                if not res:
                    # $.'$Model#Scalar'.'|'.4
                    res = isinstance(val, int) and not isinstance(val, bool) and val == -1
                    if not res:
                        rep is None or rep.append(("unexpected =-1 [$.'$Model#Scalar'.'|'.4]", path))
                    if not res:
                        # $.'$Model#Scalar'.'|'.5
                        res = isinstance(val, float) and val == 0.0
                        if not res:
                            rep is None or rep.append(("unexpected =0.0 [$.'$Model#Scalar'.'|'.5]", path))
                        if not res:
                            # $.'$Model#Scalar'.'|'.6
                            res = isinstance(val, float) and val == 1.0
                            if not res:
                                rep is None or rep.append(("unexpected =1.0 [$.'$Model#Scalar'.'|'.6]", path))
                            if not res:
                                # $.'$Model#Scalar'.'|'.7
                                res = isinstance(val, float) and val == -1.0
                                if not res:
                                    rep is None or rep.append(("unexpected =-1.0 [$.'$Model#Scalar'.'|'.7]", path))
                                if not res:
                                    # $.'$Model#Scalar'.'|'.8
                                    res = isinstance(val, str)
                                    if not res:
                                        rep is None or rep.append(("unexpected string [$.'$Model#Scalar'.'|'.8]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Model#Scalar'.'|']", path))
    return res

# check $Model#Model ($.'$Model#Model')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Model'
    # $.'$Model#Model'.'|'.0
    res = json_model_18(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Scalar [$.'$Model#Model'.'|'.0]", path))
    if not res:
        # $.'$Model#Model'.'|'.1
        res = json_model_9(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Array [$.'$Model#Model'.'|'.1]", path))
        if not res:
            # $.'$Model#Model'.'|'.2
            res = json_model_16(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Elem [$.'$Model#Model'.'|'.2]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Model#Model'.'|']", path))
    return res

# check _jm_obj_0_may_# ($.'$Model#Elem'.'|'.5.'#')
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.5.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Elem'.'|'.5.'#']", path))
    return res

# object $.'$Model#Elem'.'|'.5.'.schema'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Elem'.'|'.5.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_0_may_.schema ($.'$Model#Elem'.'|'.5.'.schema')
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.5.'.schema'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Elem'.'|'.5.'.schema']", path))
    return res



# object $.'$Model#Elem'.'|'.5
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Elem'.'|'.5]", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Elem'.'|'.5]", lpath_0 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$Model#Elem'.'|'.5.'/^[@|&^+/*]$/'
            res = False
            if not res:
                rep is None or rep.append(("unexpected $NONE [$.'$Model#Elem'.'|'.5.'/^[@|&^+/*]$/']", lpath_0 if path is not None else None))
            if not res:
                return False
        else:
            # handle other props
            # $.'$Model#Elem'.'|'.5.''
            res = json_model_19(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Elem'.'|'.5.'']", lpath_0 if path is not None else None))
            if not res:
                return False
    return True

# check _jm_obj_2_must_+ ($.'$Model#Elem'.'|'.4.'+')
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.4.'+'
    res = isinstance(val, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(val):
            arr_1_lpath: Path = (path + [ arr_1_idx ]) if path is not None else None
            # $.'$Model#Elem'.'|'.4.'+'.0
            res = json_model_19(arr_1_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Elem'.'|'.4.'+'.0]", arr_1_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Model#Elem'.'|'.4.'+']", path))
    return res


# check _jm_obj_2_may_# ($.'$Model#Elem'.'|'.4.'#')
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.4.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Elem'.'|'.4.'#']", path))
    return res

# object $.'$Model#Elem'.'|'.4.'.schema'
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Elem'.'|'.4.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_2_may_.schema ($.'$Model#Elem'.'|'.4.'.schema')
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.4.'.schema'
    res = _jm_obj_3(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Elem'.'|'.4.'.schema']", path))
    return res


# object $.'$Model#Elem'.'|'.4
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Elem'.'|'.4]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_2_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_1 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Model#Elem'.'|'.4]", lpath_1 if path is not None else None))
                    return False
        elif pfun := _jm_obj_2_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_1 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Elem'.'|'.4]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Elem'.'|'.4]", lpath_1 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Model#Elem'.'|'.4]", path))
        return False
    return True

# check _jm_obj_4_must_^ ($.'$Model#Elem'.'|'.3.'^')
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.3.'^'
    res = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # $.'$Model#Elem'.'|'.3.'^'.0
            res = json_model_19(arr_2_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Elem'.'|'.3.'^'.0]", arr_2_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Model#Elem'.'|'.3.'^']", path))
    return res


# check _jm_obj_4_may_# ($.'$Model#Elem'.'|'.3.'#')
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.3.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Elem'.'|'.3.'#']", path))
    return res

# object $.'$Model#Elem'.'|'.3.'.schema'
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Elem'.'|'.3.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_4_may_.schema ($.'$Model#Elem'.'|'.3.'.schema')
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.3.'.schema'
    res = _jm_obj_5(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Elem'.'|'.3.'.schema']", path))
    return res


# object $.'$Model#Elem'.'|'.3
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Elem'.'|'.3]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_4_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_2 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Model#Elem'.'|'.3]", lpath_2 if path is not None else None))
                    return False
        elif pfun := _jm_obj_4_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_2 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Elem'.'|'.3]", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Elem'.'|'.3]", lpath_2 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Model#Elem'.'|'.3]", path))
        return False
    return True

# check _jm_obj_6_must_& ($.'$Model#Elem'.'|'.2.'&')
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.2.'&'
    res = isinstance(val, list)
    if res:
        for arr_3_idx, arr_3_item in enumerate(val):
            arr_3_lpath: Path = (path + [ arr_3_idx ]) if path is not None else None
            # $.'$Model#Elem'.'|'.2.'&'.0
            res = json_model_19(arr_3_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Elem'.'|'.2.'&'.0]", arr_3_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Model#Elem'.'|'.2.'&']", path))
    return res


# check _jm_obj_6_may_# ($.'$Model#Elem'.'|'.2.'#')
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.2.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Elem'.'|'.2.'#']", path))
    return res

# object $.'$Model#Elem'.'|'.2.'.schema'
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Elem'.'|'.2.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_6_may_.schema ($.'$Model#Elem'.'|'.2.'.schema')
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.2.'.schema'
    res = _jm_obj_7(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Elem'.'|'.2.'.schema']", path))
    return res


# object $.'$Model#Elem'.'|'.2
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Elem'.'|'.2]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_6_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_3 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Model#Elem'.'|'.2]", lpath_3 if path is not None else None))
                    return False
        elif pfun := _jm_obj_6_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_3 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Elem'.'|'.2]", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Elem'.'|'.2]", lpath_3 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Model#Elem'.'|'.2]", path))
        return False
    return True

# check _jm_obj_8_must_| ($.'$Model#Elem'.'|'.1.'|')
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.1.'|'
    res = isinstance(val, list)
    if res:
        for arr_4_idx, arr_4_item in enumerate(val):
            arr_4_lpath: Path = (path + [ arr_4_idx ]) if path is not None else None
            # $.'$Model#Elem'.'|'.1.'|'.0
            res = json_model_19(arr_4_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Elem'.'|'.1.'|'.0]", arr_4_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Model#Elem'.'|'.1.'|']", path))
    return res


# check _jm_obj_8_may_# ($.'$Model#Elem'.'|'.1.'#')
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.1.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Elem'.'|'.1.'#']", path))
    return res

# object $.'$Model#Elem'.'|'.1.'.schema'
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Elem'.'|'.1.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_8_may_.schema ($.'$Model#Elem'.'|'.1.'.schema')
def _jm_f_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.1.'.schema'
    res = _jm_obj_9(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Elem'.'|'.1.'.schema']", path))
    return res


# object $.'$Model#Elem'.'|'.1
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Elem'.'|'.1]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_8_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_4 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Model#Elem'.'|'.1]", lpath_4 if path is not None else None))
                    return False
        elif pfun := _jm_obj_8_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_4 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Elem'.'|'.1]", lpath_4 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Elem'.'|'.1]", lpath_4 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Model#Elem'.'|'.1]", path))
        return False
    return True

# check _jm_obj_10_must_@ ($.'$Model#Elem'.'|'.0.'@')
def _jm_f_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.0.'@'
    res = json_model_19(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [$.'$Model#Elem'.'|'.0.'@']", path))
    return res


# check _jm_obj_10_may_! ($.'$Model#Elem'.'|'.0.'!')
def _jm_f_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.0.'!'
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Model#Elem'.'|'.0.'!']", path))
    return res

# check _jm_obj_10_may_# ($.'$Model#Elem'.'|'.0.'#')
def _jm_f_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.0.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Elem'.'|'.0.'#']", path))
    return res

# check _jm_obj_10_may_.in ($.'$Model#Elem'.'|'.0.'.in')
def _jm_f_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.0.'.in'
    res = json_model_19(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [$.'$Model#Elem'.'|'.0.'.in']", path))
    return res

# check _jm_obj_10_may_.mo ($.'$Model#Elem'.'|'.0.'.mo')
def _jm_f_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.0.'.mo'
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [$.'$Model#Elem'.'|'.0.'.mo']", path))
    return res

# object $.'$Model#Elem'.'|'.0.'.schema'
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Elem'.'|'.0.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_10_may_.schema ($.'$Model#Elem'.'|'.0.'.schema')
def _jm_f_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'.'|'.0.'.schema'
    res = _jm_obj_11(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Elem'.'|'.0.'.schema']", path))
    return res




# object $.'$Model#Elem'.'|'.0
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Elem'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_10_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_5 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Model#Elem'.'|'.0]", lpath_5 if path is not None else None))
                    return False
        elif pfun := _jm_obj_10_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_5 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Elem'.'|'.0]", lpath_5 if path is not None else None))
                return False
        elif _jm_re_1(prop):
            # handle {len(regs)} re props
            # $.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [$.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]", lpath_5 if path is not None else None))
            if not res:
                # $.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                res = isinstance(pval, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [$.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]", lpath_5 if path is not None else None))
                if not res:
                    # $.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    res = isinstance(pval, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [$.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("no model matched [$.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|']", lpath_5 if path is not None else None))
            if not res:
                return False
        elif _jm_re_2(prop):
            # handle {len(regs)} re props
            # $.'$Model#Elem'.'|'.0.'/^(=|!=|≠)$/'
            res = json_model_5(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Val [$.'$Model#Elem'.'|'.0.'/^(=|!=|≠)$/']", lpath_5 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Elem'.'|'.0]", lpath_5 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Model#Elem'.'|'.0]", path))
        return False
    return True

# check $Model#Elem ($.'$Model#Elem')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Elem'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'$Model#Elem'.'|']", path))
    if res:
        # $.'$Model#Elem'.'|'.0
        res = _jm_obj_10(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$Model#Elem'.'|'.0]", path))
        if not res:
            # $.'$Model#Elem'.'|'.1
            res = _jm_obj_8(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'$Model#Elem'.'|'.1]", path))
            if not res:
                # $.'$Model#Elem'.'|'.2
                res = _jm_obj_6(val, path, rep)
                if not res:
                    rep is None or rep.append(("not an expected object at [$.'$Model#Elem'.'|'.2]", path))
                if not res:
                    # $.'$Model#Elem'.'|'.3
                    res = _jm_obj_4(val, path, rep)
                    if not res:
                        rep is None or rep.append(("not an expected object at [$.'$Model#Elem'.'|'.3]", path))
                    if not res:
                        # $.'$Model#Elem'.'|'.4
                        res = _jm_obj_2(val, path, rep)
                        if not res:
                            rep is None or rep.append(("not an expected object at [$.'$Model#Elem'.'|'.4]", path))
                        if not res:
                            # $.'$Model#Elem'.'|'.5
                            res = _jm_obj_0(val, path, rep)
                            if not res:
                                rep is None or rep.append(("not an expected object at [$.'$Model#Elem'.'|'.5]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'$Model#Elem'.'|']", path))
    return res

# check $Model#Val ($.'$Model#Val')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Val'
    # $.'$Model#Val'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.'$Model#Val'.'|'.0]", path))
    if not res:
        # $.'$Model#Val'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [$.'$Model#Val'.'|'.1]", path))
        if not res:
            # $.'$Model#Val'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [$.'$Model#Val'.'|'.2]", path))
            if not res:
                # $.'$Model#Val'.'|'.3
                res = isinstance(val, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [$.'$Model#Val'.'|'.3]", path))
                if not res:
                    # $.'$Model#Val'.'|'.4
                    res = isinstance(val, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [$.'$Model#Val'.'|'.4]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Model#Val'.'|']", path))
    return res

# check _jm_obj_12_may_# ($.'$Model#Root'.'|'.5.'#')
def _jm_f_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.5.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.5.'#']", path))
    return res

# check _jm_obj_13_may_ ($.'$Model#Root'.'|'.5.'$'.'')
def _jm_f_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.5.'$'.''
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Model#Root'.'|'.5.'$'.'']", path))
    return res

# check _jm_obj_13_may_# ($.'$Model#Root'.'|'.5.'$'.'#')
def _jm_f_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.5.'$'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.5.'$'.'#']", path))
    return res

# object $.'$Model#Root'.'|'.5.'$'.'.schema'
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.5.'$'.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_13_may_.schema ($.'$Model#Root'.'|'.5.'$'.'.schema')
def _jm_f_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.5.'$'.'.schema'
    res = _jm_obj_14(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.5.'$'.'.schema']", path))
    return res



# object $.'$Model#Root'.'|'.5.'$'
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.5.'$']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_13_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_7 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.5.'$']", lpath_7 if path is not None else None))
                return False
        elif _jm_re_3(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.5.'$'.'/.+/'
            res = json_model_19(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Root'.'|'.5.'$'.'/.+/']", lpath_7 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.5.'$']", lpath_7 if path is not None else None))
            return False
    return True

# check _jm_obj_12_may_$ ($.'$Model#Root'.'|'.5.'$')
def _jm_f_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.5.'$'
    res = _jm_obj_13(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.5.'$']", path))
    return res

# check _jm_obj_15_may_# ($.'$Model#Root'.'|'.5.'%'.'#')
def _jm_f_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.5.'%'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.5.'%'.'#']", path))
    return res

# object $.'$Model#Root'.'|'.5.'%'.'.schema'
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.5.'%'.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_15_may_.schema ($.'$Model#Root'.'|'.5.'%'.'.schema')
def _jm_f_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.5.'%'.'.schema'
    res = _jm_obj_16(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.5.'%'.'.schema']", path))
    return res





# object $.'$Model#Root'.'|'.5.'%'
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.5.'%']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_15_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_8 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.5.'%']", lpath_8 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.5.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_5(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$Model#Root'.'|'.5.'%'.'/^\\\\..+$/']", lpath_8 if path is not None else None))
            if not res:
                return False
        elif _jm_re_6(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.5.'%'.'/^\\$.*$/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$Model#Root'.'|'.5.'%'.'/^\\\\$.*$/']", lpath_8 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.5.'%']", lpath_8 if path is not None else None))
            return False
    return True

# check _jm_obj_12_may_% ($.'$Model#Root'.'|'.5.'%')
def _jm_f_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.5.'%'
    res = _jm_obj_15(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.5.'%']", path))
    return res

# object $.'$Model#Root'.'|'.5.'.schema'
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.5.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_12_may_.schema ($.'$Model#Root'.'|'.5.'.schema')
def _jm_f_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.5.'.schema'
    res = _jm_obj_17(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.5.'.schema']", path))
    return res

# check _jm_obj_12_may_~ ($.'$Model#Root'.'|'.5.'~')
def _jm_f_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.5.'~'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Model#Root'.'|'.5.'~']", path))
    return res


# object $.'$Model#Root'.'|'.5
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.5]", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_12_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_6 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.5]", lpath_6 if path is not None else None))
                return False
        elif _jm_re_0(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.5.'/^[@|&^+/*]$/'
            res = False
            if not res:
                rep is None or rep.append(("unexpected $NONE [$.'$Model#Root'.'|'.5.'/^[@|&^+/*]$/']", lpath_6 if path is not None else None))
            if not res:
                return False
        else:
            # handle other props
            # $.'$Model#Root'.'|'.5.''
            res = json_model_19(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Root'.'|'.5.'']", lpath_6 if path is not None else None))
            if not res:
                return False
    return True

# check _jm_obj_18_must_+ ($.'$Model#Root'.'|'.4.'+')
def _jm_f_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.4.'+'
    res = isinstance(val, list)
    if res:
        for arr_5_idx, arr_5_item in enumerate(val):
            arr_5_lpath: Path = (path + [ arr_5_idx ]) if path is not None else None
            # $.'$Model#Root'.'|'.4.'+'.0
            res = json_model_19(arr_5_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Root'.'|'.4.'+'.0]", arr_5_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Model#Root'.'|'.4.'+']", path))
    return res


# check _jm_obj_18_may_# ($.'$Model#Root'.'|'.4.'#')
def _jm_f_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.4.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.4.'#']", path))
    return res

# check _jm_obj_19_may_ ($.'$Model#Root'.'|'.4.'$'.'')
def _jm_f_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.4.'$'.''
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Model#Root'.'|'.4.'$'.'']", path))
    return res

# check _jm_obj_19_may_# ($.'$Model#Root'.'|'.4.'$'.'#')
def _jm_f_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.4.'$'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.4.'$'.'#']", path))
    return res

# object $.'$Model#Root'.'|'.4.'$'.'.schema'
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.4.'$'.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_19_may_.schema ($.'$Model#Root'.'|'.4.'$'.'.schema')
def _jm_f_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.4.'$'.'.schema'
    res = _jm_obj_20(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.4.'$'.'.schema']", path))
    return res


# object $.'$Model#Root'.'|'.4.'$'
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.4.'$']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_19_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_10 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.4.'$']", lpath_10 if path is not None else None))
                return False
        elif _jm_re_3(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.4.'$'.'/.+/'
            res = json_model_19(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Root'.'|'.4.'$'.'/.+/']", lpath_10 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.4.'$']", lpath_10 if path is not None else None))
            return False
    return True

# check _jm_obj_18_may_$ ($.'$Model#Root'.'|'.4.'$')
def _jm_f_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.4.'$'
    res = _jm_obj_19(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.4.'$']", path))
    return res

# check _jm_obj_21_may_# ($.'$Model#Root'.'|'.4.'%'.'#')
def _jm_f_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.4.'%'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.4.'%'.'#']", path))
    return res

# object $.'$Model#Root'.'|'.4.'%'.'.schema'
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.4.'%'.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_21_may_.schema ($.'$Model#Root'.'|'.4.'%'.'.schema')
def _jm_f_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.4.'%'.'.schema'
    res = _jm_obj_22(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.4.'%'.'.schema']", path))
    return res


# object $.'$Model#Root'.'|'.4.'%'
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.4.'%']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_21_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_11 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.4.'%']", lpath_11 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.4.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_5(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$Model#Root'.'|'.4.'%'.'/^\\\\..+$/']", lpath_11 if path is not None else None))
            if not res:
                return False
        elif _jm_re_6(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.4.'%'.'/^\\$.*$/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$Model#Root'.'|'.4.'%'.'/^\\\\$.*$/']", lpath_11 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.4.'%']", lpath_11 if path is not None else None))
            return False
    return True

# check _jm_obj_18_may_% ($.'$Model#Root'.'|'.4.'%')
def _jm_f_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.4.'%'
    res = _jm_obj_21(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.4.'%']", path))
    return res

# object $.'$Model#Root'.'|'.4.'.schema'
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.4.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_18_may_.schema ($.'$Model#Root'.'|'.4.'.schema')
def _jm_f_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.4.'.schema'
    res = _jm_obj_23(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.4.'.schema']", path))
    return res

# check _jm_obj_18_may_~ ($.'$Model#Root'.'|'.4.'~')
def _jm_f_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.4.'~'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Model#Root'.'|'.4.'~']", path))
    return res


# object $.'$Model#Root'.'|'.4
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.4]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_18_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_9 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Model#Root'.'|'.4]", lpath_9 if path is not None else None))
                    return False
        elif pfun := _jm_obj_18_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_9 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.4]", lpath_9 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.4]", lpath_9 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Model#Root'.'|'.4]", path))
        return False
    return True

# check _jm_obj_24_must_^ ($.'$Model#Root'.'|'.3.'^')
def _jm_f_41(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.3.'^'
    res = isinstance(val, list)
    if res:
        for arr_6_idx, arr_6_item in enumerate(val):
            arr_6_lpath: Path = (path + [ arr_6_idx ]) if path is not None else None
            # $.'$Model#Root'.'|'.3.'^'.0
            res = json_model_19(arr_6_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Root'.'|'.3.'^'.0]", arr_6_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Model#Root'.'|'.3.'^']", path))
    return res


# check _jm_obj_24_may_# ($.'$Model#Root'.'|'.3.'#')
def _jm_f_42(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.3.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.3.'#']", path))
    return res

# check _jm_obj_25_may_ ($.'$Model#Root'.'|'.3.'$'.'')
def _jm_f_44(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.3.'$'.''
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Model#Root'.'|'.3.'$'.'']", path))
    return res

# check _jm_obj_25_may_# ($.'$Model#Root'.'|'.3.'$'.'#')
def _jm_f_45(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.3.'$'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.3.'$'.'#']", path))
    return res

# object $.'$Model#Root'.'|'.3.'$'.'.schema'
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.3.'$'.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_25_may_.schema ($.'$Model#Root'.'|'.3.'$'.'.schema')
def _jm_f_46(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.3.'$'.'.schema'
    res = _jm_obj_26(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.3.'$'.'.schema']", path))
    return res


# object $.'$Model#Root'.'|'.3.'$'
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.3.'$']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_25_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_13 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.3.'$']", lpath_13 if path is not None else None))
                return False
        elif _jm_re_3(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.3.'$'.'/.+/'
            res = json_model_19(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Root'.'|'.3.'$'.'/.+/']", lpath_13 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.3.'$']", lpath_13 if path is not None else None))
            return False
    return True

# check _jm_obj_24_may_$ ($.'$Model#Root'.'|'.3.'$')
def _jm_f_43(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.3.'$'
    res = _jm_obj_25(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.3.'$']", path))
    return res

# check _jm_obj_27_may_# ($.'$Model#Root'.'|'.3.'%'.'#')
def _jm_f_48(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.3.'%'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.3.'%'.'#']", path))
    return res

# object $.'$Model#Root'.'|'.3.'%'.'.schema'
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.3.'%'.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_27_may_.schema ($.'$Model#Root'.'|'.3.'%'.'.schema')
def _jm_f_49(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.3.'%'.'.schema'
    res = _jm_obj_28(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.3.'%'.'.schema']", path))
    return res


# object $.'$Model#Root'.'|'.3.'%'
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.3.'%']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_27_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_14 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.3.'%']", lpath_14 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.3.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_5(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$Model#Root'.'|'.3.'%'.'/^\\\\..+$/']", lpath_14 if path is not None else None))
            if not res:
                return False
        elif _jm_re_6(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.3.'%'.'/^\\$.*$/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$Model#Root'.'|'.3.'%'.'/^\\\\$.*$/']", lpath_14 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.3.'%']", lpath_14 if path is not None else None))
            return False
    return True

# check _jm_obj_24_may_% ($.'$Model#Root'.'|'.3.'%')
def _jm_f_47(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.3.'%'
    res = _jm_obj_27(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.3.'%']", path))
    return res

# object $.'$Model#Root'.'|'.3.'.schema'
def _jm_obj_29(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.3.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_24_may_.schema ($.'$Model#Root'.'|'.3.'.schema')
def _jm_f_50(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.3.'.schema'
    res = _jm_obj_29(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.3.'.schema']", path))
    return res

# check _jm_obj_24_may_~ ($.'$Model#Root'.'|'.3.'~')
def _jm_f_51(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.3.'~'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Model#Root'.'|'.3.'~']", path))
    return res


# object $.'$Model#Root'.'|'.3
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.3]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_24_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_12 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Model#Root'.'|'.3]", lpath_12 if path is not None else None))
                    return False
        elif pfun := _jm_obj_24_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_12 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.3]", lpath_12 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.3]", lpath_12 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Model#Root'.'|'.3]", path))
        return False
    return True

# check _jm_obj_30_must_& ($.'$Model#Root'.'|'.2.'&')
def _jm_f_52(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.2.'&'
    res = isinstance(val, list)
    if res:
        for arr_7_idx, arr_7_item in enumerate(val):
            arr_7_lpath: Path = (path + [ arr_7_idx ]) if path is not None else None
            # $.'$Model#Root'.'|'.2.'&'.0
            res = json_model_19(arr_7_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Root'.'|'.2.'&'.0]", arr_7_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Model#Root'.'|'.2.'&']", path))
    return res


# check _jm_obj_30_may_# ($.'$Model#Root'.'|'.2.'#')
def _jm_f_53(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.2.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.2.'#']", path))
    return res

# check _jm_obj_31_may_ ($.'$Model#Root'.'|'.2.'$'.'')
def _jm_f_55(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.2.'$'.''
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Model#Root'.'|'.2.'$'.'']", path))
    return res

# check _jm_obj_31_may_# ($.'$Model#Root'.'|'.2.'$'.'#')
def _jm_f_56(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.2.'$'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.2.'$'.'#']", path))
    return res

# object $.'$Model#Root'.'|'.2.'$'.'.schema'
def _jm_obj_32(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.2.'$'.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_31_may_.schema ($.'$Model#Root'.'|'.2.'$'.'.schema')
def _jm_f_57(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.2.'$'.'.schema'
    res = _jm_obj_32(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.2.'$'.'.schema']", path))
    return res


# object $.'$Model#Root'.'|'.2.'$'
def _jm_obj_31(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.2.'$']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_31_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_16 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.2.'$']", lpath_16 if path is not None else None))
                return False
        elif _jm_re_3(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.2.'$'.'/.+/'
            res = json_model_19(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Root'.'|'.2.'$'.'/.+/']", lpath_16 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.2.'$']", lpath_16 if path is not None else None))
            return False
    return True

# check _jm_obj_30_may_$ ($.'$Model#Root'.'|'.2.'$')
def _jm_f_54(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.2.'$'
    res = _jm_obj_31(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.2.'$']", path))
    return res

# check _jm_obj_33_may_# ($.'$Model#Root'.'|'.2.'%'.'#')
def _jm_f_59(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.2.'%'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.2.'%'.'#']", path))
    return res

# object $.'$Model#Root'.'|'.2.'%'.'.schema'
def _jm_obj_34(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.2.'%'.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_33_may_.schema ($.'$Model#Root'.'|'.2.'%'.'.schema')
def _jm_f_60(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.2.'%'.'.schema'
    res = _jm_obj_34(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.2.'%'.'.schema']", path))
    return res


# object $.'$Model#Root'.'|'.2.'%'
def _jm_obj_33(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.2.'%']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_33_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_17 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.2.'%']", lpath_17 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.2.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_5(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$Model#Root'.'|'.2.'%'.'/^\\\\..+$/']", lpath_17 if path is not None else None))
            if not res:
                return False
        elif _jm_re_6(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.2.'%'.'/^\\$.*$/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$Model#Root'.'|'.2.'%'.'/^\\\\$.*$/']", lpath_17 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.2.'%']", lpath_17 if path is not None else None))
            return False
    return True

# check _jm_obj_30_may_% ($.'$Model#Root'.'|'.2.'%')
def _jm_f_58(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.2.'%'
    res = _jm_obj_33(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.2.'%']", path))
    return res

# object $.'$Model#Root'.'|'.2.'.schema'
def _jm_obj_35(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.2.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_30_may_.schema ($.'$Model#Root'.'|'.2.'.schema')
def _jm_f_61(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.2.'.schema'
    res = _jm_obj_35(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.2.'.schema']", path))
    return res

# check _jm_obj_30_may_~ ($.'$Model#Root'.'|'.2.'~')
def _jm_f_62(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.2.'~'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Model#Root'.'|'.2.'~']", path))
    return res


# object $.'$Model#Root'.'|'.2
def _jm_obj_30(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.2]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_30_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_15 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Model#Root'.'|'.2]", lpath_15 if path is not None else None))
                    return False
        elif pfun := _jm_obj_30_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_15 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.2]", lpath_15 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.2]", lpath_15 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Model#Root'.'|'.2]", path))
        return False
    return True

# check _jm_obj_36_must_| ($.'$Model#Root'.'|'.1.'|')
def _jm_f_63(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.1.'|'
    res = isinstance(val, list)
    if res:
        for arr_8_idx, arr_8_item in enumerate(val):
            arr_8_lpath: Path = (path + [ arr_8_idx ]) if path is not None else None
            # $.'$Model#Root'.'|'.1.'|'.0
            res = json_model_19(arr_8_item, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Root'.'|'.1.'|'.0]", arr_8_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Model#Root'.'|'.1.'|']", path))
    return res


# check _jm_obj_36_may_# ($.'$Model#Root'.'|'.1.'#')
def _jm_f_64(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.1.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.1.'#']", path))
    return res

# check _jm_obj_37_may_ ($.'$Model#Root'.'|'.1.'$'.'')
def _jm_f_66(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.1.'$'.''
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Model#Root'.'|'.1.'$'.'']", path))
    return res

# check _jm_obj_37_may_# ($.'$Model#Root'.'|'.1.'$'.'#')
def _jm_f_67(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.1.'$'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.1.'$'.'#']", path))
    return res

# object $.'$Model#Root'.'|'.1.'$'.'.schema'
def _jm_obj_38(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.1.'$'.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_37_may_.schema ($.'$Model#Root'.'|'.1.'$'.'.schema')
def _jm_f_68(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.1.'$'.'.schema'
    res = _jm_obj_38(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.1.'$'.'.schema']", path))
    return res


# object $.'$Model#Root'.'|'.1.'$'
def _jm_obj_37(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.1.'$']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_37_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_19 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.1.'$']", lpath_19 if path is not None else None))
                return False
        elif _jm_re_3(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.1.'$'.'/.+/'
            res = json_model_19(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Root'.'|'.1.'$'.'/.+/']", lpath_19 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.1.'$']", lpath_19 if path is not None else None))
            return False
    return True

# check _jm_obj_36_may_$ ($.'$Model#Root'.'|'.1.'$')
def _jm_f_65(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.1.'$'
    res = _jm_obj_37(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.1.'$']", path))
    return res

# check _jm_obj_39_may_# ($.'$Model#Root'.'|'.1.'%'.'#')
def _jm_f_70(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.1.'%'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.1.'%'.'#']", path))
    return res

# object $.'$Model#Root'.'|'.1.'%'.'.schema'
def _jm_obj_40(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.1.'%'.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_39_may_.schema ($.'$Model#Root'.'|'.1.'%'.'.schema')
def _jm_f_71(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.1.'%'.'.schema'
    res = _jm_obj_40(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.1.'%'.'.schema']", path))
    return res


# object $.'$Model#Root'.'|'.1.'%'
def _jm_obj_39(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.1.'%']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_39_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_20 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.1.'%']", lpath_20 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.1.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_5(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$Model#Root'.'|'.1.'%'.'/^\\\\..+$/']", lpath_20 if path is not None else None))
            if not res:
                return False
        elif _jm_re_6(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.1.'%'.'/^\\$.*$/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$Model#Root'.'|'.1.'%'.'/^\\\\$.*$/']", lpath_20 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.1.'%']", lpath_20 if path is not None else None))
            return False
    return True

# check _jm_obj_36_may_% ($.'$Model#Root'.'|'.1.'%')
def _jm_f_69(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.1.'%'
    res = _jm_obj_39(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.1.'%']", path))
    return res

# object $.'$Model#Root'.'|'.1.'.schema'
def _jm_obj_41(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.1.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_36_may_.schema ($.'$Model#Root'.'|'.1.'.schema')
def _jm_f_72(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.1.'.schema'
    res = _jm_obj_41(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.1.'.schema']", path))
    return res

# check _jm_obj_36_may_~ ($.'$Model#Root'.'|'.1.'~')
def _jm_f_73(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.1.'~'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Model#Root'.'|'.1.'~']", path))
    return res


# object $.'$Model#Root'.'|'.1
def _jm_obj_36(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.1]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_36_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_18 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Model#Root'.'|'.1]", lpath_18 if path is not None else None))
                    return False
        elif pfun := _jm_obj_36_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_18 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.1]", lpath_18 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.1]", lpath_18 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Model#Root'.'|'.1]", path))
        return False
    return True

# check _jm_obj_42_must_@ ($.'$Model#Root'.'|'.0.'@')
def _jm_f_74(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'@'
    res = json_model_19(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [$.'$Model#Root'.'|'.0.'@']", path))
    return res


# check _jm_obj_42_may_! ($.'$Model#Root'.'|'.0.'!')
def _jm_f_75(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'!'
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$.'$Model#Root'.'|'.0.'!']", path))
    return res

# check _jm_obj_42_may_# ($.'$Model#Root'.'|'.0.'#')
def _jm_f_76(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.0.'#']", path))
    return res

# check _jm_obj_43_may_ ($.'$Model#Root'.'|'.0.'$'.'')
def _jm_f_78(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'$'.''
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Model#Root'.'|'.0.'$'.'']", path))
    return res

# check _jm_obj_43_may_# ($.'$Model#Root'.'|'.0.'$'.'#')
def _jm_f_79(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'$'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.0.'$'.'#']", path))
    return res

# object $.'$Model#Root'.'|'.0.'$'.'.schema'
def _jm_obj_44(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.0.'$'.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_43_may_.schema ($.'$Model#Root'.'|'.0.'$'.'.schema')
def _jm_f_80(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'$'.'.schema'
    res = _jm_obj_44(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.0.'$'.'.schema']", path))
    return res


# object $.'$Model#Root'.'|'.0.'$'
def _jm_obj_43(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.0.'$']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_43_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_22 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.0.'$']", lpath_22 if path is not None else None))
                return False
        elif _jm_re_3(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.0.'$'.'/.+/'
            res = json_model_19(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [$.'$Model#Root'.'|'.0.'$'.'/.+/']", lpath_22 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.0.'$']", lpath_22 if path is not None else None))
            return False
    return True

# check _jm_obj_42_may_$ ($.'$Model#Root'.'|'.0.'$')
def _jm_f_77(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'$'
    res = _jm_obj_43(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.0.'$']", path))
    return res

# check _jm_obj_45_may_# ($.'$Model#Root'.'|'.0.'%'.'#')
def _jm_f_82(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'%'.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.0.'%'.'#']", path))
    return res

# object $.'$Model#Root'.'|'.0.'%'.'.schema'
def _jm_obj_46(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.0.'%'.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_45_may_.schema ($.'$Model#Root'.'|'.0.'%'.'.schema')
def _jm_f_83(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'%'.'.schema'
    res = _jm_obj_46(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.0.'%'.'.schema']", path))
    return res


# object $.'$Model#Root'.'|'.0.'%'
def _jm_obj_45(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.0.'%']", path))
        return False
    res: bool
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_45_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_23 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.0.'%']", lpath_23 if path is not None else None))
                return False
        elif _jm_re_4(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.0.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_5(pval)
            if not res:
                rep is None or rep.append(("unexpected REGEX [$.'$Model#Root'.'|'.0.'%'.'/^\\\\..+$/']", lpath_23 if path is not None else None))
            if not res:
                return False
        elif _jm_re_6(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.0.'%'.'/^\\$.*$/'
            res = json_model_17(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [$.'$Model#Root'.'|'.0.'%'.'/^\\\\$.*$/']", lpath_23 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.0.'%']", lpath_23 if path is not None else None))
            return False
    return True

# check _jm_obj_42_may_% ($.'$Model#Root'.'|'.0.'%')
def _jm_f_81(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'%'
    res = _jm_obj_45(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.0.'%']", path))
    return res

# check _jm_obj_42_may_.in ($.'$Model#Root'.'|'.0.'.in')
def _jm_f_84(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'.in'
    res = json_model_19(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [$.'$Model#Root'.'|'.0.'.in']", path))
    return res

# check _jm_obj_42_may_.mo ($.'$Model#Root'.'|'.0.'.mo')
def _jm_f_85(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'.mo'
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 1
    if not res:
        rep is None or rep.append(("not a 1 strict int [$.'$Model#Root'.'|'.0.'.mo']", path))
    return res

# object $.'$Model#Root'.'|'.0.'.schema'
def _jm_obj_47(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.0.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_42_may_.schema ($.'$Model#Root'.'|'.0.'.schema')
def _jm_f_86(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'.schema'
    res = _jm_obj_47(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.0.'.schema']", path))
    return res

# check _jm_obj_42_may_~ ($.'$Model#Root'.'|'.0.'~')
def _jm_f_87(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'.'|'.0.'~'
    res = json_model_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Url [$.'$Model#Root'.'|'.0.'~']", path))
    return res


# object $.'$Model#Root'.'|'.0
def _jm_obj_42(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Root'.'|'.0]", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_42_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_21 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Model#Root'.'|'.0]", lpath_21 if path is not None else None))
                    return False
        elif pfun := _jm_obj_42_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_21 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Root'.'|'.0]", lpath_21 if path is not None else None))
                return False
        elif _jm_re_1(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # $.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [$.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]", lpath_21 if path is not None else None))
            if not res:
                # $.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                res = isinstance(pval, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [$.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]", lpath_21 if path is not None else None))
                if not res:
                    # $.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    res = isinstance(pval, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [$.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("no model matched [$.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|']", lpath_21 if path is not None else None))
            if not res:
                return False
        elif _jm_re_2(prop):
            # handle {len(regs)} re props
            # $.'$Model#Root'.'|'.0.'/^(=|!=|≠)$/'
            res = json_model_5(pval, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Val [$.'$Model#Root'.'|'.0.'/^(=|!=|≠)$/']", lpath_21 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Root'.'|'.0]", lpath_21 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Model#Root'.'|'.0]", path))
        return False
    return True

# check $Model#Root ($.'$Model#Root')
def json_model_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Root'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'$Model#Root'.'|']", path))
    if res:
        # $.'$Model#Root'.'|'.0
        res = _jm_obj_42(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.0]", path))
        if not res:
            # $.'$Model#Root'.'|'.1
            res = _jm_obj_36(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.1]", path))
            if not res:
                # $.'$Model#Root'.'|'.2
                res = _jm_obj_30(val, path, rep)
                if not res:
                    rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.2]", path))
                if not res:
                    # $.'$Model#Root'.'|'.3
                    res = _jm_obj_24(val, path, rep)
                    if not res:
                        rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.3]", path))
                    if not res:
                        # $.'$Model#Root'.'|'.4
                        res = _jm_obj_18(val, path, rep)
                        if not res:
                            rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.4]", path))
                        if not res:
                            # $.'$Model#Root'.'|'.5
                            res = _jm_obj_12(val, path, rep)
                            if not res:
                                rep is None or rep.append(("not an expected object at [$.'$Model#Root'.'|'.5]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'$Model#Root'.'|']", path))
    return res


# check $Model#Url ($.'$Model#Url')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    res = isinstance(val, str) and _jm_re_7(val)
    if not res:
        rep is None or rep.append(("unexpected REGEX [$.'$Model#Url']", path))
    return res

# object $.'$Model#Trafo'.'|'.2.'*'.'|'.1
def _jm_obj_49(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Trafo'.'|'.2.'*'.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Model#Trafo'.'|'.2.'*'.'|'.1.''
        res = json_model_19(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Model [$.'$Model#Trafo'.'|'.2.'*'.'|'.1.'']", lpath_25 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_48_must_* ($.'$Model#Trafo'.'|'.2.'*')
def _jm_f_88(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Trafo'.'|'.2.'*'
    # $.'$Model#Trafo'.'|'.2.'*'.'|'.0
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Model#Trafo'.'|'.2.'*'.'|'.0]", path))
    if not res:
        # $.'$Model#Trafo'.'|'.2.'*'.'|'.1
        res = _jm_obj_49(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$Model#Trafo'.'|'.2.'*'.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Model#Trafo'.'|'.2.'*'.'|']", path))
    return res


# check _jm_obj_48_may_# ($.'$Model#Trafo'.'|'.2.'#')
def _jm_f_89(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Trafo'.'|'.2.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Trafo'.'|'.2.'#']", path))
    return res

# object $.'$Model#Trafo'.'|'.2.'.schema'
def _jm_obj_50(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Trafo'.'|'.2.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_48_may_.schema ($.'$Model#Trafo'.'|'.2.'.schema')
def _jm_f_90(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Trafo'.'|'.2.'.schema'
    res = _jm_obj_50(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Trafo'.'|'.2.'.schema']", path))
    return res

# check _jm_obj_48_may_/ ($.'$Model#Trafo'.'|'.2.'/')
def _jm_f_91(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Trafo'.'|'.2.'/'
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Model#Trafo'.'|'.2.'/']", path))
    return res


# object $.'$Model#Trafo'.'|'.2
def _jm_obj_48(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Trafo'.'|'.2]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_48_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_24 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Model#Trafo'.'|'.2]", lpath_24 if path is not None else None))
                    return False
        elif pfun := _jm_obj_48_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_24 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Trafo'.'|'.2]", lpath_24 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Trafo'.'|'.2]", lpath_24 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Model#Trafo'.'|'.2]", path))
        return False
    return True

# check _jm_obj_51_must_/ ($.'$Model#Trafo'.'|'.1.'/')
def _jm_f_92(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Trafo'.'|'.1.'/'
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [$.'$Model#Trafo'.'|'.1.'/']", path))
    return res


# check _jm_obj_51_may_# ($.'$Model#Trafo'.'|'.1.'#')
def _jm_f_93(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Trafo'.'|'.1.'#'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Model#Trafo'.'|'.1.'#']", path))
    return res

# object $.'$Model#Trafo'.'|'.1.'*'.'|'.1
def _jm_obj_52(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Trafo'.'|'.1.'*'.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # $.'$Model#Trafo'.'|'.1.'*'.'|'.1.''
        res = json_model_19(pval, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Model [$.'$Model#Trafo'.'|'.1.'*'.'|'.1.'']", lpath_27 if path is not None else None))
        if not res:
            return False
    return True

# check _jm_obj_51_may_* ($.'$Model#Trafo'.'|'.1.'*')
def _jm_f_94(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Trafo'.'|'.1.'*'
    # $.'$Model#Trafo'.'|'.1.'*'.'|'.0
    res = isinstance(val, list)
    if res:
        # accept any array
        pass
    if not res:
        rep is None or rep.append(("not array or unexpected array [$.'$Model#Trafo'.'|'.1.'*'.'|'.0]", path))
    if not res:
        # $.'$Model#Trafo'.'|'.1.'*'.'|'.1
        res = _jm_obj_52(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$Model#Trafo'.'|'.1.'*'.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Model#Trafo'.'|'.1.'*'.'|']", path))
    return res

# object $.'$Model#Trafo'.'|'.1.'.schema'
def _jm_obj_53(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Trafo'.'|'.1.'.schema']", path))
        return False
    # accept any object
    return True

# check _jm_obj_51_may_.schema ($.'$Model#Trafo'.'|'.1.'.schema')
def _jm_f_95(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Trafo'.'|'.1.'.schema'
    res = _jm_obj_53(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Model#Trafo'.'|'.1.'.schema']", path))
    return res


# object $.'$Model#Trafo'.'|'.1
def _jm_obj_51(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Model#Trafo'.'|'.1]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_51_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_26 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Model#Trafo'.'|'.1]", lpath_26 if path is not None else None))
                    return False
        elif pfun := _jm_obj_51_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_26 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$Model#Trafo'.'|'.1]", lpath_26 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Model#Trafo'.'|'.1]", lpath_26 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Model#Trafo'.'|'.1]", path))
        return False
    return True

# check $Model#Trafo ($.'$Model#Trafo')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Model#Trafo'
    # $.'$Model#Trafo'.'|'.0
    res = json_model_19(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [$.'$Model#Trafo'.'|'.0]", path))
    if not res:
        # $.'$Model#Trafo'.'|'.1
        res = _jm_obj_51(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$Model#Trafo'.'|'.1]", path))
        if not res:
            # $.'$Model#Trafo'.'|'.2
            res = _jm_obj_48(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'$Model#Trafo'.'|'.2]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$Model#Trafo'.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_obj_0_may
        _jm_obj_0_may = {
            "#": _jm_f_0,
            ".schema": _jm_f_1,
        }
        global _jm_re_0_search, _jm_re_0
        _jm_re_0_search = re.compile("^[@|&^+/*]$").search
        _jm_re_0 = lambda s: _jm_re_0_search(s) is not None
        global _jm_obj_2_must
        _jm_obj_2_must = {
            "+": _jm_f_2,
        }
        global _jm_obj_2_may
        _jm_obj_2_may = {
            "#": _jm_f_3,
            ".schema": _jm_f_4,
        }
        global _jm_obj_4_must
        _jm_obj_4_must = {
            "^": _jm_f_5,
        }
        global _jm_obj_4_may
        _jm_obj_4_may = {
            "#": _jm_f_6,
            ".schema": _jm_f_7,
        }
        global _jm_obj_6_must
        _jm_obj_6_must = {
            "&": _jm_f_8,
        }
        global _jm_obj_6_may
        _jm_obj_6_may = {
            "#": _jm_f_9,
            ".schema": _jm_f_10,
        }
        global _jm_obj_8_must
        _jm_obj_8_must = {
            "|": _jm_f_11,
        }
        global _jm_obj_8_may
        _jm_obj_8_may = {
            "#": _jm_f_12,
            ".schema": _jm_f_13,
        }
        global _jm_obj_10_must
        _jm_obj_10_must = {
            "@": _jm_f_14,
        }
        global _jm_obj_10_may
        _jm_obj_10_may = {
            "!": _jm_f_15,
            "#": _jm_f_16,
            ".in": _jm_f_17,
            ".mo": _jm_f_18,
            ".schema": _jm_f_19,
        }
        global _jm_re_1_search, _jm_re_1
        _jm_re_1_search = re.compile("^(<=|>=|<|>|≥|≤)$").search
        _jm_re_1 = lambda s: _jm_re_1_search(s) is not None
        global _jm_re_2_search, _jm_re_2
        _jm_re_2_search = re.compile("^(=|!=|≠)$").search
        _jm_re_2 = lambda s: _jm_re_2_search(s) is not None
        global _jm_obj_13_may
        _jm_obj_13_may = {
            "": _jm_f_22,
            "#": _jm_f_23,
            ".schema": _jm_f_24,
        }
        global _jm_re_3_search, _jm_re_3
        _jm_re_3_search = re.compile(".+").search
        _jm_re_3 = lambda s: _jm_re_3_search(s) is not None
        global _jm_obj_15_may
        _jm_obj_15_may = {
            "#": _jm_f_26,
            ".schema": _jm_f_27,
        }
        global _jm_re_4_search, _jm_re_4
        _jm_re_4_search = re.compile("^\\..+$").search
        _jm_re_4 = lambda s: _jm_re_4_search(s) is not None
        global _jm_re_5_search, _jm_re_5
        _jm_re_5_search = re.compile("^([#|&^+/*@~=$%]|[<>!]=?)$").search
        _jm_re_5 = lambda s: _jm_re_5_search(s) is not None
        global _jm_re_6_search, _jm_re_6
        _jm_re_6_search = re.compile("^\\$.*$").search
        _jm_re_6 = lambda s: _jm_re_6_search(s) is not None
        global _jm_obj_12_may
        _jm_obj_12_may = {
            "#": _jm_f_20,
            "$": _jm_f_21,
            "%": _jm_f_25,
            ".schema": _jm_f_28,
            "~": _jm_f_29,
        }
        global _jm_obj_18_must
        _jm_obj_18_must = {
            "+": _jm_f_30,
        }
        global _jm_obj_19_may
        _jm_obj_19_may = {
            "": _jm_f_33,
            "#": _jm_f_34,
            ".schema": _jm_f_35,
        }
        global _jm_obj_21_may
        _jm_obj_21_may = {
            "#": _jm_f_37,
            ".schema": _jm_f_38,
        }
        global _jm_obj_18_may
        _jm_obj_18_may = {
            "#": _jm_f_31,
            "$": _jm_f_32,
            "%": _jm_f_36,
            ".schema": _jm_f_39,
            "~": _jm_f_40,
        }
        global _jm_obj_24_must
        _jm_obj_24_must = {
            "^": _jm_f_41,
        }
        global _jm_obj_25_may
        _jm_obj_25_may = {
            "": _jm_f_44,
            "#": _jm_f_45,
            ".schema": _jm_f_46,
        }
        global _jm_obj_27_may
        _jm_obj_27_may = {
            "#": _jm_f_48,
            ".schema": _jm_f_49,
        }
        global _jm_obj_24_may
        _jm_obj_24_may = {
            "#": _jm_f_42,
            "$": _jm_f_43,
            "%": _jm_f_47,
            ".schema": _jm_f_50,
            "~": _jm_f_51,
        }
        global _jm_obj_30_must
        _jm_obj_30_must = {
            "&": _jm_f_52,
        }
        global _jm_obj_31_may
        _jm_obj_31_may = {
            "": _jm_f_55,
            "#": _jm_f_56,
            ".schema": _jm_f_57,
        }
        global _jm_obj_33_may
        _jm_obj_33_may = {
            "#": _jm_f_59,
            ".schema": _jm_f_60,
        }
        global _jm_obj_30_may
        _jm_obj_30_may = {
            "#": _jm_f_53,
            "$": _jm_f_54,
            "%": _jm_f_58,
            ".schema": _jm_f_61,
            "~": _jm_f_62,
        }
        global _jm_obj_36_must
        _jm_obj_36_must = {
            "|": _jm_f_63,
        }
        global _jm_obj_37_may
        _jm_obj_37_may = {
            "": _jm_f_66,
            "#": _jm_f_67,
            ".schema": _jm_f_68,
        }
        global _jm_obj_39_may
        _jm_obj_39_may = {
            "#": _jm_f_70,
            ".schema": _jm_f_71,
        }
        global _jm_obj_36_may
        _jm_obj_36_may = {
            "#": _jm_f_64,
            "$": _jm_f_65,
            "%": _jm_f_69,
            ".schema": _jm_f_72,
            "~": _jm_f_73,
        }
        global _jm_obj_42_must
        _jm_obj_42_must = {
            "@": _jm_f_74,
        }
        global _jm_obj_43_may
        _jm_obj_43_may = {
            "": _jm_f_78,
            "#": _jm_f_79,
            ".schema": _jm_f_80,
        }
        global _jm_obj_45_may
        _jm_obj_45_may = {
            "#": _jm_f_82,
            ".schema": _jm_f_83,
        }
        global _jm_obj_42_may
        _jm_obj_42_may = {
            "!": _jm_f_75,
            "#": _jm_f_76,
            "$": _jm_f_77,
            "%": _jm_f_81,
            ".in": _jm_f_84,
            ".mo": _jm_f_85,
            ".schema": _jm_f_86,
            "~": _jm_f_87,
        }
        global _jm_re_7_search, _jm_re_7
        _jm_re_7_search = re.compile("^((file|https?)://.+|\\./.*|\\.\\./.*)$").search
        _jm_re_7 = lambda s: _jm_re_7_search(s) is not None
        global _jm_obj_48_must
        _jm_obj_48_must = {
            "*": _jm_f_88,
        }
        global _jm_obj_48_may
        _jm_obj_48_may = {
            "#": _jm_f_89,
            ".schema": _jm_f_90,
            "/": _jm_f_91,
        }
        global _jm_obj_51_must
        _jm_obj_51_must = {
            "/": _jm_f_92,
        }
        global _jm_obj_51_may
        _jm_obj_51_may = {
            "#": _jm_f_93,
            "*": _jm_f_94,
            ".schema": _jm_f_95,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "Model": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_search, _jm_re_0
        _jm_re_0_search = None
        _jm_re_0 = None
        global _jm_re_1_search, _jm_re_1
        _jm_re_1_search = None
        _jm_re_1 = None
        global _jm_re_2_search, _jm_re_2
        _jm_re_2_search = None
        _jm_re_2 = None
        global _jm_re_3_search, _jm_re_3
        _jm_re_3_search = None
        _jm_re_3 = None
        global _jm_re_4_search, _jm_re_4
        _jm_re_4_search = None
        _jm_re_4 = None
        global _jm_re_5_search, _jm_re_5
        _jm_re_5_search = None
        _jm_re_5 = None
        global _jm_re_6_search, _jm_re_6
        _jm_re_6_search = None
        _jm_re_6 = None
        global _jm_re_7_search, _jm_re_7
        _jm_re_7_search = None
        _jm_re_7 = None


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
