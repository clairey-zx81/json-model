#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_re_0_reco: object
_jm_re_0: RegexFun
_jm_re_1_reco: object
_jm_re_1: RegexFun
check_model_map: PropMap

# object .'$'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "Model":
            # handle must Model property
            must_count += 1
            # .'$'.Model
            res = isinstance(pval, str) and (pval == "$https://json-model.org/models/json-model")
            if not res:
                rep is None or rep.append(("unexpected _$https://json-model.org/models/json-model [.'$'.Model]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$'.Model]", lpath_1 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$'.''
            res = is_valid_url(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $URL [.'$'.'']", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$'.'']", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$']", lpath_1 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "Model" in val:
                rep is None or rep.append(("missing mandatory prop <Model> [.'$']", path))
        return False
    return True



# object .'%'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'%'.'#']", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'%'.'#']", lpath_2 if path is not None else None))
                return False
        elif _jm_re_0(prop, path, rep):
            # handle 1 re props
            # .'%'.'/^\\..+$/'
            # "/^([#~$%@|&+^/*=]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_1(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#~$%@|&+^/*=]|[<>!]=?)$/ [.'%'.'/^\\\\..+$/']", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'%']", lpath_2 if path is not None else None))
            return False
    return True

# object .
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "$":
            # handle must $ property
            must_count += 1
            # .'$'
            res = _jm_obj_1(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$']", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$']", lpath_0 if path is not None else None))
                return False
        elif prop == "~":
            # handle must ~ property
            must_count += 1
            # .'~'
            res = isinstance(pval, str) and (pval == "https://json-model.org/models/l10n")
            if not res:
                rep is None or rep.append(("unexpected _https://json-model.org/models/l10n [.'~']", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'~']", lpath_0 if path is not None else None))
                return False
        elif prop == "%":
            # handle must % property
            must_count += 1
            # dot-prefixed arbitrary key, one or two char keyword values
            # .'%'
            res = _jm_obj_2(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'%']", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'%']", lpath_0 if path is not None else None))
                return False
        elif prop == "@":
            # handle must @ property
            must_count += 1
            # .'@'
            res = isinstance(pval, str) and pval == "$Model"
            if not res:
                rep is None or rep.append(("unexpected _$Model [.'@']", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'@']", lpath_0 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'#']", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'#']", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.]", lpath_0 if path is not None else None))
            return False
    if must_count != 4:
        if rep is not None:
            if not "$" in val:
                rep is None or rep.append(("missing mandatory prop <$> [.]", path))
            if not "%" in val:
                rep is None or rep.append(("missing mandatory prop <%> [.]", path))
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.]", path))
            if not "~" in val:
                rep is None or rep.append(("missing mandatory prop <~> [.]", path))
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # JSON Model Subset for Localization Renames
    # .
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile("^\\..+$")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = re.compile("^([#~$%@|&+^/*=]|[<>!]=?)$")
        _jm_re_1 = lambda s, p, r: _jm_re_1_reco.search(s) is not None
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = None
        _jm_re_1 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
