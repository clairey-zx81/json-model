#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0b0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0b0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_re_0_reco: object
_jm_re_0: RegexFun
_jm_re_1_reco: object
_jm_re_1: RegexFun
_jm_re_2_reco: object
_jm_re_2: RegexFun
_jm_re_3_reco: object
_jm_re_3: RegexFun
_jm_re_4_reco: object
_jm_re_4: RegexFun
_jm_re_5_reco: object
_jm_re_5: RegexFun
_jm_re_6_reco: object
_jm_re_6: RegexFun
_jm_re_7_reco: object
_jm_re_7: RegexFun
check_model_map: PropMap

# check $Model (.'$Model')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Model'
    res = json_model_25(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $RootModel [.'$Model']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [.]", path))
    return res

# check $Model#RootModel (.'$Model#RootModel')
def json_model_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Model#RootModel'
    # .'$Model#RootModel'.'|'.0
    res = json_model_18(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Scalar [.'$Model#RootModel'.'|'.0]", path))
    if not res:
        # .'$Model#RootModel'.'|'.1
        res = json_model_9(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Array [.'$Model#RootModel'.'|'.1]", path))
        if not res:
            # .'$Model#RootModel'.'|'.2
            res = json_model_24(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Root [.'$Model#RootModel'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Model#RootModel'.'|']", path))
    return res

# check $Model#Array (.'$Model#Array')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Model#Array'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$Model#Array'.0
            res = json_model_19(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Model#Array'.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Model#Array']", path))
    return res

# check $Model#Scalar (.'$Model#Scalar')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Model#Scalar'
    # .'$Model#Scalar'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$Model#Scalar'.'|'.0]", path))
    if not res:
        # .'$Model#Scalar'.'|'.1
        res = isinstance(val, bool) and val == True
        if not res:
            rep is None or rep.append(("unexpected =true [.'$Model#Scalar'.'|'.1]", path))
        if not res:
            # .'$Model#Scalar'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool) and val == 0
            if not res:
                rep is None or rep.append(("unexpected =0 [.'$Model#Scalar'.'|'.2]", path))
            if not res:
                # .'$Model#Scalar'.'|'.3
                res = isinstance(val, int) and not isinstance(val, bool) and val == 1
                if not res:
                    rep is None or rep.append(("unexpected =1 [.'$Model#Scalar'.'|'.3]", path))
                if not res:
                    # .'$Model#Scalar'.'|'.4
                    res = isinstance(val, int) and not isinstance(val, bool) and val == -1
                    if not res:
                        rep is None or rep.append(("unexpected =-1 [.'$Model#Scalar'.'|'.4]", path))
                    if not res:
                        # .'$Model#Scalar'.'|'.5
                        res = isinstance(val, float) and val == 0.0
                        if not res:
                            rep is None or rep.append(("unexpected =0.0 [.'$Model#Scalar'.'|'.5]", path))
                        if not res:
                            # .'$Model#Scalar'.'|'.6
                            res = isinstance(val, float) and val == 1.0
                            if not res:
                                rep is None or rep.append(("unexpected =1.0 [.'$Model#Scalar'.'|'.6]", path))
                            if not res:
                                # .'$Model#Scalar'.'|'.7
                                res = isinstance(val, float) and val == -1.0
                                if not res:
                                    rep is None or rep.append(("unexpected =-1.0 [.'$Model#Scalar'.'|'.7]", path))
                                if not res:
                                    # .'$Model#Scalar'.'|'.8
                                    res = isinstance(val, str)
                                    if not res:
                                        rep is None or rep.append(("unexpected string [.'$Model#Scalar'.'|'.8]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Model#Scalar'.'|']", path))
    return res

# check $Model#Model (.'$Model#Model')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Model#Model'
    # .'$Model#Model'.'|'.0
    res = json_model_18(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Scalar [.'$Model#Model'.'|'.0]", path))
    if not res:
        # .'$Model#Model'.'|'.1
        res = json_model_9(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Array [.'$Model#Model'.'|'.1]", path))
        if not res:
            # .'$Model#Model'.'|'.2
            res = json_model_16(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Elem [.'$Model#Model'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Model#Model'.'|']", path))
    return res


# object .'$Model#Elem'.'|'.4
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Elem'.'|'.4]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Model#Elem'.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Elem'.'|'.4.'#']", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Elem'.'|'.4.'#']", lpath_0 if path is not None else None))
                return False
        elif _jm_re_0(prop, path, rep):
            # handle 1 re props
            # .'$Model#Elem'.'|'.4.'/^[@|&^+/*]$/'
            res = False
            if not res:
                rep is None or rep.append(("unexpected $NONE [.'$Model#Elem'.'|'.4.'/^[@|&^+/*]$/']", lpath_0 if path is not None else None))
            if not res:
                return False
        else:
            # handle other props
            # .'$Model#Elem'.'|'.4.''
            res = json_model_19(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Model#Elem'.'|'.4.'']", lpath_0 if path is not None else None))
            if not res:
                return False
    return True

# object .'$Model#Elem'.'|'.3
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Elem'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Model#Elem'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_1_idx, arr_1_item in enumerate(pval):
                    arr_1_lpath: Path = ((lpath_1 if path is not None else None) + [ arr_1_idx ]) if (lpath_1 if path is not None else None) is not None else None
                    # .'$Model#Elem'.'|'.3.'^'.0
                    res = json_model_19(arr_1_item, arr_1_lpath if (lpath_1 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Model#Elem'.'|'.3.'^'.0]", arr_1_lpath if (lpath_1 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model#Elem'.'|'.3.'^']", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Model#Elem'.'|'.3.'^']", lpath_1 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model#Elem'.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Elem'.'|'.3.'#']", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Elem'.'|'.3.'#']", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Elem'.'|'.3]", lpath_1 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Model#Elem'.'|'.3]", path))
        return False
    return True

# object .'$Model#Elem'.'|'.2
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Elem'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$Model#Elem'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_2_idx, arr_2_item in enumerate(pval):
                    arr_2_lpath: Path = ((lpath_2 if path is not None else None) + [ arr_2_idx ]) if (lpath_2 if path is not None else None) is not None else None
                    # .'$Model#Elem'.'|'.2.'&'.0
                    res = json_model_19(arr_2_item, arr_2_lpath if (lpath_2 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Model#Elem'.'|'.2.'&'.0]", arr_2_lpath if (lpath_2 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model#Elem'.'|'.2.'&']", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Model#Elem'.'|'.2.'&']", lpath_2 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model#Elem'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Elem'.'|'.2.'#']", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Elem'.'|'.2.'#']", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Elem'.'|'.2]", lpath_2 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$Model#Elem'.'|'.2]", path))
        return False
    return True

# object .'$Model#Elem'.'|'.1
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Elem'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Model#Elem'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_3_idx, arr_3_item in enumerate(pval):
                    arr_3_lpath: Path = ((lpath_3 if path is not None else None) + [ arr_3_idx ]) if (lpath_3 if path is not None else None) is not None else None
                    # .'$Model#Elem'.'|'.1.'|'.0
                    res = json_model_19(arr_3_item, arr_3_lpath if (lpath_3 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Model#Elem'.'|'.1.'|'.0]", arr_3_lpath if (lpath_3 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model#Elem'.'|'.1.'|']", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Model#Elem'.'|'.1.'|']", lpath_3 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model#Elem'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Elem'.'|'.1.'#']", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Elem'.'|'.1.'#']", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Elem'.'|'.1]", lpath_3 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Model#Elem'.'|'.1]", path))
        return False
    return True



# object .'$Model#Elem'.'|'.0
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Elem'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Model#Elem'.'|'.0.'@'
            res = json_model_19(pval, lpath_4 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Model#Elem'.'|'.0.'@']", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Model#Elem'.'|'.0.'@']", lpath_4 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model#Elem'.'|'.0.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Elem'.'|'.0.'#']", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Elem'.'|'.0.'#']", lpath_4 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Model#Elem'.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Model#Elem'.'|'.0.'!']", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Elem'.'|'.0.'!']", lpath_4 if path is not None else None))
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 2 re props
            # .'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # .'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]", lpath_4 if path is not None else None))
            if not res:
                # .'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                res = isinstance(pval, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]", lpath_4 if path is not None else None))
                if not res:
                    # .'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    res = isinstance(pval, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]", lpath_4 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Model#Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|']", lpath_4 if path is not None else None))
            if not res:
                return False
        elif _jm_re_2(prop, path, rep):
            # handle 2 re props
            # .'$Model#Elem'.'|'.0.'/^(=|!=|≠)$/'
            res = json_model_5(pval, lpath_4 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Val [.'$Model#Elem'.'|'.0.'/^(=|!=|≠)$/']", lpath_4 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Elem'.'|'.0]", lpath_4 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Model#Elem'.'|'.0]", path))
        return False
    return True

# check $Model#Elem (.'$Model#Elem')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Model#Elem'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Model#Elem'.'|']", path))
    if res:
        # .'$Model#Elem'.'|'.0
        res = _jm_obj_4(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Model#Elem'.'|'.0]", path))
        if not res:
            # .'$Model#Elem'.'|'.1
            res = _jm_obj_3(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Model#Elem'.'|'.1]", path))
            if not res:
                # .'$Model#Elem'.'|'.2
                res = _jm_obj_2(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Model#Elem'.'|'.2]", path))
                if not res:
                    # .'$Model#Elem'.'|'.3
                    res = _jm_obj_1(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Model#Elem'.'|'.3]", path))
                    if not res:
                        # .'$Model#Elem'.'|'.4
                        res = _jm_obj_0(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$Model#Elem'.'|'.4]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Model#Elem'.'|']", path))
    return res

# check $Model#Val (.'$Model#Val')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Model#Val'
    # .'$Model#Val'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$Model#Val'.'|'.0]", path))
    if not res:
        # .'$Model#Val'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$Model#Val'.'|'.1]", path))
        if not res:
            # .'$Model#Val'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$Model#Val'.'|'.2]", path))
            if not res:
                # .'$Model#Val'.'|'.3
                res = isinstance(val, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [.'$Model#Val'.'|'.3]", path))
                if not res:
                    # .'$Model#Val'.'|'.4
                    res = isinstance(val, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$Model#Val'.'|'.4]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Model#Val'.'|']", path))
    return res


# object .'$Model#Root'.'|'.4.'$'
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.4.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.4.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.4.'$'.'#']", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.4.'$'.'#']", lpath_6 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Model#Root'.'|'.4.'$'.''
            res = json_model_4(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Model#Root'.'|'.4.'$'.'']", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.4.'$'.'']", lpath_6 if path is not None else None))
                return False
        elif _jm_re_3(prop, path, rep):
            # handle 1 re props
            # .'$Model#Root'.'|'.4.'$'.'/.+/'
            res = json_model_19(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Model#Root'.'|'.4.'$'.'/.+/']", lpath_6 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.4.'$']", lpath_6 if path is not None else None))
            return False
    return True




# object .'$Model#Root'.'|'.4.'%'
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.4.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.4.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.4.'%'.'#']", lpath_7 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.4.'%'.'#']", lpath_7 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Model#Root'.'|'.4.'%'.'<'
            res = isinstance(pval, list)
            if res:
                for arr_4_idx, arr_4_item in enumerate(pval):
                    arr_4_lpath: Path = ((lpath_7 if path is not None else None) + [ arr_4_idx ]) if (lpath_7 if path is not None else None) is not None else None
                    # .'$Model#Root'.'|'.4.'%'.'<'.0
                    # "/^\\$/"
                    res = isinstance(arr_4_item, str) and _jm_re_4(arr_4_item, arr_4_lpath if (lpath_7 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected /^\\$/ [.'$Model#Root'.'|'.4.'%'.'<'.0]", arr_4_lpath if (lpath_7 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model#Root'.'|'.4.'%'.'<']", lpath_7 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.4.'%'.'<']", lpath_7 if path is not None else None))
                return False
        elif _jm_re_5(prop, path, rep):
            # handle 1 re props
            # .'$Model#Root'.'|'.4.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval, lpath_7 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Model#Root'.'|'.4.'%'.'/^\\\\..+$/']", lpath_7 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.4.'%']", lpath_7 if path is not None else None))
            return False
    return True

# object .'$Model#Root'.'|'.4
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.4]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "~":
            # handle may ~ property
            # .'$Model#Root'.'|'.4.'~'
            res = json_model_4(pval, lpath_5 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Model#Root'.'|'.4.'~']", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.4.'~']", lpath_5 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Model#Root'.'|'.4.'$'
            res = _jm_obj_6(pval, lpath_5 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.4.'$']", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.4.'$']", lpath_5 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Model#Root'.'|'.4.'%'
            res = _jm_obj_7(pval, lpath_5 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.4.'%']", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.4.'%']", lpath_5 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.4.'#']", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.4.'#']", lpath_5 if path is not None else None))
                return False
        elif _jm_re_0(prop, path, rep):
            # handle 1 re props
            # .'$Model#Root'.'|'.4.'/^[@|&^+/*]$/'
            res = False
            if not res:
                rep is None or rep.append(("unexpected $NONE [.'$Model#Root'.'|'.4.'/^[@|&^+/*]$/']", lpath_5 if path is not None else None))
            if not res:
                return False
        else:
            # handle other props
            # .'$Model#Root'.'|'.4.''
            res = json_model_19(pval, lpath_5 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Model#Root'.'|'.4.'']", lpath_5 if path is not None else None))
            if not res:
                return False
    return True

# object .'$Model#Root'.'|'.3.'$'
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.3.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.3.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.3.'$'.'#']", lpath_9 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.3.'$'.'#']", lpath_9 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Model#Root'.'|'.3.'$'.''
            res = json_model_4(pval, lpath_9 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Model#Root'.'|'.3.'$'.'']", lpath_9 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.3.'$'.'']", lpath_9 if path is not None else None))
                return False
        elif _jm_re_3(prop, path, rep):
            # handle 1 re props
            # .'$Model#Root'.'|'.3.'$'.'/.+/'
            res = json_model_19(pval, lpath_9 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Model#Root'.'|'.3.'$'.'/.+/']", lpath_9 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.3.'$']", lpath_9 if path is not None else None))
            return False
    return True

# object .'$Model#Root'.'|'.3.'%'
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.3.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.3.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.3.'%'.'#']", lpath_10 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.3.'%'.'#']", lpath_10 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Model#Root'.'|'.3.'%'.'<'
            res = isinstance(pval, list)
            if res:
                for arr_6_idx, arr_6_item in enumerate(pval):
                    arr_6_lpath: Path = ((lpath_10 if path is not None else None) + [ arr_6_idx ]) if (lpath_10 if path is not None else None) is not None else None
                    # .'$Model#Root'.'|'.3.'%'.'<'.0
                    # "/^\\$/"
                    res = isinstance(arr_6_item, str) and _jm_re_4(arr_6_item, arr_6_lpath if (lpath_10 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected /^\\$/ [.'$Model#Root'.'|'.3.'%'.'<'.0]", arr_6_lpath if (lpath_10 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model#Root'.'|'.3.'%'.'<']", lpath_10 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.3.'%'.'<']", lpath_10 if path is not None else None))
                return False
        elif _jm_re_5(prop, path, rep):
            # handle 1 re props
            # .'$Model#Root'.'|'.3.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval, lpath_10 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Model#Root'.'|'.3.'%'.'/^\\\\..+$/']", lpath_10 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.3.'%']", lpath_10 if path is not None else None))
            return False
    return True

# object .'$Model#Root'.'|'.3
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Model#Root'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_5_idx, arr_5_item in enumerate(pval):
                    arr_5_lpath: Path = ((lpath_8 if path is not None else None) + [ arr_5_idx ]) if (lpath_8 if path is not None else None) is not None else None
                    # .'$Model#Root'.'|'.3.'^'.0
                    res = json_model_19(arr_5_item, arr_5_lpath if (lpath_8 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Model#Root'.'|'.3.'^'.0]", arr_5_lpath if (lpath_8 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model#Root'.'|'.3.'^']", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Model#Root'.'|'.3.'^']", lpath_8 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Model#Root'.'|'.3.'~'
            res = json_model_4(pval, lpath_8 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Model#Root'.'|'.3.'~']", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.3.'~']", lpath_8 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Model#Root'.'|'.3.'$'
            res = _jm_obj_9(pval, lpath_8 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.3.'$']", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.3.'$']", lpath_8 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Model#Root'.'|'.3.'%'
            res = _jm_obj_10(pval, lpath_8 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.3.'%']", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.3.'%']", lpath_8 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.3.'#']", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.3.'#']", lpath_8 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.3]", lpath_8 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Model#Root'.'|'.3]", path))
        return False
    return True

# object .'$Model#Root'.'|'.2.'$'
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.2.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.2.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.2.'$'.'#']", lpath_12 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.2.'$'.'#']", lpath_12 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Model#Root'.'|'.2.'$'.''
            res = json_model_4(pval, lpath_12 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Model#Root'.'|'.2.'$'.'']", lpath_12 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.2.'$'.'']", lpath_12 if path is not None else None))
                return False
        elif _jm_re_3(prop, path, rep):
            # handle 1 re props
            # .'$Model#Root'.'|'.2.'$'.'/.+/'
            res = json_model_19(pval, lpath_12 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Model#Root'.'|'.2.'$'.'/.+/']", lpath_12 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.2.'$']", lpath_12 if path is not None else None))
            return False
    return True

# object .'$Model#Root'.'|'.2.'%'
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.2.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.2.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.2.'%'.'#']", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.2.'%'.'#']", lpath_13 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Model#Root'.'|'.2.'%'.'<'
            res = isinstance(pval, list)
            if res:
                for arr_8_idx, arr_8_item in enumerate(pval):
                    arr_8_lpath: Path = ((lpath_13 if path is not None else None) + [ arr_8_idx ]) if (lpath_13 if path is not None else None) is not None else None
                    # .'$Model#Root'.'|'.2.'%'.'<'.0
                    # "/^\\$/"
                    res = isinstance(arr_8_item, str) and _jm_re_4(arr_8_item, arr_8_lpath if (lpath_13 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected /^\\$/ [.'$Model#Root'.'|'.2.'%'.'<'.0]", arr_8_lpath if (lpath_13 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model#Root'.'|'.2.'%'.'<']", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.2.'%'.'<']", lpath_13 if path is not None else None))
                return False
        elif _jm_re_5(prop, path, rep):
            # handle 1 re props
            # .'$Model#Root'.'|'.2.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval, lpath_13 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Model#Root'.'|'.2.'%'.'/^\\\\..+$/']", lpath_13 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.2.'%']", lpath_13 if path is not None else None))
            return False
    return True

# object .'$Model#Root'.'|'.2
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$Model#Root'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_7_idx, arr_7_item in enumerate(pval):
                    arr_7_lpath: Path = ((lpath_11 if path is not None else None) + [ arr_7_idx ]) if (lpath_11 if path is not None else None) is not None else None
                    # .'$Model#Root'.'|'.2.'&'.0
                    res = json_model_19(arr_7_item, arr_7_lpath if (lpath_11 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Model#Root'.'|'.2.'&'.0]", arr_7_lpath if (lpath_11 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model#Root'.'|'.2.'&']", lpath_11 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Model#Root'.'|'.2.'&']", lpath_11 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Model#Root'.'|'.2.'~'
            res = json_model_4(pval, lpath_11 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Model#Root'.'|'.2.'~']", lpath_11 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.2.'~']", lpath_11 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Model#Root'.'|'.2.'$'
            res = _jm_obj_12(pval, lpath_11 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.2.'$']", lpath_11 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.2.'$']", lpath_11 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Model#Root'.'|'.2.'%'
            res = _jm_obj_13(pval, lpath_11 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.2.'%']", lpath_11 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.2.'%']", lpath_11 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.2.'#']", lpath_11 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.2.'#']", lpath_11 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.2]", lpath_11 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$Model#Root'.'|'.2]", path))
        return False
    return True

# object .'$Model#Root'.'|'.1.'$'
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.1.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.1.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.1.'$'.'#']", lpath_15 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.1.'$'.'#']", lpath_15 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Model#Root'.'|'.1.'$'.''
            res = json_model_4(pval, lpath_15 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Model#Root'.'|'.1.'$'.'']", lpath_15 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.1.'$'.'']", lpath_15 if path is not None else None))
                return False
        elif _jm_re_3(prop, path, rep):
            # handle 1 re props
            # .'$Model#Root'.'|'.1.'$'.'/.+/'
            res = json_model_19(pval, lpath_15 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Model#Root'.'|'.1.'$'.'/.+/']", lpath_15 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.1.'$']", lpath_15 if path is not None else None))
            return False
    return True

# object .'$Model#Root'.'|'.1.'%'
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.1.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.1.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.1.'%'.'#']", lpath_16 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.1.'%'.'#']", lpath_16 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Model#Root'.'|'.1.'%'.'<'
            res = isinstance(pval, list)
            if res:
                for arr_10_idx, arr_10_item in enumerate(pval):
                    arr_10_lpath: Path = ((lpath_16 if path is not None else None) + [ arr_10_idx ]) if (lpath_16 if path is not None else None) is not None else None
                    # .'$Model#Root'.'|'.1.'%'.'<'.0
                    # "/^\\$/"
                    res = isinstance(arr_10_item, str) and _jm_re_4(arr_10_item, arr_10_lpath if (lpath_16 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected /^\\$/ [.'$Model#Root'.'|'.1.'%'.'<'.0]", arr_10_lpath if (lpath_16 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model#Root'.'|'.1.'%'.'<']", lpath_16 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.1.'%'.'<']", lpath_16 if path is not None else None))
                return False
        elif _jm_re_5(prop, path, rep):
            # handle 1 re props
            # .'$Model#Root'.'|'.1.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval, lpath_16 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Model#Root'.'|'.1.'%'.'/^\\\\..+$/']", lpath_16 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.1.'%']", lpath_16 if path is not None else None))
            return False
    return True

# object .'$Model#Root'.'|'.1
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Model#Root'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_9_idx, arr_9_item in enumerate(pval):
                    arr_9_lpath: Path = ((lpath_14 if path is not None else None) + [ arr_9_idx ]) if (lpath_14 if path is not None else None) is not None else None
                    # .'$Model#Root'.'|'.1.'|'.0
                    res = json_model_19(arr_9_item, arr_9_lpath if (lpath_14 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Model#Root'.'|'.1.'|'.0]", arr_9_lpath if (lpath_14 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model#Root'.'|'.1.'|']", lpath_14 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Model#Root'.'|'.1.'|']", lpath_14 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Model#Root'.'|'.1.'~'
            res = json_model_4(pval, lpath_14 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Model#Root'.'|'.1.'~']", lpath_14 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.1.'~']", lpath_14 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Model#Root'.'|'.1.'$'
            res = _jm_obj_15(pval, lpath_14 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.1.'$']", lpath_14 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.1.'$']", lpath_14 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Model#Root'.'|'.1.'%'
            res = _jm_obj_16(pval, lpath_14 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.1.'%']", lpath_14 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.1.'%']", lpath_14 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.1.'#']", lpath_14 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.1.'#']", lpath_14 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.1]", lpath_14 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Model#Root'.'|'.1]", path))
        return False
    return True

# object .'$Model#Root'.'|'.0.'$'
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.0.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.0.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.0.'$'.'#']", lpath_18 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.0.'$'.'#']", lpath_18 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Model#Root'.'|'.0.'$'.''
            res = json_model_4(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Model#Root'.'|'.0.'$'.'']", lpath_18 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.0.'$'.'']", lpath_18 if path is not None else None))
                return False
        elif _jm_re_3(prop, path, rep):
            # handle 1 re props
            # .'$Model#Root'.'|'.0.'$'.'/.+/'
            res = json_model_19(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Model#Root'.'|'.0.'$'.'/.+/']", lpath_18 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.0.'$']", lpath_18 if path is not None else None))
            return False
    return True

# object .'$Model#Root'.'|'.0.'%'
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.0.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.0.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.0.'%'.'#']", lpath_19 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.0.'%'.'#']", lpath_19 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Model#Root'.'|'.0.'%'.'<'
            res = isinstance(pval, list)
            if res:
                for arr_11_idx, arr_11_item in enumerate(pval):
                    arr_11_lpath: Path = ((lpath_19 if path is not None else None) + [ arr_11_idx ]) if (lpath_19 if path is not None else None) is not None else None
                    # .'$Model#Root'.'|'.0.'%'.'<'.0
                    # "/^\\$/"
                    res = isinstance(arr_11_item, str) and _jm_re_4(arr_11_item, arr_11_lpath if (lpath_19 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected /^\\$/ [.'$Model#Root'.'|'.0.'%'.'<'.0]", arr_11_lpath if (lpath_19 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model#Root'.'|'.0.'%'.'<']", lpath_19 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.0.'%'.'<']", lpath_19 if path is not None else None))
                return False
        elif _jm_re_5(prop, path, rep):
            # handle 1 re props
            # .'$Model#Root'.'|'.0.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval, lpath_19 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Model#Root'.'|'.0.'%'.'/^\\\\..+$/']", lpath_19 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.0.'%']", lpath_19 if path is not None else None))
            return False
    return True

# object .'$Model#Root'.'|'.0
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model#Root'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Model#Root'.'|'.0.'@'
            res = json_model_19(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Model#Root'.'|'.0.'@']", lpath_17 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Model#Root'.'|'.0.'@']", lpath_17 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Model#Root'.'|'.0.'~'
            res = json_model_4(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Model#Root'.'|'.0.'~']", lpath_17 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.0.'~']", lpath_17 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Model#Root'.'|'.0.'$'
            res = _jm_obj_18(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.0.'$']", lpath_17 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.0.'$']", lpath_17 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Model#Root'.'|'.0.'%'
            res = _jm_obj_19(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.0.'%']", lpath_17 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.0.'%']", lpath_17 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model#Root'.'|'.0.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.0.'#']", lpath_17 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.0.'#']", lpath_17 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Model#Root'.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Model#Root'.'|'.0.'!']", lpath_17 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model#Root'.'|'.0.'!']", lpath_17 if path is not None else None))
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 2 re props
            # .'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # .'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]", lpath_17 if path is not None else None))
            if not res:
                # .'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                res = isinstance(pval, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]", lpath_17 if path is not None else None))
                if not res:
                    # .'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    res = isinstance(pval, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]", lpath_17 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Model#Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|']", lpath_17 if path is not None else None))
            if not res:
                return False
        elif _jm_re_2(prop, path, rep):
            # handle 2 re props
            # .'$Model#Root'.'|'.0.'/^(=|!=|≠)$/'
            res = json_model_5(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Val [.'$Model#Root'.'|'.0.'/^(=|!=|≠)$/']", lpath_17 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model#Root'.'|'.0]", lpath_17 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Model#Root'.'|'.0]", path))
        return False
    return True

# check $Model#Root (.'$Model#Root')
def json_model_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Model#Root'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Model#Root'.'|']", path))
    if res:
        # .'$Model#Root'.'|'.0
        res = _jm_obj_17(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.0]", path))
        if not res:
            # .'$Model#Root'.'|'.1
            res = _jm_obj_14(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.1]", path))
            if not res:
                # .'$Model#Root'.'|'.2
                res = _jm_obj_11(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.2]", path))
                if not res:
                    # .'$Model#Root'.'|'.3
                    res = _jm_obj_8(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.3]", path))
                    if not res:
                        # .'$Model#Root'.'|'.4
                        res = _jm_obj_5(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$Model#Root'.'|'.4]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Model#Root'.'|']", path))
    return res


# check $Model#Url (.'$Model#Url')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Model#Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    res = isinstance(val, str) and _jm_re_7(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^((file|https?)://.+|\\./.*|\\.\\./.*)$/ [.'$Model#Url']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile("^[@|&^+/*]$")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = re.compile("^(<=|>=|<|>|≥|≤)$")
        _jm_re_1 = lambda s, p, r: _jm_re_1_reco.search(s) is not None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = re.compile("^(=|!=|≠)$")
        _jm_re_2 = lambda s, p, r: _jm_re_2_reco.search(s) is not None
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = re.compile(".+")
        _jm_re_3 = lambda s, p, r: _jm_re_3_reco.search(s) is not None
        global _jm_re_4_reco, _jm_re_4
        _jm_re_4_reco = re.compile("^\\$")
        _jm_re_4 = lambda s, p, r: _jm_re_4_reco.search(s) is not None
        global _jm_re_5_reco, _jm_re_5
        _jm_re_5_reco = re.compile("^\\..+$")
        _jm_re_5 = lambda s, p, r: _jm_re_5_reco.search(s) is not None
        global _jm_re_6_reco, _jm_re_6
        _jm_re_6_reco = re.compile("^([#|&^+/*@~=$%]|[<>!]=?)$")
        _jm_re_6 = lambda s, p, r: _jm_re_6_reco.search(s) is not None
        global _jm_re_7_reco, _jm_re_7
        _jm_re_7_reco = re.compile("^((file|https?)://.+|\\./.*|\\.\\./.*)$")
        _jm_re_7 = lambda s, p, r: _jm_re_7_reco.search(s) is not None
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "Model": json_model_3,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = None
        _jm_re_1 = None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = None
        _jm_re_2 = None
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = None
        _jm_re_3 = None
        global _jm_re_4_reco, _jm_re_4
        _jm_re_4_reco = None
        _jm_re_4 = None
        global _jm_re_5_reco, _jm_re_5
        _jm_re_5_reco = None
        _jm_re_5 = None
        global _jm_re_6_reco, _jm_re_6
        _jm_re_6_reco = None
        _jm_re_6 = None
        global _jm_re_7_reco, _jm_re_7
        _jm_re_7_reco = None
        _jm_re_7 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
