#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_re_0_reco: object
_jm_re_0: RegexFun
_jm_cst_0: set[str]
_jm_re_1_reco: object
_jm_re_1: RegexFun
_jm_re_2_reco: object
_jm_re_2: RegexFun
_jm_re_3_reco: object
_jm_re_3: RegexFun
_jm_re_4_reco: object
_jm_re_4: RegexFun
_jm_re_5_reco: object
_jm_re_5: RegexFun
_jm_xre_0_re_reco: object
_jm_xre_0_re: RegexFun
_jm_xre_0: RegexFun
_jm_xre_1_re_reco: object
_jm_xre_1_re: RegexFun
_jm_xre_1: RegexFun
_jm_re_6_reco: object
_jm_re_6: RegexFun
_jm_re_7_reco: object
_jm_re_7: RegexFun
_jm_re_8_reco: object
_jm_re_8: RegexFun
_jm_re_9_reco: object
_jm_re_9: RegexFun
_jm_re_10_reco: object
_jm_re_10: RegexFun
_jm_re_11_reco: object
_jm_re_11: RegexFun
check_model_map: PropMap


# check $Url (.'$Url')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    res = isinstance(val, str) and _jm_re_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^((file|https?)://.+|\\./.*|\\.\\./.*)$/ [.'$Url']", path))
    return res


# check $PreDef (.'$PreDef')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PreDef'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$PreDef'.'|']", path))
    return res



# check $Identifier (.'$Identifier')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Identifier'
    res = isinstance(val, str)
    if res:
        # .'$Identifier'.'&'.0
        # "/^\\w(\\w|-)*$/"
        res = _jm_re_2(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected /^\\w(\\w|-)*$/ [.'$Identifier'.'&'.0]", path))
        if res:
            # .'$Identifier'.'&'.1
            # "/[^A-Z0-9]/"
            res = _jm_re_1(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected /[^A-Z0-9]/ [.'$Identifier'.'&'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not all model match [.'$Identifier'.'&']", path))
    return res

# check $ArrayComment (.'$ArrayComment')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ArrayComment'
    # "/^#/"
    res = isinstance(val, str) and val.startswith("#")
    if not res:
        rep is None or rep.append(("unexpected /^#/ [.'$ArrayComment']", path))
    return res

# check $ObjectComment (.'$ObjectComment')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$ObjectComment'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectComment']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$ObjectComment'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$ObjectComment'.'#']", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$ObjectComment'.'#']", lpath_0 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$ObjectComment'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$ObjectComment'.'/^#/']", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$ObjectComment']", lpath_0 if path is not None else None))
            return False
    return True


# check $Ref (.'$Ref')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Ref'
    # "/^\\$./"
    res = isinstance(val, str) and _jm_re_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^\\$./ [.'$Ref']", path))
    return res


# check $ValConst (.'$ValConst')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ValConst'
    # "/^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$/"
    res = isinstance(val, str) and _jm_re_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$/ [.'$ValConst']", path))
    return res


# check $StrConst (.'$StrConst')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$StrConst'
    # "/^[A-Za-z0-9_]/"
    res = isinstance(val, str) and _jm_re_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[A-Za-z0-9_]/ [.'$StrConst']", path))
    return res


def _jm_xre_0(val: str, path: Path, rep: Report) -> bool:
    extract: str
    match = _jm_xre_0_re_reco.search(val)
    if not match:
        return False
    extract: str = match.groupdict()["s1"]
    if not is_valid_regex(extract, path, rep):
        return False
    return True


def _jm_xre_1(val: str, path: Path, rep: Report) -> bool:
    extract: str
    match = _jm_xre_1_re_reco.search(val)
    if not match:
        return False
    extract: str = match.groupdict()["s1"]
    if not is_valid_exreg(extract, path, rep):
        return False
    return True

# check $Regex (.'$Regex')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Regex'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Regex'.'|']", path))
    if res:
        # .'$Regex'.'|'.0
        # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
        res = _jm_xre_1(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected /^/($EXREG)/[a-z]*X[a-z]*$/X [.'$Regex'.'|'.0]", path))
        if not res:
            # .'$Regex'.'|'.1
            # "/^/($REGEX)/[a-z]*$/X"
            res = _jm_xre_0(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected /^/($REGEX)/[a-z]*$/X [.'$Regex'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Regex'.'|']", path))
    return res


# check $Name (.'$Name')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Name'
    # "/^\\..+$/"
    res = isinstance(val, str) and _jm_re_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^\\..+$/ [.'$Name']", path))
    return res

# check $CmpValue (.'$CmpValue')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$CmpValue'
    # .'$CmpValue'.'|'.0
    res = isinstance(val, int) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1 strict int [.'$CmpValue'.'|'.0]", path))
    if not res:
        # .'$CmpValue'.'|'.1
        res = isinstance(val, float)
        if not res:
            rep is None or rep.append(("not a -1.0 strict float [.'$CmpValue'.'|'.1]", path))
        if not res:
            # .'$CmpValue'.'|'.2
            res = isinstance(val, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$CmpValue'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$CmpValue'.'|']", path))
    return res

# check $EqValue (.'$EqValue')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$EqValue'
    # .'$EqValue'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$EqValue'.'|'.0]", path))
    if not res:
        # .'$EqValue'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$EqValue'.'|'.1]", path))
        if not res:
            # .'$EqValue'.'|'.2
            res = json_model_12(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$EqValue'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$EqValue'.'|']", path))
    return res

# check $ValModel (.'$ValModel')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ValModel'
    # .'$ValModel'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$ValModel'.'|'.0]", path))
    if not res:
        # .'$ValModel'.'|'.1
        res = isinstance(val, bool) and val == True
        if not res:
            rep is None or rep.append(("unexpected =true [.'$ValModel'.'|'.1]", path))
        if not res:
            # .'$ValModel'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool) and val == 0
            if not res:
                rep is None or rep.append(("unexpected =0 [.'$ValModel'.'|'.2]", path))
            if not res:
                # .'$ValModel'.'|'.3
                res = isinstance(val, int) and not isinstance(val, bool) and val == 1
                if not res:
                    rep is None or rep.append(("unexpected =1 [.'$ValModel'.'|'.3]", path))
                if not res:
                    # .'$ValModel'.'|'.4
                    res = isinstance(val, int) and not isinstance(val, bool) and val == -1
                    if not res:
                        rep is None or rep.append(("unexpected =-1 [.'$ValModel'.'|'.4]", path))
                    if not res:
                        # .'$ValModel'.'|'.5
                        res = isinstance(val, float) and val == 0.0
                        if not res:
                            rep is None or rep.append(("unexpected =0.0 [.'$ValModel'.'|'.5]", path))
                        if not res:
                            # .'$ValModel'.'|'.6
                            res = isinstance(val, float) and val == 1.0
                            if not res:
                                rep is None or rep.append(("unexpected =1.0 [.'$ValModel'.'|'.6]", path))
                            if not res:
                                # .'$ValModel'.'|'.7
                                res = isinstance(val, float) and val == -1.0
                                if not res:
                                    rep is None or rep.append(("unexpected =-1.0 [.'$ValModel'.'|'.7]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$ValModel'.'|']", path))
    return res

# check $StrModel (.'$StrModel')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$StrModel'
    # .'$StrModel'.'|'.0
    res = json_model_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $StrConst [.'$StrModel'.'|'.0]", path))
    if not res:
        # .'$StrModel'.'|'.1
        res = json_model_8(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ValConst [.'$StrModel'.'|'.1]", path))
        if not res:
            # .'$StrModel'.'|'.2
            res = json_model_10(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Regex [.'$StrModel'.'|'.2]", path))
            if not res:
                # .'$StrModel'.'|'.3
                res = json_model_3(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected $PreDef [.'$StrModel'.'|'.3]", path))
                if not res:
                    # .'$StrModel'.'|'.4
                    res = json_model_7(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Ref [.'$StrModel'.'|'.4]", path))
                    if not res:
                        # .'$StrModel'.'|'.5
                        res = isinstance(val, str) and val == ""
                        if not res:
                            rep is None or rep.append(("unexpected _ [.'$StrModel'.'|'.5]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$StrModel'.'|']", path))
    return res

# check $Any (.'$Any')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Any'
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$Any']", path))
    return res

# check $None (.'$None')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$None'
    res = False
    if not res:
        rep is None or rep.append(("unexpected $NONE [.'$None']", path))
    return res

# check $CModel (.'$CModel')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$CModel'
    # .'$CModel'.'|'.0
    res = json_model_33(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [.'$CModel'.'|'.0]", path))
    if not res:
        # .'$CModel'.'|'.1
        res = json_model_5(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $ArrayComment [.'$CModel'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$CModel'.'|']", path))
    return res

# check $Array (.'$Array')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Array'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$Array'.0
            res = json_model_18(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CModel [.'$Array'.0]", arr_0_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Array']", path))
    return res

# check $Common (.'$Common')
def json_model_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Common'
    res = json_model_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ObjectComment [.'$Common']", path))
    return res



# check $Constraint (.'$Constraint')
def json_model_21(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Constraint'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Constraint']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Constraint'.'@'
            res = json_model_33(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Constraint'.'@']", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Constraint'.'@']", lpath_1 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Constraint'.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Constraint'.'!']", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Constraint'.'!']", lpath_1 if path is not None else None))
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 2 re props
            # .'$Constraint'.'/^(<=|>=|<|>)$/'
            res = json_model_12(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$Constraint'.'/^(<=|>=|<|>)$/']", lpath_1 if path is not None else None))
                return False
        elif _jm_re_8(prop, path, rep):
            # handle 2 re props
            # .'$Constraint'.'/^(=|!=)$/'
            res = json_model_13(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$Constraint'.'/^(=|!=)$/']", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Constraint']", lpath_1 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Constraint']", path))
        return False
    return True

# check $Or (.'$Or')
def json_model_22(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Or'
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Or']", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$Or']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("|", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <|> [.'$Or']", path))
        return False
    lpath = (path + [ "|" ]) if path is not None else None
    # .'$Or'.'|'
    res = isinstance(pval, list)
    if res:
        for arr_1_idx, arr_1_item in enumerate(pval):
            arr_1_lpath: Path = ((lpath if path is not None else None) + [ arr_1_idx ]) if (lpath if path is not None else None) is not None else None
            # .'$Or'.'|'.0
            res = json_model_18(arr_1_item, arr_1_lpath if (lpath if path is not None else None) is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CModel [.'$Or'.'|'.0]", arr_1_lpath if (lpath if path is not None else None) is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Or'.'|']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <|> [.'$Or']", lpath if path is not None else None))
        return False
    return True

# check $And (.'$And')
def json_model_23(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$And'
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$And']", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$And']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("&", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <&> [.'$And']", path))
        return False
    lpath = (path + [ "&" ]) if path is not None else None
    # .'$And'.'&'
    res = isinstance(pval, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(pval):
            arr_2_lpath: Path = ((lpath if path is not None else None) + [ arr_2_idx ]) if (lpath if path is not None else None) is not None else None
            # .'$And'.'&'.0
            res = json_model_18(arr_2_item, arr_2_lpath if (lpath if path is not None else None) is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CModel [.'$And'.'&'.0]", arr_2_lpath if (lpath if path is not None else None) is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$And'.'&']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <&> [.'$And']", lpath if path is not None else None))
        return False
    return True

# check $Xor (.'$Xor')
def json_model_24(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Xor'
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Xor']", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$Xor']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("^", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <^> [.'$Xor']", path))
        return False
    lpath = (path + [ "^" ]) if path is not None else None
    # .'$Xor'.'^'
    res = isinstance(pval, list)
    if res:
        for arr_3_idx, arr_3_item in enumerate(pval):
            arr_3_lpath: Path = ((lpath if path is not None else None) + [ arr_3_idx ]) if (lpath if path is not None else None) is not None else None
            # .'$Xor'.'^'.0
            res = json_model_18(arr_3_item, arr_3_lpath if (lpath if path is not None else None) is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CModel [.'$Xor'.'^'.0]", arr_3_lpath if (lpath if path is not None else None) is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Xor'.'^']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <^> [.'$Xor']", lpath if path is not None else None))
        return False
    return True

# check $Add (.'$Add')
def json_model_25(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Add'
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Add']", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$Add']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("+", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <+> [.'$Add']", path))
        return False
    lpath = (path + [ "+" ]) if path is not None else None
    # .'$Add'.'+'
    res = isinstance(pval, list)
    if res:
        for arr_4_idx, arr_4_item in enumerate(pval):
            arr_4_lpath: Path = ((lpath if path is not None else None) + [ arr_4_idx ]) if (lpath if path is not None else None) is not None else None
            # .'$Add'.'+'.0
            res = json_model_18(arr_4_item, arr_4_lpath if (lpath if path is not None else None) is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CModel [.'$Add'.'+'.0]", arr_4_lpath if (lpath if path is not None else None) is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Add'.'+']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <+> [.'$Add']", lpath if path is not None else None))
        return False
    return True


# check $Prop (.'$Prop')
def json_model_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Prop'
    # .'$Prop'.'|'.0
    # "/^[?!]/"
    res = isinstance(val, str) and _jm_re_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[?!]/ [.'$Prop'.'|'.0]", path))
    if not res:
        # .'$Prop'.'|'.1
        res = json_model_9(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $StrConst [.'$Prop'.'|'.1]", path))
        if not res:
            # .'$Prop'.'|'.2
            res = json_model_10(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Regex [.'$Prop'.'|'.2]", path))
            if not res:
                # .'$Prop'.'|'.3
                res = json_model_7(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Ref [.'$Prop'.'|'.3]", path))
                if not res:
                    # .'$Prop'.'|'.4
                    res = json_model_11(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Name [.'$Prop'.'|'.4]", path))
                    if not res:
                        # .'$Prop'.'|'.5
                        res = isinstance(val, str) and val == ""
                        if not res:
                            rep is None or rep.append(("unexpected _ [.'$Prop'.'|'.5]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Prop'.'|']", path))
    return res

# check $Obj (.'$Obj')
def json_model_27(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Obj'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Obj']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if json_model_26(prop, lpath_2 if path is not None else None, rep):
            # handle 1 key props
            # .'$Obj'.'$Prop'
            res = json_model_33(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Obj'.'$Prop']", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Obj']", lpath_2 if path is not None else None))
            return False
    return True

# check $Elem (.'$Elem')
def json_model_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Elem'
    # .'$Elem'.'|'.0
    res = json_model_21(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Constraint [.'$Elem'.'|'.0]", path))
    if not res:
        # .'$Elem'.'|'.1
        res = json_model_22(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Or [.'$Elem'.'|'.1]", path))
        if not res:
            # .'$Elem'.'|'.2
            res = json_model_23(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $And [.'$Elem'.'|'.2]", path))
            if not res:
                # .'$Elem'.'|'.3
                res = json_model_24(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected $Xor [.'$Elem'.'|'.3]", path))
                if not res:
                    # .'$Elem'.'|'.4
                    res = json_model_25(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Add [.'$Elem'.'|'.4]", path))
                    if not res:
                        # .'$Elem'.'|'.5
                        res = json_model_27(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Obj [.'$Elem'.'|'.5]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Elem'.'|']", path))
    return res

# object .'$Element'.'|'.5
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Element'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Element'.'|'.5.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Element'.'|'.5.'#']", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.5.'#']", lpath_3 if path is not None else None))
                return False
        elif json_model_26(prop, lpath_3 if path is not None else None, rep):
            # handle 1 key props
            # .'$Element'.'|'.5.'$Prop'
            res = json_model_33(pval, lpath_3 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Element'.'|'.5.'$Prop']", lpath_3 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Element'.'|'.5.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Element'.'|'.5.'/^#/']", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Element'.'|'.5]", lpath_3 if path is not None else None))
            return False
    return True

# object .'$Element'.'|'.4
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Element'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$Element'.'|'.4.'+'
            res = isinstance(pval, list)
            if res:
                for arr_5_idx, arr_5_item in enumerate(pval):
                    arr_5_lpath: Path = ((lpath_4 if path is not None else None) + [ arr_5_idx ]) if (lpath_4 if path is not None else None) is not None else None
                    # .'$Element'.'|'.4.'+'.0
                    res = json_model_18(arr_5_item, arr_5_lpath if (lpath_4 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $CModel [.'$Element'.'|'.4.'+'.0]", arr_5_lpath if (lpath_4 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Element'.'|'.4.'+']", lpath_4 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Element'.'|'.4.'+']", lpath_4 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Element'.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Element'.'|'.4.'#']", lpath_4 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.4.'#']", lpath_4 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Element'.'|'.4.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Element'.'|'.4.'/^#/']", lpath_4 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Element'.'|'.4]", lpath_4 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$Element'.'|'.4]", path))
        return False
    return True

# object .'$Element'.'|'.3
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Element'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Element'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_6_idx, arr_6_item in enumerate(pval):
                    arr_6_lpath: Path = ((lpath_5 if path is not None else None) + [ arr_6_idx ]) if (lpath_5 if path is not None else None) is not None else None
                    # .'$Element'.'|'.3.'^'.0
                    res = json_model_18(arr_6_item, arr_6_lpath if (lpath_5 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $CModel [.'$Element'.'|'.3.'^'.0]", arr_6_lpath if (lpath_5 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Element'.'|'.3.'^']", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Element'.'|'.3.'^']", lpath_5 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Element'.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Element'.'|'.3.'#']", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.3.'#']", lpath_5 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Element'.'|'.3.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Element'.'|'.3.'/^#/']", lpath_5 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Element'.'|'.3]", lpath_5 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Element'.'|'.3]", path))
        return False
    return True

# object .'$Element'.'|'.2
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Element'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$Element'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_7_idx, arr_7_item in enumerate(pval):
                    arr_7_lpath: Path = ((lpath_6 if path is not None else None) + [ arr_7_idx ]) if (lpath_6 if path is not None else None) is not None else None
                    # .'$Element'.'|'.2.'&'.0
                    res = json_model_18(arr_7_item, arr_7_lpath if (lpath_6 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $CModel [.'$Element'.'|'.2.'&'.0]", arr_7_lpath if (lpath_6 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Element'.'|'.2.'&']", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Element'.'|'.2.'&']", lpath_6 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Element'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Element'.'|'.2.'#']", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.2.'#']", lpath_6 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Element'.'|'.2.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Element'.'|'.2.'/^#/']", lpath_6 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Element'.'|'.2]", lpath_6 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$Element'.'|'.2]", path))
        return False
    return True

# object .'$Element'.'|'.1
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Element'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Element'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_8_idx, arr_8_item in enumerate(pval):
                    arr_8_lpath: Path = ((lpath_7 if path is not None else None) + [ arr_8_idx ]) if (lpath_7 if path is not None else None) is not None else None
                    # .'$Element'.'|'.1.'|'.0
                    res = json_model_18(arr_8_item, arr_8_lpath if (lpath_7 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $CModel [.'$Element'.'|'.1.'|'.0]", arr_8_lpath if (lpath_7 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Element'.'|'.1.'|']", lpath_7 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Element'.'|'.1.'|']", lpath_7 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Element'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Element'.'|'.1.'#']", lpath_7 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.1.'#']", lpath_7 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Element'.'|'.1.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Element'.'|'.1.'/^#/']", lpath_7 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Element'.'|'.1]", lpath_7 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Element'.'|'.1]", path))
        return False
    return True

# object .'$Element'.'|'.0
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Element'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Element'.'|'.0.'@'
            res = json_model_33(pval, lpath_8 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Element'.'|'.0.'@']", lpath_8 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Element'.'|'.0.'@']", lpath_8 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Element'.'|'.0.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Element'.'|'.0.'#']", lpath_8 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.0.'#']", lpath_8 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Element'.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Element'.'|'.0.'!']", lpath_8 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.0.'!']", lpath_8 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 3 re props
            # .'$Element'.'|'.0.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Element'.'|'.0.'/^#/']", lpath_8 if path is not None else None))
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 3 re props
            # .'$Element'.'|'.0.'/^(<=|>=|<|>)$/'
            res = json_model_12(pval, lpath_8 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$Element'.'|'.0.'/^(<=|>=|<|>)$/']", lpath_8 if path is not None else None))
                return False
        elif _jm_re_8(prop, path, rep):
            # handle 3 re props
            # .'$Element'.'|'.0.'/^(=|!=)$/'
            res = json_model_13(pval, lpath_8 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$Element'.'|'.0.'/^(=|!=)$/']", lpath_8 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Element'.'|'.0]", lpath_8 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Element'.'|'.0]", path))
        return False
    return True

# check $Element (.'$Element')
def json_model_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Element'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Element'.'|']", path))
    if res:
        # .'$Element'.'|'.0
        res = _jm_obj_5(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Element'.'|'.0]", path))
        if not res:
            # .'$Element'.'|'.1
            res = _jm_obj_4(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Element'.'|'.1]", path))
            if not res:
                # .'$Element'.'|'.2
                res = _jm_obj_3(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Element'.'|'.2]", path))
                if not res:
                    # .'$Element'.'|'.3
                    res = _jm_obj_2(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Element'.'|'.3]", path))
                    if not res:
                        # .'$Element'.'|'.4
                        res = _jm_obj_1(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$Element'.'|'.4]", path))
                        if not res:
                            # .'$Element'.'|'.5
                            res = _jm_obj_0(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$Element'.'|'.5]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Element'.'|']", path))
    return res

# object .'$Trafo'.'~'
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Trafo'.'~']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Trafo'.'~'.''
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$Trafo'.'~'.'']", lpath_10 if path is not None else None))
            return False
    return True

# check $Trafo (.'$Trafo')
def json_model_30(val: Jsonable, path: Path, rep: Report) -> bool:
    # remove, rename or add stuff
    # .'$Trafo'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Trafo']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if prop == "/":
            # handle may / property
            # .'$Trafo'.'/'
            # .'$Trafo'.'/'.'|'.0
            res = json_model_13(pval, lpath_9 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$Trafo'.'/'.'|'.0]", lpath_9 if path is not None else None))
            if not res:
                # .'$Trafo'.'/'.'|'.1
                res = isinstance(pval, list)
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Trafo'.'/'.'|'.1]", lpath_9 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Trafo'.'/'.'|']", lpath_9 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Trafo'.'/']", lpath_9 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Trafo'.'~'
            res = _jm_obj_6(pval, lpath_9 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Trafo'.'~']", lpath_9 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Trafo'.'~']", lpath_9 if path is not None else None))
                return False
        elif prop == "*":
            # handle may * property
            # .'$Trafo'.'*'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Trafo'.'*']", lpath_9 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Trafo'.'*']", lpath_9 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Trafo']", lpath_9 if path is not None else None))
            return False
    return True

# object .'$Transformation'.'|'.1.'~'
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Transformation'.'|'.1.'~']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Transformation'.'|'.1.'~'.''
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$Transformation'.'|'.1.'~'.'']", lpath_12 if path is not None else None))
            return False
    return True

# object .'$Transformation'.'|'.1
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Transformation'.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Transformation'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Transformation'.'|'.1.'#']", lpath_11 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.1.'#']", lpath_11 if path is not None else None))
                return False
        elif prop == "/":
            # handle may / property
            # .'$Transformation'.'|'.1.'/'
            # .'$Transformation'.'|'.1.'/'.'|'.0
            res = json_model_13(pval, lpath_11 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$Transformation'.'|'.1.'/'.'|'.0]", lpath_11 if path is not None else None))
            if not res:
                # .'$Transformation'.'|'.1.'/'.'|'.1
                res = isinstance(pval, list)
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Transformation'.'|'.1.'/'.'|'.1]", lpath_11 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Transformation'.'|'.1.'/'.'|']", lpath_11 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.1.'/']", lpath_11 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Transformation'.'|'.1.'~'
            res = _jm_obj_8(pval, lpath_11 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Transformation'.'|'.1.'~']", lpath_11 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.1.'~']", lpath_11 if path is not None else None))
                return False
        elif prop == "*":
            # handle may * property
            # .'$Transformation'.'|'.1.'*'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Transformation'.'|'.1.'*']", lpath_11 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.1.'*']", lpath_11 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Transformation'.'|'.1.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Transformation'.'|'.1.'/^#/']", lpath_11 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Transformation'.'|'.1]", lpath_11 if path is not None else None))
            return False
    return True

# check $Transformation (.'$Transformation')
def json_model_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Transformation'
    # .'$Transformation'.'|'.0
    res = json_model_33(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [.'$Transformation'.'|'.0]", path))
    if not res:
        # .'$Transformation'.'|'.1
        res = _jm_obj_7(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Transformation'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Transformation'.'|']", path))
    return res

# check $ScalarModel (.'$ScalarModel')
def json_model_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ScalarModel'
    # .'$ScalarModel'.'|'.0
    res = json_model_14(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ValModel [.'$ScalarModel'.'|'.0]", path))
    if not res:
        # .'$ScalarModel'.'|'.1
        res = json_model_15(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $StrModel [.'$ScalarModel'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$ScalarModel'.'|']", path))
    return res

# check $Model (.'$Model')
def json_model_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Model'
    # .'$Model'.'|'.0
    res = json_model_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ScalarModel [.'$Model'.'|'.0]", path))
    if not res:
        # .'$Model'.'|'.1
        res = json_model_19(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Array [.'$Model'.'|'.1]", path))
        if not res:
            # .'$Model'.'|'.2
            res = json_model_29(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Element [.'$Model'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Model'.'|']", path))
    return res

# check $Defs (.'$Defs')
def json_model_34(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Defs'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        if prop == "":
            # handle may  property
            # .'$Defs'.''
            res = json_model_2(pval, lpath_13 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Defs'.'']", lpath_13 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Defs'.'']", lpath_13 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_13 if path is not None else None, rep):
            # handle 1 key props
            # .'$Defs'.'$Identifier'
            res = json_model_33(pval, lpath_13 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Defs'.'$Identifier']", lpath_13 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Defs']", lpath_13 if path is not None else None))
            return False
    return True


# check $Rename (.'$Rename')
def json_model_35(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Rename'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Rename']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        if json_model_11(prop, lpath_14 if path is not None else None, rep):
            # handle 1 key props
            # .'$Rename'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_14 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Rename'.'$Name']", lpath_14 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Rename']", lpath_14 if path is not None else None))
            return False
    return True


# check $Rewrite (.'$Rewrite')
def json_model_36(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Rewrite'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Rewrite']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_11(prop, path, rep):
            # handle 1 re props
            # .'$Rewrite'.'/^\\$.*$/'
            res = json_model_31(pval, lpath_15 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Rewrite'.'/^\\\\$.*$/']", lpath_15 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Rewrite']", lpath_15 if path is not None else None))
            return False
    return True

# check $Import (.'$Import')
def json_model_37(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Import'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Import']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        if prop == "<":
            # handle may < property
            # .'$Import'.'<'
            # .'$Import'.'<'.'|'.0
            res = json_model_7(pval, lpath_16 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Import'.'<'.'|'.0]", lpath_16 if path is not None else None))
            if not res:
                # .'$Import'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_9_idx, arr_9_item in enumerate(pval):
                        arr_9_lpath: Path = ((lpath_16 if path is not None else None) + [ arr_9_idx ]) if (lpath_16 if path is not None else None) is not None else None
                        # .'$Import'.'<'.'|'.1.0
                        res = json_model_7(arr_9_item, arr_9_lpath if (lpath_16 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Import'.'<'.'|'.1.0]", arr_9_lpath if (lpath_16 if path is not None else None) is not None else None))
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Import'.'<'.'|'.1]", lpath_16 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Import'.'<'.'|']", lpath_16 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Import'.'<']", lpath_16 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Import']", lpath_16 if path is not None else None))
            return False
    return True

# object .'$RootOnly'.'$'
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootOnly'.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootOnly'.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootOnly'.'$'.'#']", lpath_18 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'$'.'#']", lpath_18 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$RootOnly'.'$'.''
            res = json_model_2(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootOnly'.'$'.'']", lpath_18 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'$'.'']", lpath_18 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_18 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootOnly'.'$'.'$Identifier'
            res = json_model_33(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$RootOnly'.'$'.'$Identifier']", lpath_18 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$RootOnly'.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootOnly'.'$'.'/^#/']", lpath_18 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootOnly'.'$']", lpath_18 if path is not None else None))
            return False
    return True

# object .'$RootOnly'.'%'
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootOnly'.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootOnly'.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootOnly'.'%'.'#']", lpath_19 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'%'.'#']", lpath_19 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$RootOnly'.'%'.'<'
            # .'$RootOnly'.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_19 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$RootOnly'.'%'.'<'.'|'.0]", lpath_19 if path is not None else None))
            if not res:
                # .'$RootOnly'.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_10_idx, arr_10_item in enumerate(pval):
                        arr_10_lpath: Path = ((lpath_19 if path is not None else None) + [ arr_10_idx ]) if (lpath_19 if path is not None else None) is not None else None
                        # .'$RootOnly'.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_10_item, arr_10_lpath if (lpath_19 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$RootOnly'.'%'.'<'.'|'.1.0]", arr_10_lpath if (lpath_19 if path is not None else None) is not None else None))
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$RootOnly'.'%'.'<'.'|'.1]", lpath_19 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$RootOnly'.'%'.'<'.'|']", lpath_19 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'%'.'<']", lpath_19 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_19 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootOnly'.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_19 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$RootOnly'.'%'.'$Name']", lpath_19 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$RootOnly'.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootOnly'.'%'.'/^#/']", lpath_19 if path is not None else None))
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$RootOnly'.'%'.'/^\\$.*$/'
            res = json_model_31(pval, lpath_19 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$RootOnly'.'%'.'/^\\\\$.*$/']", lpath_19 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootOnly'.'%']", lpath_19 if path is not None else None))
            return False
    return True

# check $RootOnly (.'$RootOnly')
def json_model_38(val: Jsonable, path: Path, rep: Report) -> bool:
    # symbols that can only appear at the model's root
    # .'$RootOnly'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootOnly']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        if prop == "~":
            # handle may ~ property
            # .'$RootOnly'.'~'
            res = json_model_2(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootOnly'.'~']", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'~']", lpath_17 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$RootOnly'.'$'
            res = _jm_obj_9(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootOnly'.'$']", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'$']", lpath_17 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$RootOnly'.'%'
            res = _jm_obj_10(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootOnly'.'%']", lpath_17 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'%']", lpath_17 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootOnly']", lpath_17 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.5.'$'
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.5.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.5.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.5.'$'.'#']", lpath_21 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'$'.'#']", lpath_21 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.5.'$'.''
            res = json_model_2(pval, lpath_21 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.5.'$'.'']", lpath_21 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'$'.'']", lpath_21 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_21 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.5.'$'.'$Identifier'
            res = json_model_33(pval, lpath_21 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.5.'$'.'$Identifier']", lpath_21 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.5.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.5.'$'.'/^#/']", lpath_21 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.5.'$']", lpath_21 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.5.'%'
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.5.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.5.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.5.'%'.'#']", lpath_22 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'%'.'#']", lpath_22 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.5.'%'.'<'
            # .'$Root'.'|'.5.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_22 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.5.'%'.'<'.'|'.0]", lpath_22 if path is not None else None))
            if not res:
                # .'$Root'.'|'.5.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_11_idx, arr_11_item in enumerate(pval):
                        arr_11_lpath: Path = ((lpath_22 if path is not None else None) + [ arr_11_idx ]) if (lpath_22 if path is not None else None) is not None else None
                        # .'$Root'.'|'.5.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_11_item, arr_11_lpath if (lpath_22 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.5.'%'.'<'.'|'.1.0]", arr_11_lpath if (lpath_22 if path is not None else None) is not None else None))
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.5.'%'.'<'.'|'.1]", lpath_22 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Root'.'|'.5.'%'.'<'.'|']", lpath_22 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'%'.'<']", lpath_22 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_22 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.5.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_22 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.5.'%'.'$Name']", lpath_22 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$Root'.'|'.5.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.5.'%'.'/^#/']", lpath_22 if path is not None else None))
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.5.'%'.'/^\\$.*$/'
            res = json_model_31(pval, lpath_22 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Root'.'|'.5.'%'.'/^\\\\$.*$/']", lpath_22 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.5.'%']", lpath_22 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.5
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.5.'~'
            res = json_model_2(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.5.'~']", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'~']", lpath_20 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.5.'$'
            res = _jm_obj_12(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.5.'$']", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'$']", lpath_20 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.5.'%'
            res = _jm_obj_13(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.5.'%']", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'%']", lpath_20 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.5.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.5.'#']", lpath_20 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'#']", lpath_20 if path is not None else None))
                return False
        elif json_model_26(prop, lpath_20 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.5.'$Prop'
            res = json_model_33(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.5.'$Prop']", lpath_20 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.5.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.5.'/^#/']", lpath_20 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.5]", lpath_20 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.4.'$'
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.4.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.4.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.4.'$'.'#']", lpath_24 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'$'.'#']", lpath_24 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.4.'$'.''
            res = json_model_2(pval, lpath_24 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.4.'$'.'']", lpath_24 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'$'.'']", lpath_24 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_24 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.4.'$'.'$Identifier'
            res = json_model_33(pval, lpath_24 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.4.'$'.'$Identifier']", lpath_24 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.4.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.4.'$'.'/^#/']", lpath_24 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.4.'$']", lpath_24 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.4.'%'
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.4.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.4.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.4.'%'.'#']", lpath_25 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'%'.'#']", lpath_25 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.4.'%'.'<'
            # .'$Root'.'|'.4.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_25 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.4.'%'.'<'.'|'.0]", lpath_25 if path is not None else None))
            if not res:
                # .'$Root'.'|'.4.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_13_idx, arr_13_item in enumerate(pval):
                        arr_13_lpath: Path = ((lpath_25 if path is not None else None) + [ arr_13_idx ]) if (lpath_25 if path is not None else None) is not None else None
                        # .'$Root'.'|'.4.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_13_item, arr_13_lpath if (lpath_25 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.4.'%'.'<'.'|'.1.0]", arr_13_lpath if (lpath_25 if path is not None else None) is not None else None))
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.4.'%'.'<'.'|'.1]", lpath_25 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Root'.'|'.4.'%'.'<'.'|']", lpath_25 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'%'.'<']", lpath_25 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_25 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.4.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_25 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.4.'%'.'$Name']", lpath_25 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$Root'.'|'.4.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.4.'%'.'/^#/']", lpath_25 if path is not None else None))
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.4.'%'.'/^\\$.*$/'
            res = json_model_31(pval, lpath_25 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Root'.'|'.4.'%'.'/^\\\\$.*$/']", lpath_25 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.4.'%']", lpath_25 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.4
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$Root'.'|'.4.'+'
            res = isinstance(pval, list)
            if res:
                for arr_12_idx, arr_12_item in enumerate(pval):
                    arr_12_lpath: Path = ((lpath_23 if path is not None else None) + [ arr_12_idx ]) if (lpath_23 if path is not None else None) is not None else None
                    # .'$Root'.'|'.4.'+'.0
                    res = json_model_18(arr_12_item, arr_12_lpath if (lpath_23 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $CModel [.'$Root'.'|'.4.'+'.0]", arr_12_lpath if (lpath_23 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.4.'+']", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.4.'+']", lpath_23 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.4.'~'
            res = json_model_2(pval, lpath_23 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.4.'~']", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'~']", lpath_23 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.4.'$'
            res = _jm_obj_15(pval, lpath_23 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.4.'$']", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'$']", lpath_23 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.4.'%'
            res = _jm_obj_16(pval, lpath_23 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.4.'%']", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'%']", lpath_23 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.4.'#']", lpath_23 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'#']", lpath_23 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.4.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.4.'/^#/']", lpath_23 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.4]", lpath_23 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$Root'.'|'.4]", path))
        return False
    return True

# object .'$Root'.'|'.3.'$'
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.3.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.3.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.3.'$'.'#']", lpath_27 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'$'.'#']", lpath_27 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.3.'$'.''
            res = json_model_2(pval, lpath_27 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.3.'$'.'']", lpath_27 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'$'.'']", lpath_27 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_27 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.3.'$'.'$Identifier'
            res = json_model_33(pval, lpath_27 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.3.'$'.'$Identifier']", lpath_27 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.3.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.3.'$'.'/^#/']", lpath_27 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.3.'$']", lpath_27 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.3.'%'
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.3.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.3.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.3.'%'.'#']", lpath_28 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'%'.'#']", lpath_28 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.3.'%'.'<'
            # .'$Root'.'|'.3.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_28 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.3.'%'.'<'.'|'.0]", lpath_28 if path is not None else None))
            if not res:
                # .'$Root'.'|'.3.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_15_idx, arr_15_item in enumerate(pval):
                        arr_15_lpath: Path = ((lpath_28 if path is not None else None) + [ arr_15_idx ]) if (lpath_28 if path is not None else None) is not None else None
                        # .'$Root'.'|'.3.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_15_item, arr_15_lpath if (lpath_28 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.3.'%'.'<'.'|'.1.0]", arr_15_lpath if (lpath_28 if path is not None else None) is not None else None))
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.3.'%'.'<'.'|'.1]", lpath_28 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Root'.'|'.3.'%'.'<'.'|']", lpath_28 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'%'.'<']", lpath_28 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_28 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.3.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_28 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.3.'%'.'$Name']", lpath_28 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$Root'.'|'.3.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.3.'%'.'/^#/']", lpath_28 if path is not None else None))
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.3.'%'.'/^\\$.*$/'
            res = json_model_31(pval, lpath_28 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Root'.'|'.3.'%'.'/^\\\\$.*$/']", lpath_28 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.3.'%']", lpath_28 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.3
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Root'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_14_idx, arr_14_item in enumerate(pval):
                    arr_14_lpath: Path = ((lpath_26 if path is not None else None) + [ arr_14_idx ]) if (lpath_26 if path is not None else None) is not None else None
                    # .'$Root'.'|'.3.'^'.0
                    res = json_model_18(arr_14_item, arr_14_lpath if (lpath_26 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $CModel [.'$Root'.'|'.3.'^'.0]", arr_14_lpath if (lpath_26 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.3.'^']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.3.'^']", lpath_26 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.3.'~'
            res = json_model_2(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.3.'~']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'~']", lpath_26 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.3.'$'
            res = _jm_obj_18(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.3.'$']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'$']", lpath_26 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.3.'%'
            res = _jm_obj_19(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.3.'%']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'%']", lpath_26 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.3.'#']", lpath_26 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'#']", lpath_26 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.3.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.3.'/^#/']", lpath_26 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.3]", lpath_26 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Root'.'|'.3]", path))
        return False
    return True

# object .'$Root'.'|'.2.'$'
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.2.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.2.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.2.'$'.'#']", lpath_30 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'$'.'#']", lpath_30 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.2.'$'.''
            res = json_model_2(pval, lpath_30 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.2.'$'.'']", lpath_30 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'$'.'']", lpath_30 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_30 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.2.'$'.'$Identifier'
            res = json_model_33(pval, lpath_30 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.2.'$'.'$Identifier']", lpath_30 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.2.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.2.'$'.'/^#/']", lpath_30 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.2.'$']", lpath_30 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.2.'%'
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.2.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.2.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.2.'%'.'#']", lpath_31 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'%'.'#']", lpath_31 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.2.'%'.'<'
            # .'$Root'.'|'.2.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_31 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.2.'%'.'<'.'|'.0]", lpath_31 if path is not None else None))
            if not res:
                # .'$Root'.'|'.2.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_17_idx, arr_17_item in enumerate(pval):
                        arr_17_lpath: Path = ((lpath_31 if path is not None else None) + [ arr_17_idx ]) if (lpath_31 if path is not None else None) is not None else None
                        # .'$Root'.'|'.2.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_17_item, arr_17_lpath if (lpath_31 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.2.'%'.'<'.'|'.1.0]", arr_17_lpath if (lpath_31 if path is not None else None) is not None else None))
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.2.'%'.'<'.'|'.1]", lpath_31 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Root'.'|'.2.'%'.'<'.'|']", lpath_31 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'%'.'<']", lpath_31 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_31 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.2.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_31 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.2.'%'.'$Name']", lpath_31 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$Root'.'|'.2.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.2.'%'.'/^#/']", lpath_31 if path is not None else None))
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.2.'%'.'/^\\$.*$/'
            res = json_model_31(pval, lpath_31 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Root'.'|'.2.'%'.'/^\\\\$.*$/']", lpath_31 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.2.'%']", lpath_31 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.2
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$Root'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_16_idx, arr_16_item in enumerate(pval):
                    arr_16_lpath: Path = ((lpath_29 if path is not None else None) + [ arr_16_idx ]) if (lpath_29 if path is not None else None) is not None else None
                    # .'$Root'.'|'.2.'&'.0
                    res = json_model_18(arr_16_item, arr_16_lpath if (lpath_29 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $CModel [.'$Root'.'|'.2.'&'.0]", arr_16_lpath if (lpath_29 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.2.'&']", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.2.'&']", lpath_29 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.2.'~'
            res = json_model_2(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.2.'~']", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'~']", lpath_29 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.2.'$'
            res = _jm_obj_21(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.2.'$']", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'$']", lpath_29 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.2.'%'
            res = _jm_obj_22(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.2.'%']", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'%']", lpath_29 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.2.'#']", lpath_29 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'#']", lpath_29 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.2.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.2.'/^#/']", lpath_29 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.2]", lpath_29 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$Root'.'|'.2]", path))
        return False
    return True

# object .'$Root'.'|'.1.'$'
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.1.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.1.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.1.'$'.'#']", lpath_33 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'$'.'#']", lpath_33 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.1.'$'.''
            res = json_model_2(pval, lpath_33 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.1.'$'.'']", lpath_33 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'$'.'']", lpath_33 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_33 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.1.'$'.'$Identifier'
            res = json_model_33(pval, lpath_33 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.1.'$'.'$Identifier']", lpath_33 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.1.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.1.'$'.'/^#/']", lpath_33 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.1.'$']", lpath_33 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.1.'%'
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.1.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.1.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.1.'%'.'#']", lpath_34 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'%'.'#']", lpath_34 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.1.'%'.'<'
            # .'$Root'.'|'.1.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_34 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.1.'%'.'<'.'|'.0]", lpath_34 if path is not None else None))
            if not res:
                # .'$Root'.'|'.1.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_19_idx, arr_19_item in enumerate(pval):
                        arr_19_lpath: Path = ((lpath_34 if path is not None else None) + [ arr_19_idx ]) if (lpath_34 if path is not None else None) is not None else None
                        # .'$Root'.'|'.1.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_19_item, arr_19_lpath if (lpath_34 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.1.'%'.'<'.'|'.1.0]", arr_19_lpath if (lpath_34 if path is not None else None) is not None else None))
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.1.'%'.'<'.'|'.1]", lpath_34 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Root'.'|'.1.'%'.'<'.'|']", lpath_34 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'%'.'<']", lpath_34 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_34 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.1.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_34 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.1.'%'.'$Name']", lpath_34 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$Root'.'|'.1.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.1.'%'.'/^#/']", lpath_34 if path is not None else None))
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.1.'%'.'/^\\$.*$/'
            res = json_model_31(pval, lpath_34 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Root'.'|'.1.'%'.'/^\\\\$.*$/']", lpath_34 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.1.'%']", lpath_34 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.1
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Root'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_18_idx, arr_18_item in enumerate(pval):
                    arr_18_lpath: Path = ((lpath_32 if path is not None else None) + [ arr_18_idx ]) if (lpath_32 if path is not None else None) is not None else None
                    # .'$Root'.'|'.1.'|'.0
                    res = json_model_18(arr_18_item, arr_18_lpath if (lpath_32 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $CModel [.'$Root'.'|'.1.'|'.0]", arr_18_lpath if (lpath_32 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.1.'|']", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.1.'|']", lpath_32 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.1.'~'
            res = json_model_2(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.1.'~']", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'~']", lpath_32 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.1.'$'
            res = _jm_obj_24(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.1.'$']", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'$']", lpath_32 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.1.'%'
            res = _jm_obj_25(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.1.'%']", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'%']", lpath_32 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.1.'#']", lpath_32 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'#']", lpath_32 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.1.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.1.'/^#/']", lpath_32 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.1]", lpath_32 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Root'.'|'.1]", path))
        return False
    return True

# object .'$Root'.'|'.0.'$'
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.0.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_36: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.0.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.0.'$'.'#']", lpath_36 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'$'.'#']", lpath_36 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.0.'$'.''
            res = json_model_2(pval, lpath_36 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.0.'$'.'']", lpath_36 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'$'.'']", lpath_36 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_36 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.0.'$'.'$Identifier'
            res = json_model_33(pval, lpath_36 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.0.'$'.'$Identifier']", lpath_36 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.0.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.0.'$'.'/^#/']", lpath_36 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.0.'$']", lpath_36 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.0.'%'
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.0.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        lpath_37: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.0.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.0.'%'.'#']", lpath_37 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'%'.'#']", lpath_37 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.0.'%'.'<'
            # .'$Root'.'|'.0.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_37 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.0.'%'.'<'.'|'.0]", lpath_37 if path is not None else None))
            if not res:
                # .'$Root'.'|'.0.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_20_idx, arr_20_item in enumerate(pval):
                        arr_20_lpath: Path = ((lpath_37 if path is not None else None) + [ arr_20_idx ]) if (lpath_37 if path is not None else None) is not None else None
                        # .'$Root'.'|'.0.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_20_item, arr_20_lpath if (lpath_37 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.0.'%'.'<'.'|'.1.0]", arr_20_lpath if (lpath_37 if path is not None else None) is not None else None))
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.0.'%'.'<'.'|'.1]", lpath_37 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Root'.'|'.0.'%'.'<'.'|']", lpath_37 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'%'.'<']", lpath_37 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_37 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.0.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_37 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.0.'%'.'$Name']", lpath_37 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$Root'.'|'.0.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.0.'%'.'/^#/']", lpath_37 if path is not None else None))
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.0.'%'.'/^\\$.*$/'
            res = json_model_31(pval, lpath_37 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Root'.'|'.0.'%'.'/^\\\\$.*$/']", lpath_37 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.0.'%']", lpath_37 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.0
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Root'.'|'.0.'@'
            res = json_model_33(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.0.'@']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.0.'@']", lpath_35 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.0.'~'
            res = json_model_2(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.0.'~']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'~']", lpath_35 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.0.'$'
            res = _jm_obj_27(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.0.'$']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'$']", lpath_35 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.0.'%'
            res = _jm_obj_28(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.0.'%']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'%']", lpath_35 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.0.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.0.'#']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'#']", lpath_35 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Root'.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Root'.'|'.0.'!']", lpath_35 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'!']", lpath_35 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 3 re props
            # .'$Root'.'|'.0.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.0.'/^#/']", lpath_35 if path is not None else None))
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 3 re props
            # .'$Root'.'|'.0.'/^(<=|>=|<|>)$/'
            res = json_model_12(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$Root'.'|'.0.'/^(<=|>=|<|>)$/']", lpath_35 if path is not None else None))
                return False
        elif _jm_re_8(prop, path, rep):
            # handle 3 re props
            # .'$Root'.'|'.0.'/^(=|!=)$/'
            res = json_model_13(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$Root'.'|'.0.'/^(=|!=)$/']", lpath_35 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.0]", lpath_35 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Root'.'|'.0]", path))
        return False
    return True

# check $Root (.'$Root')
def json_model_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Root'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Root'.'|']", path))
    if res:
        # .'$Root'.'|'.0
        res = _jm_obj_26(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Root'.'|'.0]", path))
        if not res:
            # .'$Root'.'|'.1
            res = _jm_obj_23(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.1]", path))
            if not res:
                # .'$Root'.'|'.2
                res = _jm_obj_20(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Root'.'|'.2]", path))
                if not res:
                    # .'$Root'.'|'.3
                    res = _jm_obj_17(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Root'.'|'.3]", path))
                    if not res:
                        # .'$Root'.'|'.4
                        res = _jm_obj_14(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$Root'.'|'.4]", path))
                        if not res:
                            # .'$Root'.'|'.5
                            res = _jm_obj_11(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$Root'.'|'.5]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Root'.'|']", path))
    return res

# check $RootModel (.'$RootModel')
def json_model_40(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$RootModel'
    # .'$RootModel'.'|'.0
    res = json_model_32(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ScalarModel [.'$RootModel'.'|'.0]", path))
    if not res:
        # .'$RootModel'.'|'.1
        res = json_model_19(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Array [.'$RootModel'.'|'.1]", path))
        if not res:
            # .'$RootModel'.'|'.2
            res = json_model_39(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Root [.'$RootModel'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$RootModel'.'|']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_40(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $RootModel [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile("^((file|https?)://.+|\\./.*|\\.\\./.*)$")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global _jm_cst_0
        _jm_cst_0 = {'$ANY', '$BOOL', '$DATE', '$DATETIME', '$EMAIL', '$EXREG', '$F16', '$F32', '$F64', '$FLOAT', '$I16', '$I32', '$I64', '$I8', '$INT', '$INTEGER', '$NONE', '$NULL', '$NUMBER', '$REGEX', '$STRING', '$TIME', '$U16', '$U32', '$U64', '$U8', '$URI', '$URL', '$UUID'}
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = re.compile("[^A-Z0-9]")
        _jm_re_1 = lambda s, p, r: _jm_re_1_reco.search(s) is not None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = re.compile("^\\w(\\w|-)*$")
        _jm_re_2 = lambda s, p, r: _jm_re_2_reco.search(s) is not None
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = re.compile("^\\$.")
        _jm_re_3 = lambda s, p, r: _jm_re_3_reco.search(s) is not None
        global _jm_re_4_reco, _jm_re_4
        _jm_re_4_reco = re.compile("^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$")
        _jm_re_4 = lambda s, p, r: _jm_re_4_reco.search(s) is not None
        global _jm_re_5_reco, _jm_re_5
        _jm_re_5_reco = re.compile("^[A-Za-z0-9_]")
        _jm_re_5 = lambda s, p, r: _jm_re_5_reco.search(s) is not None
        global _jm_xre_0_re_reco, _jm_xre_0_re
        _jm_xre_0_re_reco = re.compile("^/(?<s1>.*)/[a-z]*$")
        _jm_xre_0_re = lambda s, p, r: _jm_xre_0_re_reco.search(s) is not None
        global _jm_xre_1_re_reco, _jm_xre_1_re
        _jm_xre_1_re_reco = re.compile("^/(?<s1>.*)/[a-z]*X[a-z]*$")
        _jm_xre_1_re = lambda s, p, r: _jm_xre_1_re_reco.search(s) is not None
        global _jm_re_6_reco, _jm_re_6
        _jm_re_6_reco = re.compile("^\\..+$")
        _jm_re_6 = lambda s, p, r: _jm_re_6_reco.search(s) is not None
        global _jm_re_7_reco, _jm_re_7
        _jm_re_7_reco = re.compile("^(<=|>=|<|>)$")
        _jm_re_7 = lambda s, p, r: _jm_re_7_reco.search(s) is not None
        global _jm_re_8_reco, _jm_re_8
        _jm_re_8_reco = re.compile("^(=|!=)$")
        _jm_re_8 = lambda s, p, r: _jm_re_8_reco.search(s) is not None
        global _jm_re_9_reco, _jm_re_9
        _jm_re_9_reco = re.compile("^[?!]")
        _jm_re_9 = lambda s, p, r: _jm_re_9_reco.search(s) is not None
        global _jm_re_10_reco, _jm_re_10
        _jm_re_10_reco = re.compile("^([#|&^+/*@~=$%]|[<>!]=?)$")
        _jm_re_10 = lambda s, p, r: _jm_re_10_reco.search(s) is not None
        global _jm_re_11_reco, _jm_re_11
        _jm_re_11_reco = re.compile("^\\$.*$")
        _jm_re_11 = lambda s, p, r: _jm_re_11_reco.search(s) is not None
        global check_model_map
        check_model_map = {
            "": json_model_40,
            "Url": json_model_2,
            "PreDef": json_model_3,
            "Identifier": json_model_4,
            "ArrayComment": json_model_5,
            "ObjectComment": json_model_6,
            "Ref": json_model_7,
            "ValConst": json_model_8,
            "StrConst": json_model_9,
            "Regex": json_model_10,
            "Name": json_model_11,
            "CmpValue": json_model_12,
            "EqValue": json_model_13,
            "ValModel": json_model_14,
            "StrModel": json_model_15,
            "Any": json_model_16,
            "None": json_model_17,
            "CModel": json_model_18,
            "Array": json_model_19,
            "Common": json_model_6,
            "Constraint": json_model_21,
            "Or": json_model_22,
            "And": json_model_23,
            "Xor": json_model_24,
            "Add": json_model_25,
            "Prop": json_model_26,
            "Obj": json_model_27,
            "Elem": json_model_28,
            "Element": json_model_29,
            "Trafo": json_model_30,
            "Transformation": json_model_31,
            "ScalarModel": json_model_32,
            "Model": json_model_33,
            "Defs": json_model_34,
            "Rename": json_model_35,
            "Rewrite": json_model_36,
            "Import": json_model_37,
            "RootOnly": json_model_38,
            "Root": json_model_39,
            "RootModel": json_model_40,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = None
        _jm_re_1 = None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = None
        _jm_re_2 = None
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = None
        _jm_re_3 = None
        global _jm_re_4_reco, _jm_re_4
        _jm_re_4_reco = None
        _jm_re_4 = None
        global _jm_re_5_reco, _jm_re_5
        _jm_re_5_reco = None
        _jm_re_5 = None
        global _jm_xre_0_re_reco, _jm_xre_0_re
        _jm_xre_0_re_reco = None
        _jm_xre_0_re = None
        global _jm_xre_1_re_reco, _jm_xre_1_re
        _jm_xre_1_re_reco = None
        _jm_xre_1_re = None
        global _jm_re_6_reco, _jm_re_6
        _jm_re_6_reco = None
        _jm_re_6 = None
        global _jm_re_7_reco, _jm_re_7
        _jm_re_7_reco = None
        _jm_re_7 = None
        global _jm_re_8_reco, _jm_re_8
        _jm_re_8_reco = None
        _jm_re_8 = None
        global _jm_re_9_reco, _jm_re_9
        _jm_re_9_reco = None
        _jm_re_9 = None
        global _jm_re_10_reco, _jm_re_10
        _jm_re_10_reco = None
        _jm_re_10 = None
        global _jm_re_11_reco, _jm_re_11
        _jm_re_11_reco = None
        _jm_re_11 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
