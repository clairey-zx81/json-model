#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0b0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0b0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_re_0_reco: object
_jm_re_0: RegexFun
_jm_re_1_reco: object
_jm_re_1: RegexFun
_jm_re_2_reco: object
_jm_re_2: RegexFun
_jm_re_3_reco: object
_jm_re_3: RegexFun
_jm_re_4_reco: object
_jm_re_4: RegexFun
_jm_re_5_reco: object
_jm_re_5: RegexFun
_jm_re_6_reco: object
_jm_re_6: RegexFun
_jm_re_7_reco: object
_jm_re_7: RegexFun
_jm_re_8_reco: object
_jm_re_8: RegexFun
check_model_map: PropMap

# check $Url (.'$Url')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    res = isinstance(val, str) and _jm_re_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^((file|https?)://.+|\\./.*|\\.\\./.*)$/ [.'$Url']", path))
    return res

# check $Val (.'$Val')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Val'
    # .'$Val'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$Val'.'|'.0]", path))
    if not res:
        # .'$Val'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$Val'.'|'.1]", path))
        if not res:
            # .'$Val'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$Val'.'|'.2]", path))
            if not res:
                # .'$Val'.'|'.3
                res = isinstance(val, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [.'$Val'.'|'.3]", path))
                if not res:
                    # .'$Val'.'|'.4
                    res = isinstance(val, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$Val'.'|'.4]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Val'.'|']", path))
    return res

# check $Any (.'$Any')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Any'
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$Any']", path))
    return res

# check $None (.'$None')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$None'
    res = False
    if not res:
        rep is None or rep.append(("unexpected $NONE [.'$None']", path))
    return res

# object .'$Common'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Common']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Common'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Common'.'#']", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Common'.'#']", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Common']", lpath_0 if path is not None else None))
            return False
    return True

# check $Common (.'$Common')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Common'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Common']", path))
    return res

# check $Array (.'$Array')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Array'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$Array'.0
            res = json_model_17(arr_0_item, arr_0_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Array'.0]", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Array']", path))
    return res



# object .'$Constraint'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Constraint']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Constraint'.'@'
            res = json_model_17(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Constraint'.'@']", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Constraint'.'@']", lpath_1 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Constraint'.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Constraint'.'!']", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Constraint'.'!']", lpath_1 if path is not None else None))
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 2 re props
            # .'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'
            # .'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]", lpath_1 if path is not None else None))
            if not res:
                # .'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                res = isinstance(pval, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]", lpath_1 if path is not None else None))
                if not res:
                    # .'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    res = isinstance(pval, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]", lpath_1 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Constraint'.'/^(<=|>=|<|>|≥|≤)$/'.'|']", lpath_1 if path is not None else None))
            if not res:
                return False
        elif _jm_re_2(prop, path, rep):
            # handle 2 re props
            # .'$Constraint'.'/^(=|!=|≠)$/'
            res = json_model_3(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Val [.'$Constraint'.'/^(=|!=|≠)$/']", lpath_1 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Constraint']", lpath_1 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Constraint']", path))
        return False
    return True

# check $Constraint (.'$Constraint')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Constraint'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Constraint']", path))
    return res

# object .'$Or'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Or']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Or'.'|'
            res = isinstance(pval, list)
            if res:
                for arr_1_idx, arr_1_item in enumerate(pval):
                    arr_1_lpath: Path = ((lpath_2 if path is not None else None) + [ arr_1_idx ]) if (lpath_2 if path is not None else None) is not None else None
                    # .'$Or'.'|'.0
                    res = json_model_17(arr_1_item, arr_1_lpath if (lpath_2 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Or'.'|'.0]", arr_1_lpath if (lpath_2 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Or'.'|']", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Or'.'|']", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Or']", lpath_2 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Or']", path))
        return False
    return True

# check $Or (.'$Or')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Or'
    res = _jm_obj_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Or']", path))
    return res

# object .'$And'
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$And']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$And'.'&'
            res = isinstance(pval, list)
            if res:
                for arr_2_idx, arr_2_item in enumerate(pval):
                    arr_2_lpath: Path = ((lpath_3 if path is not None else None) + [ arr_2_idx ]) if (lpath_3 if path is not None else None) is not None else None
                    # .'$And'.'&'.0
                    res = json_model_17(arr_2_item, arr_2_lpath if (lpath_3 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$And'.'&'.0]", arr_2_lpath if (lpath_3 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$And'.'&']", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$And'.'&']", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$And']", lpath_3 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$And']", path))
        return False
    return True

# check $And (.'$And')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$And'
    res = _jm_obj_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$And']", path))
    return res

# object .'$Xor'
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Xor']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Xor'.'^'
            res = isinstance(pval, list)
            if res:
                for arr_3_idx, arr_3_item in enumerate(pval):
                    arr_3_lpath: Path = ((lpath_4 if path is not None else None) + [ arr_3_idx ]) if (lpath_4 if path is not None else None) is not None else None
                    # .'$Xor'.'^'.0
                    res = json_model_17(arr_3_item, arr_3_lpath if (lpath_4 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Xor'.'^'.0]", arr_3_lpath if (lpath_4 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Xor'.'^']", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Xor'.'^']", lpath_4 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Xor']", lpath_4 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Xor']", path))
        return False
    return True

# check $Xor (.'$Xor')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Xor'
    res = _jm_obj_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Xor']", path))
    return res

# object .'$Add'
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Add']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$Add'.'+'
            res = isinstance(pval, list)
            if res:
                for arr_4_idx, arr_4_item in enumerate(pval):
                    arr_4_lpath: Path = ((lpath_5 if path is not None else None) + [ arr_4_idx ]) if (lpath_5 if path is not None else None) is not None else None
                    # .'$Add'.'+'.0
                    res = json_model_17(arr_4_item, arr_4_lpath if (lpath_5 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Add'.'+'.0]", arr_4_lpath if (lpath_5 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Add'.'+']", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Add'.'+']", lpath_5 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Add']", lpath_5 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$Add']", path))
        return False
    return True

# check $Add (.'$Add')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Add'
    res = _jm_obj_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Add']", path))
    return res


# object .'$Obj'
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Obj']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_3(prop, path, rep):
            # handle 1 re props
            # .'$Obj'.'/^[@|&^+/*]$/'
            res = False
            if not res:
                rep is None or rep.append(("unexpected $NONE [.'$Obj'.'/^[@|&^+/*]$/']", lpath_6 if path is not None else None))
            if not res:
                return False
        else:
            # handle other props
            # .'$Obj'.''
            res = json_model_17(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Obj'.'']", lpath_6 if path is not None else None))
            if not res:
                return False
    return True

# check $Obj (.'$Obj')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Obj'
    res = _jm_obj_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Obj']", path))
    return res

# object .'$Elem'.'|'.5
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Elem'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Elem'.'|'.5.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Elem'.'|'.5.'#']", lpath_7 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Elem'.'|'.5.'#']", lpath_7 if path is not None else None))
                return False
        elif _jm_re_3(prop, path, rep):
            # handle 1 re props
            # .'$Elem'.'|'.5.'/^[@|&^+/*]$/'
            res = False
            if not res:
                rep is None or rep.append(("unexpected $NONE [.'$Elem'.'|'.5.'/^[@|&^+/*]$/']", lpath_7 if path is not None else None))
            if not res:
                return False
        else:
            # handle other props
            # .'$Elem'.'|'.5.''
            res = json_model_17(pval, lpath_7 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Elem'.'|'.5.'']", lpath_7 if path is not None else None))
            if not res:
                return False
    return True

# object .'$Elem'.'|'.4
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Elem'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$Elem'.'|'.4.'+'
            res = isinstance(pval, list)
            if res:
                for arr_5_idx, arr_5_item in enumerate(pval):
                    arr_5_lpath: Path = ((lpath_8 if path is not None else None) + [ arr_5_idx ]) if (lpath_8 if path is not None else None) is not None else None
                    # .'$Elem'.'|'.4.'+'.0
                    res = json_model_17(arr_5_item, arr_5_lpath if (lpath_8 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Elem'.'|'.4.'+'.0]", arr_5_lpath if (lpath_8 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Elem'.'|'.4.'+']", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Elem'.'|'.4.'+']", lpath_8 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Elem'.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Elem'.'|'.4.'#']", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Elem'.'|'.4.'#']", lpath_8 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Elem'.'|'.4]", lpath_8 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$Elem'.'|'.4]", path))
        return False
    return True

# object .'$Elem'.'|'.3
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Elem'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Elem'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_6_idx, arr_6_item in enumerate(pval):
                    arr_6_lpath: Path = ((lpath_9 if path is not None else None) + [ arr_6_idx ]) if (lpath_9 if path is not None else None) is not None else None
                    # .'$Elem'.'|'.3.'^'.0
                    res = json_model_17(arr_6_item, arr_6_lpath if (lpath_9 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Elem'.'|'.3.'^'.0]", arr_6_lpath if (lpath_9 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Elem'.'|'.3.'^']", lpath_9 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Elem'.'|'.3.'^']", lpath_9 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Elem'.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Elem'.'|'.3.'#']", lpath_9 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Elem'.'|'.3.'#']", lpath_9 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Elem'.'|'.3]", lpath_9 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Elem'.'|'.3]", path))
        return False
    return True

# object .'$Elem'.'|'.2
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Elem'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$Elem'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_7_idx, arr_7_item in enumerate(pval):
                    arr_7_lpath: Path = ((lpath_10 if path is not None else None) + [ arr_7_idx ]) if (lpath_10 if path is not None else None) is not None else None
                    # .'$Elem'.'|'.2.'&'.0
                    res = json_model_17(arr_7_item, arr_7_lpath if (lpath_10 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Elem'.'|'.2.'&'.0]", arr_7_lpath if (lpath_10 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Elem'.'|'.2.'&']", lpath_10 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Elem'.'|'.2.'&']", lpath_10 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Elem'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Elem'.'|'.2.'#']", lpath_10 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Elem'.'|'.2.'#']", lpath_10 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Elem'.'|'.2]", lpath_10 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$Elem'.'|'.2]", path))
        return False
    return True

# object .'$Elem'.'|'.1
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Elem'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Elem'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_8_idx, arr_8_item in enumerate(pval):
                    arr_8_lpath: Path = ((lpath_11 if path is not None else None) + [ arr_8_idx ]) if (lpath_11 if path is not None else None) is not None else None
                    # .'$Elem'.'|'.1.'|'.0
                    res = json_model_17(arr_8_item, arr_8_lpath if (lpath_11 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Elem'.'|'.1.'|'.0]", arr_8_lpath if (lpath_11 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Elem'.'|'.1.'|']", lpath_11 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Elem'.'|'.1.'|']", lpath_11 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Elem'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Elem'.'|'.1.'#']", lpath_11 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Elem'.'|'.1.'#']", lpath_11 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Elem'.'|'.1]", lpath_11 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Elem'.'|'.1]", path))
        return False
    return True

# object .'$Elem'.'|'.0
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Elem'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Elem'.'|'.0.'@'
            res = json_model_17(pval, lpath_12 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Elem'.'|'.0.'@']", lpath_12 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Elem'.'|'.0.'@']", lpath_12 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Elem'.'|'.0.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Elem'.'|'.0.'#']", lpath_12 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Elem'.'|'.0.'#']", lpath_12 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Elem'.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Elem'.'|'.0.'!']", lpath_12 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Elem'.'|'.0.'!']", lpath_12 if path is not None else None))
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 2 re props
            # .'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # .'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]", lpath_12 if path is not None else None))
            if not res:
                # .'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                res = isinstance(pval, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]", lpath_12 if path is not None else None))
                if not res:
                    # .'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    res = isinstance(pval, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]", lpath_12 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Elem'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|']", lpath_12 if path is not None else None))
            if not res:
                return False
        elif _jm_re_2(prop, path, rep):
            # handle 2 re props
            # .'$Elem'.'|'.0.'/^(=|!=|≠)$/'
            res = json_model_3(pval, lpath_12 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Val [.'$Elem'.'|'.0.'/^(=|!=|≠)$/']", lpath_12 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Elem'.'|'.0]", lpath_12 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Elem'.'|'.0]", path))
        return False
    return True

# check $Elem (.'$Elem')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Elem'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Elem'.'|']", path))
    if res:
        # .'$Elem'.'|'.0
        res = _jm_obj_12(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Elem'.'|'.0]", path))
        if not res:
            # .'$Elem'.'|'.1
            res = _jm_obj_11(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Elem'.'|'.1]", path))
            if not res:
                # .'$Elem'.'|'.2
                res = _jm_obj_10(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Elem'.'|'.2]", path))
                if not res:
                    # .'$Elem'.'|'.3
                    res = _jm_obj_9(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Elem'.'|'.3]", path))
                    if not res:
                        # .'$Elem'.'|'.4
                        res = _jm_obj_8(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$Elem'.'|'.4]", path))
                        if not res:
                            # .'$Elem'.'|'.5
                            res = _jm_obj_7(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$Elem'.'|'.5]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Elem'.'|']", path))
    return res

# object .'$Trafo'.'|'.2.'*'.'|'.1
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Trafo'.'|'.2.'*'.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Trafo'.'|'.2.'*'.'|'.1.''
        res = json_model_17(pval, lpath_14 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Model [.'$Trafo'.'|'.2.'*'.'|'.1.'']", lpath_14 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Trafo'.'|'.2
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Trafo'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        if prop == "*":
            # handle must * property
            must_count += 1
            # .'$Trafo'.'|'.2.'*'
            # .'$Trafo'.'|'.2.'*'.'|'.0
            res = isinstance(pval, list)
            if res:
                # accept any array
                pass
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Trafo'.'|'.2.'*'.'|'.0]", lpath_13 if path is not None else None))
            if not res:
                # .'$Trafo'.'|'.2.'*'.'|'.1
                res = _jm_obj_14(pval, lpath_13 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Trafo'.'|'.2.'*'.'|'.1]", lpath_13 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Trafo'.'|'.2.'*'.'|']", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Trafo'.'|'.2.'*']", lpath_13 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Trafo'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Trafo'.'|'.2.'#']", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Trafo'.'|'.2.'#']", lpath_13 if path is not None else None))
                return False
        elif prop == "/":
            # handle may / property
            # .'$Trafo'.'|'.2.'/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Trafo'.'|'.2.'/']", lpath_13 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Trafo'.'|'.2.'/']", lpath_13 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Trafo'.'|'.2]", lpath_13 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "*" in val:
                rep is None or rep.append(("missing mandatory prop <*> [.'$Trafo'.'|'.2]", path))
        return False
    return True

# object .'$Trafo'.'|'.1.'*'.'|'.1
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Trafo'.'|'.1.'*'.'|'.1]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Trafo'.'|'.1.'*'.'|'.1.''
        res = json_model_17(pval, lpath_16 if path is not None else None, rep)
        if not res:
            rep is None or rep.append(("unexpected $Model [.'$Trafo'.'|'.1.'*'.'|'.1.'']", lpath_16 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Trafo'.'|'.1
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Trafo'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        if prop == "/":
            # handle must / property
            must_count += 1
            # .'$Trafo'.'|'.1.'/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Trafo'.'|'.1.'/']", lpath_15 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Trafo'.'|'.1.'/']", lpath_15 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Trafo'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Trafo'.'|'.1.'#']", lpath_15 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Trafo'.'|'.1.'#']", lpath_15 if path is not None else None))
                return False
        elif prop == "*":
            # handle may * property
            # .'$Trafo'.'|'.1.'*'
            # .'$Trafo'.'|'.1.'*'.'|'.0
            res = isinstance(pval, list)
            if res:
                # accept any array
                pass
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Trafo'.'|'.1.'*'.'|'.0]", lpath_15 if path is not None else None))
            if not res:
                # .'$Trafo'.'|'.1.'*'.'|'.1
                res = _jm_obj_16(pval, lpath_15 if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Trafo'.'|'.1.'*'.'|'.1]", lpath_15 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Trafo'.'|'.1.'*'.'|']", lpath_15 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Trafo'.'|'.1.'*']", lpath_15 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Trafo'.'|'.1]", lpath_15 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "/" in val:
                rep is None or rep.append(("missing mandatory prop </> [.'$Trafo'.'|'.1]", path))
        return False
    return True

# check $Trafo (.'$Trafo')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Trafo'
    # .'$Trafo'.'|'.0
    res = json_model_17(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Model [.'$Trafo'.'|'.0]", path))
    if not res:
        # .'$Trafo'.'|'.1
        res = _jm_obj_15(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Trafo'.'|'.1]", path))
        if not res:
            # .'$Trafo'.'|'.2
            res = _jm_obj_13(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Trafo'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Trafo'.'|']", path))
    return res

# check $Scalar (.'$Scalar')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Scalar'
    # .'$Scalar'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$Scalar'.'|'.0]", path))
    if not res:
        # .'$Scalar'.'|'.1
        res = isinstance(val, bool) and val == True
        if not res:
            rep is None or rep.append(("unexpected =true [.'$Scalar'.'|'.1]", path))
        if not res:
            # .'$Scalar'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool) and val == 0
            if not res:
                rep is None or rep.append(("unexpected =0 [.'$Scalar'.'|'.2]", path))
            if not res:
                # .'$Scalar'.'|'.3
                res = isinstance(val, int) and not isinstance(val, bool) and val == 1
                if not res:
                    rep is None or rep.append(("unexpected =1 [.'$Scalar'.'|'.3]", path))
                if not res:
                    # .'$Scalar'.'|'.4
                    res = isinstance(val, int) and not isinstance(val, bool) and val == -1
                    if not res:
                        rep is None or rep.append(("unexpected =-1 [.'$Scalar'.'|'.4]", path))
                    if not res:
                        # .'$Scalar'.'|'.5
                        res = isinstance(val, float) and val == 0.0
                        if not res:
                            rep is None or rep.append(("unexpected =0.0 [.'$Scalar'.'|'.5]", path))
                        if not res:
                            # .'$Scalar'.'|'.6
                            res = isinstance(val, float) and val == 1.0
                            if not res:
                                rep is None or rep.append(("unexpected =1.0 [.'$Scalar'.'|'.6]", path))
                            if not res:
                                # .'$Scalar'.'|'.7
                                res = isinstance(val, float) and val == -1.0
                                if not res:
                                    rep is None or rep.append(("unexpected =-1.0 [.'$Scalar'.'|'.7]", path))
                                if not res:
                                    # .'$Scalar'.'|'.8
                                    res = isinstance(val, str)
                                    if not res:
                                        rep is None or rep.append(("unexpected string [.'$Scalar'.'|'.8]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Scalar'.'|']", path))
    return res

# check $Model (.'$Model')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Model'
    # .'$Model'.'|'.0
    res = json_model_16(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Scalar [.'$Model'.'|'.0]", path))
    if not res:
        # .'$Model'.'|'.1
        res = json_model_7(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Array [.'$Model'.'|'.1]", path))
        if not res:
            # .'$Model'.'|'.2
            res = json_model_14(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Elem [.'$Model'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Model'.'|']", path))
    return res


# object .'$Defs'
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        if prop == "":
            # handle may  property
            # .'$Defs'.''
            res = json_model_2(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Defs'.'']", lpath_17 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Defs'.'']", lpath_17 if path is not None else None))
                return False
        elif _jm_re_4(prop, path, rep):
            # handle 1 re props
            # .'$Defs'.'/.+/'
            res = json_model_17(pval, lpath_17 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Defs'.'/.+/']", lpath_17 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Defs']", lpath_17 if path is not None else None))
            return False
    return True

# check $Defs (.'$Defs')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Defs'
    res = _jm_obj_17(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Defs']", path))
    return res



# object .'$Rename'
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Rename']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_5(prop, path, rep):
            # handle 1 re props
            # .'$Rename'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Rename'.'/^\\\\..+$/']", lpath_18 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Rename']", lpath_18 if path is not None else None))
            return False
    return True

# check $Rename (.'$Rename')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Rename'
    res = _jm_obj_18(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Rename']", path))
    return res


# object .'$Rewrite'
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Rewrite']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_7(prop, path, rep):
            # handle 1 re props
            # .'$Rewrite'.'/^\\$.*$/'
            res = json_model_15(pval, lpath_19 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [.'$Rewrite'.'/^\\\\$.*$/']", lpath_19 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Rewrite']", lpath_19 if path is not None else None))
            return False
    return True

# check $Rewrite (.'$Rewrite')
def json_model_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Rewrite'
    res = _jm_obj_19(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Rewrite']", path))
    return res

# object .'$RootOnly'.'$'
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootOnly'.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootOnly'.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootOnly'.'$'.'#']", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'$'.'#']", lpath_21 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$RootOnly'.'$'.''
            res = json_model_2(pval, lpath_21 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootOnly'.'$'.'']", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'$'.'']", lpath_21 if path is not None else None))
                return False
        elif _jm_re_4(prop, path, rep):
            # handle 1 re props
            # .'$RootOnly'.'$'.'/.+/'
            res = json_model_17(pval, lpath_21 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$RootOnly'.'$'.'/.+/']", lpath_21 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootOnly'.'$']", lpath_21 if path is not None else None))
            return False
    return True


# object .'$RootOnly'.'%'
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootOnly'.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootOnly'.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootOnly'.'%'.'#']", lpath_22 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'%'.'#']", lpath_22 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$RootOnly'.'%'.'<'
            res = isinstance(pval, list)
            if res:
                for arr_9_idx, arr_9_item in enumerate(pval):
                    arr_9_lpath: Path = ((lpath_22 if path is not None else None) + [ arr_9_idx ]) if (lpath_22 if path is not None else None) is not None else None
                    # .'$RootOnly'.'%'.'<'.0
                    # "/^\\$/"
                    res = isinstance(arr_9_item, str) and _jm_re_8(arr_9_item, arr_9_lpath if (lpath_22 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected /^\\$/ [.'$RootOnly'.'%'.'<'.0]", arr_9_lpath if (lpath_22 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$RootOnly'.'%'.'<']", lpath_22 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'%'.'<']", lpath_22 if path is not None else None))
                return False
        elif _jm_re_5(prop, path, rep):
            # handle 2 re props
            # .'$RootOnly'.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval, lpath_22 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$RootOnly'.'%'.'/^\\\\..+$/']", lpath_22 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 2 re props
            # .'$RootOnly'.'%'.'/^\\$.*$/'
            res = json_model_15(pval, lpath_22 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [.'$RootOnly'.'%'.'/^\\\\$.*$/']", lpath_22 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootOnly'.'%']", lpath_22 if path is not None else None))
            return False
    return True

# object .'$RootOnly'
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootOnly']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if prop == "~":
            # handle may ~ property
            # .'$RootOnly'.'~'
            res = json_model_2(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootOnly'.'~']", lpath_20 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'~']", lpath_20 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$RootOnly'.'$'
            res = _jm_obj_21(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootOnly'.'$']", lpath_20 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'$']", lpath_20 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$RootOnly'.'%'
            res = _jm_obj_22(pval, lpath_20 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootOnly'.'%']", lpath_20 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'%']", lpath_20 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootOnly']", lpath_20 if path is not None else None))
            return False
    return True

# check $RootOnly (.'$RootOnly')
def json_model_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$RootOnly'
    res = _jm_obj_20(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$RootOnly']", path))
    return res

# object .'$Root'.'|'.5.'$'
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.5.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.5.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.5.'$'.'#']", lpath_24 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'$'.'#']", lpath_24 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.5.'$'.''
            res = json_model_2(pval, lpath_24 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.5.'$'.'']", lpath_24 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'$'.'']", lpath_24 if path is not None else None))
                return False
        elif _jm_re_4(prop, path, rep):
            # handle 1 re props
            # .'$Root'.'|'.5.'$'.'/.+/'
            res = json_model_17(pval, lpath_24 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.5.'$'.'/.+/']", lpath_24 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.5.'$']", lpath_24 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.5.'%'
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.5.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.5.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.5.'%'.'#']", lpath_25 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'%'.'#']", lpath_25 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.5.'%'.'<'
            res = isinstance(pval, list)
            if res:
                for arr_10_idx, arr_10_item in enumerate(pval):
                    arr_10_lpath: Path = ((lpath_25 if path is not None else None) + [ arr_10_idx ]) if (lpath_25 if path is not None else None) is not None else None
                    # .'$Root'.'|'.5.'%'.'<'.0
                    # "/^\\$/"
                    res = isinstance(arr_10_item, str) and _jm_re_8(arr_10_item, arr_10_lpath if (lpath_25 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected /^\\$/ [.'$Root'.'|'.5.'%'.'<'.0]", arr_10_lpath if (lpath_25 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.5.'%'.'<']", lpath_25 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'%'.'<']", lpath_25 if path is not None else None))
                return False
        elif _jm_re_5(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.5.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval, lpath_25 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.5.'%'.'/^\\\\..+$/']", lpath_25 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.5.'%'.'/^\\$.*$/'
            res = json_model_15(pval, lpath_25 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [.'$Root'.'|'.5.'%'.'/^\\\\$.*$/']", lpath_25 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.5.'%']", lpath_25 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.5
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        if prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.5.'~'
            res = json_model_2(pval, lpath_23 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.5.'~']", lpath_23 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'~']", lpath_23 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.5.'$'
            res = _jm_obj_24(pval, lpath_23 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.5.'$']", lpath_23 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'$']", lpath_23 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.5.'%'
            res = _jm_obj_25(pval, lpath_23 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.5.'%']", lpath_23 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'%']", lpath_23 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.5.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.5.'#']", lpath_23 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'#']", lpath_23 if path is not None else None))
                return False
        elif _jm_re_3(prop, path, rep):
            # handle 1 re props
            # .'$Root'.'|'.5.'/^[@|&^+/*]$/'
            res = False
            if not res:
                rep is None or rep.append(("unexpected $NONE [.'$Root'.'|'.5.'/^[@|&^+/*]$/']", lpath_23 if path is not None else None))
            if not res:
                return False
        else:
            # handle other props
            # .'$Root'.'|'.5.''
            res = json_model_17(pval, lpath_23 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.5.'']", lpath_23 if path is not None else None))
            if not res:
                return False
    return True

# object .'$Root'.'|'.4.'$'
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.4.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.4.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.4.'$'.'#']", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'$'.'#']", lpath_27 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.4.'$'.''
            res = json_model_2(pval, lpath_27 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.4.'$'.'']", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'$'.'']", lpath_27 if path is not None else None))
                return False
        elif _jm_re_4(prop, path, rep):
            # handle 1 re props
            # .'$Root'.'|'.4.'$'.'/.+/'
            res = json_model_17(pval, lpath_27 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.4.'$'.'/.+/']", lpath_27 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.4.'$']", lpath_27 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.4.'%'
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.4.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.4.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.4.'%'.'#']", lpath_28 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'%'.'#']", lpath_28 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.4.'%'.'<'
            res = isinstance(pval, list)
            if res:
                for arr_12_idx, arr_12_item in enumerate(pval):
                    arr_12_lpath: Path = ((lpath_28 if path is not None else None) + [ arr_12_idx ]) if (lpath_28 if path is not None else None) is not None else None
                    # .'$Root'.'|'.4.'%'.'<'.0
                    # "/^\\$/"
                    res = isinstance(arr_12_item, str) and _jm_re_8(arr_12_item, arr_12_lpath if (lpath_28 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected /^\\$/ [.'$Root'.'|'.4.'%'.'<'.0]", arr_12_lpath if (lpath_28 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.4.'%'.'<']", lpath_28 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'%'.'<']", lpath_28 if path is not None else None))
                return False
        elif _jm_re_5(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.4.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval, lpath_28 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.4.'%'.'/^\\\\..+$/']", lpath_28 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.4.'%'.'/^\\$.*$/'
            res = json_model_15(pval, lpath_28 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [.'$Root'.'|'.4.'%'.'/^\\\\$.*$/']", lpath_28 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.4.'%']", lpath_28 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.4
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$Root'.'|'.4.'+'
            res = isinstance(pval, list)
            if res:
                for arr_11_idx, arr_11_item in enumerate(pval):
                    arr_11_lpath: Path = ((lpath_26 if path is not None else None) + [ arr_11_idx ]) if (lpath_26 if path is not None else None) is not None else None
                    # .'$Root'.'|'.4.'+'.0
                    res = json_model_17(arr_11_item, arr_11_lpath if (lpath_26 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.4.'+'.0]", arr_11_lpath if (lpath_26 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.4.'+']", lpath_26 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.4.'+']", lpath_26 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.4.'~'
            res = json_model_2(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.4.'~']", lpath_26 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'~']", lpath_26 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.4.'$'
            res = _jm_obj_27(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.4.'$']", lpath_26 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'$']", lpath_26 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.4.'%'
            res = _jm_obj_28(pval, lpath_26 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.4.'%']", lpath_26 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'%']", lpath_26 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.4.'#']", lpath_26 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'#']", lpath_26 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.4]", lpath_26 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$Root'.'|'.4]", path))
        return False
    return True

# object .'$Root'.'|'.3.'$'
def _jm_obj_30(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.3.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.3.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.3.'$'.'#']", lpath_30 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'$'.'#']", lpath_30 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.3.'$'.''
            res = json_model_2(pval, lpath_30 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.3.'$'.'']", lpath_30 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'$'.'']", lpath_30 if path is not None else None))
                return False
        elif _jm_re_4(prop, path, rep):
            # handle 1 re props
            # .'$Root'.'|'.3.'$'.'/.+/'
            res = json_model_17(pval, lpath_30 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.3.'$'.'/.+/']", lpath_30 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.3.'$']", lpath_30 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.3.'%'
def _jm_obj_31(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.3.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.3.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.3.'%'.'#']", lpath_31 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'%'.'#']", lpath_31 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.3.'%'.'<'
            res = isinstance(pval, list)
            if res:
                for arr_14_idx, arr_14_item in enumerate(pval):
                    arr_14_lpath: Path = ((lpath_31 if path is not None else None) + [ arr_14_idx ]) if (lpath_31 if path is not None else None) is not None else None
                    # .'$Root'.'|'.3.'%'.'<'.0
                    # "/^\\$/"
                    res = isinstance(arr_14_item, str) and _jm_re_8(arr_14_item, arr_14_lpath if (lpath_31 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected /^\\$/ [.'$Root'.'|'.3.'%'.'<'.0]", arr_14_lpath if (lpath_31 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.3.'%'.'<']", lpath_31 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'%'.'<']", lpath_31 if path is not None else None))
                return False
        elif _jm_re_5(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.3.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval, lpath_31 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.3.'%'.'/^\\\\..+$/']", lpath_31 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.3.'%'.'/^\\$.*$/'
            res = json_model_15(pval, lpath_31 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [.'$Root'.'|'.3.'%'.'/^\\\\$.*$/']", lpath_31 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.3.'%']", lpath_31 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.3
def _jm_obj_29(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Root'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_13_idx, arr_13_item in enumerate(pval):
                    arr_13_lpath: Path = ((lpath_29 if path is not None else None) + [ arr_13_idx ]) if (lpath_29 if path is not None else None) is not None else None
                    # .'$Root'.'|'.3.'^'.0
                    res = json_model_17(arr_13_item, arr_13_lpath if (lpath_29 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.3.'^'.0]", arr_13_lpath if (lpath_29 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.3.'^']", lpath_29 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.3.'^']", lpath_29 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.3.'~'
            res = json_model_2(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.3.'~']", lpath_29 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'~']", lpath_29 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.3.'$'
            res = _jm_obj_30(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.3.'$']", lpath_29 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'$']", lpath_29 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.3.'%'
            res = _jm_obj_31(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.3.'%']", lpath_29 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'%']", lpath_29 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.3.'#']", lpath_29 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'#']", lpath_29 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.3]", lpath_29 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Root'.'|'.3]", path))
        return False
    return True

# object .'$Root'.'|'.2.'$'
def _jm_obj_33(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.2.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.2.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.2.'$'.'#']", lpath_33 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'$'.'#']", lpath_33 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.2.'$'.''
            res = json_model_2(pval, lpath_33 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.2.'$'.'']", lpath_33 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'$'.'']", lpath_33 if path is not None else None))
                return False
        elif _jm_re_4(prop, path, rep):
            # handle 1 re props
            # .'$Root'.'|'.2.'$'.'/.+/'
            res = json_model_17(pval, lpath_33 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.2.'$'.'/.+/']", lpath_33 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.2.'$']", lpath_33 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.2.'%'
def _jm_obj_34(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.2.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.2.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.2.'%'.'#']", lpath_34 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'%'.'#']", lpath_34 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.2.'%'.'<'
            res = isinstance(pval, list)
            if res:
                for arr_16_idx, arr_16_item in enumerate(pval):
                    arr_16_lpath: Path = ((lpath_34 if path is not None else None) + [ arr_16_idx ]) if (lpath_34 if path is not None else None) is not None else None
                    # .'$Root'.'|'.2.'%'.'<'.0
                    # "/^\\$/"
                    res = isinstance(arr_16_item, str) and _jm_re_8(arr_16_item, arr_16_lpath if (lpath_34 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected /^\\$/ [.'$Root'.'|'.2.'%'.'<'.0]", arr_16_lpath if (lpath_34 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.2.'%'.'<']", lpath_34 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'%'.'<']", lpath_34 if path is not None else None))
                return False
        elif _jm_re_5(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.2.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval, lpath_34 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.2.'%'.'/^\\\\..+$/']", lpath_34 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.2.'%'.'/^\\$.*$/'
            res = json_model_15(pval, lpath_34 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [.'$Root'.'|'.2.'%'.'/^\\\\$.*$/']", lpath_34 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.2.'%']", lpath_34 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.2
def _jm_obj_32(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$Root'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_15_idx, arr_15_item in enumerate(pval):
                    arr_15_lpath: Path = ((lpath_32 if path is not None else None) + [ arr_15_idx ]) if (lpath_32 if path is not None else None) is not None else None
                    # .'$Root'.'|'.2.'&'.0
                    res = json_model_17(arr_15_item, arr_15_lpath if (lpath_32 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.2.'&'.0]", arr_15_lpath if (lpath_32 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.2.'&']", lpath_32 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.2.'&']", lpath_32 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.2.'~'
            res = json_model_2(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.2.'~']", lpath_32 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'~']", lpath_32 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.2.'$'
            res = _jm_obj_33(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.2.'$']", lpath_32 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'$']", lpath_32 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.2.'%'
            res = _jm_obj_34(pval, lpath_32 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.2.'%']", lpath_32 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'%']", lpath_32 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.2.'#']", lpath_32 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'#']", lpath_32 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.2]", lpath_32 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$Root'.'|'.2]", path))
        return False
    return True

# object .'$Root'.'|'.1.'$'
def _jm_obj_36(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.1.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_36: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.1.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.1.'$'.'#']", lpath_36 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'$'.'#']", lpath_36 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.1.'$'.''
            res = json_model_2(pval, lpath_36 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.1.'$'.'']", lpath_36 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'$'.'']", lpath_36 if path is not None else None))
                return False
        elif _jm_re_4(prop, path, rep):
            # handle 1 re props
            # .'$Root'.'|'.1.'$'.'/.+/'
            res = json_model_17(pval, lpath_36 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.1.'$'.'/.+/']", lpath_36 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.1.'$']", lpath_36 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.1.'%'
def _jm_obj_37(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.1.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_37: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.1.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.1.'%'.'#']", lpath_37 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'%'.'#']", lpath_37 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.1.'%'.'<'
            res = isinstance(pval, list)
            if res:
                for arr_18_idx, arr_18_item in enumerate(pval):
                    arr_18_lpath: Path = ((lpath_37 if path is not None else None) + [ arr_18_idx ]) if (lpath_37 if path is not None else None) is not None else None
                    # .'$Root'.'|'.1.'%'.'<'.0
                    # "/^\\$/"
                    res = isinstance(arr_18_item, str) and _jm_re_8(arr_18_item, arr_18_lpath if (lpath_37 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected /^\\$/ [.'$Root'.'|'.1.'%'.'<'.0]", arr_18_lpath if (lpath_37 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.1.'%'.'<']", lpath_37 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'%'.'<']", lpath_37 if path is not None else None))
                return False
        elif _jm_re_5(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.1.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval, lpath_37 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.1.'%'.'/^\\\\..+$/']", lpath_37 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.1.'%'.'/^\\$.*$/'
            res = json_model_15(pval, lpath_37 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [.'$Root'.'|'.1.'%'.'/^\\\\$.*$/']", lpath_37 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.1.'%']", lpath_37 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.1
def _jm_obj_35(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Root'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_17_idx, arr_17_item in enumerate(pval):
                    arr_17_lpath: Path = ((lpath_35 if path is not None else None) + [ arr_17_idx ]) if (lpath_35 if path is not None else None) is not None else None
                    # .'$Root'.'|'.1.'|'.0
                    res = json_model_17(arr_17_item, arr_17_lpath if (lpath_35 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.1.'|'.0]", arr_17_lpath if (lpath_35 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.1.'|']", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.1.'|']", lpath_35 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.1.'~'
            res = json_model_2(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.1.'~']", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'~']", lpath_35 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.1.'$'
            res = _jm_obj_36(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.1.'$']", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'$']", lpath_35 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.1.'%'
            res = _jm_obj_37(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.1.'%']", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'%']", lpath_35 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.1.'#']", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'#']", lpath_35 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.1]", lpath_35 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Root'.'|'.1]", path))
        return False
    return True

# object .'$Root'.'|'.0.'$'
def _jm_obj_39(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.0.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_39: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.0.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.0.'$'.'#']", lpath_39 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'$'.'#']", lpath_39 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.0.'$'.''
            res = json_model_2(pval, lpath_39 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.0.'$'.'']", lpath_39 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'$'.'']", lpath_39 if path is not None else None))
                return False
        elif _jm_re_4(prop, path, rep):
            # handle 1 re props
            # .'$Root'.'|'.0.'$'.'/.+/'
            res = json_model_17(pval, lpath_39 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.0.'$'.'/.+/']", lpath_39 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.0.'$']", lpath_39 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.0.'%'
def _jm_obj_40(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.0.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_40: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.0.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.0.'%'.'#']", lpath_40 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'%'.'#']", lpath_40 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.0.'%'.'<'
            res = isinstance(pval, list)
            if res:
                for arr_19_idx, arr_19_item in enumerate(pval):
                    arr_19_lpath: Path = ((lpath_40 if path is not None else None) + [ arr_19_idx ]) if (lpath_40 if path is not None else None) is not None else None
                    # .'$Root'.'|'.0.'%'.'<'.0
                    # "/^\\$/"
                    res = isinstance(arr_19_item, str) and _jm_re_8(arr_19_item, arr_19_lpath if (lpath_40 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected /^\\$/ [.'$Root'.'|'.0.'%'.'<'.0]", arr_19_lpath if (lpath_40 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.0.'%'.'<']", lpath_40 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'%'.'<']", lpath_40 if path is not None else None))
                return False
        elif _jm_re_5(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.0.'%'.'/^\\..+$/'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_6(pval, lpath_40 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.0.'%'.'/^\\\\..+$/']", lpath_40 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.0.'%'.'/^\\$.*$/'
            res = json_model_15(pval, lpath_40 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Trafo [.'$Root'.'|'.0.'%'.'/^\\\\$.*$/']", lpath_40 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.0.'%']", lpath_40 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.0
def _jm_obj_38(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_38: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Root'.'|'.0.'@'
            res = json_model_17(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.0.'@']", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.0.'@']", lpath_38 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.0.'~'
            res = json_model_2(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.0.'~']", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'~']", lpath_38 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.0.'$'
            res = _jm_obj_39(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.0.'$']", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'$']", lpath_38 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.0.'%'
            res = _jm_obj_40(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.0.'%']", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'%']", lpath_38 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.0.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.0.'#']", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'#']", lpath_38 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Root'.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Root'.'|'.0.'!']", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'!']", lpath_38 if path is not None else None))
                return False
        elif _jm_re_1(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'
            # .'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0
            res = isinstance(pval, int) and not isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.0]", lpath_38 if path is not None else None))
            if not res:
                # .'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1
                res = isinstance(pval, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.1]", lpath_38 if path is not None else None))
                if not res:
                    # .'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2
                    res = isinstance(pval, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|'.2]", lpath_38 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Root'.'|'.0.'/^(<=|>=|<|>|≥|≤)$/'.'|']", lpath_38 if path is not None else None))
            if not res:
                return False
        elif _jm_re_2(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.0.'/^(=|!=|≠)$/'
            res = json_model_3(pval, lpath_38 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Val [.'$Root'.'|'.0.'/^(=|!=|≠)$/']", lpath_38 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.0]", lpath_38 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Root'.'|'.0]", path))
        return False
    return True

# check $Root (.'$Root')
def json_model_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Root'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Root'.'|']", path))
    if res:
        # .'$Root'.'|'.0
        res = _jm_obj_38(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Root'.'|'.0]", path))
        if not res:
            # .'$Root'.'|'.1
            res = _jm_obj_35(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.1]", path))
            if not res:
                # .'$Root'.'|'.2
                res = _jm_obj_32(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Root'.'|'.2]", path))
                if not res:
                    # .'$Root'.'|'.3
                    res = _jm_obj_29(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Root'.'|'.3]", path))
                    if not res:
                        # .'$Root'.'|'.4
                        res = _jm_obj_26(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$Root'.'|'.4]", path))
                        if not res:
                            # .'$Root'.'|'.5
                            res = _jm_obj_23(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$Root'.'|'.5]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Root'.'|']", path))
    return res

# check $RootModel (.'$RootModel')
def json_model_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$RootModel'
    # .'$RootModel'.'|'.0
    res = json_model_16(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Scalar [.'$RootModel'.'|'.0]", path))
    if not res:
        # .'$RootModel'.'|'.1
        res = json_model_7(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Array [.'$RootModel'.'|'.1]", path))
        if not res:
            # .'$RootModel'.'|'.2
            res = json_model_22(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $Root [.'$RootModel'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$RootModel'.'|']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_23(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $RootModel [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile("^((file|https?)://.+|\\./.*|\\.\\./.*)$")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = re.compile("^(<=|>=|<|>|≥|≤)$")
        _jm_re_1 = lambda s, p, r: _jm_re_1_reco.search(s) is not None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = re.compile("^(=|!=|≠)$")
        _jm_re_2 = lambda s, p, r: _jm_re_2_reco.search(s) is not None
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = re.compile("^[@|&^+/*]$")
        _jm_re_3 = lambda s, p, r: _jm_re_3_reco.search(s) is not None
        global _jm_re_4_reco, _jm_re_4
        _jm_re_4_reco = re.compile(".+")
        _jm_re_4 = lambda s, p, r: _jm_re_4_reco.search(s) is not None
        global _jm_re_5_reco, _jm_re_5
        _jm_re_5_reco = re.compile("^\\..+$")
        _jm_re_5 = lambda s, p, r: _jm_re_5_reco.search(s) is not None
        global _jm_re_6_reco, _jm_re_6
        _jm_re_6_reco = re.compile("^([#|&^+/*@~=$%]|[<>!]=?)$")
        _jm_re_6 = lambda s, p, r: _jm_re_6_reco.search(s) is not None
        global _jm_re_7_reco, _jm_re_7
        _jm_re_7_reco = re.compile("^\\$.*$")
        _jm_re_7 = lambda s, p, r: _jm_re_7_reco.search(s) is not None
        global _jm_re_8_reco, _jm_re_8
        _jm_re_8_reco = re.compile("^\\$")
        _jm_re_8 = lambda s, p, r: _jm_re_8_reco.search(s) is not None
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "Url": json_model_2,
            "Val": json_model_3,
            "Any": json_model_4,
            "None": json_model_5,
            "Common": json_model_6,
            "Array": json_model_7,
            "Constraint": json_model_8,
            "Or": json_model_9,
            "And": json_model_10,
            "Xor": json_model_11,
            "Add": json_model_12,
            "Obj": json_model_13,
            "Elem": json_model_14,
            "Trafo": json_model_15,
            "Scalar": json_model_16,
            "Model": json_model_17,
            "Defs": json_model_18,
            "Rename": json_model_19,
            "Rewrite": json_model_20,
            "RootOnly": json_model_21,
            "Root": json_model_22,
            "RootModel": json_model_23,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = None
        _jm_re_1 = None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = None
        _jm_re_2 = None
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = None
        _jm_re_3 = None
        global _jm_re_4_reco, _jm_re_4
        _jm_re_4_reco = None
        _jm_re_4 = None
        global _jm_re_5_reco, _jm_re_5
        _jm_re_5_reco = None
        _jm_re_5 = None
        global _jm_re_6_reco, _jm_re_6
        _jm_re_6_reco = None
        _jm_re_6 = None
        global _jm_re_7_reco, _jm_re_7
        _jm_re_7_reco = None
        _jm_re_7 = None
        global _jm_re_8_reco, _jm_re_8
        _jm_re_8_reco = None
        _jm_re_8 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
