#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_re_0_reco: object
_jm_re_0: RegexFun
_jm_cst_0: set[str]
_jm_re_1_reco: object
_jm_re_1: RegexFun
_jm_re_2_reco: object
_jm_re_2: RegexFun
_jm_re_3_reco: object
_jm_re_3: RegexFun
_jm_re_4_reco: object
_jm_re_4: RegexFun
_jm_re_5_reco: object
_jm_re_5: RegexFun
_jm_xre_0_re_reco: object
_jm_xre_0_re: RegexFun
_jm_xre_0: RegexFun
_jm_xre_1_re_reco: object
_jm_xre_1_re: RegexFun
_jm_xre_1: RegexFun
_jm_re_6_reco: object
_jm_re_6: RegexFun
_jm_cst_1: set[str]
_jm_re_7_reco: object
_jm_re_7: RegexFun
_jm_re_8_reco: object
_jm_re_8: RegexFun
_jm_cst_2: set[str]
_jm_re_9_reco: object
_jm_re_9: RegexFun
_jm_cst_3: set[str]
_jm_cst_4: set[str]
_jm_cst_5: set[str]
_jm_re_10_reco: object
_jm_re_10: RegexFun
_jm_re_11_reco: object
_jm_re_11: RegexFun
_jm_cst_6: set[str]
check_model_map: PropMap

# check $Url (.'$Url')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Url'
    # "/^((file|https?)://.+|\\./.*|\\.\\./.*)$/"
    res = isinstance(val, str) and _jm_re_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^((file|https?)://.+|\\./.*|\\.\\./.*)$/ [.'$Url']", path))
    return res


# check $PreDef (.'$PreDef')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$PreDef'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$PreDef'.'|']", path))
    return res



# check $Identifier (.'$Identifier')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Identifier'
    res = isinstance(val, str)
    if res:
        # .'$Identifier'.'&'.0
        # "/^\\w+$/"
        res = _jm_re_2(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected /^\\w+$/ [.'$Identifier'.'&'.0]", path))
        if res:
            # .'$Identifier'.'&'.1
            # "/[^A-Z0-9]/"
            res = _jm_re_1(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected /[^A-Z0-9]/ [.'$Identifier'.'&'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not all model match [.'$Identifier'.'&']", path))
    return res

# check $ArrayComment (.'$ArrayComment')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ArrayComment'
    # "/^#/"
    res = isinstance(val, str) and val.startswith("#")
    if not res:
        rep is None or rep.append(("unexpected /^#/ [.'$ArrayComment']", path))
    return res

# object .'$ObjectComment'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$ObjectComment']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$ObjectComment'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$ObjectComment'.'#']", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$ObjectComment'.'#']", lpath_0 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$ObjectComment'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$ObjectComment'.'/^#/']", lpath_0 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$ObjectComment']", lpath_0 if path is not None else None))
            return False
    return True

# check $ObjectComment (.'$ObjectComment')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ObjectComment'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$ObjectComment']", path))
    return res


# check $Ref (.'$Ref')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Ref'
    # "/^\\$./"
    res = isinstance(val, str) and _jm_re_3(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^\\$./ [.'$Ref']", path))
    return res


# check $ValConst (.'$ValConst')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ValConst'
    # "/^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$/"
    res = isinstance(val, str) and _jm_re_4(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$/ [.'$ValConst']", path))
    return res


# check $StrConst (.'$StrConst')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$StrConst'
    # "/^[A-Za-z0-9_]/"
    res = isinstance(val, str) and _jm_re_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[A-Za-z0-9_]/ [.'$StrConst']", path))
    return res


def _jm_xre_0(val: str, path: Path, rep: Report) -> bool:
    extract: str
    match = _jm_xre_0_re_reco.search(val)
    if not match:
        return False
    extract: str = match.groupdict()["s1"]
    if not is_valid_regex(extract, path, rep):
        return False
    return True


def _jm_xre_1(val: str, path: Path, rep: Report) -> bool:
    extract: str
    match = _jm_xre_1_re_reco.search(val)
    if not match:
        return False
    extract: str = match.groupdict()["s1"]
    if not is_valid_exreg(extract, path, rep):
        return False
    return True

# check $Regex (.'$Regex')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Regex'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Regex'.'|']", path))
    if res:
        # .'$Regex'.'|'.0
        # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
        res = _jm_xre_1(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected /^/($EXREG)/[a-z]*X[a-z]*$/X [.'$Regex'.'|'.0]", path))
        if not res:
            # .'$Regex'.'|'.1
            # "/^/($REGEX)/[a-z]*$/X"
            res = _jm_xre_0(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected /^/($REGEX)/[a-z]*$/X [.'$Regex'.'|'.1]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Regex'.'|']", path))
    return res


# check $Name (.'$Name')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Name'
    # "/^\\..+$/"
    res = isinstance(val, str) and _jm_re_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^\\..+$/ [.'$Name']", path))
    return res

# check $CmpValue (.'$CmpValue')
def json_model_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$CmpValue'
    # .'$CmpValue'.'|'.0
    res = isinstance(val, int) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1 strict int [.'$CmpValue'.'|'.0]", path))
    if not res:
        # .'$CmpValue'.'|'.1
        res = isinstance(val, float)
        if not res:
            rep is None or rep.append(("not a -1.0 strict float [.'$CmpValue'.'|'.1]", path))
        if not res:
            # .'$CmpValue'.'|'.2
            res = isinstance(val, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$CmpValue'.'|'.2]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$CmpValue'.'|']", path))
    return res

# check $EqValue (.'$EqValue')
def json_model_13(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$EqValue'
    # .'$EqValue'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$EqValue'.'|'.0]", path))
    if not res:
        # .'$EqValue'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$EqValue'.'|'.1]", path))
        if not res:
            # .'$EqValue'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$EqValue'.'|'.2]", path))
            if not res:
                # .'$EqValue'.'|'.3
                res = isinstance(val, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [.'$EqValue'.'|'.3]", path))
                if not res:
                    # .'$EqValue'.'|'.4
                    res = isinstance(val, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$EqValue'.'|'.4]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$EqValue'.'|']", path))
    return res

# check $ValModel (.'$ValModel')
def json_model_14(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ValModel'
    # .'$ValModel'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$ValModel'.'|'.0]", path))
    if not res:
        # .'$ValModel'.'|'.1
        res = isinstance(val, bool) and val == True
        if not res:
            rep is None or rep.append(("unexpected =true [.'$ValModel'.'|'.1]", path))
        if not res:
            # .'$ValModel'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool) and val == 0
            if not res:
                rep is None or rep.append(("unexpected =0 [.'$ValModel'.'|'.2]", path))
            if not res:
                # .'$ValModel'.'|'.3
                res = isinstance(val, int) and not isinstance(val, bool) and val == 1
                if not res:
                    rep is None or rep.append(("unexpected =1 [.'$ValModel'.'|'.3]", path))
                if not res:
                    # .'$ValModel'.'|'.4
                    res = isinstance(val, int) and not isinstance(val, bool) and val == -1
                    if not res:
                        rep is None or rep.append(("unexpected =-1 [.'$ValModel'.'|'.4]", path))
                    if not res:
                        # .'$ValModel'.'|'.5
                        res = isinstance(val, float) and val == 0.0
                        if not res:
                            rep is None or rep.append(("unexpected =0.0 [.'$ValModel'.'|'.5]", path))
                        if not res:
                            # .'$ValModel'.'|'.6
                            res = isinstance(val, float) and val == 1.0
                            if not res:
                                rep is None or rep.append(("unexpected =1.0 [.'$ValModel'.'|'.6]", path))
                            if not res:
                                # .'$ValModel'.'|'.7
                                res = isinstance(val, float) and val == -1.0
                                if not res:
                                    rep is None or rep.append(("unexpected =-1.0 [.'$ValModel'.'|'.7]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$ValModel'.'|']", path))
    return res


# check $StrModel (.'$StrModel')
def json_model_15(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$StrModel'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_1
    if not res:
        rep is None or rep.append(("value not in enum [.'$StrModel'.'|']", path))
    if not res:
        # .'$StrModel'.'|'.0
        res = json_model_9(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $StrConst [.'$StrModel'.'|'.0]", path))
        if not res:
            # .'$StrModel'.'|'.1
            res = json_model_8(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected $ValConst [.'$StrModel'.'|'.1]", path))
            if not res:
                # .'$StrModel'.'|'.2
                # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                res = isinstance(val, str) and _jm_xre_1(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected /^/($EXREG)/[a-z]*X[a-z]*$/X [.'$StrModel'.'|'.2]", path))
                if not res:
                    # .'$StrModel'.'|'.3
                    # "/^/($REGEX)/[a-z]*$/X"
                    res = isinstance(val, str) and _jm_xre_0(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected /^/($REGEX)/[a-z]*$/X [.'$StrModel'.'|'.3]", path))
                    if not res:
                        # .'$StrModel'.'|'.4
                        res = json_model_7(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$StrModel'.'|'.4]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$StrModel'.'|']", path))
    return res

# check $Any (.'$Any')
def json_model_16(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Any'
    res = True
    if not res:
        rep is None or rep.append(("unexpected $ANY [.'$Any']", path))
    return res

# check $None (.'$None')
def json_model_17(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$None'
    res = False
    if not res:
        rep is None or rep.append(("unexpected $NONE [.'$None']", path))
    return res

# object .'$Array'.0.'|'.5
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Array'.0.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Array'.0.'|'.5.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Array'.0.'|'.5.'#']", lpath_1 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Array'.0.'|'.5.'#']", lpath_1 if path is not None else None))
                return False
        elif json_model_25(prop, lpath_1 if path is not None else None, rep):
            # handle 1 key props
            # .'$Array'.0.'|'.5.'$Prop'
            res = json_model_32(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Array'.0.'|'.5.'$Prop']", lpath_1 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Array'.0.'|'.5.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Array'.0.'|'.5.'/^#/']", lpath_1 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Array'.0.'|'.5]", lpath_1 if path is not None else None))
            return False
    return True

# object .'$Array'.0.'|'.4
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Array'.0.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$Array'.0.'|'.4.'+'
            res = isinstance(pval, list)
            if res:
                for arr_1_idx, arr_1_item in enumerate(pval):
                    arr_1_lpath: Path = ((lpath_2 if path is not None else None) + [ arr_1_idx ]) if (lpath_2 if path is not None else None) is not None else None
                    # .'$Array'.0.'|'.4.'+'.0
                    res = json_model_32(arr_1_item, arr_1_lpath if (lpath_2 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Array'.0.'|'.4.'+'.0]", arr_1_lpath if (lpath_2 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Array'.0.'|'.4.'+']", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Array'.0.'|'.4.'+']", lpath_2 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Array'.0.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Array'.0.'|'.4.'#']", lpath_2 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Array'.0.'|'.4.'#']", lpath_2 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Array'.0.'|'.4.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Array'.0.'|'.4.'/^#/']", lpath_2 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Array'.0.'|'.4]", lpath_2 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$Array'.0.'|'.4]", path))
        return False
    return True

# object .'$Array'.0.'|'.3
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Array'.0.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Array'.0.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_2_idx, arr_2_item in enumerate(pval):
                    arr_2_lpath: Path = ((lpath_3 if path is not None else None) + [ arr_2_idx ]) if (lpath_3 if path is not None else None) is not None else None
                    # .'$Array'.0.'|'.3.'^'.0
                    res = json_model_32(arr_2_item, arr_2_lpath if (lpath_3 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Array'.0.'|'.3.'^'.0]", arr_2_lpath if (lpath_3 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Array'.0.'|'.3.'^']", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Array'.0.'|'.3.'^']", lpath_3 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Array'.0.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Array'.0.'|'.3.'#']", lpath_3 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Array'.0.'|'.3.'#']", lpath_3 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Array'.0.'|'.3.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Array'.0.'|'.3.'/^#/']", lpath_3 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Array'.0.'|'.3]", lpath_3 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Array'.0.'|'.3]", path))
        return False
    return True

# object .'$Array'.0.'|'.2
def _jm_obj_4(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Array'.0.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$Array'.0.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_3_idx, arr_3_item in enumerate(pval):
                    arr_3_lpath: Path = ((lpath_4 if path is not None else None) + [ arr_3_idx ]) if (lpath_4 if path is not None else None) is not None else None
                    # .'$Array'.0.'|'.2.'&'.0
                    res = json_model_32(arr_3_item, arr_3_lpath if (lpath_4 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Array'.0.'|'.2.'&'.0]", arr_3_lpath if (lpath_4 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Array'.0.'|'.2.'&']", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Array'.0.'|'.2.'&']", lpath_4 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Array'.0.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Array'.0.'|'.2.'#']", lpath_4 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Array'.0.'|'.2.'#']", lpath_4 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Array'.0.'|'.2.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Array'.0.'|'.2.'/^#/']", lpath_4 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Array'.0.'|'.2]", lpath_4 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$Array'.0.'|'.2]", path))
        return False
    return True

# object .'$Array'.0.'|'.1
def _jm_obj_5(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Array'.0.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Array'.0.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_4_idx, arr_4_item in enumerate(pval):
                    arr_4_lpath: Path = ((lpath_5 if path is not None else None) + [ arr_4_idx ]) if (lpath_5 if path is not None else None) is not None else None
                    # .'$Array'.0.'|'.1.'|'.0
                    res = json_model_32(arr_4_item, arr_4_lpath if (lpath_5 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Array'.0.'|'.1.'|'.0]", arr_4_lpath if (lpath_5 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Array'.0.'|'.1.'|']", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Array'.0.'|'.1.'|']", lpath_5 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Array'.0.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Array'.0.'|'.1.'#']", lpath_5 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Array'.0.'|'.1.'#']", lpath_5 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Array'.0.'|'.1.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Array'.0.'|'.1.'/^#/']", lpath_5 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Array'.0.'|'.1]", lpath_5 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Array'.0.'|'.1]", path))
        return False
    return True



# object .'$Array'.0.'|'.0
def _jm_obj_6(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Array'.0.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Array'.0.'|'.0.'@'
            res = json_model_32(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Array'.0.'|'.0.'@']", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Array'.0.'|'.0.'@']", lpath_6 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Array'.0.'|'.0.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Array'.0.'|'.0.'#']", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Array'.0.'|'.0.'#']", lpath_6 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Array'.0.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Array'.0.'|'.0.'!']", lpath_6 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Array'.0.'|'.0.'!']", lpath_6 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 3 re props
            # .'$Array'.0.'|'.0.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Array'.0.'|'.0.'/^#/']", lpath_6 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 3 re props
            # .'$Array'.0.'|'.0.'/^(<=|>=|<|>)$/'
            res = json_model_12(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$Array'.0.'|'.0.'/^(<=|>=|<|>)$/']", lpath_6 if path is not None else None))
            if not res:
                return False
        elif _jm_re_8(prop, path, rep):
            # handle 3 re props
            # .'$Array'.0.'|'.0.'/^(=|!=)$/'
            res = json_model_13(pval, lpath_6 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$Array'.0.'|'.0.'/^(=|!=)$/']", lpath_6 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Array'.0.'|'.0]", lpath_6 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Array'.0.'|'.0]", path))
        return False
    return True


# check $Array (.'$Array')
def json_model_18(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Array'
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # .'$Array'.0
            res = isinstance(arr_0_item, dict)
            if not res:
                rep is None or rep.append(("unexpected type [.'$Array'.0.'|']", arr_0_lpath if path is not None else None))
            if res:
                # .'$Array'.0.'|'.0
                res = _jm_obj_6(arr_0_item, arr_0_lpath if path is not None else None, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Array'.0.'|'.0]", arr_0_lpath if path is not None else None))
                if not res:
                    # .'$Array'.0.'|'.1
                    res = _jm_obj_5(arr_0_item, arr_0_lpath if path is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Array'.0.'|'.1]", arr_0_lpath if path is not None else None))
                    if not res:
                        # .'$Array'.0.'|'.2
                        res = _jm_obj_4(arr_0_item, arr_0_lpath if path is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$Array'.0.'|'.2]", arr_0_lpath if path is not None else None))
                        if not res:
                            # .'$Array'.0.'|'.3
                            res = _jm_obj_3(arr_0_item, arr_0_lpath if path is not None else None, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$Array'.0.'|'.3]", arr_0_lpath if path is not None else None))
                            if not res:
                                # .'$Array'.0.'|'.4
                                res = _jm_obj_2(arr_0_item, arr_0_lpath if path is not None else None, rep)
                                if not res:
                                    rep is None or rep.append(("unexpected element [.'$Array'.0.'|'.4]", arr_0_lpath if path is not None else None))
                                if not res:
                                    # .'$Array'.0.'|'.5
                                    res = _jm_obj_1(arr_0_item, arr_0_lpath if path is not None else None, rep)
                                    if not res:
                                        rep is None or rep.append(("unexpected element [.'$Array'.0.'|'.5]", arr_0_lpath if path is not None else None))
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("no model matched [.'$Array'.0.'|']", arr_0_lpath if path is not None else None))
            if not res:
                res = ((arr_0_item is None or isinstance(arr_0_item, (bool, int, float, str)))) and arr_0_item in _jm_cst_2
                if not res:
                    rep is None or rep.append(("value not in enum [.'$Array'.0.'|']", arr_0_lpath if path is not None else None))
                if not res:
                    # .'$Array'.0.'|'.0
                    res = arr_0_item is None
                    if not res:
                        rep is None or rep.append(("not null [.'$Array'.0.'|'.0]", arr_0_lpath if path is not None else None))
                    if not res:
                        # .'$Array'.0.'|'.1
                        res = isinstance(arr_0_item, bool) and arr_0_item == True
                        if not res:
                            rep is None or rep.append(("unexpected =true [.'$Array'.0.'|'.1]", arr_0_lpath if path is not None else None))
                        if not res:
                            # .'$Array'.0.'|'.2
                            res = isinstance(arr_0_item, int) and not isinstance(arr_0_item, bool) and arr_0_item == 0
                            if not res:
                                rep is None or rep.append(("unexpected =0 [.'$Array'.0.'|'.2]", arr_0_lpath if path is not None else None))
                            if not res:
                                # .'$Array'.0.'|'.3
                                res = isinstance(arr_0_item, int) and not isinstance(arr_0_item, bool) and arr_0_item == 1
                                if not res:
                                    rep is None or rep.append(("unexpected =1 [.'$Array'.0.'|'.3]", arr_0_lpath if path is not None else None))
                                if not res:
                                    # .'$Array'.0.'|'.4
                                    res = isinstance(arr_0_item, int) and not isinstance(arr_0_item, bool) and arr_0_item == -1
                                    if not res:
                                        rep is None or rep.append(("unexpected =-1 [.'$Array'.0.'|'.4]", arr_0_lpath if path is not None else None))
                                    if not res:
                                        # .'$Array'.0.'|'.5
                                        res = isinstance(arr_0_item, float) and arr_0_item == 0.0
                                        if not res:
                                            rep is None or rep.append(("unexpected =0.0 [.'$Array'.0.'|'.5]", arr_0_lpath if path is not None else None))
                                        if not res:
                                            # .'$Array'.0.'|'.6
                                            res = isinstance(arr_0_item, float) and arr_0_item == 1.0
                                            if not res:
                                                rep is None or rep.append(("unexpected =1.0 [.'$Array'.0.'|'.6]", arr_0_lpath if path is not None else None))
                                            if not res:
                                                # .'$Array'.0.'|'.7
                                                res = isinstance(arr_0_item, float) and arr_0_item == -1.0
                                                if not res:
                                                    rep is None or rep.append(("unexpected =-1.0 [.'$Array'.0.'|'.7]", arr_0_lpath if path is not None else None))
                                                if not res:
                                                    # .'$Array'.0.'|'.8
                                                    res = json_model_9(arr_0_item, arr_0_lpath if path is not None else None, rep)
                                                    if not res:
                                                        rep is None or rep.append(("unexpected $StrConst [.'$Array'.0.'|'.8]", arr_0_lpath if path is not None else None))
                                                    if not res:
                                                        # .'$Array'.0.'|'.9
                                                        res = json_model_8(arr_0_item, arr_0_lpath if path is not None else None, rep)
                                                        if not res:
                                                            rep is None or rep.append(("unexpected $ValConst [.'$Array'.0.'|'.9]", arr_0_lpath if path is not None else None))
                                                        if not res:
                                                            # .'$Array'.0.'|'.10
                                                            # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                                                            res = isinstance(arr_0_item, str) and _jm_xre_1(arr_0_item, arr_0_lpath if path is not None else None, rep)
                                                            if not res:
                                                                rep is None or rep.append(("unexpected /^/($EXREG)/[a-z]*X[a-z]*$/X [.'$Array'.0.'|'.10]", arr_0_lpath if path is not None else None))
                                                            if not res:
                                                                # .'$Array'.0.'|'.11
                                                                # "/^/($REGEX)/[a-z]*$/X"
                                                                res = isinstance(arr_0_item, str) and _jm_xre_0(arr_0_item, arr_0_lpath if path is not None else None, rep)
                                                                if not res:
                                                                    rep is None or rep.append(("unexpected /^/($REGEX)/[a-z]*$/X [.'$Array'.0.'|'.11]", arr_0_lpath if path is not None else None))
                                                                if not res:
                                                                    # .'$Array'.0.'|'.12
                                                                    res = json_model_7(arr_0_item, arr_0_lpath if path is not None else None, rep)
                                                                    if not res:
                                                                        rep is None or rep.append(("unexpected $Ref [.'$Array'.0.'|'.12]", arr_0_lpath if path is not None else None))
                                                                    if not res:
                                                                        # .'$Array'.0.'|'.13
                                                                        res = json_model_18(arr_0_item, arr_0_lpath if path is not None else None, rep)
                                                                        if not res:
                                                                            rep is None or rep.append(("unexpected $Array [.'$Array'.0.'|'.13]", arr_0_lpath if path is not None else None))
                                                                        if not res:
                                                                            # .'$Array'.0.'|'.14
                                                                            res = json_model_5(arr_0_item, arr_0_lpath if path is not None else None, rep)
                                                                            if not res:
                                                                                rep is None or rep.append(("unexpected $ArrayComment [.'$Array'.0.'|'.14]", arr_0_lpath if path is not None else None))
                    if res:
                        rep is None or rep.clear()
                    else:
                        rep is None or rep.append(("no model matched [.'$Array'.0.'|']", arr_0_lpath if path is not None else None))
            if not res:
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Array']", path))
    return res

# check $Common (.'$Common')
def json_model_19(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Common'
    res = json_model_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $ObjectComment [.'$Common']", path))
    return res

# object .'$Constraint'
def _jm_obj_7(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Constraint']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_7: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Constraint'.'@'
            res = json_model_32(pval, lpath_7 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Constraint'.'@']", lpath_7 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Constraint'.'@']", lpath_7 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Constraint'.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Constraint'.'!']", lpath_7 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Constraint'.'!']", lpath_7 if path is not None else None))
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 2 re props
            # .'$Constraint'.'/^(<=|>=|<|>)$/'
            res = json_model_12(pval, lpath_7 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$Constraint'.'/^(<=|>=|<|>)$/']", lpath_7 if path is not None else None))
            if not res:
                return False
        elif _jm_re_8(prop, path, rep):
            # handle 2 re props
            # .'$Constraint'.'/^(=|!=)$/'
            res = json_model_13(pval, lpath_7 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$Constraint'.'/^(=|!=)$/']", lpath_7 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Constraint']", lpath_7 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Constraint']", path))
        return False
    return True

# check $Constraint (.'$Constraint')
def json_model_20(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Constraint'
    res = _jm_obj_7(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Constraint']", path))
    return res

# object .'$Or'
def _jm_obj_8(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Or']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_8: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Or'.'|'
            res = isinstance(pval, list)
            if res:
                for arr_5_idx, arr_5_item in enumerate(pval):
                    arr_5_lpath: Path = ((lpath_8 if path is not None else None) + [ arr_5_idx ]) if (lpath_8 if path is not None else None) is not None else None
                    # .'$Or'.'|'.0
                    res = json_model_32(arr_5_item, arr_5_lpath if (lpath_8 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Or'.'|'.0]", arr_5_lpath if (lpath_8 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Or'.'|']", lpath_8 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Or'.'|']", lpath_8 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Or']", lpath_8 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Or']", path))
        return False
    return True

# check $Or (.'$Or')
def json_model_21(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Or'
    res = _jm_obj_8(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Or']", path))
    return res

# object .'$And'
def _jm_obj_9(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$And']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_9: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$And'.'&'
            res = isinstance(pval, list)
            if res:
                for arr_6_idx, arr_6_item in enumerate(pval):
                    arr_6_lpath: Path = ((lpath_9 if path is not None else None) + [ arr_6_idx ]) if (lpath_9 if path is not None else None) is not None else None
                    # .'$And'.'&'.0
                    res = json_model_32(arr_6_item, arr_6_lpath if (lpath_9 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$And'.'&'.0]", arr_6_lpath if (lpath_9 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$And'.'&']", lpath_9 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$And'.'&']", lpath_9 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$And']", lpath_9 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$And']", path))
        return False
    return True

# check $And (.'$And')
def json_model_22(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$And'
    res = _jm_obj_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$And']", path))
    return res

# object .'$Xor'
def _jm_obj_10(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Xor']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_10: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Xor'.'^'
            res = isinstance(pval, list)
            if res:
                for arr_7_idx, arr_7_item in enumerate(pval):
                    arr_7_lpath: Path = ((lpath_10 if path is not None else None) + [ arr_7_idx ]) if (lpath_10 if path is not None else None) is not None else None
                    # .'$Xor'.'^'.0
                    res = json_model_32(arr_7_item, arr_7_lpath if (lpath_10 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Xor'.'^'.0]", arr_7_lpath if (lpath_10 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Xor'.'^']", lpath_10 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Xor'.'^']", lpath_10 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Xor']", lpath_10 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Xor']", path))
        return False
    return True

# check $Xor (.'$Xor')
def json_model_23(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Xor'
    res = _jm_obj_10(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Xor']", path))
    return res

# object .'$Add'
def _jm_obj_11(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Add']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_11: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$Add'.'+'
            res = isinstance(pval, list)
            if res:
                for arr_8_idx, arr_8_item in enumerate(pval):
                    arr_8_lpath: Path = ((lpath_11 if path is not None else None) + [ arr_8_idx ]) if (lpath_11 if path is not None else None) is not None else None
                    # .'$Add'.'+'.0
                    res = json_model_32(arr_8_item, arr_8_lpath if (lpath_11 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Add'.'+'.0]", arr_8_lpath if (lpath_11 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Add'.'+']", lpath_11 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Add'.'+']", lpath_11 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Add']", lpath_11 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$Add']", path))
        return False
    return True

# check $Add (.'$Add')
def json_model_24(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Add'
    res = _jm_obj_11(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Add']", path))
    return res


# check $Prop (.'$Prop')
def json_model_25(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Prop'
    # .'$Prop'.'|'.0
    # "/^[?!]/"
    res = isinstance(val, str) and _jm_re_9(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected /^[?!]/ [.'$Prop'.'|'.0]", path))
    if not res:
        # .'$Prop'.'|'.1
        res = json_model_9(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $StrConst [.'$Prop'.'|'.1]", path))
        if not res:
            # .'$Prop'.'|'.2
            # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
            res = isinstance(val, str) and _jm_xre_1(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected /^/($EXREG)/[a-z]*X[a-z]*$/X [.'$Prop'.'|'.2]", path))
            if not res:
                # .'$Prop'.'|'.3
                # "/^/($REGEX)/[a-z]*$/X"
                res = isinstance(val, str) and _jm_xre_0(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected /^/($REGEX)/[a-z]*$/X [.'$Prop'.'|'.3]", path))
                if not res:
                    # .'$Prop'.'|'.4
                    res = json_model_7(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Ref [.'$Prop'.'|'.4]", path))
                    if not res:
                        # .'$Prop'.'|'.5
                        res = json_model_11(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Name [.'$Prop'.'|'.5]", path))
                        if not res:
                            # .'$Prop'.'|'.6
                            res = isinstance(val, str) and val == ""
                            if not res:
                                rep is None or rep.append(("unexpected _ [.'$Prop'.'|'.6]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$Prop'.'|']", path))
    return res

# object .'$Obj'
def _jm_obj_12(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Obj']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_12: Path = (path + [ prop ]) if path is not None else None
        if json_model_25(prop, lpath_12 if path is not None else None, rep):
            # handle 1 key props
            # .'$Obj'.'$Prop'
            res = json_model_32(pval, lpath_12 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Obj'.'$Prop']", lpath_12 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Obj']", lpath_12 if path is not None else None))
            return False
    return True

# check $Obj (.'$Obj')
def json_model_26(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Obj'
    res = _jm_obj_12(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Obj']", path))
    return res

# object .'$Elem'.'|'.5
def _jm_obj_13(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Elem'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_13: Path = (path + [ prop ]) if path is not None else None
        if json_model_25(prop, lpath_13 if path is not None else None, rep):
            # handle 1 key props
            # .'$Elem'.'|'.5.'$Prop'
            res = json_model_32(pval, lpath_13 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Elem'.'|'.5.'$Prop']", lpath_13 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Elem'.'|'.5]", lpath_13 if path is not None else None))
            return False
    return True

# object .'$Elem'.'|'.4
def _jm_obj_14(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Elem'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_14: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$Elem'.'|'.4.'+'
            res = isinstance(pval, list)
            if res:
                for arr_9_idx, arr_9_item in enumerate(pval):
                    arr_9_lpath: Path = ((lpath_14 if path is not None else None) + [ arr_9_idx ]) if (lpath_14 if path is not None else None) is not None else None
                    # .'$Elem'.'|'.4.'+'.0
                    res = json_model_32(arr_9_item, arr_9_lpath if (lpath_14 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Elem'.'|'.4.'+'.0]", arr_9_lpath if (lpath_14 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Elem'.'|'.4.'+']", lpath_14 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Elem'.'|'.4.'+']", lpath_14 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Elem'.'|'.4]", lpath_14 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$Elem'.'|'.4]", path))
        return False
    return True

# object .'$Elem'.'|'.3
def _jm_obj_15(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Elem'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_15: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Elem'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_10_idx, arr_10_item in enumerate(pval):
                    arr_10_lpath: Path = ((lpath_15 if path is not None else None) + [ arr_10_idx ]) if (lpath_15 if path is not None else None) is not None else None
                    # .'$Elem'.'|'.3.'^'.0
                    res = json_model_32(arr_10_item, arr_10_lpath if (lpath_15 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Elem'.'|'.3.'^'.0]", arr_10_lpath if (lpath_15 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Elem'.'|'.3.'^']", lpath_15 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Elem'.'|'.3.'^']", lpath_15 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Elem'.'|'.3]", lpath_15 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Elem'.'|'.3]", path))
        return False
    return True

# object .'$Elem'.'|'.2
def _jm_obj_16(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Elem'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_16: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$Elem'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_11_idx, arr_11_item in enumerate(pval):
                    arr_11_lpath: Path = ((lpath_16 if path is not None else None) + [ arr_11_idx ]) if (lpath_16 if path is not None else None) is not None else None
                    # .'$Elem'.'|'.2.'&'.0
                    res = json_model_32(arr_11_item, arr_11_lpath if (lpath_16 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Elem'.'|'.2.'&'.0]", arr_11_lpath if (lpath_16 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Elem'.'|'.2.'&']", lpath_16 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Elem'.'|'.2.'&']", lpath_16 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Elem'.'|'.2]", lpath_16 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$Elem'.'|'.2]", path))
        return False
    return True

# object .'$Elem'.'|'.1
def _jm_obj_17(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Elem'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_17: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Elem'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_12_idx, arr_12_item in enumerate(pval):
                    arr_12_lpath: Path = ((lpath_17 if path is not None else None) + [ arr_12_idx ]) if (lpath_17 if path is not None else None) is not None else None
                    # .'$Elem'.'|'.1.'|'.0
                    res = json_model_32(arr_12_item, arr_12_lpath if (lpath_17 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Elem'.'|'.1.'|'.0]", arr_12_lpath if (lpath_17 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Elem'.'|'.1.'|']", lpath_17 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Elem'.'|'.1.'|']", lpath_17 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Elem'.'|'.1]", lpath_17 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Elem'.'|'.1]", path))
        return False
    return True

# object .'$Elem'.'|'.0
def _jm_obj_18(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Elem'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_18: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Elem'.'|'.0.'@'
            res = json_model_32(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Elem'.'|'.0.'@']", lpath_18 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Elem'.'|'.0.'@']", lpath_18 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Elem'.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Elem'.'|'.0.'!']", lpath_18 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Elem'.'|'.0.'!']", lpath_18 if path is not None else None))
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 2 re props
            # .'$Elem'.'|'.0.'/^(<=|>=|<|>)$/'
            res = json_model_12(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$Elem'.'|'.0.'/^(<=|>=|<|>)$/']", lpath_18 if path is not None else None))
            if not res:
                return False
        elif _jm_re_8(prop, path, rep):
            # handle 2 re props
            # .'$Elem'.'|'.0.'/^(=|!=)$/'
            res = json_model_13(pval, lpath_18 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$Elem'.'|'.0.'/^(=|!=)$/']", lpath_18 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Elem'.'|'.0]", lpath_18 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Elem'.'|'.0]", path))
        return False
    return True

# check $Elem (.'$Elem')
def json_model_27(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Elem'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Elem'.'|']", path))
    if res:
        # .'$Elem'.'|'.0
        res = _jm_obj_18(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Elem'.'|'.0]", path))
        if not res:
            # .'$Elem'.'|'.1
            res = _jm_obj_17(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Elem'.'|'.1]", path))
            if not res:
                # .'$Elem'.'|'.2
                res = _jm_obj_16(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Elem'.'|'.2]", path))
                if not res:
                    # .'$Elem'.'|'.3
                    res = _jm_obj_15(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Elem'.'|'.3]", path))
                    if not res:
                        # .'$Elem'.'|'.4
                        res = _jm_obj_14(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$Elem'.'|'.4]", path))
                        if not res:
                            # .'$Elem'.'|'.5
                            res = _jm_obj_13(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$Elem'.'|'.5]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Elem'.'|']", path))
    return res

# object .'$Element'.'|'.5
def _jm_obj_19(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Element'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_19: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Element'.'|'.5.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Element'.'|'.5.'#']", lpath_19 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.5.'#']", lpath_19 if path is not None else None))
                return False
        elif json_model_25(prop, lpath_19 if path is not None else None, rep):
            # handle 1 key props
            # .'$Element'.'|'.5.'$Prop'
            res = json_model_32(pval, lpath_19 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Element'.'|'.5.'$Prop']", lpath_19 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Element'.'|'.5.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Element'.'|'.5.'/^#/']", lpath_19 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Element'.'|'.5]", lpath_19 if path is not None else None))
            return False
    return True

# object .'$Element'.'|'.4
def _jm_obj_20(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Element'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_20: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$Element'.'|'.4.'+'
            res = isinstance(pval, list)
            if res:
                for arr_13_idx, arr_13_item in enumerate(pval):
                    arr_13_lpath: Path = ((lpath_20 if path is not None else None) + [ arr_13_idx ]) if (lpath_20 if path is not None else None) is not None else None
                    # .'$Element'.'|'.4.'+'.0
                    res = json_model_32(arr_13_item, arr_13_lpath if (lpath_20 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Element'.'|'.4.'+'.0]", arr_13_lpath if (lpath_20 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Element'.'|'.4.'+']", lpath_20 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Element'.'|'.4.'+']", lpath_20 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Element'.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Element'.'|'.4.'#']", lpath_20 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.4.'#']", lpath_20 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Element'.'|'.4.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Element'.'|'.4.'/^#/']", lpath_20 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Element'.'|'.4]", lpath_20 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$Element'.'|'.4]", path))
        return False
    return True

# object .'$Element'.'|'.3
def _jm_obj_21(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Element'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_21: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Element'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_14_idx, arr_14_item in enumerate(pval):
                    arr_14_lpath: Path = ((lpath_21 if path is not None else None) + [ arr_14_idx ]) if (lpath_21 if path is not None else None) is not None else None
                    # .'$Element'.'|'.3.'^'.0
                    res = json_model_32(arr_14_item, arr_14_lpath if (lpath_21 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Element'.'|'.3.'^'.0]", arr_14_lpath if (lpath_21 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Element'.'|'.3.'^']", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Element'.'|'.3.'^']", lpath_21 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Element'.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Element'.'|'.3.'#']", lpath_21 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.3.'#']", lpath_21 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Element'.'|'.3.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Element'.'|'.3.'/^#/']", lpath_21 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Element'.'|'.3]", lpath_21 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Element'.'|'.3]", path))
        return False
    return True

# object .'$Element'.'|'.2
def _jm_obj_22(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Element'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_22: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$Element'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_15_idx, arr_15_item in enumerate(pval):
                    arr_15_lpath: Path = ((lpath_22 if path is not None else None) + [ arr_15_idx ]) if (lpath_22 if path is not None else None) is not None else None
                    # .'$Element'.'|'.2.'&'.0
                    res = json_model_32(arr_15_item, arr_15_lpath if (lpath_22 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Element'.'|'.2.'&'.0]", arr_15_lpath if (lpath_22 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Element'.'|'.2.'&']", lpath_22 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Element'.'|'.2.'&']", lpath_22 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Element'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Element'.'|'.2.'#']", lpath_22 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.2.'#']", lpath_22 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Element'.'|'.2.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Element'.'|'.2.'/^#/']", lpath_22 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Element'.'|'.2]", lpath_22 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$Element'.'|'.2]", path))
        return False
    return True

# object .'$Element'.'|'.1
def _jm_obj_23(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Element'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_23: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Element'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_16_idx, arr_16_item in enumerate(pval):
                    arr_16_lpath: Path = ((lpath_23 if path is not None else None) + [ arr_16_idx ]) if (lpath_23 if path is not None else None) is not None else None
                    # .'$Element'.'|'.1.'|'.0
                    res = json_model_32(arr_16_item, arr_16_lpath if (lpath_23 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Element'.'|'.1.'|'.0]", arr_16_lpath if (lpath_23 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Element'.'|'.1.'|']", lpath_23 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Element'.'|'.1.'|']", lpath_23 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Element'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Element'.'|'.1.'#']", lpath_23 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.1.'#']", lpath_23 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Element'.'|'.1.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Element'.'|'.1.'/^#/']", lpath_23 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Element'.'|'.1]", lpath_23 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Element'.'|'.1]", path))
        return False
    return True

# object .'$Element'.'|'.0
def _jm_obj_24(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Element'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_24: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Element'.'|'.0.'@'
            res = json_model_32(pval, lpath_24 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Element'.'|'.0.'@']", lpath_24 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Element'.'|'.0.'@']", lpath_24 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Element'.'|'.0.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Element'.'|'.0.'#']", lpath_24 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.0.'#']", lpath_24 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Element'.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Element'.'|'.0.'!']", lpath_24 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Element'.'|'.0.'!']", lpath_24 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 3 re props
            # .'$Element'.'|'.0.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Element'.'|'.0.'/^#/']", lpath_24 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 3 re props
            # .'$Element'.'|'.0.'/^(<=|>=|<|>)$/'
            res = json_model_12(pval, lpath_24 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$Element'.'|'.0.'/^(<=|>=|<|>)$/']", lpath_24 if path is not None else None))
            if not res:
                return False
        elif _jm_re_8(prop, path, rep):
            # handle 3 re props
            # .'$Element'.'|'.0.'/^(=|!=)$/'
            res = json_model_13(pval, lpath_24 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$Element'.'|'.0.'/^(=|!=)$/']", lpath_24 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Element'.'|'.0]", lpath_24 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Element'.'|'.0]", path))
        return False
    return True

# check $Element (.'$Element')
def json_model_28(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Element'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Element'.'|']", path))
    if res:
        # .'$Element'.'|'.0
        res = _jm_obj_24(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Element'.'|'.0]", path))
        if not res:
            # .'$Element'.'|'.1
            res = _jm_obj_23(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Element'.'|'.1]", path))
            if not res:
                # .'$Element'.'|'.2
                res = _jm_obj_22(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Element'.'|'.2]", path))
                if not res:
                    # .'$Element'.'|'.3
                    res = _jm_obj_21(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Element'.'|'.3]", path))
                    if not res:
                        # .'$Element'.'|'.4
                        res = _jm_obj_20(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$Element'.'|'.4]", path))
                        if not res:
                            # .'$Element'.'|'.5
                            res = _jm_obj_19(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$Element'.'|'.5]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Element'.'|']", path))
    return res

# object .'$Trafo'.'~'
def _jm_obj_26(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Trafo'.'~']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_26: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Trafo'.'~'.''
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$Trafo'.'~'.'']", lpath_26 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Trafo'
def _jm_obj_25(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Trafo']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_25: Path = (path + [ prop ]) if path is not None else None
        if prop == "/":
            # handle may / property
            # .'$Trafo'.'/'
            # .'$Trafo'.'/'.'|'.0
            res = pval is None
            if not res:
                rep is None or rep.append(("not null [.'$Trafo'.'/'.'|'.0]", lpath_25 if path is not None else None))
            if not res:
                # .'$Trafo'.'/'.'|'.1
                res = isinstance(pval, bool)
                if not res:
                    rep is None or rep.append(("not a bool [.'$Trafo'.'/'.'|'.1]", lpath_25 if path is not None else None))
                if not res:
                    # .'$Trafo'.'/'.'|'.2
                    res = isinstance(pval, int) and not isinstance(pval, bool)
                    if not res:
                        rep is None or rep.append(("not a -1 strict int [.'$Trafo'.'/'.'|'.2]", lpath_25 if path is not None else None))
                    if not res:
                        # .'$Trafo'.'/'.'|'.3
                        res = isinstance(pval, float)
                        if not res:
                            rep is None or rep.append(("not a -1.0 strict float [.'$Trafo'.'/'.'|'.3]", lpath_25 if path is not None else None))
                        if not res:
                            # .'$Trafo'.'/'.'|'.4
                            res = isinstance(pval, str)
                            if not res:
                                rep is None or rep.append(("unexpected string [.'$Trafo'.'/'.'|'.4]", lpath_25 if path is not None else None))
                            if not res:
                                # .'$Trafo'.'/'.'|'.5
                                res = isinstance(pval, list)
                                if res:
                                    # accept any array
                                    pass
                                if not res:
                                    rep is None or rep.append(("not array or unexpected array [.'$Trafo'.'/'.'|'.5]", lpath_25 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Trafo'.'/'.'|']", lpath_25 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Trafo'.'/']", lpath_25 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Trafo'.'~'
            res = _jm_obj_26(pval, lpath_25 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Trafo'.'~']", lpath_25 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Trafo'.'~']", lpath_25 if path is not None else None))
                return False
        elif prop == "*":
            # handle may * property
            # .'$Trafo'.'*'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Trafo'.'*']", lpath_25 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Trafo'.'*']", lpath_25 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Trafo']", lpath_25 if path is not None else None))
            return False
    return True

# check $Trafo (.'$Trafo')
def json_model_29(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # remove, rename or add stuff
    # .'$Trafo'
    res = _jm_obj_25(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Trafo']", path))
    return res

# object .'$Transformation'.'|'.6.'~'
def _jm_obj_28(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Transformation'.'|'.6.'~']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_28: Path = (path + [ prop ]) if path is not None else None
        # handle other props
        # .'$Transformation'.'|'.6.'~'.''
        res = isinstance(pval, str)
        if not res:
            rep is None or rep.append(("unexpected string [.'$Transformation'.'|'.6.'~'.'']", lpath_28 if path is not None else None))
        if not res:
            return False
    return True

# object .'$Transformation'.'|'.6
def _jm_obj_27(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Transformation'.'|'.6]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_27: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Transformation'.'|'.6.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Transformation'.'|'.6.'#']", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.6.'#']", lpath_27 if path is not None else None))
                return False
        elif prop == "/":
            # handle may / property
            # .'$Transformation'.'|'.6.'/'
            # .'$Transformation'.'|'.6.'/'.'|'.0
            res = pval is None
            if not res:
                rep is None or rep.append(("not null [.'$Transformation'.'|'.6.'/'.'|'.0]", lpath_27 if path is not None else None))
            if not res:
                # .'$Transformation'.'|'.6.'/'.'|'.1
                res = isinstance(pval, bool)
                if not res:
                    rep is None or rep.append(("not a bool [.'$Transformation'.'|'.6.'/'.'|'.1]", lpath_27 if path is not None else None))
                if not res:
                    # .'$Transformation'.'|'.6.'/'.'|'.2
                    res = isinstance(pval, int) and not isinstance(pval, bool)
                    if not res:
                        rep is None or rep.append(("not a -1 strict int [.'$Transformation'.'|'.6.'/'.'|'.2]", lpath_27 if path is not None else None))
                    if not res:
                        # .'$Transformation'.'|'.6.'/'.'|'.3
                        res = isinstance(pval, float)
                        if not res:
                            rep is None or rep.append(("not a -1.0 strict float [.'$Transformation'.'|'.6.'/'.'|'.3]", lpath_27 if path is not None else None))
                        if not res:
                            # .'$Transformation'.'|'.6.'/'.'|'.4
                            res = isinstance(pval, str)
                            if not res:
                                rep is None or rep.append(("unexpected string [.'$Transformation'.'|'.6.'/'.'|'.4]", lpath_27 if path is not None else None))
                            if not res:
                                # .'$Transformation'.'|'.6.'/'.'|'.5
                                res = isinstance(pval, list)
                                if res:
                                    # accept any array
                                    pass
                                if not res:
                                    rep is None or rep.append(("not array or unexpected array [.'$Transformation'.'|'.6.'/'.'|'.5]", lpath_27 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Transformation'.'|'.6.'/'.'|']", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.6.'/']", lpath_27 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Transformation'.'|'.6.'~'
            res = _jm_obj_28(pval, lpath_27 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Transformation'.'|'.6.'~']", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.6.'~']", lpath_27 if path is not None else None))
                return False
        elif prop == "*":
            # handle may * property
            # .'$Transformation'.'|'.6.'*'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Transformation'.'|'.6.'*']", lpath_27 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.6.'*']", lpath_27 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Transformation'.'|'.6.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Transformation'.'|'.6.'/^#/']", lpath_27 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Transformation'.'|'.6]", lpath_27 if path is not None else None))
            return False
    return True

# object .'$Transformation'.'|'.5
def _jm_obj_29(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Transformation'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_29: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Transformation'.'|'.5.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Transformation'.'|'.5.'#']", lpath_29 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.5.'#']", lpath_29 if path is not None else None))
                return False
        elif json_model_25(prop, lpath_29 if path is not None else None, rep):
            # handle 1 key props
            # .'$Transformation'.'|'.5.'$Prop'
            res = json_model_32(pval, lpath_29 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Transformation'.'|'.5.'$Prop']", lpath_29 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Transformation'.'|'.5.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Transformation'.'|'.5.'/^#/']", lpath_29 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Transformation'.'|'.5]", lpath_29 if path is not None else None))
            return False
    return True

# object .'$Transformation'.'|'.4
def _jm_obj_30(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Transformation'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_30: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$Transformation'.'|'.4.'+'
            res = isinstance(pval, list)
            if res:
                for arr_17_idx, arr_17_item in enumerate(pval):
                    arr_17_lpath: Path = ((lpath_30 if path is not None else None) + [ arr_17_idx ]) if (lpath_30 if path is not None else None) is not None else None
                    # .'$Transformation'.'|'.4.'+'.0
                    res = json_model_32(arr_17_item, arr_17_lpath if (lpath_30 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Transformation'.'|'.4.'+'.0]", arr_17_lpath if (lpath_30 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Transformation'.'|'.4.'+']", lpath_30 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Transformation'.'|'.4.'+']", lpath_30 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Transformation'.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Transformation'.'|'.4.'#']", lpath_30 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.4.'#']", lpath_30 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Transformation'.'|'.4.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Transformation'.'|'.4.'/^#/']", lpath_30 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Transformation'.'|'.4]", lpath_30 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$Transformation'.'|'.4]", path))
        return False
    return True

# object .'$Transformation'.'|'.3
def _jm_obj_31(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Transformation'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_31: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Transformation'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_18_idx, arr_18_item in enumerate(pval):
                    arr_18_lpath: Path = ((lpath_31 if path is not None else None) + [ arr_18_idx ]) if (lpath_31 if path is not None else None) is not None else None
                    # .'$Transformation'.'|'.3.'^'.0
                    res = json_model_32(arr_18_item, arr_18_lpath if (lpath_31 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Transformation'.'|'.3.'^'.0]", arr_18_lpath if (lpath_31 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Transformation'.'|'.3.'^']", lpath_31 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Transformation'.'|'.3.'^']", lpath_31 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Transformation'.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Transformation'.'|'.3.'#']", lpath_31 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.3.'#']", lpath_31 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Transformation'.'|'.3.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Transformation'.'|'.3.'/^#/']", lpath_31 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Transformation'.'|'.3]", lpath_31 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Transformation'.'|'.3]", path))
        return False
    return True

# object .'$Transformation'.'|'.2
def _jm_obj_32(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Transformation'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_32: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$Transformation'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_19_idx, arr_19_item in enumerate(pval):
                    arr_19_lpath: Path = ((lpath_32 if path is not None else None) + [ arr_19_idx ]) if (lpath_32 if path is not None else None) is not None else None
                    # .'$Transformation'.'|'.2.'&'.0
                    res = json_model_32(arr_19_item, arr_19_lpath if (lpath_32 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Transformation'.'|'.2.'&'.0]", arr_19_lpath if (lpath_32 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Transformation'.'|'.2.'&']", lpath_32 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Transformation'.'|'.2.'&']", lpath_32 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Transformation'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Transformation'.'|'.2.'#']", lpath_32 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.2.'#']", lpath_32 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Transformation'.'|'.2.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Transformation'.'|'.2.'/^#/']", lpath_32 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Transformation'.'|'.2]", lpath_32 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$Transformation'.'|'.2]", path))
        return False
    return True

# object .'$Transformation'.'|'.1
def _jm_obj_33(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Transformation'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_33: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Transformation'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_20_idx, arr_20_item in enumerate(pval):
                    arr_20_lpath: Path = ((lpath_33 if path is not None else None) + [ arr_20_idx ]) if (lpath_33 if path is not None else None) is not None else None
                    # .'$Transformation'.'|'.1.'|'.0
                    res = json_model_32(arr_20_item, arr_20_lpath if (lpath_33 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Transformation'.'|'.1.'|'.0]", arr_20_lpath if (lpath_33 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Transformation'.'|'.1.'|']", lpath_33 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Transformation'.'|'.1.'|']", lpath_33 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Transformation'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Transformation'.'|'.1.'#']", lpath_33 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.1.'#']", lpath_33 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Transformation'.'|'.1.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Transformation'.'|'.1.'/^#/']", lpath_33 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Transformation'.'|'.1]", lpath_33 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Transformation'.'|'.1]", path))
        return False
    return True

# object .'$Transformation'.'|'.0
def _jm_obj_34(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Transformation'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_34: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Transformation'.'|'.0.'@'
            res = json_model_32(pval, lpath_34 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Transformation'.'|'.0.'@']", lpath_34 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Transformation'.'|'.0.'@']", lpath_34 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Transformation'.'|'.0.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Transformation'.'|'.0.'#']", lpath_34 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.0.'#']", lpath_34 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Transformation'.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Transformation'.'|'.0.'!']", lpath_34 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Transformation'.'|'.0.'!']", lpath_34 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 3 re props
            # .'$Transformation'.'|'.0.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Transformation'.'|'.0.'/^#/']", lpath_34 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 3 re props
            # .'$Transformation'.'|'.0.'/^(<=|>=|<|>)$/'
            res = json_model_12(pval, lpath_34 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$Transformation'.'|'.0.'/^(<=|>=|<|>)$/']", lpath_34 if path is not None else None))
            if not res:
                return False
        elif _jm_re_8(prop, path, rep):
            # handle 3 re props
            # .'$Transformation'.'|'.0.'/^(=|!=)$/'
            res = json_model_13(pval, lpath_34 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$Transformation'.'|'.0.'/^(=|!=)$/']", lpath_34 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Transformation'.'|'.0]", lpath_34 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Transformation'.'|'.0]", path))
        return False
    return True


# check $Transformation (.'$Transformation')
def json_model_30(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Transformation'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Transformation'.'|']", path))
    if res:
        # .'$Transformation'.'|'.0
        res = _jm_obj_34(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Transformation'.'|'.0]", path))
        if not res:
            # .'$Transformation'.'|'.1
            res = _jm_obj_33(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Transformation'.'|'.1]", path))
            if not res:
                # .'$Transformation'.'|'.2
                res = _jm_obj_32(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Transformation'.'|'.2]", path))
                if not res:
                    # .'$Transformation'.'|'.3
                    res = _jm_obj_31(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Transformation'.'|'.3]", path))
                    if not res:
                        # .'$Transformation'.'|'.4
                        res = _jm_obj_30(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$Transformation'.'|'.4]", path))
                        if not res:
                            # .'$Transformation'.'|'.5
                            res = _jm_obj_29(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$Transformation'.'|'.5]", path))
                            if not res:
                                # .'$Transformation'.'|'.6
                                res = _jm_obj_27(val, path, rep)
                                if not res:
                                    rep is None or rep.append(("unexpected element [.'$Transformation'.'|'.6]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Transformation'.'|']", path))
    if not res:
        res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_3
        if not res:
            rep is None or rep.append(("value not in enum [.'$Transformation'.'|']", path))
        if not res:
            # .'$Transformation'.'|'.0
            res = val is None
            if not res:
                rep is None or rep.append(("not null [.'$Transformation'.'|'.0]", path))
            if not res:
                # .'$Transformation'.'|'.1
                res = isinstance(val, bool) and val == True
                if not res:
                    rep is None or rep.append(("unexpected =true [.'$Transformation'.'|'.1]", path))
                if not res:
                    # .'$Transformation'.'|'.2
                    res = isinstance(val, int) and not isinstance(val, bool) and val == 0
                    if not res:
                        rep is None or rep.append(("unexpected =0 [.'$Transformation'.'|'.2]", path))
                    if not res:
                        # .'$Transformation'.'|'.3
                        res = isinstance(val, int) and not isinstance(val, bool) and val == 1
                        if not res:
                            rep is None or rep.append(("unexpected =1 [.'$Transformation'.'|'.3]", path))
                        if not res:
                            # .'$Transformation'.'|'.4
                            res = isinstance(val, int) and not isinstance(val, bool) and val == -1
                            if not res:
                                rep is None or rep.append(("unexpected =-1 [.'$Transformation'.'|'.4]", path))
                            if not res:
                                # .'$Transformation'.'|'.5
                                res = isinstance(val, float) and val == 0.0
                                if not res:
                                    rep is None or rep.append(("unexpected =0.0 [.'$Transformation'.'|'.5]", path))
                                if not res:
                                    # .'$Transformation'.'|'.6
                                    res = isinstance(val, float) and val == 1.0
                                    if not res:
                                        rep is None or rep.append(("unexpected =1.0 [.'$Transformation'.'|'.6]", path))
                                    if not res:
                                        # .'$Transformation'.'|'.7
                                        res = isinstance(val, float) and val == -1.0
                                        if not res:
                                            rep is None or rep.append(("unexpected =-1.0 [.'$Transformation'.'|'.7]", path))
                                        if not res:
                                            # .'$Transformation'.'|'.8
                                            res = json_model_9(val, path, rep)
                                            if not res:
                                                rep is None or rep.append(("unexpected $StrConst [.'$Transformation'.'|'.8]", path))
                                            if not res:
                                                # .'$Transformation'.'|'.9
                                                res = json_model_8(val, path, rep)
                                                if not res:
                                                    rep is None or rep.append(("unexpected $ValConst [.'$Transformation'.'|'.9]", path))
                                                if not res:
                                                    # .'$Transformation'.'|'.10
                                                    # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                                                    res = isinstance(val, str) and _jm_xre_1(val, path, rep)
                                                    if not res:
                                                        rep is None or rep.append(("unexpected /^/($EXREG)/[a-z]*X[a-z]*$/X [.'$Transformation'.'|'.10]", path))
                                                    if not res:
                                                        # .'$Transformation'.'|'.11
                                                        # "/^/($REGEX)/[a-z]*$/X"
                                                        res = isinstance(val, str) and _jm_xre_0(val, path, rep)
                                                        if not res:
                                                            rep is None or rep.append(("unexpected /^/($REGEX)/[a-z]*$/X [.'$Transformation'.'|'.11]", path))
                                                        if not res:
                                                            # .'$Transformation'.'|'.12
                                                            res = json_model_7(val, path, rep)
                                                            if not res:
                                                                rep is None or rep.append(("unexpected $Ref [.'$Transformation'.'|'.12]", path))
                                                            if not res:
                                                                # .'$Transformation'.'|'.13
                                                                res = json_model_18(val, path, rep)
                                                                if not res:
                                                                    rep is None or rep.append(("unexpected $Array [.'$Transformation'.'|'.13]", path))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Transformation'.'|']", path))
    return res


# check $ScalarModel (.'$ScalarModel')
def json_model_31(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ScalarModel'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_4
    if not res:
        rep is None or rep.append(("value not in enum [.'$ScalarModel'.'|']", path))
    if not res:
        # .'$ScalarModel'.'|'.0
        res = val is None
        if not res:
            rep is None or rep.append(("not null [.'$ScalarModel'.'|'.0]", path))
        if not res:
            # .'$ScalarModel'.'|'.1
            res = isinstance(val, bool) and val == True
            if not res:
                rep is None or rep.append(("unexpected =true [.'$ScalarModel'.'|'.1]", path))
            if not res:
                # .'$ScalarModel'.'|'.2
                res = isinstance(val, int) and not isinstance(val, bool) and val == 0
                if not res:
                    rep is None or rep.append(("unexpected =0 [.'$ScalarModel'.'|'.2]", path))
                if not res:
                    # .'$ScalarModel'.'|'.3
                    res = isinstance(val, int) and not isinstance(val, bool) and val == 1
                    if not res:
                        rep is None or rep.append(("unexpected =1 [.'$ScalarModel'.'|'.3]", path))
                    if not res:
                        # .'$ScalarModel'.'|'.4
                        res = isinstance(val, int) and not isinstance(val, bool) and val == -1
                        if not res:
                            rep is None or rep.append(("unexpected =-1 [.'$ScalarModel'.'|'.4]", path))
                        if not res:
                            # .'$ScalarModel'.'|'.5
                            res = isinstance(val, float) and val == 0.0
                            if not res:
                                rep is None or rep.append(("unexpected =0.0 [.'$ScalarModel'.'|'.5]", path))
                            if not res:
                                # .'$ScalarModel'.'|'.6
                                res = isinstance(val, float) and val == 1.0
                                if not res:
                                    rep is None or rep.append(("unexpected =1.0 [.'$ScalarModel'.'|'.6]", path))
                                if not res:
                                    # .'$ScalarModel'.'|'.7
                                    res = isinstance(val, float) and val == -1.0
                                    if not res:
                                        rep is None or rep.append(("unexpected =-1.0 [.'$ScalarModel'.'|'.7]", path))
                                    if not res:
                                        # .'$ScalarModel'.'|'.8
                                        res = json_model_9(val, path, rep)
                                        if not res:
                                            rep is None or rep.append(("unexpected $StrConst [.'$ScalarModel'.'|'.8]", path))
                                        if not res:
                                            # .'$ScalarModel'.'|'.9
                                            res = json_model_8(val, path, rep)
                                            if not res:
                                                rep is None or rep.append(("unexpected $ValConst [.'$ScalarModel'.'|'.9]", path))
                                            if not res:
                                                # .'$ScalarModel'.'|'.10
                                                # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                                                res = isinstance(val, str) and _jm_xre_1(val, path, rep)
                                                if not res:
                                                    rep is None or rep.append(("unexpected /^/($EXREG)/[a-z]*X[a-z]*$/X [.'$ScalarModel'.'|'.10]", path))
                                                if not res:
                                                    # .'$ScalarModel'.'|'.11
                                                    # "/^/($REGEX)/[a-z]*$/X"
                                                    res = isinstance(val, str) and _jm_xre_0(val, path, rep)
                                                    if not res:
                                                        rep is None or rep.append(("unexpected /^/($REGEX)/[a-z]*$/X [.'$ScalarModel'.'|'.11]", path))
                                                    if not res:
                                                        # .'$ScalarModel'.'|'.12
                                                        res = json_model_7(val, path, rep)
                                                        if not res:
                                                            rep is None or rep.append(("unexpected $Ref [.'$ScalarModel'.'|'.12]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$ScalarModel'.'|']", path))
    return res

# object .'$Model'.'|'.5
def _jm_obj_35(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_35: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Model'.'|'.5.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model'.'|'.5.'#']", lpath_35 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model'.'|'.5.'#']", lpath_35 if path is not None else None))
                return False
        elif json_model_25(prop, lpath_35 if path is not None else None, rep):
            # handle 1 key props
            # .'$Model'.'|'.5.'$Prop'
            res = json_model_32(pval, lpath_35 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Model'.'|'.5.'$Prop']", lpath_35 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Model'.'|'.5.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Model'.'|'.5.'/^#/']", lpath_35 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model'.'|'.5]", lpath_35 if path is not None else None))
            return False
    return True

# object .'$Model'.'|'.4
def _jm_obj_36(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_36: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$Model'.'|'.4.'+'
            res = isinstance(pval, list)
            if res:
                for arr_21_idx, arr_21_item in enumerate(pval):
                    arr_21_lpath: Path = ((lpath_36 if path is not None else None) + [ arr_21_idx ]) if (lpath_36 if path is not None else None) is not None else None
                    # .'$Model'.'|'.4.'+'.0
                    res = json_model_32(arr_21_item, arr_21_lpath if (lpath_36 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Model'.'|'.4.'+'.0]", arr_21_lpath if (lpath_36 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model'.'|'.4.'+']", lpath_36 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Model'.'|'.4.'+']", lpath_36 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model'.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model'.'|'.4.'#']", lpath_36 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model'.'|'.4.'#']", lpath_36 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Model'.'|'.4.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Model'.'|'.4.'/^#/']", lpath_36 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model'.'|'.4]", lpath_36 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$Model'.'|'.4]", path))
        return False
    return True

# object .'$Model'.'|'.3
def _jm_obj_37(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_37: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Model'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_22_idx, arr_22_item in enumerate(pval):
                    arr_22_lpath: Path = ((lpath_37 if path is not None else None) + [ arr_22_idx ]) if (lpath_37 if path is not None else None) is not None else None
                    # .'$Model'.'|'.3.'^'.0
                    res = json_model_32(arr_22_item, arr_22_lpath if (lpath_37 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Model'.'|'.3.'^'.0]", arr_22_lpath if (lpath_37 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model'.'|'.3.'^']", lpath_37 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Model'.'|'.3.'^']", lpath_37 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model'.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model'.'|'.3.'#']", lpath_37 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model'.'|'.3.'#']", lpath_37 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Model'.'|'.3.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Model'.'|'.3.'/^#/']", lpath_37 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model'.'|'.3]", lpath_37 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Model'.'|'.3]", path))
        return False
    return True

# object .'$Model'.'|'.2
def _jm_obj_38(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_38: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$Model'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_23_idx, arr_23_item in enumerate(pval):
                    arr_23_lpath: Path = ((lpath_38 if path is not None else None) + [ arr_23_idx ]) if (lpath_38 if path is not None else None) is not None else None
                    # .'$Model'.'|'.2.'&'.0
                    res = json_model_32(arr_23_item, arr_23_lpath if (lpath_38 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Model'.'|'.2.'&'.0]", arr_23_lpath if (lpath_38 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model'.'|'.2.'&']", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Model'.'|'.2.'&']", lpath_38 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model'.'|'.2.'#']", lpath_38 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model'.'|'.2.'#']", lpath_38 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Model'.'|'.2.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Model'.'|'.2.'/^#/']", lpath_38 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model'.'|'.2]", lpath_38 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$Model'.'|'.2]", path))
        return False
    return True

# object .'$Model'.'|'.1
def _jm_obj_39(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_39: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Model'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_24_idx, arr_24_item in enumerate(pval):
                    arr_24_lpath: Path = ((lpath_39 if path is not None else None) + [ arr_24_idx ]) if (lpath_39 if path is not None else None) is not None else None
                    # .'$Model'.'|'.1.'|'.0
                    res = json_model_32(arr_24_item, arr_24_lpath if (lpath_39 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Model'.'|'.1.'|'.0]", arr_24_lpath if (lpath_39 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Model'.'|'.1.'|']", lpath_39 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Model'.'|'.1.'|']", lpath_39 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model'.'|'.1.'#']", lpath_39 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model'.'|'.1.'#']", lpath_39 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Model'.'|'.1.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Model'.'|'.1.'/^#/']", lpath_39 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model'.'|'.1]", lpath_39 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Model'.'|'.1]", path))
        return False
    return True

# object .'$Model'.'|'.0
def _jm_obj_40(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Model'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_40: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Model'.'|'.0.'@'
            res = json_model_32(pval, lpath_40 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Model'.'|'.0.'@']", lpath_40 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Model'.'|'.0.'@']", lpath_40 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Model'.'|'.0.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Model'.'|'.0.'#']", lpath_40 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model'.'|'.0.'#']", lpath_40 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Model'.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Model'.'|'.0.'!']", lpath_40 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Model'.'|'.0.'!']", lpath_40 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 3 re props
            # .'$Model'.'|'.0.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Model'.'|'.0.'/^#/']", lpath_40 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 3 re props
            # .'$Model'.'|'.0.'/^(<=|>=|<|>)$/'
            res = json_model_12(pval, lpath_40 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$Model'.'|'.0.'/^(<=|>=|<|>)$/']", lpath_40 if path is not None else None))
            if not res:
                return False
        elif _jm_re_8(prop, path, rep):
            # handle 3 re props
            # .'$Model'.'|'.0.'/^(=|!=)$/'
            res = json_model_13(pval, lpath_40 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$Model'.'|'.0.'/^(=|!=)$/']", lpath_40 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Model'.'|'.0]", lpath_40 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Model'.'|'.0]", path))
        return False
    return True


# check $Model (.'$Model')
def json_model_32(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Model'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Model'.'|']", path))
    if res:
        # .'$Model'.'|'.0
        res = _jm_obj_40(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Model'.'|'.0]", path))
        if not res:
            # .'$Model'.'|'.1
            res = _jm_obj_39(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Model'.'|'.1]", path))
            if not res:
                # .'$Model'.'|'.2
                res = _jm_obj_38(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Model'.'|'.2]", path))
                if not res:
                    # .'$Model'.'|'.3
                    res = _jm_obj_37(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Model'.'|'.3]", path))
                    if not res:
                        # .'$Model'.'|'.4
                        res = _jm_obj_36(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$Model'.'|'.4]", path))
                        if not res:
                            # .'$Model'.'|'.5
                            res = _jm_obj_35(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$Model'.'|'.5]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Model'.'|']", path))
    if not res:
        res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_5
        if not res:
            rep is None or rep.append(("value not in enum [.'$Model'.'|']", path))
        if not res:
            # .'$Model'.'|'.0
            res = val is None
            if not res:
                rep is None or rep.append(("not null [.'$Model'.'|'.0]", path))
            if not res:
                # .'$Model'.'|'.1
                res = isinstance(val, bool) and val == True
                if not res:
                    rep is None or rep.append(("unexpected =true [.'$Model'.'|'.1]", path))
                if not res:
                    # .'$Model'.'|'.2
                    res = isinstance(val, int) and not isinstance(val, bool) and val == 0
                    if not res:
                        rep is None or rep.append(("unexpected =0 [.'$Model'.'|'.2]", path))
                    if not res:
                        # .'$Model'.'|'.3
                        res = isinstance(val, int) and not isinstance(val, bool) and val == 1
                        if not res:
                            rep is None or rep.append(("unexpected =1 [.'$Model'.'|'.3]", path))
                        if not res:
                            # .'$Model'.'|'.4
                            res = isinstance(val, int) and not isinstance(val, bool) and val == -1
                            if not res:
                                rep is None or rep.append(("unexpected =-1 [.'$Model'.'|'.4]", path))
                            if not res:
                                # .'$Model'.'|'.5
                                res = isinstance(val, float) and val == 0.0
                                if not res:
                                    rep is None or rep.append(("unexpected =0.0 [.'$Model'.'|'.5]", path))
                                if not res:
                                    # .'$Model'.'|'.6
                                    res = isinstance(val, float) and val == 1.0
                                    if not res:
                                        rep is None or rep.append(("unexpected =1.0 [.'$Model'.'|'.6]", path))
                                    if not res:
                                        # .'$Model'.'|'.7
                                        res = isinstance(val, float) and val == -1.0
                                        if not res:
                                            rep is None or rep.append(("unexpected =-1.0 [.'$Model'.'|'.7]", path))
                                        if not res:
                                            # .'$Model'.'|'.8
                                            res = json_model_9(val, path, rep)
                                            if not res:
                                                rep is None or rep.append(("unexpected $StrConst [.'$Model'.'|'.8]", path))
                                            if not res:
                                                # .'$Model'.'|'.9
                                                res = json_model_8(val, path, rep)
                                                if not res:
                                                    rep is None or rep.append(("unexpected $ValConst [.'$Model'.'|'.9]", path))
                                                if not res:
                                                    # .'$Model'.'|'.10
                                                    # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                                                    res = isinstance(val, str) and _jm_xre_1(val, path, rep)
                                                    if not res:
                                                        rep is None or rep.append(("unexpected /^/($EXREG)/[a-z]*X[a-z]*$/X [.'$Model'.'|'.10]", path))
                                                    if not res:
                                                        # .'$Model'.'|'.11
                                                        # "/^/($REGEX)/[a-z]*$/X"
                                                        res = isinstance(val, str) and _jm_xre_0(val, path, rep)
                                                        if not res:
                                                            rep is None or rep.append(("unexpected /^/($REGEX)/[a-z]*$/X [.'$Model'.'|'.11]", path))
                                                        if not res:
                                                            # .'$Model'.'|'.12
                                                            res = json_model_7(val, path, rep)
                                                            if not res:
                                                                rep is None or rep.append(("unexpected $Ref [.'$Model'.'|'.12]", path))
                                                            if not res:
                                                                # .'$Model'.'|'.13
                                                                res = json_model_18(val, path, rep)
                                                                if not res:
                                                                    rep is None or rep.append(("unexpected $Array [.'$Model'.'|'.13]", path))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Model'.'|']", path))
    return res

# object .'$Defs'
def _jm_obj_41(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Defs']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_41: Path = (path + [ prop ]) if path is not None else None
        if prop == "":
            # handle may  property
            # .'$Defs'.''
            res = json_model_2(pval, lpath_41 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Defs'.'']", lpath_41 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Defs'.'']", lpath_41 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_41 if path is not None else None, rep):
            # handle 1 key props
            # .'$Defs'.'$Identifier'
            res = json_model_32(pval, lpath_41 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Defs'.'$Identifier']", lpath_41 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Defs']", lpath_41 if path is not None else None))
            return False
    return True

# check $Defs (.'$Defs')
def json_model_33(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Defs'
    res = _jm_obj_41(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Defs']", path))
    return res


# object .'$Rename'
def _jm_obj_42(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Rename']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_42: Path = (path + [ prop ]) if path is not None else None
        if json_model_11(prop, lpath_42 if path is not None else None, rep):
            # handle 1 key props
            # .'$Rename'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_42 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Rename'.'$Name']", lpath_42 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Rename']", lpath_42 if path is not None else None))
            return False
    return True

# check $Rename (.'$Rename')
def json_model_34(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Rename'
    res = _jm_obj_42(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Rename']", path))
    return res


# object .'$Rewrite'
def _jm_obj_43(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Rewrite']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_43: Path = (path + [ prop ]) if path is not None else None
        if _jm_re_11(prop, path, rep):
            # handle 1 re props
            # .'$Rewrite'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_43 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Rewrite'.'/^\\\\$.*$/']", lpath_43 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Rewrite']", lpath_43 if path is not None else None))
            return False
    return True

# check $Rewrite (.'$Rewrite')
def json_model_35(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Rewrite'
    res = _jm_obj_43(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Rewrite']", path))
    return res

# object .'$Import'
def _jm_obj_44(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Import']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_44: Path = (path + [ prop ]) if path is not None else None
        if prop == "<":
            # handle may < property
            # .'$Import'.'<'
            # .'$Import'.'<'.'|'.0
            res = json_model_7(pval, lpath_44 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Import'.'<'.'|'.0]", lpath_44 if path is not None else None))
            if not res:
                # .'$Import'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_25_idx, arr_25_item in enumerate(pval):
                        arr_25_lpath: Path = ((lpath_44 if path is not None else None) + [ arr_25_idx ]) if (lpath_44 if path is not None else None) is not None else None
                        # .'$Import'.'<'.'|'.1.0
                        res = json_model_7(arr_25_item, arr_25_lpath if (lpath_44 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Import'.'<'.'|'.1.0]", arr_25_lpath if (lpath_44 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Import'.'<'.'|'.1]", lpath_44 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Import'.'<'.'|']", lpath_44 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Import'.'<']", lpath_44 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Import']", lpath_44 if path is not None else None))
            return False
    return True

# check $Import (.'$Import')
def json_model_36(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Import'
    res = _jm_obj_44(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$Import']", path))
    return res

# object .'$RootOnly'.'$'
def _jm_obj_46(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootOnly'.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_46: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootOnly'.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootOnly'.'$'.'#']", lpath_46 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'$'.'#']", lpath_46 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$RootOnly'.'$'.''
            res = json_model_2(pval, lpath_46 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootOnly'.'$'.'']", lpath_46 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'$'.'']", lpath_46 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_46 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootOnly'.'$'.'$Identifier'
            res = json_model_32(pval, lpath_46 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$RootOnly'.'$'.'$Identifier']", lpath_46 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$RootOnly'.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootOnly'.'$'.'/^#/']", lpath_46 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootOnly'.'$']", lpath_46 if path is not None else None))
            return False
    return True

# object .'$RootOnly'.'%'
def _jm_obj_47(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootOnly'.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_47: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootOnly'.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootOnly'.'%'.'#']", lpath_47 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'%'.'#']", lpath_47 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$RootOnly'.'%'.'<'
            # .'$RootOnly'.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_47 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$RootOnly'.'%'.'<'.'|'.0]", lpath_47 if path is not None else None))
            if not res:
                # .'$RootOnly'.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_26_idx, arr_26_item in enumerate(pval):
                        arr_26_lpath: Path = ((lpath_47 if path is not None else None) + [ arr_26_idx ]) if (lpath_47 if path is not None else None) is not None else None
                        # .'$RootOnly'.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_26_item, arr_26_lpath if (lpath_47 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$RootOnly'.'%'.'<'.'|'.1.0]", arr_26_lpath if (lpath_47 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$RootOnly'.'%'.'<'.'|'.1]", lpath_47 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$RootOnly'.'%'.'<'.'|']", lpath_47 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'%'.'<']", lpath_47 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_47 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootOnly'.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_47 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$RootOnly'.'%'.'$Name']", lpath_47 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$RootOnly'.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootOnly'.'%'.'/^#/']", lpath_47 if path is not None else None))
            if not res:
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$RootOnly'.'%'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_47 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$RootOnly'.'%'.'/^\\\\$.*$/']", lpath_47 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootOnly'.'%']", lpath_47 if path is not None else None))
            return False
    return True

# object .'$RootOnly'
def _jm_obj_45(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootOnly']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_45: Path = (path + [ prop ]) if path is not None else None
        if prop == "~":
            # handle may ~ property
            # .'$RootOnly'.'~'
            res = json_model_2(pval, lpath_45 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootOnly'.'~']", lpath_45 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'~']", lpath_45 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$RootOnly'.'$'
            res = _jm_obj_46(pval, lpath_45 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootOnly'.'$']", lpath_45 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'$']", lpath_45 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$RootOnly'.'%'
            res = _jm_obj_47(pval, lpath_45 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootOnly'.'%']", lpath_45 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootOnly'.'%']", lpath_45 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootOnly']", lpath_45 if path is not None else None))
            return False
    return True

# check $RootOnly (.'$RootOnly')
def json_model_37(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # symbols that can only appear at the model's root
    # .'$RootOnly'
    res = _jm_obj_45(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected element [.'$RootOnly']", path))
    return res

# object .'$Root'.'|'.5.'$'
def _jm_obj_49(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.5.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_49: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.5.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.5.'$'.'#']", lpath_49 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'$'.'#']", lpath_49 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.5.'$'.''
            res = json_model_2(pval, lpath_49 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.5.'$'.'']", lpath_49 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'$'.'']", lpath_49 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_49 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.5.'$'.'$Identifier'
            res = json_model_32(pval, lpath_49 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.5.'$'.'$Identifier']", lpath_49 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.5.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.5.'$'.'/^#/']", lpath_49 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.5.'$']", lpath_49 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.5.'%'
def _jm_obj_50(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.5.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_50: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.5.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.5.'%'.'#']", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'%'.'#']", lpath_50 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.5.'%'.'<'
            # .'$Root'.'|'.5.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_50 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.5.'%'.'<'.'|'.0]", lpath_50 if path is not None else None))
            if not res:
                # .'$Root'.'|'.5.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_27_idx, arr_27_item in enumerate(pval):
                        arr_27_lpath: Path = ((lpath_50 if path is not None else None) + [ arr_27_idx ]) if (lpath_50 if path is not None else None) is not None else None
                        # .'$Root'.'|'.5.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_27_item, arr_27_lpath if (lpath_50 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.5.'%'.'<'.'|'.1.0]", arr_27_lpath if (lpath_50 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.5.'%'.'<'.'|'.1]", lpath_50 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Root'.'|'.5.'%'.'<'.'|']", lpath_50 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'%'.'<']", lpath_50 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_50 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.5.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_50 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.5.'%'.'$Name']", lpath_50 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$Root'.'|'.5.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.5.'%'.'/^#/']", lpath_50 if path is not None else None))
            if not res:
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.5.'%'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_50 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Root'.'|'.5.'%'.'/^\\\\$.*$/']", lpath_50 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.5.'%']", lpath_50 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.5
def _jm_obj_48(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_48: Path = (path + [ prop ]) if path is not None else None
        if prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.5.'~'
            res = json_model_2(pval, lpath_48 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.5.'~']", lpath_48 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'~']", lpath_48 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.5.'$'
            res = _jm_obj_49(pval, lpath_48 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.5.'$']", lpath_48 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'$']", lpath_48 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.5.'%'
            res = _jm_obj_50(pval, lpath_48 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.5.'%']", lpath_48 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'%']", lpath_48 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.5.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.5.'#']", lpath_48 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.5.'#']", lpath_48 if path is not None else None))
                return False
        elif json_model_25(prop, lpath_48 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.5.'$Prop'
            res = json_model_32(pval, lpath_48 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.5.'$Prop']", lpath_48 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.5.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.5.'/^#/']", lpath_48 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.5]", lpath_48 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.4.'$'
def _jm_obj_52(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.4.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_52: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.4.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.4.'$'.'#']", lpath_52 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'$'.'#']", lpath_52 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.4.'$'.''
            res = json_model_2(pval, lpath_52 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.4.'$'.'']", lpath_52 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'$'.'']", lpath_52 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_52 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.4.'$'.'$Identifier'
            res = json_model_32(pval, lpath_52 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.4.'$'.'$Identifier']", lpath_52 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.4.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.4.'$'.'/^#/']", lpath_52 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.4.'$']", lpath_52 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.4.'%'
def _jm_obj_53(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.4.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_53: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.4.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.4.'%'.'#']", lpath_53 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'%'.'#']", lpath_53 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.4.'%'.'<'
            # .'$Root'.'|'.4.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_53 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.4.'%'.'<'.'|'.0]", lpath_53 if path is not None else None))
            if not res:
                # .'$Root'.'|'.4.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_29_idx, arr_29_item in enumerate(pval):
                        arr_29_lpath: Path = ((lpath_53 if path is not None else None) + [ arr_29_idx ]) if (lpath_53 if path is not None else None) is not None else None
                        # .'$Root'.'|'.4.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_29_item, arr_29_lpath if (lpath_53 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.4.'%'.'<'.'|'.1.0]", arr_29_lpath if (lpath_53 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.4.'%'.'<'.'|'.1]", lpath_53 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Root'.'|'.4.'%'.'<'.'|']", lpath_53 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'%'.'<']", lpath_53 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_53 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.4.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_53 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.4.'%'.'$Name']", lpath_53 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$Root'.'|'.4.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.4.'%'.'/^#/']", lpath_53 if path is not None else None))
            if not res:
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.4.'%'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_53 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Root'.'|'.4.'%'.'/^\\\\$.*$/']", lpath_53 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.4.'%']", lpath_53 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.4
def _jm_obj_51(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_51: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$Root'.'|'.4.'+'
            res = isinstance(pval, list)
            if res:
                for arr_28_idx, arr_28_item in enumerate(pval):
                    arr_28_lpath: Path = ((lpath_51 if path is not None else None) + [ arr_28_idx ]) if (lpath_51 if path is not None else None) is not None else None
                    # .'$Root'.'|'.4.'+'.0
                    res = json_model_32(arr_28_item, arr_28_lpath if (lpath_51 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.4.'+'.0]", arr_28_lpath if (lpath_51 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.4.'+']", lpath_51 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.4.'+']", lpath_51 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.4.'~'
            res = json_model_2(pval, lpath_51 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.4.'~']", lpath_51 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'~']", lpath_51 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.4.'$'
            res = _jm_obj_52(pval, lpath_51 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.4.'$']", lpath_51 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'$']", lpath_51 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.4.'%'
            res = _jm_obj_53(pval, lpath_51 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.4.'%']", lpath_51 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'%']", lpath_51 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.4.'#']", lpath_51 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.4.'#']", lpath_51 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.4.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.4.'/^#/']", lpath_51 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.4]", lpath_51 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$Root'.'|'.4]", path))
        return False
    return True

# object .'$Root'.'|'.3.'$'
def _jm_obj_55(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.3.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_55: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.3.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.3.'$'.'#']", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'$'.'#']", lpath_55 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.3.'$'.''
            res = json_model_2(pval, lpath_55 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.3.'$'.'']", lpath_55 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'$'.'']", lpath_55 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_55 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.3.'$'.'$Identifier'
            res = json_model_32(pval, lpath_55 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.3.'$'.'$Identifier']", lpath_55 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.3.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.3.'$'.'/^#/']", lpath_55 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.3.'$']", lpath_55 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.3.'%'
def _jm_obj_56(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.3.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_56: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.3.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.3.'%'.'#']", lpath_56 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'%'.'#']", lpath_56 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.3.'%'.'<'
            # .'$Root'.'|'.3.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_56 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.3.'%'.'<'.'|'.0]", lpath_56 if path is not None else None))
            if not res:
                # .'$Root'.'|'.3.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_31_idx, arr_31_item in enumerate(pval):
                        arr_31_lpath: Path = ((lpath_56 if path is not None else None) + [ arr_31_idx ]) if (lpath_56 if path is not None else None) is not None else None
                        # .'$Root'.'|'.3.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_31_item, arr_31_lpath if (lpath_56 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.3.'%'.'<'.'|'.1.0]", arr_31_lpath if (lpath_56 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.3.'%'.'<'.'|'.1]", lpath_56 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Root'.'|'.3.'%'.'<'.'|']", lpath_56 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'%'.'<']", lpath_56 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_56 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.3.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_56 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.3.'%'.'$Name']", lpath_56 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$Root'.'|'.3.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.3.'%'.'/^#/']", lpath_56 if path is not None else None))
            if not res:
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.3.'%'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_56 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Root'.'|'.3.'%'.'/^\\\\$.*$/']", lpath_56 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.3.'%']", lpath_56 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.3
def _jm_obj_54(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_54: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$Root'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_30_idx, arr_30_item in enumerate(pval):
                    arr_30_lpath: Path = ((lpath_54 if path is not None else None) + [ arr_30_idx ]) if (lpath_54 if path is not None else None) is not None else None
                    # .'$Root'.'|'.3.'^'.0
                    res = json_model_32(arr_30_item, arr_30_lpath if (lpath_54 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.3.'^'.0]", arr_30_lpath if (lpath_54 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.3.'^']", lpath_54 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.3.'^']", lpath_54 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.3.'~'
            res = json_model_2(pval, lpath_54 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.3.'~']", lpath_54 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'~']", lpath_54 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.3.'$'
            res = _jm_obj_55(pval, lpath_54 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.3.'$']", lpath_54 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'$']", lpath_54 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.3.'%'
            res = _jm_obj_56(pval, lpath_54 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.3.'%']", lpath_54 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'%']", lpath_54 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.3.'#']", lpath_54 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.3.'#']", lpath_54 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.3.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.3.'/^#/']", lpath_54 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.3]", lpath_54 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$Root'.'|'.3]", path))
        return False
    return True

# object .'$Root'.'|'.2.'$'
def _jm_obj_58(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.2.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_58: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.2.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.2.'$'.'#']", lpath_58 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'$'.'#']", lpath_58 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.2.'$'.''
            res = json_model_2(pval, lpath_58 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.2.'$'.'']", lpath_58 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'$'.'']", lpath_58 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_58 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.2.'$'.'$Identifier'
            res = json_model_32(pval, lpath_58 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.2.'$'.'$Identifier']", lpath_58 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.2.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.2.'$'.'/^#/']", lpath_58 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.2.'$']", lpath_58 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.2.'%'
def _jm_obj_59(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.2.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_59: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.2.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.2.'%'.'#']", lpath_59 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'%'.'#']", lpath_59 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.2.'%'.'<'
            # .'$Root'.'|'.2.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_59 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.2.'%'.'<'.'|'.0]", lpath_59 if path is not None else None))
            if not res:
                # .'$Root'.'|'.2.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_33_idx, arr_33_item in enumerate(pval):
                        arr_33_lpath: Path = ((lpath_59 if path is not None else None) + [ arr_33_idx ]) if (lpath_59 if path is not None else None) is not None else None
                        # .'$Root'.'|'.2.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_33_item, arr_33_lpath if (lpath_59 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.2.'%'.'<'.'|'.1.0]", arr_33_lpath if (lpath_59 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.2.'%'.'<'.'|'.1]", lpath_59 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Root'.'|'.2.'%'.'<'.'|']", lpath_59 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'%'.'<']", lpath_59 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_59 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.2.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_59 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.2.'%'.'$Name']", lpath_59 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$Root'.'|'.2.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.2.'%'.'/^#/']", lpath_59 if path is not None else None))
            if not res:
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.2.'%'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_59 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Root'.'|'.2.'%'.'/^\\\\$.*$/']", lpath_59 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.2.'%']", lpath_59 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.2
def _jm_obj_57(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_57: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$Root'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_32_idx, arr_32_item in enumerate(pval):
                    arr_32_lpath: Path = ((lpath_57 if path is not None else None) + [ arr_32_idx ]) if (lpath_57 if path is not None else None) is not None else None
                    # .'$Root'.'|'.2.'&'.0
                    res = json_model_32(arr_32_item, arr_32_lpath if (lpath_57 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.2.'&'.0]", arr_32_lpath if (lpath_57 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.2.'&']", lpath_57 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.2.'&']", lpath_57 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.2.'~'
            res = json_model_2(pval, lpath_57 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.2.'~']", lpath_57 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'~']", lpath_57 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.2.'$'
            res = _jm_obj_58(pval, lpath_57 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.2.'$']", lpath_57 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'$']", lpath_57 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.2.'%'
            res = _jm_obj_59(pval, lpath_57 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.2.'%']", lpath_57 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'%']", lpath_57 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.2.'#']", lpath_57 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.2.'#']", lpath_57 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.2.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.2.'/^#/']", lpath_57 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.2]", lpath_57 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$Root'.'|'.2]", path))
        return False
    return True

# object .'$Root'.'|'.1.'$'
def _jm_obj_61(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.1.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_61: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.1.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.1.'$'.'#']", lpath_61 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'$'.'#']", lpath_61 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.1.'$'.''
            res = json_model_2(pval, lpath_61 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.1.'$'.'']", lpath_61 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'$'.'']", lpath_61 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_61 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.1.'$'.'$Identifier'
            res = json_model_32(pval, lpath_61 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.1.'$'.'$Identifier']", lpath_61 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.1.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.1.'$'.'/^#/']", lpath_61 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.1.'$']", lpath_61 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.1.'%'
def _jm_obj_62(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.1.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_62: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.1.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.1.'%'.'#']", lpath_62 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'%'.'#']", lpath_62 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.1.'%'.'<'
            # .'$Root'.'|'.1.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_62 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.1.'%'.'<'.'|'.0]", lpath_62 if path is not None else None))
            if not res:
                # .'$Root'.'|'.1.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_35_idx, arr_35_item in enumerate(pval):
                        arr_35_lpath: Path = ((lpath_62 if path is not None else None) + [ arr_35_idx ]) if (lpath_62 if path is not None else None) is not None else None
                        # .'$Root'.'|'.1.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_35_item, arr_35_lpath if (lpath_62 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.1.'%'.'<'.'|'.1.0]", arr_35_lpath if (lpath_62 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.1.'%'.'<'.'|'.1]", lpath_62 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Root'.'|'.1.'%'.'<'.'|']", lpath_62 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'%'.'<']", lpath_62 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_62 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.1.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_62 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.1.'%'.'$Name']", lpath_62 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$Root'.'|'.1.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.1.'%'.'/^#/']", lpath_62 if path is not None else None))
            if not res:
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.1.'%'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_62 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Root'.'|'.1.'%'.'/^\\\\$.*$/']", lpath_62 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.1.'%']", lpath_62 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.1
def _jm_obj_60(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_60: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$Root'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_34_idx, arr_34_item in enumerate(pval):
                    arr_34_lpath: Path = ((lpath_60 if path is not None else None) + [ arr_34_idx ]) if (lpath_60 if path is not None else None) is not None else None
                    # .'$Root'.'|'.1.'|'.0
                    res = json_model_32(arr_34_item, arr_34_lpath if (lpath_60 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.1.'|'.0]", arr_34_lpath if (lpath_60 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.1.'|']", lpath_60 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.1.'|']", lpath_60 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.1.'~'
            res = json_model_2(pval, lpath_60 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.1.'~']", lpath_60 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'~']", lpath_60 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.1.'$'
            res = _jm_obj_61(pval, lpath_60 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.1.'$']", lpath_60 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'$']", lpath_60 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.1.'%'
            res = _jm_obj_62(pval, lpath_60 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.1.'%']", lpath_60 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'%']", lpath_60 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.1.'#']", lpath_60 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.1.'#']", lpath_60 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.1.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.1.'/^#/']", lpath_60 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.1]", lpath_60 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$Root'.'|'.1]", path))
        return False
    return True

# object .'$Root'.'|'.0.'$'
def _jm_obj_64(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.0.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_64: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.0.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.0.'$'.'#']", lpath_64 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'$'.'#']", lpath_64 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$Root'.'|'.0.'$'.''
            res = json_model_2(pval, lpath_64 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.0.'$'.'']", lpath_64 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'$'.'']", lpath_64 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_64 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.0.'$'.'$Identifier'
            res = json_model_32(pval, lpath_64 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.0.'$'.'$Identifier']", lpath_64 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$Root'.'|'.0.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.0.'$'.'/^#/']", lpath_64 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.0.'$']", lpath_64 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.0.'%'
def _jm_obj_65(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.0.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_65: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$Root'.'|'.0.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.0.'%'.'#']", lpath_65 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'%'.'#']", lpath_65 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$Root'.'|'.0.'%'.'<'
            # .'$Root'.'|'.0.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_65 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.0.'%'.'<'.'|'.0]", lpath_65 if path is not None else None))
            if not res:
                # .'$Root'.'|'.0.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_36_idx, arr_36_item in enumerate(pval):
                        arr_36_lpath: Path = ((lpath_65 if path is not None else None) + [ arr_36_idx ]) if (lpath_65 if path is not None else None) is not None else None
                        # .'$Root'.'|'.0.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_36_item, arr_36_lpath if (lpath_65 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$Root'.'|'.0.'%'.'<'.'|'.1.0]", arr_36_lpath if (lpath_65 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$Root'.'|'.0.'%'.'<'.'|'.1]", lpath_65 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$Root'.'|'.0.'%'.'<'.'|']", lpath_65 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'%'.'<']", lpath_65 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_65 if path is not None else None, rep):
            # handle 1 key props
            # .'$Root'.'|'.0.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_65 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$Root'.'|'.0.'%'.'$Name']", lpath_65 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$Root'.'|'.0.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.0.'%'.'/^#/']", lpath_65 if path is not None else None))
            if not res:
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$Root'.'|'.0.'%'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_65 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$Root'.'|'.0.'%'.'/^\\\\$.*$/']", lpath_65 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.0.'%']", lpath_65 if path is not None else None))
            return False
    return True

# object .'$Root'.'|'.0
def _jm_obj_63(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Root'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_63: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$Root'.'|'.0.'@'
            res = json_model_32(pval, lpath_63 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$Root'.'|'.0.'@']", lpath_63 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$Root'.'|'.0.'@']", lpath_63 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$Root'.'|'.0.'~'
            res = json_model_2(pval, lpath_63 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$Root'.'|'.0.'~']", lpath_63 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'~']", lpath_63 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$Root'.'|'.0.'$'
            res = _jm_obj_64(pval, lpath_63 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.0.'$']", lpath_63 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'$']", lpath_63 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$Root'.'|'.0.'%'
            res = _jm_obj_65(pval, lpath_63 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.0.'%']", lpath_63 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'%']", lpath_63 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$Root'.'|'.0.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Root'.'|'.0.'#']", lpath_63 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'#']", lpath_63 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$Root'.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Root'.'|'.0.'!']", lpath_63 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$Root'.'|'.0.'!']", lpath_63 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 3 re props
            # .'$Root'.'|'.0.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Root'.'|'.0.'/^#/']", lpath_63 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 3 re props
            # .'$Root'.'|'.0.'/^(<=|>=|<|>)$/'
            res = json_model_12(pval, lpath_63 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$Root'.'|'.0.'/^(<=|>=|<|>)$/']", lpath_63 if path is not None else None))
            if not res:
                return False
        elif _jm_re_8(prop, path, rep):
            # handle 3 re props
            # .'$Root'.'|'.0.'/^(=|!=)$/'
            res = json_model_13(pval, lpath_63 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$Root'.'|'.0.'/^(=|!=)$/']", lpath_63 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Root'.'|'.0]", lpath_63 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$Root'.'|'.0]", path))
        return False
    return True

# check $Root (.'$Root')
def json_model_38(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Root'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$Root'.'|']", path))
    if res:
        # .'$Root'.'|'.0
        res = _jm_obj_63(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$Root'.'|'.0]", path))
        if not res:
            # .'$Root'.'|'.1
            res = _jm_obj_60(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Root'.'|'.1]", path))
            if not res:
                # .'$Root'.'|'.2
                res = _jm_obj_57(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$Root'.'|'.2]", path))
                if not res:
                    # .'$Root'.'|'.3
                    res = _jm_obj_54(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$Root'.'|'.3]", path))
                    if not res:
                        # .'$Root'.'|'.4
                        res = _jm_obj_51(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$Root'.'|'.4]", path))
                        if not res:
                            # .'$Root'.'|'.5
                            res = _jm_obj_48(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$Root'.'|'.5]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$Root'.'|']", path))
    return res

# object .'$RootModel'.'|'.5.'$'
def _jm_obj_67(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.5.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_67: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.5.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.5.'$'.'#']", lpath_67 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.5.'$'.'#']", lpath_67 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$RootModel'.'|'.5.'$'.''
            res = json_model_2(pval, lpath_67 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootModel'.'|'.5.'$'.'']", lpath_67 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.5.'$'.'']", lpath_67 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_67 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootModel'.'|'.5.'$'.'$Identifier'
            res = json_model_32(pval, lpath_67 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$RootModel'.'|'.5.'$'.'$Identifier']", lpath_67 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$RootModel'.'|'.5.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.5.'$'.'/^#/']", lpath_67 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.5.'$']", lpath_67 if path is not None else None))
            return False
    return True

# object .'$RootModel'.'|'.5.'%'
def _jm_obj_68(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.5.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_68: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.5.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.5.'%'.'#']", lpath_68 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.5.'%'.'#']", lpath_68 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$RootModel'.'|'.5.'%'.'<'
            # .'$RootModel'.'|'.5.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_68 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$RootModel'.'|'.5.'%'.'<'.'|'.0]", lpath_68 if path is not None else None))
            if not res:
                # .'$RootModel'.'|'.5.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_37_idx, arr_37_item in enumerate(pval):
                        arr_37_lpath: Path = ((lpath_68 if path is not None else None) + [ arr_37_idx ]) if (lpath_68 if path is not None else None) is not None else None
                        # .'$RootModel'.'|'.5.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_37_item, arr_37_lpath if (lpath_68 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$RootModel'.'|'.5.'%'.'<'.'|'.1.0]", arr_37_lpath if (lpath_68 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$RootModel'.'|'.5.'%'.'<'.'|'.1]", lpath_68 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$RootModel'.'|'.5.'%'.'<'.'|']", lpath_68 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.5.'%'.'<']", lpath_68 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_68 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootModel'.'|'.5.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_68 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$RootModel'.'|'.5.'%'.'$Name']", lpath_68 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$RootModel'.'|'.5.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.5.'%'.'/^#/']", lpath_68 if path is not None else None))
            if not res:
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$RootModel'.'|'.5.'%'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_68 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$RootModel'.'|'.5.'%'.'/^\\\\$.*$/']", lpath_68 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.5.'%']", lpath_68 if path is not None else None))
            return False
    return True

# object .'$RootModel'.'|'.5
def _jm_obj_66(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.5]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_66: Path = (path + [ prop ]) if path is not None else None
        if prop == "~":
            # handle may ~ property
            # .'$RootModel'.'|'.5.'~'
            res = json_model_2(pval, lpath_66 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootModel'.'|'.5.'~']", lpath_66 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.5.'~']", lpath_66 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$RootModel'.'|'.5.'$'
            res = _jm_obj_67(pval, lpath_66 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.5.'$']", lpath_66 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.5.'$']", lpath_66 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$RootModel'.'|'.5.'%'
            res = _jm_obj_68(pval, lpath_66 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.5.'%']", lpath_66 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.5.'%']", lpath_66 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.5.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.5.'#']", lpath_66 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.5.'#']", lpath_66 if path is not None else None))
                return False
        elif json_model_25(prop, lpath_66 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootModel'.'|'.5.'$Prop'
            res = json_model_32(pval, lpath_66 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$RootModel'.'|'.5.'$Prop']", lpath_66 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$RootModel'.'|'.5.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.5.'/^#/']", lpath_66 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.5]", lpath_66 if path is not None else None))
            return False
    return True

# object .'$RootModel'.'|'.4.'$'
def _jm_obj_70(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.4.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_70: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.4.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.4.'$'.'#']", lpath_70 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.4.'$'.'#']", lpath_70 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$RootModel'.'|'.4.'$'.''
            res = json_model_2(pval, lpath_70 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootModel'.'|'.4.'$'.'']", lpath_70 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.4.'$'.'']", lpath_70 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_70 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootModel'.'|'.4.'$'.'$Identifier'
            res = json_model_32(pval, lpath_70 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$RootModel'.'|'.4.'$'.'$Identifier']", lpath_70 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$RootModel'.'|'.4.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.4.'$'.'/^#/']", lpath_70 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.4.'$']", lpath_70 if path is not None else None))
            return False
    return True

# object .'$RootModel'.'|'.4.'%'
def _jm_obj_71(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.4.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_71: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.4.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.4.'%'.'#']", lpath_71 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.4.'%'.'#']", lpath_71 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$RootModel'.'|'.4.'%'.'<'
            # .'$RootModel'.'|'.4.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_71 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$RootModel'.'|'.4.'%'.'<'.'|'.0]", lpath_71 if path is not None else None))
            if not res:
                # .'$RootModel'.'|'.4.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_39_idx, arr_39_item in enumerate(pval):
                        arr_39_lpath: Path = ((lpath_71 if path is not None else None) + [ arr_39_idx ]) if (lpath_71 if path is not None else None) is not None else None
                        # .'$RootModel'.'|'.4.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_39_item, arr_39_lpath if (lpath_71 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$RootModel'.'|'.4.'%'.'<'.'|'.1.0]", arr_39_lpath if (lpath_71 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$RootModel'.'|'.4.'%'.'<'.'|'.1]", lpath_71 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$RootModel'.'|'.4.'%'.'<'.'|']", lpath_71 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.4.'%'.'<']", lpath_71 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_71 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootModel'.'|'.4.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_71 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$RootModel'.'|'.4.'%'.'$Name']", lpath_71 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$RootModel'.'|'.4.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.4.'%'.'/^#/']", lpath_71 if path is not None else None))
            if not res:
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$RootModel'.'|'.4.'%'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_71 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$RootModel'.'|'.4.'%'.'/^\\\\$.*$/']", lpath_71 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.4.'%']", lpath_71 if path is not None else None))
            return False
    return True

# object .'$RootModel'.'|'.4
def _jm_obj_69(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.4]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_69: Path = (path + [ prop ]) if path is not None else None
        if prop == "+":
            # handle must + property
            must_count += 1
            # .'$RootModel'.'|'.4.'+'
            res = isinstance(pval, list)
            if res:
                for arr_38_idx, arr_38_item in enumerate(pval):
                    arr_38_lpath: Path = ((lpath_69 if path is not None else None) + [ arr_38_idx ]) if (lpath_69 if path is not None else None) is not None else None
                    # .'$RootModel'.'|'.4.'+'.0
                    res = json_model_32(arr_38_item, arr_38_lpath if (lpath_69 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$RootModel'.'|'.4.'+'.0]", arr_38_lpath if (lpath_69 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$RootModel'.'|'.4.'+']", lpath_69 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$RootModel'.'|'.4.'+']", lpath_69 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$RootModel'.'|'.4.'~'
            res = json_model_2(pval, lpath_69 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootModel'.'|'.4.'~']", lpath_69 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.4.'~']", lpath_69 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$RootModel'.'|'.4.'$'
            res = _jm_obj_70(pval, lpath_69 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.4.'$']", lpath_69 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.4.'$']", lpath_69 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$RootModel'.'|'.4.'%'
            res = _jm_obj_71(pval, lpath_69 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.4.'%']", lpath_69 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.4.'%']", lpath_69 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.4.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.4.'#']", lpath_69 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.4.'#']", lpath_69 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$RootModel'.'|'.4.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.4.'/^#/']", lpath_69 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.4]", lpath_69 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "+" in val:
                rep is None or rep.append(("missing mandatory prop <+> [.'$RootModel'.'|'.4]", path))
        return False
    return True

# object .'$RootModel'.'|'.3.'$'
def _jm_obj_73(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.3.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_73: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.3.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.3.'$'.'#']", lpath_73 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.3.'$'.'#']", lpath_73 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$RootModel'.'|'.3.'$'.''
            res = json_model_2(pval, lpath_73 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootModel'.'|'.3.'$'.'']", lpath_73 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.3.'$'.'']", lpath_73 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_73 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootModel'.'|'.3.'$'.'$Identifier'
            res = json_model_32(pval, lpath_73 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$RootModel'.'|'.3.'$'.'$Identifier']", lpath_73 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$RootModel'.'|'.3.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.3.'$'.'/^#/']", lpath_73 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.3.'$']", lpath_73 if path is not None else None))
            return False
    return True

# object .'$RootModel'.'|'.3.'%'
def _jm_obj_74(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.3.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_74: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.3.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.3.'%'.'#']", lpath_74 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.3.'%'.'#']", lpath_74 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$RootModel'.'|'.3.'%'.'<'
            # .'$RootModel'.'|'.3.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_74 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$RootModel'.'|'.3.'%'.'<'.'|'.0]", lpath_74 if path is not None else None))
            if not res:
                # .'$RootModel'.'|'.3.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_41_idx, arr_41_item in enumerate(pval):
                        arr_41_lpath: Path = ((lpath_74 if path is not None else None) + [ arr_41_idx ]) if (lpath_74 if path is not None else None) is not None else None
                        # .'$RootModel'.'|'.3.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_41_item, arr_41_lpath if (lpath_74 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$RootModel'.'|'.3.'%'.'<'.'|'.1.0]", arr_41_lpath if (lpath_74 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$RootModel'.'|'.3.'%'.'<'.'|'.1]", lpath_74 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$RootModel'.'|'.3.'%'.'<'.'|']", lpath_74 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.3.'%'.'<']", lpath_74 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_74 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootModel'.'|'.3.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_74 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$RootModel'.'|'.3.'%'.'$Name']", lpath_74 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$RootModel'.'|'.3.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.3.'%'.'/^#/']", lpath_74 if path is not None else None))
            if not res:
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$RootModel'.'|'.3.'%'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_74 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$RootModel'.'|'.3.'%'.'/^\\\\$.*$/']", lpath_74 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.3.'%']", lpath_74 if path is not None else None))
            return False
    return True

# object .'$RootModel'.'|'.3
def _jm_obj_72(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.3]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_72: Path = (path + [ prop ]) if path is not None else None
        if prop == "^":
            # handle must ^ property
            must_count += 1
            # .'$RootModel'.'|'.3.'^'
            res = isinstance(pval, list)
            if res:
                for arr_40_idx, arr_40_item in enumerate(pval):
                    arr_40_lpath: Path = ((lpath_72 if path is not None else None) + [ arr_40_idx ]) if (lpath_72 if path is not None else None) is not None else None
                    # .'$RootModel'.'|'.3.'^'.0
                    res = json_model_32(arr_40_item, arr_40_lpath if (lpath_72 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$RootModel'.'|'.3.'^'.0]", arr_40_lpath if (lpath_72 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$RootModel'.'|'.3.'^']", lpath_72 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$RootModel'.'|'.3.'^']", lpath_72 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$RootModel'.'|'.3.'~'
            res = json_model_2(pval, lpath_72 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootModel'.'|'.3.'~']", lpath_72 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.3.'~']", lpath_72 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$RootModel'.'|'.3.'$'
            res = _jm_obj_73(pval, lpath_72 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.3.'$']", lpath_72 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.3.'$']", lpath_72 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$RootModel'.'|'.3.'%'
            res = _jm_obj_74(pval, lpath_72 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.3.'%']", lpath_72 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.3.'%']", lpath_72 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.3.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.3.'#']", lpath_72 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.3.'#']", lpath_72 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$RootModel'.'|'.3.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.3.'/^#/']", lpath_72 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.3]", lpath_72 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "^" in val:
                rep is None or rep.append(("missing mandatory prop <^> [.'$RootModel'.'|'.3]", path))
        return False
    return True

# object .'$RootModel'.'|'.2.'$'
def _jm_obj_76(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.2.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_76: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.2.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.2.'$'.'#']", lpath_76 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.2.'$'.'#']", lpath_76 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$RootModel'.'|'.2.'$'.''
            res = json_model_2(pval, lpath_76 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootModel'.'|'.2.'$'.'']", lpath_76 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.2.'$'.'']", lpath_76 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_76 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootModel'.'|'.2.'$'.'$Identifier'
            res = json_model_32(pval, lpath_76 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$RootModel'.'|'.2.'$'.'$Identifier']", lpath_76 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$RootModel'.'|'.2.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.2.'$'.'/^#/']", lpath_76 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.2.'$']", lpath_76 if path is not None else None))
            return False
    return True

# object .'$RootModel'.'|'.2.'%'
def _jm_obj_77(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.2.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_77: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.2.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.2.'%'.'#']", lpath_77 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.2.'%'.'#']", lpath_77 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$RootModel'.'|'.2.'%'.'<'
            # .'$RootModel'.'|'.2.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_77 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$RootModel'.'|'.2.'%'.'<'.'|'.0]", lpath_77 if path is not None else None))
            if not res:
                # .'$RootModel'.'|'.2.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_43_idx, arr_43_item in enumerate(pval):
                        arr_43_lpath: Path = ((lpath_77 if path is not None else None) + [ arr_43_idx ]) if (lpath_77 if path is not None else None) is not None else None
                        # .'$RootModel'.'|'.2.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_43_item, arr_43_lpath if (lpath_77 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$RootModel'.'|'.2.'%'.'<'.'|'.1.0]", arr_43_lpath if (lpath_77 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$RootModel'.'|'.2.'%'.'<'.'|'.1]", lpath_77 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$RootModel'.'|'.2.'%'.'<'.'|']", lpath_77 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.2.'%'.'<']", lpath_77 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_77 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootModel'.'|'.2.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_77 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$RootModel'.'|'.2.'%'.'$Name']", lpath_77 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$RootModel'.'|'.2.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.2.'%'.'/^#/']", lpath_77 if path is not None else None))
            if not res:
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$RootModel'.'|'.2.'%'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_77 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$RootModel'.'|'.2.'%'.'/^\\\\$.*$/']", lpath_77 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.2.'%']", lpath_77 if path is not None else None))
            return False
    return True

# object .'$RootModel'.'|'.2
def _jm_obj_75(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.2]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_75: Path = (path + [ prop ]) if path is not None else None
        if prop == "&":
            # handle must & property
            must_count += 1
            # .'$RootModel'.'|'.2.'&'
            res = isinstance(pval, list)
            if res:
                for arr_42_idx, arr_42_item in enumerate(pval):
                    arr_42_lpath: Path = ((lpath_75 if path is not None else None) + [ arr_42_idx ]) if (lpath_75 if path is not None else None) is not None else None
                    # .'$RootModel'.'|'.2.'&'.0
                    res = json_model_32(arr_42_item, arr_42_lpath if (lpath_75 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$RootModel'.'|'.2.'&'.0]", arr_42_lpath if (lpath_75 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$RootModel'.'|'.2.'&']", lpath_75 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$RootModel'.'|'.2.'&']", lpath_75 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$RootModel'.'|'.2.'~'
            res = json_model_2(pval, lpath_75 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootModel'.'|'.2.'~']", lpath_75 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.2.'~']", lpath_75 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$RootModel'.'|'.2.'$'
            res = _jm_obj_76(pval, lpath_75 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.2.'$']", lpath_75 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.2.'$']", lpath_75 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$RootModel'.'|'.2.'%'
            res = _jm_obj_77(pval, lpath_75 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.2.'%']", lpath_75 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.2.'%']", lpath_75 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.2.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.2.'#']", lpath_75 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.2.'#']", lpath_75 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$RootModel'.'|'.2.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.2.'/^#/']", lpath_75 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.2]", lpath_75 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "&" in val:
                rep is None or rep.append(("missing mandatory prop <&> [.'$RootModel'.'|'.2]", path))
        return False
    return True

# object .'$RootModel'.'|'.1.'$'
def _jm_obj_79(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.1.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_79: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.1.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.1.'$'.'#']", lpath_79 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.1.'$'.'#']", lpath_79 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$RootModel'.'|'.1.'$'.''
            res = json_model_2(pval, lpath_79 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootModel'.'|'.1.'$'.'']", lpath_79 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.1.'$'.'']", lpath_79 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_79 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootModel'.'|'.1.'$'.'$Identifier'
            res = json_model_32(pval, lpath_79 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$RootModel'.'|'.1.'$'.'$Identifier']", lpath_79 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$RootModel'.'|'.1.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.1.'$'.'/^#/']", lpath_79 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.1.'$']", lpath_79 if path is not None else None))
            return False
    return True

# object .'$RootModel'.'|'.1.'%'
def _jm_obj_80(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.1.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_80: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.1.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.1.'%'.'#']", lpath_80 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.1.'%'.'#']", lpath_80 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$RootModel'.'|'.1.'%'.'<'
            # .'$RootModel'.'|'.1.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_80 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$RootModel'.'|'.1.'%'.'<'.'|'.0]", lpath_80 if path is not None else None))
            if not res:
                # .'$RootModel'.'|'.1.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_45_idx, arr_45_item in enumerate(pval):
                        arr_45_lpath: Path = ((lpath_80 if path is not None else None) + [ arr_45_idx ]) if (lpath_80 if path is not None else None) is not None else None
                        # .'$RootModel'.'|'.1.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_45_item, arr_45_lpath if (lpath_80 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$RootModel'.'|'.1.'%'.'<'.'|'.1.0]", arr_45_lpath if (lpath_80 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$RootModel'.'|'.1.'%'.'<'.'|'.1]", lpath_80 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$RootModel'.'|'.1.'%'.'<'.'|']", lpath_80 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.1.'%'.'<']", lpath_80 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_80 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootModel'.'|'.1.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_80 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$RootModel'.'|'.1.'%'.'$Name']", lpath_80 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$RootModel'.'|'.1.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.1.'%'.'/^#/']", lpath_80 if path is not None else None))
            if not res:
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$RootModel'.'|'.1.'%'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_80 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$RootModel'.'|'.1.'%'.'/^\\\\$.*$/']", lpath_80 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.1.'%']", lpath_80 if path is not None else None))
            return False
    return True

# object .'$RootModel'.'|'.1
def _jm_obj_78(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.1]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_78: Path = (path + [ prop ]) if path is not None else None
        if prop == "|":
            # handle must | property
            must_count += 1
            # .'$RootModel'.'|'.1.'|'
            res = isinstance(pval, list)
            if res:
                for arr_44_idx, arr_44_item in enumerate(pval):
                    arr_44_lpath: Path = ((lpath_78 if path is not None else None) + [ arr_44_idx ]) if (lpath_78 if path is not None else None) is not None else None
                    # .'$RootModel'.'|'.1.'|'.0
                    res = json_model_32(arr_44_item, arr_44_lpath if (lpath_78 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Model [.'$RootModel'.'|'.1.'|'.0]", arr_44_lpath if (lpath_78 if path is not None else None) is not None else None))
                    if not res:
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$RootModel'.'|'.1.'|']", lpath_78 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$RootModel'.'|'.1.'|']", lpath_78 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$RootModel'.'|'.1.'~'
            res = json_model_2(pval, lpath_78 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootModel'.'|'.1.'~']", lpath_78 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.1.'~']", lpath_78 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$RootModel'.'|'.1.'$'
            res = _jm_obj_79(pval, lpath_78 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.1.'$']", lpath_78 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.1.'$']", lpath_78 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$RootModel'.'|'.1.'%'
            res = _jm_obj_80(pval, lpath_78 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.1.'%']", lpath_78 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.1.'%']", lpath_78 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.1.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.1.'#']", lpath_78 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.1.'#']", lpath_78 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$RootModel'.'|'.1.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.1.'/^#/']", lpath_78 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.1]", lpath_78 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "|" in val:
                rep is None or rep.append(("missing mandatory prop <|> [.'$RootModel'.'|'.1]", path))
        return False
    return True

# object .'$RootModel'.'|'.0.'$'
def _jm_obj_82(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.0.'$']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_82: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.0.'$'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.0.'$'.'#']", lpath_82 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.0.'$'.'#']", lpath_82 if path is not None else None))
                return False
        elif prop == "":
            # handle may  property
            # .'$RootModel'.'|'.0.'$'.''
            res = json_model_2(pval, lpath_82 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootModel'.'|'.0.'$'.'']", lpath_82 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.0.'$'.'']", lpath_82 if path is not None else None))
                return False
        elif json_model_4(prop, lpath_82 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootModel'.'|'.0.'$'.'$Identifier'
            res = json_model_32(pval, lpath_82 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$RootModel'.'|'.0.'$'.'$Identifier']", lpath_82 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 1 re props
            # .'$RootModel'.'|'.0.'$'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.0.'$'.'/^#/']", lpath_82 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.0.'$']", lpath_82 if path is not None else None))
            return False
    return True

# object .'$RootModel'.'|'.0.'%'
def _jm_obj_83(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.0.'%']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_83: Path = (path + [ prop ]) if path is not None else None
        if prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.0.'%'.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.0.'%'.'#']", lpath_83 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.0.'%'.'#']", lpath_83 if path is not None else None))
                return False
        elif prop == "<":
            # handle may < property
            # .'$RootModel'.'|'.0.'%'.'<'
            # .'$RootModel'.'|'.0.'%'.'<'.'|'.0
            res = json_model_7(pval, lpath_83 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Ref [.'$RootModel'.'|'.0.'%'.'<'.'|'.0]", lpath_83 if path is not None else None))
            if not res:
                # .'$RootModel'.'|'.0.'%'.'<'.'|'.1
                res = isinstance(pval, list)
                if res:
                    for arr_46_idx, arr_46_item in enumerate(pval):
                        arr_46_lpath: Path = ((lpath_83 if path is not None else None) + [ arr_46_idx ]) if (lpath_83 if path is not None else None) is not None else None
                        # .'$RootModel'.'|'.0.'%'.'<'.'|'.1.0
                        res = json_model_7(arr_46_item, arr_46_lpath if (lpath_83 if path is not None else None) is not None else None, rep)
                        if not res:
                            rep is None or rep.append(("unexpected $Ref [.'$RootModel'.'|'.0.'%'.'<'.'|'.1.0]", arr_46_lpath if (lpath_83 if path is not None else None) is not None else None))
                        if not res:
                            break
                if not res:
                    rep is None or rep.append(("not array or unexpected array [.'$RootModel'.'|'.0.'%'.'<'.'|'.1]", lpath_83 if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$RootModel'.'|'.0.'%'.'<'.'|']", lpath_83 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.0.'%'.'<']", lpath_83 if path is not None else None))
                return False
        elif json_model_11(prop, lpath_83 if path is not None else None, rep):
            # handle 1 key props
            # .'$RootModel'.'|'.0.'%'.'$Name'
            # "/^([#|&^+/*@~=$%]|[<>!]=?)$/"
            res = isinstance(pval, str) and _jm_re_10(pval, lpath_83 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected /^([#|&^+/*@~=$%]|[<>!]=?)$/ [.'$RootModel'.'|'.0.'%'.'$Name']", lpath_83 if path is not None else None))
            if not res:
                return False
        elif prop.startswith("#"):
            # handle 2 re props
            # .'$RootModel'.'|'.0.'%'.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.0.'%'.'/^#/']", lpath_83 if path is not None else None))
            if not res:
                return False
        elif _jm_re_11(prop, path, rep):
            # handle 2 re props
            # .'$RootModel'.'|'.0.'%'.'/^\\$.*$/'
            res = json_model_30(pval, lpath_83 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Transformation [.'$RootModel'.'|'.0.'%'.'/^\\\\$.*$/']", lpath_83 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.0.'%']", lpath_83 if path is not None else None))
            return False
    return True

# object .'$RootModel'.'|'.0
def _jm_obj_81(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$RootModel'.'|'.0]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_81: Path = (path + [ prop ]) if path is not None else None
        if prop == "@":
            # handle must @ property
            must_count += 1
            # .'$RootModel'.'|'.0.'@'
            res = json_model_32(pval, lpath_81 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Model [.'$RootModel'.'|'.0.'@']", lpath_81 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory prop value [.'$RootModel'.'|'.0.'@']", lpath_81 if path is not None else None))
                return False
        elif prop == "~":
            # handle may ~ property
            # .'$RootModel'.'|'.0.'~'
            res = json_model_2(pval, lpath_81 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Url [.'$RootModel'.'|'.0.'~']", lpath_81 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.0.'~']", lpath_81 if path is not None else None))
                return False
        elif prop == "$":
            # handle may $ property
            # .'$RootModel'.'|'.0.'$'
            res = _jm_obj_82(pval, lpath_81 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.0.'$']", lpath_81 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.0.'$']", lpath_81 if path is not None else None))
                return False
        elif prop == "%":
            # handle may % property
            # .'$RootModel'.'|'.0.'%'
            res = _jm_obj_83(pval, lpath_81 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.0.'%']", lpath_81 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.0.'%']", lpath_81 if path is not None else None))
                return False
        elif prop == "#":
            # handle may # property
            # .'$RootModel'.'|'.0.'#'
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$RootModel'.'|'.0.'#']", lpath_81 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.0.'#']", lpath_81 if path is not None else None))
                return False
        elif prop == "!":
            # handle may ! property
            # .'$RootModel'.'|'.0.'!'
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$RootModel'.'|'.0.'!']", lpath_81 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid optional prop value [.'$RootModel'.'|'.0.'!']", lpath_81 if path is not None else None))
                return False
        elif prop.startswith("#"):
            # handle 3 re props
            # .'$RootModel'.'|'.0.'/^#/'
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$RootModel'.'|'.0.'/^#/']", lpath_81 if path is not None else None))
            if not res:
                return False
        elif _jm_re_7(prop, path, rep):
            # handle 3 re props
            # .'$RootModel'.'|'.0.'/^(<=|>=|<|>)$/'
            res = json_model_12(pval, lpath_81 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $CmpValue [.'$RootModel'.'|'.0.'/^(<=|>=|<|>)$/']", lpath_81 if path is not None else None))
            if not res:
                return False
        elif _jm_re_8(prop, path, rep):
            # handle 3 re props
            # .'$RootModel'.'|'.0.'/^(=|!=)$/'
            res = json_model_13(pval, lpath_81 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $EqValue [.'$RootModel'.'|'.0.'/^(=|!=)$/']", lpath_81 if path is not None else None))
            if not res:
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$RootModel'.'|'.0]", lpath_81 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "@" in val:
                rep is None or rep.append(("missing mandatory prop <@> [.'$RootModel'.'|'.0]", path))
        return False
    return True


# check $RootModel (.'$RootModel')
def json_model_39(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$RootModel'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type [.'$RootModel'.'|']", path))
    if res:
        # .'$RootModel'.'|'.0
        res = _jm_obj_81(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.0]", path))
        if not res:
            # .'$RootModel'.'|'.1
            res = _jm_obj_78(val, path, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.1]", path))
            if not res:
                # .'$RootModel'.'|'.2
                res = _jm_obj_75(val, path, rep)
                if not res:
                    rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.2]", path))
                if not res:
                    # .'$RootModel'.'|'.3
                    res = _jm_obj_72(val, path, rep)
                    if not res:
                        rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.3]", path))
                    if not res:
                        # .'$RootModel'.'|'.4
                        res = _jm_obj_69(val, path, rep)
                        if not res:
                            rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.4]", path))
                        if not res:
                            # .'$RootModel'.'|'.5
                            res = _jm_obj_66(val, path, rep)
                            if not res:
                                rep is None or rep.append(("unexpected element [.'$RootModel'.'|'.5]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [.'$RootModel'.'|']", path))
    if not res:
        res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_6
        if not res:
            rep is None or rep.append(("value not in enum [.'$RootModel'.'|']", path))
        if not res:
            # .'$RootModel'.'|'.0
            res = val is None
            if not res:
                rep is None or rep.append(("not null [.'$RootModel'.'|'.0]", path))
            if not res:
                # .'$RootModel'.'|'.1
                res = isinstance(val, bool) and val == True
                if not res:
                    rep is None or rep.append(("unexpected =true [.'$RootModel'.'|'.1]", path))
                if not res:
                    # .'$RootModel'.'|'.2
                    res = isinstance(val, int) and not isinstance(val, bool) and val == 0
                    if not res:
                        rep is None or rep.append(("unexpected =0 [.'$RootModel'.'|'.2]", path))
                    if not res:
                        # .'$RootModel'.'|'.3
                        res = isinstance(val, int) and not isinstance(val, bool) and val == 1
                        if not res:
                            rep is None or rep.append(("unexpected =1 [.'$RootModel'.'|'.3]", path))
                        if not res:
                            # .'$RootModel'.'|'.4
                            res = isinstance(val, int) and not isinstance(val, bool) and val == -1
                            if not res:
                                rep is None or rep.append(("unexpected =-1 [.'$RootModel'.'|'.4]", path))
                            if not res:
                                # .'$RootModel'.'|'.5
                                res = isinstance(val, float) and val == 0.0
                                if not res:
                                    rep is None or rep.append(("unexpected =0.0 [.'$RootModel'.'|'.5]", path))
                                if not res:
                                    # .'$RootModel'.'|'.6
                                    res = isinstance(val, float) and val == 1.0
                                    if not res:
                                        rep is None or rep.append(("unexpected =1.0 [.'$RootModel'.'|'.6]", path))
                                    if not res:
                                        # .'$RootModel'.'|'.7
                                        res = isinstance(val, float) and val == -1.0
                                        if not res:
                                            rep is None or rep.append(("unexpected =-1.0 [.'$RootModel'.'|'.7]", path))
                                        if not res:
                                            # .'$RootModel'.'|'.8
                                            res = json_model_9(val, path, rep)
                                            if not res:
                                                rep is None or rep.append(("unexpected $StrConst [.'$RootModel'.'|'.8]", path))
                                            if not res:
                                                # .'$RootModel'.'|'.9
                                                res = json_model_8(val, path, rep)
                                                if not res:
                                                    rep is None or rep.append(("unexpected $ValConst [.'$RootModel'.'|'.9]", path))
                                                if not res:
                                                    # .'$RootModel'.'|'.10
                                                    # "/^/($EXREG)/[a-z]*X[a-z]*$/X"
                                                    res = isinstance(val, str) and _jm_xre_1(val, path, rep)
                                                    if not res:
                                                        rep is None or rep.append(("unexpected /^/($EXREG)/[a-z]*X[a-z]*$/X [.'$RootModel'.'|'.10]", path))
                                                    if not res:
                                                        # .'$RootModel'.'|'.11
                                                        # "/^/($REGEX)/[a-z]*$/X"
                                                        res = isinstance(val, str) and _jm_xre_0(val, path, rep)
                                                        if not res:
                                                            rep is None or rep.append(("unexpected /^/($REGEX)/[a-z]*$/X [.'$RootModel'.'|'.11]", path))
                                                        if not res:
                                                            # .'$RootModel'.'|'.12
                                                            res = json_model_7(val, path, rep)
                                                            if not res:
                                                                rep is None or rep.append(("unexpected $Ref [.'$RootModel'.'|'.12]", path))
                                                            if not res:
                                                                # .'$RootModel'.'|'.13
                                                                res = json_model_18(val, path, rep)
                                                                if not res:
                                                                    rep is None or rep.append(("unexpected $Array [.'$RootModel'.'|'.13]", path))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [.'$RootModel'.'|']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_39(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $RootModel [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = re.compile("^((file|https?)://.+|\\./.*|\\.\\./.*)$")
        _jm_re_0 = lambda s, p, r: _jm_re_0_reco.search(s) is not None
        global _jm_cst_0
        _jm_cst_0 = {'$ANY', '$BOOL', '$DATE', '$DATETIME', '$EMAIL', '$EXREG', '$F16', '$F32', '$F64', '$FLOAT', '$I16', '$I32', '$I64', '$I8', '$INT', '$INTEGER', '$NONE', '$NULL', '$NUMBER', '$REGEX', '$STRING', '$TIME', '$U16', '$U32', '$U64', '$U8', '$URI', '$URL', '$UUID'}
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = re.compile("[^A-Z0-9]")
        _jm_re_1 = lambda s, p, r: _jm_re_1_reco.search(s) is not None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = re.compile("^\\w+$")
        _jm_re_2 = lambda s, p, r: _jm_re_2_reco.search(s) is not None
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = re.compile("^\\$.")
        _jm_re_3 = lambda s, p, r: _jm_re_3_reco.search(s) is not None
        global _jm_re_4_reco, _jm_re_4
        _jm_re_4_reco = re.compile("^=(null|true|false|[-+]?\\d+(\\.\\d+)?([Ee][-+]?\\d+)?)$")
        _jm_re_4 = lambda s, p, r: _jm_re_4_reco.search(s) is not None
        global _jm_re_5_reco, _jm_re_5
        _jm_re_5_reco = re.compile("^[A-Za-z0-9_]")
        _jm_re_5 = lambda s, p, r: _jm_re_5_reco.search(s) is not None
        global _jm_xre_0_re_reco, _jm_xre_0_re
        _jm_xre_0_re_reco = re.compile("^/(?<s1>.*)/[a-z]*$")
        _jm_xre_0_re = lambda s, p, r: _jm_xre_0_re_reco.search(s) is not None
        global _jm_xre_1_re_reco, _jm_xre_1_re
        _jm_xre_1_re_reco = re.compile("^/(?<s1>.*)/[a-z]*X[a-z]*$")
        _jm_xre_1_re = lambda s, p, r: _jm_xre_1_re_reco.search(s) is not None
        global _jm_re_6_reco, _jm_re_6
        _jm_re_6_reco = re.compile("^\\..+$")
        _jm_re_6 = lambda s, p, r: _jm_re_6_reco.search(s) is not None
        global _jm_cst_1
        _jm_cst_1 = {'', '$ANY', '$BOOL', '$DATE', '$DATETIME', '$EMAIL', '$EXREG', '$F16', '$F32', '$F64', '$FLOAT', '$I16', '$I32', '$I64', '$I8', '$INT', '$INTEGER', '$NONE', '$NULL', '$NUMBER', '$REGEX', '$STRING', '$TIME', '$U16', '$U32', '$U64', '$U8', '$URI', '$URL', '$UUID'}
        global _jm_re_7_reco, _jm_re_7
        _jm_re_7_reco = re.compile("^(<=|>=|<|>)$")
        _jm_re_7 = lambda s, p, r: _jm_re_7_reco.search(s) is not None
        global _jm_re_8_reco, _jm_re_8
        _jm_re_8_reco = re.compile("^(=|!=)$")
        _jm_re_8 = lambda s, p, r: _jm_re_8_reco.search(s) is not None
        global _jm_cst_2
        _jm_cst_2 = {'', '$ANY', '$BOOL', '$DATE', '$DATETIME', '$EMAIL', '$EXREG', '$F16', '$F32', '$F64', '$FLOAT', '$I16', '$I32', '$I64', '$I8', '$INT', '$INTEGER', '$NONE', '$NULL', '$NUMBER', '$REGEX', '$STRING', '$TIME', '$U16', '$U32', '$U64', '$U8', '$URI', '$URL', '$UUID'}
        global _jm_re_9_reco, _jm_re_9
        _jm_re_9_reco = re.compile("^[?!]")
        _jm_re_9 = lambda s, p, r: _jm_re_9_reco.search(s) is not None
        global _jm_cst_3
        _jm_cst_3 = {'', '$ANY', '$BOOL', '$DATE', '$DATETIME', '$EMAIL', '$EXREG', '$F16', '$F32', '$F64', '$FLOAT', '$I16', '$I32', '$I64', '$I8', '$INT', '$INTEGER', '$NONE', '$NULL', '$NUMBER', '$REGEX', '$STRING', '$TIME', '$U16', '$U32', '$U64', '$U8', '$URI', '$URL', '$UUID'}
        global _jm_cst_4
        _jm_cst_4 = {'', '$ANY', '$BOOL', '$DATE', '$DATETIME', '$EMAIL', '$EXREG', '$F16', '$F32', '$F64', '$FLOAT', '$I16', '$I32', '$I64', '$I8', '$INT', '$INTEGER', '$NONE', '$NULL', '$NUMBER', '$REGEX', '$STRING', '$TIME', '$U16', '$U32', '$U64', '$U8', '$URI', '$URL', '$UUID'}
        global _jm_cst_5
        _jm_cst_5 = {'', '$ANY', '$BOOL', '$DATE', '$DATETIME', '$EMAIL', '$EXREG', '$F16', '$F32', '$F64', '$FLOAT', '$I16', '$I32', '$I64', '$I8', '$INT', '$INTEGER', '$NONE', '$NULL', '$NUMBER', '$REGEX', '$STRING', '$TIME', '$U16', '$U32', '$U64', '$U8', '$URI', '$URL', '$UUID'}
        global _jm_re_10_reco, _jm_re_10
        _jm_re_10_reco = re.compile("^([#|&^+/*@~=$%]|[<>!]=?)$")
        _jm_re_10 = lambda s, p, r: _jm_re_10_reco.search(s) is not None
        global _jm_re_11_reco, _jm_re_11
        _jm_re_11_reco = re.compile("^\\$.*$")
        _jm_re_11 = lambda s, p, r: _jm_re_11_reco.search(s) is not None
        global _jm_cst_6
        _jm_cst_6 = {'', '$ANY', '$BOOL', '$DATE', '$DATETIME', '$EMAIL', '$EXREG', '$F16', '$F32', '$F64', '$FLOAT', '$I16', '$I32', '$I64', '$I8', '$INT', '$INTEGER', '$NONE', '$NULL', '$NUMBER', '$REGEX', '$STRING', '$TIME', '$U16', '$U32', '$U64', '$U8', '$URI', '$URL', '$UUID'}
        global check_model_map
        check_model_map = {
            "": json_model_39,
            "Url": json_model_2,
            "PreDef": json_model_3,
            "Identifier": json_model_4,
            "ArrayComment": json_model_5,
            "ObjectComment": json_model_6,
            "Ref": json_model_7,
            "ValConst": json_model_8,
            "StrConst": json_model_9,
            "Regex": json_model_10,
            "Name": json_model_11,
            "CmpValue": json_model_12,
            "EqValue": json_model_13,
            "ValModel": json_model_14,
            "StrModel": json_model_15,
            "Any": json_model_16,
            "None": json_model_17,
            "Array": json_model_18,
            "Common": json_model_6,
            "Constraint": json_model_20,
            "Or": json_model_21,
            "And": json_model_22,
            "Xor": json_model_23,
            "Add": json_model_24,
            "Prop": json_model_25,
            "Obj": json_model_26,
            "Elem": json_model_27,
            "Element": json_model_28,
            "Trafo": json_model_29,
            "Transformation": json_model_30,
            "ScalarModel": json_model_31,
            "Model": json_model_32,
            "Defs": json_model_33,
            "Rename": json_model_34,
            "Rewrite": json_model_35,
            "Import": json_model_36,
            "RootOnly": json_model_37,
            "Root": json_model_38,
            "RootModel": json_model_39,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False
        global _jm_re_0_reco, _jm_re_0
        _jm_re_0_reco = None
        _jm_re_0 = None
        global _jm_re_1_reco, _jm_re_1
        _jm_re_1_reco = None
        _jm_re_1 = None
        global _jm_re_2_reco, _jm_re_2
        _jm_re_2_reco = None
        _jm_re_2 = None
        global _jm_re_3_reco, _jm_re_3
        _jm_re_3_reco = None
        _jm_re_3 = None
        global _jm_re_4_reco, _jm_re_4
        _jm_re_4_reco = None
        _jm_re_4 = None
        global _jm_re_5_reco, _jm_re_5
        _jm_re_5_reco = None
        _jm_re_5 = None
        global _jm_xre_0_re_reco, _jm_xre_0_re
        _jm_xre_0_re_reco = None
        _jm_xre_0_re = None
        global _jm_xre_1_re_reco, _jm_xre_1_re
        _jm_xre_1_re_reco = None
        _jm_xre_1_re = None
        global _jm_re_6_reco, _jm_re_6
        _jm_re_6_reco = None
        _jm_re_6 = None
        global _jm_re_7_reco, _jm_re_7
        _jm_re_7_reco = None
        _jm_re_7 = None
        global _jm_re_8_reco, _jm_re_8
        _jm_re_8_reco = None
        _jm_re_8 = None
        global _jm_re_9_reco, _jm_re_9
        _jm_re_9_reco = None
        _jm_re_9 = None
        global _jm_re_10_reco, _jm_re_10
        _jm_re_10_reco = None
        _jm_re_10 = None
        global _jm_re_11_reco, _jm_re_11
        _jm_re_11_reco = None
        _jm_re_11 = None

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
