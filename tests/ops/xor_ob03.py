#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_obj_1_must: PropMap
_jm_obj_2_must: PropMap
_jm_obj_3_must: PropMap
_jm_map_0: dict[str, str]
_jm_obj_0_must: PropMap
check_model_map: PropMap

# check _jm_obj_1_must_t ($.movie.'|'.0.t)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.movie.'|'.0.t
    res = isinstance(val, str) and val == "fr"
    if not res:
        rep is None or rep.append(("unexpected fr [$.movie.'|'.0.t]", path))
    return res

# check _jm_obj_1_must_titre ($.movie.'|'.0.titre)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.movie.'|'.0.titre
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.movie.'|'.0.titre]", path))
    return res


# object $.movie.'|'.0
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.movie.'|'.0]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_1_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_1 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.movie.'|'.0]", lpath_1 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.movie.'|'.0]", lpath_1 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.movie.'|'.0]", path))
        return False
    return True

# check _jm_obj_2_must_t ($.movie.'|'.1.t)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.movie.'|'.1.t
    res = isinstance(val, str) and val == "en"
    if not res:
        rep is None or rep.append(("unexpected en [$.movie.'|'.1.t]", path))
    return res

# check _jm_obj_2_must_title ($.movie.'|'.1.title)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.movie.'|'.1.title
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.movie.'|'.1.title]", path))
    return res


# object $.movie.'|'.1
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.movie.'|'.1]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_2_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_2 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.movie.'|'.1]", lpath_2 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.movie.'|'.1]", lpath_2 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.movie.'|'.1]", path))
        return False
    return True

# check _jm_obj_3_must_suti ($.movie.'|'.2.suti)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.movie.'|'.2.suti
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.movie.'|'.2.suti]", path))
    return res

# check _jm_obj_3_must_t ($.movie.'|'.2.t)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.movie.'|'.2.t
    res = isinstance(val, str) and val == "ru"
    if not res:
        rep is None or rep.append(("unexpected ru [$.movie.'|'.2.t]", path))
    return res


# object $.movie.'|'.2
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.movie.'|'.2]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_3_must.get(prop):
            # handle 2 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_3 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.movie.'|'.2]", lpath_3 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.movie.'|'.2]", lpath_3 if path is not None else None))
            return False
    if must_count != 2:
        rep is None or rep.append(("missing must prop [$.movie.'|'.2]", path))
        return False
    return True


# check _jm_obj_0_must_movie ($.movie)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.movie
    res = isinstance(val, dict)
    if res:
        tag_0: Jsonable = val.get("t", UNDEFINED)
        if tag_0 != UNDEFINED:
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag t value not found [$.movie.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop t is missing [$.movie.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [$.movie.'|']", path))
    return res


# object $
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_0 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$]", lpath_0 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$]", lpath_0 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$]", path))
        return False
    return True

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_obj_1_must
        _jm_obj_1_must = {
            "t": _jm_f_1,
            "titre": _jm_f_2,
        }
        global _jm_obj_2_must
        _jm_obj_2_must = {
            "t": _jm_f_3,
            "title": _jm_f_4,
        }
        global _jm_obj_3_must
        _jm_obj_3_must = {
            "suti": _jm_f_5,
            "t": _jm_f_6,
        }
        global _jm_map_0
        _jm_map_0 = {
            "fr": _jm_obj_1,
            "en": _jm_obj_2,
            "ru": _jm_obj_3,
        }
        global _jm_obj_0_must
        _jm_obj_0_must = {
            "movie": _jm_f_0,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
