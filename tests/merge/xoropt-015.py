# Generated for model: xoropt-015.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

json_model_2_must: PropMap
json_model_3_must: PropMap
jm_obj_0_must: PropMap
jm_obj_0_may: PropMap
jm_obj_1_must: PropMap
jm_obj_1_may: PropMap

# define "json_model_2_must_X" ($.X.X)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.X.X
    result = isinstance(value, str)
    return result

# define "json_model_3_must_Y" ($.Y.Y)
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.Y.Y
    result = isinstance(value, str)
    return result

# define "jm_obj_0_must_X" ($.E.'|'.0.X)
def jm_f_2(value: Jsonable, path: str) -> bool:
    # $.E.'|'.0.X
    result = isinstance(value, str)
    return result

# define "jm_obj_0_may_Z" ($.E.'|'.0.Z)
def jm_f_3(value: Jsonable, path: str) -> bool:
    # $.E.'|'.0.Z
    result = isinstance(value, str)
    return result

# define "jm_obj_1_must_Y" ($.E.'|'.1.Y)
def jm_f_4(value: Jsonable, path: str) -> bool:
    # $.E.'|'.1.Y
    result = isinstance(value, str)
    return result

# define "jm_obj_1_may_Z" ($.E.'|'.1.Z)
def jm_f_5(value: Jsonable, path: str) -> bool:
    # $.E.'|'.1.Z
    result = isinstance(value, str)
    return result


# define "$V" ($.V)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.V
    # $.V.'|'.0
    result = isinstance(value, int) and not isinstance(value, bool)
    if not result:
        # $.V.'|'.1
        result = isinstance(value, str)
    return result


# object $.X
def json_model_2(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_2_must:  # must
            must_count += 1
            if not json_model_2_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.Y
def json_model_3(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in json_model_3_must:  # must
            must_count += 1
            if not json_model_3_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1




# object $.E.'|'.0
def jm_obj_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_0_must:  # must
            must_count += 1
            if not jm_obj_0_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_0_may:  # may
            if not jm_obj_0_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1


# object $.E.'|'.1
def jm_obj_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_1_must:  # must
            must_count += 1
            if not jm_obj_1_must[prop](model, f"{path}.{prop}"):
                return False
        elif prop in jm_obj_1_may:  # may
            if not jm_obj_1_may[prop](model, f"{path}.{prop}"):
                return False
        else:  # no catch all
            return False
    return must_count == 1

# define "$E" ($.E)
def json_model_4(value: Jsonable, path: str) -> bool:
    # $.E
    result = isinstance(value, dict)
    if result:
        # $.E.'|'.0
        result = jm_obj_0(value, path)
        if not result:
            # $.E.'|'.1
            result = jm_obj_1(value, path)
    return result

# define "$M" ($.M)
def json_model_5(value: Jsonable, path: str) -> bool:
    # $.M
    xc_0 = 0
    if xc_0 <= 1:
        # $.M.'^'.0
        xr_0 = json_model_1(value, path)
        if xr_0: xc_0 += 1
    if xc_0 <= 1:
        # $.M.'^'.1
        xr_0 = json_model_4(value, path)
        if xr_0: xc_0 += 1
    result = xc_0 == 1
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = json_model_5(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
json_model_2_must = {
    "X": jm_f_0,
}
json_model_3_must = {
    "Y": jm_f_1,
}
jm_obj_0_must = {
    "X": jm_f_2,
}
jm_obj_0_may = {
    "Z": jm_f_3,
}
jm_obj_1_must = {
    "Y": jm_f_4,
}
jm_obj_1_may = {
    "Z": jm_f_5,
}


