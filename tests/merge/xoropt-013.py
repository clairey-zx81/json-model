# Generated for model: xoropt-013.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

jm_obj_0_must: PropMap
# regex "/.../"
jm_re_0 = re.compile("...").search
jm_obj_1_must: PropMap

# define "jm_obj_0_must_a" ($.'^'.0.a)
def jm_f_0(value: Jsonable, path: str) -> bool:
    # $.'^'.0.a
    result = isinstance(value, str)
    return result

# define "jm_obj_1_must_b" ($.'^'.1.b)
def jm_f_1(value: Jsonable, path: str) -> bool:
    # $.'^'.1.b
    result = isinstance(value, str)
    return result



# object $.'^'.0
def jm_obj_0(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_0_must:  # must
            must_count += 1
            if not jm_obj_0_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # catch all
            # $.'^'.0.''
            # "/.../"
            result = isinstance(model, str) and jm_re_0(model) is not None
            if not result: return False
    return must_count == 1


# object $.'^'.1
def jm_obj_1(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, model in value.items():
        assert isinstance(prop, str)
        if prop in jm_obj_1_must:  # must
            must_count += 1
            if not jm_obj_1_must[prop](model, f"{path}.{prop}"):
                return False
        else:  # catch all
            # $.'^'.1.''
            # "/.../"
            result = isinstance(model, str) and jm_re_0(model) is not None
            if not result: return False
    return must_count == 1

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    xc_0 = 0
    if xc_0 <= 1:
        # $.'^'.0
        xr_0 = jm_obj_0(value, path)
        if xr_0: xc_0 += 1
    if xc_0 <= 1:
        # $.'^'.1
        xr_0 = jm_obj_1(value, path)
        if xr_0: xc_0 += 1
    result = xc_0 == 1
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


# object properties maps
jm_obj_0_must = {
    "a": jm_f_0,
}
jm_obj_1_must = {
    "b": jm_f_1,
}


