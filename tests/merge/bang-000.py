#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_obj_0_must: PropMap
_jm_obj_0_may: PropMap
check_model_map: PropMap

# check _jm_obj_0_must_! ($.'!')
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'!'
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.'!']", path))
    return res

# check _jm_obj_0_must_/ ($.'/')
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'/'
    res = isinstance(val, int) and not isinstance(val, bool) and val == 17
    if not res:
        rep is None or rep.append(("unexpected =17 [$.'/']", path))
    return res

# check _jm_obj_0_must_? ($.'?')
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'?'
    res = isinstance(val, float) and val >= 0.0
    if not res:
        rep is None or rep.append(("not a 0.0 strict float [$.'?']", path))
    return res

# check _jm_obj_0_must__ ($._)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $._
    res = isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a bool [$._]", path))
    return res

# check _jm_obj_0_must_a ($.a)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.a
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [$.a]", path))
    return res


# check _jm_obj_0_may_b ($.b)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.b
    res = val is None
    if not res:
        rep is None or rep.append(("not null [$.b]", path))
    return res


# object $
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_must.get(prop):
            # handle 5 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_0 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$]", lpath_0 if path is not None else None))
                    return False
        elif pfun := _jm_obj_0_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_0 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$]", lpath_0 if path is not None else None))
            return False
    if must_count != 5:
        rep is None or rep.append(("missing must prop [$]", path))
        return False
    return True

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_obj_0_must
        _jm_obj_0_must = {
            "!": _jm_f_0,
            "/": _jm_f_1,
            "?": _jm_f_2,
            "_": _jm_f_3,
            "a": _jm_f_4,
        }
        global _jm_obj_0_may
        _jm_obj_0_may = {
            "b": _jm_f_5,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
