# Generated for model: bang-000.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

json_model_0_must: PropMap
json_model_0_may: PropMap

# define "json_model_0_must_!" ($.'!')
def jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'!'
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_0_must__" ($._)
def jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $._
    result = isinstance(value, bool)
    return result

# define "json_model_0_must_a" ($.a)
def jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "json_model_0_must_?" ($.'?')
def jm_f_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'?'
    result = isinstance(value, float) and value >= 0.0
    return result

# define "json_model_0_must_/" ($.'/')
def jm_f_4(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'/'
    result = isinstance(value, int) and not isinstance(value, bool) and value == 17
    return result

# define "json_model_0_may_b" ($.b)
def jm_f_5(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.b
    result = value is None
    return result



# object $
def json_model_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in json_model_0_must:  # must
            must_count += 1
            if not json_model_0_must[prop](val, lpath, rep):
                return False
        elif prop in json_model_0_may:  # may
            if not json_model_0_may[prop](val, lpath, rep):
                return False
        else:  # no catch all
            return False
    result = must_count == 5
    return result



# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_0(value, path, rep)


# object properties maps
json_model_0_must = {
    "!": jm_f_0,
    "_": jm_f_1,
    "a": jm_f_2,
    "?": jm_f_3,
    "/": jm_f_4,
}
json_model_0_may = {
    "b": jm_f_5,
}


