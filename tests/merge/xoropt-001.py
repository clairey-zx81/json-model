# Generated for model: xoropt-001.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]


# define "$N" ($.N)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.N
    result = value is None
    return result

# define "$B" ($.B)
def json_model_2(value: Jsonable, path: str) -> bool:
    # $.B
    result = isinstance(value, bool)
    return result

# define "$I" ($.I)
def json_model_3(value: Jsonable, path: str) -> bool:
    # $.I
    result = isinstance(value, int) and not isinstance(value, bool)
    return result

# define "$F" ($.F)
def json_model_4(value: Jsonable, path: str) -> bool:
    # $.F
    result = isinstance(value, float)
    return result

# define "$S" ($.S)
def json_model_5(value: Jsonable, path: str) -> bool:
    # $.S
    result = isinstance(value, str)
    return result

# define "$A" ($.A)
def json_model_6(value: Jsonable, path: str) -> bool:
    # $.A
    result = isinstance(value, list)
    if result:
        assert isinstance(value, list)  # pyright helper
        for array_0_idx, array_0_item in enumerate(value):
            # $.A.0
            result = json_model_8(array_0_item, path)
            if not result: break
    return result


# object $.O
def json_model_7(value: Jsonable, path: str) -> bool:
    if not isinstance(value, dict):
        return False
    for prop, model in value.items():
        assert isinstance(prop, str)
        # $.O.''
        result = json_model_8(model, path)
        if not result: return False
    return True



# define "$Any" ($.Any)
def json_model_8(value: Jsonable, path: str) -> bool:
    # $.Any
    # $.Any.'|'.0
    result = value is None
    if not result:
        # $.Any.'|'.1
        result = json_model_2(value, path)
        if not result:
            # $.Any.'|'.2
            result = json_model_3(value, path)
            if not result:
                # $.Any.'|'.3
                result = json_model_4(value, path)
                if not result:
                    # $.Any.'|'.4
                    result = json_model_5(value, path)
                    if not result:
                        # $.Any.'|'.5
                        result = json_model_6(value, path)
                        if not result:
                            # $.Any.'|'.6
                            result = json_model_7(value, path)
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = json_model_8(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


