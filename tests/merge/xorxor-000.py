# Generated for model: xorxor-000.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_date(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            datetime.date.fromisoformat(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False


# define "$X" ($.X)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.X
    # $.X.'|'.0
    result = value is None
    if not result:
        # $.X.'|'.1
        result = isinstance(value, bool)
        if not result:
            # $.X.'|'.2
            result = isinstance(value, int) and not isinstance(value, bool) and value >= 1
            if not result:
                # $.X.'|'.3
                result = isinstance(value, float) and value > 0.0
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    xc_0 = 0
    if xc_0 <= 1:
        # $.'^'.0
        xr_0 = json_model_1(value, path)
        if xr_0: xc_0 += 1
    if xc_0 <= 1:
        # $.'^'.1
        xr_0 = isinstance(value, list)
        if xr_0:
            assert isinstance(value, list)  # pyright helper
            for array_0_idx, array_0_item in enumerate(value):
                # $.'^'.1.0
                xr_0 = json_model_1(array_0_item, path)
                if not xr_0: break
        if xr_0: xc_0 += 1
    result = xc_0 == 1
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


