#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_obj_0_must: PropMap
_jm_obj_1_must: PropMap
_jm_obj_2_must: PropMap
_jm_obj_2_may: PropMap
_jm_obj_3_must: PropMap
_jm_obj_3_may: PropMap
check_model_map: PropMap

# check $V ($.'$V')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$V'
    # $.'$V'.'|'.0
    res = isinstance(val, int) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("not a -1 strict int [$.'$V'.'|'.0]", path))
    if not res:
        # $.'$V'.'|'.1
        res = isinstance(val, str)
        if not res:
            rep is None or rep.append(("unexpected string [$.'$V'.'|'.1]", path))
    if not res:
        rep is None or rep.append(("no model matched [$.'$V'.'|']", path))
    return res

# check _jm_obj_0_must_X ($.'$X'.X)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$X'.X
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$X'.X]", path))
    return res


# object $.'$X'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$X']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_0_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_0 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$X']", lpath_0 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$X']", lpath_0 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$X']", path))
        return False
    return True

# check $X ($.'$X')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$X'
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$X']", path))
    return res

# check _jm_obj_1_must_Y ($.'$Y'.Y)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Y'.Y
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$Y'.Y]", path))
    return res


# object $.'$Y'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$Y']", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_1_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_1 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$Y']", lpath_1 if path is not None else None))
                    return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$Y']", lpath_1 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$Y']", path))
        return False
    return True

# check $Y ($.'$Y')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$Y'
    res = _jm_obj_1(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object at [$.'$Y']", path))
    return res

# check _jm_obj_2_must_Y ($.'$E'.'|'.1.Y)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$E'.'|'.1.Y
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$E'.'|'.1.Y]", path))
    return res


# check _jm_obj_2_may_Z ($.'$E'.'|'.1.Z)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$E'.'|'.1.Z
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$E'.'|'.1.Z]", path))
    return res


# object $.'$E'.'|'.1
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$E'.'|'.1]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_2_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_2 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$E'.'|'.1]", lpath_2 if path is not None else None))
                    return False
        elif pfun := _jm_obj_2_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_2 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$E'.'|'.1]", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$E'.'|'.1]", lpath_2 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$E'.'|'.1]", path))
        return False
    return True

# check _jm_obj_3_must_X ($.'$E'.'|'.0.X)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$E'.'|'.0.X
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$E'.'|'.0.X]", path))
    return res


# check _jm_obj_3_may_Z ($.'$E'.'|'.0.Z)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$E'.'|'.0.Z
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [$.'$E'.'|'.0.Z]", path))
    return res


# object $.'$E'.'|'.0
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [$.'$E'.'|'.0]", path))
        return False
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if pfun := _jm_obj_3_must.get(prop):
            # handle 1 must props
            if pfun != UNDEFINED:
                must_count += 1
                if not pfun(pval, lpath_3 if path is not None else None, rep):
                    rep is None or rep.append(("invalid must property value [$.'$E'.'|'.0]", lpath_3 if path is not None else None))
                    return False
        elif pfun := _jm_obj_3_may.get(prop):
            # handle {len(may)} may props
            if pfun != UNDEFINED and not pfun(pval, lpath_3 if path is not None else None, rep):
                rep is None or rep.append(("invalid may property value [$.'$E'.'|'.0]", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("no other prop expected [$.'$E'.'|'.0]", lpath_3 if path is not None else None))
            return False
    if must_count != 1:
        rep is None or rep.append(("missing must prop [$.'$E'.'|'.0]", path))
        return False
    return True

# check $E ($.'$E')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$E'
    res = isinstance(val, dict)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'$E'.'|']", path))
    if res:
        # $.'$E'.'|'.0
        res = _jm_obj_3(val, path, rep)
        if not res:
            rep is None or rep.append(("not an expected object at [$.'$E'.'|'.0]", path))
        if not res:
            # $.'$E'.'|'.1
            res = _jm_obj_2(val, path, rep)
            if not res:
                rep is None or rep.append(("not an expected object at [$.'$E'.'|'.1]", path))
        if not res:
            rep is None or rep.append(("no model matched [$.'$E'.'|']", path))
    return res

# check $M ($.'$M')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $.'$M'
    # generic xor list
    xc_0: int = 0
    xr_0: bool
    # $.'$M'.'^'.0
    xr_0 = json_model_2(val, path, rep)
    if not xr_0:
        rep is None or rep.append(("unexpected $V [$.'$M'.'^'.0]", path))
    if xr_0:
        xc_0 += 1
    # $.'$M'.'^'.1
    xr_0 = json_model_5(val, path, rep)
    if not xr_0:
        rep is None or rep.append(("unexpected $E [$.'$M'.'^'.1]", path))
    if xr_0:
        xc_0 += 1
    res = xc_0 == 1
    if not res:
        rep is None or rep.append(("not one model match [$.'$M'.'^']", path))
    return res

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = json_model_6(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $M [$]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_obj_0_must
        _jm_obj_0_must = {
            "X": _jm_f_0,
        }
        global _jm_obj_1_must
        _jm_obj_1_must = {
            "Y": _jm_f_1,
        }
        global _jm_obj_2_must
        _jm_obj_2_must = {
            "Y": _jm_f_2,
        }
        global _jm_obj_2_may
        _jm_obj_2_may = {
            "Z": _jm_f_3,
        }
        global _jm_obj_3_must
        _jm_obj_3_must = {
            "X": _jm_f_4,
        }
        global _jm_obj_3_may
        _jm_obj_3_may = {
            "Z": _jm_f_5,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "V": json_model_2,
            "X": json_model_3,
            "Y": json_model_4,
            "E": json_model_5,
            "M": json_model_6,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
