# Generated for model: xoropt-003.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type CheckFun = Callable[[Jsonable, str], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

def is_valid_re(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            re.compile(value)
            return True
        except:
            return False
    return False

def is_valid_date(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            datetime.date.fromisoformat(value)
            return True
        except:
            return False
    return False

def is_valid_url(value: Jsonable, path: str) -> bool:
    if isinstance(value, str):
        try:
            urllib.parse.urlparse(value)
            return True
        except:
            return False
    return False

# regex "/[a-z]/"
jm_re_0 = re.compile("[a-z]").search

# define "$A" ($.A)
def json_model_1(value: Jsonable, path: str) -> bool:
    # $.A
    # $.A.'|'.0
    result = isinstance(value, bool)
    if not result:
        # $.A.'|'.1
        result = isinstance(value, int) and not isinstance(value, bool) and value >= 1
        if not result:
            # $.A.'|'.2
            result = isinstance(value, float) and value > 0.0
            if not result:
                # $.A.'|'.3
                # "/[a-z]/"
                result = isinstance(value, str) and jm_re_0(value) is not None
    return result

# define "$" ($)
def json_model_0(value: Jsonable, path: str) -> bool:
    # $
    result = json_model_1(value, path)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$") -> bool:
    return json_model_0(value, path)


