#! /bin/env python
#
# Model: dis-004.model.json
#
# Generated by jmc (JSON Model Compiler) (https://github.com/clairey-zx81/json-model)
#

from typing import Callable
import re as re
import datetime
import urllib.parse

type Jsonable = None|bool|int|float|str|list[Jsonable]|dict[str, Jsonable]
type Path = list[str]
type Report = list[str]|None
type CheckFun = Callable[[Jsonable, str, Report], bool]
type PropMap = dict[str, CheckFun]
type TagMap = dict[None|bool|float|int|str, CheckFun]

# extract type name
def _tname(value: Jsonable) -> str:
    return type(value).__name__

# maybe add message to report
def _rep(msg: str, rep: Report) -> bool:
    rep is None or rep.append(msg)
    return False

_jm_obj_0_must: PropMap
_jm_obj_1_must: PropMap
_jm_obj_2_must: PropMap

# define "_jm_obj_0_must_a" ($.'$A'.'|'.0.a)
def _jm_f_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$A'.'|'.0.a
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result

# define "_jm_obj_1_must_b" ($.'$A'.'|'.1.b)
def _jm_f_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$A'.'|'.1.b
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 1
    return result

# define "_jm_obj_2_must_c" ($.'$B'.'|'.0.c)
def _jm_f_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$B'.'|'.0.c
    result = isinstance(value, int) and not isinstance(value, bool) and value >= 0
    return result



# object $.'$A'.'|'.0
def _jm_obj_0(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_0_must:  # must
            must_count += 1
            if not _jm_obj_0_must[prop](val, lpath, rep):
                return False
        else:  # no catch all
            return False
    result = must_count == 1
    return result


# object $.'$A'.'|'.1
def _jm_obj_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_1_must:  # must
            must_count += 1
            if not _jm_obj_1_must[prop](val, lpath, rep):
                return False
        else:  # no catch all
            return False
    result = must_count == 1
    return result

# define "$A" ($.'$A')
def json_model_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$A'
    result = isinstance(value, dict)
    if result:
        # $.'$A'.'|'.0
        result = _jm_obj_0(value, path, rep)
        if not result:
            # $.'$A'.'|'.1
            result = _jm_obj_1(value, path, rep)
    return result


# object $.'$B'.'|'.0
def _jm_obj_2(value: Jsonable, path: str, rep: Report = None) -> bool:
    if not isinstance(value, dict):
        return False
    must_count = 0
    for prop, val in value.items():
        assert isinstance(prop, str)
        lpath = path + "." + prop
        if prop in _jm_obj_2_must:  # must
            must_count += 1
            if not _jm_obj_2_must[prop](val, lpath, rep):
                return False
        else:  # no catch all
            return False
    result = must_count == 1
    return result

# define "$B" ($.'$B')
def json_model_3(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $.'$B'
    # $.'$B'.'|'.0
    result = _jm_obj_2(value, path, rep)
    if not result:
        # $.'$B'.'|'.1
        result = json_model_2(value, path, rep)
    return result

# define "$" ($)
def json_model_1(value: Jsonable, path: str, rep: Report = None) -> bool:
    # $
    result = json_model_3(value, path, rep)
    return result

# entry function check_model
def check_model(value: Jsonable, path: str = "$", rep: Report = None) -> bool:
    return json_model_1(value, path, rep)


# object properties maps
_jm_obj_0_must = {
    "a": _jm_f_0,
}
_jm_obj_1_must = {
    "b": _jm_f_1,
}
_jm_obj_2_must = {
    "c": _jm_f_2,
}


# possibly run as a script: $0 values...
if __name__ == "__main__":
    import json
    import sys
    for fn in sys.argv[1:]:
        try:
            with open(fn) as f:
                value = json.load(f)
            reasons = []
            if check_model(value, "", reasons):
                print(f"{fn}: PASS")
            else:
                print(f"{fn}: FAIL {reasons}")
        except Exception as e:
            print(f"{fn}: ERROR ({e})")

