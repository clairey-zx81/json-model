#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = isinstance(val, list)
    if res:
        for arr_0_idx, arr_0_item in enumerate(val):
            arr_0_lpath: Path = (path + [ arr_0_idx ]) if path is not None else None
            # $.0
            # $.0.'|'.0
            res = isinstance(arr_0_item, str)
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("unexpected string [$.0.'|'.0]", arr_0_lpath if path is not None else None))
            if not res:
                # $.0.'|'.1
                res = isinstance(arr_0_item, list) and len(arr_0_item) == 2
                if res:
                    lpath_1: Path = ((arr_0_lpath if path is not None else None) + [ 0 ]) if (arr_0_lpath if path is not None else None) is not None else None
                    # $.0.'|'.1.0
                    res = isinstance(arr_0_item[0], bool)
                    if res:
                        rep is None or rep.clear()
                    else:
                        rep is None or rep.append(("not a bool [$.0.'|'.1.0]", lpath_1 if (arr_0_lpath if path is not None else None) is not None else None))
                    if res:
                        lpath_1: Path = ((arr_0_lpath if path is not None else None) + [ 1 ]) if (arr_0_lpath if path is not None else None) is not None else None
                        # $.0.'|'.1.1
                        res = True
                        if res:
                            rep is None or rep.clear()
                        else:
                            rep is None or rep.append(("unexpected $ANY [$.0.'|'.1.1]", lpath_1 if (arr_0_lpath if path is not None else None) is not None else None))
                if res:
                    rep is None or rep.clear()
                else:
                    rep is None or rep.append(("not array or unexpected array [$.0.'|'.1]", arr_0_lpath if path is not None else None))
                if not res:
                    # $.0.'|'.2
                    res = isinstance(arr_0_item, list) and len(arr_0_item) == 3
                    if res:
                        lpath_0: Path = ((arr_0_lpath if path is not None else None) + [ 0 ]) if (arr_0_lpath if path is not None else None) is not None else None
                        # $.0.'|'.2.0
                        res = isinstance(arr_0_item[0], bool)
                        if res:
                            rep is None or rep.clear()
                        else:
                            rep is None or rep.append(("not a bool [$.0.'|'.2.0]", lpath_0 if (arr_0_lpath if path is not None else None) is not None else None))
                        if res:
                            lpath_0: Path = ((arr_0_lpath if path is not None else None) + [ 1 ]) if (arr_0_lpath if path is not None else None) is not None else None
                            # $.0.'|'.2.1
                            res = isinstance(arr_0_item[1], str)
                            if res:
                                rep is None or rep.clear()
                            else:
                                rep is None or rep.append(("unexpected string [$.0.'|'.2.1]", lpath_0 if (arr_0_lpath if path is not None else None) is not None else None))
                            if res:
                                lpath_0: Path = ((arr_0_lpath if path is not None else None) + [ 2 ]) if (arr_0_lpath if path is not None else None) is not None else None
                                # $.0.'|'.2.2
                                res = True
                                if res:
                                    rep is None or rep.clear()
                                else:
                                    rep is None or rep.append(("unexpected $ANY [$.0.'|'.2.2]", lpath_0 if (arr_0_lpath if path is not None else None) is not None else None))
                    if res:
                        rep is None or rep.clear()
                    else:
                        rep is None or rep.append(("not array or unexpected array [$.0.'|'.2]", arr_0_lpath if path is not None else None))
            if res:
                rep is None or rep.clear()
            else:
                rep is None or rep.append(("no model matched [$.0.'|']", arr_0_lpath if path is not None else None))
            if not res:
                break
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not array or unexpected array [$]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
