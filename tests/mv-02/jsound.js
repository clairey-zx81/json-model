#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

let _jm_map_0 = new Map()
let _jm_cst_0 = new Set()
let _jm_cst_1 = new Set()
var check_model_map = new Map()

// object .'$Schema'.metadata
function _jm_obj_0(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'$Schema'.metadata]", path])
        return false;
    }
    let res;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_1 = path ? path.concat([prop]) : null;
        if (prop == "date")
        {
            // handle may date property
            // .'$Schema'.metadata.date
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'$Schema'.metadata.date]", (path ? lpath_1 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Schema'.metadata.date]", (path ? lpath_1 : null)])
                return false;
            }
        }
        else if (prop == "name")
        {
            // handle may name property
            // .'$Schema'.metadata.name
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'$Schema'.metadata.name]", (path ? lpath_1 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Schema'.metadata.name]", (path ? lpath_1 : null)])
                return false;
            }
        }
        else if (prop == "authors")
        {
            // handle may authors property
            // .'$Schema'.metadata.authors
            res = Array.isArray(pval);
            if (res)
            {
                for (let arr_1_idx = 0; arr_1_idx < pval.length; arr_1_idx++)
                {
                    let arr_1_item = pval[arr_1_idx]
                    let arr_1_lpath = (path ? lpath_1 : null) ? (path ? lpath_1 : null).concat([arr_1_idx]) : null;
                    // .'$Schema'.metadata.authors.0
                    res = (typeof arr_1_item === 'string' || arr_1_item instanceof String);
                    if (! res)
                    {
                        rep !== null && rep.push(["unexpected string [.'$Schema'.metadata.authors.0]", ((path ? lpath_1 : null) ? arr_1_lpath : null)])
                        break;
                    }
                }
            }
            if (! res)
            {
                rep !== null && rep.push(["not array or unexpected array [.'$Schema'.metadata.authors]", (path ? lpath_1 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Schema'.metadata.authors]", (path ? lpath_1 : null)])
                return false;
            }
        }
        else if (prop == "previous")
        {
            // handle may previous property
            // .'$Schema'.metadata.previous
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'$Schema'.metadata.previous]", (path ? lpath_1 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Schema'.metadata.previous]", (path ? lpath_1 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.'$Schema'.metadata]", (path ? lpath_1 : null)])
            return false;
        }
    }
    return true;
}

// check $Schema (.'$Schema')
function json_model_2(val, path, rep)
{
    // .'$Schema'
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'$Schema']", path])
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_0 = path ? path.concat([prop]) : null;
        if (prop == "types")
        {
            // handle must types property
            must_count += 1;
            // .'$Schema'.types
            res = Array.isArray(pval);
            if (res)
            {
                for (let arr_0_idx = 0; arr_0_idx < pval.length; arr_0_idx++)
                {
                    let arr_0_item = pval[arr_0_idx]
                    let arr_0_lpath = (path ? lpath_0 : null) ? (path ? lpath_0 : null).concat([arr_0_idx]) : null;
                    // .'$Schema'.types.0
                    res = json_model_3(arr_0_item, ((path ? lpath_0 : null) ? arr_0_lpath : null), rep);
                    if (! res)
                    {
                        rep !== null && rep.push(["unexpected $Type [.'$Schema'.types.0]", ((path ? lpath_0 : null) ? arr_0_lpath : null)])
                        break;
                    }
                }
            }
            if (! res)
            {
                rep !== null && rep.push(["not array or unexpected array [.'$Schema'.types]", (path ? lpath_0 : null)])
                rep !== null && rep.push(["invalid mandatory prop value [.'$Schema'.types]", (path ? lpath_0 : null)])
                return false;
            }
        }
        else if (prop == "metadata")
        {
            // handle may metadata property
            // .'$Schema'.metadata
            res = _jm_obj_0(pval, (path ? lpath_0 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected element [.'$Schema'.metadata]", (path ? lpath_0 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Schema'.metadata]", (path ? lpath_0 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.'$Schema']", (path ? lpath_0 : null)])
            return false;
        }
    }
    if (must_count != 1)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("types"))
            {
                rep !== null && rep.push(["missing mandatory prop <types> [.'$Schema']", path])
            }
        }
        return false;
    }
    return true;
}


// check $Type (.'$Type')
function json_model_3(val, path, rep)
{
    let res;
    // .'$Type'
    let iso_0 = Object.prototype.toString.call(val) === '[object Object]';
    res = iso_0;
    if (res)
    {
        if (val.hasOwnProperty("kind"))
        {
            let tag_0 = val["kind"];
            let fun_0 = _jm_map_0.get(tag_0);
            if (fun_0 !== undefined)
            {
                res = fun_0(val, path, rep);
            }
            else
            {
                res = false;
                rep !== null && rep.push(["tag <kind> value not found [.'$Type'.'|']", path])
            }
        }
        else
        {
            res = false;
            rep !== null && rep.push(["tag prop <kind> is missing [.'$Type'.'|']", path])
        }
    }
    else
    {
        rep !== null && rep.push(["value is not an object [.'$Type'.'|']", path])
    }
    return res;
}


// check $atomic-types (.'$atomic-types')
function json_model_4(val, path, rep)
{
    // .'$atomic-types'
    let res = ((val === null || (typeof val === 'number' || val instanceof Number) || (typeof val === 'boolean' || val instanceof Boolean) || (typeof val === 'string' || val instanceof String))) && _jm_cst_0.has(val);
    if (! res)
    {
        rep !== null && rep.push(["value not in enum [.'$atomic-types'.'|']", path])
    }
    return res;
}

// check $atomic (.'$atomic')
function json_model_5(val, path, rep)
{
    // .'$atomic'
    // .'$atomic'.'|'.0
    let res = val === null;
    if (! res)
    {
        rep !== null && rep.push(["not null [.'$atomic'.'|'.0]", path])
    }
    if (! res)
    {
        // .'$atomic'.'|'.1
        res = (typeof val === 'boolean' || val instanceof Boolean);
        if (! res)
        {
            rep !== null && rep.push(["not a bool [.'$atomic'.'|'.1]", path])
        }
        if (! res)
        {
            // .'$atomic'.'|'.2
            res = (typeof val === 'number' || val instanceof Number) && Number.isInteger(val);
            if (! res)
            {
                rep !== null && rep.push(["not a -1 strict int [.'$atomic'.'|'.2]", path])
            }
            if (! res)
            {
                // .'$atomic'.'|'.3
                res = (typeof val === 'number' || val instanceof Number);
                if (! res)
                {
                    rep !== null && rep.push(["not a -1.0 strict float [.'$atomic'.'|'.3]", path])
                }
                if (! res)
                {
                    // .'$atomic'.'|'.4
                    res = (typeof val === 'string' || val instanceof String);
                    if (! res)
                    {
                        rep !== null && rep.push(["unexpected string [.'$atomic'.'|'.4]", path])
                    }
                }
            }
        }
    }
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["no model matched [.'$atomic'.'|']", path])
    }
    return res;
}


// check $Atomic (.'$Atomic')
function json_model_6(val, path, rep)
{
    // could there be derived atomics as well?
    // .'$Atomic'
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'$Atomic']", path])
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_2 = path ? path.concat([prop]) : null;
        if (prop == "kind")
        {
            // handle must kind property
            must_count += 1;
            // .'$Atomic'.kind
            res = ((typeof pval === 'string' || pval instanceof String)) && pval == "atomic";
            if (! res)
            {
                rep !== null && rep.push(["unexpected atomic [.'$Atomic'.kind]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid mandatory prop value [.'$Atomic'.kind]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "baseType")
        {
            // handle must baseType property
            must_count += 1;
            // .'$Atomic'.baseType
            res = json_model_4(pval, (path ? lpath_2 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $atomic-types [.'$Atomic'.baseType]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid mandatory prop value [.'$Atomic'.baseType]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "name")
        {
            // handle may name property
            // .'$Atomic'.name
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'$Atomic'.name]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Atomic'.name]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "length")
        {
            // handle may length property
            // .'$Atomic'.length
            res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
            if (! res)
            {
                rep !== null && rep.push(["not a 0 strict int [.'$Atomic'.length]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Atomic'.length]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "pattern")
        {
            // handle may pattern property
            // .'$Atomic'.pattern
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'$Atomic'.pattern]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Atomic'.pattern]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "maxLength")
        {
            // handle may maxLength property
            // .'$Atomic'.maxLength
            res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
            if (! res)
            {
                rep !== null && rep.push(["not a 0 strict int [.'$Atomic'.maxLength]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Atomic'.maxLength]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "minLength")
        {
            // handle may minLength property
            // .'$Atomic'.minLength
            res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
            if (! res)
            {
                rep !== null && rep.push(["not a 0 strict int [.'$Atomic'.minLength]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Atomic'.minLength]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "enumeration")
        {
            // handle may enumeration property
            // .'$Atomic'.enumeration
            res = Array.isArray(pval);
            if (res)
            {
                for (let arr_2_idx = 0; arr_2_idx < pval.length; arr_2_idx++)
                {
                    let arr_2_item = pval[arr_2_idx]
                    let arr_2_lpath = (path ? lpath_2 : null) ? (path ? lpath_2 : null).concat([arr_2_idx]) : null;
                    // .'$Atomic'.enumeration.0
                    res = json_model_5(arr_2_item, ((path ? lpath_2 : null) ? arr_2_lpath : null), rep);
                    if (! res)
                    {
                        rep !== null && rep.push(["unexpected $atomic [.'$Atomic'.enumeration.0]", ((path ? lpath_2 : null) ? arr_2_lpath : null)])
                        break;
                    }
                }
            }
            if (! res)
            {
                rep !== null && rep.push(["not array or unexpected array [.'$Atomic'.enumeration]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Atomic'.enumeration]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "totalDigits")
        {
            // handle may totalDigits property
            // .'$Atomic'.totalDigits
            res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
            if (! res)
            {
                rep !== null && rep.push(["not a 0 strict int [.'$Atomic'.totalDigits]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Atomic'.totalDigits]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "maxExclusive")
        {
            // handle may maxExclusive property
            // .'$Atomic'.maxExclusive
            res = json_model_5(pval, (path ? lpath_2 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $atomic [.'$Atomic'.maxExclusive]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Atomic'.maxExclusive]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "maxInclusive")
        {
            // handle may maxInclusive property
            // .'$Atomic'.maxInclusive
            res = json_model_5(pval, (path ? lpath_2 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $atomic [.'$Atomic'.maxInclusive]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Atomic'.maxInclusive]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "minExclusive")
        {
            // handle may minExclusive property
            // .'$Atomic'.minExclusive
            res = json_model_5(pval, (path ? lpath_2 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $atomic [.'$Atomic'.minExclusive]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Atomic'.minExclusive]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "minInclusive")
        {
            // handle may minInclusive property
            // .'$Atomic'.minInclusive
            res = json_model_5(pval, (path ? lpath_2 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $atomic [.'$Atomic'.minInclusive]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Atomic'.minInclusive]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "fractionDigits")
        {
            // handle may fractionDigits property
            // .'$Atomic'.fractionDigits
            res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
            if (! res)
            {
                rep !== null && rep.push(["not a 0 strict int [.'$Atomic'.fractionDigits]", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Atomic'.fractionDigits]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else if (prop == "explicitTypeZone")
        {
            // handle may explicitTypeZone property
            // .'$Atomic'.explicitTypeZone
            res = ((pval === null || (typeof pval === 'number' || pval instanceof Number) || (typeof pval === 'boolean' || pval instanceof Boolean) || (typeof pval === 'string' || pval instanceof String))) && _jm_cst_1.has(pval);
            if (! res)
            {
                rep !== null && rep.push(["value not in enum [.'$Atomic'.explicitTypeZone.'|']", (path ? lpath_2 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Atomic'.explicitTypeZone]", (path ? lpath_2 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.'$Atomic']", (path ? lpath_2 : null)])
            return false;
        }
    }
    if (must_count != 2)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("baseType"))
            {
                rep !== null && rep.push(["missing mandatory prop <baseType> [.'$Atomic']", path])
            }
            if (! val.hasOwnProperty("kind"))
            {
                rep !== null && rep.push(["missing mandatory prop <kind> [.'$Atomic']", path])
            }
        }
        return false;
    }
    return true;
}

// check $Object (.'$Object')
function json_model_7(val, path, rep)
{
    // .'$Object'
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'$Object']", path])
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_3 = path ? path.concat([prop]) : null;
        if (prop == "kind")
        {
            // handle must kind property
            must_count += 1;
            // .'$Object'.kind
            res = ((typeof pval === 'string' || pval instanceof String)) && pval == "object";
            if (! res)
            {
                rep !== null && rep.push(["unexpected object [.'$Object'.kind]", (path ? lpath_3 : null)])
                rep !== null && rep.push(["invalid mandatory prop value [.'$Object'.kind]", (path ? lpath_3 : null)])
                return false;
            }
        }
        else if (prop == "name")
        {
            // handle may name property
            // .'$Object'.name
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'$Object'.name]", (path ? lpath_3 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Object'.name]", (path ? lpath_3 : null)])
                return false;
            }
        }
        else if (prop == "closed")
        {
            // handle may closed property
            // .'$Object'.closed
            res = (typeof pval === 'boolean' || pval instanceof Boolean);
            if (! res)
            {
                rep !== null && rep.push(["not a bool [.'$Object'.closed]", (path ? lpath_3 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Object'.closed]", (path ? lpath_3 : null)])
                return false;
            }
        }
        else if (prop == "content")
        {
            // handle may content property
            // .'$Object'.content
            res = Array.isArray(pval);
            if (res)
            {
                for (let arr_3_idx = 0; arr_3_idx < pval.length; arr_3_idx++)
                {
                    let arr_3_item = pval[arr_3_idx]
                    let arr_3_lpath = (path ? lpath_3 : null) ? (path ? lpath_3 : null).concat([arr_3_idx]) : null;
                    // .'$Object'.content.0
                    res = json_model_8(arr_3_item, ((path ? lpath_3 : null) ? arr_3_lpath : null), rep);
                    if (! res)
                    {
                        rep !== null && rep.push(["unexpected $Fields [.'$Object'.content.0]", ((path ? lpath_3 : null) ? arr_3_lpath : null)])
                        break;
                    }
                }
            }
            if (! res)
            {
                rep !== null && rep.push(["not array or unexpected array [.'$Object'.content]", (path ? lpath_3 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Object'.content]", (path ? lpath_3 : null)])
                return false;
            }
        }
        else if (prop == "baseType")
        {
            // handle may baseType property
            // .'$Object'.baseType
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'$Object'.baseType]", (path ? lpath_3 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Object'.baseType]", (path ? lpath_3 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.'$Object']", (path ? lpath_3 : null)])
            return false;
        }
    }
    if (must_count != 1)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("kind"))
            {
                rep !== null && rep.push(["missing mandatory prop <kind> [.'$Object']", path])
            }
        }
        return false;
    }
    return true;
}

// check $Fields (.'$Fields')
function json_model_8(val, path, rep)
{
    // .'$Fields'
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'$Fields']", path])
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_4 = path ? path.concat([prop]) : null;
        if (prop == "name")
        {
            // handle must name property
            must_count += 1;
            // .'$Fields'.name
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'$Fields'.name]", (path ? lpath_4 : null)])
                rep !== null && rep.push(["invalid mandatory prop value [.'$Fields'.name]", (path ? lpath_4 : null)])
                return false;
            }
        }
        else if (prop == "type")
        {
            // handle must type property
            must_count += 1;
            // .'$Fields'.type
            res = json_model_11(pval, (path ? lpath_4 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $type-or-ref [.'$Fields'.type]", (path ? lpath_4 : null)])
                rep !== null && rep.push(["invalid mandatory prop value [.'$Fields'.type]", (path ? lpath_4 : null)])
                return false;
            }
        }
        else if (prop == "unique")
        {
            // handle may unique property
            // .'$Fields'.unique
            res = (typeof pval === 'boolean' || pval instanceof Boolean);
            if (! res)
            {
                rep !== null && rep.push(["not a bool [.'$Fields'.unique]", (path ? lpath_4 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Fields'.unique]", (path ? lpath_4 : null)])
                return false;
            }
        }
        else if (prop == "default")
        {
            // handle may default property
            // .'$Fields'.default
            res = true;
        }
        else if (prop == "required")
        {
            // handle may required property
            // .'$Fields'.required
            res = (typeof pval === 'boolean' || pval instanceof Boolean);
            if (! res)
            {
                rep !== null && rep.push(["not a bool [.'$Fields'.required]", (path ? lpath_4 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Fields'.required]", (path ? lpath_4 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.'$Fields']", (path ? lpath_4 : null)])
            return false;
        }
    }
    if (must_count != 2)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("name"))
            {
                rep !== null && rep.push(["missing mandatory prop <name> [.'$Fields']", path])
            }
            if (! val.hasOwnProperty("type"))
            {
                rep !== null && rep.push(["missing mandatory prop <type> [.'$Fields']", path])
            }
        }
        return false;
    }
    return true;
}

// check $Array (.'$Array')
function json_model_9(val, path, rep)
{
    // WTF about 'content'?
    // .'$Array'
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'$Array']", path])
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_5 = path ? path.concat([prop]) : null;
        if (prop == "kind")
        {
            // handle must kind property
            must_count += 1;
            // .'$Array'.kind
            res = ((typeof pval === 'string' || pval instanceof String)) && pval == "array";
            if (! res)
            {
                rep !== null && rep.push(["unexpected array [.'$Array'.kind]", (path ? lpath_5 : null)])
                rep !== null && rep.push(["invalid mandatory prop value [.'$Array'.kind]", (path ? lpath_5 : null)])
                return false;
            }
        }
        else if (prop == "name")
        {
            // handle may name property
            // .'$Array'.name
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'$Array'.name]", (path ? lpath_5 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Array'.name]", (path ? lpath_5 : null)])
                return false;
            }
        }
        else if (prop == "content")
        {
            // handle may content property
            // .'$Array'.content
            res = json_model_11(pval, (path ? lpath_5 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $type-or-ref [.'$Array'.content]", (path ? lpath_5 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Array'.content]", (path ? lpath_5 : null)])
                return false;
            }
        }
        else if (prop == "baseType")
        {
            // handle may baseType property
            // .'$Array'.baseType
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'$Array'.baseType]", (path ? lpath_5 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Array'.baseType]", (path ? lpath_5 : null)])
                return false;
            }
        }
        else if (prop == "maxLength")
        {
            // handle may maxLength property
            // .'$Array'.maxLength
            res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
            if (! res)
            {
                rep !== null && rep.push(["not a 0 strict int [.'$Array'.maxLength]", (path ? lpath_5 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Array'.maxLength]", (path ? lpath_5 : null)])
                return false;
            }
        }
        else if (prop == "minLength")
        {
            // handle may minLength property
            // .'$Array'.minLength
            res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
            if (! res)
            {
                rep !== null && rep.push(["not a 0 strict int [.'$Array'.minLength]", (path ? lpath_5 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Array'.minLength]", (path ? lpath_5 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.'$Array']", (path ? lpath_5 : null)])
            return false;
        }
    }
    if (must_count != 1)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("kind"))
            {
                rep !== null && rep.push(["missing mandatory prop <kind> [.'$Array']", path])
            }
        }
        return false;
    }
    return true;
}

// check $Union (.'$Union')
function json_model_10(val, path, rep)
{
    // jsound.jsound.json does not say that it is a type…
    // .'$Union'
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'$Union']", path])
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_6 = path ? path.concat([prop]) : null;
        if (prop == "kind")
        {
            // handle must kind property
            must_count += 1;
            // .'$Union'.kind
            res = ((typeof pval === 'string' || pval instanceof String)) && pval == "union";
            if (! res)
            {
                rep !== null && rep.push(["unexpected union [.'$Union'.kind]", (path ? lpath_6 : null)])
                rep !== null && rep.push(["invalid mandatory prop value [.'$Union'.kind]", (path ? lpath_6 : null)])
                return false;
            }
        }
        else if (prop == "name")
        {
            // handle must name property
            must_count += 1;
            // .'$Union'.name
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'$Union'.name]", (path ? lpath_6 : null)])
                rep !== null && rep.push(["invalid mandatory prop value [.'$Union'.name]", (path ? lpath_6 : null)])
                return false;
            }
        }
        else if (prop == "content")
        {
            // handle must content property
            must_count += 1;
            // .'$Union'.content
            res = Array.isArray(pval);
            if (res)
            {
                for (let arr_4_idx = 0; arr_4_idx < pval.length; arr_4_idx++)
                {
                    let arr_4_item = pval[arr_4_idx]
                    let arr_4_lpath = (path ? lpath_6 : null) ? (path ? lpath_6 : null).concat([arr_4_idx]) : null;
                    // .'$Union'.content.0
                    res = json_model_11(arr_4_item, ((path ? lpath_6 : null) ? arr_4_lpath : null), rep);
                    if (! res)
                    {
                        rep !== null && rep.push(["unexpected $type-or-ref [.'$Union'.content.0]", ((path ? lpath_6 : null) ? arr_4_lpath : null)])
                        break;
                    }
                }
            }
            if (! res)
            {
                rep !== null && rep.push(["not array or unexpected array [.'$Union'.content]", (path ? lpath_6 : null)])
                rep !== null && rep.push(["invalid mandatory prop value [.'$Union'.content]", (path ? lpath_6 : null)])
                return false;
            }
        }
        else if (prop == "baseType")
        {
            // handle may baseType property
            // .'$Union'.baseType
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'$Union'.baseType]", (path ? lpath_6 : null)])
                rep !== null && rep.push(["invalid optional prop value [.'$Union'.baseType]", (path ? lpath_6 : null)])
                return false;
            }
        }
        else
        {
            rep !== null && rep.push(["unexpected prop [.'$Union']", (path ? lpath_6 : null)])
            return false;
        }
    }
    if (must_count != 3)
    {
        if (rep !== null)
        {
            if (! val.hasOwnProperty("content"))
            {
                rep !== null && rep.push(["missing mandatory prop <content> [.'$Union']", path])
            }
            if (! val.hasOwnProperty("kind"))
            {
                rep !== null && rep.push(["missing mandatory prop <kind> [.'$Union']", path])
            }
            if (! val.hasOwnProperty("name"))
            {
                rep !== null && rep.push(["missing mandatory prop <name> [.'$Union']", path])
            }
        }
        return false;
    }
    return true;
}

// check $type-or-ref (.'$type-or-ref')
function json_model_11(val, path, rep)
{
    // .'$type-or-ref'
    // .'$type-or-ref'.'|'.0
    let res = (typeof val === 'string' || val instanceof String);
    if (! res)
    {
        rep !== null && rep.push(["unexpected string [.'$type-or-ref'.'|'.0]", path])
    }
    if (! res)
    {
        // .'$type-or-ref'.'|'.1
        res = json_model_3(val, path, rep);
        if (! res)
        {
            rep !== null && rep.push(["unexpected $Type [.'$type-or-ref'.'|'.1]", path])
        }
    }
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["no model matched [.'$type-or-ref'.'|']", path])
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    // .
    let res = json_model_2(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected $Schema [.]", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        _jm_map_0.set("atomic", json_model_6)
        _jm_map_0.set("object", json_model_7)
        _jm_map_0.set("array", json_model_9)
        _jm_map_0.set("union", json_model_10)
        _jm_cst_0.add("string")
        _jm_cst_0.add("decimal")
        _jm_cst_0.add("integer")
        _jm_cst_0.add("double")
        _jm_cst_0.add("boolean")
        _jm_cst_0.add("anyURI")
        _jm_cst_0.add("base64Binary")
        _jm_cst_0.add("hexBinary")
        _jm_cst_0.add("date")
        _jm_cst_0.add("dateTime")
        _jm_cst_0.add("time")
        _jm_cst_0.add("dateTimeStamp")
        _jm_cst_0.add("duration")
        _jm_cst_0.add("null")
        _jm_cst_1.add("required")
        _jm_cst_1.add("prohibited")
        _jm_cst_1.add("optional")
        check_model_map.set("", json_model_2)
        check_model_map.set("Schema", json_model_2)
        check_model_map.set("Type", json_model_3)
        check_model_map.set("atomic-types", json_model_4)
        check_model_map.set("atomic", json_model_5)
        check_model_map.set("Atomic", json_model_6)
        check_model_map.set("Object", json_model_7)
        check_model_map.set("Fields", json_model_8)
        check_model_map.set("Array", json_model_9)
        check_model_map.set("Union", json_model_10)
        check_model_map.set("type-or-ref", json_model_11)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
