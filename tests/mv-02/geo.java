//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class geo extends ModelChecker
{
    static public final String VERSION = "2";

    Map<Object, Checker> _jm_map_0_cmap;
    Map<Object, Checker> _jm_map_1_cmap;
    Map<Object, Checker> _jm_map_2_cmap;
    public Map<String, Checker> geo_map_pmap;

    // check $position (.'$position')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$position'
        // .'$position'.'@'
        res = json.isArray(val);
        if (res)
        {
            int arr_0_idx = -1;
            Iterator<Object> arr_0_item_loop = json.arrayIterator(val);
            while (arr_0_item_loop.hasNext())
            {
                arr_0_idx++;
                Object arr_0_item = arr_0_item_loop.next();
                Path arr_0_lpath = new Path(arr_0_idx, path);
                // .'$position'.'@'.0
                res = json.isNumber(arr_0_item);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a -1.0 loose float [.'$position'.'@'.0]", (path != null ? arr_0_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$position'.'@']", path);
        }
        if (res)
        {
            long ival_0 = json.arrayLength(val);
            res = ival_0 <= 3 && ival_0 >= 2;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.'$position']", path);
            }
        }
        return res;
    }
    
    // check $coord_array (.'$coord_array')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$coord_array'
        // .'$coord_array'.'@'
        res = json.isArray(val);
        if (res)
        {
            int arr_1_idx = -1;
            Iterator<Object> arr_1_item_loop = json.arrayIterator(val);
            while (arr_1_item_loop.hasNext())
            {
                arr_1_idx++;
                Object arr_1_item = arr_1_item_loop.next();
                Path arr_1_lpath = new Path(arr_1_idx, path);
                // .'$coord_array'.'@'.0
                res = json_model_2(arr_1_item, (path != null ? arr_1_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $position [.'$coord_array'.'@'.0]", (path != null ? arr_1_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$coord_array'.'@']", path);
        }
        if (res)
        {
            long ival_1 = json.arrayLength(val);
            res = ival_1 >= 2;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.'$coord_array']", path);
            }
        }
        return res;
    }
    
    // check $linear_ring (.'$linear_ring')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$linear_ring'
        // .'$linear_ring'.'@'
        res = json.isArray(val);
        if (res)
        {
            int arr_2_idx = -1;
            Iterator<Object> arr_2_item_loop = json.arrayIterator(val);
            while (arr_2_item_loop.hasNext())
            {
                arr_2_idx++;
                Object arr_2_item = arr_2_item_loop.next();
                Path arr_2_lpath = new Path(arr_2_idx, path);
                // .'$linear_ring'.'@'.0
                res = json_model_2(arr_2_item, (path != null ? arr_2_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $position [.'$linear_ring'.'@'.0]", (path != null ? arr_2_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$linear_ring'.'@']", path);
        }
        if (res)
        {
            long ival_2 = json.arrayLength(val);
            res = ival_2 >= 4;
            if (! res)
            {
                if (rep != null) rep.addEntry("constraints failed [.'$linear_ring']", path);
            }
        }
        return res;
    }
    
    // object .'$Point'
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Point']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (prop.compareTo("type") == 0)
            {
                // handle must type property
                must_count += 1;
                // .'$Point'.type
                res = json.isString(pval) && json.asString(pval).compareTo("Point") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected Point [.'$Point'.type]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Point'.type]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("coordinates") == 0)
            {
                // handle must coordinates property
                must_count += 1;
                // .'$Point'.coordinates
                res = json_model_2(pval, (path != null ? lpath_0 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $position [.'$Point'.coordinates]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Point'.coordinates]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("bbox") == 0)
            {
                // handle may bbox property
                // .'$Point'.bbox
                res = json.isArray(pval);
                if (res)
                {
                    int arr_3_idx = -1;
                    Iterator<Object> arr_3_item_loop = json.arrayIterator(pval);
                    while (arr_3_item_loop.hasNext())
                    {
                        arr_3_idx++;
                        Object arr_3_item = arr_3_item_loop.next();
                        Path arr_3_lpath = new Path(arr_3_idx, (path != null ? lpath_0 : null));
                        // .'$Point'.bbox.0
                        res = json.isNumber(arr_3_item);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Point'.bbox.0]", ((path != null ? lpath_0 : null) != null ? arr_3_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$Point'.bbox]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Point'.bbox]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$Point']", (path != null ? lpath_0 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "coordinates"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$Point']", path);
                }
                if (! json.objectHasProp(val, "type"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Point']", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $Point (.'$Point')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Point'
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$Point']", path);
        }
        return res;
    }
    
    // object .'$MultiPoint'
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$MultiPoint']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            if (prop.compareTo("type") == 0)
            {
                // handle must type property
                must_count += 1;
                // .'$MultiPoint'.type
                res = json.isString(pval) && json.asString(pval).compareTo("MultiPoint") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected MultiPoint [.'$MultiPoint'.type]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$MultiPoint'.type]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("coordinates") == 0)
            {
                // handle must coordinates property
                must_count += 1;
                // .'$MultiPoint'.coordinates
                res = json.isArray(pval);
                if (res)
                {
                    int arr_4_idx = -1;
                    Iterator<Object> arr_4_item_loop = json.arrayIterator(pval);
                    while (arr_4_item_loop.hasNext())
                    {
                        arr_4_idx++;
                        Object arr_4_item = arr_4_item_loop.next();
                        Path arr_4_lpath = new Path(arr_4_idx, (path != null ? lpath_1 : null));
                        // .'$MultiPoint'.coordinates.0
                        res = json_model_2(arr_4_item, ((path != null ? lpath_1 : null) != null ? arr_4_lpath : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $position [.'$MultiPoint'.coordinates.0]", ((path != null ? lpath_1 : null) != null ? arr_4_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiPoint'.coordinates]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$MultiPoint'.coordinates]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("bbox") == 0)
            {
                // handle may bbox property
                // .'$MultiPoint'.bbox
                res = json.isArray(pval);
                if (res)
                {
                    int arr_5_idx = -1;
                    Iterator<Object> arr_5_item_loop = json.arrayIterator(pval);
                    while (arr_5_item_loop.hasNext())
                    {
                        arr_5_idx++;
                        Object arr_5_item = arr_5_item_loop.next();
                        Path arr_5_lpath = new Path(arr_5_idx, (path != null ? lpath_1 : null));
                        // .'$MultiPoint'.bbox.0
                        res = json.isNumber(arr_5_item);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not a -1.0 loose float [.'$MultiPoint'.bbox.0]", ((path != null ? lpath_1 : null) != null ? arr_5_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiPoint'.bbox]", (path != null ? lpath_1 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$MultiPoint'.bbox]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$MultiPoint']", (path != null ? lpath_1 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "coordinates"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$MultiPoint']", path);
                }
                if (! json.objectHasProp(val, "type"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$MultiPoint']", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $MultiPoint (.'$MultiPoint')
    public boolean json_model_6(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$MultiPoint'
        res = _jm_obj_1(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$MultiPoint']", path);
        }
        return res;
    }
    
    // object .'$LineString'
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$LineString']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_2 = new Path(prop, path);
            if (prop.compareTo("type") == 0)
            {
                // handle must type property
                must_count += 1;
                // .'$LineString'.type
                res = json.isString(pval) && json.asString(pval).compareTo("LineString") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected LineString [.'$LineString'.type]", (path != null ? lpath_2 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$LineString'.type]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("coordinates") == 0)
            {
                // handle must coordinates property
                must_count += 1;
                // .'$LineString'.coordinates
                res = json_model_3(pval, (path != null ? lpath_2 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $coord_array [.'$LineString'.coordinates]", (path != null ? lpath_2 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$LineString'.coordinates]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("bbox") == 0)
            {
                // handle may bbox property
                // .'$LineString'.bbox
                res = json.isArray(pval);
                if (res)
                {
                    int arr_6_idx = -1;
                    Iterator<Object> arr_6_item_loop = json.arrayIterator(pval);
                    while (arr_6_item_loop.hasNext())
                    {
                        arr_6_idx++;
                        Object arr_6_item = arr_6_item_loop.next();
                        Path arr_6_lpath = new Path(arr_6_idx, (path != null ? lpath_2 : null));
                        // .'$LineString'.bbox.0
                        res = json.isNumber(arr_6_item);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not a -1.0 loose float [.'$LineString'.bbox.0]", ((path != null ? lpath_2 : null) != null ? arr_6_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$LineString'.bbox]", (path != null ? lpath_2 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$LineString'.bbox]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$LineString']", (path != null ? lpath_2 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "coordinates"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$LineString']", path);
                }
                if (! json.objectHasProp(val, "type"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$LineString']", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $LineString (.'$LineString')
    public boolean json_model_7(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$LineString'
        res = _jm_obj_2(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$LineString']", path);
        }
        return res;
    }
    
    // object .'$MultiLineString'
    public boolean _jm_obj_3(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$MultiLineString']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_3 = new Path(prop, path);
            if (prop.compareTo("type") == 0)
            {
                // handle must type property
                must_count += 1;
                // .'$MultiLineString'.type
                res = json.isString(pval) && json.asString(pval).compareTo("MultiLineString") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected MultiLineString [.'$MultiLineString'.type]", (path != null ? lpath_3 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$MultiLineString'.type]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else if (prop.compareTo("coordinates") == 0)
            {
                // handle must coordinates property
                must_count += 1;
                // .'$MultiLineString'.coordinates
                res = json.isArray(pval);
                if (res)
                {
                    int arr_7_idx = -1;
                    Iterator<Object> arr_7_item_loop = json.arrayIterator(pval);
                    while (arr_7_item_loop.hasNext())
                    {
                        arr_7_idx++;
                        Object arr_7_item = arr_7_item_loop.next();
                        Path arr_7_lpath = new Path(arr_7_idx, (path != null ? lpath_3 : null));
                        // .'$MultiLineString'.coordinates.0
                        res = json_model_3(arr_7_item, ((path != null ? lpath_3 : null) != null ? arr_7_lpath : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $coord_array [.'$MultiLineString'.coordinates.0]", ((path != null ? lpath_3 : null) != null ? arr_7_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiLineString'.coordinates]", (path != null ? lpath_3 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$MultiLineString'.coordinates]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else if (prop.compareTo("bbox") == 0)
            {
                // handle may bbox property
                // .'$MultiLineString'.bbox
                res = json.isArray(pval);
                if (res)
                {
                    int arr_8_idx = -1;
                    Iterator<Object> arr_8_item_loop = json.arrayIterator(pval);
                    while (arr_8_item_loop.hasNext())
                    {
                        arr_8_idx++;
                        Object arr_8_item = arr_8_item_loop.next();
                        Path arr_8_lpath = new Path(arr_8_idx, (path != null ? lpath_3 : null));
                        // .'$MultiLineString'.bbox.0
                        res = json.isNumber(arr_8_item);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not a -1.0 loose float [.'$MultiLineString'.bbox.0]", ((path != null ? lpath_3 : null) != null ? arr_8_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiLineString'.bbox]", (path != null ? lpath_3 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$MultiLineString'.bbox]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$MultiLineString']", (path != null ? lpath_3 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "coordinates"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$MultiLineString']", path);
                }
                if (! json.objectHasProp(val, "type"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$MultiLineString']", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $MultiLineString (.'$MultiLineString')
    public boolean json_model_8(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$MultiLineString'
        res = _jm_obj_3(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$MultiLineString']", path);
        }
        return res;
    }
    
    // object .'$Polygon'
    public boolean _jm_obj_4(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Polygon']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_4 = new Path(prop, path);
            if (prop.compareTo("type") == 0)
            {
                // handle must type property
                must_count += 1;
                // .'$Polygon'.type
                res = json.isString(pval) && json.asString(pval).compareTo("Polygon") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected Polygon [.'$Polygon'.type]", (path != null ? lpath_4 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Polygon'.type]", (path != null ? lpath_4 : null));
                    return false;
                }
            }
            else if (prop.compareTo("coordinates") == 0)
            {
                // handle must coordinates property
                must_count += 1;
                // .'$Polygon'.coordinates
                res = json.isArray(pval);
                if (res)
                {
                    int arr_9_idx = -1;
                    Iterator<Object> arr_9_item_loop = json.arrayIterator(pval);
                    while (arr_9_item_loop.hasNext())
                    {
                        arr_9_idx++;
                        Object arr_9_item = arr_9_item_loop.next();
                        Path arr_9_lpath = new Path(arr_9_idx, (path != null ? lpath_4 : null));
                        // .'$Polygon'.coordinates.0
                        res = json_model_4(arr_9_item, ((path != null ? lpath_4 : null) != null ? arr_9_lpath : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $linear_ring [.'$Polygon'.coordinates.0]", ((path != null ? lpath_4 : null) != null ? arr_9_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$Polygon'.coordinates]", (path != null ? lpath_4 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Polygon'.coordinates]", (path != null ? lpath_4 : null));
                    return false;
                }
            }
            else if (prop.compareTo("bbox") == 0)
            {
                // handle may bbox property
                // .'$Polygon'.bbox
                res = json.isArray(pval);
                if (res)
                {
                    int arr_10_idx = -1;
                    Iterator<Object> arr_10_item_loop = json.arrayIterator(pval);
                    while (arr_10_item_loop.hasNext())
                    {
                        arr_10_idx++;
                        Object arr_10_item = arr_10_item_loop.next();
                        Path arr_10_lpath = new Path(arr_10_idx, (path != null ? lpath_4 : null));
                        // .'$Polygon'.bbox.0
                        res = json.isNumber(arr_10_item);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Polygon'.bbox.0]", ((path != null ? lpath_4 : null) != null ? arr_10_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$Polygon'.bbox]", (path != null ? lpath_4 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Polygon'.bbox]", (path != null ? lpath_4 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$Polygon']", (path != null ? lpath_4 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "coordinates"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$Polygon']", path);
                }
                if (! json.objectHasProp(val, "type"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Polygon']", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $Polygon (.'$Polygon')
    public boolean json_model_9(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Polygon'
        res = _jm_obj_4(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$Polygon']", path);
        }
        return res;
    }
    
    // object .'$MultiPolygon'
    public boolean _jm_obj_5(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$MultiPolygon']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_5 = new Path(prop, path);
            if (prop.compareTo("type") == 0)
            {
                // handle must type property
                must_count += 1;
                // .'$MultiPolygon'.type
                res = json.isString(pval) && json.asString(pval).compareTo("MultiPolygon") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected MultiPolygon [.'$MultiPolygon'.type]", (path != null ? lpath_5 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$MultiPolygon'.type]", (path != null ? lpath_5 : null));
                    return false;
                }
            }
            else if (prop.compareTo("coordinates") == 0)
            {
                // handle must coordinates property
                must_count += 1;
                // .'$MultiPolygon'.coordinates
                res = json.isArray(pval);
                if (res)
                {
                    int arr_11_idx = -1;
                    Iterator<Object> arr_11_item_loop = json.arrayIterator(pval);
                    while (arr_11_item_loop.hasNext())
                    {
                        arr_11_idx++;
                        Object arr_11_item = arr_11_item_loop.next();
                        Path arr_11_lpath = new Path(arr_11_idx, (path != null ? lpath_5 : null));
                        // .'$MultiPolygon'.coordinates.0
                        res = json.isArray(arr_11_item);
                        if (res)
                        {
                            int arr_12_idx = -1;
                            Iterator<Object> arr_12_item_loop = json.arrayIterator(arr_11_item);
                            while (arr_12_item_loop.hasNext())
                            {
                                arr_12_idx++;
                                Object arr_12_item = arr_12_item_loop.next();
                                Path arr_12_lpath = new Path(arr_12_idx, ((path != null ? lpath_5 : null) != null ? arr_11_lpath : null));
                                // .'$MultiPolygon'.coordinates.0.0
                                res = json_model_4(arr_12_item, (((path != null ? lpath_5 : null) != null ? arr_11_lpath : null) != null ? arr_12_lpath : null), rep);
                                if (! res)
                                {
                                    if (rep != null) rep.addEntry("unexpected $linear_ring [.'$MultiPolygon'.coordinates.0.0]", (((path != null ? lpath_5 : null) != null ? arr_11_lpath : null) != null ? arr_12_lpath : null));
                                }
                                if (! res)
                                {
                                    break;
                                }
                            }
                        }
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiPolygon'.coordinates.0]", ((path != null ? lpath_5 : null) != null ? arr_11_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiPolygon'.coordinates]", (path != null ? lpath_5 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$MultiPolygon'.coordinates]", (path != null ? lpath_5 : null));
                    return false;
                }
            }
            else if (prop.compareTo("bbox") == 0)
            {
                // handle may bbox property
                // .'$MultiPolygon'.bbox
                res = json.isArray(pval);
                if (res)
                {
                    int arr_13_idx = -1;
                    Iterator<Object> arr_13_item_loop = json.arrayIterator(pval);
                    while (arr_13_item_loop.hasNext())
                    {
                        arr_13_idx++;
                        Object arr_13_item = arr_13_item_loop.next();
                        Path arr_13_lpath = new Path(arr_13_idx, (path != null ? lpath_5 : null));
                        // .'$MultiPolygon'.bbox.0
                        res = json.isNumber(arr_13_item);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not a -1.0 loose float [.'$MultiPolygon'.bbox.0]", ((path != null ? lpath_5 : null) != null ? arr_13_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$MultiPolygon'.bbox]", (path != null ? lpath_5 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$MultiPolygon'.bbox]", (path != null ? lpath_5 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$MultiPolygon']", (path != null ? lpath_5 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "coordinates"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$MultiPolygon']", path);
                }
                if (! json.objectHasProp(val, "type"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$MultiPolygon']", path);
                }
            }
            return false;
        }
        return true;
    }
    
    // check $MultiPolygon (.'$MultiPolygon')
    public boolean json_model_10(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$MultiPolygon'
        res = _jm_obj_5(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$MultiPolygon']", path);
        }
        return res;
    }
    
    // object .'$geometry'.'|'.0
    public boolean _jm_obj_6(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$geometry'.'|'.0]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$geometry'.'|'.0]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$geometry'.'|'.0.type
        res = json.isString(pval) && json.asString(pval).compareTo("Point") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected Point [.'$geometry'.'|'.0.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$geometry'.'|'.0]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$geometry'.'|'.0]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$geometry'.'|'.0.coordinates
        res = json_model_2(pval, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $position [.'$geometry'.'|'.0.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$geometry'.'|'.0]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$geometry'.'|'.0.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_14_idx = -1;
                Iterator<Object> arr_14_item_loop = json.arrayIterator(pval);
                while (arr_14_item_loop.hasNext())
                {
                    arr_14_idx++;
                    Object arr_14_item = arr_14_item_loop.next();
                    Path arr_14_lpath = new Path(arr_14_idx, path);
                    // .'$geometry'.'|'.0.bbox.0
                    res = json.isNumber(arr_14_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$geometry'.'|'.0.bbox.0]", (path != null ? arr_14_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$geometry'.'|'.0.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$geometry'.'|'.0]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'$geometry'.'|'.1
    public boolean _jm_obj_7(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$geometry'.'|'.1]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$geometry'.'|'.1]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$geometry'.'|'.1.type
        res = json.isString(pval) && json.asString(pval).compareTo("MultiPoint") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected MultiPoint [.'$geometry'.'|'.1.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$geometry'.'|'.1]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$geometry'.'|'.1]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$geometry'.'|'.1.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_15_idx = -1;
            Iterator<Object> arr_15_item_loop = json.arrayIterator(pval);
            while (arr_15_item_loop.hasNext())
            {
                arr_15_idx++;
                Object arr_15_item = arr_15_item_loop.next();
                Path arr_15_lpath = new Path(arr_15_idx, path);
                // .'$geometry'.'|'.1.coordinates.0
                res = json_model_2(arr_15_item, (path != null ? arr_15_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $position [.'$geometry'.'|'.1.coordinates.0]", (path != null ? arr_15_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$geometry'.'|'.1.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$geometry'.'|'.1]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$geometry'.'|'.1.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_16_idx = -1;
                Iterator<Object> arr_16_item_loop = json.arrayIterator(pval);
                while (arr_16_item_loop.hasNext())
                {
                    arr_16_idx++;
                    Object arr_16_item = arr_16_item_loop.next();
                    Path arr_16_lpath = new Path(arr_16_idx, path);
                    // .'$geometry'.'|'.1.bbox.0
                    res = json.isNumber(arr_16_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$geometry'.'|'.1.bbox.0]", (path != null ? arr_16_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$geometry'.'|'.1.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$geometry'.'|'.1]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'$geometry'.'|'.2
    public boolean _jm_obj_8(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$geometry'.'|'.2]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$geometry'.'|'.2]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$geometry'.'|'.2.type
        res = json.isString(pval) && json.asString(pval).compareTo("LineString") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected LineString [.'$geometry'.'|'.2.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$geometry'.'|'.2]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$geometry'.'|'.2]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$geometry'.'|'.2.coordinates
        res = json_model_3(pval, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $coord_array [.'$geometry'.'|'.2.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$geometry'.'|'.2]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$geometry'.'|'.2.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_17_idx = -1;
                Iterator<Object> arr_17_item_loop = json.arrayIterator(pval);
                while (arr_17_item_loop.hasNext())
                {
                    arr_17_idx++;
                    Object arr_17_item = arr_17_item_loop.next();
                    Path arr_17_lpath = new Path(arr_17_idx, path);
                    // .'$geometry'.'|'.2.bbox.0
                    res = json.isNumber(arr_17_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$geometry'.'|'.2.bbox.0]", (path != null ? arr_17_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$geometry'.'|'.2.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$geometry'.'|'.2]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'$geometry'.'|'.3
    public boolean _jm_obj_9(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$geometry'.'|'.3]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$geometry'.'|'.3]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$geometry'.'|'.3.type
        res = json.isString(pval) && json.asString(pval).compareTo("MultiLineString") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected MultiLineString [.'$geometry'.'|'.3.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$geometry'.'|'.3]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$geometry'.'|'.3]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$geometry'.'|'.3.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_18_idx = -1;
            Iterator<Object> arr_18_item_loop = json.arrayIterator(pval);
            while (arr_18_item_loop.hasNext())
            {
                arr_18_idx++;
                Object arr_18_item = arr_18_item_loop.next();
                Path arr_18_lpath = new Path(arr_18_idx, path);
                // .'$geometry'.'|'.3.coordinates.0
                res = json_model_3(arr_18_item, (path != null ? arr_18_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $coord_array [.'$geometry'.'|'.3.coordinates.0]", (path != null ? arr_18_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$geometry'.'|'.3.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$geometry'.'|'.3]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$geometry'.'|'.3.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_19_idx = -1;
                Iterator<Object> arr_19_item_loop = json.arrayIterator(pval);
                while (arr_19_item_loop.hasNext())
                {
                    arr_19_idx++;
                    Object arr_19_item = arr_19_item_loop.next();
                    Path arr_19_lpath = new Path(arr_19_idx, path);
                    // .'$geometry'.'|'.3.bbox.0
                    res = json.isNumber(arr_19_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$geometry'.'|'.3.bbox.0]", (path != null ? arr_19_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$geometry'.'|'.3.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$geometry'.'|'.3]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'$geometry'.'|'.4
    public boolean _jm_obj_10(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$geometry'.'|'.4]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$geometry'.'|'.4]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$geometry'.'|'.4.type
        res = json.isString(pval) && json.asString(pval).compareTo("Polygon") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected Polygon [.'$geometry'.'|'.4.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$geometry'.'|'.4]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$geometry'.'|'.4]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$geometry'.'|'.4.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_20_idx = -1;
            Iterator<Object> arr_20_item_loop = json.arrayIterator(pval);
            while (arr_20_item_loop.hasNext())
            {
                arr_20_idx++;
                Object arr_20_item = arr_20_item_loop.next();
                Path arr_20_lpath = new Path(arr_20_idx, path);
                // .'$geometry'.'|'.4.coordinates.0
                res = json_model_4(arr_20_item, (path != null ? arr_20_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $linear_ring [.'$geometry'.'|'.4.coordinates.0]", (path != null ? arr_20_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$geometry'.'|'.4.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$geometry'.'|'.4]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$geometry'.'|'.4.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_21_idx = -1;
                Iterator<Object> arr_21_item_loop = json.arrayIterator(pval);
                while (arr_21_item_loop.hasNext())
                {
                    arr_21_idx++;
                    Object arr_21_item = arr_21_item_loop.next();
                    Path arr_21_lpath = new Path(arr_21_idx, path);
                    // .'$geometry'.'|'.4.bbox.0
                    res = json.isNumber(arr_21_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$geometry'.'|'.4.bbox.0]", (path != null ? arr_21_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$geometry'.'|'.4.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$geometry'.'|'.4]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'$geometry'.'|'.5
    public boolean _jm_obj_11(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$geometry'.'|'.5]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$geometry'.'|'.5]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$geometry'.'|'.5.type
        res = json.isString(pval) && json.asString(pval).compareTo("MultiPolygon") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected MultiPolygon [.'$geometry'.'|'.5.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$geometry'.'|'.5]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$geometry'.'|'.5]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$geometry'.'|'.5.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_22_idx = -1;
            Iterator<Object> arr_22_item_loop = json.arrayIterator(pval);
            while (arr_22_item_loop.hasNext())
            {
                arr_22_idx++;
                Object arr_22_item = arr_22_item_loop.next();
                Path arr_22_lpath = new Path(arr_22_idx, path);
                // .'$geometry'.'|'.5.coordinates.0
                res = json.isArray(arr_22_item);
                if (res)
                {
                    int arr_23_idx = -1;
                    Iterator<Object> arr_23_item_loop = json.arrayIterator(arr_22_item);
                    while (arr_23_item_loop.hasNext())
                    {
                        arr_23_idx++;
                        Object arr_23_item = arr_23_item_loop.next();
                        Path arr_23_lpath = new Path(arr_23_idx, (path != null ? arr_22_lpath : null));
                        // .'$geometry'.'|'.5.coordinates.0.0
                        res = json_model_4(arr_23_item, ((path != null ? arr_22_lpath : null) != null ? arr_23_lpath : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $linear_ring [.'$geometry'.'|'.5.coordinates.0.0]", ((path != null ? arr_22_lpath : null) != null ? arr_23_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$geometry'.'|'.5.coordinates.0]", (path != null ? arr_22_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$geometry'.'|'.5.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$geometry'.'|'.5]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$geometry'.'|'.5.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_24_idx = -1;
                Iterator<Object> arr_24_item_loop = json.arrayIterator(pval);
                while (arr_24_item_loop.hasNext())
                {
                    arr_24_idx++;
                    Object arr_24_item = arr_24_item_loop.next();
                    Path arr_24_lpath = new Path(arr_24_idx, path);
                    // .'$geometry'.'|'.5.bbox.0
                    res = json.isNumber(arr_24_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$geometry'.'|'.5.bbox.0]", (path != null ? arr_24_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$geometry'.'|'.5.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$geometry'.'|'.5]", path);
                return false;
            }
        }
        return true;
    }
    
    
    // check $geometry (.'$geometry')
    public boolean json_model_11(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$geometry'
        res = json.isObject(val);
        if (res)
        {
            if (json.objectHasProp(val, "type"))
            {
                Object tag_0 = json.objectValue(val, "type");
                Checker fun_0 = _jm_map_0_cmap.get(tag_0);
                if (fun_0 != null)
                {
                    res = fun_0.call(val, path, rep);
                }
                else
                {
                    res = false;
                    if (rep != null) rep.addEntry("tag <type> value not found [.'$geometry'.'|']", path);
                }
            }
            else
            {
                res = false;
                if (rep != null) rep.addEntry("tag prop <type> is missing [.'$geometry'.'|']", path);
            }
        }
        else
        {
            if (rep != null) rep.addEntry("value is not an object [.'$geometry'.'|']", path);
        }
        return res;
    }
    
    // object .'$GeometryCollection'
    public boolean _jm_obj_12(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$GeometryCollection']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$GeometryCollection']", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$GeometryCollection'.type
        res = json.isString(pval) && json.asString(pval).compareTo("GeometryCollection") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected GeometryCollection [.'$GeometryCollection'.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$GeometryCollection']", path);
            return false;
        }
        if (! json.objectHasProp(val, "geometries"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <geometries> [.'$GeometryCollection']", path);
            return false;
        }
        pval = json.objectValue(val, "geometries");
        // .'$GeometryCollection'.geometries
        res = json.isArray(pval);
        if (res)
        {
            int arr_25_idx = -1;
            Iterator<Object> arr_25_item_loop = json.arrayIterator(pval);
            while (arr_25_item_loop.hasNext())
            {
                arr_25_idx++;
                Object arr_25_item = arr_25_item_loop.next();
                Path arr_25_lpath = new Path(arr_25_idx, path);
                // .'$GeometryCollection'.geometries.0
                res = json_model_11(arr_25_item, (path != null ? arr_25_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $geometry [.'$GeometryCollection'.geometries.0]", (path != null ? arr_25_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$GeometryCollection'.geometries]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <geometries> [.'$GeometryCollection']", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$GeometryCollection'.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_26_idx = -1;
                Iterator<Object> arr_26_item_loop = json.arrayIterator(pval);
                while (arr_26_item_loop.hasNext())
                {
                    arr_26_idx++;
                    Object arr_26_item = arr_26_item_loop.next();
                    Path arr_26_lpath = new Path(arr_26_idx, path);
                    // .'$GeometryCollection'.bbox.0
                    res = json.isNumber(arr_26_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$GeometryCollection'.bbox.0]", (path != null ? arr_26_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$GeometryCollection'.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$GeometryCollection']", path);
                return false;
            }
        }
        return true;
    }
    
    // check $GeometryCollection (.'$GeometryCollection')
    public boolean json_model_12(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$GeometryCollection'
        res = _jm_obj_12(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$GeometryCollection']", path);
        }
        return res;
    }
    
    // object .'$Feature'.geometry.'|'.0
    public boolean _jm_obj_14(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Feature'.geometry.'|'.0]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Feature'.geometry.'|'.0]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$Feature'.geometry.'|'.0.type
        res = json.isString(pval) && json.asString(pval).compareTo("Point") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected Point [.'$Feature'.geometry.'|'.0.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$Feature'.geometry.'|'.0]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$Feature'.geometry.'|'.0]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$Feature'.geometry.'|'.0.coordinates
        res = json_model_2(pval, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $position [.'$Feature'.geometry.'|'.0.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$Feature'.geometry.'|'.0]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$Feature'.geometry.'|'.0.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_27_idx = -1;
                Iterator<Object> arr_27_item_loop = json.arrayIterator(pval);
                while (arr_27_item_loop.hasNext())
                {
                    arr_27_idx++;
                    Object arr_27_item = arr_27_item_loop.next();
                    Path arr_27_lpath = new Path(arr_27_idx, path);
                    // .'$Feature'.geometry.'|'.0.bbox.0
                    res = json.isNumber(arr_27_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Feature'.geometry.'|'.0.bbox.0]", (path != null ? arr_27_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.geometry.'|'.0.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$Feature'.geometry.'|'.0]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'$Feature'.geometry.'|'.1
    public boolean _jm_obj_15(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Feature'.geometry.'|'.1]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Feature'.geometry.'|'.1]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$Feature'.geometry.'|'.1.type
        res = json.isString(pval) && json.asString(pval).compareTo("MultiPoint") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected MultiPoint [.'$Feature'.geometry.'|'.1.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$Feature'.geometry.'|'.1]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$Feature'.geometry.'|'.1]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$Feature'.geometry.'|'.1.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_28_idx = -1;
            Iterator<Object> arr_28_item_loop = json.arrayIterator(pval);
            while (arr_28_item_loop.hasNext())
            {
                arr_28_idx++;
                Object arr_28_item = arr_28_item_loop.next();
                Path arr_28_lpath = new Path(arr_28_idx, path);
                // .'$Feature'.geometry.'|'.1.coordinates.0
                res = json_model_2(arr_28_item, (path != null ? arr_28_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $position [.'$Feature'.geometry.'|'.1.coordinates.0]", (path != null ? arr_28_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.geometry.'|'.1.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$Feature'.geometry.'|'.1]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$Feature'.geometry.'|'.1.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_29_idx = -1;
                Iterator<Object> arr_29_item_loop = json.arrayIterator(pval);
                while (arr_29_item_loop.hasNext())
                {
                    arr_29_idx++;
                    Object arr_29_item = arr_29_item_loop.next();
                    Path arr_29_lpath = new Path(arr_29_idx, path);
                    // .'$Feature'.geometry.'|'.1.bbox.0
                    res = json.isNumber(arr_29_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Feature'.geometry.'|'.1.bbox.0]", (path != null ? arr_29_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.geometry.'|'.1.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$Feature'.geometry.'|'.1]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'$Feature'.geometry.'|'.2
    public boolean _jm_obj_16(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Feature'.geometry.'|'.2]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Feature'.geometry.'|'.2]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$Feature'.geometry.'|'.2.type
        res = json.isString(pval) && json.asString(pval).compareTo("LineString") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected LineString [.'$Feature'.geometry.'|'.2.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$Feature'.geometry.'|'.2]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$Feature'.geometry.'|'.2]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$Feature'.geometry.'|'.2.coordinates
        res = json_model_3(pval, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $coord_array [.'$Feature'.geometry.'|'.2.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$Feature'.geometry.'|'.2]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$Feature'.geometry.'|'.2.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_30_idx = -1;
                Iterator<Object> arr_30_item_loop = json.arrayIterator(pval);
                while (arr_30_item_loop.hasNext())
                {
                    arr_30_idx++;
                    Object arr_30_item = arr_30_item_loop.next();
                    Path arr_30_lpath = new Path(arr_30_idx, path);
                    // .'$Feature'.geometry.'|'.2.bbox.0
                    res = json.isNumber(arr_30_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Feature'.geometry.'|'.2.bbox.0]", (path != null ? arr_30_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.geometry.'|'.2.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$Feature'.geometry.'|'.2]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'$Feature'.geometry.'|'.3
    public boolean _jm_obj_17(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Feature'.geometry.'|'.3]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Feature'.geometry.'|'.3]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$Feature'.geometry.'|'.3.type
        res = json.isString(pval) && json.asString(pval).compareTo("MultiLineString") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected MultiLineString [.'$Feature'.geometry.'|'.3.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$Feature'.geometry.'|'.3]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$Feature'.geometry.'|'.3]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$Feature'.geometry.'|'.3.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_31_idx = -1;
            Iterator<Object> arr_31_item_loop = json.arrayIterator(pval);
            while (arr_31_item_loop.hasNext())
            {
                arr_31_idx++;
                Object arr_31_item = arr_31_item_loop.next();
                Path arr_31_lpath = new Path(arr_31_idx, path);
                // .'$Feature'.geometry.'|'.3.coordinates.0
                res = json_model_3(arr_31_item, (path != null ? arr_31_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $coord_array [.'$Feature'.geometry.'|'.3.coordinates.0]", (path != null ? arr_31_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.geometry.'|'.3.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$Feature'.geometry.'|'.3]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$Feature'.geometry.'|'.3.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_32_idx = -1;
                Iterator<Object> arr_32_item_loop = json.arrayIterator(pval);
                while (arr_32_item_loop.hasNext())
                {
                    arr_32_idx++;
                    Object arr_32_item = arr_32_item_loop.next();
                    Path arr_32_lpath = new Path(arr_32_idx, path);
                    // .'$Feature'.geometry.'|'.3.bbox.0
                    res = json.isNumber(arr_32_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Feature'.geometry.'|'.3.bbox.0]", (path != null ? arr_32_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.geometry.'|'.3.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$Feature'.geometry.'|'.3]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'$Feature'.geometry.'|'.4
    public boolean _jm_obj_18(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Feature'.geometry.'|'.4]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Feature'.geometry.'|'.4]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$Feature'.geometry.'|'.4.type
        res = json.isString(pval) && json.asString(pval).compareTo("Polygon") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected Polygon [.'$Feature'.geometry.'|'.4.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$Feature'.geometry.'|'.4]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$Feature'.geometry.'|'.4]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$Feature'.geometry.'|'.4.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_33_idx = -1;
            Iterator<Object> arr_33_item_loop = json.arrayIterator(pval);
            while (arr_33_item_loop.hasNext())
            {
                arr_33_idx++;
                Object arr_33_item = arr_33_item_loop.next();
                Path arr_33_lpath = new Path(arr_33_idx, path);
                // .'$Feature'.geometry.'|'.4.coordinates.0
                res = json_model_4(arr_33_item, (path != null ? arr_33_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $linear_ring [.'$Feature'.geometry.'|'.4.coordinates.0]", (path != null ? arr_33_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.geometry.'|'.4.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$Feature'.geometry.'|'.4]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$Feature'.geometry.'|'.4.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_34_idx = -1;
                Iterator<Object> arr_34_item_loop = json.arrayIterator(pval);
                while (arr_34_item_loop.hasNext())
                {
                    arr_34_idx++;
                    Object arr_34_item = arr_34_item_loop.next();
                    Path arr_34_lpath = new Path(arr_34_idx, path);
                    // .'$Feature'.geometry.'|'.4.bbox.0
                    res = json.isNumber(arr_34_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Feature'.geometry.'|'.4.bbox.0]", (path != null ? arr_34_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.geometry.'|'.4.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$Feature'.geometry.'|'.4]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'$Feature'.geometry.'|'.5
    public boolean _jm_obj_19(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Feature'.geometry.'|'.5]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Feature'.geometry.'|'.5]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$Feature'.geometry.'|'.5.type
        res = json.isString(pval) && json.asString(pval).compareTo("MultiPolygon") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected MultiPolygon [.'$Feature'.geometry.'|'.5.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$Feature'.geometry.'|'.5]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'$Feature'.geometry.'|'.5]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'$Feature'.geometry.'|'.5.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_35_idx = -1;
            Iterator<Object> arr_35_item_loop = json.arrayIterator(pval);
            while (arr_35_item_loop.hasNext())
            {
                arr_35_idx++;
                Object arr_35_item = arr_35_item_loop.next();
                Path arr_35_lpath = new Path(arr_35_idx, path);
                // .'$Feature'.geometry.'|'.5.coordinates.0
                res = json.isArray(arr_35_item);
                if (res)
                {
                    int arr_36_idx = -1;
                    Iterator<Object> arr_36_item_loop = json.arrayIterator(arr_35_item);
                    while (arr_36_item_loop.hasNext())
                    {
                        arr_36_idx++;
                        Object arr_36_item = arr_36_item_loop.next();
                        Path arr_36_lpath = new Path(arr_36_idx, (path != null ? arr_35_lpath : null));
                        // .'$Feature'.geometry.'|'.5.coordinates.0.0
                        res = json_model_4(arr_36_item, ((path != null ? arr_35_lpath : null) != null ? arr_36_lpath : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $linear_ring [.'$Feature'.geometry.'|'.5.coordinates.0.0]", ((path != null ? arr_35_lpath : null) != null ? arr_36_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.geometry.'|'.5.coordinates.0]", (path != null ? arr_35_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.geometry.'|'.5.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'$Feature'.geometry.'|'.5]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$Feature'.geometry.'|'.5.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_37_idx = -1;
                Iterator<Object> arr_37_item_loop = json.arrayIterator(pval);
                while (arr_37_item_loop.hasNext())
                {
                    arr_37_idx++;
                    Object arr_37_item = arr_37_item_loop.next();
                    Path arr_37_lpath = new Path(arr_37_idx, path);
                    // .'$Feature'.geometry.'|'.5.bbox.0
                    res = json.isNumber(arr_37_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Feature'.geometry.'|'.5.bbox.0]", (path != null ? arr_37_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.geometry.'|'.5.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$Feature'.geometry.'|'.5]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'$Feature'.geometry.'|'.6
    public boolean _jm_obj_20(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Feature'.geometry.'|'.6]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Feature'.geometry.'|'.6]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$Feature'.geometry.'|'.6.type
        res = json.isString(pval) && json.asString(pval).compareTo("GeometryCollection") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected GeometryCollection [.'$Feature'.geometry.'|'.6.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$Feature'.geometry.'|'.6]", path);
            return false;
        }
        if (! json.objectHasProp(val, "geometries"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <geometries> [.'$Feature'.geometry.'|'.6]", path);
            return false;
        }
        pval = json.objectValue(val, "geometries");
        // .'$Feature'.geometry.'|'.6.geometries
        res = json.isArray(pval);
        if (res)
        {
            int arr_38_idx = -1;
            Iterator<Object> arr_38_item_loop = json.arrayIterator(pval);
            while (arr_38_item_loop.hasNext())
            {
                arr_38_idx++;
                Object arr_38_item = arr_38_item_loop.next();
                Path arr_38_lpath = new Path(arr_38_idx, path);
                // .'$Feature'.geometry.'|'.6.geometries.0
                res = json_model_11(arr_38_item, (path != null ? arr_38_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $geometry [.'$Feature'.geometry.'|'.6.geometries.0]", (path != null ? arr_38_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.geometry.'|'.6.geometries]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <geometries> [.'$Feature'.geometry.'|'.6]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$Feature'.geometry.'|'.6.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_39_idx = -1;
                Iterator<Object> arr_39_item_loop = json.arrayIterator(pval);
                while (arr_39_item_loop.hasNext())
                {
                    arr_39_idx++;
                    Object arr_39_item = arr_39_item_loop.next();
                    Path arr_39_lpath = new Path(arr_39_idx, path);
                    // .'$Feature'.geometry.'|'.6.bbox.0
                    res = json.isNumber(arr_39_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Feature'.geometry.'|'.6.bbox.0]", (path != null ? arr_39_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.geometry.'|'.6.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$Feature'.geometry.'|'.6]", path);
                return false;
            }
        }
        return true;
    }
    
    
    // object .'$Feature'.properties.'|'.1
    public boolean _jm_obj_21(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Feature'.properties.'|'.1]", path);
            return false;
        }
        // accept any object
        return true;
    }
    
    // object .'$Feature'
    public boolean _jm_obj_13(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Feature']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Feature']", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$Feature'.type
        res = json.isString(pval) && json.asString(pval).compareTo("Feature") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected Feature [.'$Feature'.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$Feature']", path);
            return false;
        }
        if (! json.objectHasProp(val, "geometry"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <geometry> [.'$Feature']", path);
            return false;
        }
        pval = json.objectValue(val, "geometry");
        // .'$Feature'.geometry
        res = json.isObject(pval);
        if (res)
        {
            if (json.objectHasProp(pval, "type"))
            {
                Object tag_1 = json.objectValue(pval, "type");
                Checker fun_1 = _jm_map_1_cmap.get(tag_1);
                if (fun_1 != null)
                {
                    res = fun_1.call(pval, path, rep);
                }
                else
                {
                    res = false;
                    if (rep != null) rep.addEntry("tag <type> value not found [.'$Feature'.geometry.'|']", path);
                }
            }
            else
            {
                res = false;
                if (rep != null) rep.addEntry("tag prop <type> is missing [.'$Feature'.geometry.'|']", path);
            }
        }
        else
        {
            if (rep != null) rep.addEntry("value is not an object [.'$Feature'.geometry.'|']", path);
        }
        if (! res)
        {
            // .'$Feature'.geometry.'|'
            res = json.isNull(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not null [.'$Feature'.geometry.'|']", path);
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <geometry> [.'$Feature']", path);
            return false;
        }
        if (! json.objectHasProp(val, "properties"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <properties> [.'$Feature']", path);
            return false;
        }
        pval = json.objectValue(val, "properties");
        // .'$Feature'.properties
        // .'$Feature'.properties.'|'.0
        res = json.isNull(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("not null [.'$Feature'.properties.'|'.0]", path);
        }
        if (! res)
        {
            // .'$Feature'.properties.'|'.1
            res = _jm_obj_21(pval, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected element [.'$Feature'.properties.'|'.1]", path);
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'$Feature'.properties.'|']", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <properties> [.'$Feature']", path);
            return false;
        }
        if (json.objectHasProp(val, "id"))
        {
            pval = json.objectValue(val, "id");
            // .'$Feature'.id
            // .'$Feature'.id.'|'.0
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'$Feature'.id.'|'.0]", path);
            }
            if (! res)
            {
                // .'$Feature'.id.'|'.1
                res = json.isNumber(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Feature'.id.'|'.1]", path);
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'$Feature'.id.'|']", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <id> [.'$Feature']", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$Feature'.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_40_idx = -1;
                Iterator<Object> arr_40_item_loop = json.arrayIterator(pval);
                while (arr_40_item_loop.hasNext())
                {
                    arr_40_idx++;
                    Object arr_40_item = arr_40_item_loop.next();
                    Path arr_40_lpath = new Path(arr_40_idx, path);
                    // .'$Feature'.bbox.0
                    res = json.isNumber(arr_40_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$Feature'.bbox.0]", (path != null ? arr_40_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$Feature'.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$Feature']", path);
                return false;
            }
        }
        return true;
    }
    
    // check $Feature (.'$Feature')
    public boolean json_model_13(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Feature'
        res = _jm_obj_13(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$Feature']", path);
        }
        return res;
    }
    
    // object .'$FeatureCollection'
    public boolean _jm_obj_22(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$FeatureCollection']", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$FeatureCollection']", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'$FeatureCollection'.type
        res = json.isString(pval) && json.asString(pval).compareTo("FeatureCollection") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected FeatureCollection [.'$FeatureCollection'.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'$FeatureCollection']", path);
            return false;
        }
        if (! json.objectHasProp(val, "features"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <features> [.'$FeatureCollection']", path);
            return false;
        }
        pval = json.objectValue(val, "features");
        // .'$FeatureCollection'.features
        res = json.isArray(pval);
        if (res)
        {
            int arr_41_idx = -1;
            Iterator<Object> arr_41_item_loop = json.arrayIterator(pval);
            while (arr_41_item_loop.hasNext())
            {
                arr_41_idx++;
                Object arr_41_item = arr_41_item_loop.next();
                Path arr_41_lpath = new Path(arr_41_idx, path);
                // .'$FeatureCollection'.features.0
                res = json_model_13(arr_41_item, (path != null ? arr_41_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $Feature [.'$FeatureCollection'.features.0]", (path != null ? arr_41_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$FeatureCollection'.features]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <features> [.'$FeatureCollection']", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'$FeatureCollection'.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_42_idx = -1;
                Iterator<Object> arr_42_item_loop = json.arrayIterator(pval);
                while (arr_42_item_loop.hasNext())
                {
                    arr_42_idx++;
                    Object arr_42_item = arr_42_item_loop.next();
                    Path arr_42_lpath = new Path(arr_42_idx, path);
                    // .'$FeatureCollection'.bbox.0
                    res = json.isNumber(arr_42_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'$FeatureCollection'.bbox.0]", (path != null ? arr_42_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'$FeatureCollection'.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'$FeatureCollection']", path);
                return false;
            }
        }
        return true;
    }
    
    // check $FeatureCollection (.'$FeatureCollection')
    public boolean json_model_14(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$FeatureCollection'
        res = _jm_obj_22(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.'$FeatureCollection']", path);
        }
        return res;
    }
    
    // object .'^'.1
    public boolean _jm_obj_23(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'^'.1]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'^'.1]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'^'.1.type
        res = json.isString(pval) && json.asString(pval).compareTo("GeometryCollection") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected GeometryCollection [.'^'.1.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'^'.1]", path);
            return false;
        }
        if (! json.objectHasProp(val, "geometries"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <geometries> [.'^'.1]", path);
            return false;
        }
        pval = json.objectValue(val, "geometries");
        // .'^'.1.geometries
        res = json.isArray(pval);
        if (res)
        {
            int arr_43_idx = -1;
            Iterator<Object> arr_43_item_loop = json.arrayIterator(pval);
            while (arr_43_item_loop.hasNext())
            {
                arr_43_idx++;
                Object arr_43_item = arr_43_item_loop.next();
                Path arr_43_lpath = new Path(arr_43_idx, path);
                // .'^'.1.geometries.0
                res = json_model_11(arr_43_item, (path != null ? arr_43_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $geometry [.'^'.1.geometries.0]", (path != null ? arr_43_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'^'.1.geometries]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <geometries> [.'^'.1]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'^'.1.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_44_idx = -1;
                Iterator<Object> arr_44_item_loop = json.arrayIterator(pval);
                while (arr_44_item_loop.hasNext())
                {
                    arr_44_idx++;
                    Object arr_44_item = arr_44_item_loop.next();
                    Path arr_44_lpath = new Path(arr_44_idx, path);
                    // .'^'.1.bbox.0
                    res = json.isNumber(arr_44_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'^'.1.bbox.0]", (path != null ? arr_44_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'^'.1.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'^'.1]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'^'.2.geometry.'|'.0
    public boolean _jm_obj_25(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'^'.2.geometry.'|'.0]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'^'.2.geometry.'|'.0]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'^'.2.geometry.'|'.0.type
        res = json.isString(pval) && json.asString(pval).compareTo("Point") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected Point [.'^'.2.geometry.'|'.0.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'^'.2.geometry.'|'.0]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'^'.2.geometry.'|'.0]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'^'.2.geometry.'|'.0.coordinates
        res = json_model_2(pval, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $position [.'^'.2.geometry.'|'.0.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'^'.2.geometry.'|'.0]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'^'.2.geometry.'|'.0.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_45_idx = -1;
                Iterator<Object> arr_45_item_loop = json.arrayIterator(pval);
                while (arr_45_item_loop.hasNext())
                {
                    arr_45_idx++;
                    Object arr_45_item = arr_45_item_loop.next();
                    Path arr_45_lpath = new Path(arr_45_idx, path);
                    // .'^'.2.geometry.'|'.0.bbox.0
                    res = json.isNumber(arr_45_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'^'.2.geometry.'|'.0.bbox.0]", (path != null ? arr_45_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.geometry.'|'.0.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'^'.2.geometry.'|'.0]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'^'.2.geometry.'|'.1
    public boolean _jm_obj_26(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'^'.2.geometry.'|'.1]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'^'.2.geometry.'|'.1]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'^'.2.geometry.'|'.1.type
        res = json.isString(pval) && json.asString(pval).compareTo("MultiPoint") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected MultiPoint [.'^'.2.geometry.'|'.1.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'^'.2.geometry.'|'.1]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'^'.2.geometry.'|'.1]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'^'.2.geometry.'|'.1.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_46_idx = -1;
            Iterator<Object> arr_46_item_loop = json.arrayIterator(pval);
            while (arr_46_item_loop.hasNext())
            {
                arr_46_idx++;
                Object arr_46_item = arr_46_item_loop.next();
                Path arr_46_lpath = new Path(arr_46_idx, path);
                // .'^'.2.geometry.'|'.1.coordinates.0
                res = json_model_2(arr_46_item, (path != null ? arr_46_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $position [.'^'.2.geometry.'|'.1.coordinates.0]", (path != null ? arr_46_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.geometry.'|'.1.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'^'.2.geometry.'|'.1]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'^'.2.geometry.'|'.1.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_47_idx = -1;
                Iterator<Object> arr_47_item_loop = json.arrayIterator(pval);
                while (arr_47_item_loop.hasNext())
                {
                    arr_47_idx++;
                    Object arr_47_item = arr_47_item_loop.next();
                    Path arr_47_lpath = new Path(arr_47_idx, path);
                    // .'^'.2.geometry.'|'.1.bbox.0
                    res = json.isNumber(arr_47_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'^'.2.geometry.'|'.1.bbox.0]", (path != null ? arr_47_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.geometry.'|'.1.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'^'.2.geometry.'|'.1]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'^'.2.geometry.'|'.2
    public boolean _jm_obj_27(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'^'.2.geometry.'|'.2]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'^'.2.geometry.'|'.2]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'^'.2.geometry.'|'.2.type
        res = json.isString(pval) && json.asString(pval).compareTo("LineString") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected LineString [.'^'.2.geometry.'|'.2.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'^'.2.geometry.'|'.2]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'^'.2.geometry.'|'.2]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'^'.2.geometry.'|'.2.coordinates
        res = json_model_3(pval, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $coord_array [.'^'.2.geometry.'|'.2.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'^'.2.geometry.'|'.2]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'^'.2.geometry.'|'.2.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_48_idx = -1;
                Iterator<Object> arr_48_item_loop = json.arrayIterator(pval);
                while (arr_48_item_loop.hasNext())
                {
                    arr_48_idx++;
                    Object arr_48_item = arr_48_item_loop.next();
                    Path arr_48_lpath = new Path(arr_48_idx, path);
                    // .'^'.2.geometry.'|'.2.bbox.0
                    res = json.isNumber(arr_48_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'^'.2.geometry.'|'.2.bbox.0]", (path != null ? arr_48_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.geometry.'|'.2.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'^'.2.geometry.'|'.2]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'^'.2.geometry.'|'.3
    public boolean _jm_obj_28(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'^'.2.geometry.'|'.3]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'^'.2.geometry.'|'.3]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'^'.2.geometry.'|'.3.type
        res = json.isString(pval) && json.asString(pval).compareTo("MultiLineString") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected MultiLineString [.'^'.2.geometry.'|'.3.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'^'.2.geometry.'|'.3]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'^'.2.geometry.'|'.3]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'^'.2.geometry.'|'.3.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_49_idx = -1;
            Iterator<Object> arr_49_item_loop = json.arrayIterator(pval);
            while (arr_49_item_loop.hasNext())
            {
                arr_49_idx++;
                Object arr_49_item = arr_49_item_loop.next();
                Path arr_49_lpath = new Path(arr_49_idx, path);
                // .'^'.2.geometry.'|'.3.coordinates.0
                res = json_model_3(arr_49_item, (path != null ? arr_49_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $coord_array [.'^'.2.geometry.'|'.3.coordinates.0]", (path != null ? arr_49_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.geometry.'|'.3.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'^'.2.geometry.'|'.3]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'^'.2.geometry.'|'.3.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_50_idx = -1;
                Iterator<Object> arr_50_item_loop = json.arrayIterator(pval);
                while (arr_50_item_loop.hasNext())
                {
                    arr_50_idx++;
                    Object arr_50_item = arr_50_item_loop.next();
                    Path arr_50_lpath = new Path(arr_50_idx, path);
                    // .'^'.2.geometry.'|'.3.bbox.0
                    res = json.isNumber(arr_50_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'^'.2.geometry.'|'.3.bbox.0]", (path != null ? arr_50_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.geometry.'|'.3.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'^'.2.geometry.'|'.3]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'^'.2.geometry.'|'.4
    public boolean _jm_obj_29(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'^'.2.geometry.'|'.4]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'^'.2.geometry.'|'.4]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'^'.2.geometry.'|'.4.type
        res = json.isString(pval) && json.asString(pval).compareTo("Polygon") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected Polygon [.'^'.2.geometry.'|'.4.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'^'.2.geometry.'|'.4]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'^'.2.geometry.'|'.4]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'^'.2.geometry.'|'.4.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_51_idx = -1;
            Iterator<Object> arr_51_item_loop = json.arrayIterator(pval);
            while (arr_51_item_loop.hasNext())
            {
                arr_51_idx++;
                Object arr_51_item = arr_51_item_loop.next();
                Path arr_51_lpath = new Path(arr_51_idx, path);
                // .'^'.2.geometry.'|'.4.coordinates.0
                res = json_model_4(arr_51_item, (path != null ? arr_51_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $linear_ring [.'^'.2.geometry.'|'.4.coordinates.0]", (path != null ? arr_51_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.geometry.'|'.4.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'^'.2.geometry.'|'.4]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'^'.2.geometry.'|'.4.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_52_idx = -1;
                Iterator<Object> arr_52_item_loop = json.arrayIterator(pval);
                while (arr_52_item_loop.hasNext())
                {
                    arr_52_idx++;
                    Object arr_52_item = arr_52_item_loop.next();
                    Path arr_52_lpath = new Path(arr_52_idx, path);
                    // .'^'.2.geometry.'|'.4.bbox.0
                    res = json.isNumber(arr_52_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'^'.2.geometry.'|'.4.bbox.0]", (path != null ? arr_52_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.geometry.'|'.4.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'^'.2.geometry.'|'.4]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'^'.2.geometry.'|'.5
    public boolean _jm_obj_30(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'^'.2.geometry.'|'.5]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'^'.2.geometry.'|'.5]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'^'.2.geometry.'|'.5.type
        res = json.isString(pval) && json.asString(pval).compareTo("MultiPolygon") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected MultiPolygon [.'^'.2.geometry.'|'.5.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'^'.2.geometry.'|'.5]", path);
            return false;
        }
        if (! json.objectHasProp(val, "coordinates"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <coordinates> [.'^'.2.geometry.'|'.5]", path);
            return false;
        }
        pval = json.objectValue(val, "coordinates");
        // .'^'.2.geometry.'|'.5.coordinates
        res = json.isArray(pval);
        if (res)
        {
            int arr_53_idx = -1;
            Iterator<Object> arr_53_item_loop = json.arrayIterator(pval);
            while (arr_53_item_loop.hasNext())
            {
                arr_53_idx++;
                Object arr_53_item = arr_53_item_loop.next();
                Path arr_53_lpath = new Path(arr_53_idx, path);
                // .'^'.2.geometry.'|'.5.coordinates.0
                res = json.isArray(arr_53_item);
                if (res)
                {
                    int arr_54_idx = -1;
                    Iterator<Object> arr_54_item_loop = json.arrayIterator(arr_53_item);
                    while (arr_54_item_loop.hasNext())
                    {
                        arr_54_idx++;
                        Object arr_54_item = arr_54_item_loop.next();
                        Path arr_54_lpath = new Path(arr_54_idx, (path != null ? arr_53_lpath : null));
                        // .'^'.2.geometry.'|'.5.coordinates.0.0
                        res = json_model_4(arr_54_item, ((path != null ? arr_53_lpath : null) != null ? arr_54_lpath : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $linear_ring [.'^'.2.geometry.'|'.5.coordinates.0.0]", ((path != null ? arr_53_lpath : null) != null ? arr_54_lpath : null));
                        }
                        if (! res)
                        {
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.geometry.'|'.5.coordinates.0]", (path != null ? arr_53_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.geometry.'|'.5.coordinates]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <coordinates> [.'^'.2.geometry.'|'.5]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'^'.2.geometry.'|'.5.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_55_idx = -1;
                Iterator<Object> arr_55_item_loop = json.arrayIterator(pval);
                while (arr_55_item_loop.hasNext())
                {
                    arr_55_idx++;
                    Object arr_55_item = arr_55_item_loop.next();
                    Path arr_55_lpath = new Path(arr_55_idx, path);
                    // .'^'.2.geometry.'|'.5.bbox.0
                    res = json.isNumber(arr_55_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'^'.2.geometry.'|'.5.bbox.0]", (path != null ? arr_55_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.geometry.'|'.5.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'^'.2.geometry.'|'.5]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'^'.2.geometry.'|'.6
    public boolean _jm_obj_31(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'^'.2.geometry.'|'.6]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'^'.2.geometry.'|'.6]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'^'.2.geometry.'|'.6.type
        res = json.isString(pval) && json.asString(pval).compareTo("GeometryCollection") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected GeometryCollection [.'^'.2.geometry.'|'.6.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'^'.2.geometry.'|'.6]", path);
            return false;
        }
        if (! json.objectHasProp(val, "geometries"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <geometries> [.'^'.2.geometry.'|'.6]", path);
            return false;
        }
        pval = json.objectValue(val, "geometries");
        // .'^'.2.geometry.'|'.6.geometries
        res = json.isArray(pval);
        if (res)
        {
            int arr_56_idx = -1;
            Iterator<Object> arr_56_item_loop = json.arrayIterator(pval);
            while (arr_56_item_loop.hasNext())
            {
                arr_56_idx++;
                Object arr_56_item = arr_56_item_loop.next();
                Path arr_56_lpath = new Path(arr_56_idx, path);
                // .'^'.2.geometry.'|'.6.geometries.0
                res = json_model_11(arr_56_item, (path != null ? arr_56_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $geometry [.'^'.2.geometry.'|'.6.geometries.0]", (path != null ? arr_56_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.geometry.'|'.6.geometries]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <geometries> [.'^'.2.geometry.'|'.6]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'^'.2.geometry.'|'.6.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_57_idx = -1;
                Iterator<Object> arr_57_item_loop = json.arrayIterator(pval);
                while (arr_57_item_loop.hasNext())
                {
                    arr_57_idx++;
                    Object arr_57_item = arr_57_item_loop.next();
                    Path arr_57_lpath = new Path(arr_57_idx, path);
                    // .'^'.2.geometry.'|'.6.bbox.0
                    res = json.isNumber(arr_57_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'^'.2.geometry.'|'.6.bbox.0]", (path != null ? arr_57_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.geometry.'|'.6.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'^'.2.geometry.'|'.6]", path);
                return false;
            }
        }
        return true;
    }
    
    
    // object .'^'.2.properties.'|'.1
    public boolean _jm_obj_32(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'^'.2.properties.'|'.1]", path);
            return false;
        }
        // accept any object
        return true;
    }
    
    // object .'^'.2
    public boolean _jm_obj_24(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'^'.2]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'^'.2]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'^'.2.type
        res = json.isString(pval) && json.asString(pval).compareTo("Feature") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected Feature [.'^'.2.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'^'.2]", path);
            return false;
        }
        if (! json.objectHasProp(val, "geometry"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <geometry> [.'^'.2]", path);
            return false;
        }
        pval = json.objectValue(val, "geometry");
        // .'^'.2.geometry
        res = json.isObject(pval);
        if (res)
        {
            if (json.objectHasProp(pval, "type"))
            {
                Object tag_2 = json.objectValue(pval, "type");
                Checker fun_2 = _jm_map_2_cmap.get(tag_2);
                if (fun_2 != null)
                {
                    res = fun_2.call(pval, path, rep);
                }
                else
                {
                    res = false;
                    if (rep != null) rep.addEntry("tag <type> value not found [.'^'.2.geometry.'|']", path);
                }
            }
            else
            {
                res = false;
                if (rep != null) rep.addEntry("tag prop <type> is missing [.'^'.2.geometry.'|']", path);
            }
        }
        else
        {
            if (rep != null) rep.addEntry("value is not an object [.'^'.2.geometry.'|']", path);
        }
        if (! res)
        {
            // .'^'.2.geometry.'|'
            res = json.isNull(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("not null [.'^'.2.geometry.'|']", path);
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <geometry> [.'^'.2]", path);
            return false;
        }
        if (! json.objectHasProp(val, "properties"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <properties> [.'^'.2]", path);
            return false;
        }
        pval = json.objectValue(val, "properties");
        // .'^'.2.properties
        // .'^'.2.properties.'|'.0
        res = json.isNull(pval);
        if (! res)
        {
            if (rep != null) rep.addEntry("not null [.'^'.2.properties.'|'.0]", path);
        }
        if (! res)
        {
            // .'^'.2.properties.'|'.1
            res = _jm_obj_32(pval, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected element [.'^'.2.properties.'|'.1]", path);
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'^'.2.properties.'|']", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <properties> [.'^'.2]", path);
            return false;
        }
        if (json.objectHasProp(val, "id"))
        {
            pval = json.objectValue(val, "id");
            // .'^'.2.id
            // .'^'.2.id.'|'.0
            res = json.isString(pval);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected string [.'^'.2.id.'|'.0]", path);
            }
            if (! res)
            {
                // .'^'.2.id.'|'.1
                res = json.isNumber(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a -1.0 loose float [.'^'.2.id.'|'.1]", path);
                }
            }
            if (res)
            {
                if (rep != null) rep.clearEntries();
            }
            else
            {
                if (rep != null) rep.addEntry("no model matched [.'^'.2.id.'|']", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <id> [.'^'.2]", path);
                return false;
            }
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'^'.2.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_58_idx = -1;
                Iterator<Object> arr_58_item_loop = json.arrayIterator(pval);
                while (arr_58_item_loop.hasNext())
                {
                    arr_58_idx++;
                    Object arr_58_item = arr_58_item_loop.next();
                    Path arr_58_lpath = new Path(arr_58_idx, path);
                    // .'^'.2.bbox.0
                    res = json.isNumber(arr_58_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'^'.2.bbox.0]", (path != null ? arr_58_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'^'.2.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'^'.2]", path);
                return false;
            }
        }
        return true;
    }
    
    // object .'^'.3
    public boolean _jm_obj_33(Object val, Path path, Report rep)
    {
        // check must only props
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'^'.3]", path);
            return false;
        }
        Object pval;
        boolean res;
        if (! json.objectHasProp(val, "type"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <type> [.'^'.3]", path);
            return false;
        }
        pval = json.objectValue(val, "type");
        // .'^'.3.type
        res = json.isString(pval) && json.asString(pval).compareTo("FeatureCollection") == 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected FeatureCollection [.'^'.3.type]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <type> [.'^'.3]", path);
            return false;
        }
        if (! json.objectHasProp(val, "features"))
        {
            if (rep != null) rep.addEntry("missing mandatory prop <features> [.'^'.3]", path);
            return false;
        }
        pval = json.objectValue(val, "features");
        // .'^'.3.features
        res = json.isArray(pval);
        if (res)
        {
            int arr_59_idx = -1;
            Iterator<Object> arr_59_item_loop = json.arrayIterator(pval);
            while (arr_59_item_loop.hasNext())
            {
                arr_59_idx++;
                Object arr_59_item = arr_59_item_loop.next();
                Path arr_59_lpath = new Path(arr_59_idx, path);
                // .'^'.3.features.0
                res = json_model_13(arr_59_item, (path != null ? arr_59_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $Feature [.'^'.3.features.0]", (path != null ? arr_59_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'^'.3.features]", path);
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected value for mandatory prop <features> [.'^'.3]", path);
            return false;
        }
        if (json.objectHasProp(val, "bbox"))
        {
            pval = json.objectValue(val, "bbox");
            // .'^'.3.bbox
            res = json.isArray(pval);
            if (res)
            {
                int arr_60_idx = -1;
                Iterator<Object> arr_60_item_loop = json.arrayIterator(pval);
                while (arr_60_item_loop.hasNext())
                {
                    arr_60_idx++;
                    Object arr_60_item = arr_60_item_loop.next();
                    Path arr_60_lpath = new Path(arr_60_idx, path);
                    // .'^'.3.bbox.0
                    res = json.isNumber(arr_60_item);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 loose float [.'^'.3.bbox.0]", (path != null ? arr_60_lpath : null));
                    }
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("not array or unexpected array [.'^'.3.bbox]", path);
            }
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected value for optional prop <bbox> [.'^'.3]", path);
                return false;
            }
        }
        return true;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // Geo JSON Model JSON_MODEL_LOOSE_FLOAT
        // .
        // generic xor list
        long xc_0 = 0;
        boolean xr_0;
        // .'^'.0
        xr_0 = json_model_11(val, path, rep);
        if (! xr_0)
        {
            if (rep != null) rep.addEntry("unexpected $geometry [.'^'.0]", path);
        }
        if (xr_0)
        {
            xc_0 += 1;
        }
        // .'^'.1
        xr_0 = _jm_obj_23(val, path, rep);
        if (! xr_0)
        {
            if (rep != null) rep.addEntry("unexpected element [.'^'.1]", path);
        }
        if (xr_0)
        {
            xc_0 += 1;
        }
        if (xc_0 <= 1)
        {
            // .'^'.2
            xr_0 = _jm_obj_24(val, path, rep);
            if (! xr_0)
            {
                if (rep != null) rep.addEntry("unexpected element [.'^'.2]", path);
            }
            if (xr_0)
            {
                xc_0 += 1;
            }
        }
        if (xc_0 <= 1)
        {
            // .'^'.3
            xr_0 = _jm_obj_33(val, path, rep);
            if (! xr_0)
            {
                if (rep != null) rep.addEntry("unexpected element [.'^'.3]", path);
            }
            if (xr_0)
            {
                xc_0 += 1;
            }
        }
        res = xc_0 == 1;
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("not one model match [.'^']", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_map_0_cmap = new HashMap<Object, Checker>();
            _jm_map_0_cmap.put(json.safeJSON("\"Point\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_6(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"MultiPoint\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_7(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"LineString\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_8(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"MultiLineString\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_9(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"Polygon\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_10(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"MultiPolygon\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_11(o, p, r);} });
            _jm_map_1_cmap = new HashMap<Object, Checker>();
            _jm_map_1_cmap.put(json.safeJSON("\"Point\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_14(o, p, r);} });
            _jm_map_1_cmap.put(json.safeJSON("\"MultiPoint\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_15(o, p, r);} });
            _jm_map_1_cmap.put(json.safeJSON("\"LineString\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_16(o, p, r);} });
            _jm_map_1_cmap.put(json.safeJSON("\"MultiLineString\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_17(o, p, r);} });
            _jm_map_1_cmap.put(json.safeJSON("\"Polygon\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_18(o, p, r);} });
            _jm_map_1_cmap.put(json.safeJSON("\"MultiPolygon\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_19(o, p, r);} });
            _jm_map_1_cmap.put(json.safeJSON("\"GeometryCollection\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_20(o, p, r);} });
            _jm_map_2_cmap = new HashMap<Object, Checker>();
            _jm_map_2_cmap.put(json.safeJSON("\"Point\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_25(o, p, r);} });
            _jm_map_2_cmap.put(json.safeJSON("\"MultiPoint\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_26(o, p, r);} });
            _jm_map_2_cmap.put(json.safeJSON("\"LineString\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_27(o, p, r);} });
            _jm_map_2_cmap.put(json.safeJSON("\"MultiLineString\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_28(o, p, r);} });
            _jm_map_2_cmap.put(json.safeJSON("\"Polygon\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_29(o, p, r);} });
            _jm_map_2_cmap.put(json.safeJSON("\"MultiPolygon\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_30(o, p, r);} });
            _jm_map_2_cmap.put(json.safeJSON("\"GeometryCollection\""), new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_obj_31(o, p, r);} });
            geo_map_pmap = new HashMap<String, Checker>();
            geo_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            geo_map_pmap.put("position", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            geo_map_pmap.put("coord_array", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            geo_map_pmap.put("linear_ring", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            geo_map_pmap.put("Point", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
            geo_map_pmap.put("MultiPoint", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_6(o, p, r);} });
            geo_map_pmap.put("LineString", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_7(o, p, r);} });
            geo_map_pmap.put("MultiLineString", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_8(o, p, r);} });
            geo_map_pmap.put("Polygon", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_9(o, p, r);} });
            geo_map_pmap.put("MultiPolygon", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_10(o, p, r);} });
            geo_map_pmap.put("geometry", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_11(o, p, r);} });
            geo_map_pmap.put("GeometryCollection", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_12(o, p, r);} });
            geo_map_pmap.put("Feature", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_13(o, p, r);} });
            geo_map_pmap.put("FeatureCollection", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_14(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_map_0_cmap = null;
            _jm_map_1_cmap = null;
            _jm_map_2_cmap = null;
            geo_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return geo_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return geo_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new geo();
        Main.main("geo", checker, VERSION, args);
    }
}
