#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2.0b1";

var check_model_map = new Map()

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = Array.isArray(val);
    if (res)
    {
        for (let arr_0_idx = 0; arr_0_idx < val.length; arr_0_idx++)
        {
            let arr_0_item = val[arr_0_idx]
            let arr_0_lpath = path ? path.concat([arr_0_idx]) : null;
            // .0
            // .0.'|'.0
            res = (typeof arr_0_item === 'string' || arr_0_item instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.0.'|'.0]", (path ? arr_0_lpath : null)])
            }
            if (! res)
            {
                // .0.'|'.1
                res = Array.isArray(arr_0_item) && arr_0_item.length == 2;
                if (res)
                {
                    let lpath_1 = (path ? arr_0_lpath : null) ? (path ? arr_0_lpath : null).concat([0]) : null;
                    // .0.'|'.1.0
                    res = (typeof arr_0_item[0] === 'boolean' || arr_0_item[0] instanceof Boolean);
                    if (! res)
                    {
                        rep !== null && rep.push(["not a bool [.0.'|'.1.0]", ((path ? arr_0_lpath : null) ? lpath_1 : null)])
                    }
                    if (res)
                    {
                        let lpath_1 = (path ? arr_0_lpath : null) ? (path ? arr_0_lpath : null).concat([1]) : null;
                        // .0.'|'.1.1
                        res = true;
                        if (! res)
                        {
                            rep !== null && rep.push(["unexpected $ANY [.0.'|'.1.1]", ((path ? arr_0_lpath : null) ? lpath_1 : null)])
                        }
                    }
                }
                if (! res)
                {
                    rep !== null && rep.push(["not array or unexpected array [.0.'|'.1]", (path ? arr_0_lpath : null)])
                }
                if (! res)
                {
                    // .0.'|'.2
                    res = Array.isArray(arr_0_item) && arr_0_item.length == 3;
                    if (res)
                    {
                        let lpath_0 = (path ? arr_0_lpath : null) ? (path ? arr_0_lpath : null).concat([0]) : null;
                        // .0.'|'.2.0
                        res = (typeof arr_0_item[0] === 'boolean' || arr_0_item[0] instanceof Boolean);
                        if (! res)
                        {
                            rep !== null && rep.push(["not a bool [.0.'|'.2.0]", ((path ? arr_0_lpath : null) ? lpath_0 : null)])
                        }
                        if (res)
                        {
                            let lpath_0 = (path ? arr_0_lpath : null) ? (path ? arr_0_lpath : null).concat([1]) : null;
                            // .0.'|'.2.1
                            res = (typeof arr_0_item[1] === 'string' || arr_0_item[1] instanceof String);
                            if (! res)
                            {
                                rep !== null && rep.push(["unexpected string [.0.'|'.2.1]", ((path ? arr_0_lpath : null) ? lpath_0 : null)])
                            }
                            if (res)
                            {
                                let lpath_0 = (path ? arr_0_lpath : null) ? (path ? arr_0_lpath : null).concat([2]) : null;
                                // .0.'|'.2.2
                                res = true;
                                if (! res)
                                {
                                    rep !== null && rep.push(["unexpected $ANY [.0.'|'.2.2]", ((path ? arr_0_lpath : null) ? lpath_0 : null)])
                                }
                            }
                        }
                    }
                    if (! res)
                    {
                        rep !== null && rep.push(["not array or unexpected array [.0.'|'.2]", (path ? arr_0_lpath : null)])
                    }
                }
            }
            if (res)
            {
                if (rep !== null) rep.length = 0
            }
            else
            {
                rep !== null && rep.push(["no model matched [.0.'|']", (path ? arr_0_lpath : null)])
            }
            if (! res)
            {
                break;
            }
        }
    }
    if (! res)
    {
        rep !== null && rep.push(["not array or unexpected array [.]", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_1)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
