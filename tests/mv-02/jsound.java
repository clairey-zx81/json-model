//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class jsound extends ModelChecker
{
    static public final String VERSION = "2";

    Map<Object, Checker> _jm_map_0_cmap;
    Set<Object> _jm_cst_0_set;
    Set<Object> _jm_cst_1_set;
    Map<String, Checker> json_model_6_map_pmap;
    public Map<String, Checker> jsound_map_pmap;

    // object .'$Schema'.metadata
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Schema'.metadata]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_1 = new Path(prop, path);
            if (prop.compareTo("name") == 0)
            {
                // handle may name property
                // .'$Schema'.metadata.name
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$Schema'.metadata.name]", (path != null ? lpath_1 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Schema'.metadata.name]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("previous") == 0)
            {
                // handle may previous property
                // .'$Schema'.metadata.previous
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$Schema'.metadata.previous]", (path != null ? lpath_1 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Schema'.metadata.previous]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("date") == 0)
            {
                // handle may date property
                // .'$Schema'.metadata.date
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$Schema'.metadata.date]", (path != null ? lpath_1 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Schema'.metadata.date]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else if (prop.compareTo("authors") == 0)
            {
                // handle may authors property
                // .'$Schema'.metadata.authors
                res = json.isArray(pval);
                if (res)
                {
                    int arr_1_idx = -1;
                    Iterator<Object> arr_1_item_loop = json.arrayIterator(pval);
                    while (arr_1_item_loop.hasNext())
                    {
                        arr_1_idx++;
                        Object arr_1_item = arr_1_item_loop.next();
                        Path arr_1_lpath = new Path(arr_1_idx, (path != null ? lpath_1 : null));
                        // .'$Schema'.metadata.authors.0
                        res = json.isString(arr_1_item);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected string [.'$Schema'.metadata.authors.0]", ((path != null ? lpath_1 : null) != null ? arr_1_lpath : null));
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$Schema'.metadata.authors]", (path != null ? lpath_1 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Schema'.metadata.authors]", (path != null ? lpath_1 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$Schema'.metadata]", (path != null ? lpath_1 : null));
                return false;
            }
        }
        return true;
    }

    // check $Schema (.'$Schema')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        // .'$Schema'
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Schema']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (prop.compareTo("types") == 0)
            {
                // handle must types property
                must_count += 1;
                // .'$Schema'.types
                res = json.isArray(pval);
                if (res)
                {
                    int arr_0_idx = -1;
                    Iterator<Object> arr_0_item_loop = json.arrayIterator(pval);
                    while (arr_0_item_loop.hasNext())
                    {
                        arr_0_idx++;
                        Object arr_0_item = arr_0_item_loop.next();
                        Path arr_0_lpath = new Path(arr_0_idx, (path != null ? lpath_0 : null));
                        // .'$Schema'.types.0
                        res = json_model_3(arr_0_item, ((path != null ? lpath_0 : null) != null ? arr_0_lpath : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $Type [.'$Schema'.types.0]", ((path != null ? lpath_0 : null) != null ? arr_0_lpath : null));
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$Schema'.types]", (path != null ? lpath_0 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Schema'.types]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else if (prop.compareTo("metadata") == 0)
            {
                // handle may metadata property
                // .'$Schema'.metadata
                res = _jm_obj_0(pval, (path != null ? lpath_0 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected element [.'$Schema'.metadata]", (path != null ? lpath_0 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Schema'.metadata]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$Schema']", (path != null ? lpath_0 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "types"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <types> [.'$Schema']", path);
                }
            }
            return false;
        }
        return true;
    }


    // check $Type (.'$Type')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Type'
        boolean iso_0 = json.isObject(val);
        res = iso_0;
        if (res)
        {
            if (json.objectHasProp(val, "kind"))
            {
                Object tag_0 = json.objectValue(val, "kind");
                Checker fun_0 = _jm_map_0_cmap.get(tag_0);
                if (fun_0 != null)
                {
                    res = fun_0.call(val, path, rep);
                }
                else
                {
                    res = false;
                    if (rep != null) rep.addEntry("tag <kind> value not found [.'$Type'.'|']", path);
                }
            }
            else
            {
                res = false;
                if (rep != null) rep.addEntry("tag prop <kind> is missing [.'$Type'.'|']", path);
            }
        }
        else
        {
            if (rep != null) rep.addEntry("value is not an object [.'$Type'.'|']", path);
        }
        return res;
    }


    // check $atomic-types (.'$atomic-types')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$atomic-types'
        res = json.isScalar(val) && _jm_cst_0_set.contains(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("value not in enum [.'$atomic-types'.'|']", path);
        }
        return res;
    }

    // check $atomic (.'$atomic')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$atomic'
        // .'$atomic'.'|'.0
        res = json.isNull(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("not null [.'$atomic'.'|'.0]", path);
        }
        if (! res)
        {
            // .'$atomic'.'|'.1
            res = json.isBoolean(val);
            if (! res)
            {
                if (rep != null) rep.addEntry("not a bool [.'$atomic'.'|'.1]", path);
            }
            if (! res)
            {
                // .'$atomic'.'|'.2
                res = json.isInteger(val);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a -1 strict int [.'$atomic'.'|'.2]", path);
                }
                if (! res)
                {
                    // .'$atomic'.'|'.3
                    res = json.isDouble(val);
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not a -1.0 strict float [.'$atomic'.'|'.3]", path);
                    }
                    if (! res)
                    {
                        // .'$atomic'.'|'.4
                        res = json.isString(val);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected string [.'$atomic'.'|'.4]", path);
                        }
                    }
                }
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'$atomic'.'|']", path);
        }
        return res;
    }

    // check json_model_6_map_enumeration (.'$Atomic'.enumeration)
    public boolean _jm_f_0(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Atomic'.enumeration
        res = json.isArray(val);
        if (res)
        {
            int arr_2_idx = -1;
            Iterator<Object> arr_2_item_loop = json.arrayIterator(val);
            while (arr_2_item_loop.hasNext())
            {
                arr_2_idx++;
                Object arr_2_item = arr_2_item_loop.next();
                Path arr_2_lpath = new Path(arr_2_idx, path);
                // .'$Atomic'.enumeration.0
                res = json_model_5(arr_2_item, (path != null ? arr_2_lpath : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $atomic [.'$Atomic'.enumeration.0]", (path != null ? arr_2_lpath : null));
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$Atomic'.enumeration]", path);
        }
        return res;
    }


    // check json_model_6_map_explicitTypeZone (.'$Atomic'.explicitTypeZone)
    public boolean _jm_f_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Atomic'.explicitTypeZone
        res = json.isScalar(val) && _jm_cst_1_set.contains(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("value not in enum [.'$Atomic'.explicitTypeZone.'|']", path);
        }
        return res;
    }

    // check json_model_6_map_fractionDigits (.'$Atomic'.fractionDigits)
    public boolean _jm_f_2(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Atomic'.fractionDigits
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$Atomic'.fractionDigits]", path);
        }
        return res;
    }

    // check json_model_6_map_length (.'$Atomic'.length)
    public boolean _jm_f_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Atomic'.length
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$Atomic'.length]", path);
        }
        return res;
    }

    // check json_model_6_map_maxLength (.'$Atomic'.maxLength)
    public boolean _jm_f_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Atomic'.maxLength
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$Atomic'.maxLength]", path);
        }
        return res;
    }

    // check json_model_6_map_minLength (.'$Atomic'.minLength)
    public boolean _jm_f_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Atomic'.minLength
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$Atomic'.minLength]", path);
        }
        return res;
    }

    // check json_model_6_map_name (.'$Atomic'.name)
    public boolean _jm_f_6(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Atomic'.name
        res = json.isString(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.'$Atomic'.name]", path);
        }
        return res;
    }

    // check json_model_6_map_pattern (.'$Atomic'.pattern)
    public boolean _jm_f_7(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Atomic'.pattern
        res = json.isString(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.'$Atomic'.pattern]", path);
        }
        return res;
    }

    // check json_model_6_map_totalDigits (.'$Atomic'.totalDigits)
    public boolean _jm_f_8(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$Atomic'.totalDigits
        res = json.isInteger(val) && json.asLong(val) >= 0;
        if (! res)
        {
            if (rep != null) rep.addEntry("not a 0 strict int [.'$Atomic'.totalDigits]", path);
        }
        return res;
    }


    // check $Atomic (.'$Atomic')
    public boolean json_model_6(Object val, Path path, Report rep)
    {
        // could there be derived atomics as well?
        // .'$Atomic'
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Atomic']", path);
            return false;
        }
        boolean res;
        Checker pfun;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_2 = new Path(prop, path);
            if (prop.compareTo("kind") == 0)
            {
                // handle must kind property
                must_count += 1;
                // .'$Atomic'.kind
                res = json.isString(pval) && json.asString(pval).compareTo("atomic") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected atomic [.'$Atomic'.kind]", (path != null ? lpath_2 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Atomic'.kind]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if (prop.compareTo("baseType") == 0)
            {
                // handle must baseType property
                must_count += 1;
                // .'$Atomic'.baseType
                res = json_model_4(pval, (path != null ? lpath_2 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $atomic-types [.'$Atomic'.baseType]", (path != null ? lpath_2 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Atomic'.baseType]", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else if ((pfun = json_model_6_map_pmap.get(prop)) != null)
            {
                // handle 13 may props
                if (pfun != null && ! (pfun.call(pval, (path != null ? lpath_2 : null), rep)))
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Atomic']", (path != null ? lpath_2 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$Atomic']", (path != null ? lpath_2 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "baseType"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <baseType> [.'$Atomic']", path);
                }
                if (! json.objectHasProp(val, "kind"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <kind> [.'$Atomic']", path);
                }
            }
            return false;
        }
        return true;
    }

    // check $Object (.'$Object')
    public boolean json_model_7(Object val, Path path, Report rep)
    {
        // .'$Object'
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Object']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_3 = new Path(prop, path);
            if (prop.compareTo("kind") == 0)
            {
                // handle must kind property
                must_count += 1;
                // .'$Object'.kind
                res = json.isString(pval) && json.asString(pval).compareTo("object") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected object [.'$Object'.kind]", (path != null ? lpath_3 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Object'.kind]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else if (prop.compareTo("name") == 0)
            {
                // handle may name property
                // .'$Object'.name
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$Object'.name]", (path != null ? lpath_3 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Object'.name]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else if (prop.compareTo("baseType") == 0)
            {
                // handle may baseType property
                // .'$Object'.baseType
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$Object'.baseType]", (path != null ? lpath_3 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Object'.baseType]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else if (prop.compareTo("content") == 0)
            {
                // handle may content property
                // .'$Object'.content
                res = json.isArray(pval);
                if (res)
                {
                    int arr_3_idx = -1;
                    Iterator<Object> arr_3_item_loop = json.arrayIterator(pval);
                    while (arr_3_item_loop.hasNext())
                    {
                        arr_3_idx++;
                        Object arr_3_item = arr_3_item_loop.next();
                        Path arr_3_lpath = new Path(arr_3_idx, (path != null ? lpath_3 : null));
                        // .'$Object'.content.0
                        res = json_model_8(arr_3_item, ((path != null ? lpath_3 : null) != null ? arr_3_lpath : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $Fields [.'$Object'.content.0]", ((path != null ? lpath_3 : null) != null ? arr_3_lpath : null));
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$Object'.content]", (path != null ? lpath_3 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Object'.content]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else if (prop.compareTo("closed") == 0)
            {
                // handle may closed property
                // .'$Object'.closed
                res = json.isBoolean(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a bool [.'$Object'.closed]", (path != null ? lpath_3 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Object'.closed]", (path != null ? lpath_3 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$Object']", (path != null ? lpath_3 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "kind"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <kind> [.'$Object']", path);
                }
            }
            return false;
        }
        return true;
    }

    // check $Fields (.'$Fields')
    public boolean json_model_8(Object val, Path path, Report rep)
    {
        // .'$Fields'
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Fields']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_4 = new Path(prop, path);
            if (prop.compareTo("name") == 0)
            {
                // handle must name property
                must_count += 1;
                // .'$Fields'.name
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$Fields'.name]", (path != null ? lpath_4 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Fields'.name]", (path != null ? lpath_4 : null));
                    return false;
                }
            }
            else if (prop.compareTo("type") == 0)
            {
                // handle must type property
                must_count += 1;
                // .'$Fields'.type
                res = json_model_11(pval, (path != null ? lpath_4 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $type-or-ref [.'$Fields'.type]", (path != null ? lpath_4 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Fields'.type]", (path != null ? lpath_4 : null));
                    return false;
                }
            }
            else if (prop.compareTo("required") == 0)
            {
                // handle may required property
                // .'$Fields'.required
                res = json.isBoolean(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a bool [.'$Fields'.required]", (path != null ? lpath_4 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Fields'.required]", (path != null ? lpath_4 : null));
                    return false;
                }
            }
            else if (prop.compareTo("default") == 0)
            {
                // handle may default property
                // .'$Fields'.default
                res = true;
            }
            else if (prop.compareTo("unique") == 0)
            {
                // handle may unique property
                // .'$Fields'.unique
                res = json.isBoolean(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a bool [.'$Fields'.unique]", (path != null ? lpath_4 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Fields'.unique]", (path != null ? lpath_4 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$Fields']", (path != null ? lpath_4 : null));
                return false;
            }
        }
        if (must_count != 2)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "name"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <name> [.'$Fields']", path);
                }
                if (! json.objectHasProp(val, "type"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <type> [.'$Fields']", path);
                }
            }
            return false;
        }
        return true;
    }

    // check $Array (.'$Array')
    public boolean json_model_9(Object val, Path path, Report rep)
    {
        // WTF about 'content'?
        // .'$Array'
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Array']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_5 = new Path(prop, path);
            if (prop.compareTo("kind") == 0)
            {
                // handle must kind property
                must_count += 1;
                // .'$Array'.kind
                res = json.isString(pval) && json.asString(pval).compareTo("array") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected array [.'$Array'.kind]", (path != null ? lpath_5 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Array'.kind]", (path != null ? lpath_5 : null));
                    return false;
                }
            }
            else if (prop.compareTo("name") == 0)
            {
                // handle may name property
                // .'$Array'.name
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$Array'.name]", (path != null ? lpath_5 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Array'.name]", (path != null ? lpath_5 : null));
                    return false;
                }
            }
            else if (prop.compareTo("baseType") == 0)
            {
                // handle may baseType property
                // .'$Array'.baseType
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$Array'.baseType]", (path != null ? lpath_5 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Array'.baseType]", (path != null ? lpath_5 : null));
                    return false;
                }
            }
            else if (prop.compareTo("content") == 0)
            {
                // handle may content property
                // .'$Array'.content
                res = json_model_11(pval, (path != null ? lpath_5 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $type-or-ref [.'$Array'.content]", (path != null ? lpath_5 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Array'.content]", (path != null ? lpath_5 : null));
                    return false;
                }
            }
            else if (prop.compareTo("minLength") == 0)
            {
                // handle may minLength property
                // .'$Array'.minLength
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.'$Array'.minLength]", (path != null ? lpath_5 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Array'.minLength]", (path != null ? lpath_5 : null));
                    return false;
                }
            }
            else if (prop.compareTo("maxLength") == 0)
            {
                // handle may maxLength property
                // .'$Array'.maxLength
                res = json.isInteger(pval) && json.asLong(pval) >= 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("not a 0 strict int [.'$Array'.maxLength]", (path != null ? lpath_5 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Array'.maxLength]", (path != null ? lpath_5 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$Array']", (path != null ? lpath_5 : null));
                return false;
            }
        }
        if (must_count != 1)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "kind"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <kind> [.'$Array']", path);
                }
            }
            return false;
        }
        return true;
    }

    // check $Union (.'$Union')
    public boolean json_model_10(Object val, Path path, Report rep)
    {
        // jsound.jsound.json does not say that it is a type…
        // .'$Union'
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.'$Union']", path);
            return false;
        }
        boolean res;
        long must_count = 0;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_6 = new Path(prop, path);
            if (prop.compareTo("name") == 0)
            {
                // handle must name property
                must_count += 1;
                // .'$Union'.name
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$Union'.name]", (path != null ? lpath_6 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Union'.name]", (path != null ? lpath_6 : null));
                    return false;
                }
            }
            else if (prop.compareTo("kind") == 0)
            {
                // handle must kind property
                must_count += 1;
                // .'$Union'.kind
                res = json.isString(pval) && json.asString(pval).compareTo("union") == 0;
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected union [.'$Union'.kind]", (path != null ? lpath_6 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Union'.kind]", (path != null ? lpath_6 : null));
                    return false;
                }
            }
            else if (prop.compareTo("content") == 0)
            {
                // handle must content property
                must_count += 1;
                // .'$Union'.content
                res = json.isArray(pval);
                if (res)
                {
                    int arr_4_idx = -1;
                    Iterator<Object> arr_4_item_loop = json.arrayIterator(pval);
                    while (arr_4_item_loop.hasNext())
                    {
                        arr_4_idx++;
                        Object arr_4_item = arr_4_item_loop.next();
                        Path arr_4_lpath = new Path(arr_4_idx, (path != null ? lpath_6 : null));
                        // .'$Union'.content.0
                        res = json_model_11(arr_4_item, ((path != null ? lpath_6 : null) != null ? arr_4_lpath : null), rep);
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("unexpected $type-or-ref [.'$Union'.content.0]", ((path != null ? lpath_6 : null) != null ? arr_4_lpath : null));
                            break;
                        }
                    }
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("not array or unexpected array [.'$Union'.content]", (path != null ? lpath_6 : null));
                    if (rep != null) rep.addEntry("invalid mandatory prop value [.'$Union'.content]", (path != null ? lpath_6 : null));
                    return false;
                }
            }
            else if (prop.compareTo("baseType") == 0)
            {
                // handle may baseType property
                // .'$Union'.baseType
                res = json.isString(pval);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.'$Union'.baseType]", (path != null ? lpath_6 : null));
                    if (rep != null) rep.addEntry("invalid optional prop value [.'$Union'.baseType]", (path != null ? lpath_6 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.'$Union']", (path != null ? lpath_6 : null));
                return false;
            }
        }
        if (must_count != 3)
        {
            if (rep != null)
            {
                if (! json.objectHasProp(val, "content"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <content> [.'$Union']", path);
                }
                if (! json.objectHasProp(val, "kind"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <kind> [.'$Union']", path);
                }
                if (! json.objectHasProp(val, "name"))
                {
                    if (rep != null) rep.addEntry("missing mandatory prop <name> [.'$Union']", path);
                }
            }
            return false;
        }
        return true;
    }

    // check $type-or-ref (.'$type-or-ref')
    public boolean json_model_11(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$type-or-ref'
        // .'$type-or-ref'.'|'.0
        res = json.isString(val);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected string [.'$type-or-ref'.'|'.0]", path);
        }
        if (! res)
        {
            // .'$type-or-ref'.'|'.1
            res = json_model_3(val, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $Type [.'$type-or-ref'.'|'.1]", path);
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'$type-or-ref'.'|']", path);
        }
        return res;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = json_model_2(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $Schema [.]", path);
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_map_0_cmap = new HashMap<Object, Checker>();
            _jm_map_0_cmap.put(json.safeJSON("\"atomic\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_6(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"object\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_7(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"array\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_9(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"union\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_10(o, p, r);} });
            _jm_cst_0_set = new HashSet<Object>();
            _jm_cst_0_set.add(json.safeJSON("\"string\""));
            _jm_cst_0_set.add(json.safeJSON("\"decimal\""));
            _jm_cst_0_set.add(json.safeJSON("\"integer\""));
            _jm_cst_0_set.add(json.safeJSON("\"double\""));
            _jm_cst_0_set.add(json.safeJSON("\"boolean\""));
            _jm_cst_0_set.add(json.safeJSON("\"anyURI\""));
            _jm_cst_0_set.add(json.safeJSON("\"base64Binary\""));
            _jm_cst_0_set.add(json.safeJSON("\"hexBinary\""));
            _jm_cst_0_set.add(json.safeJSON("\"date\""));
            _jm_cst_0_set.add(json.safeJSON("\"dateTime\""));
            _jm_cst_0_set.add(json.safeJSON("\"time\""));
            _jm_cst_0_set.add(json.safeJSON("\"dateTimeStamp\""));
            _jm_cst_0_set.add(json.safeJSON("\"duration\""));
            _jm_cst_0_set.add(json.safeJSON("\"null\""));
            _jm_cst_1_set = new HashSet<Object>();
            _jm_cst_1_set.add(json.safeJSON("\"required\""));
            _jm_cst_1_set.add(json.safeJSON("\"prohibited\""));
            _jm_cst_1_set.add(json.safeJSON("\"optional\""));
            json_model_6_map_pmap = new HashMap<String, Checker>();
            json_model_6_map_pmap.put("enumeration", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_0(o, p, r);} });
            json_model_6_map_pmap.put("explicitTypeZone", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_1(o, p, r);} });
            json_model_6_map_pmap.put("fractionDigits", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_2(o, p, r);} });
            json_model_6_map_pmap.put("length", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_3(o, p, r);} });
            json_model_6_map_pmap.put("maxExclusive", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
            json_model_6_map_pmap.put("maxInclusive", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
            json_model_6_map_pmap.put("maxLength", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_4(o, p, r);} });
            json_model_6_map_pmap.put("minExclusive", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
            json_model_6_map_pmap.put("minInclusive", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
            json_model_6_map_pmap.put("minLength", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_5(o, p, r);} });
            json_model_6_map_pmap.put("name", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_6(o, p, r);} });
            json_model_6_map_pmap.put("pattern", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_7(o, p, r);} });
            json_model_6_map_pmap.put("totalDigits", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_8(o, p, r);} });
            jsound_map_pmap = new HashMap<String, Checker>();
            jsound_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            jsound_map_pmap.put("Schema", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            jsound_map_pmap.put("Type", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            jsound_map_pmap.put("atomic-types", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            jsound_map_pmap.put("atomic", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
            jsound_map_pmap.put("Atomic", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_6(o, p, r);} });
            jsound_map_pmap.put("Object", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_7(o, p, r);} });
            jsound_map_pmap.put("Fields", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_8(o, p, r);} });
            jsound_map_pmap.put("Array", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_9(o, p, r);} });
            jsound_map_pmap.put("Union", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_10(o, p, r);} });
            jsound_map_pmap.put("type-or-ref", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_11(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_map_0_cmap = null;
            _jm_cst_0_set = null;
            _jm_cst_1_set = null;
            json_model_6_map_pmap = null;
            jsound_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return jsound_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return jsound_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new jsound();
        Main.main("jsound", checker, VERSION, args);
    }
}
