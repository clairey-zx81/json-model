#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_map_0: dict[str, str]
_jm_cst_0: set[str]
_jm_cst_1: set[str]
json_model_6_map: PropMap
check_model_map: PropMap

# object .'$Schema'.metadata
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Schema'.metadata]", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle may name property
            # .'$Schema'.metadata.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Schema'.metadata.name]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Schema'.metadata.name]", lpath_1 if path is not None else None))
                return False
        elif prop == "previous":
            # handle may previous property
            # .'$Schema'.metadata.previous
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Schema'.metadata.previous]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Schema'.metadata.previous]", lpath_1 if path is not None else None))
                return False
        elif prop == "date":
            # handle may date property
            # .'$Schema'.metadata.date
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Schema'.metadata.date]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Schema'.metadata.date]", lpath_1 if path is not None else None))
                return False
        elif prop == "authors":
            # handle may authors property
            # .'$Schema'.metadata.authors
            res = isinstance(pval, list)
            if res:
                for arr_1_idx, arr_1_item in enumerate(pval):
                    arr_1_lpath: Path = ((lpath_1 if path is not None else None) + [ arr_1_idx ]) if (lpath_1 if path is not None else None) is not None else None
                    # .'$Schema'.metadata.authors.0
                    res = isinstance(arr_1_item, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$Schema'.metadata.authors.0]", arr_1_lpath if (lpath_1 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Schema'.metadata.authors]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Schema'.metadata.authors]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Schema'.metadata]", lpath_1 if path is not None else None))
            return False
    return True

# check $Schema (.'$Schema')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Schema'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Schema']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "types":
            # handle must types property
            must_count += 1
            # .'$Schema'.types
            res = isinstance(pval, list)
            if res:
                for arr_0_idx, arr_0_item in enumerate(pval):
                    arr_0_lpath: Path = ((lpath_0 if path is not None else None) + [ arr_0_idx ]) if (lpath_0 if path is not None else None) is not None else None
                    # .'$Schema'.types.0
                    res = json_model_3(arr_0_item, arr_0_lpath if (lpath_0 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Type [.'$Schema'.types.0]", arr_0_lpath if (lpath_0 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Schema'.types]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Schema'.types]", lpath_0 if path is not None else None))
                return False
        elif prop == "metadata":
            # handle may metadata property
            # .'$Schema'.metadata
            res = _jm_obj_0(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected element [.'$Schema'.metadata]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Schema'.metadata]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Schema']", lpath_0 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "types" in val:
                rep is None or rep.append(("missing mandatory prop <types> [.'$Schema']", path))
        return False
    return True


# check $Type (.'$Type')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Type'
    iso_0: bool = isinstance(val, dict)
    res = iso_0
    if res:
        if "kind" in val:
            tag_0: Jsonable = val.get("kind", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <kind> value not found [.'$Type'.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <kind> is missing [.'$Type'.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'$Type'.'|']", path))
    return res


# check $atomic-types (.'$atomic-types')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$atomic-types'
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$atomic-types'.'|']", path))
    return res

# check $atomic (.'$atomic')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$atomic'
    # .'$atomic'.'|'.0
    res = val is None
    if not res:
        rep is None or rep.append(("not null [.'$atomic'.'|'.0]", path))
    if not res:
        # .'$atomic'.'|'.1
        res = isinstance(val, bool)
        if not res:
            rep is None or rep.append(("not a bool [.'$atomic'.'|'.1]", path))
        if not res:
            # .'$atomic'.'|'.2
            res = isinstance(val, int) and not isinstance(val, bool)
            if not res:
                rep is None or rep.append(("not a -1 strict int [.'$atomic'.'|'.2]", path))
            if not res:
                # .'$atomic'.'|'.3
                res = isinstance(val, float)
                if not res:
                    rep is None or rep.append(("not a -1.0 strict float [.'$atomic'.'|'.3]", path))
                if not res:
                    # .'$atomic'.'|'.4
                    res = isinstance(val, str)
                    if not res:
                        rep is None or rep.append(("unexpected string [.'$atomic'.'|'.4]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$atomic'.'|']", path))
    return res

# check json_model_6_map_enumeration (.'$Atomic'.enumeration)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Atomic'.enumeration
    res = isinstance(val, list)
    if res:
        for arr_2_idx, arr_2_item in enumerate(val):
            arr_2_lpath: Path = (path + [ arr_2_idx ]) if path is not None else None
            # .'$Atomic'.enumeration.0
            res = json_model_5(arr_2_item, arr_2_lpath if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $atomic [.'$Atomic'.enumeration.0]", arr_2_lpath if path is not None else None))
                break
    if not res:
        rep is None or rep.append(("not array or unexpected array [.'$Atomic'.enumeration]", path))
    return res


# check json_model_6_map_explicitTypeZone (.'$Atomic'.explicitTypeZone)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Atomic'.explicitTypeZone
    res = ((val is None or isinstance(val, (bool, int, float, str)))) and val in _jm_cst_1
    if not res:
        rep is None or rep.append(("value not in enum [.'$Atomic'.explicitTypeZone.'|']", path))
    return res

# check json_model_6_map_fractionDigits (.'$Atomic'.fractionDigits)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Atomic'.fractionDigits
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$Atomic'.fractionDigits]", path))
    return res

# check json_model_6_map_length (.'$Atomic'.length)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Atomic'.length
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$Atomic'.length]", path))
    return res

# check json_model_6_map_maxExclusive (.'$Atomic'.maxExclusive)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Atomic'.maxExclusive
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $atomic [.'$Atomic'.maxExclusive]", path))
    return res

# check json_model_6_map_maxInclusive (.'$Atomic'.maxInclusive)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Atomic'.maxInclusive
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $atomic [.'$Atomic'.maxInclusive]", path))
    return res

# check json_model_6_map_maxLength (.'$Atomic'.maxLength)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Atomic'.maxLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$Atomic'.maxLength]", path))
    return res

# check json_model_6_map_minExclusive (.'$Atomic'.minExclusive)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Atomic'.minExclusive
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $atomic [.'$Atomic'.minExclusive]", path))
    return res

# check json_model_6_map_minInclusive (.'$Atomic'.minInclusive)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Atomic'.minInclusive
    res = json_model_5(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $atomic [.'$Atomic'.minInclusive]", path))
    return res

# check json_model_6_map_minLength (.'$Atomic'.minLength)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Atomic'.minLength
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$Atomic'.minLength]", path))
    return res

# check json_model_6_map_name (.'$Atomic'.name)
def _jm_f_10(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Atomic'.name
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Atomic'.name]", path))
    return res

# check json_model_6_map_pattern (.'$Atomic'.pattern)
def _jm_f_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Atomic'.pattern
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Atomic'.pattern]", path))
    return res

# check json_model_6_map_totalDigits (.'$Atomic'.totalDigits)
def _jm_f_12(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Atomic'.totalDigits
    res = isinstance(val, int) and not isinstance(val, bool) and val >= 0
    if not res:
        rep is None or rep.append(("not a 0 strict int [.'$Atomic'.totalDigits]", path))
    return res


# check $Atomic (.'$Atomic')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # could there be derived atomics as well?
    # .'$Atomic'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Atomic']", path))
        return False
    res: bool
    pfun: CheckFun
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_2: Path = (path + [ prop ]) if path is not None else None
        if prop == "kind":
            # handle must kind property
            must_count += 1
            # .'$Atomic'.kind
            res = isinstance(pval, str) and pval == "atomic"
            if not res:
                rep is None or rep.append(("unexpected atomic [.'$Atomic'.kind]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Atomic'.kind]", lpath_2 if path is not None else None))
                return False
        elif prop == "baseType":
            # handle must baseType property
            must_count += 1
            # .'$Atomic'.baseType
            res = json_model_4(pval, lpath_2 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $atomic-types [.'$Atomic'.baseType]", lpath_2 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Atomic'.baseType]", lpath_2 if path is not None else None))
                return False
        elif pfun := json_model_6_map.get(prop):
            # handle 13 may props
            if pfun != UNDEFINED and not pfun(pval, lpath_2 if path is not None else None, rep):
                rep is None or rep.append(("invalid optional prop value [.'$Atomic']", lpath_2 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Atomic']", lpath_2 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "baseType" in val:
                rep is None or rep.append(("missing mandatory prop <baseType> [.'$Atomic']", path))
            if not "kind" in val:
                rep is None or rep.append(("missing mandatory prop <kind> [.'$Atomic']", path))
        return False
    return True

# check $Object (.'$Object')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Object'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Object']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_3: Path = (path + [ prop ]) if path is not None else None
        if prop == "kind":
            # handle must kind property
            must_count += 1
            # .'$Object'.kind
            res = isinstance(pval, str) and pval == "object"
            if not res:
                rep is None or rep.append(("unexpected object [.'$Object'.kind]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Object'.kind]", lpath_3 if path is not None else None))
                return False
        elif prop == "name":
            # handle may name property
            # .'$Object'.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Object'.name]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Object'.name]", lpath_3 if path is not None else None))
                return False
        elif prop == "baseType":
            # handle may baseType property
            # .'$Object'.baseType
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Object'.baseType]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Object'.baseType]", lpath_3 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$Object'.content
            res = isinstance(pval, list)
            if res:
                for arr_3_idx, arr_3_item in enumerate(pval):
                    arr_3_lpath: Path = ((lpath_3 if path is not None else None) + [ arr_3_idx ]) if (lpath_3 if path is not None else None) is not None else None
                    # .'$Object'.content.0
                    res = json_model_8(arr_3_item, arr_3_lpath if (lpath_3 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $Fields [.'$Object'.content.0]", arr_3_lpath if (lpath_3 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Object'.content]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Object'.content]", lpath_3 if path is not None else None))
                return False
        elif prop == "closed":
            # handle may closed property
            # .'$Object'.closed
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Object'.closed]", lpath_3 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Object'.closed]", lpath_3 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Object']", lpath_3 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "kind" in val:
                rep is None or rep.append(("missing mandatory prop <kind> [.'$Object']", path))
        return False
    return True

# check $Fields (.'$Fields')
def json_model_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Fields'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Fields']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_4: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$Fields'.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Fields'.name]", lpath_4 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Fields'.name]", lpath_4 if path is not None else None))
                return False
        elif prop == "type":
            # handle must type property
            must_count += 1
            # .'$Fields'.type
            res = json_model_11(pval, lpath_4 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $type-or-ref [.'$Fields'.type]", lpath_4 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Fields'.type]", lpath_4 if path is not None else None))
                return False
        elif prop == "required":
            # handle may required property
            # .'$Fields'.required
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Fields'.required]", lpath_4 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Fields'.required]", lpath_4 if path is not None else None))
                return False
        elif prop == "default":
            # handle may default property
            # .'$Fields'.default
            res = True
            if not res:
                rep is None or rep.append(("unexpected $ANY [.'$Fields'.default]", lpath_4 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Fields'.default]", lpath_4 if path is not None else None))
                return False
        elif prop == "unique":
            # handle may unique property
            # .'$Fields'.unique
            res = isinstance(pval, bool)
            if not res:
                rep is None or rep.append(("not a bool [.'$Fields'.unique]", lpath_4 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Fields'.unique]", lpath_4 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Fields']", lpath_4 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$Fields']", path))
            if not "type" in val:
                rep is None or rep.append(("missing mandatory prop <type> [.'$Fields']", path))
        return False
    return True

# check $Array (.'$Array')
def json_model_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # WTF about 'content'?
    # .'$Array'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Array']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_5: Path = (path + [ prop ]) if path is not None else None
        if prop == "kind":
            # handle must kind property
            must_count += 1
            # .'$Array'.kind
            res = isinstance(pval, str) and pval == "array"
            if not res:
                rep is None or rep.append(("unexpected array [.'$Array'.kind]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Array'.kind]", lpath_5 if path is not None else None))
                return False
        elif prop == "name":
            # handle may name property
            # .'$Array'.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Array'.name]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Array'.name]", lpath_5 if path is not None else None))
                return False
        elif prop == "baseType":
            # handle may baseType property
            # .'$Array'.baseType
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Array'.baseType]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Array'.baseType]", lpath_5 if path is not None else None))
                return False
        elif prop == "content":
            # handle may content property
            # .'$Array'.content
            res = json_model_11(pval, lpath_5 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $type-or-ref [.'$Array'.content]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Array'.content]", lpath_5 if path is not None else None))
                return False
        elif prop == "minLength":
            # handle may minLength property
            # .'$Array'.minLength
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.'$Array'.minLength]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Array'.minLength]", lpath_5 if path is not None else None))
                return False
        elif prop == "maxLength":
            # handle may maxLength property
            # .'$Array'.maxLength
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.'$Array'.maxLength]", lpath_5 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Array'.maxLength]", lpath_5 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Array']", lpath_5 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "kind" in val:
                rep is None or rep.append(("missing mandatory prop <kind> [.'$Array']", path))
        return False
    return True

# check $Union (.'$Union')
def json_model_10(val: Jsonable, path: Path, rep: Report) -> bool:
    # jsound.jsound.json does not say that it is a type…
    # .'$Union'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Union']", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_6: Path = (path + [ prop ]) if path is not None else None
        if prop == "name":
            # handle must name property
            must_count += 1
            # .'$Union'.name
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Union'.name]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Union'.name]", lpath_6 if path is not None else None))
                return False
        elif prop == "kind":
            # handle must kind property
            must_count += 1
            # .'$Union'.kind
            res = isinstance(pval, str) and pval == "union"
            if not res:
                rep is None or rep.append(("unexpected union [.'$Union'.kind]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Union'.kind]", lpath_6 if path is not None else None))
                return False
        elif prop == "content":
            # handle must content property
            must_count += 1
            # .'$Union'.content
            res = isinstance(pval, list)
            if res:
                for arr_4_idx, arr_4_item in enumerate(pval):
                    arr_4_lpath: Path = ((lpath_6 if path is not None else None) + [ arr_4_idx ]) if (lpath_6 if path is not None else None) is not None else None
                    # .'$Union'.content.0
                    res = json_model_11(arr_4_item, arr_4_lpath if (lpath_6 if path is not None else None) is not None else None, rep)
                    if not res:
                        rep is None or rep.append(("unexpected $type-or-ref [.'$Union'.content.0]", arr_4_lpath if (lpath_6 if path is not None else None) is not None else None))
                        break
            if not res:
                rep is None or rep.append(("not array or unexpected array [.'$Union'.content]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.'$Union'.content]", lpath_6 if path is not None else None))
                return False
        elif prop == "baseType":
            # handle may baseType property
            # .'$Union'.baseType
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.'$Union'.baseType]", lpath_6 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Union'.baseType]", lpath_6 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Union']", lpath_6 if path is not None else None))
            return False
    if must_count != 3:
        if rep is not None:
            if not "content" in val:
                rep is None or rep.append(("missing mandatory prop <content> [.'$Union']", path))
            if not "kind" in val:
                rep is None or rep.append(("missing mandatory prop <kind> [.'$Union']", path))
            if not "name" in val:
                rep is None or rep.append(("missing mandatory prop <name> [.'$Union']", path))
        return False
    return True

# check $type-or-ref (.'$type-or-ref')
def json_model_11(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$type-or-ref'
    # .'$type-or-ref'.'|'.0
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$type-or-ref'.'|'.0]", path))
    if not res:
        # .'$type-or-ref'.'|'.1
        res = json_model_3(val, path, rep)
        if not res:
            rep is None or rep.append(("unexpected $Type [.'$type-or-ref'.'|'.1]", path))
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("no model matched [.'$type-or-ref'.'|']", path))
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_2(val, path, rep)
    if not res:
        rep is None or rep.append(("unexpected $Schema [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_map_0
        _jm_map_0 = {
            "atomic": json_model_6,
            "object": json_model_7,
            "array": json_model_9,
            "union": json_model_10,
        }
        global _jm_cst_0
        _jm_cst_0 = {'anyURI', 'base64Binary', 'boolean', 'date', 'dateTime', 'dateTimeStamp', 'decimal', 'double', 'duration', 'hexBinary', 'integer', 'null', 'string', 'time'}
        global _jm_cst_1
        _jm_cst_1 = {'optional', 'prohibited', 'required'}
        global json_model_6_map
        json_model_6_map = {
            "enumeration": _jm_f_0,
            "explicitTypeZone": _jm_f_1,
            "fractionDigits": _jm_f_2,
            "length": _jm_f_3,
            "maxExclusive": _jm_f_4,
            "maxInclusive": _jm_f_5,
            "maxLength": _jm_f_6,
            "minExclusive": _jm_f_7,
            "minInclusive": _jm_f_8,
            "minLength": _jm_f_9,
            "name": _jm_f_10,
            "pattern": _jm_f_11,
            "totalDigits": _jm_f_12,
        }
        global check_model_map
        check_model_map = {
            "": json_model_2,
            "Schema": json_model_2,
            "Type": json_model_3,
            "atomic-types": json_model_4,
            "atomic": json_model_5,
            "Atomic": json_model_6,
            "Object": json_model_7,
            "Fields": json_model_8,
            "Array": json_model_9,
            "Union": json_model_10,
            "type-or-ref": json_model_11,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
