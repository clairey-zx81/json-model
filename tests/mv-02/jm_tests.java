//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class jm_tests extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> jm_tests_map_pmap;

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = json.isArray(val);
        if (res)
        {
            int arr_0_idx = -1;
            Iterator<Object> arr_0_item_loop = json.arrayIterator(val);
            while (arr_0_item_loop.hasNext())
            {
                arr_0_idx++;
                Object arr_0_item = arr_0_item_loop.next();
                Path arr_0_lpath = new Path(arr_0_idx, path);
                // .0
                // .0.'|'.0
                res = json.isString(arr_0_item);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected string [.0.'|'.0]", (path != null ? arr_0_lpath : null));
                }
                if (! res)
                {
                    // .0.'|'.1
                    res = json.isArray(arr_0_item) && json.arrayLength(arr_0_item) == 2;
                    if (res)
                    {
                        Path lpath_1 = new Path(0, (path != null ? arr_0_lpath : null));
                        // .0.'|'.1.0
                        res = json.isBoolean(json.arrayItem(arr_0_item, 0));
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not a bool [.0.'|'.1.0]", ((path != null ? arr_0_lpath : null) != null ? lpath_1 : null));
                        }
                        if (res)
                        {
                            lpath_1 = new Path(1, (path != null ? arr_0_lpath : null));
                            // .0.'|'.1.1
                            res = true;
                            if (! res)
                            {
                                if (rep != null) rep.addEntry("unexpected $ANY [.0.'|'.1.1]", ((path != null ? arr_0_lpath : null) != null ? lpath_1 : null));
                            }
                        }
                    }
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not array or unexpected array [.0.'|'.1]", (path != null ? arr_0_lpath : null));
                    }
                    if (! res)
                    {
                        // .0.'|'.2
                        res = json.isArray(arr_0_item) && json.arrayLength(arr_0_item) == 3;
                        if (res)
                        {
                            Path lpath_0 = new Path(0, (path != null ? arr_0_lpath : null));
                            // .0.'|'.2.0
                            res = json.isBoolean(json.arrayItem(arr_0_item, 0));
                            if (! res)
                            {
                                if (rep != null) rep.addEntry("not a bool [.0.'|'.2.0]", ((path != null ? arr_0_lpath : null) != null ? lpath_0 : null));
                            }
                            if (res)
                            {
                                lpath_0 = new Path(1, (path != null ? arr_0_lpath : null));
                                // .0.'|'.2.1
                                res = json.isString(json.arrayItem(arr_0_item, 1));
                                if (! res)
                                {
                                    if (rep != null) rep.addEntry("unexpected string [.0.'|'.2.1]", ((path != null ? arr_0_lpath : null) != null ? lpath_0 : null));
                                }
                                if (res)
                                {
                                    lpath_0 = new Path(2, (path != null ? arr_0_lpath : null));
                                    // .0.'|'.2.2
                                    res = true;
                                    if (! res)
                                    {
                                        if (rep != null) rep.addEntry("unexpected $ANY [.0.'|'.2.2]", ((path != null ? arr_0_lpath : null) != null ? lpath_0 : null));
                                    }
                                }
                            }
                        }
                        if (! res)
                        {
                            if (rep != null) rep.addEntry("not array or unexpected array [.0.'|'.2]", (path != null ? arr_0_lpath : null));
                        }
                    }
                }
                if (res)
                {
                    if (rep != null) rep.clearEntries();
                }
                else
                {
                    if (rep != null) rep.addEntry("no model matched [.0.'|']", (path != null ? arr_0_lpath : null));
                }
                if (! res)
                {
                    break;
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.]", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            jm_tests_map_pmap = new HashMap<String, Checker>();
            jm_tests_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            jm_tests_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return jm_tests_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return jm_tests_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new jm_tests();
        Main.main("jm_tests", checker, VERSION, args);
    }
}
