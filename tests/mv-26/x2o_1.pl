#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_2($$$);
my %_jm_cst_0;
sub json_model_3($$$);
sub json_model_4($$$);
my %_jm_map_0;
sub json_model_1($$$);
my %check_model_map;

# check $a (.'$a')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$a'
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 1)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'t'})
    {
        return 0;
    }
    $pval = $$val{'t'};
    # .'$a'.t
    return jm_is_string($pval) && $pval eq 'a';
}


# check $bc (.'$bc')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$bc'
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 1)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'t'})
    {
        return 0;
    }
    $pval = $$val{'t'};
    # .'$bc'.t
    return jm_is_string($pval) && exists $_jm_cst_0{$pval};
}

# check $Nabc (.'$Nabc')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .'$Nabc'
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 1)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'t'})
    {
        return 0;
    }
    $pval = $$val{'t'};
    # .'$Nabc'.t
    # generic xor list
    my $xc_0 = 0;
    # .'$Nabc'.t.'^'.0
    my $xr_0 = jm_is_string($pval);
    if ($xr_0)
    {
        $xc_0++;
    }
    # .'$Nabc'.t.'^'.1
    $xr_0 = jm_is_string($pval) && $pval eq 'a';
    if ($xr_0)
    {
        $xc_0++;
    }
    if ($xc_0 <= 1)
    {
        # .'$Nabc'.t.'^'.2
        $xr_0 = jm_is_string($pval) && $pval eq 'b';
        if ($xr_0)
        {
            $xc_0++;
        }
    }
    if ($xc_0 <= 1)
    {
        # .'$Nabc'.t.'^'.3
        $xr_0 = jm_is_string($pval) && $pval eq 'c';
        if ($xr_0)
        {
            $xc_0++;
        }
    }
    return $xc_0 == 1;
}


# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # xor-to-or with not constant exclusion behind references
    # .
    my $iso_0 = jm_is_object($val);
    $res = $iso_0;
    if ($res)
    {
        if (exists $$val{'t'})
        {
            my $tag_0 = $$val{'t'};
            my $fun_0 = $_jm_map_0{$tag_0};
            $res = defined($fun_0) && &$fun_0($val, $path, $rep);
        }
        else
        {
            $res = 0;
        }
    }
    else
    {
        ;
    }
    return $res || json_model_4($val, $path, $rep);
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %_jm_cst_0 = (
            'b' => 1,
            'c' => 1,
        );
        %_jm_map_0 = (
            'a' => \&json_model_2,
            'b' => \&json_model_3,
            'c' => \&json_model_3,
        );
        %check_model_map = (
            '' => \&json_model_1,
            'a' => \&json_model_2,
            'bc' => \&json_model_3,
            'Nabc' => \&json_model_4,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %_jm_cst_0 = ();
        %_jm_map_0 = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
