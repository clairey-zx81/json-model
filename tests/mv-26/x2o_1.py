#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_cst_0: set[str]
_jm_map_0: dict[str, str]
check_model_map: PropMap

# check $a (.'$a')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$a'
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$a']", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$a']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <t> [.'$a']", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    # .'$a'.t
    res = isinstance(pval, str) and pval == "a"
    if not res:
        rep is None or rep.append(("unexpected a [.'$a'.t]", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'$a']", lpath if path is not None else None))
        return False
    return True


# check $bc (.'$bc')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$bc'
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$bc']", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$bc']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <t> [.'$bc']", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    # .'$bc'.t
    res = ((pval is None or isinstance(pval, (bool, int, float, str)))) and pval in _jm_cst_0
    if not res:
        rep is None or rep.append(("value not in enum [.'$bc'.t.'|']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'$bc']", lpath if path is not None else None))
        return False
    return True

# check $Nabc (.'$Nabc')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Nabc'
    # check close must only props
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Nabc']", path))
        return False
    if len(val) != 1:
        rep is None or rep.append(("bad property count [.'$Nabc']", path))
        return False
    lpath: Path
    pval: Jsonable
    res: bool
    if not ((pval := val.get("t", UNDEFINED)) != UNDEFINED):
        rep is None or rep.append(("missing mandatory prop <t> [.'$Nabc']", path))
        return False
    lpath = (path + [ "t" ]) if path is not None else None
    # .'$Nabc'.t
    # generic xor list
    xc_0: int = 0
    # .'$Nabc'.t.'^'.0
    xr_0: bool = isinstance(pval, str)
    if xr_0:
        xc_0 += 1
    else:
        rep is None or rep.append(("unexpected string [.'$Nabc'.t.'^'.0]", lpath if path is not None else None))
    # .'$Nabc'.t.'^'.1
    xr_0 = isinstance(pval, str) and pval == "a"
    if xr_0:
        xc_0 += 1
    else:
        rep is None or rep.append(("unexpected _a [.'$Nabc'.t.'^'.1]", lpath if path is not None else None))
    if xc_0 <= 1:
        # .'$Nabc'.t.'^'.2
        xr_0 = isinstance(pval, str) and pval == "b"
        if xr_0:
            xc_0 += 1
        else:
            rep is None or rep.append(("unexpected _b [.'$Nabc'.t.'^'.2]", lpath if path is not None else None))
    if xc_0 <= 1:
        # .'$Nabc'.t.'^'.3
        xr_0 = isinstance(pval, str) and pval == "c"
        if xr_0:
            xc_0 += 1
        else:
            rep is None or rep.append(("unexpected _c [.'$Nabc'.t.'^'.3]", lpath if path is not None else None))
    res = xc_0 == 1
    if res:
        rep is None or rep.clear()
    else:
        rep is None or rep.append(("not one model match [.'$Nabc'.t.'^']", lpath if path is not None else None))
        rep is None or rep.append(("unexpected value for mandatory prop <t> [.'$Nabc']", lpath if path is not None else None))
        return False
    return True


# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # xor-to-or with not constant exclusion behind references
    # .
    iso_0: bool = isinstance(val, dict)
    res = iso_0
    if res:
        if "t" in val:
            tag_0: Jsonable = val.get("t", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
                rep is None or rep.append(("tag <t> value not found [.'|']", path))
        else:
            res = False
            rep is None or rep.append(("tag prop <t> is missing [.'|']", path))
    else:
        rep is None or rep.append(("value is not an object [.'|']", path))
    return res or json_model_4(val, path, rep)


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_cst_0
        _jm_cst_0 = {'b', 'c'}
        global _jm_map_0
        _jm_map_0 = {
            "a": json_model_2,
            "b": json_model_3,
            "c": json_model_3,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "a": json_model_2,
            "bc": json_model_3,
            "Nabc": json_model_4,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
