#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

var json_model_1_map = new Map()
var check_model_map = new Map()

// check $empty (.'$empty')
function json_model_2(val, path, rep)
{
    // .'$empty'
    return Object.prototype.toString.call(val) === '[object Object]' && Object.keys(val).length == 0;
}


// check $ (.)
function json_model_1(val, path, rep)
{
    // .
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    let pfun;
    for (const [prop, pval] of Object.entries(val))
    {
        if ((pfun = json_model_1_map.get(prop)))
        {
            // handle 10 may props
            if (pfun !== undefined && ! pfun(pval, null, null))
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    return true;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        json_model_1_map.set("f0", json_model_2)
        json_model_1_map.set("f1", json_model_2)
        json_model_1_map.set("f2", json_model_2)
        json_model_1_map.set("f3", json_model_2)
        json_model_1_map.set("f4", json_model_2)
        json_model_1_map.set("f5", json_model_2)
        json_model_1_map.set("f6", json_model_2)
        json_model_1_map.set("f7", json_model_2)
        json_model_1_map.set("f8", json_model_2)
        json_model_1_map.set("f9", json_model_2)
        check_model_map.set("", json_model_1)
        check_model_map.set("empty", json_model_2)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
