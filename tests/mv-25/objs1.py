#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

_jm_map_0: dict[str, str]
check_model_map: PropMap

# object .'$objs0'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        if prop == "stuff":
            # handle must stuff property
            must_count += 1
            # .'$objs0'.stuff
            res = isinstance(pval, list)
            if res:
                for arr_0_idx, arr_0_item in enumerate(pval):
                    # .'$objs0'.stuff.0
                    res = json_model_6(arr_0_item, None, rep)
                    if not res:
                        break
            if not res:
                return False
        else:
            return False
    if must_count != 1:
        return False
    return True

# check $objs0 (.'$objs0')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$objs0'
    res = _jm_obj_0(val, path, rep)
    return res

# object .
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        if prop == "foo":
            # handle must foo property
            must_count += 1
            # .foo
            res = json_model_3(pval, None, rep)
            if not res:
                return False
        else:
            return False
    if must_count != 1:
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = _jm_obj_1(val, path, rep)
    return res


# check $objs0#furniture (.'$objs0#furniture')
def json_model_6(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$objs0#furniture'
    iso_0: bool = isinstance(val, dict)
    res = iso_0
    if res:
        if "t" in val:
            tag_0: Jsonable = val.get("t", UNDEFINED)
            fun_0: CheckFun = _jm_map_0.get(tag_0, UNDEFINED)
            if fun_0 != UNDEFINED:
                res = fun_0(val, path, rep)
            else:
                res = False
        else:
            res = False
    return res

# object .'$objs0#table'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'$objs0#table'.t
            res = isinstance(pval, str) and pval == "table"
            if not res:
                return False
        elif prop == "legs":
            # handle must legs property
            must_count += 1
            # .'$objs0#table'.legs
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
            if not res:
                return False
        else:
            return False
    if must_count != 2:
        return False
    return True

# check $objs0#table (.'$objs0#table')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$objs0#table'
    res = _jm_obj_2(val, path, rep)
    return res

# object .'$objs0#chair'
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        if prop == "t":
            # handle must t property
            must_count += 1
            # .'$objs0#chair'.t
            res = isinstance(pval, str) and pval == "chair"
            if not res:
                return False
        elif prop == "color":
            # handle must color property
            must_count += 1
            # .'$objs0#chair'.color
            res = isinstance(pval, str)
            if not res:
                return False
        else:
            return False
    if must_count != 2:
        return False
    return True

# check $objs0#chair (.'$objs0#chair')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$objs0#chair'
    res = _jm_obj_3(val, path, rep)
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global _jm_map_0
        _jm_map_0 = {
            "table": json_model_4,
            "chair": json_model_5,
        }
        global check_model_map
        check_model_map = {
            "": _jm_obj_1,
            "objs0": _jm_obj_0,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
