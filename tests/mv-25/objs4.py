#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

json_model_1_map: PropMap
check_model_map: PropMap

# check json_model_1_map_f0 (.f0)
def _jm_f_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # .f0
    if not isinstance(val, dict):
        return False
    if len(val) == 0:
        return True
    else:
        return False

# check json_model_1_map_f1 (.f1)
def _jm_f_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .f1
    if not isinstance(val, dict):
        return False
    if len(val) == 0:
        return True
    else:
        return False

# check json_model_1_map_f2 (.f2)
def _jm_f_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # .f2
    if not isinstance(val, dict):
        return False
    if len(val) == 0:
        return True
    else:
        return False

# check json_model_1_map_f3 (.f3)
def _jm_f_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # .f3
    if not isinstance(val, dict):
        return False
    if len(val) == 0:
        return True
    else:
        return False

# check json_model_1_map_f4 (.f4)
def _jm_f_4(val: Jsonable, path: Path, rep: Report) -> bool:
    # .f4
    if not isinstance(val, dict):
        return False
    if len(val) == 0:
        return True
    else:
        return False

# check json_model_1_map_f5 (.f5)
def _jm_f_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .f5
    if not isinstance(val, dict):
        return False
    if len(val) == 0:
        return True
    else:
        return False

# check json_model_1_map_f6 (.f6)
def _jm_f_6(val: Jsonable, path: Path, rep: Report) -> bool:
    # .f6
    if not isinstance(val, dict):
        return False
    if len(val) == 0:
        return True
    else:
        return False

# check json_model_1_map_f7 (.f7)
def _jm_f_7(val: Jsonable, path: Path, rep: Report) -> bool:
    # .f7
    if not isinstance(val, dict):
        return False
    if len(val) == 0:
        return True
    else:
        return False

# check json_model_1_map_f8 (.f8)
def _jm_f_8(val: Jsonable, path: Path, rep: Report) -> bool:
    # .f8
    if not isinstance(val, dict):
        return False
    if len(val) == 0:
        return True
    else:
        return False

# check json_model_1_map_f9 (.f9)
def _jm_f_9(val: Jsonable, path: Path, rep: Report) -> bool:
    # .f9
    if not isinstance(val, dict):
        return False
    if len(val) == 0:
        return True
    else:
        return False


# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .
    if not isinstance(val, dict):
        return False
    pfun: CheckFun
    for prop, pval in val.items():
        assert isinstance(prop, str)
        if pfun := json_model_1_map.get(prop):
            # handle 10 may props
            if pfun != UNDEFINED and not pfun(pval, None, rep):
                return False
        else:
            return False
    return True


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global json_model_1_map
        json_model_1_map = {
            "f0": _jm_f_0,
            "f1": _jm_f_1,
            "f2": _jm_f_2,
            "f3": _jm_f_3,
            "f4": _jm_f_4,
            "f5": _jm_f_5,
            "f6": _jm_f_6,
            "f7": _jm_f_7,
            "f8": _jm_f_8,
            "f9": _jm_f_9,
        }
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
