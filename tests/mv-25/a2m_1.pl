#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub _jm_obj_0($$$);
sub json_model_2($$$);
sub _jm_obj_1($$$);
sub json_model_3($$$);
sub _jm_obj_2($$$);
sub json_model_4($$$);
sub _jm_obj_3($$$);
sub json_model_5($$$);
sub json_model_1($$$);
my %check_model_map;

# object .'$Oa'
sub _jm_obj_0($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'a'})
    {
        $pval = $$val{'a'};
        # .'$Oa'.a
        $res = jm_is_integer($pval) && $pval >= 0;
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $Oa (.'$Oa')
sub json_model_2($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Oa'
    $res = _jm_obj_0($val, $path, $rep);
    return $res;
}

# object .'$Ob'
sub _jm_obj_1($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'b'})
    {
        $pval = $$val{'b'};
        # .'$Ob'.b
        $res = jm_is_integer($pval) && $pval >= 0;
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $Ob (.'$Ob')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$Ob'
    $res = _jm_obj_1($val, $path, $rep);
    return $res;
}

# object .'$merge'
sub _jm_obj_2($$$)
{
    my ($val, $path, $rep) = @_;
    # check open must/may only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pval;
    my $res;
    if (exists $$val{'a'})
    {
        $pval = $$val{'a'};
        # .'$merge'.a
        $res = jm_is_integer($pval) && $pval >= 0;
        if (! $res)
        {
            return 0;
        }
    }
    if (exists $$val{'b'})
    {
        $pval = $$val{'b'};
        # .'$merge'.b
        $res = jm_is_integer($pval) && $pval >= 0;
        if (! $res)
        {
            return 0;
        }
    }
    return 1;
}

# check $merge (.'$merge')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$merge'
    $res = _jm_obj_2($val, $path, $rep);
    return $res;
}

# object .'$nomerge'.'&'.1
sub _jm_obj_3($$$)
{
    my ($val, $path, $rep) = @_;
    # check close must only props
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) != 1)
    {
        return 0;
    }
    my $pval;
    my $res;
    if (! exists $$val{'c'})
    {
        return 0;
    }
    $pval = $$val{'c'};
    # .'$nomerge'.'&'.1.c
    $res = jm_is_integer($pval) && $pval >= 1;
    if (! $res)
    {
        return 0;
    }
    return 1;
}

# check $nomerge (.'$nomerge')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$nomerge'
    $res = 1;
    if ($res)
    {
        # .'$nomerge'.'&'.0
        $res = _jm_obj_0($val, $path, $rep);
        if ($res)
        {
            # .'$nomerge'.'&'.1
            $res = _jm_obj_3($val, $path, $rep);
        }
    }
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .
    # .'|'.0
    $res = _jm_obj_2($val, $path, $rep);
    if (! $res)
    {
        # .'|'.1
        $res = json_model_5($val, $path, $rep);
    }
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&json_model_1,
            'Oa' => \&_jm_obj_0,
            'Ob' => \&_jm_obj_1,
            'merge' => \&_jm_obj_2,
            'nomerge' => \&json_model_5,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
