//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class a2m_1 extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> a2m_1_map_pmap;

    // check $Oa (.'$Oa')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        // .'$Oa'
        // check open must/may only props
        if (! json.isObject(val))
        {
            return false;
        }
        Object pval;
        boolean res;
        if ((pval = json.objectValue(val, "a")) != null)
        {
            // .'$Oa'.a
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                return false;
            }
        }
        return true;
    }

    // check $Ob (.'$Ob')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        // .'$Ob'
        // check open must/may only props
        if (! json.isObject(val))
        {
            return false;
        }
        Object pval;
        boolean res;
        if ((pval = json.objectValue(val, "b")) != null)
        {
            // .'$Ob'.b
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                return false;
            }
        }
        return true;
    }

    // check $merge (.'$merge')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        // .'$merge'
        // check open must/may only props
        if (! json.isObject(val))
        {
            return false;
        }
        Object pval;
        boolean res;
        if ((pval = json.objectValue(val, "a")) != null)
        {
            // .'$merge'.a
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                return false;
            }
        }
        if ((pval = json.objectValue(val, "b")) != null)
        {
            // .'$merge'.b
            res = json.isInteger(pval) && json.asLong(pval) >= 0;
            if (! res)
            {
                return false;
            }
        }
        return true;
    }

    // object .'$nomerge'.'&'.1
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        // check close must only props
        if (! json.isObject(val))
        {
            return false;
        }
        if (json.objectSize(val) != 1)
        {
            return false;
        }
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "c")) != null))
        {
            return false;
        }
        // .'$nomerge'.'&'.1.c
        return json.isInteger(pval) && json.asLong(pval) >= 1;
    }

    // check $nomerge (.'$nomerge')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        // .'$nomerge'
        // .'$nomerge'.'&'.0
        // .'$nomerge'.'&'.1
        return json_model_2(val, null, null) && _jm_obj_0(val, null, null);
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // .
        // .'|'.0
        // .'|'.1
        return json_model_4(val, null, null) || json_model_5(val, null, null);
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            a2m_1_map_pmap = new HashMap<String, Checker>();
            a2m_1_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            a2m_1_map_pmap.put("Oa", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            a2m_1_map_pmap.put("Ob", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            a2m_1_map_pmap.put("merge", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            a2m_1_map_pmap.put("nomerge", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_5(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            a2m_1_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return a2m_1_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return a2m_1_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new a2m_1();
        Main.main("a2m_1", checker, VERSION, args);
    }
}
