//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class objs4 extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> objs4_map_pmap;

    // object .f0
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // object .f1
    public boolean _jm_obj_1(Object val, Path path, Report rep)
    {
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // object .f2
    public boolean _jm_obj_2(Object val, Path path, Report rep)
    {
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // object .f3
    public boolean _jm_obj_3(Object val, Path path, Report rep)
    {
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // object .f4
    public boolean _jm_obj_4(Object val, Path path, Report rep)
    {
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // object .f5
    public boolean _jm_obj_5(Object val, Path path, Report rep)
    {
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // object .f6
    public boolean _jm_obj_6(Object val, Path path, Report rep)
    {
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // object .f7
    public boolean _jm_obj_7(Object val, Path path, Report rep)
    {
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // object .f8
    public boolean _jm_obj_8(Object val, Path path, Report rep)
    {
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // object .f9
    public boolean _jm_obj_9(Object val, Path path, Report rep)
    {
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // .
        if (! json.isObject(val))
        {
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            if (prop.compareTo("f0") == 0)
            {
                // handle may f0 property
                // .f0
                res = _jm_obj_0(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("f1") == 0)
            {
                // handle may f1 property
                // .f1
                res = _jm_obj_1(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("f2") == 0)
            {
                // handle may f2 property
                // .f2
                res = _jm_obj_2(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("f3") == 0)
            {
                // handle may f3 property
                // .f3
                res = _jm_obj_3(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("f4") == 0)
            {
                // handle may f4 property
                // .f4
                res = _jm_obj_4(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("f5") == 0)
            {
                // handle may f5 property
                // .f5
                res = _jm_obj_5(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("f6") == 0)
            {
                // handle may f6 property
                // .f6
                res = _jm_obj_6(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("f7") == 0)
            {
                // handle may f7 property
                // .f7
                res = _jm_obj_7(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("f8") == 0)
            {
                // handle may f8 property
                // .f8
                res = _jm_obj_8(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else if (prop.compareTo("f9") == 0)
            {
                // handle may f9 property
                // .f9
                res = _jm_obj_9(pval, null, null);
                if (! res)
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        return true;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            objs4_map_pmap = new HashMap<String, Checker>();
            objs4_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            objs4_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return objs4_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return objs4_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new objs4();
        Main.main("objs4", checker, VERSION, args);
    }
}
