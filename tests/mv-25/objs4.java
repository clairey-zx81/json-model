//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class objs4 extends ModelChecker
{
    static public final String VERSION = "2";

    Map<String, Checker> json_model_1_map_pmap;
    public Map<String, Checker> objs4_map_pmap;

    // check json_model_1_map_f0 (.f0)
    public boolean _jm_f_0(Object val, Path path, Report rep)
    {
        // .f0
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // check json_model_1_map_f1 (.f1)
    public boolean _jm_f_1(Object val, Path path, Report rep)
    {
        // .f1
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // check json_model_1_map_f2 (.f2)
    public boolean _jm_f_2(Object val, Path path, Report rep)
    {
        // .f2
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // check json_model_1_map_f3 (.f3)
    public boolean _jm_f_3(Object val, Path path, Report rep)
    {
        // .f3
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // check json_model_1_map_f4 (.f4)
    public boolean _jm_f_4(Object val, Path path, Report rep)
    {
        // .f4
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // check json_model_1_map_f5 (.f5)
    public boolean _jm_f_5(Object val, Path path, Report rep)
    {
        // .f5
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // check json_model_1_map_f6 (.f6)
    public boolean _jm_f_6(Object val, Path path, Report rep)
    {
        // .f6
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // check json_model_1_map_f7 (.f7)
    public boolean _jm_f_7(Object val, Path path, Report rep)
    {
        // .f7
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // check json_model_1_map_f8 (.f8)
    public boolean _jm_f_8(Object val, Path path, Report rep)
    {
        // .f8
        return json.isObject(val) && json.objectSize(val) == 0;
    }

    // check json_model_1_map_f9 (.f9)
    public boolean _jm_f_9(Object val, Path path, Report rep)
    {
        // .f9
        return json.isObject(val) && json.objectSize(val) == 0;
    }


    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // .
        if (! json.isObject(val))
        {
            return false;
        }
        Checker pfun;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            if ((pfun = json_model_1_map_pmap.get(prop)) != null)
            {
                // handle 10 may props
                if (pfun != null && ! pfun.call(pval, null, rep))
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }
        return true;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            json_model_1_map_pmap = new HashMap<String, Checker>();
            json_model_1_map_pmap.put("f0", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_0(o, p, r);} });
            json_model_1_map_pmap.put("f1", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_1(o, p, r);} });
            json_model_1_map_pmap.put("f2", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_2(o, p, r);} });
            json_model_1_map_pmap.put("f3", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_3(o, p, r);} });
            json_model_1_map_pmap.put("f4", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_4(o, p, r);} });
            json_model_1_map_pmap.put("f5", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_5(o, p, r);} });
            json_model_1_map_pmap.put("f6", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_6(o, p, r);} });
            json_model_1_map_pmap.put("f7", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_7(o, p, r);} });
            json_model_1_map_pmap.put("f8", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_8(o, p, r);} });
            json_model_1_map_pmap.put("f9", new Checker() { public boolean call(Object o, Path p, Report r) { return _jm_f_9(o, p, r);} });
            objs4_map_pmap = new HashMap<String, Checker>();
            objs4_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            json_model_1_map_pmap = null;
            objs4_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return objs4_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return objs4_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new objs4();
        Main.main("objs4", checker, VERSION, args);
    }
}
