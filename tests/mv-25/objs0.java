//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class objs0 extends ModelChecker
{
    static public final String VERSION = "2";

    Map<Object, Checker> _jm_map_0_cmap;
    public Map<String, Checker> objs0_map_pmap;

    // check $table (.'$table')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        // .'$table'
        // check close must only props
        if (! json.isObject(val))
        {
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            return false;
        }
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            return false;
        }
        // .'$table'.t
        res = json.isString(pval) && json.asString(pval).compareTo("table") == 0;
        if (! res)
        {
            return false;
        }
        if (! ((pval = json.objectValue(val, "legs")) != null))
        {
            return false;
        }
        // .'$table'.legs
        res = json.isInteger(pval) && json.asLong(pval) >= 1;
        return res;
    }

    // check $chair (.'$chair')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        // .'$chair'
        // check close must only props
        if (! json.isObject(val))
        {
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            return false;
        }
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "t")) != null))
        {
            return false;
        }
        // .'$chair'.t
        res = json.isString(pval) && json.asString(pval).compareTo("chair") == 0;
        if (! res)
        {
            return false;
        }
        if (! ((pval = json.objectValue(val, "color")) != null))
        {
            return false;
        }
        // .'$chair'.color
        res = json.isString(pval);
        return res;
    }


    // check $furniture (.'$furniture')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$furniture'
        boolean iso_0 = json.isObject(val);
        res = iso_0;
        if (res)
        {
            if (json.objectHasProp(val, "t"))
            {
                Object tag_0 = json.objectValue(val, "t");
                Checker fun_0 = _jm_map_0_cmap.get(tag_0);
                if (fun_0 != null)
                {
                    res = fun_0.call(val, path, rep);
                }
                else
                {
                    res = false;
                }
            }
            else
            {
                res = false;
            }
        }
        return res;
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        // .
        // check close must only props
        if (! json.isObject(val))
        {
            return false;
        }
        if (json.objectSize(val) != 1)
        {
            return false;
        }
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "stuff")) != null))
        {
            return false;
        }
        // .stuff
        res = json.isArray(pval);
        if (res)
        {
            int arr_0_idx = -1;
            Iterator<Object> arr_0_item_loop = json.arrayIterator(pval);
            while (arr_0_item_loop.hasNext())
            {
                arr_0_idx++;
                Object arr_0_item = arr_0_item_loop.next();
                // .stuff.0
                res = json_model_4(arr_0_item, null, rep);
                if (! res)
                {
                    break;
                }
            }
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_map_0_cmap = new HashMap<Object, Checker>();
            _jm_map_0_cmap.put(json.safeJSON("\"table\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            _jm_map_0_cmap.put(json.safeJSON("\"chair\""), new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            objs0_map_pmap = new HashMap<String, Checker>();
            objs0_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            objs0_map_pmap.put("table", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
            objs0_map_pmap.put("chair", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
            objs0_map_pmap.put("furniture", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_map_0_cmap = null;
            objs0_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return objs0_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return objs0_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new objs0();
        Main.main("objs0", checker, VERSION, args);
    }
}
