#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity against JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $empty (.'$empty')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$empty'
    return isinstance(val, dict) and len(val) == 0

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .
    if not isinstance(val, dict):
        return False
    res: bool
    for prop, pval in val.items():
        if prop == "f0":
            # handle may f0 property
            # .f0
            res = json_model_2(pval, None, None)
            if not res:
                return False
        elif prop == "f1":
            # handle may f1 property
            # .f1
            res = json_model_2(pval, None, None)
            if not res:
                return False
        elif prop == "f2":
            # handle may f2 property
            # .f2
            res = json_model_2(pval, None, None)
            if not res:
                return False
        elif prop == "f3":
            # handle may f3 property
            # .f3
            res = json_model_2(pval, None, None)
            if not res:
                return False
        elif prop == "f4":
            # handle may f4 property
            # .f4
            res = json_model_2(pval, None, None)
            if not res:
                return False
        elif prop == "f5":
            # handle may f5 property
            # .f5
            res = json_model_2(pval, None, None)
            if not res:
                return False
        elif prop == "f6":
            # handle may f6 property
            # .f6
            res = json_model_2(pval, None, None)
            if not res:
                return False
        elif prop == "f7":
            # handle may f7 property
            # .f7
            res = json_model_2(pval, None, None)
            if not res:
                return False
        elif prop == "f8":
            # handle may f8 property
            # .f8
            res = json_model_2(pval, None, None)
            if not res:
                return False
        elif prop == "f9":
            # handle may f9 property
            # .f9
            res = json_model_2(pval, None, None)
            if not res:
                return False
        else:
            return False
    return True


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "empty": json_model_2,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
