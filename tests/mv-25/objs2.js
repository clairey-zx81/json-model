#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

var check_model_map = new Map()

// object .'$bla'
function _jm_obj_0(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        if (prop == "x")
        {
            // handle must x property
            must_count += 1;
            // .'$bla'.x
            res = (typeof pval === 'number' || pval instanceof Number);
            if (! res)
            {
                return false;
            }
        }
        else if (prop == "y")
        {
            // handle must y property
            must_count += 1;
            // .'$bla'.y
            res = (typeof pval === 'number' || pval instanceof Number);
            if (! res)
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    if (must_count != 2)
    {
        return false;
    }
    return true;
}

// check $bla (.'$bla')
function json_model_2(val, path, rep)
{
    let res;
    // .'$bla'
    res = _jm_obj_0(val, path, rep);
    return res;
}

// check $foo (.'$foo')
function json_model_3(val, path, rep)
{
    let res;
    // .'$foo'
    res = _jm_obj_0(val, path, rep);
    return res;
}

// check $ob (.'$ob')
function json_model_4(val, path, rep)
{
    let res;
    // .'$ob'
    res = _jm_obj_0(val, path, rep);
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = _jm_obj_0(val, path, rep);
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", _jm_obj_0)
        check_model_map.set("bla", _jm_obj_0)
        check_model_map.set("foo", _jm_obj_0)
        check_model_map.set("ob", _jm_obj_0)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
