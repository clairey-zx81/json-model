--
-- Generated by JSON Model Compiler version 2
-- see https://github.com/clairey-zx81/json-model
--
-- JSON_MODEL_VERSION is 2
CREATE EXTENSION IF NOT EXISTS json_model;

-- check json_model_1_map_f0 (.f0)
CREATE OR REPLACE FUNCTION _jm_f_0(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- .f0
  RETURN JSONB_TYPEOF(val) = 'object' AND jm_object_size(val) = 0;
END;
$$ LANGUAGE PLpgSQL;

-- check json_model_1_map_f1 (.f1)
CREATE OR REPLACE FUNCTION _jm_f_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- .f1
  RETURN JSONB_TYPEOF(val) = 'object' AND jm_object_size(val) = 0;
END;
$$ LANGUAGE PLpgSQL;

-- check json_model_1_map_f2 (.f2)
CREATE OR REPLACE FUNCTION _jm_f_2(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- .f2
  RETURN JSONB_TYPEOF(val) = 'object' AND jm_object_size(val) = 0;
END;
$$ LANGUAGE PLpgSQL;

-- check json_model_1_map_f3 (.f3)
CREATE OR REPLACE FUNCTION _jm_f_3(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- .f3
  RETURN JSONB_TYPEOF(val) = 'object' AND jm_object_size(val) = 0;
END;
$$ LANGUAGE PLpgSQL;

-- check json_model_1_map_f4 (.f4)
CREATE OR REPLACE FUNCTION _jm_f_4(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- .f4
  RETURN JSONB_TYPEOF(val) = 'object' AND jm_object_size(val) = 0;
END;
$$ LANGUAGE PLpgSQL;

-- check json_model_1_map_f5 (.f5)
CREATE OR REPLACE FUNCTION _jm_f_5(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- .f5
  RETURN JSONB_TYPEOF(val) = 'object' AND jm_object_size(val) = 0;
END;
$$ LANGUAGE PLpgSQL;

-- check json_model_1_map_f6 (.f6)
CREATE OR REPLACE FUNCTION _jm_f_6(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- .f6
  RETURN JSONB_TYPEOF(val) = 'object' AND jm_object_size(val) = 0;
END;
$$ LANGUAGE PLpgSQL;

-- check json_model_1_map_f7 (.f7)
CREATE OR REPLACE FUNCTION _jm_f_7(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- .f7
  RETURN JSONB_TYPEOF(val) = 'object' AND jm_object_size(val) = 0;
END;
$$ LANGUAGE PLpgSQL;

-- check json_model_1_map_f8 (.f8)
CREATE OR REPLACE FUNCTION _jm_f_8(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- .f8
  RETURN JSONB_TYPEOF(val) = 'object' AND jm_object_size(val) = 0;
END;
$$ LANGUAGE PLpgSQL;

-- check json_model_1_map_f9 (.f9)
CREATE OR REPLACE FUNCTION _jm_f_9(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
BEGIN
  -- .f9
  RETURN JSONB_TYPEOF(val) = 'object' AND jm_object_size(val) = 0;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION json_model_1_map(name TEXT)
RETURNS TEXT STRICT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  map JSONB := JSONB '{"f0":"_jm_f_0","f1":"_jm_f_1","f2":"_jm_f_2","f3":"_jm_f_3","f4":"_jm_f_4","f5":"_jm_f_5","f6":"_jm_f_6","f7":"_jm_f_7","f8":"_jm_f_8","f9":"_jm_f_9"}';
BEGIN
  RETURN map->>name;
END;
$$ LANGUAGE plpgsql;

-- check $ (.)
CREATE OR REPLACE FUNCTION json_model_1(val JSONB, path TEXT[], rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  pfun TEXT;
  prop TEXT;
  pval JSONB;
BEGIN
  -- .
  IF NOT (JSONB_TYPEOF(val) = 'object') THEN
    RETURN FALSE;
  END IF;
  FOR prop, pval IN SELECT * FROM JSONB_EACH(val) LOOP
    IF json_model_1_map(prop) IS NOT NULL THEN
      -- handle 10 may props
      pfun := json_model_1_map(prop);
      IF NOT jm_call(pfun, pval, NULL, rep) THEN
        RETURN FALSE;
      END IF;
    ELSE
      RETURN FALSE;
    END IF;
  END LOOP;
  RETURN TRUE;
END;
$$ LANGUAGE PLpgSQL;

CREATE OR REPLACE FUNCTION check_model_map(name TEXT)
RETURNS TEXT STRICT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  map JSONB := JSONB '{"":"json_model_1"}';
BEGIN
  RETURN map->>name;
END;
$$ LANGUAGE plpgsql;

--
-- constant maps initialization
--
TRUNCATE jm_constant_maps;

--
-- JSON Model checking entry point
--
-- TODO INOUT rep?
CREATE OR REPLACE FUNCTION check_model(val JSONB, name TEXT, rep jm_report_entry[])
RETURNS BOOLEAN CALLED ON NULL INPUT IMMUTABLE PARALLEL SAFE AS $$
DECLARE
  fun TEXT;
BEGIN
  fun := check_model_map(name);
  IF fun IS NULL THEN
    RAISE EXCEPTION 'model for % not found', name;
  END IF;
  RETURN jm_call(fun, val, NULL, rep);
END;
$$ LANGUAGE plpgsql;
