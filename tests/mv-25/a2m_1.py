#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# object .'$Oa'
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        return False
    pval: Jsonable
    res: bool
    if "a" in val:
        pval = val.get("a", UNDEFINED)
        # .'$Oa'.a
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            return False
    return True

# check $Oa (.'$Oa')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Oa'
    res = _jm_obj_0(val, path, rep)
    return res

# object .'$Ob'
def _jm_obj_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        return False
    pval: Jsonable
    res: bool
    if "b" in val:
        pval = val.get("b", UNDEFINED)
        # .'$Ob'.b
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            return False
    return True

# check $Ob (.'$Ob')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Ob'
    res = _jm_obj_1(val, path, rep)
    return res

# object .'$merge'
def _jm_obj_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # check open must/may only props
    if not isinstance(val, dict):
        return False
    pval: Jsonable
    res: bool
    if "a" in val:
        pval = val.get("a", UNDEFINED)
        # .'$merge'.a
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            return False
    if "b" in val:
        pval = val.get("b", UNDEFINED)
        # .'$merge'.b
        res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
        if not res:
            return False
    return True

# check $merge (.'$merge')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$merge'
    res = _jm_obj_2(val, path, rep)
    return res

# object .'$nomerge'.'&'.1
def _jm_obj_3(val: Jsonable, path: Path, rep: Report) -> bool:
    # check close must only props
    if not isinstance(val, dict):
        return False
    if len(val) != 1:
        return False
    pval: Jsonable
    res: bool
    if not "c" in val:
        return False
    pval = val.get("c", UNDEFINED)
    # .'$nomerge'.'&'.1.c
    res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 1
    if not res:
        return False
    return True

# check $nomerge (.'$nomerge')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$nomerge'
    res = True
    if res:
        # .'$nomerge'.'&'.0
        res = _jm_obj_0(val, path, rep)
        if res:
            # .'$nomerge'.'&'.1
            res = _jm_obj_3(val, path, rep)
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    # .'|'.0
    res = _jm_obj_2(val, path, rep)
    if not res:
        # .'|'.1
        res = json_model_5(val, path, rep)
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "Oa": _jm_obj_0,
            "Ob": _jm_obj_1,
            "merge": _jm_obj_2,
            "nomerge": json_model_5,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
