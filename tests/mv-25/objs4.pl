#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
no warnings "uninitialized";
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub _jm_f_0($$$);
sub _jm_f_1($$$);
sub _jm_f_2($$$);
sub _jm_f_3($$$);
sub _jm_f_4($$$);
sub _jm_f_5($$$);
sub _jm_f_6($$$);
sub _jm_f_7($$$);
sub _jm_f_8($$$);
sub _jm_f_9($$$);
my %json_model_1_map;
sub json_model_1($$$);
my %check_model_map;

# check json_model_1_map_f0 (.f0)
sub _jm_f_0($$$)
{
    my ($val, $path, $rep) = @_;
    # .f0
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

# check json_model_1_map_f1 (.f1)
sub _jm_f_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .f1
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

# check json_model_1_map_f2 (.f2)
sub _jm_f_2($$$)
{
    my ($val, $path, $rep) = @_;
    # .f2
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

# check json_model_1_map_f3 (.f3)
sub _jm_f_3($$$)
{
    my ($val, $path, $rep) = @_;
    # .f3
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

# check json_model_1_map_f4 (.f4)
sub _jm_f_4($$$)
{
    my ($val, $path, $rep) = @_;
    # .f4
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

# check json_model_1_map_f5 (.f5)
sub _jm_f_5($$$)
{
    my ($val, $path, $rep) = @_;
    # .f5
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

# check json_model_1_map_f6 (.f6)
sub _jm_f_6($$$)
{
    my ($val, $path, $rep) = @_;
    # .f6
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

# check json_model_1_map_f7 (.f7)
sub _jm_f_7($$$)
{
    my ($val, $path, $rep) = @_;
    # .f7
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

# check json_model_1_map_f8 (.f8)
sub _jm_f_8($$$)
{
    my ($val, $path, $rep) = @_;
    # .f8
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

# check json_model_1_map_f9 (.f9)
sub _jm_f_9($$$)
{
    my ($val, $path, $rep) = @_;
    # .f9
    if (! jm_is_object($val))
    {
        return 0;
    }
    if (jm_obj_size($val) == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}


# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    # .
    if (! jm_is_object($val))
    {
        return 0;
    }
    my $pfun;
    scalar keys %$val;
    while (my ($prop, $pval) = each %$val)
    {
        if (($pfun = $json_model_1_map{$prop}))
        {
            # handle 10 may props
            if (defined($pfun) && ! &$pfun($pval, undef, $rep))
            {
                return 0;
            }
        }
        else
        {
            return 0;
        }
    }
    return 1;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %json_model_1_map = (
            'f0' => \&_jm_f_0,
            'f1' => \&_jm_f_1,
            'f2' => \&_jm_f_2,
            'f3' => \&_jm_f_3,
            'f4' => \&_jm_f_4,
            'f5' => \&_jm_f_5,
            'f6' => \&_jm_f_6,
            'f7' => \&_jm_f_7,
            'f8' => \&_jm_f_8,
            'f9' => \&_jm_f_9,
        );
        %check_model_map = (
            '' => \&json_model_1,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %json_model_1_map = ();
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
