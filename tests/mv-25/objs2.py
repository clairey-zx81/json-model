#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $bla (.'$bla')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$bla'
    # check close must only props
    if not isinstance(val, dict):
        return False
    if len(val) != 2:
        return False
    pval: Jsonable
    res: bool
    if not ((pval := val.get("x", UNDEFINED)) != UNDEFINED):
        return False
    # .'$bla'.x
    res = isinstance(pval, float)
    if not res:
        return False
    if not ((pval := val.get("y", UNDEFINED)) != UNDEFINED):
        return False
    # .'$bla'.y
    res = isinstance(pval, float)
    if not res:
        return False
    return True

# check $foo (.'$foo')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$foo'
    res = json_model_2(val, path, rep)
    return res

# check $ob (.'$ob')
def json_model_4(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$ob'
    res = json_model_2(val, path, rep)
    return res

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = json_model_2(val, path, rep)
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_2,
            "bla": json_model_2,
            "foo": json_model_2,
            "ob": json_model_2,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
