#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

let _jm_map_0 = new Map()
var check_model_map = new Map()

// object .'$objs0'
function _jm_obj_0(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        if (prop == "stuff")
        {
            // handle must stuff property
            must_count += 1;
            // .'$objs0'.stuff
            res = Array.isArray(pval);
            if (res)
            {
                for (let arr_0_idx = 0; arr_0_idx < pval.length; arr_0_idx++)
                {
                    let arr_0_item = pval[arr_0_idx]
                    // .'$objs0'.stuff.0
                    res = json_model_6(arr_0_item, null, rep);
                    if (! res)
                    {
                        break;
                    }
                }
            }
            if (! res)
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    if (must_count != 1)
    {
        return false;
    }
    return true;
}

// check $objs0 (.'$objs0')
function json_model_3(val, path, rep)
{
    let res;
    // .'$objs0'
    res = _jm_obj_0(val, path, rep);
    return res;
}

// object .
function _jm_obj_1(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        if (prop == "foo")
        {
            // handle must foo property
            must_count += 1;
            // .foo
            res = json_model_3(pval, null, rep);
            if (! res)
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    if (must_count != 1)
    {
        return false;
    }
    return true;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = _jm_obj_1(val, path, rep);
    return res;
}


// check $objs0#furniture (.'$objs0#furniture')
function json_model_6(val, path, rep)
{
    let res;
    // .'$objs0#furniture'
    let iso_0 = Object.prototype.toString.call(val) === '[object Object]';
    res = iso_0;
    if (res)
    {
        if (val.hasOwnProperty("t"))
        {
            let tag_0 = val["t"];
            let fun_0 = _jm_map_0.get(tag_0);
            if (fun_0 !== undefined)
            {
                res = fun_0(val, path, rep);
            }
            else
            {
                res = false;
            }
        }
        else
        {
            res = false;
        }
    }
    return res;
}

// object .'$objs0#table'
function _jm_obj_2(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        if (prop == "t")
        {
            // handle must t property
            must_count += 1;
            // .'$objs0#table'.t
            res = ((typeof pval === 'string' || pval instanceof String)) && pval == "table";
            if (! res)
            {
                return false;
            }
        }
        else if (prop == "legs")
        {
            // handle must legs property
            must_count += 1;
            // .'$objs0#table'.legs
            res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 1;
            if (! res)
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    if (must_count != 2)
    {
        return false;
    }
    return true;
}

// check $objs0#table (.'$objs0#table')
function json_model_4(val, path, rep)
{
    let res;
    // .'$objs0#table'
    res = _jm_obj_2(val, path, rep);
    return res;
}

// object .'$objs0#chair'
function _jm_obj_3(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    let res;
    let must_count = 0;
    for (const [prop, pval] of Object.entries(val))
    {
        if (prop == "t")
        {
            // handle must t property
            must_count += 1;
            // .'$objs0#chair'.t
            res = ((typeof pval === 'string' || pval instanceof String)) && pval == "chair";
            if (! res)
            {
                return false;
            }
        }
        else if (prop == "color")
        {
            // handle must color property
            must_count += 1;
            // .'$objs0#chair'.color
            res = (typeof pval === 'string' || pval instanceof String);
            if (! res)
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    if (must_count != 2)
    {
        return false;
    }
    return true;
}

// check $objs0#chair (.'$objs0#chair')
function json_model_5(val, path, rep)
{
    let res;
    // .'$objs0#chair'
    res = _jm_obj_3(val, path, rep);
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        _jm_map_0.set("table", json_model_4)
        _jm_map_0.set("chair", json_model_5)
        check_model_map.set("", _jm_obj_1)
        check_model_map.set("objs0", _jm_obj_0)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
