//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class objs3 extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> objs3_map_pmap;

    // check $book (.'$book')
    public boolean json_model_2(Object val, Path path, Report rep)
    {
        // .'$book'
        // check close must only props
        if (! json.isObject(val))
        {
            return false;
        }
        if (json.objectSize(val) != 2)
        {
            return false;
        }
        Object pval;
        boolean res;
        if (! ((pval = json.objectValue(val, "title")) != null))
        {
            return false;
        }
        // .'$book'.title
        res = json.isString(pval);
        if (! res)
        {
            return false;
        }
        if (! ((pval = json.objectValue(val, "author")) != null))
        {
            return false;
        }
        // .'$book'.author
        return json.isString(pval);
    }

    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // .
        res = json.isArray(val);
        if (res)
        {
            int arr_0_idx = -1;
            Iterator<Object> arr_0_item_loop = json.arrayIterator(val);
            while (arr_0_item_loop.hasNext())
            {
                arr_0_idx++;
                Object arr_0_item = arr_0_item_loop.next();
                // .0
                res = json_model_2(arr_0_item, null, rep);
                if (! res)
                {
                    break;
                }
            }
        }
        return res;
    }


    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            objs3_map_pmap = new HashMap<String, Checker>();
            objs3_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            objs3_map_pmap.put("book", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_2(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            objs3_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return objs3_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return objs3_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new objs3();
        Main.main("objs3", checker, VERSION, args);
    }
}
