#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

var check_model_map = new Map()

// object .'$Oa'
function _jm_obj_0(val, path, rep)
{
    // check open must/may only props
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    let pval;
    let res;
    if (val.hasOwnProperty("a"))
    {
        pval = val["a"];
        // .'$Oa'.a
        res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
        if (! res)
        {
            return false;
        }
    }
    return true;
}

// check $Oa (.'$Oa')
function json_model_2(val, path, rep)
{
    let res;
    // .'$Oa'
    res = _jm_obj_0(val, path, rep);
    return res;
}

// object .'$Ob'
function _jm_obj_1(val, path, rep)
{
    // check open must/may only props
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    let pval;
    let res;
    if (val.hasOwnProperty("b"))
    {
        pval = val["b"];
        // .'$Ob'.b
        res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
        if (! res)
        {
            return false;
        }
    }
    return true;
}

// check $Ob (.'$Ob')
function json_model_3(val, path, rep)
{
    let res;
    // .'$Ob'
    res = _jm_obj_1(val, path, rep);
    return res;
}

// object .'$merge'
function _jm_obj_2(val, path, rep)
{
    // check open must/may only props
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    let pval;
    let res;
    if (val.hasOwnProperty("a"))
    {
        pval = val["a"];
        // .'$merge'.a
        res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
        if (! res)
        {
            return false;
        }
    }
    if (val.hasOwnProperty("b"))
    {
        pval = val["b"];
        // .'$merge'.b
        res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 0;
        if (! res)
        {
            return false;
        }
    }
    return true;
}

// check $merge (.'$merge')
function json_model_4(val, path, rep)
{
    let res;
    // .'$merge'
    res = _jm_obj_2(val, path, rep);
    return res;
}

// object .'$nomerge'.'&'.1
function _jm_obj_3(val, path, rep)
{
    // check close must only props
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        return false;
    }
    if (Object.keys(val).length != 1)
    {
        return false;
    }
    let pval;
    let res;
    if (! val.hasOwnProperty("c"))
    {
        return false;
    }
    pval = val["c"];
    // .'$nomerge'.'&'.1.c
    res = ((typeof pval === 'number' || pval instanceof Number) && Number.isInteger(pval)) && pval >= 1;
    if (! res)
    {
        return false;
    }
    return true;
}

// check $nomerge (.'$nomerge')
function json_model_5(val, path, rep)
{
    let res;
    // .'$nomerge'
    res = true;
    if (res)
    {
        // .'$nomerge'.'&'.0
        res = _jm_obj_0(val, path, rep);
        if (res)
        {
            // .'$nomerge'.'&'.1
            res = _jm_obj_3(val, path, rep);
        }
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    // .'|'.0
    res = _jm_obj_2(val, path, rep);
    if (! res)
    {
        // .'|'.1
        res = json_model_5(val, path, rep);
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_1)
        check_model_map.set("Oa", _jm_obj_0)
        check_model_map.set("Ob", _jm_obj_1)
        check_model_map.set("merge", _jm_obj_2)
        check_model_map.set("nomerge", json_model_5)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
