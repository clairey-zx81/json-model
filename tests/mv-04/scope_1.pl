#! /usr/bin/perl
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
use strict;
use warnings;
use re::engine::RE2;
use JSON::JsonModel;
use constant JMC_VERSION => '2';


sub json_model_4($$$);
sub json_model_3($$$);
sub json_model_1($$$);
sub json_model_5($$$);
my %check_model_map;

# check $r (.'$r')
sub json_model_4($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$r'
    $res = jm_is_array($val) && scalar @$val == 2;
    if ($res)
    {
        # .'$r'.0
        $res = json_model_5($$val[0], undef, $rep);
        if ($res)
        {
            # .'$r'.1
            $res = json_model_5($$val[1], undef, $rep);
        }
    }
    return $res;
}

sub _jm_re_0($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /[a-z]/;
    return $res;
}

# check $s (.'$s')
sub json_model_3($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$s'
    # "/[a-z]/"
    $res = jm_is_string($val) && _jm_re_0($val, $path, $rep);
    return $res;
}

# check $ (.)
sub json_model_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # a string with a lower case later or a digit
    # .
    # .'|'.0
    $res = json_model_3($val, $path, $rep);
    if (! $res)
    {
        # .'|'.1
        $res = json_model_5($val, $path, $rep);
    }
    return $res;
}

sub _jm_re_1($$$)
{
    my ($val, $path, $rep) = @_;
    my $res = $val =~ /[0-9]/;
    return $res;
}

# check $r#s (.'$r#s')
sub json_model_5($$$)
{
    my ($val, $path, $rep) = @_;
    my $res;
    # .'$r#s'
    # "/[0-9]/"
    $res = jm_is_string($val) && _jm_re_1($val, $path, $rep);
    return $res;
}


# initialization of global variables

our $initialized = 0;

sub check_model_init()
{
    if (!$initialized)
    {
        $initialized = 1;
        %check_model_map = (
            '' => \&json_model_1,
            'r' => \&json_model_4,
            's' => \&json_model_3,
        );
    }
}

sub check_model_free()
{
    if ($initialized)
    {
        $initialized = 0;
        %check_model_map = ();
    }
}

sub check_model($$$)
{
    my ($json, $name, $rep) = @_;
    die "unexpected model name \"$name\"" unless exists $check_model_map{$name};
    my $path = defined $rep ? [] : undef;
    return $check_model_map{$name}($json, $path, $rep);
}

#
# SCRIPT EXECUTION
#
check_model_init();
jm_main(\&check_model, \%check_model_map, JMC_VERSION);
check_model_free();
