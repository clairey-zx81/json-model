#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

var check_model_map = new Map()

// object .'$obj'
function _jm_obj_0(val, path, rep)
{
    if (! (Object.prototype.toString.call(val) === '[object Object]'))
    {
        rep !== null && rep.push(["not an object [.'$obj']", path])
        return false;
    }
    let res;
    for (const [prop, pval] of Object.entries(val))
    {
        let lpath_0 = path ? path.concat([prop]) : null;
        // handle other props
        // .'$obj'.''
        res = json_model_3(pval, (path ? lpath_0 : null), rep);
        if (! res)
        {
            rep !== null && rep.push(["unexpected $rec [.'$obj'.'']", (path ? lpath_0 : null)])
            return false;
        }
    }
    return true;
}

// check $obj (.'$obj')
function json_model_2(val, path, rep)
{
    let res;
    // .'$obj'
    res = _jm_obj_0(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected element [.'$obj']", path])
    }
    return res;
}

// check $rec (.'$rec')
function json_model_3(val, path, rep)
{
    let res;
    // .'$rec'
    // .'$rec'.'|'.0
    res = (typeof val === 'boolean' || val instanceof Boolean);
    if (! res)
    {
        rep !== null && rep.push(["not a bool [.'$rec'.'|'.0]", path])
    }
    if (! res)
    {
        // .'$rec'.'|'.1
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            rep !== null && rep.push(["unexpected $obj [.'$rec'.'|'.1]", path])
        }
    }
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["no model matched [.'$rec'.'|']", path])
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = json_model_3(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected $rec [.]", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_3)
        check_model_map.set("obj", _jm_obj_0)
        check_model_map.set("rec", json_model_3)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
