#! /bin/env python
#
# Generated by JSON Model Compiler version 2
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $b (.'$b')
def json_model_2(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$b'
    res = isinstance(val, str) and val == "b"
    if not res:
        rep is None or rep.append(("unexpected _b [.'$b']", path))
    return res

# check $Bb (.'$Bb')
def json_model_3(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Bb'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Bb']", path))
    return res

# check $Rr (.'$Rr')
def json_model_5(val: Jsonable, path: Path, rep: Report) -> bool:
    # .'$Rr'
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.'$Rr']", path))
        return False
    res: bool
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "a":
            # handle may a property
            # .'$Rr'.a
            res = json_model_7(pval, lpath_0 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Aa [.'$Rr'.a]", lpath_0 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.'$Rr'.a]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.'$Rr']", lpath_0 if path is not None else None))
            return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    # .
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_1: Path = (path + [ prop ]) if path is not None else None
        if prop == "RA":
            # handle must RA property
            must_count += 1
            # .RA
            res = json_model_5(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Rr [.RA]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid mandatory prop value [.RA]", lpath_1 if path is not None else None))
                return False
        elif prop == "b":
            # handle may b property
            # .b
            res = json_model_3(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Bb [.b]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.b]", lpath_1 if path is not None else None))
                return False
        elif prop == "a":
            # handle may a property
            # .a
            res = json_model_7(pval, lpath_1 if path is not None else None, rep)
            if not res:
                rep is None or rep.append(("unexpected $Rr#Aa [.a]", lpath_1 if path is not None else None))
                rep is None or rep.append(("invalid optional prop value [.a]", lpath_1 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.]", lpath_1 if path is not None else None))
            return False
    if must_count != 1:
        if rep is not None:
            if not "RA" in val:
                rep is None or rep.append(("missing mandatory prop <RA> [.]", path))
        return False
    return True

# check $Rr#Aa (.'$Rr#Aa')
def json_model_7(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .'$Rr#Aa'
    res = isinstance(val, str)
    if not res:
        rep is None or rep.append(("unexpected string [.'$Rr#Aa']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
            "b": json_model_2,
            "Bb": json_model_3,
            "Rr": json_model_5,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False

if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
