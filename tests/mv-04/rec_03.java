//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class rec_03 extends ModelChecker
{
    static public final String VERSION = "2";

    public Map<String, Checker> rec_03_map_pmap;

    // object .
    public boolean _jm_obj_0(Object val, Path path, Report rep)
    {
        if (! json.isObject(val))
        {
            if (rep != null) rep.addEntry("not an object [.]", path);
            return false;
        }
        boolean res;
        Iterator<String> prop_loop = json.objectIterator(val);
        while (prop_loop.hasNext())
        {
            String prop = prop_loop.next();
            Object pval = json.objectValue(val, prop);
            Path lpath_0 = new Path(prop, path);
            if (prop.compareTo("foo") == 0)
            {
                // handle may foo property
                // .foo
                // .foo.'|'.0
                res = json_model_1(pval, (path != null ? lpath_0 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $root [.foo.'|'.0]", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    // .foo.'|'.1
                    res = json.isArray(pval);
                    if (res)
                    {
                        int arr_0_idx = -1;
                        Iterator<Object> arr_0_item_loop = json.arrayIterator(pval);
                        while (arr_0_item_loop.hasNext())
                        {
                            arr_0_idx++;
                            Object arr_0_item = arr_0_item_loop.next();
                            Path arr_0_lpath = new Path(arr_0_idx, (path != null ? lpath_0 : null));
                            // .foo.'|'.1.0
                            res = json_model_1(arr_0_item, ((path != null ? lpath_0 : null) != null ? arr_0_lpath : null), rep);
                            if (! res)
                            {
                                if (rep != null) rep.addEntry("unexpected $root [.foo.'|'.1.0]", ((path != null ? lpath_0 : null) != null ? arr_0_lpath : null));
                            }
                            if (! res)
                            {
                                break;
                            }
                        }
                    }
                    if (! res)
                    {
                        if (rep != null) rep.addEntry("not array or unexpected array [.foo.'|'.1]", (path != null ? lpath_0 : null));
                    }
                }
                if (res)
                {
                    if (rep != null) rep.clearEntries();
                }
                else
                {
                    if (rep != null) rep.addEntry("no model matched [.foo.'|']", (path != null ? lpath_0 : null));
                }
                if (! res)
                {
                    if (rep != null) rep.addEntry("invalid optional prop value [.foo]", (path != null ? lpath_0 : null));
                    return false;
                }
            }
            else
            {
                if (rep != null) rep.addEntry("unexpected prop [.]", (path != null ? lpath_0 : null));
                return false;
            }
        }
        return true;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // Recursion test 03
        // .
        res = _jm_obj_0(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected element [.]", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            rec_03_map_pmap = new HashMap<String, Checker>();
            rec_03_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            rec_03_map_pmap.put("root", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            rec_03_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return rec_03_map_pmap.get(name);
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new rec_03();
        Main.main("rec_03", checker, VERSION, args);
    }
}
