#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2";

const _jm_re_0_re = new runtime.RX("[a-z]", "")
const _jm_re_1_re = new runtime.RX("[0-9]", "")
var check_model_map = new Map()

// check $r (.'$r')
function json_model_4(val, path, rep)
{
    let res;
    // .'$r'
    res = Array.isArray(val) && val.length == 2;
    if (res)
    {
        let lpath_0 = path ? path.concat([0]) : null;
        // .'$r'.0
        res = json_model_5(val[0], (path ? lpath_0 : null), rep);
        if (! res)
        {
            rep !== null && rep.push(["unexpected $s [.'$r'.0]", (path ? lpath_0 : null)])
        }
        if (res)
        {
            lpath_0 = path ? path.concat([1]) : null;
            // .'$r'.1
            res = json_model_5(val[1], (path ? lpath_0 : null), rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected $s [.'$r'.1]", (path ? lpath_0 : null)])
            }
        }
    }
    if (! res)
    {
        rep !== null && rep.push(["not array or unexpected array [.'$r']", path])
    }
    return res;
}

const _jm_re_0 = (s) => _jm_re_0_re.exec(s) !== null

// check $s (.'$s')
function json_model_3(val, path, rep)
{
    let res;
    // .'$s'
    // "/[a-z]/"
    res = ((typeof val === 'string' || val instanceof String)) && _jm_re_0(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected /[a-z]/ [.'$s']", path])
    }
    return res;
}

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // a string with a lower case later or a digit
    // .
    // .'|'.0
    res = json_model_3(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected $s [.'|'.0]", path])
    }
    if (! res)
    {
        // .'|'.1
        res = json_model_5(val, path, rep);
        if (! res)
        {
            rep !== null && rep.push(["unexpected $r#s [.'|'.1]", path])
        }
    }
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["no model matched [.'|']", path])
    }
    return res;
}

const _jm_re_1 = (s) => _jm_re_1_re.exec(s) !== null

// check $r#s (.'$r#s')
function json_model_5(val, path, rep)
{
    let res;
    // .'$r#s'
    // "/[0-9]/"
    res = ((typeof val === 'string' || val instanceof String)) && _jm_re_1(val, path, rep);
    if (! res)
    {
        rep !== null && rep.push(["unexpected /[0-9]/ [.'$r#s']", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_1)
        check_model_map.set("r", json_model_4)
        check_model_map.set("s", json_model_3)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
