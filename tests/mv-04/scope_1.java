//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//

import json_model.*;
import java.util.Map;
import java.util.Set;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

@SuppressWarnings("unchecked")
public class scope_1 extends ModelChecker
{
    static public final String VERSION = "2";

    public Pattern _jm_re_0_pat = null;
    public Pattern _jm_re_1_pat = null;
    public Map<String, Checker> scope_1_map_pmap;

    // check $R (.'$R')
    public boolean json_model_4(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$R'
        res = json.isArray(val) && json.arrayLength(val) == 2;
        if (res)
        {
            Path lpath_0 = new Path(0, path);
            // .'$R'.0
            res = json_model_5(json.arrayItem(val, 0), (path != null ? lpath_0 : null), rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $S [.'$R'.0]", (path != null ? lpath_0 : null));
            }
            if (res)
            {
                lpath_0 = new Path(1, path);
                // .'$R'.1
                res = json_model_5(json.arrayItem(val, 1), (path != null ? lpath_0 : null), rep);
                if (! res)
                {
                    if (rep != null) rep.addEntry("unexpected $S [.'$R'.1]", (path != null ? lpath_0 : null));
                }
            }
        }
        if (! res)
        {
            if (rep != null) rep.addEntry("not array or unexpected array [.'$R']", path);
        }
        return res;
    }
    
    public boolean _jm_re_0(String val, Path path, Report rep)
    {
        return _jm_re_0_pat.matcher(val).find();
    }
    
    // check $S (.'$S')
    public boolean json_model_3(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$S'
        // "/[a-z]/"
        res = json.isString(val) && _jm_re_0(json.asString(val), path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected /[a-z]/ [.'$S']", path);
        }
        return res;
    }
    
    // check $ (.)
    public boolean json_model_1(Object val, Path path, Report rep)
    {
        boolean res;
        // a string with a lower case later or a digit
        // .
        // .'|'.0
        res = json_model_3(val, path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected $S [.'|'.0]", path);
        }
        if (! res)
        {
            // .'|'.1
            res = json_model_5(val, path, rep);
            if (! res)
            {
                if (rep != null) rep.addEntry("unexpected $R#S [.'|'.1]", path);
            }
        }
        if (res)
        {
            if (rep != null) rep.clearEntries();
        }
        else
        {
            if (rep != null) rep.addEntry("no model matched [.'|']", path);
        }
        return res;
    }
    
    public boolean _jm_re_1(String val, Path path, Report rep)
    {
        return _jm_re_1_pat.matcher(val).find();
    }
    
    // check $R#S (.'$R#S')
    public boolean json_model_5(Object val, Path path, Report rep)
    {
        boolean res;
        // .'$R#S'
        // "/[0-9]/"
        res = json.isString(val) && _jm_re_1(json.asString(val), path, rep);
        if (! res)
        {
            if (rep != null) rep.addEntry("unexpected /[0-9]/ [.'$R#S']", path);
        }
        return res;
    }
    

    public void init(JSON json)
    {
        if (!initialized)
        {
            try {
            _jm_re_0_pat = Pattern.compile("[a-z]");
            _jm_re_1_pat = Pattern.compile("[0-9]");
            scope_1_map_pmap = new HashMap<String, Checker>();
            scope_1_map_pmap.put("", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_1(o, p, r);} });
            scope_1_map_pmap.put("R", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_4(o, p, r);} });
            scope_1_map_pmap.put("S", new Checker() { public boolean call(Object o, Path p, Report r) { return json_model_3(o, p, r);} });
                super.init(json);
            }
            catch (Exception e) {
                throw new Error("cannot initialized model checker: " + e);
            }
        }
    }

    public void free()
    {
        if (initialized)
        {
            super.free();
            _jm_re_0_pat = null;
            _jm_re_1_pat = null;
            scope_1_map_pmap = null;
        }
    }

    public Checker get(String name)
    {
        return scope_1_map_pmap.get(name);
    }

    public Set<String> models()
    {
        return scope_1_map_pmap.keySet();
    }

    static public void main(String[] args) throws Exception
    {
        ModelChecker checker = new scope_1();
        Main.main("scope_1", checker, VERSION, args);
    }
}
