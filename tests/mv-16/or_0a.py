#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# check $ ($)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # $
    res = isinstance(val, int) and not isinstance(val, bool)
    if not res:
        rep is None or rep.append(("unexpected type at [$.'|']", path))
    if res:
        # $.'|'.0
        res = val == 200
        if not res:
            rep is None or rep.append(("unexpected =200 [$.'|'.0]", path))
        if not res:
            # $.'|'.1
            res = val == 300
            if not res:
                rep is None or rep.append(("unexpected =300 [$.'|'.1]", path))
            if not res:
                # $.'|'.2
                res = val == 400
                if not res:
                    rep is None or rep.append(("unexpected =400 [$.'|'.2]", path))
                if not res:
                    # $.'|'.3
                    res = val == 500
                    if not res:
                        rep is None or rep.append(("unexpected =500 [$.'|'.3]", path))
        if res:
            rep is None or rep.clear()
        else:
            rep is None or rep.append(("no model matched [$.'|']", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
