#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2.0b1
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2.0b1";

let _jm_cst_0 = new Set()
const _jm_re_0_re = new runtime.RX("[0-9]", "")
var check_model_map = new Map()

const _jm_re_0 = (s) => _jm_re_0_re.exec(s) !== null

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = ((val === null || (typeof val === 'number' || val instanceof Number) || (typeof val === 'boolean' || val instanceof Boolean) || (typeof val === 'string' || val instanceof String))) && _jm_cst_0.has(val);
    if (! res)
    {
        rep !== null && rep.push(["value not in enum [.'|']", path])
    }
    if (! res)
    {
        res = (typeof val === 'string' || val instanceof String);
        if (! res)
        {
            rep !== null && rep.push(["unexpected type [.'|']", path])
        }
        if (res)
        {
            // .'|'.0
            // "/[0-9]/"
            res = _jm_re_0(val, path, rep);
            if (! res)
            {
                rep !== null && rep.push(["unexpected /[0-9]/ [.'|'.0]", path])
            }
            if (res)
            {
                if (rep !== null) rep.length = 0
            }
            else
            {
                rep !== null && rep.push(["no model matched [.'|']", path])
            }
        }
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        _jm_cst_0.add("Susie")
        _jm_cst_0.add("Calvin")
        check_model_map.set("", json_model_1)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
