#! /bin/env python
#
# Generated by JSON Model Compiler version 2.0a0
# see https://github.com/clairey-zx81/json-model
#
from typing import Callable
import re2 as re
from json_model.runtime import *
__version__ = "2.0a0"

def check_model_fun(name: str) -> CheckFun:
    """Return check function for JSON model name."""
    return check_model_map[name]

# entry point for generated checkers
def check_model(val: Jsonable, name: str = "", rep: Report = None) -> bool:
    """Check val validity agains JSON Model name."""
    if name not in check_model_map:
        raise Exception(f"unexpected model name: {name}")
    checker = check_model_map[name]
    return checker(val, [], rep)

check_model_map: PropMap

# object .
def _jm_obj_0(val: Jsonable, path: Path, rep: Report) -> bool:
    if not isinstance(val, dict):
        rep is None or rep.append(("not an object [.]", path))
        return False
    res: bool
    must_count: int = 0
    for prop, pval in val.items():
        assert isinstance(prop, str)
        lpath_0: Path = (path + [ prop ]) if path is not None else None
        if prop == "nom":
            # handle must nom property
            must_count += 1
            # .nom
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.nom]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory property value [..nom]", lpath_0 if path is not None else None))
                return False
        elif prop == "prenom":
            # handle must prenom property
            must_count += 1
            # .prenom
            res = isinstance(pval, str)
            if not res:
                rep is None or rep.append(("unexpected string [.prenom]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid mandatory property value [..prenom]", lpath_0 if path is not None else None))
                return False
        elif prop == "age":
            # handle may age property
            # .age
            res = isinstance(pval, int) and not isinstance(pval, bool) and pval >= 0
            if not res:
                rep is None or rep.append(("not a 0 strict int [.age]", lpath_0 if path is not None else None))
            if not res:
                rep is None or rep.append(("invalid may property value [..age]", lpath_0 if path is not None else None))
                return False
        else:
            rep is None or rep.append(("unexpected prop [.]", lpath_0 if path is not None else None))
            return False
    if must_count != 2:
        if rep is not None:
            if not "nom" in val:
                rep is None or rep.append(("missing mandatory prop <nom> [.]", path))
            if not "prenom" in val:
                rep is None or rep.append(("missing mandatory prop <prenom> [.]", path))
        return False
    return True

# check $ (.)
def json_model_1(val: Jsonable, path: Path, rep: Report) -> bool:
    res: bool
    # .
    res = _jm_obj_0(val, path, rep)
    if not res:
        rep is None or rep.append(("not an expected object [.]", path))
    return res


# initialization guard
initialized: bool = False

# differed module initializations
def check_model_init():
    global initialized
    if not initialized:
        initialized = True
        global check_model_map
        check_model_map = {
            "": json_model_1,
        }

# differed module cleanup
def check_model_free():
    global initialized
    if initialized:
        initialized = False


if __name__ == "__main__":
    check_model_init()
    main(check_model_fun, check_model_map, __version__)
    check_model_free()
