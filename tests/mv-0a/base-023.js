#! /bin/env node
// we may need require to load re2
import { createRequire } from 'node:module';
const require = createRequire(import.meta.url);
//
// Generated by JSON Model Compiler version 2.0b0
// see https://github.com/clairey-zx81/json-model
//
import * as runtime from "json_model_runtime"
const JSON_MODEL_VERSION = "2.0b0";

var check_model_map = new Map()

// check $ (.)
function json_model_1(val, path, rep)
{
    let res;
    // .
    res = (typeof val === 'string' || val instanceof String);
    if (res)
    {
        // .'&'.0
        res = true;
        if (! res)
        {
            rep !== null && rep.push(["unexpected string [.'&'.0]", path])
        }
        if (res)
        {
            // .'&'.1
            // .'&'.1.'@'
            res = (typeof val === 'string' || val instanceof String);
            if (! res)
            {
                rep !== null && rep.push(["unexpected string [.'&'.1.'@']", path])
            }
            if (res)
            {
                let ival_0 = val.length;
                res = ival_0 <= 5;
            }
            if (! res)
            {
                rep !== null && rep.push(["constraints failed [.'&'.1]", path])
            }
        }
    }
    if (res)
    {
        if (rep !== null) rep.length = 0
    }
    else
    {
        rep !== null && rep.push(["not all model match [.'&']", path])
    }
    return res;
}


var initialized = false

// differed module initializations
export function check_model_init()
{
    if (! initialized)
    {
        initialized = true;
        runtime.jm_set_rx(RegExp)
        check_model_map.set("", json_model_1)
    }
}

// differed module cleanup
export function check_model_free()
{
    if (initialized)
    {
        initialized = false;
    }
}

export function check_model(val, name, rep)
{
    let checker = check_model_map.get(name)
    if (checker === undefined)
        throw `no checker for "${name}"`
    let path = rep !== null ? [] : null

    return checker(val, path, rep)
}

// possibly run as main based on a guess
import main from "json_model_runtime/main.js"

if (import.meta.url.endsWith(process.argv[1]))
    main(check_model_init, check_model, check_model_free)
